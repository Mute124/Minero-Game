<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2experimental_2bits_2simd__neon_8h_source" xml:lang="en-US">
<title>simd_neon.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/experimental/bits/simd_neon.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Simd&#32;NEON&#32;specific&#32;implementations&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2020-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_EXPERIMENTAL_SIMD_NEON_H_</emphasis>
26 <emphasis role="preprocessor">#define&#32;_GLIBCXX_EXPERIMENTAL_SIMD_NEON_H_</emphasis>
27 
28 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
29 
30 <emphasis role="preprocessor">#if&#32;!_GLIBCXX_SIMD_HAVE_NEON</emphasis>
31 <emphasis role="preprocessor">#error&#32;&quot;simd_neon.h&#32;may&#32;only&#32;be&#32;included&#32;when&#32;NEON&#32;on&#32;ARM&#32;is&#32;available&quot;</emphasis>
32 <emphasis role="preprocessor">#endif</emphasis>
33 
34 _GLIBCXX_SIMD_BEGIN_NAMESPACE
35 
36 <emphasis role="comment">//&#32;_CommonImplNeon&#32;{{{</emphasis>
37 <emphasis role="keyword">struct&#32;</emphasis>_CommonImplNeon&#32;:&#32;_CommonImplBuiltin
38 {
39 &#32;&#32;<emphasis role="comment">//&#32;_S_store&#32;{{{</emphasis>
40 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_CommonImplBuiltin::_S_store;
41 
42 &#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
43 };
44 
45 <emphasis role="comment">//&#32;}}}</emphasis>
46 <emphasis role="comment">//&#32;_SimdImplNeon&#32;{{{</emphasis>
47 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Abi,&#32;<emphasis role="keyword">typename</emphasis>&gt;
48 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SimdImplNeon&#32;:&#32;_SimdImplBuiltin&lt;_Abi&gt;
49 &#32;&#32;{
50 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base&#32;=&#32;_SimdImplBuiltin&lt;_Abi&gt;;
51 
52 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
53 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_MaskMember&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::template&#32;_MaskMember&lt;_Tp&gt;;
54 
55 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
56 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_max_store_size&#32;=&#32;16;
57 
58 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_masked_load&#32;{{{</emphasis>
59 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
60 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
61 &#32;&#32;&#32;&#32;&#32;&#32;_S_masked_load(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__merge,&#32;_MaskMember&lt;_Tp&gt;&#32;__k,
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Up*&#32;__mem)&#32;<emphasis role="keyword">noexcept</emphasis>
63 &#32;&#32;&#32;&#32;&#32;&#32;{
64 &#32;&#32;&#32;&#32;__execute_n_times&lt;_Np&gt;([&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{
65 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__k[__i]&#32;!=&#32;0)
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__merge._M_set(__i,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__mem[__i]));
67 &#32;&#32;&#32;&#32;});
68 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__merge;
69 &#32;&#32;&#32;&#32;&#32;&#32;}
70 
71 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
72 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_masked_store_nocvt&#32;{{{</emphasis>
73 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
74 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
75 &#32;&#32;&#32;&#32;&#32;&#32;_S_masked_store_nocvt(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__v,&#32;_Tp*&#32;__mem,
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_MaskMember&lt;_Tp&gt;&#32;__k)
77 &#32;&#32;&#32;&#32;&#32;&#32;{
78 &#32;&#32;&#32;&#32;__execute_n_times&lt;_Np&gt;([&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{
79 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__k[__i]&#32;!=&#32;0)
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mem[__i]&#32;=&#32;__v[__i];
81 &#32;&#32;&#32;&#32;});
82 &#32;&#32;&#32;&#32;&#32;&#32;}
83 
84 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
85 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_reduce&#32;{{{</emphasis>
86 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryOperation&gt;
87 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_Tp
88 &#32;&#32;&#32;&#32;&#32;&#32;_S_reduce(simd&lt;_Tp,&#32;_Abi&gt;&#32;__x,&#32;_BinaryOperation&amp;&amp;&#32;__binary_op)
89 &#32;&#32;&#32;&#32;&#32;&#32;{
90 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&#32;=&#32;__x.size();
91 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__x)&#32;==&#32;16&#32;&amp;&amp;&#32;_Np&#32;&gt;=&#32;4
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!_Abi::template&#32;_S_is_partial&lt;_Tp&gt;)
93 &#32;&#32;&#32;&#32;&#32;&#32;{
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__halves&#32;=&#32;split&lt;simd&lt;_Tp,&#32;simd_abi::_Neon&lt;8&gt;&gt;&gt;(__x);
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__y&#32;=&#32;__binary_op(__halves[0],&#32;__halves[1]);
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_SimdImplNeon&lt;simd_abi::_Neon&lt;8&gt;&gt;::_S_reduce(
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__y,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_BinaryOperation&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__binary_op));
98 &#32;&#32;&#32;&#32;&#32;&#32;}
99 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;==&#32;8)
100 &#32;&#32;&#32;&#32;&#32;&#32;{
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;__binary_op(__x,&#32;_Base::template&#32;_M_make_simd&lt;_Tp,&#32;_Np&gt;(
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_permute&lt;1,&#32;0,&#32;3,&#32;2,&#32;5,&#32;4,&#32;7,&#32;6&gt;(
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x._M_data)));
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;__binary_op(__x,&#32;_Base::template&#32;_M_make_simd&lt;_Tp,&#32;_Np&gt;(
105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_permute&lt;3,&#32;2,&#32;1,&#32;0,&#32;7,&#32;6,&#32;5,&#32;4&gt;(
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x._M_data)));
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;__binary_op(__x,&#32;_Base::template&#32;_M_make_simd&lt;_Tp,&#32;_Np&gt;(
108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_permute&lt;7,&#32;6,&#32;5,&#32;4,&#32;3,&#32;2,&#32;1,&#32;0&gt;(
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x._M_data)));
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x[0];
111 &#32;&#32;&#32;&#32;&#32;&#32;}
112 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;==&#32;4)
113 &#32;&#32;&#32;&#32;&#32;&#32;{
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__binary_op(__x,&#32;_Base::template&#32;_M_make_simd&lt;_Tp,&#32;_Np&gt;(
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_permute&lt;1,&#32;0,&#32;3,&#32;2&gt;(__x._M_data)));
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__binary_op(__x,&#32;_Base::template&#32;_M_make_simd&lt;_Tp,&#32;_Np&gt;(
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_permute&lt;3,&#32;2,&#32;1,&#32;0&gt;(__x._M_data)));
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x[0];
121 &#32;&#32;&#32;&#32;&#32;&#32;}
122 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;==&#32;2)
123 &#32;&#32;&#32;&#32;&#32;&#32;{
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;__binary_op(__x,&#32;_Base::template&#32;_M_make_simd&lt;_Tp,&#32;_Np&gt;(
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_permute&lt;1,&#32;0&gt;(__x._M_data)));
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x[0];
127 &#32;&#32;&#32;&#32;&#32;&#32;}
128 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
129 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_reduce(__x,
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_BinaryOperation&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__binary_op));
131 &#32;&#32;&#32;&#32;&#32;&#32;}
132 
133 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
134 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;math&#32;{{{</emphasis>
135 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_sqrt&#32;{{{</emphasis>
136 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT&#32;=&#32;_VectorTraits&lt;_Tp&gt;&gt;
137 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_Tp&#32;_S_sqrt(_Tp&#32;__x)
138 &#32;&#32;&#32;&#32;&#32;&#32;{
139 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_neon_a64)
140 &#32;&#32;&#32;&#32;&#32;&#32;{
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__intrin&#32;=&#32;__to_intrin(__x);
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;float,&#32;2&gt;)
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vsqrt_f32(__intrin);
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;float,&#32;4&gt;)
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vsqrtq_f32(__intrin);
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;double,&#32;1&gt;)
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vsqrt_f64(__intrin);
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;double,&#32;2&gt;)
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vsqrtq_f64(__intrin);
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
152 &#32;&#32;&#32;&#32;&#32;&#32;}
153 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
154 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_sqrt(__x);
155 &#32;&#32;&#32;&#32;&#32;&#32;}
156 
157 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
158 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_trunc&#32;{{{</emphasis>
159 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_TW,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT&#32;=&#32;_VectorTraits&lt;_TW&gt;&gt;
160 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_TW&#32;_S_trunc(_TW&#32;__x)
161 &#32;&#32;&#32;&#32;&#32;&#32;{
162 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT::value_type;
163 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_neon_a32)
164 &#32;&#32;&#32;&#32;&#32;&#32;{
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__intrin&#32;=&#32;__to_intrin(__x);
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;float,&#32;2&gt;)
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vrnd_f32(__intrin);
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;float,&#32;4&gt;)
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vrndq_f32(__intrin);
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;double,&#32;1&gt;)
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vrnd_f64(__intrin);
172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;double,&#32;2&gt;)
173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vrndq_f64(__intrin);
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
176 &#32;&#32;&#32;&#32;&#32;&#32;}
177 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Tp,&#32;float&gt;)
178 &#32;&#32;&#32;&#32;&#32;&#32;{
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__intrin&#32;=&#32;__to_intrin(__x);
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__x)&#32;==&#32;16)
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__intrin&#32;=&#32;vcvtq_f32_s32(vcvtq_s32_f32(__intrin));
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__intrin&#32;=&#32;vcvt_f32_s32(vcvt_s32_f32(__intrin));
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_abs(__x)._M_data&#32;&lt;&#32;0x1p23f
185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;__vector_bitcast&lt;float&gt;(__intrin)
186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;__x._M_data;
187 &#32;&#32;&#32;&#32;&#32;&#32;}
188 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
189 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_trunc(__x);
190 &#32;&#32;&#32;&#32;&#32;&#32;}
191 
192 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
193 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_round&#32;{{{</emphasis>
194 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
195 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
196 &#32;&#32;&#32;&#32;&#32;&#32;_S_round(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x)
197 &#32;&#32;&#32;&#32;&#32;&#32;{
198 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_neon_a32)
199 &#32;&#32;&#32;&#32;&#32;&#32;{
200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__intrin&#32;=&#32;__to_intrin(__x);
201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__x)&#32;==&#32;8)
202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vrnda_f32(__intrin);
203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__x)&#32;==&#32;16)
204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vrndaq_f32(__intrin);
205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__x)&#32;==&#32;8)
206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vrnda_f64(__intrin);
207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__x)&#32;==&#32;16)
208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vrndaq_f64(__intrin);
209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
211 &#32;&#32;&#32;&#32;&#32;&#32;}
212 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
213 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_round(__x);
214 &#32;&#32;&#32;&#32;&#32;&#32;}
215 
216 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
217 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_floor&#32;{{{</emphasis>
218 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT&#32;=&#32;_VectorTraits&lt;_Tp&gt;&gt;
219 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_Tp&#32;_S_floor(_Tp&#32;__x)
220 &#32;&#32;&#32;&#32;&#32;&#32;{
221 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_neon_a32)
222 &#32;&#32;&#32;&#32;&#32;&#32;{
223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__intrin&#32;=&#32;__to_intrin(__x);
224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;float,&#32;2&gt;)
225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vrndm_f32(__intrin);
226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;float,&#32;4&gt;)
227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vrndmq_f32(__intrin);
228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;double,&#32;1&gt;)
229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vrndm_f64(__intrin);
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;double,&#32;2&gt;)
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vrndmq_f64(__intrin);
232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
234 &#32;&#32;&#32;&#32;&#32;&#32;}
235 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
236 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_floor(__x);
237 &#32;&#32;&#32;&#32;&#32;&#32;}
238 
239 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
240 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_ceil&#32;{{{</emphasis>
241 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT&#32;=&#32;_VectorTraits&lt;_Tp&gt;&gt;
242 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_Tp&#32;_S_ceil(_Tp&#32;__x)
243 &#32;&#32;&#32;&#32;&#32;&#32;{
244 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_neon_a32)
245 &#32;&#32;&#32;&#32;&#32;&#32;{
246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__intrin&#32;=&#32;__to_intrin(__x);
247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;float,&#32;2&gt;)
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vrndp_f32(__intrin);
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;float,&#32;4&gt;)
250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vrndpq_f32(__intrin);
251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;double,&#32;1&gt;)
252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vrndp_f64(__intrin);
253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;double,&#32;2&gt;)
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vrndpq_f64(__intrin);
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
257 &#32;&#32;&#32;&#32;&#32;&#32;}
258 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
259 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_ceil(__x);
260 &#32;&#32;&#32;&#32;&#32;&#32;}
261 
262 &#32;&#32;&#32;&#32;<emphasis role="comment">//}}}&#32;}}}</emphasis>
263 &#32;&#32;};&#32;<emphasis role="comment">//&#32;}}}</emphasis>
264 <emphasis role="comment">//&#32;_MaskImplNeonMixin&#32;{{{</emphasis>
265 <emphasis role="keyword">struct&#32;</emphasis>_MaskImplNeonMixin
266 {
267 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base&#32;=&#32;_MaskImplBuiltinMixin;
268 
269 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
270 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SanitizedBitMask&lt;_Np&gt;
271 &#32;&#32;&#32;&#32;_S_to_bits(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x)
272 &#32;&#32;&#32;&#32;{
273 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_is_constant_evaluated())
274 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_to_bits(__x);
275 
276 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_I&#32;=&#32;__int_for_sizeof_t&lt;_Tp&gt;;
277 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__x)&#32;==&#32;16)
278 &#32;&#32;&#32;&#32;{
279 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__asint&#32;=&#32;__vector_bitcast&lt;_I&gt;(__x);
280 <emphasis role="preprocessor">#ifdef&#32;__aarch64__</emphasis>
281 &#32;&#32;&#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__zero&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(__asint)();
282 <emphasis role="preprocessor">#else</emphasis>
283 &#32;&#32;&#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__zero&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(__lo64(__asint))();
284 <emphasis role="preprocessor">#endif</emphasis>
285 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1)
286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__bitsel
288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__generate_from_n_evaluations&lt;16,&#32;__vector_type_t&lt;_I,&#32;16&gt;&gt;(
289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{
290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_I<emphasis role="keyword">&gt;</emphasis>(
291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__i&#32;&lt;&#32;_Np&#32;?&#32;(__i&#32;&lt;&#32;8&#32;?&#32;1&#32;&lt;&lt;&#32;__i&#32;:&#32;1&#32;&lt;&lt;&#32;(__i&#32;-&#32;8))&#32;:&#32;0);
292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asint&#32;&amp;=&#32;__bitsel;
294 <emphasis role="preprocessor">#ifdef&#32;__aarch64__</emphasis>
295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_UShort&gt;(
296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vpaddq_s8(vpaddq_s8(vpaddq_s8(__asint,&#32;__zero),&#32;__zero),
297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__zero))[0];
298 <emphasis role="preprocessor">#else</emphasis>
299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_UShort&gt;(
300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vpadd_s8(vpadd_s8(vpadd_s8(__lo64(__asint),&#32;__hi64(__asint)),
301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__zero),
302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__zero))[0];
303 <emphasis role="preprocessor">#endif</emphasis>
304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
305 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2)
306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__bitsel
308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__generate_from_n_evaluations&lt;8,&#32;__vector_type_t&lt;_I,&#32;8&gt;&gt;(
309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{
310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_I<emphasis role="keyword">&gt;</emphasis>(__i&#32;&lt;&#32;_Np&#32;?&#32;1&#32;&lt;&lt;&#32;__i&#32;:&#32;0);
311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asint&#32;&amp;=&#32;__bitsel;
313 <emphasis role="preprocessor">#ifdef&#32;__aarch64__</emphasis>
314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vaddvq_s16(__asint);
315 <emphasis role="preprocessor">#else</emphasis>
316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vpadd_s16(
317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vpadd_s16(vpadd_s16(__lo64(__asint),&#32;__hi64(__asint)),&#32;__zero),
318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__zero)[0];
319 <emphasis role="preprocessor">#endif</emphasis>
320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
321 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__bitsel
324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__generate_from_n_evaluations&lt;4,&#32;__vector_type_t&lt;_I,&#32;4&gt;&gt;(
325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{
326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_I<emphasis role="keyword">&gt;</emphasis>(__i&#32;&lt;&#32;_Np&#32;?&#32;1&#32;&lt;&lt;&#32;__i&#32;:&#32;0);
327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asint&#32;&amp;=&#32;__bitsel;
329 <emphasis role="preprocessor">#ifdef&#32;__aarch64__</emphasis>
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vaddvq_s32(__asint);
331 <emphasis role="preprocessor">#else</emphasis>
332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vpadd_s32(vpadd_s32(__lo64(__asint),&#32;__hi64(__asint)),
333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__zero)[0];
334 <emphasis role="preprocessor">#endif</emphasis>
335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
336 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__asint[0]&#32;&amp;&#32;1)&#32;|&#32;(__asint[1]&#32;&amp;&#32;2);
338 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
340 &#32;&#32;&#32;&#32;}
341 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__x)&#32;==&#32;8)
342 &#32;&#32;&#32;&#32;{
343 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__asint&#32;=&#32;__vector_bitcast&lt;_I&gt;(__x);
344 &#32;&#32;&#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__zero&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(__asint)();
345 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1)
346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__bitsel
348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__generate_from_n_evaluations&lt;8,&#32;__vector_type_t&lt;_I,&#32;8&gt;&gt;(
349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{
350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_I<emphasis role="keyword">&gt;</emphasis>(__i&#32;&lt;&#32;_Np&#32;?&#32;1&#32;&lt;&lt;&#32;__i&#32;:&#32;0);
351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asint&#32;&amp;=&#32;__bitsel;
353 <emphasis role="preprocessor">#ifdef&#32;__aarch64__</emphasis>
354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vaddv_s8(__asint);
355 <emphasis role="preprocessor">#else</emphasis>
356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vpadd_s8(vpadd_s8(vpadd_s8(__asint,&#32;__zero),&#32;__zero),
357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__zero)[0];
358 <emphasis role="preprocessor">#endif</emphasis>
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
360 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2)
361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__bitsel
363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__generate_from_n_evaluations&lt;4,&#32;__vector_type_t&lt;_I,&#32;4&gt;&gt;(
364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{
365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_I<emphasis role="keyword">&gt;</emphasis>(__i&#32;&lt;&#32;_Np&#32;?&#32;1&#32;&lt;&lt;&#32;__i&#32;:&#32;0);
366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asint&#32;&amp;=&#32;__bitsel;
368 <emphasis role="preprocessor">#ifdef&#32;__aarch64__</emphasis>
369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vaddv_s16(__asint);
370 <emphasis role="preprocessor">#else</emphasis>
371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vpadd_s16(vpadd_s16(__asint,&#32;__zero),&#32;__zero)[0];
372 <emphasis role="preprocessor">#endif</emphasis>
373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
374 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__asint&#32;&amp;=&#32;__make_vector&lt;_I&gt;(0x1,&#32;0x2);
377 <emphasis role="preprocessor">#ifdef&#32;__aarch64__</emphasis>
378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vaddv_s32(__asint);
379 <emphasis role="preprocessor">#else</emphasis>
380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vpadd_s32(__asint,&#32;__zero)[0];
381 <emphasis role="preprocessor">#endif</emphasis>
382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
383 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
385 &#32;&#32;&#32;&#32;}
386 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
387 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_to_bits(__x);
388 &#32;&#32;&#32;&#32;}
389 };
390 
391 <emphasis role="comment">//&#32;}}}</emphasis>
392 <emphasis role="comment">//&#32;_MaskImplNeon&#32;{{{</emphasis>
393 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Abi,&#32;<emphasis role="keyword">typename</emphasis>&gt;
394 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_MaskImplNeon&#32;:&#32;_MaskImplNeonMixin,&#32;_MaskImplBuiltin&lt;_Abi&gt;
395 &#32;&#32;{
396 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_MaskImplBuiltinMixin::_S_to_maskvector;
397 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_MaskImplNeonMixin::_S_to_bits;
398 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base&#32;=&#32;_MaskImplBuiltin&lt;_Abi&gt;;
399 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::_S_convert;
400 
401 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_all_of&#32;{{{</emphasis>
402 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
403 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_S_all_of(simd_mask&lt;_Tp,&#32;_Abi&gt;&#32;__k)
404 &#32;&#32;&#32;&#32;&#32;&#32;{
405 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__kk
406 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__vector_bitcast&lt;char&gt;(__k._M_data)
407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;~__vector_bitcast&lt;char&gt;(_Abi::template&#32;_S_implicit_mask&lt;_Tp&gt;());
408 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__k)&#32;==&#32;16)
409 &#32;&#32;&#32;&#32;&#32;&#32;{
410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__x&#32;=&#32;__vector_bitcast&lt;long&#32;long&gt;(__kk);
411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x[0]&#32;+&#32;__x[1]&#32;==&#32;-2;
412 &#32;&#32;&#32;&#32;&#32;&#32;}
413 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__k)&#32;&lt;=&#32;8)
414 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__bit_cast&lt;__int_for_sizeof_t&lt;<emphasis role="keyword">decltype</emphasis>(__kk)&gt;&gt;(__kk)&#32;==&#32;-1;
415 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
416 &#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
417 &#32;&#32;&#32;&#32;&#32;&#32;}
418 
419 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
420 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_any_of&#32;{{{</emphasis>
421 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
422 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_S_any_of(simd_mask&lt;_Tp,&#32;_Abi&gt;&#32;__k)
423 &#32;&#32;&#32;&#32;&#32;&#32;{
424 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__kk
425 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__vector_bitcast&lt;char&gt;(__k._M_data)
426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;~__vector_bitcast&lt;char&gt;(_Abi::template&#32;_S_implicit_mask&lt;_Tp&gt;());
427 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__k)&#32;==&#32;16)
428 &#32;&#32;&#32;&#32;&#32;&#32;{
429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__x&#32;=&#32;__vector_bitcast&lt;long&#32;long&gt;(__kk);
430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__x[0]&#32;|&#32;__x[1])&#32;!=&#32;0;
431 &#32;&#32;&#32;&#32;&#32;&#32;}
432 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__k)&#32;&lt;=&#32;8)
433 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__bit_cast&lt;__int_for_sizeof_t&lt;<emphasis role="keyword">decltype</emphasis>(__kk)&gt;&gt;(__kk)&#32;!=&#32;0;
434 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
435 &#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
436 &#32;&#32;&#32;&#32;&#32;&#32;}
437 
438 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
439 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_none_of&#32;{{{</emphasis>
440 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
441 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_S_none_of(simd_mask&lt;_Tp,&#32;_Abi&gt;&#32;__k)
442 &#32;&#32;&#32;&#32;&#32;&#32;{
443 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__kk&#32;=&#32;_Abi::_S_masked(__k._M_data);
444 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__k)&#32;==&#32;16)
445 &#32;&#32;&#32;&#32;&#32;&#32;{
446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__x&#32;=&#32;__vector_bitcast&lt;long&#32;long&gt;(__kk);
447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__x[0]&#32;|&#32;__x[1])&#32;==&#32;0;
448 &#32;&#32;&#32;&#32;&#32;&#32;}
449 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__k)&#32;&lt;=&#32;8)
450 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__bit_cast&lt;__int_for_sizeof_t&lt;<emphasis role="keyword">decltype</emphasis>(__kk)&gt;&gt;(__kk)&#32;==&#32;0;
451 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
452 &#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
453 &#32;&#32;&#32;&#32;&#32;&#32;}
454 
455 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
456 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_some_of&#32;{{{</emphasis>
457 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
458 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_S_some_of(simd_mask&lt;_Tp,&#32;_Abi&gt;&#32;__k)
459 &#32;&#32;&#32;&#32;&#32;&#32;{
460 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__k)&#32;&lt;=&#32;8)
461 &#32;&#32;&#32;&#32;&#32;&#32;{
462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__kk&#32;=&#32;__vector_bitcast&lt;char&gt;(__k._M_data)
463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;~__vector_bitcast&lt;char&gt;(
464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Abi::template&#32;_S_implicit_mask&lt;_Tp&gt;());
465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Up&#32;=&#32;make_unsigned_t&lt;__int_for_sizeof_t&lt;<emphasis role="keyword">decltype</emphasis>(__kk)&gt;&gt;;
466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__bit_cast&lt;_Up&gt;(__kk)&#32;+&#32;1&#32;&gt;&#32;1;
467 &#32;&#32;&#32;&#32;&#32;&#32;}
468 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
469 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_some_of(__k);
470 &#32;&#32;&#32;&#32;&#32;&#32;}
471 
472 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
473 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_popcount&#32;{{{</emphasis>
474 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
475 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_S_popcount(simd_mask&lt;_Tp,&#32;_Abi&gt;&#32;__k)
476 &#32;&#32;&#32;&#32;&#32;&#32;{
477 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1)
478 &#32;&#32;&#32;&#32;&#32;&#32;{
479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__s8&#32;=&#32;__vector_bitcast&lt;_SChar&gt;(__k._M_data);
480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int8x8_t&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__lo64(__s8)&#32;+&#32;__hi64z(__s8);
481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-vpadd_s8(vpadd_s8(vpadd_s8(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>,&#32;int8x8_t()),&#32;int8x8_t()),
482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int8x8_t())[0];
483 &#32;&#32;&#32;&#32;&#32;&#32;}
484 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2)
485 &#32;&#32;&#32;&#32;&#32;&#32;{
486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__s16&#32;=&#32;__vector_bitcast&lt;short&gt;(__k._M_data);
487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int16x4_t&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__lo64(__s16)&#32;+&#32;__hi64z(__s16);
488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-vpadd_s16(vpadd_s16(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>,&#32;int16x4_t()),&#32;int16x4_t())[0];
489 &#32;&#32;&#32;&#32;&#32;&#32;}
490 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
491 &#32;&#32;&#32;&#32;&#32;&#32;{
492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__s32&#32;=&#32;__vector_bitcast&lt;int&gt;(__k._M_data);
493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int32x2_t&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__lo64(__s32)&#32;+&#32;__hi64z(__s32);
494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-vpadd_s32(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>,&#32;int32x2_t())[0];
495 &#32;&#32;&#32;&#32;&#32;&#32;}
496 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
497 &#32;&#32;&#32;&#32;&#32;&#32;{
498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(__k)&#32;==&#32;16);
499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__s64&#32;=&#32;__vector_bitcast&lt;long&gt;(__k._M_data);
500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-(__s64[0]&#32;+&#32;__s64[1]);
501 &#32;&#32;&#32;&#32;&#32;&#32;}
502 &#32;&#32;&#32;&#32;&#32;&#32;}
503 
504 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
505 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_find_first_set&#32;{{{</emphasis>
506 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
507 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
508 &#32;&#32;&#32;&#32;&#32;&#32;_S_find_first_set(simd_mask&lt;_Tp,&#32;_Abi&gt;&#32;__k)
509 &#32;&#32;&#32;&#32;&#32;&#32;{
510 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;the&#32;_Base&#32;implementation&#32;is&#32;not&#32;optimal&#32;for&#32;NEON</emphasis>
511 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_find_first_set(__k);
512 &#32;&#32;&#32;&#32;&#32;&#32;}
513 
514 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
515 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_find_last_set&#32;{{{</emphasis>
516 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
517 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
518 &#32;&#32;&#32;&#32;&#32;&#32;_S_find_last_set(simd_mask&lt;_Tp,&#32;_Abi&gt;&#32;__k)
519 &#32;&#32;&#32;&#32;&#32;&#32;{
520 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;the&#32;_Base&#32;implementation&#32;is&#32;not&#32;optimal&#32;for&#32;NEON</emphasis>
521 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_find_last_set(__k);
522 &#32;&#32;&#32;&#32;&#32;&#32;}
523 
524 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
525 &#32;&#32;};&#32;<emphasis role="comment">//&#32;}}}</emphasis>
526 
527 _GLIBCXX_SIMD_END_NAMESPACE
528 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
529 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_EXPERIMENTAL_SIMD_NEON_H_</emphasis>
530 <emphasis role="comment">//&#32;vim:&#32;foldmethod=marker&#32;sw=2&#32;noet&#32;ts=8&#32;sts=2&#32;tw=80</emphasis>
</programlisting></section>
