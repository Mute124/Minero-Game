<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_source" xml:lang="en-US">
<title>atomic_base.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/bits/atomic_base.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-&#32;header.</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2008-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_ATOMIC_BASE_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_GLIBCXX_ATOMIC_BASE_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
34 
35 <emphasis role="preprocessor">#include&#32;&lt;bits/c++config.h&gt;</emphasis>
36 <emphasis role="preprocessor">#include&#32;&lt;stdint.h&gt;</emphasis>
37 <emphasis role="preprocessor">#include&#32;&lt;bits/atomic_lockfree_defines.h&gt;</emphasis>
38 <emphasis role="preprocessor">#include&#32;&lt;bits/move.h&gt;</emphasis>
39 
40 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L&#32;&amp;&amp;&#32;_GLIBCXX_HOSTED</emphasis>
41 <emphasis role="preprocessor">#include&#32;&lt;bits/atomic_wait.h&gt;</emphasis>
42 <emphasis role="preprocessor">#endif</emphasis>
43 
44 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_ALWAYS_INLINE</emphasis>
45 <emphasis role="preprocessor">#define&#32;_GLIBCXX_ALWAYS_INLINE&#32;inline&#32;__attribute__((__always_inline__))</emphasis>
46 <emphasis role="preprocessor">#endif</emphasis>
47 
48 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
49 {
50 _GLIBCXX_BEGIN_NAMESPACE_VERSION
51 
60 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
61 &#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;:&#32;<emphasis role="keywordtype">int</emphasis>
62 &#32;&#32;&#32;&#32;{
63 &#32;&#32;&#32;&#32;&#32;&#32;relaxed,
64 &#32;&#32;&#32;&#32;&#32;&#32;consume,
65 &#32;&#32;&#32;&#32;&#32;&#32;acquire,
66 &#32;&#32;&#32;&#32;&#32;&#32;release,
67 &#32;&#32;&#32;&#32;&#32;&#32;acq_rel,
68 &#32;&#32;&#32;&#32;&#32;&#32;seq_cst
69 &#32;&#32;&#32;&#32;};
70 
71 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bac6489d0374e297a776f6a3db7ea5654a">memory_order_relaxed</link>&#32;=&#32;memory_order::relaxed;
72 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba0745f54882bc00251a719e42969db110">memory_order_consume</link>&#32;=&#32;memory_order::consume;
73 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bafb313754331704b978e9a80a933b3da7">memory_order_acquire</link>&#32;=&#32;memory_order::acquire;
74 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba685a90c8fc516895354973c3918a5f7b">memory_order_release</link>&#32;=&#32;memory_order::release;
75 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bae17e60cbfd766a7f165872c36e2f7bc5">memory_order_acq_rel</link>&#32;=&#32;memory_order::acq_rel;
76 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>&#32;=&#32;memory_order::seq_cst;
77 <emphasis role="preprocessor">#else</emphasis>
78 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>
79 &#32;&#32;&#32;&#32;{
80 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bac6489d0374e297a776f6a3db7ea5654a">memory_order_relaxed</link>,
81 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba0745f54882bc00251a719e42969db110">memory_order_consume</link>,
82 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bafb313754331704b978e9a80a933b3da7">memory_order_acquire</link>,
83 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba685a90c8fc516895354973c3918a5f7b">memory_order_release</link>,
84 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bae17e60cbfd766a7f165872c36e2f7bc5">memory_order_acq_rel</link>,
85 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>
86 &#32;&#32;&#32;&#32;}&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>;
87 <emphasis role="preprocessor">#endif</emphasis>
88 
89 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;__memory_order_modifier
90 &#32;&#32;&#32;&#32;{
91 &#32;&#32;&#32;&#32;&#32;&#32;__memory_order_mask&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0x0ffff,
92 &#32;&#32;&#32;&#32;&#32;&#32;__memory_order_modifier_mask&#32;=&#32;0xffff0000,
93 &#32;&#32;&#32;&#32;&#32;&#32;__memory_order_hle_acquire&#32;&#32;&#32;=&#32;0x10000,
94 &#32;&#32;&#32;&#32;&#32;&#32;__memory_order_hle_release&#32;&#32;&#32;=&#32;0x20000
95 &#32;&#32;&#32;&#32;};
96 
97 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>
98 &#32;&#32;operator|(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m,&#32;__memory_order_modifier&#32;__mod)
99 &#32;&#32;{
100 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>(<emphasis role="keywordtype">int</emphasis>(__m)&#32;|&#32;<emphasis role="keywordtype">int</emphasis>(__mod));
101 &#32;&#32;}
102 
103 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>
104 &#32;&#32;operator&amp;(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m,&#32;__memory_order_modifier&#32;__mod)
105 &#32;&#32;{
106 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>(<emphasis role="keywordtype">int</emphasis>(__m)&#32;&amp;&#32;<emphasis role="keywordtype">int</emphasis>(__mod));
107 &#32;&#32;}
108 
109 &#32;&#32;<emphasis role="comment">//&#32;Drop&#32;release&#32;ordering&#32;as&#32;per&#32;[atomics.types.operations.req]/21</emphasis>
110 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>
111 &#32;&#32;__cmpexch_failure_order2(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m)&#32;<emphasis role="keyword">noexcept</emphasis>
112 &#32;&#32;{
113 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__m&#32;==&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bae17e60cbfd766a7f165872c36e2f7bc5">memory_order_acq_rel</link>&#32;?&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bafb313754331704b978e9a80a933b3da7">memory_order_acquire</link>
114 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;__m&#32;==&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba685a90c8fc516895354973c3918a5f7b">memory_order_release</link>&#32;?&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bac6489d0374e297a776f6a3db7ea5654a">memory_order_relaxed</link>&#32;:&#32;__m;
115 &#32;&#32;}
116 
117 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>
118 &#32;&#32;__cmpexch_failure_order(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m)&#32;<emphasis role="keyword">noexcept</emphasis>
119 &#32;&#32;{
120 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>(__cmpexch_failure_order2(__m&#32;&amp;&#32;__memory_order_mask)
121 &#32;&#32;&#32;&#32;&#32;&#32;|&#32;__memory_order_modifier(__m&#32;&amp;&#32;__memory_order_modifier_mask));
122 &#32;&#32;}
123 
124 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
125 &#32;&#32;__is_valid_cmpexch_failure_order(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m)&#32;<emphasis role="keyword">noexcept</emphasis>
126 &#32;&#32;{
127 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__m&#32;&amp;&#32;__memory_order_mask)&#32;!=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba685a90c8fc516895354973c3918a5f7b">memory_order_release</link>
128 &#32;&#32;&#32;&#32;&amp;&amp;&#32;(__m&#32;&amp;&#32;__memory_order_mask)&#32;!=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bae17e60cbfd766a7f165872c36e2f7bc5">memory_order_acq_rel</link>;
129 &#32;&#32;}
130 
131 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
132 &#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a7c82e718a2fa06be84951fb72d275f9e">atomic_thread_fence</link>(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m)&#32;<emphasis role="keyword">noexcept</emphasis>
133 &#32;&#32;{&#32;__atomic_thread_fence(<emphasis role="keywordtype">int</emphasis>(__m));&#32;}
134 
135 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
136 &#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a116e0cd17b559defe9c9a738674db03b">atomic_signal_fence</link>(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m)&#32;<emphasis role="keyword">noexcept</emphasis>
137 &#32;&#32;{&#32;__atomic_signal_fence(<emphasis role="keywordtype">int</emphasis>(__m));&#32;}
138 
140 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
141 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_Tp
142 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1acc6fec6c7d69d938ce74892c6f12120c">kill_dependency</link>(_Tp&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
143 &#32;&#32;&#32;&#32;{
144 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;__ret(__y);
145 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
146 &#32;&#32;&#32;&#32;}
147 
148 &#32;&#32;<emphasis role="comment">//&#32;Base&#32;types&#32;for&#32;atomics.</emphasis>
149 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IntTp&gt;
150 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__atomic_base;
151 
152 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;=&#32;201703L</emphasis>
153 <emphasis role="preprocessor">#&#32;define&#32;_GLIBCXX20_INIT(I)</emphasis>
154 <emphasis role="preprocessor">#else</emphasis>
155 <emphasis role="preprocessor">#&#32;define&#32;__cpp_lib_atomic_value_initialization&#32;201911L</emphasis>
156 <emphasis role="preprocessor">#&#32;define&#32;_GLIBCXX20_INIT(I)&#32;=&#32;I</emphasis>
157 <emphasis role="preprocessor">#endif</emphasis>
158 
159 <emphasis role="preprocessor">#define&#32;ATOMIC_VAR_INIT(_VI)&#32;{&#32;_VI&#32;}</emphasis>
160 
161 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
162 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>atomic;
163 
164 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
165 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>atomic&lt;_Tp*&gt;;
166 
167 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;The&#32;target&apos;s&#32;&quot;set&quot;&#32;value&#32;for&#32;test-and-set&#32;may&#32;not&#32;be&#32;exactly&#32;1.&#32;&#32;*/</emphasis>
168 <emphasis role="preprocessor">#if&#32;__GCC_ATOMIC_TEST_AND_SET_TRUEVAL&#32;==&#32;1</emphasis>
169 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__atomic_flag_data_type;
170 <emphasis role="preprocessor">#else</emphasis>
171 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;__atomic_flag_data_type;
172 <emphasis role="preprocessor">#endif</emphasis>
173 
184 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1abc396e13bffe17a362126d7af4d05fb2">_GLIBCXX_BEGIN_EXTERN_C</link>
185 
186 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__atomic_flag_base
187 &#32;&#32;{
188 &#32;&#32;&#32;&#32;__atomic_flag_data_type&#32;_M_i&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a610b11475e52239098e45bf8791ddbf7">_GLIBCXX20_INIT</link>({});
189 &#32;&#32;};
190 
191 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a43b1f4c913d50009e3514bb374202dad">_GLIBCXX_END_EXTERN_C</link>
192 
193 <emphasis role="preprocessor">#define&#32;ATOMIC_FLAG_INIT&#32;{&#32;0&#32;}</emphasis>
194 
196 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="__classes_2lib_2include_2stdatomic_8h_1aa3f127383701111a33a51247a2d666e1">atomic_flag</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__atomic_flag_base
197 &#32;&#32;{
198 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1aa3f127383701111a33a51247a2d666e1">atomic_flag</link>()&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
199 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1aa3f127383701111a33a51247a2d666e1">~atomic_flag</link>()&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
200 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1aa3f127383701111a33a51247a2d666e1">atomic_flag</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1aa3f127383701111a33a51247a2d666e1">atomic_flag</link>&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
201 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1aa3f127383701111a33a51247a2d666e1">atomic_flag</link>&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1aa3f127383701111a33a51247a2d666e1">atomic_flag</link>&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
202 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1aa3f127383701111a33a51247a2d666e1">atomic_flag</link>&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1aa3f127383701111a33a51247a2d666e1">atomic_flag</link>&amp;)&#32;<emphasis role="keyword">volatile</emphasis>&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
203 
204 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Conversion&#32;to&#32;ATOMIC_FLAG_INIT.</emphasis>
205 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1aa3f127383701111a33a51247a2d666e1">atomic_flag</link>(<emphasis role="keywordtype">bool</emphasis>&#32;__i)&#32;noexcept
206 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;__atomic_flag_base{&#32;_S_init(__i)&#32;}
207 &#32;&#32;&#32;&#32;{&#32;}
208 
209 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">bool</emphasis>
210 &#32;&#32;&#32;&#32;test_and_set(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
211 &#32;&#32;&#32;&#32;{
212 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_test_and_set&#32;(&amp;_M_i,&#32;<emphasis role="keywordtype">int</emphasis>(__m));
213 &#32;&#32;&#32;&#32;}
214 
215 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">bool</emphasis>
216 &#32;&#32;&#32;&#32;test_and_set(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
217 &#32;&#32;&#32;&#32;{
218 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_test_and_set&#32;(&amp;_M_i,&#32;<emphasis role="keywordtype">int</emphasis>(__m));
219 &#32;&#32;&#32;&#32;}
220 
221 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
222 <emphasis role="preprocessor">#define&#32;__cpp_lib_atomic_flag_test&#32;201907L</emphasis>
223 
224 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">bool</emphasis>
225 &#32;&#32;&#32;&#32;test(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
226 &#32;&#32;&#32;&#32;{
227 &#32;&#32;&#32;&#32;&#32;&#32;__atomic_flag_data_type&#32;__v;
228 &#32;&#32;&#32;&#32;&#32;&#32;__atomic_load(&amp;_M_i,&#32;&amp;__v,&#32;<emphasis role="keywordtype">int</emphasis>(__m));
229 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__v&#32;==&#32;__GCC_ATOMIC_TEST_AND_SET_TRUEVAL;
230 &#32;&#32;&#32;&#32;}
231 
232 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">bool</emphasis>
233 &#32;&#32;&#32;&#32;test(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
234 &#32;&#32;&#32;&#32;{
235 &#32;&#32;&#32;&#32;&#32;&#32;__atomic_flag_data_type&#32;__v;
236 &#32;&#32;&#32;&#32;&#32;&#32;__atomic_load(&amp;_M_i,&#32;&amp;__v,&#32;<emphasis role="keywordtype">int</emphasis>(__m));
237 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__v&#32;==&#32;__GCC_ATOMIC_TEST_AND_SET_TRUEVAL;
238 &#32;&#32;&#32;&#32;}
239 
240 <emphasis role="preprocessor">#if&#32;__cpp_lib_atomic_wait</emphasis>
241 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
242 &#32;&#32;&#32;&#32;wait(<emphasis role="keywordtype">bool</emphasis>&#32;__old,
243 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
244 &#32;&#32;&#32;&#32;{
245 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__atomic_flag_data_type&#32;__v
246 &#32;&#32;&#32;&#32;=&#32;__old&#32;?&#32;__GCC_ATOMIC_TEST_AND_SET_TRUEVAL&#32;:&#32;0;
247 
248 &#32;&#32;&#32;&#32;&#32;&#32;std::__atomic_wait_address_v(&amp;_M_i,&#32;__v,
249 &#32;&#32;&#32;&#32;&#32;&#32;[__m,&#32;<emphasis role="keyword">this</emphasis>]&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_load_n(&amp;_M_i,&#32;<emphasis role="keywordtype">int</emphasis>(__m));&#32;});
250 &#32;&#32;&#32;&#32;}
251 
252 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO&#32;add&#32;const&#32;volatile&#32;overload</emphasis>
253 
254 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
255 &#32;&#32;&#32;&#32;notify_one()&#32;<emphasis role="keyword">noexcept</emphasis>
256 &#32;&#32;&#32;&#32;{&#32;std::__atomic_notify_address(&amp;_M_i,&#32;<emphasis role="keyword">false</emphasis>);&#32;}
257 
258 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO&#32;add&#32;const&#32;volatile&#32;overload</emphasis>
259 
260 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
261 &#32;&#32;&#32;&#32;notify_all()&#32;<emphasis role="keyword">noexcept</emphasis>
262 &#32;&#32;&#32;&#32;{&#32;std::__atomic_notify_address(&amp;_M_i,&#32;<emphasis role="keyword">true</emphasis>);&#32;}
263 
264 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO&#32;add&#32;const&#32;volatile&#32;overload</emphasis>
265 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__cpp_lib_atomic_wait</emphasis>
266 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++20</emphasis>
267 
268 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
269 &#32;&#32;&#32;&#32;clear(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
270 &#32;&#32;&#32;&#32;{
271 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__b&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>&#32;((__unused__))
272 &#32;&#32;&#32;&#32;=&#32;__m&#32;&amp;&#32;__memory_order_mask;
273 &#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(__b&#32;!=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba0745f54882bc00251a719e42969db110">memory_order_consume</link>);
274 &#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(__b&#32;!=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bafb313754331704b978e9a80a933b3da7">memory_order_acquire</link>);
275 &#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(__b&#32;!=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bae17e60cbfd766a7f165872c36e2f7bc5">memory_order_acq_rel</link>);
276 
277 &#32;&#32;&#32;&#32;&#32;&#32;__atomic_clear&#32;(&amp;_M_i,&#32;<emphasis role="keywordtype">int</emphasis>(__m));
278 &#32;&#32;&#32;&#32;}
279 
280 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
281 &#32;&#32;&#32;&#32;clear(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
282 &#32;&#32;&#32;&#32;{
283 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__b&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>&#32;((__unused__))
284 &#32;&#32;&#32;&#32;=&#32;__m&#32;&amp;&#32;__memory_order_mask;
285 &#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(__b&#32;!=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba0745f54882bc00251a719e42969db110">memory_order_consume</link>);
286 &#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(__b&#32;!=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bafb313754331704b978e9a80a933b3da7">memory_order_acquire</link>);
287 &#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(__b&#32;!=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bae17e60cbfd766a7f165872c36e2f7bc5">memory_order_acq_rel</link>);
288 
289 &#32;&#32;&#32;&#32;&#32;&#32;__atomic_clear&#32;(&amp;_M_i,&#32;<emphasis role="keywordtype">int</emphasis>(__m));
290 &#32;&#32;&#32;&#32;}
291 
292 &#32;&#32;<emphasis role="keyword">private</emphasis>:
293 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__atomic_flag_data_type
294 &#32;&#32;&#32;&#32;_S_init(<emphasis role="keywordtype">bool</emphasis>&#32;__i)
295 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__i&#32;?&#32;__GCC_ATOMIC_TEST_AND_SET_TRUEVAL&#32;:&#32;0;&#32;}
296 &#32;&#32;};
297 
298 
300 &#32;&#32;<emphasis role="comment">//</emphasis>
301 &#32;&#32;<emphasis role="comment">//&#32;For&#32;each&#32;of&#32;the&#32;integral&#32;types,&#32;define&#32;atomic_[integral&#32;type]&#32;struct</emphasis>
302 &#32;&#32;<emphasis role="comment">//</emphasis>
303 &#32;&#32;<emphasis role="comment">//&#32;atomic_bool&#32;&#32;&#32;&#32;&#32;bool</emphasis>
304 &#32;&#32;<emphasis role="comment">//&#32;atomic_char&#32;&#32;&#32;&#32;&#32;char</emphasis>
305 &#32;&#32;<emphasis role="comment">//&#32;atomic_schar&#32;&#32;&#32;&#32;signed&#32;char</emphasis>
306 &#32;&#32;<emphasis role="comment">//&#32;atomic_uchar&#32;&#32;&#32;&#32;unsigned&#32;char</emphasis>
307 &#32;&#32;<emphasis role="comment">//&#32;atomic_short&#32;&#32;&#32;&#32;short</emphasis>
308 &#32;&#32;<emphasis role="comment">//&#32;atomic_ushort&#32;&#32;&#32;unsigned&#32;short</emphasis>
309 &#32;&#32;<emphasis role="comment">//&#32;atomic_int&#32;&#32;&#32;&#32;&#32;&#32;int</emphasis>
310 &#32;&#32;<emphasis role="comment">//&#32;atomic_uint&#32;&#32;&#32;&#32;&#32;unsigned&#32;int</emphasis>
311 &#32;&#32;<emphasis role="comment">//&#32;atomic_long&#32;&#32;&#32;&#32;&#32;long</emphasis>
312 &#32;&#32;<emphasis role="comment">//&#32;atomic_ulong&#32;&#32;&#32;&#32;unsigned&#32;long</emphasis>
313 &#32;&#32;<emphasis role="comment">//&#32;atomic_llong&#32;&#32;&#32;&#32;long&#32;long</emphasis>
314 &#32;&#32;<emphasis role="comment">//&#32;atomic_ullong&#32;&#32;&#32;unsigned&#32;long&#32;long</emphasis>
315 &#32;&#32;<emphasis role="comment">//&#32;atomic_char8_t&#32;&#32;char8_t</emphasis>
316 &#32;&#32;<emphasis role="comment">//&#32;atomic_char16_t&#32;char16_t</emphasis>
317 &#32;&#32;<emphasis role="comment">//&#32;atomic_char32_t&#32;char32_t</emphasis>
318 &#32;&#32;<emphasis role="comment">//&#32;atomic_wchar_t&#32;&#32;wchar_t</emphasis>
319 &#32;&#32;<emphasis role="comment">//</emphasis>
320 &#32;&#32;<emphasis role="comment">//&#32;NB:&#32;Assuming&#32;_ITp&#32;is&#32;an&#32;integral&#32;scalar&#32;type&#32;that&#32;is&#32;1,&#32;2,&#32;4,&#32;or</emphasis>
321 &#32;&#32;<emphasis role="comment">//&#32;8&#32;bytes,&#32;since&#32;that&#32;is&#32;what&#32;GCC&#32;built-in&#32;functions&#32;for&#32;atomic</emphasis>
322 &#32;&#32;<emphasis role="comment">//&#32;memory&#32;access&#32;expect.</emphasis>
323 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ITp&gt;
324 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__atomic_base
325 &#32;&#32;&#32;&#32;{
326 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;_ITp;
327 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>difference_type&#32;=&#32;value_type;
328 
329 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
330 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_ITp&#32;&#32;__int_type;
331 
332 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_S_alignment&#32;=
333 &#32;&#32;&#32;&#32;<emphasis role="keyword">sizeof</emphasis>(_ITp)&#32;&gt;&#32;<emphasis role="keyword">alignof</emphasis>(_ITp)&#32;?&#32;<emphasis role="keyword">sizeof</emphasis>(_ITp)&#32;:&#32;<emphasis role="keyword">alignof</emphasis>(_ITp);
334 
335 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">alignas</emphasis>(_S_alignment)&#32;__int_type&#32;_M_i&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a610b11475e52239098e45bf8791ddbf7">_GLIBCXX20_INIT</link>(0);
336 
337 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
338 &#32;&#32;&#32;&#32;&#32;&#32;__atomic_base()&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
339 &#32;&#32;&#32;&#32;&#32;&#32;~__atomic_base()&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
340 &#32;&#32;&#32;&#32;&#32;&#32;__atomic_base(<emphasis role="keyword">const</emphasis>&#32;__atomic_base&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
341 &#32;&#32;&#32;&#32;&#32;&#32;__atomic_base&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;__atomic_base&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
342 &#32;&#32;&#32;&#32;&#32;&#32;__atomic_base&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;__atomic_base&amp;)&#32;<emphasis role="keyword">volatile</emphasis>&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
343 
344 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Requires&#32;__int_type&#32;convertible&#32;to&#32;_M_i.</emphasis>
345 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__atomic_base(__int_type&#32;__i)&#32;noexcept&#32;:&#32;_M_i&#32;(__i)&#32;{&#32;}
346 
347 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;__int_type()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
348 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;load();&#32;}
349 
350 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;__int_type()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
351 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;load();&#32;}
352 
353 &#32;&#32;&#32;&#32;&#32;&#32;__int_type
354 &#32;&#32;&#32;&#32;&#32;&#32;operator=(__int_type&#32;__i)&#32;<emphasis role="keyword">noexcept</emphasis>
355 &#32;&#32;&#32;&#32;&#32;&#32;{
356 &#32;&#32;&#32;&#32;store(__i);
357 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__i;
358 &#32;&#32;&#32;&#32;&#32;&#32;}
359 
360 &#32;&#32;&#32;&#32;&#32;&#32;__int_type
361 &#32;&#32;&#32;&#32;&#32;&#32;operator=(__int_type&#32;__i)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
362 &#32;&#32;&#32;&#32;&#32;&#32;{
363 &#32;&#32;&#32;&#32;store(__i);
364 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__i;
365 &#32;&#32;&#32;&#32;&#32;&#32;}
366 
367 &#32;&#32;&#32;&#32;&#32;&#32;__int_type
368 &#32;&#32;&#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>
369 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;fetch_add(1);&#32;}
370 
371 &#32;&#32;&#32;&#32;&#32;&#32;__int_type
372 &#32;&#32;&#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
373 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;fetch_add(1);&#32;}
374 
375 &#32;&#32;&#32;&#32;&#32;&#32;__int_type
376 &#32;&#32;&#32;&#32;&#32;&#32;operator--(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>
377 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;fetch_sub(1);&#32;}
378 
379 &#32;&#32;&#32;&#32;&#32;&#32;__int_type
380 &#32;&#32;&#32;&#32;&#32;&#32;operator--(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
381 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;fetch_sub(1);&#32;}
382 
383 &#32;&#32;&#32;&#32;&#32;&#32;__int_type
384 &#32;&#32;&#32;&#32;&#32;&#32;operator++()&#32;<emphasis role="keyword">noexcept</emphasis>
385 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_add_fetch(&amp;_M_i,&#32;1,&#32;<emphasis role="keywordtype">int</emphasis>(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>));&#32;}
386 
387 &#32;&#32;&#32;&#32;&#32;&#32;__int_type
388 &#32;&#32;&#32;&#32;&#32;&#32;operator++()&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
389 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_add_fetch(&amp;_M_i,&#32;1,&#32;<emphasis role="keywordtype">int</emphasis>(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>));&#32;}
390 
391 &#32;&#32;&#32;&#32;&#32;&#32;__int_type
392 &#32;&#32;&#32;&#32;&#32;&#32;operator--()&#32;<emphasis role="keyword">noexcept</emphasis>
393 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_sub_fetch(&amp;_M_i,&#32;1,&#32;<emphasis role="keywordtype">int</emphasis>(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>));&#32;}
394 
395 &#32;&#32;&#32;&#32;&#32;&#32;__int_type
396 &#32;&#32;&#32;&#32;&#32;&#32;operator--()&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
397 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_sub_fetch(&amp;_M_i,&#32;1,&#32;<emphasis role="keywordtype">int</emphasis>(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>));&#32;}
398 
399 &#32;&#32;&#32;&#32;&#32;&#32;__int_type
400 &#32;&#32;&#32;&#32;&#32;&#32;operator+=(__int_type&#32;__i)&#32;<emphasis role="keyword">noexcept</emphasis>
401 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_add_fetch(&amp;_M_i,&#32;__i,&#32;<emphasis role="keywordtype">int</emphasis>(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>));&#32;}
402 
403 &#32;&#32;&#32;&#32;&#32;&#32;__int_type
404 &#32;&#32;&#32;&#32;&#32;&#32;operator+=(__int_type&#32;__i)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
405 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_add_fetch(&amp;_M_i,&#32;__i,&#32;<emphasis role="keywordtype">int</emphasis>(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>));&#32;}
406 
407 &#32;&#32;&#32;&#32;&#32;&#32;__int_type
408 &#32;&#32;&#32;&#32;&#32;&#32;operator-=(__int_type&#32;__i)&#32;<emphasis role="keyword">noexcept</emphasis>
409 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_sub_fetch(&amp;_M_i,&#32;__i,&#32;<emphasis role="keywordtype">int</emphasis>(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>));&#32;}
410 
411 &#32;&#32;&#32;&#32;&#32;&#32;__int_type
412 &#32;&#32;&#32;&#32;&#32;&#32;operator-=(__int_type&#32;__i)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
413 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_sub_fetch(&amp;_M_i,&#32;__i,&#32;<emphasis role="keywordtype">int</emphasis>(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>));&#32;}
414 
415 &#32;&#32;&#32;&#32;&#32;&#32;__int_type
416 &#32;&#32;&#32;&#32;&#32;&#32;operator&amp;=(__int_type&#32;__i)&#32;<emphasis role="keyword">noexcept</emphasis>
417 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_and_fetch(&amp;_M_i,&#32;__i,&#32;<emphasis role="keywordtype">int</emphasis>(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>));&#32;}
418 
419 &#32;&#32;&#32;&#32;&#32;&#32;__int_type
420 &#32;&#32;&#32;&#32;&#32;&#32;operator&amp;=(__int_type&#32;__i)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
421 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_and_fetch(&amp;_M_i,&#32;__i,&#32;<emphasis role="keywordtype">int</emphasis>(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>));&#32;}
422 
423 &#32;&#32;&#32;&#32;&#32;&#32;__int_type
424 &#32;&#32;&#32;&#32;&#32;&#32;operator|=(__int_type&#32;__i)&#32;<emphasis role="keyword">noexcept</emphasis>
425 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_or_fetch(&amp;_M_i,&#32;__i,&#32;<emphasis role="keywordtype">int</emphasis>(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>));&#32;}
426 
427 &#32;&#32;&#32;&#32;&#32;&#32;__int_type
428 &#32;&#32;&#32;&#32;&#32;&#32;operator|=(__int_type&#32;__i)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
429 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_or_fetch(&amp;_M_i,&#32;__i,&#32;<emphasis role="keywordtype">int</emphasis>(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>));&#32;}
430 
431 &#32;&#32;&#32;&#32;&#32;&#32;__int_type
432 &#32;&#32;&#32;&#32;&#32;&#32;operator^=(__int_type&#32;__i)&#32;<emphasis role="keyword">noexcept</emphasis>
433 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_xor_fetch(&amp;_M_i,&#32;__i,&#32;<emphasis role="keywordtype">int</emphasis>(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>));&#32;}
434 
435 &#32;&#32;&#32;&#32;&#32;&#32;__int_type
436 &#32;&#32;&#32;&#32;&#32;&#32;operator^=(__int_type&#32;__i)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
437 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_xor_fetch(&amp;_M_i,&#32;__i,&#32;<emphasis role="keywordtype">int</emphasis>(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>));&#32;}
438 
439 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
440 &#32;&#32;&#32;&#32;&#32;&#32;is_lock_free()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
441 &#32;&#32;&#32;&#32;&#32;&#32;{
442 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Use&#32;a&#32;fake,&#32;minimally&#32;aligned&#32;pointer.</emphasis>
443 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_is_lock_free(<emphasis role="keyword">sizeof</emphasis>(_M_i),
444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>&#32;*<emphasis role="keyword">&gt;</emphasis>(-_S_alignment));
445 &#32;&#32;&#32;&#32;&#32;&#32;}
446 
447 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
448 &#32;&#32;&#32;&#32;&#32;&#32;is_lock_free()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
449 &#32;&#32;&#32;&#32;&#32;&#32;{
450 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Use&#32;a&#32;fake,&#32;minimally&#32;aligned&#32;pointer.</emphasis>
451 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_is_lock_free(<emphasis role="keyword">sizeof</emphasis>(_M_i),
452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>&#32;*<emphasis role="keyword">&gt;</emphasis>(-_S_alignment));
453 &#32;&#32;&#32;&#32;&#32;&#32;}
454 
455 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
456 &#32;&#32;&#32;&#32;&#32;&#32;store(__int_type&#32;__i,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
457 &#32;&#32;&#32;&#32;&#32;&#32;{
458 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__b&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>&#32;((__unused__))
459 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__m&#32;&amp;&#32;__memory_order_mask;
460 &#32;&#32;&#32;&#32;__glibcxx_assert(__b&#32;!=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bafb313754331704b978e9a80a933b3da7">memory_order_acquire</link>);
461 &#32;&#32;&#32;&#32;__glibcxx_assert(__b&#32;!=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bae17e60cbfd766a7f165872c36e2f7bc5">memory_order_acq_rel</link>);
462 &#32;&#32;&#32;&#32;__glibcxx_assert(__b&#32;!=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba0745f54882bc00251a719e42969db110">memory_order_consume</link>);
463 
464 &#32;&#32;&#32;&#32;__atomic_store_n(&amp;_M_i,&#32;__i,&#32;<emphasis role="keywordtype">int</emphasis>(__m));
465 &#32;&#32;&#32;&#32;&#32;&#32;}
466 
467 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
468 &#32;&#32;&#32;&#32;&#32;&#32;store(__int_type&#32;__i,
469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
470 &#32;&#32;&#32;&#32;&#32;&#32;{
471 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__b&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>&#32;((__unused__))
472 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__m&#32;&amp;&#32;__memory_order_mask;
473 &#32;&#32;&#32;&#32;__glibcxx_assert(__b&#32;!=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bafb313754331704b978e9a80a933b3da7">memory_order_acquire</link>);
474 &#32;&#32;&#32;&#32;__glibcxx_assert(__b&#32;!=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bae17e60cbfd766a7f165872c36e2f7bc5">memory_order_acq_rel</link>);
475 &#32;&#32;&#32;&#32;__glibcxx_assert(__b&#32;!=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba0745f54882bc00251a719e42969db110">memory_order_consume</link>);
476 
477 &#32;&#32;&#32;&#32;__atomic_store_n(&amp;_M_i,&#32;__i,&#32;<emphasis role="keywordtype">int</emphasis>(__m));
478 &#32;&#32;&#32;&#32;&#32;&#32;}
479 
480 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;__int_type
481 &#32;&#32;&#32;&#32;&#32;&#32;load(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
482 &#32;&#32;&#32;&#32;&#32;&#32;{
483 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__b&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>&#32;((__unused__))
484 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__m&#32;&amp;&#32;__memory_order_mask;
485 &#32;&#32;&#32;&#32;__glibcxx_assert(__b&#32;!=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba685a90c8fc516895354973c3918a5f7b">memory_order_release</link>);
486 &#32;&#32;&#32;&#32;__glibcxx_assert(__b&#32;!=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bae17e60cbfd766a7f165872c36e2f7bc5">memory_order_acq_rel</link>);
487 
488 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_load_n(&amp;_M_i,&#32;<emphasis role="keywordtype">int</emphasis>(__m));
489 &#32;&#32;&#32;&#32;&#32;&#32;}
490 
491 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;__int_type
492 &#32;&#32;&#32;&#32;&#32;&#32;load(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
493 &#32;&#32;&#32;&#32;&#32;&#32;{
494 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__b&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>&#32;((__unused__))
495 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__m&#32;&amp;&#32;__memory_order_mask;
496 &#32;&#32;&#32;&#32;__glibcxx_assert(__b&#32;!=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba685a90c8fc516895354973c3918a5f7b">memory_order_release</link>);
497 &#32;&#32;&#32;&#32;__glibcxx_assert(__b&#32;!=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bae17e60cbfd766a7f165872c36e2f7bc5">memory_order_acq_rel</link>);
498 
499 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_load_n(&amp;_M_i,&#32;<emphasis role="keywordtype">int</emphasis>(__m));
500 &#32;&#32;&#32;&#32;&#32;&#32;}
501 
502 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;__int_type
503 &#32;&#32;&#32;&#32;&#32;&#32;exchange(__int_type&#32;__i,
504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
505 &#32;&#32;&#32;&#32;&#32;&#32;{
506 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_exchange_n(&amp;_M_i,&#32;__i,&#32;<emphasis role="keywordtype">int</emphasis>(__m));
507 &#32;&#32;&#32;&#32;&#32;&#32;}
508 
509 
510 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;__int_type
511 &#32;&#32;&#32;&#32;&#32;&#32;exchange(__int_type&#32;__i,
512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
513 &#32;&#32;&#32;&#32;&#32;&#32;{
514 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_exchange_n(&amp;_M_i,&#32;__i,&#32;<emphasis role="keywordtype">int</emphasis>(__m));
515 &#32;&#32;&#32;&#32;&#32;&#32;}
516 
517 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">bool</emphasis>
518 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_weak(__int_type&amp;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__int_type&#32;__i2,
519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m1,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa998860df3b1c89b07030695f92ff398">__m2</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
520 &#32;&#32;&#32;&#32;&#32;&#32;{
521 &#32;&#32;&#32;&#32;__glibcxx_assert(__is_valid_cmpexch_failure_order(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa998860df3b1c89b07030695f92ff398">__m2</link>));
522 
523 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_compare_exchange_n(&amp;_M_i,&#32;&amp;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__i2,&#32;1,
524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>(__m1),&#32;<emphasis role="keywordtype">int</emphasis>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa998860df3b1c89b07030695f92ff398">__m2</link>));
525 &#32;&#32;&#32;&#32;&#32;&#32;}
526 
527 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">bool</emphasis>
528 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_weak(__int_type&amp;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__int_type&#32;__i2,
529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m1,
530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa998860df3b1c89b07030695f92ff398">__m2</link>)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
531 &#32;&#32;&#32;&#32;&#32;&#32;{
532 &#32;&#32;&#32;&#32;__glibcxx_assert(__is_valid_cmpexch_failure_order(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa998860df3b1c89b07030695f92ff398">__m2</link>));
533 
534 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_compare_exchange_n(&amp;_M_i,&#32;&amp;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__i2,&#32;1,
535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>(__m1),&#32;<emphasis role="keywordtype">int</emphasis>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa998860df3b1c89b07030695f92ff398">__m2</link>));
536 &#32;&#32;&#32;&#32;&#32;&#32;}
537 
538 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">bool</emphasis>
539 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_weak(__int_type&amp;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__int_type&#32;__i2,
540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
541 &#32;&#32;&#32;&#32;&#32;&#32;{
542 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;compare_exchange_weak(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__i2,&#32;__m,
543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cmpexch_failure_order(__m));
544 &#32;&#32;&#32;&#32;&#32;&#32;}
545 
546 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">bool</emphasis>
547 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_weak(__int_type&amp;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__int_type&#32;__i2,
548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
549 &#32;&#32;&#32;&#32;&#32;&#32;{
550 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;compare_exchange_weak(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__i2,&#32;__m,
551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cmpexch_failure_order(__m));
552 &#32;&#32;&#32;&#32;&#32;&#32;}
553 
554 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">bool</emphasis>
555 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_strong(__int_type&amp;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__int_type&#32;__i2,
556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m1,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa998860df3b1c89b07030695f92ff398">__m2</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
557 &#32;&#32;&#32;&#32;&#32;&#32;{
558 &#32;&#32;&#32;&#32;__glibcxx_assert(__is_valid_cmpexch_failure_order(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa998860df3b1c89b07030695f92ff398">__m2</link>));
559 
560 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_compare_exchange_n(&amp;_M_i,&#32;&amp;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__i2,&#32;0,
561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>(__m1),&#32;<emphasis role="keywordtype">int</emphasis>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa998860df3b1c89b07030695f92ff398">__m2</link>));
562 &#32;&#32;&#32;&#32;&#32;&#32;}
563 
564 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">bool</emphasis>
565 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_strong(__int_type&amp;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__int_type&#32;__i2,
566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m1,
567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa998860df3b1c89b07030695f92ff398">__m2</link>)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
568 &#32;&#32;&#32;&#32;&#32;&#32;{
569 &#32;&#32;&#32;&#32;__glibcxx_assert(__is_valid_cmpexch_failure_order(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa998860df3b1c89b07030695f92ff398">__m2</link>));
570 
571 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_compare_exchange_n(&amp;_M_i,&#32;&amp;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__i2,&#32;0,
572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>(__m1),&#32;<emphasis role="keywordtype">int</emphasis>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa998860df3b1c89b07030695f92ff398">__m2</link>));
573 &#32;&#32;&#32;&#32;&#32;&#32;}
574 
575 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">bool</emphasis>
576 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_strong(__int_type&amp;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__int_type&#32;__i2,
577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
578 &#32;&#32;&#32;&#32;&#32;&#32;{
579 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;compare_exchange_strong(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__i2,&#32;__m,
580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cmpexch_failure_order(__m));
581 &#32;&#32;&#32;&#32;&#32;&#32;}
582 
583 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">bool</emphasis>
584 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_strong(__int_type&amp;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__int_type&#32;__i2,
585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
586 &#32;&#32;&#32;&#32;&#32;&#32;{
587 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;compare_exchange_strong(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__i2,&#32;__m,
588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cmpexch_failure_order(__m));
589 &#32;&#32;&#32;&#32;&#32;&#32;}
590 
591 <emphasis role="preprocessor">#if&#32;__cpp_lib_atomic_wait</emphasis>
592 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
593 &#32;&#32;&#32;&#32;&#32;&#32;wait(__int_type&#32;__old,
594 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
595 &#32;&#32;&#32;&#32;&#32;&#32;{
596 &#32;&#32;&#32;&#32;std::__atomic_wait_address_v(&amp;_M_i,&#32;__old,
597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__m,&#32;<emphasis role="keyword">this</emphasis>]&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;load(__m);&#32;});
598 &#32;&#32;&#32;&#32;&#32;&#32;}
599 
600 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO&#32;add&#32;const&#32;volatile&#32;overload</emphasis>
601 
602 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
603 &#32;&#32;&#32;&#32;&#32;&#32;notify_one()&#32;<emphasis role="keyword">noexcept</emphasis>
604 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;std::__atomic_notify_address(&amp;_M_i,&#32;<emphasis role="keyword">false</emphasis>);&#32;}
605 
606 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO&#32;add&#32;const&#32;volatile&#32;overload</emphasis>
607 
608 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
609 &#32;&#32;&#32;&#32;&#32;&#32;notify_all()&#32;<emphasis role="keyword">noexcept</emphasis>
610 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;std::__atomic_notify_address(&amp;_M_i,&#32;<emphasis role="keyword">true</emphasis>);&#32;}
611 
612 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO&#32;add&#32;const&#32;volatile&#32;overload</emphasis>
613 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__cpp_lib_atomic_wait</emphasis>
614 
615 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;__int_type
616 &#32;&#32;&#32;&#32;&#32;&#32;fetch_add(__int_type&#32;__i,
617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
618 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_fetch_add(&amp;_M_i,&#32;__i,&#32;<emphasis role="keywordtype">int</emphasis>(__m));&#32;}
619 
620 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;__int_type
621 &#32;&#32;&#32;&#32;&#32;&#32;fetch_add(__int_type&#32;__i,
622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
623 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_fetch_add(&amp;_M_i,&#32;__i,&#32;<emphasis role="keywordtype">int</emphasis>(__m));&#32;}
624 
625 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;__int_type
626 &#32;&#32;&#32;&#32;&#32;&#32;fetch_sub(__int_type&#32;__i,
627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
628 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_fetch_sub(&amp;_M_i,&#32;__i,&#32;<emphasis role="keywordtype">int</emphasis>(__m));&#32;}
629 
630 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;__int_type
631 &#32;&#32;&#32;&#32;&#32;&#32;fetch_sub(__int_type&#32;__i,
632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
633 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_fetch_sub(&amp;_M_i,&#32;__i,&#32;<emphasis role="keywordtype">int</emphasis>(__m));&#32;}
634 
635 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;__int_type
636 &#32;&#32;&#32;&#32;&#32;&#32;fetch_and(__int_type&#32;__i,
637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
638 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_fetch_and(&amp;_M_i,&#32;__i,&#32;<emphasis role="keywordtype">int</emphasis>(__m));&#32;}
639 
640 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;__int_type
641 &#32;&#32;&#32;&#32;&#32;&#32;fetch_and(__int_type&#32;__i,
642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
643 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_fetch_and(&amp;_M_i,&#32;__i,&#32;<emphasis role="keywordtype">int</emphasis>(__m));&#32;}
644 
645 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;__int_type
646 &#32;&#32;&#32;&#32;&#32;&#32;fetch_or(__int_type&#32;__i,
647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
648 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_fetch_or(&amp;_M_i,&#32;__i,&#32;<emphasis role="keywordtype">int</emphasis>(__m));&#32;}
649 
650 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;__int_type
651 &#32;&#32;&#32;&#32;&#32;&#32;fetch_or(__int_type&#32;__i,
652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
653 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_fetch_or(&amp;_M_i,&#32;__i,&#32;<emphasis role="keywordtype">int</emphasis>(__m));&#32;}
654 
655 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;__int_type
656 &#32;&#32;&#32;&#32;&#32;&#32;fetch_xor(__int_type&#32;__i,
657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
658 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_fetch_xor(&amp;_M_i,&#32;__i,&#32;<emphasis role="keywordtype">int</emphasis>(__m));&#32;}
659 
660 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;__int_type
661 &#32;&#32;&#32;&#32;&#32;&#32;fetch_xor(__int_type&#32;__i,
662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
663 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_fetch_xor(&amp;_M_i,&#32;__i,&#32;<emphasis role="keywordtype">int</emphasis>(__m));&#32;}
664 &#32;&#32;&#32;&#32;};
665 
666 
668 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_PTp&gt;
669 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__atomic_base&lt;_PTp*&gt;
670 &#32;&#32;&#32;&#32;{
671 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
672 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_PTp*&#32;&#32;&#32;&#32;&#32;__pointer_type;
673 
674 &#32;&#32;&#32;&#32;&#32;&#32;__pointer_type&#32;&#32;&#32;&#32;_M_p&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a610b11475e52239098e45bf8791ddbf7">_GLIBCXX20_INIT</link>(<emphasis role="keyword">nullptr</emphasis>);
675 
676 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Factored&#32;out&#32;to&#32;facilitate&#32;explicit&#32;specialization.</emphasis>
677 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>
678 &#32;&#32;&#32;&#32;&#32;&#32;_M_type_size(<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;__d)<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__d&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_PTp);&#32;}
679 
680 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>
681 &#32;&#32;&#32;&#32;&#32;&#32;_M_type_size(<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;__d)<emphasis role="keyword">&#32;const&#32;volatile&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__d&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_PTp);&#32;}
682 
683 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
684 &#32;&#32;&#32;&#32;&#32;&#32;__atomic_base()&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
685 &#32;&#32;&#32;&#32;&#32;&#32;~__atomic_base()&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
686 &#32;&#32;&#32;&#32;&#32;&#32;__atomic_base(<emphasis role="keyword">const</emphasis>&#32;__atomic_base&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
687 &#32;&#32;&#32;&#32;&#32;&#32;__atomic_base&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;__atomic_base&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
688 &#32;&#32;&#32;&#32;&#32;&#32;__atomic_base&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;__atomic_base&amp;)&#32;<emphasis role="keyword">volatile</emphasis>&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
689 
690 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Requires&#32;__pointer_type&#32;convertible&#32;to&#32;_M_p.</emphasis>
691 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__atomic_base(__pointer_type&#32;__p)&#32;noexcept&#32;:&#32;_M_p&#32;(__p)&#32;{&#32;}
692 
693 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;__pointer_type()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
694 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;load();&#32;}
695 
696 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;__pointer_type()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
697 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;load();&#32;}
698 
699 &#32;&#32;&#32;&#32;&#32;&#32;__pointer_type
700 &#32;&#32;&#32;&#32;&#32;&#32;operator=(__pointer_type&#32;__p)&#32;<emphasis role="keyword">noexcept</emphasis>
701 &#32;&#32;&#32;&#32;&#32;&#32;{
702 &#32;&#32;&#32;&#32;store(__p);
703 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__p;
704 &#32;&#32;&#32;&#32;&#32;&#32;}
705 
706 &#32;&#32;&#32;&#32;&#32;&#32;__pointer_type
707 &#32;&#32;&#32;&#32;&#32;&#32;operator=(__pointer_type&#32;__p)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
708 &#32;&#32;&#32;&#32;&#32;&#32;{
709 &#32;&#32;&#32;&#32;store(__p);
710 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__p;
711 &#32;&#32;&#32;&#32;&#32;&#32;}
712 
713 &#32;&#32;&#32;&#32;&#32;&#32;__pointer_type
714 &#32;&#32;&#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>
715 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;fetch_add(1);&#32;}
716 
717 &#32;&#32;&#32;&#32;&#32;&#32;__pointer_type
718 &#32;&#32;&#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
719 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;fetch_add(1);&#32;}
720 
721 &#32;&#32;&#32;&#32;&#32;&#32;__pointer_type
722 &#32;&#32;&#32;&#32;&#32;&#32;operator--(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>
723 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;fetch_sub(1);&#32;}
724 
725 &#32;&#32;&#32;&#32;&#32;&#32;__pointer_type
726 &#32;&#32;&#32;&#32;&#32;&#32;operator--(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
727 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;fetch_sub(1);&#32;}
728 
729 &#32;&#32;&#32;&#32;&#32;&#32;__pointer_type
730 &#32;&#32;&#32;&#32;&#32;&#32;operator++()&#32;<emphasis role="keyword">noexcept</emphasis>
731 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_add_fetch(&amp;_M_p,&#32;_M_type_size(1),
732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>));&#32;}
733 
734 &#32;&#32;&#32;&#32;&#32;&#32;__pointer_type
735 &#32;&#32;&#32;&#32;&#32;&#32;operator++()&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
736 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_add_fetch(&amp;_M_p,&#32;_M_type_size(1),
737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>));&#32;}
738 
739 &#32;&#32;&#32;&#32;&#32;&#32;__pointer_type
740 &#32;&#32;&#32;&#32;&#32;&#32;operator--()&#32;<emphasis role="keyword">noexcept</emphasis>
741 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_sub_fetch(&amp;_M_p,&#32;_M_type_size(1),
742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>));&#32;}
743 
744 &#32;&#32;&#32;&#32;&#32;&#32;__pointer_type
745 &#32;&#32;&#32;&#32;&#32;&#32;operator--()&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
746 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_sub_fetch(&amp;_M_p,&#32;_M_type_size(1),
747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>));&#32;}
748 
749 &#32;&#32;&#32;&#32;&#32;&#32;__pointer_type
750 &#32;&#32;&#32;&#32;&#32;&#32;operator+=(<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;__d)&#32;<emphasis role="keyword">noexcept</emphasis>
751 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_add_fetch(&amp;_M_p,&#32;_M_type_size(__d),
752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>));&#32;}
753 
754 &#32;&#32;&#32;&#32;&#32;&#32;__pointer_type
755 &#32;&#32;&#32;&#32;&#32;&#32;operator+=(<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;__d)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
756 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_add_fetch(&amp;_M_p,&#32;_M_type_size(__d),
757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>));&#32;}
758 
759 &#32;&#32;&#32;&#32;&#32;&#32;__pointer_type
760 &#32;&#32;&#32;&#32;&#32;&#32;operator-=(<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;__d)&#32;<emphasis role="keyword">noexcept</emphasis>
761 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_sub_fetch(&amp;_M_p,&#32;_M_type_size(__d),
762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>));&#32;}
763 
764 &#32;&#32;&#32;&#32;&#32;&#32;__pointer_type
765 &#32;&#32;&#32;&#32;&#32;&#32;operator-=(<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;__d)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
766 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_sub_fetch(&amp;_M_p,&#32;_M_type_size(__d),
767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>));&#32;}
768 
769 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
770 &#32;&#32;&#32;&#32;&#32;&#32;is_lock_free()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
771 &#32;&#32;&#32;&#32;&#32;&#32;{
772 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Produce&#32;a&#32;fake,&#32;minimally&#32;aligned&#32;pointer.</emphasis>
773 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_is_lock_free(<emphasis role="keyword">sizeof</emphasis>(_M_p),
774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>&#32;*<emphasis role="keyword">&gt;</emphasis>(-__alignof(_M_p)));
775 &#32;&#32;&#32;&#32;&#32;&#32;}
776 
777 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
778 &#32;&#32;&#32;&#32;&#32;&#32;is_lock_free()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
779 &#32;&#32;&#32;&#32;&#32;&#32;{
780 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Produce&#32;a&#32;fake,&#32;minimally&#32;aligned&#32;pointer.</emphasis>
781 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_is_lock_free(<emphasis role="keyword">sizeof</emphasis>(_M_p),
782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>&#32;*<emphasis role="keyword">&gt;</emphasis>(-__alignof(_M_p)));
783 &#32;&#32;&#32;&#32;&#32;&#32;}
784 
785 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
786 &#32;&#32;&#32;&#32;&#32;&#32;store(__pointer_type&#32;__p,
787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
788 &#32;&#32;&#32;&#32;&#32;&#32;{
789 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__b&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>&#32;((__unused__))
790 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__m&#32;&amp;&#32;__memory_order_mask;
791 
792 &#32;&#32;&#32;&#32;__glibcxx_assert(__b&#32;!=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bafb313754331704b978e9a80a933b3da7">memory_order_acquire</link>);
793 &#32;&#32;&#32;&#32;__glibcxx_assert(__b&#32;!=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bae17e60cbfd766a7f165872c36e2f7bc5">memory_order_acq_rel</link>);
794 &#32;&#32;&#32;&#32;__glibcxx_assert(__b&#32;!=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba0745f54882bc00251a719e42969db110">memory_order_consume</link>);
795 
796 &#32;&#32;&#32;&#32;__atomic_store_n(&amp;_M_p,&#32;__p,&#32;<emphasis role="keywordtype">int</emphasis>(__m));
797 &#32;&#32;&#32;&#32;&#32;&#32;}
798 
799 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
800 &#32;&#32;&#32;&#32;&#32;&#32;store(__pointer_type&#32;__p,
801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
802 &#32;&#32;&#32;&#32;&#32;&#32;{
803 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__b&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>&#32;((__unused__))
804 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__m&#32;&amp;&#32;__memory_order_mask;
805 &#32;&#32;&#32;&#32;__glibcxx_assert(__b&#32;!=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bafb313754331704b978e9a80a933b3da7">memory_order_acquire</link>);
806 &#32;&#32;&#32;&#32;__glibcxx_assert(__b&#32;!=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bae17e60cbfd766a7f165872c36e2f7bc5">memory_order_acq_rel</link>);
807 &#32;&#32;&#32;&#32;__glibcxx_assert(__b&#32;!=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba0745f54882bc00251a719e42969db110">memory_order_consume</link>);
808 
809 &#32;&#32;&#32;&#32;__atomic_store_n(&amp;_M_p,&#32;__p,&#32;<emphasis role="keywordtype">int</emphasis>(__m));
810 &#32;&#32;&#32;&#32;&#32;&#32;}
811 
812 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;__pointer_type
813 &#32;&#32;&#32;&#32;&#32;&#32;load(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
814 &#32;&#32;&#32;&#32;&#32;&#32;{
815 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__b&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>&#32;((__unused__))
816 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__m&#32;&amp;&#32;__memory_order_mask;
817 &#32;&#32;&#32;&#32;__glibcxx_assert(__b&#32;!=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba685a90c8fc516895354973c3918a5f7b">memory_order_release</link>);
818 &#32;&#32;&#32;&#32;__glibcxx_assert(__b&#32;!=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bae17e60cbfd766a7f165872c36e2f7bc5">memory_order_acq_rel</link>);
819 
820 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_load_n(&amp;_M_p,&#32;<emphasis role="keywordtype">int</emphasis>(__m));
821 &#32;&#32;&#32;&#32;&#32;&#32;}
822 
823 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;__pointer_type
824 &#32;&#32;&#32;&#32;&#32;&#32;load(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
825 &#32;&#32;&#32;&#32;&#32;&#32;{
826 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__b&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>&#32;((__unused__))
827 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__m&#32;&amp;&#32;__memory_order_mask;
828 &#32;&#32;&#32;&#32;__glibcxx_assert(__b&#32;!=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba685a90c8fc516895354973c3918a5f7b">memory_order_release</link>);
829 &#32;&#32;&#32;&#32;__glibcxx_assert(__b&#32;!=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bae17e60cbfd766a7f165872c36e2f7bc5">memory_order_acq_rel</link>);
830 
831 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_load_n(&amp;_M_p,&#32;<emphasis role="keywordtype">int</emphasis>(__m));
832 &#32;&#32;&#32;&#32;&#32;&#32;}
833 
834 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;__pointer_type
835 &#32;&#32;&#32;&#32;&#32;&#32;exchange(__pointer_type&#32;__p,
836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
837 &#32;&#32;&#32;&#32;&#32;&#32;{
838 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_exchange_n(&amp;_M_p,&#32;__p,&#32;<emphasis role="keywordtype">int</emphasis>(__m));
839 &#32;&#32;&#32;&#32;&#32;&#32;}
840 
841 
842 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;__pointer_type
843 &#32;&#32;&#32;&#32;&#32;&#32;exchange(__pointer_type&#32;__p,
844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
845 &#32;&#32;&#32;&#32;&#32;&#32;{
846 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_exchange_n(&amp;_M_p,&#32;__p,&#32;<emphasis role="keywordtype">int</emphasis>(__m));
847 &#32;&#32;&#32;&#32;&#32;&#32;}
848 
849 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">bool</emphasis>
850 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_weak(__pointer_type&amp;&#32;__p1,&#32;__pointer_type&#32;__p2,
851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m1,
852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa998860df3b1c89b07030695f92ff398">__m2</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
853 &#32;&#32;&#32;&#32;&#32;&#32;{
854 &#32;&#32;&#32;&#32;__glibcxx_assert(__is_valid_cmpexch_failure_order(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa998860df3b1c89b07030695f92ff398">__m2</link>));
855 
856 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_compare_exchange_n(&amp;_M_p,&#32;&amp;__p1,&#32;__p2,&#32;1,
857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>(__m1),&#32;<emphasis role="keywordtype">int</emphasis>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa998860df3b1c89b07030695f92ff398">__m2</link>));
858 &#32;&#32;&#32;&#32;&#32;&#32;}
859 
860 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">bool</emphasis>
861 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_weak(__pointer_type&amp;&#32;__p1,&#32;__pointer_type&#32;__p2,
862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m1,
863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa998860df3b1c89b07030695f92ff398">__m2</link>)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
864 &#32;&#32;&#32;&#32;&#32;&#32;{
865 &#32;&#32;&#32;&#32;__glibcxx_assert(__is_valid_cmpexch_failure_order(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa998860df3b1c89b07030695f92ff398">__m2</link>));
866 
867 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_compare_exchange_n(&amp;_M_p,&#32;&amp;__p1,&#32;__p2,&#32;1,
868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>(__m1),&#32;<emphasis role="keywordtype">int</emphasis>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa998860df3b1c89b07030695f92ff398">__m2</link>));
869 &#32;&#32;&#32;&#32;&#32;&#32;}
870 
871 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">bool</emphasis>
872 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_strong(__pointer_type&amp;&#32;__p1,&#32;__pointer_type&#32;__p2,
873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m1,
874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa998860df3b1c89b07030695f92ff398">__m2</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
875 &#32;&#32;&#32;&#32;&#32;&#32;{
876 &#32;&#32;&#32;&#32;__glibcxx_assert(__is_valid_cmpexch_failure_order(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa998860df3b1c89b07030695f92ff398">__m2</link>));
877 
878 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_compare_exchange_n(&amp;_M_p,&#32;&amp;__p1,&#32;__p2,&#32;0,
879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>(__m1),&#32;<emphasis role="keywordtype">int</emphasis>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa998860df3b1c89b07030695f92ff398">__m2</link>));
880 &#32;&#32;&#32;&#32;&#32;&#32;}
881 
882 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">bool</emphasis>
883 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_strong(__pointer_type&amp;&#32;__p1,&#32;__pointer_type&#32;__p2,
884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m1,
885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa998860df3b1c89b07030695f92ff398">__m2</link>)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
886 &#32;&#32;&#32;&#32;&#32;&#32;{
887 &#32;&#32;&#32;&#32;__glibcxx_assert(__is_valid_cmpexch_failure_order(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa998860df3b1c89b07030695f92ff398">__m2</link>));
888 
889 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_compare_exchange_n(&amp;_M_p,&#32;&amp;__p1,&#32;__p2,&#32;0,
890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>(__m1),&#32;<emphasis role="keywordtype">int</emphasis>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa998860df3b1c89b07030695f92ff398">__m2</link>));
891 &#32;&#32;&#32;&#32;&#32;&#32;}
892 
893 <emphasis role="preprocessor">#if&#32;__cpp_lib_atomic_wait</emphasis>
894 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
895 &#32;&#32;&#32;&#32;&#32;&#32;wait(__pointer_type&#32;__old,
896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
897 &#32;&#32;&#32;&#32;&#32;&#32;{
898 &#32;&#32;&#32;&#32;std::__atomic_wait_address_v(&amp;_M_p,&#32;__old,
899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__m,&#32;<emphasis role="keyword">this</emphasis>]
900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;load(__m);&#32;});
901 &#32;&#32;&#32;&#32;&#32;&#32;}
902 
903 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO&#32;add&#32;const&#32;volatile&#32;overload</emphasis>
904 
905 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
906 &#32;&#32;&#32;&#32;&#32;&#32;notify_one()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
907 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;std::__atomic_notify_address(&amp;_M_p,&#32;<emphasis role="keyword">false</emphasis>);&#32;}
908 
909 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO&#32;add&#32;const&#32;volatile&#32;overload</emphasis>
910 
911 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
912 &#32;&#32;&#32;&#32;&#32;&#32;notify_all()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
913 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;std::__atomic_notify_address(&amp;_M_p,&#32;<emphasis role="keyword">true</emphasis>);&#32;}
914 
915 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO&#32;add&#32;const&#32;volatile&#32;overload</emphasis>
916 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__cpp_lib_atomic_wait</emphasis>
917 
918 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;__pointer_type
919 &#32;&#32;&#32;&#32;&#32;&#32;fetch_add(<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;__d,
920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
921 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_fetch_add(&amp;_M_p,&#32;_M_type_size(__d),&#32;<emphasis role="keywordtype">int</emphasis>(__m));&#32;}
922 
923 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;__pointer_type
924 &#32;&#32;&#32;&#32;&#32;&#32;fetch_add(<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;__d,
925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
926 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_fetch_add(&amp;_M_p,&#32;_M_type_size(__d),&#32;<emphasis role="keywordtype">int</emphasis>(__m));&#32;}
927 
928 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;__pointer_type
929 &#32;&#32;&#32;&#32;&#32;&#32;fetch_sub(<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;__d,
930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
931 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_fetch_sub(&amp;_M_p,&#32;_M_type_size(__d),&#32;<emphasis role="keywordtype">int</emphasis>(__m));&#32;}
932 
933 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;__pointer_type
934 &#32;&#32;&#32;&#32;&#32;&#32;fetch_sub(<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;__d,
935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
936 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_fetch_sub(&amp;_M_p,&#32;_M_type_size(__d),&#32;<emphasis role="keywordtype">int</emphasis>(__m));&#32;}
937 &#32;&#32;&#32;&#32;};
938 
939 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
940 &#32;&#32;<emphasis role="comment">//&#32;Implementation&#32;details&#32;of&#32;atomic_ref&#32;and&#32;atomic&lt;floating-point&gt;.</emphasis>
941 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>__atomic_impl
942 &#32;&#32;{
943 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Remove&#32;volatile&#32;and&#32;create&#32;a&#32;non-deduced&#32;context&#32;for&#32;value&#32;arguments.</emphasis>
944 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
945 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Val&#32;=&#32;remove_volatile_t&lt;_Tp&gt;;
946 
947 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;As&#32;above,&#32;but&#32;for&#32;difference_type&#32;arguments.</emphasis>
948 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
949 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Diff&#32;=&#32;__conditional_t&lt;is_pointer_v&lt;_Tp&gt;,&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>,&#32;_Val&lt;_Tp&gt;&gt;;
950 
951 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Size,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Align&gt;
952 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">bool</emphasis>
953 &#32;&#32;&#32;&#32;&#32;&#32;is_lock_free()&#32;<emphasis role="keyword">noexcept</emphasis>
954 &#32;&#32;&#32;&#32;&#32;&#32;{
955 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Produce&#32;a&#32;fake,&#32;minimally&#32;aligned&#32;pointer.</emphasis>
956 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_is_lock_free(_Size,&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>&#32;*<emphasis role="keyword">&gt;</emphasis>(-_Align));
957 &#32;&#32;&#32;&#32;&#32;&#32;}
958 
959 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
960 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
961 &#32;&#32;&#32;&#32;&#32;&#32;store(_Tp*&#32;__ptr,&#32;_Val&lt;_Tp&gt;&#32;__t,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m)&#32;<emphasis role="keyword">noexcept</emphasis>
962 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__atomic_store(__ptr,&#32;std::__addressof(__t),&#32;<emphasis role="keywordtype">int</emphasis>(__m));&#32;}
963 
964 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
965 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;_Val&lt;_Tp&gt;
966 &#32;&#32;&#32;&#32;&#32;&#32;load(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__ptr,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m)&#32;<emphasis role="keyword">noexcept</emphasis>
967 &#32;&#32;&#32;&#32;&#32;&#32;{
968 &#32;&#32;&#32;&#32;<emphasis role="keyword">alignas</emphasis>(_Tp)&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;__buf[<emphasis role="keyword">sizeof</emphasis>(_Tp)];
969 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>*&#32;__dest&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_Val&lt;_Tp&gt;*<emphasis role="keyword">&gt;</emphasis>(__buf);
970 &#32;&#32;&#32;&#32;__atomic_load(__ptr,&#32;__dest,&#32;<emphasis role="keywordtype">int</emphasis>(__m));
971 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*__dest;
972 &#32;&#32;&#32;&#32;&#32;&#32;}
973 
974 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
975 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;_Val&lt;_Tp&gt;
976 &#32;&#32;&#32;&#32;&#32;&#32;exchange(_Tp*&#32;__ptr,&#32;_Val&lt;_Tp&gt;&#32;__desired,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m)&#32;<emphasis role="keyword">noexcept</emphasis>
977 &#32;&#32;&#32;&#32;&#32;&#32;{
978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">alignas</emphasis>(_Tp)&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;__buf[<emphasis role="keyword">sizeof</emphasis>(_Tp)];
979 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>*&#32;__dest&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_Val&lt;_Tp&gt;*<emphasis role="keyword">&gt;</emphasis>(__buf);
980 &#32;&#32;&#32;&#32;__atomic_exchange(__ptr,&#32;std::__addressof(__desired),&#32;__dest,&#32;<emphasis role="keywordtype">int</emphasis>(__m));
981 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*__dest;
982 &#32;&#32;&#32;&#32;&#32;&#32;}
983 
984 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
985 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">bool</emphasis>
986 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_weak(_Tp*&#32;__ptr,&#32;_Val&lt;_Tp&gt;&amp;&#32;__expected,
987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Val&lt;_Tp&gt;&#32;__desired,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__success,
988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__failure)&#32;<emphasis role="keyword">noexcept</emphasis>
989 &#32;&#32;&#32;&#32;&#32;&#32;{
990 &#32;&#32;&#32;&#32;__glibcxx_assert(__is_valid_cmpexch_failure_order(__failure));
991 
992 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_compare_exchange(__ptr,&#32;std::__addressof(__expected),
993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__addressof(__desired),&#32;<emphasis role="keyword">true</emphasis>,
994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>(__success),&#32;<emphasis role="keywordtype">int</emphasis>(__failure));
995 &#32;&#32;&#32;&#32;&#32;&#32;}
996 
997 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
998 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">bool</emphasis>
999 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_strong(_Tp*&#32;__ptr,&#32;_Val&lt;_Tp&gt;&amp;&#32;__expected,
1000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Val&lt;_Tp&gt;&#32;__desired,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__success,
1001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__failure)&#32;<emphasis role="keyword">noexcept</emphasis>
1002 &#32;&#32;&#32;&#32;&#32;&#32;{
1003 &#32;&#32;&#32;&#32;__glibcxx_assert(__is_valid_cmpexch_failure_order(__failure));
1004 
1005 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_compare_exchange(__ptr,&#32;std::__addressof(__expected),
1006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__addressof(__desired),&#32;<emphasis role="keyword">false</emphasis>,
1007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>(__success),&#32;<emphasis role="keywordtype">int</emphasis>(__failure));
1008 &#32;&#32;&#32;&#32;&#32;&#32;}
1009 
1010 <emphasis role="preprocessor">#if&#32;__cpp_lib_atomic_wait</emphasis>
1011 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1012 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
1013 &#32;&#32;&#32;&#32;&#32;&#32;wait(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__ptr,&#32;_Val&lt;_Tp&gt;&#32;__old,
1014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
1015 &#32;&#32;&#32;&#32;&#32;&#32;{
1016 &#32;&#32;&#32;&#32;std::__atomic_wait_address_v(__ptr,&#32;__old,
1017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__ptr,&#32;__m]()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::load(__ptr,&#32;__m);&#32;});
1018 &#32;&#32;&#32;&#32;&#32;&#32;}
1019 
1020 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO&#32;add&#32;const&#32;volatile&#32;overload</emphasis>
1021 
1022 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1023 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
1024 &#32;&#32;&#32;&#32;&#32;&#32;notify_one(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__ptr)&#32;<emphasis role="keyword">noexcept</emphasis>
1025 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;std::__atomic_notify_address(__ptr,&#32;<emphasis role="keyword">false</emphasis>);&#32;}
1026 
1027 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO&#32;add&#32;const&#32;volatile&#32;overload</emphasis>
1028 
1029 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1030 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
1031 &#32;&#32;&#32;&#32;&#32;&#32;notify_all(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__ptr)&#32;<emphasis role="keyword">noexcept</emphasis>
1032 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;std::__atomic_notify_address(__ptr,&#32;<emphasis role="keyword">true</emphasis>);&#32;}
1033 
1034 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO&#32;add&#32;const&#32;volatile&#32;overload</emphasis>
1035 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__cpp_lib_atomic_wait</emphasis>
1036 
1037 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1038 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;_Tp
1039 &#32;&#32;&#32;&#32;&#32;&#32;fetch_add(_Tp*&#32;__ptr,&#32;_Diff&lt;_Tp&gt;&#32;__i,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m)&#32;<emphasis role="keyword">noexcept</emphasis>
1040 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_fetch_add(__ptr,&#32;__i,&#32;<emphasis role="keywordtype">int</emphasis>(__m));&#32;}
1041 
1042 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1043 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;_Tp
1044 &#32;&#32;&#32;&#32;&#32;&#32;fetch_sub(_Tp*&#32;__ptr,&#32;_Diff&lt;_Tp&gt;&#32;__i,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m)&#32;<emphasis role="keyword">noexcept</emphasis>
1045 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_fetch_sub(__ptr,&#32;__i,&#32;<emphasis role="keywordtype">int</emphasis>(__m));&#32;}
1046 
1047 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1048 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;_Tp
1049 &#32;&#32;&#32;&#32;&#32;&#32;fetch_and(_Tp*&#32;__ptr,&#32;_Val&lt;_Tp&gt;&#32;__i,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m)&#32;<emphasis role="keyword">noexcept</emphasis>
1050 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_fetch_and(__ptr,&#32;__i,&#32;<emphasis role="keywordtype">int</emphasis>(__m));&#32;}
1051 
1052 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1053 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;_Tp
1054 &#32;&#32;&#32;&#32;&#32;&#32;fetch_or(_Tp*&#32;__ptr,&#32;_Val&lt;_Tp&gt;&#32;__i,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m)&#32;<emphasis role="keyword">noexcept</emphasis>
1055 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_fetch_or(__ptr,&#32;__i,&#32;<emphasis role="keywordtype">int</emphasis>(__m));&#32;}
1056 
1057 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1058 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;_Tp
1059 &#32;&#32;&#32;&#32;&#32;&#32;fetch_xor(_Tp*&#32;__ptr,&#32;_Val&lt;_Tp&gt;&#32;__i,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m)&#32;<emphasis role="keyword">noexcept</emphasis>
1060 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_fetch_xor(__ptr,&#32;__i,&#32;<emphasis role="keywordtype">int</emphasis>(__m));&#32;}
1061 
1062 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1063 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;_Tp
1064 &#32;&#32;&#32;&#32;&#32;&#32;__add_fetch(_Tp*&#32;__ptr,&#32;_Diff&lt;_Tp&gt;&#32;__i)&#32;<emphasis role="keyword">noexcept</emphasis>
1065 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_add_fetch(__ptr,&#32;__i,&#32;__ATOMIC_SEQ_CST);&#32;}
1066 
1067 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1068 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;_Tp
1069 &#32;&#32;&#32;&#32;&#32;&#32;__sub_fetch(_Tp*&#32;__ptr,&#32;_Diff&lt;_Tp&gt;&#32;__i)&#32;<emphasis role="keyword">noexcept</emphasis>
1070 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_sub_fetch(__ptr,&#32;__i,&#32;__ATOMIC_SEQ_CST);&#32;}
1071 
1072 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1073 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;_Tp
1074 &#32;&#32;&#32;&#32;&#32;&#32;__and_fetch(_Tp*&#32;__ptr,&#32;_Val&lt;_Tp&gt;&#32;__i)&#32;<emphasis role="keyword">noexcept</emphasis>
1075 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_and_fetch(__ptr,&#32;__i,&#32;__ATOMIC_SEQ_CST);&#32;}
1076 
1077 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1078 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;_Tp
1079 &#32;&#32;&#32;&#32;&#32;&#32;__or_fetch(_Tp*&#32;__ptr,&#32;_Val&lt;_Tp&gt;&#32;__i)&#32;<emphasis role="keyword">noexcept</emphasis>
1080 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_or_fetch(__ptr,&#32;__i,&#32;__ATOMIC_SEQ_CST);&#32;}
1081 
1082 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1083 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;_Tp
1084 &#32;&#32;&#32;&#32;&#32;&#32;__xor_fetch(_Tp*&#32;__ptr,&#32;_Val&lt;_Tp&gt;&#32;__i)&#32;<emphasis role="keyword">noexcept</emphasis>
1085 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_xor_fetch(__ptr,&#32;__i,&#32;__ATOMIC_SEQ_CST);&#32;}
1086 
1087 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1088 &#32;&#32;&#32;&#32;&#32;&#32;_Tp
1089 &#32;&#32;&#32;&#32;&#32;&#32;__fetch_add_flt(_Tp*&#32;__ptr,&#32;_Val&lt;_Tp&gt;&#32;__i,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m)&#32;<emphasis role="keyword">noexcept</emphasis>
1090 &#32;&#32;&#32;&#32;&#32;&#32;{
1091 &#32;&#32;&#32;&#32;_Val&lt;_Tp&gt;&#32;__oldval&#32;=&#32;load(__ptr,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bac6489d0374e297a776f6a3db7ea5654a">memory_order_relaxed</link>);
1092 &#32;&#32;&#32;&#32;_Val&lt;_Tp&gt;&#32;__newval&#32;=&#32;__oldval&#32;+&#32;__i;
1093 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!compare_exchange_weak(__ptr,&#32;__oldval,&#32;__newval,&#32;__m,
1094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bac6489d0374e297a776f6a3db7ea5654a">memory_order_relaxed</link>))
1095 &#32;&#32;&#32;&#32;&#32;&#32;__newval&#32;=&#32;__oldval&#32;+&#32;__i;
1096 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__oldval;
1097 &#32;&#32;&#32;&#32;&#32;&#32;}
1098 
1099 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1100 &#32;&#32;&#32;&#32;&#32;&#32;_Tp
1101 &#32;&#32;&#32;&#32;&#32;&#32;__fetch_sub_flt(_Tp*&#32;__ptr,&#32;_Val&lt;_Tp&gt;&#32;__i,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m)&#32;<emphasis role="keyword">noexcept</emphasis>
1102 &#32;&#32;&#32;&#32;&#32;&#32;{
1103 &#32;&#32;&#32;&#32;_Val&lt;_Tp&gt;&#32;__oldval&#32;=&#32;load(__ptr,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bac6489d0374e297a776f6a3db7ea5654a">memory_order_relaxed</link>);
1104 &#32;&#32;&#32;&#32;_Val&lt;_Tp&gt;&#32;__newval&#32;=&#32;__oldval&#32;-&#32;__i;
1105 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!compare_exchange_weak(__ptr,&#32;__oldval,&#32;__newval,&#32;__m,
1106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bac6489d0374e297a776f6a3db7ea5654a">memory_order_relaxed</link>))
1107 &#32;&#32;&#32;&#32;&#32;&#32;__newval&#32;=&#32;__oldval&#32;-&#32;__i;
1108 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__oldval;
1109 &#32;&#32;&#32;&#32;&#32;&#32;}
1110 
1111 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1112 &#32;&#32;&#32;&#32;&#32;&#32;_Tp
1113 &#32;&#32;&#32;&#32;&#32;&#32;__add_fetch_flt(_Tp*&#32;__ptr,&#32;_Val&lt;_Tp&gt;&#32;__i)&#32;<emphasis role="keyword">noexcept</emphasis>
1114 &#32;&#32;&#32;&#32;&#32;&#32;{
1115 &#32;&#32;&#32;&#32;_Val&lt;_Tp&gt;&#32;__oldval&#32;=&#32;load(__ptr,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bac6489d0374e297a776f6a3db7ea5654a">memory_order_relaxed</link>);
1116 &#32;&#32;&#32;&#32;_Val&lt;_Tp&gt;&#32;__newval&#32;=&#32;__oldval&#32;+&#32;__i;
1117 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!compare_exchange_weak(__ptr,&#32;__oldval,&#32;__newval,
1118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>,
1119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bac6489d0374e297a776f6a3db7ea5654a">memory_order_relaxed</link>))
1120 &#32;&#32;&#32;&#32;&#32;&#32;__newval&#32;=&#32;__oldval&#32;+&#32;__i;
1121 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__newval;
1122 &#32;&#32;&#32;&#32;&#32;&#32;}
1123 
1124 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1125 &#32;&#32;&#32;&#32;&#32;&#32;_Tp
1126 &#32;&#32;&#32;&#32;&#32;&#32;__sub_fetch_flt(_Tp*&#32;__ptr,&#32;_Val&lt;_Tp&gt;&#32;__i)&#32;<emphasis role="keyword">noexcept</emphasis>
1127 &#32;&#32;&#32;&#32;&#32;&#32;{
1128 &#32;&#32;&#32;&#32;_Val&lt;_Tp&gt;&#32;__oldval&#32;=&#32;load(__ptr,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bac6489d0374e297a776f6a3db7ea5654a">memory_order_relaxed</link>);
1129 &#32;&#32;&#32;&#32;_Val&lt;_Tp&gt;&#32;__newval&#32;=&#32;__oldval&#32;-&#32;__i;
1130 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!compare_exchange_weak(__ptr,&#32;__oldval,&#32;__newval,
1131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>,
1132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bac6489d0374e297a776f6a3db7ea5654a">memory_order_relaxed</link>))
1133 &#32;&#32;&#32;&#32;&#32;&#32;__newval&#32;=&#32;__oldval&#32;-&#32;__i;
1134 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__newval;
1135 &#32;&#32;&#32;&#32;&#32;&#32;}
1136 &#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;__atomic_impl</emphasis>
1137 
1138 &#32;&#32;<emphasis role="comment">//&#32;base&#32;class&#32;for&#32;atomic&lt;floating-point-type&gt;</emphasis>
1139 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Fp&gt;
1140 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__atomic_float
1141 &#32;&#32;&#32;&#32;{
1142 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_floating_point_v&lt;_Fp&gt;);
1143 
1144 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_alignment&#32;=&#32;__alignof__(_Fp);
1145 
1146 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1147 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;_Fp;
1148 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>difference_type&#32;=&#32;value_type;
1149 
1150 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_always_lock_free
1151 &#32;&#32;&#32;&#32;=&#32;__atomic_always_lock_free(<emphasis role="keyword">sizeof</emphasis>(_Fp),&#32;0);
1152 
1153 &#32;&#32;&#32;&#32;&#32;&#32;__atomic_float()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
1154 
1155 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
1156 &#32;&#32;&#32;&#32;&#32;&#32;__atomic_float(_Fp&#32;__t)&#32;:&#32;_M_fp(__t)
1157 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
1158 
1159 &#32;&#32;&#32;&#32;&#32;&#32;__atomic_float(<emphasis role="keyword">const</emphasis>&#32;__atomic_float&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
1160 &#32;&#32;&#32;&#32;&#32;&#32;__atomic_float&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;__atomic_float&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
1161 &#32;&#32;&#32;&#32;&#32;&#32;__atomic_float&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;__atomic_float&amp;)&#32;<emphasis role="keyword">volatile</emphasis>&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
1162 
1163 &#32;&#32;&#32;&#32;&#32;&#32;_Fp
1164 &#32;&#32;&#32;&#32;&#32;&#32;operator=(_Fp&#32;__t)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1165 &#32;&#32;&#32;&#32;&#32;&#32;{
1166 &#32;&#32;&#32;&#32;this-&gt;store(__t);
1167 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__t;
1168 &#32;&#32;&#32;&#32;&#32;&#32;}
1169 
1170 &#32;&#32;&#32;&#32;&#32;&#32;_Fp
1171 &#32;&#32;&#32;&#32;&#32;&#32;operator=(_Fp&#32;__t)&#32;<emphasis role="keyword">noexcept</emphasis>
1172 &#32;&#32;&#32;&#32;&#32;&#32;{
1173 &#32;&#32;&#32;&#32;this-&gt;store(__t);
1174 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__t;
1175 &#32;&#32;&#32;&#32;&#32;&#32;}
1176 
1177 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1178 &#32;&#32;&#32;&#32;&#32;&#32;is_lock_free()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1179 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::is_lock_free&lt;sizeof(_Fp),&#32;_S_alignment&gt;();&#32;}
1180 
1181 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1182 &#32;&#32;&#32;&#32;&#32;&#32;is_lock_free()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1183 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::is_lock_free&lt;sizeof(_Fp),&#32;_S_alignment&gt;();&#32;}
1184 
1185 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1186 &#32;&#32;&#32;&#32;&#32;&#32;store(_Fp&#32;__t,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1187 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__atomic_impl::store(&amp;_M_fp,&#32;__t,&#32;__m);&#32;}
1188 
1189 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1190 &#32;&#32;&#32;&#32;&#32;&#32;store(_Fp&#32;__t,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
1191 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__atomic_impl::store(&amp;_M_fp,&#32;__t,&#32;__m);&#32;}
1192 
1193 &#32;&#32;&#32;&#32;&#32;&#32;_Fp
1194 &#32;&#32;&#32;&#32;&#32;&#32;load(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1195 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::load(&amp;_M_fp,&#32;__m);&#32;}
1196 
1197 &#32;&#32;&#32;&#32;&#32;&#32;_Fp
1198 &#32;&#32;&#32;&#32;&#32;&#32;load(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1199 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::load(&amp;_M_fp,&#32;__m);&#32;}
1200 
1201 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;_Fp()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;load();&#32;}
1202 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;_Fp()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;load();&#32;}
1203 
1204 &#32;&#32;&#32;&#32;&#32;&#32;_Fp
1205 &#32;&#32;&#32;&#32;&#32;&#32;exchange(_Fp&#32;__desired,
1206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1207 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::exchange(&amp;_M_fp,&#32;__desired,&#32;__m);&#32;}
1208 
1209 &#32;&#32;&#32;&#32;&#32;&#32;_Fp
1210 &#32;&#32;&#32;&#32;&#32;&#32;exchange(_Fp&#32;__desired,
1211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
1212 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::exchange(&amp;_M_fp,&#32;__desired,&#32;__m);&#32;}
1213 
1214 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1215 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_weak(_Fp&amp;&#32;__expected,&#32;_Fp&#32;__desired,
1216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__success,
1217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__failure)&#32;<emphasis role="keyword">noexcept</emphasis>
1218 &#32;&#32;&#32;&#32;&#32;&#32;{
1219 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::compare_exchange_weak(&amp;_M_fp,
1220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__expected,&#32;__desired,
1221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__success,&#32;__failure);
1222 &#32;&#32;&#32;&#32;&#32;&#32;}
1223 
1224 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1225 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_weak(_Fp&amp;&#32;__expected,&#32;_Fp&#32;__desired,
1226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__success,
1227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__failure)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1228 &#32;&#32;&#32;&#32;&#32;&#32;{
1229 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::compare_exchange_weak(&amp;_M_fp,
1230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__expected,&#32;__desired,
1231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__success,&#32;__failure);
1232 &#32;&#32;&#32;&#32;&#32;&#32;}
1233 
1234 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1235 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_strong(_Fp&amp;&#32;__expected,&#32;_Fp&#32;__desired,
1236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__success,
1237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__failure)&#32;<emphasis role="keyword">noexcept</emphasis>
1238 &#32;&#32;&#32;&#32;&#32;&#32;{
1239 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::compare_exchange_strong(&amp;_M_fp,
1240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__expected,&#32;__desired,
1241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__success,&#32;__failure);
1242 &#32;&#32;&#32;&#32;&#32;&#32;}
1243 
1244 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1245 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_strong(_Fp&amp;&#32;__expected,&#32;_Fp&#32;__desired,
1246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__success,
1247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__failure)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1248 &#32;&#32;&#32;&#32;&#32;&#32;{
1249 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::compare_exchange_strong(&amp;_M_fp,
1250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__expected,&#32;__desired,
1251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__success,&#32;__failure);
1252 &#32;&#32;&#32;&#32;&#32;&#32;}
1253 
1254 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1255 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_weak(_Fp&amp;&#32;__expected,&#32;_Fp&#32;__desired,
1256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__order&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)
1257 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>
1258 &#32;&#32;&#32;&#32;&#32;&#32;{
1259 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;compare_exchange_weak(__expected,&#32;__desired,&#32;__order,
1260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cmpexch_failure_order(__order));
1261 &#32;&#32;&#32;&#32;&#32;&#32;}
1262 
1263 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1264 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_weak(_Fp&amp;&#32;__expected,&#32;_Fp&#32;__desired,
1265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__order&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)
1266 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1267 &#32;&#32;&#32;&#32;&#32;&#32;{
1268 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;compare_exchange_weak(__expected,&#32;__desired,&#32;__order,
1269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cmpexch_failure_order(__order));
1270 &#32;&#32;&#32;&#32;&#32;&#32;}
1271 
1272 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1273 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_strong(_Fp&amp;&#32;__expected,&#32;_Fp&#32;__desired,
1274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__order&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)
1275 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>
1276 &#32;&#32;&#32;&#32;&#32;&#32;{
1277 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;compare_exchange_strong(__expected,&#32;__desired,&#32;__order,
1278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cmpexch_failure_order(__order));
1279 &#32;&#32;&#32;&#32;&#32;&#32;}
1280 
1281 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1282 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_strong(_Fp&amp;&#32;__expected,&#32;_Fp&#32;__desired,
1283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__order&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)
1284 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1285 &#32;&#32;&#32;&#32;&#32;&#32;{
1286 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;compare_exchange_strong(__expected,&#32;__desired,&#32;__order,
1287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cmpexch_failure_order(__order));
1288 &#32;&#32;&#32;&#32;&#32;&#32;}
1289 
1290 <emphasis role="preprocessor">#if&#32;__cpp_lib_atomic_wait</emphasis>
1291 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
1292 &#32;&#32;&#32;&#32;&#32;&#32;wait(_Fp&#32;__old,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1293 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__atomic_impl::wait(&amp;_M_fp,&#32;__old,&#32;__m);&#32;}
1294 
1295 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO&#32;add&#32;const&#32;volatile&#32;overload</emphasis>
1296 
1297 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
1298 &#32;&#32;&#32;&#32;&#32;&#32;notify_one()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1299 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__atomic_impl::notify_one(&amp;_M_fp);&#32;}
1300 
1301 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO&#32;add&#32;const&#32;volatile&#32;overload</emphasis>
1302 
1303 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
1304 &#32;&#32;&#32;&#32;&#32;&#32;notify_all()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1305 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__atomic_impl::notify_all(&amp;_M_fp);&#32;}
1306 
1307 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO&#32;add&#32;const&#32;volatile&#32;overload</emphasis>
1308 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__cpp_lib_atomic_wait</emphasis>
1309 
1310 &#32;&#32;&#32;&#32;&#32;&#32;value_type
1311 &#32;&#32;&#32;&#32;&#32;&#32;fetch_add(value_type&#32;__i,
1312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
1313 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::__fetch_add_flt(&amp;_M_fp,&#32;__i,&#32;__m);&#32;}
1314 
1315 &#32;&#32;&#32;&#32;&#32;&#32;value_type
1316 &#32;&#32;&#32;&#32;&#32;&#32;fetch_add(value_type&#32;__i,
1317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1318 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::__fetch_add_flt(&amp;_M_fp,&#32;__i,&#32;__m);&#32;}
1319 
1320 &#32;&#32;&#32;&#32;&#32;&#32;value_type
1321 &#32;&#32;&#32;&#32;&#32;&#32;fetch_sub(value_type&#32;__i,
1322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
1323 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::__fetch_sub_flt(&amp;_M_fp,&#32;__i,&#32;__m);&#32;}
1324 
1325 &#32;&#32;&#32;&#32;&#32;&#32;value_type
1326 &#32;&#32;&#32;&#32;&#32;&#32;fetch_sub(value_type&#32;__i,
1327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1328 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::__fetch_sub_flt(&amp;_M_fp,&#32;__i,&#32;__m);&#32;}
1329 
1330 &#32;&#32;&#32;&#32;&#32;&#32;value_type
1331 &#32;&#32;&#32;&#32;&#32;&#32;operator+=(value_type&#32;__i)&#32;<emphasis role="keyword">noexcept</emphasis>
1332 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::__add_fetch_flt(&amp;_M_fp,&#32;__i);&#32;}
1333 
1334 &#32;&#32;&#32;&#32;&#32;&#32;value_type
1335 &#32;&#32;&#32;&#32;&#32;&#32;operator+=(value_type&#32;__i)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1336 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::__add_fetch_flt(&amp;_M_fp,&#32;__i);&#32;}
1337 
1338 &#32;&#32;&#32;&#32;&#32;&#32;value_type
1339 &#32;&#32;&#32;&#32;&#32;&#32;operator-=(value_type&#32;__i)&#32;<emphasis role="keyword">noexcept</emphasis>
1340 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::__sub_fetch_flt(&amp;_M_fp,&#32;__i);&#32;}
1341 
1342 &#32;&#32;&#32;&#32;&#32;&#32;value_type
1343 &#32;&#32;&#32;&#32;&#32;&#32;operator-=(value_type&#32;__i)&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1344 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::__sub_fetch_flt(&amp;_M_fp,&#32;__i);&#32;}
1345 
1346 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1347 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">alignas</emphasis>(_S_alignment)&#32;_Fp&#32;_M_fp&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a610b11475e52239098e45bf8791ddbf7">_GLIBCXX20_INIT</link>(0);
1348 &#32;&#32;&#32;&#32;};
1349 <emphasis role="preprocessor">#undef&#32;_GLIBCXX20_INIT</emphasis>
1350 
1351 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
1352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;=&#32;is_integral_v&lt;_Tp&gt;,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;=&#32;is_floating_point_v&lt;_Tp&gt;&gt;
1353 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__atomic_ref;
1354 
1355 &#32;&#32;<emphasis role="comment">//&#32;base&#32;class&#32;for&#32;non-integral,&#32;non-floating-point,&#32;non-pointer&#32;types</emphasis>
1356 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1357 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__atomic_ref&lt;_Tp,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>&gt;
1358 &#32;&#32;&#32;&#32;{
1359 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_trivially_copyable_v&lt;_Tp&gt;);
1360 
1361 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;1/2/4/8/16-byte&#32;types&#32;must&#32;be&#32;aligned&#32;to&#32;at&#32;least&#32;their&#32;size.</emphasis>
1362 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_S_min_alignment
1363 &#32;&#32;&#32;&#32;=&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;&amp;&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;-&#32;1))&#32;||&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;&gt;&#32;16
1364 &#32;&#32;&#32;&#32;?&#32;0&#32;:&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp);
1365 
1366 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1367 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;_Tp;
1368 
1369 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_always_lock_free
1370 &#32;&#32;&#32;&#32;=&#32;__atomic_always_lock_free(<emphasis role="keyword">sizeof</emphasis>(_Tp),&#32;0);
1371 
1372 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;required_alignment
1373 &#32;&#32;&#32;&#32;=&#32;_S_min_alignment&#32;&gt;&#32;<emphasis role="keyword">alignof</emphasis>(_Tp)&#32;?&#32;_S_min_alignment&#32;:&#32;<emphasis role="keyword">alignof</emphasis>(_Tp);
1374 
1375 &#32;&#32;&#32;&#32;&#32;&#32;__atomic_ref&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;__atomic_ref&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
1376 
1377 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1378 &#32;&#32;&#32;&#32;&#32;&#32;__atomic_ref(_Tp&amp;&#32;__t)&#32;:&#32;_M_ptr(std::__addressof(__t))
1379 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__glibcxx_assert(((<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a31b85deecb45924320becd11d3ee16ce">uintptr_t</link>)_M_ptr&#32;%&#32;required_alignment)&#32;==&#32;0);&#32;}
1380 
1381 &#32;&#32;&#32;&#32;&#32;&#32;__atomic_ref(<emphasis role="keyword">const</emphasis>&#32;__atomic_ref&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
1382 
1383 &#32;&#32;&#32;&#32;&#32;&#32;_Tp
1384 &#32;&#32;&#32;&#32;&#32;&#32;operator=(_Tp&#32;__t)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1385 &#32;&#32;&#32;&#32;&#32;&#32;{
1386 &#32;&#32;&#32;&#32;this-&gt;store(__t);
1387 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__t;
1388 &#32;&#32;&#32;&#32;&#32;&#32;}
1389 
1390 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;_Tp()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;load();&#32;}
1391 
1392 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1393 &#32;&#32;&#32;&#32;&#32;&#32;is_lock_free()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1394 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::is_lock_free&lt;sizeof(_Tp),&#32;required_alignment&gt;();&#32;}
1395 
1396 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1397 &#32;&#32;&#32;&#32;&#32;&#32;store(_Tp&#32;__t,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1398 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__atomic_impl::store(_M_ptr,&#32;__t,&#32;__m);&#32;}
1399 
1400 &#32;&#32;&#32;&#32;&#32;&#32;_Tp
1401 &#32;&#32;&#32;&#32;&#32;&#32;load(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1402 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::load(_M_ptr,&#32;__m);&#32;}
1403 
1404 &#32;&#32;&#32;&#32;&#32;&#32;_Tp
1405 &#32;&#32;&#32;&#32;&#32;&#32;exchange(_Tp&#32;__desired,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)
1406 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1407 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::exchange(_M_ptr,&#32;__desired,&#32;__m);&#32;}
1408 
1409 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1410 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_weak(_Tp&amp;&#32;__expected,&#32;_Tp&#32;__desired,
1411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__success,
1412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__failure)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1413 &#32;&#32;&#32;&#32;&#32;&#32;{
1414 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::compare_exchange_weak(_M_ptr,
1415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__expected,&#32;__desired,
1416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__success,&#32;__failure);
1417 &#32;&#32;&#32;&#32;&#32;&#32;}
1418 
1419 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1420 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_strong(_Tp&amp;&#32;__expected,&#32;_Tp&#32;__desired,
1421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__success,
1422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__failure)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1423 &#32;&#32;&#32;&#32;&#32;&#32;{
1424 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::compare_exchange_strong(_M_ptr,
1425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__expected,&#32;__desired,
1426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__success,&#32;__failure);
1427 &#32;&#32;&#32;&#32;&#32;&#32;}
1428 
1429 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1430 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_weak(_Tp&amp;&#32;__expected,&#32;_Tp&#32;__desired,
1431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__order&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)
1432 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1433 &#32;&#32;&#32;&#32;&#32;&#32;{
1434 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;compare_exchange_weak(__expected,&#32;__desired,&#32;__order,
1435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cmpexch_failure_order(__order));
1436 &#32;&#32;&#32;&#32;&#32;&#32;}
1437 
1438 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1439 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_strong(_Tp&amp;&#32;__expected,&#32;_Tp&#32;__desired,
1440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__order&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)
1441 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1442 &#32;&#32;&#32;&#32;&#32;&#32;{
1443 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;compare_exchange_strong(__expected,&#32;__desired,&#32;__order,
1444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cmpexch_failure_order(__order));
1445 &#32;&#32;&#32;&#32;&#32;&#32;}
1446 
1447 <emphasis role="preprocessor">#if&#32;__cpp_lib_atomic_wait</emphasis>
1448 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
1449 &#32;&#32;&#32;&#32;&#32;&#32;wait(_Tp&#32;__old,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1450 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__atomic_impl::wait(_M_ptr,&#32;__old,&#32;__m);&#32;}
1451 
1452 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO&#32;add&#32;const&#32;volatile&#32;overload</emphasis>
1453 
1454 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
1455 &#32;&#32;&#32;&#32;&#32;&#32;notify_one()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1456 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__atomic_impl::notify_one(_M_ptr);&#32;}
1457 
1458 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO&#32;add&#32;const&#32;volatile&#32;overload</emphasis>
1459 
1460 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
1461 &#32;&#32;&#32;&#32;&#32;&#32;notify_all()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1462 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__atomic_impl::notify_all(_M_ptr);&#32;}
1463 
1464 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO&#32;add&#32;const&#32;volatile&#32;overload</emphasis>
1465 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__cpp_lib_atomic_wait</emphasis>
1466 
1467 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1468 &#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;_M_ptr;
1469 &#32;&#32;&#32;&#32;};
1470 
1471 &#32;&#32;<emphasis role="comment">//&#32;base&#32;class&#32;for&#32;atomic_ref&lt;integral-type&gt;</emphasis>
1472 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1473 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__atomic_ref&lt;_Tp,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>&gt;
1474 &#32;&#32;&#32;&#32;{
1475 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_integral_v&lt;_Tp&gt;);
1476 
1477 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1478 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;_Tp;
1479 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>difference_type&#32;=&#32;value_type;
1480 
1481 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_always_lock_free
1482 &#32;&#32;&#32;&#32;=&#32;__atomic_always_lock_free(<emphasis role="keyword">sizeof</emphasis>(_Tp),&#32;0);
1483 
1484 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;required_alignment
1485 &#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;&gt;&#32;<emphasis role="keyword">alignof</emphasis>(_Tp)&#32;?&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;:&#32;<emphasis role="keyword">alignof</emphasis>(_Tp);
1486 
1487 &#32;&#32;&#32;&#32;&#32;&#32;__atomic_ref()&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
1488 &#32;&#32;&#32;&#32;&#32;&#32;__atomic_ref&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;__atomic_ref&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
1489 
1490 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1491 &#32;&#32;&#32;&#32;&#32;&#32;__atomic_ref(_Tp&amp;&#32;__t)&#32;:&#32;_M_ptr(&amp;__t)
1492 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__glibcxx_assert(((<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a31b85deecb45924320becd11d3ee16ce">uintptr_t</link>)_M_ptr&#32;%&#32;required_alignment)&#32;==&#32;0);&#32;}
1493 
1494 &#32;&#32;&#32;&#32;&#32;&#32;__atomic_ref(<emphasis role="keyword">const</emphasis>&#32;__atomic_ref&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
1495 
1496 &#32;&#32;&#32;&#32;&#32;&#32;_Tp
1497 &#32;&#32;&#32;&#32;&#32;&#32;operator=(_Tp&#32;__t)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1498 &#32;&#32;&#32;&#32;&#32;&#32;{
1499 &#32;&#32;&#32;&#32;this-&gt;store(__t);
1500 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__t;
1501 &#32;&#32;&#32;&#32;&#32;&#32;}
1502 
1503 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;_Tp()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;load();&#32;}
1504 
1505 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1506 &#32;&#32;&#32;&#32;&#32;&#32;is_lock_free()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1507 &#32;&#32;&#32;&#32;&#32;&#32;{
1508 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::is_lock_free&lt;sizeof(_Tp),&#32;required_alignment&gt;();
1509 &#32;&#32;&#32;&#32;&#32;&#32;}
1510 
1511 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1512 &#32;&#32;&#32;&#32;&#32;&#32;store(_Tp&#32;__t,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1513 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__atomic_impl::store(_M_ptr,&#32;__t,&#32;__m);&#32;}
1514 
1515 &#32;&#32;&#32;&#32;&#32;&#32;_Tp
1516 &#32;&#32;&#32;&#32;&#32;&#32;load(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1517 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::load(_M_ptr,&#32;__m);&#32;}
1518 
1519 &#32;&#32;&#32;&#32;&#32;&#32;_Tp
1520 &#32;&#32;&#32;&#32;&#32;&#32;exchange(_Tp&#32;__desired,
1521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1522 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::exchange(_M_ptr,&#32;__desired,&#32;__m);&#32;}
1523 
1524 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1525 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_weak(_Tp&amp;&#32;__expected,&#32;_Tp&#32;__desired,
1526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__success,
1527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__failure)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1528 &#32;&#32;&#32;&#32;&#32;&#32;{
1529 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::compare_exchange_weak(_M_ptr,
1530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__expected,&#32;__desired,
1531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__success,&#32;__failure);
1532 &#32;&#32;&#32;&#32;&#32;&#32;}
1533 
1534 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1535 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_strong(_Tp&amp;&#32;__expected,&#32;_Tp&#32;__desired,
1536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__success,
1537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__failure)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1538 &#32;&#32;&#32;&#32;&#32;&#32;{
1539 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::compare_exchange_strong(_M_ptr,
1540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__expected,&#32;__desired,
1541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__success,&#32;__failure);
1542 &#32;&#32;&#32;&#32;&#32;&#32;}
1543 
1544 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1545 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_weak(_Tp&amp;&#32;__expected,&#32;_Tp&#32;__desired,
1546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__order&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)
1547 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1548 &#32;&#32;&#32;&#32;&#32;&#32;{
1549 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;compare_exchange_weak(__expected,&#32;__desired,&#32;__order,
1550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cmpexch_failure_order(__order));
1551 &#32;&#32;&#32;&#32;&#32;&#32;}
1552 
1553 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1554 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_strong(_Tp&amp;&#32;__expected,&#32;_Tp&#32;__desired,
1555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__order&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)
1556 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1557 &#32;&#32;&#32;&#32;&#32;&#32;{
1558 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;compare_exchange_strong(__expected,&#32;__desired,&#32;__order,
1559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cmpexch_failure_order(__order));
1560 &#32;&#32;&#32;&#32;&#32;&#32;}
1561 
1562 <emphasis role="preprocessor">#if&#32;__cpp_lib_atomic_wait</emphasis>
1563 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
1564 &#32;&#32;&#32;&#32;&#32;&#32;wait(_Tp&#32;__old,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1565 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__atomic_impl::wait(_M_ptr,&#32;__old,&#32;__m);&#32;}
1566 
1567 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO&#32;add&#32;const&#32;volatile&#32;overload</emphasis>
1568 
1569 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
1570 &#32;&#32;&#32;&#32;&#32;&#32;notify_one()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1571 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__atomic_impl::notify_one(_M_ptr);&#32;}
1572 
1573 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO&#32;add&#32;const&#32;volatile&#32;overload</emphasis>
1574 
1575 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
1576 &#32;&#32;&#32;&#32;&#32;&#32;notify_all()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1577 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__atomic_impl::notify_all(_M_ptr);&#32;}
1578 
1579 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO&#32;add&#32;const&#32;volatile&#32;overload</emphasis>
1580 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__cpp_lib_atomic_wait&#32;</emphasis>
1581 
1582 &#32;&#32;&#32;&#32;&#32;&#32;value_type
1583 &#32;&#32;&#32;&#32;&#32;&#32;fetch_add(value_type&#32;__i,
1584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1585 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::fetch_add(_M_ptr,&#32;__i,&#32;__m);&#32;}
1586 
1587 &#32;&#32;&#32;&#32;&#32;&#32;value_type
1588 &#32;&#32;&#32;&#32;&#32;&#32;fetch_sub(value_type&#32;__i,
1589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1590 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::fetch_sub(_M_ptr,&#32;__i,&#32;__m);&#32;}
1591 
1592 &#32;&#32;&#32;&#32;&#32;&#32;value_type
1593 &#32;&#32;&#32;&#32;&#32;&#32;fetch_and(value_type&#32;__i,
1594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1595 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::fetch_and(_M_ptr,&#32;__i,&#32;__m);&#32;}
1596 
1597 &#32;&#32;&#32;&#32;&#32;&#32;value_type
1598 &#32;&#32;&#32;&#32;&#32;&#32;fetch_or(value_type&#32;__i,
1599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1600 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::fetch_or(_M_ptr,&#32;__i,&#32;__m);&#32;}
1601 
1602 &#32;&#32;&#32;&#32;&#32;&#32;value_type
1603 &#32;&#32;&#32;&#32;&#32;&#32;fetch_xor(value_type&#32;__i,
1604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1605 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::fetch_xor(_M_ptr,&#32;__i,&#32;__m);&#32;}
1606 
1607 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;value_type
1608 &#32;&#32;&#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1609 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;fetch_add(1);&#32;}
1610 
1611 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;value_type
1612 &#32;&#32;&#32;&#32;&#32;&#32;operator--(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1613 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;fetch_sub(1);&#32;}
1614 
1615 &#32;&#32;&#32;&#32;&#32;&#32;value_type
1616 &#32;&#32;&#32;&#32;&#32;&#32;operator++()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1617 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::__add_fetch(_M_ptr,&#32;value_type(1));&#32;}
1618 
1619 &#32;&#32;&#32;&#32;&#32;&#32;value_type
1620 &#32;&#32;&#32;&#32;&#32;&#32;operator--()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1621 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::__sub_fetch(_M_ptr,&#32;value_type(1));&#32;}
1622 
1623 &#32;&#32;&#32;&#32;&#32;&#32;value_type
1624 &#32;&#32;&#32;&#32;&#32;&#32;operator+=(value_type&#32;__i)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1625 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::__add_fetch(_M_ptr,&#32;__i);&#32;}
1626 
1627 &#32;&#32;&#32;&#32;&#32;&#32;value_type
1628 &#32;&#32;&#32;&#32;&#32;&#32;operator-=(value_type&#32;__i)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1629 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::__sub_fetch(_M_ptr,&#32;__i);&#32;}
1630 
1631 &#32;&#32;&#32;&#32;&#32;&#32;value_type
1632 &#32;&#32;&#32;&#32;&#32;&#32;operator&amp;=(value_type&#32;__i)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1633 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::__and_fetch(_M_ptr,&#32;__i);&#32;}
1634 
1635 &#32;&#32;&#32;&#32;&#32;&#32;value_type
1636 &#32;&#32;&#32;&#32;&#32;&#32;operator|=(value_type&#32;__i)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1637 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::__or_fetch(_M_ptr,&#32;__i);&#32;}
1638 
1639 &#32;&#32;&#32;&#32;&#32;&#32;value_type
1640 &#32;&#32;&#32;&#32;&#32;&#32;operator^=(value_type&#32;__i)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1641 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::__xor_fetch(_M_ptr,&#32;__i);&#32;}
1642 
1643 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1644 &#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;_M_ptr;
1645 &#32;&#32;&#32;&#32;};
1646 
1647 &#32;&#32;<emphasis role="comment">//&#32;base&#32;class&#32;for&#32;atomic_ref&lt;floating-point-type&gt;</emphasis>
1648 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Fp&gt;
1649 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__atomic_ref&lt;_Fp,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
1650 &#32;&#32;&#32;&#32;{
1651 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_floating_point_v&lt;_Fp&gt;);
1652 
1653 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1654 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;_Fp;
1655 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>difference_type&#32;=&#32;value_type;
1656 
1657 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_always_lock_free
1658 &#32;&#32;&#32;&#32;=&#32;__atomic_always_lock_free(<emphasis role="keyword">sizeof</emphasis>(_Fp),&#32;0);
1659 
1660 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;required_alignment&#32;=&#32;__alignof__(_Fp);
1661 
1662 &#32;&#32;&#32;&#32;&#32;&#32;__atomic_ref()&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
1663 &#32;&#32;&#32;&#32;&#32;&#32;__atomic_ref&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;__atomic_ref&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
1664 
1665 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1666 &#32;&#32;&#32;&#32;&#32;&#32;__atomic_ref(_Fp&amp;&#32;__t)&#32;:&#32;_M_ptr(&amp;__t)
1667 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__glibcxx_assert(((<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a31b85deecb45924320becd11d3ee16ce">uintptr_t</link>)_M_ptr&#32;%&#32;required_alignment)&#32;==&#32;0);&#32;}
1668 
1669 &#32;&#32;&#32;&#32;&#32;&#32;__atomic_ref(<emphasis role="keyword">const</emphasis>&#32;__atomic_ref&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
1670 
1671 &#32;&#32;&#32;&#32;&#32;&#32;_Fp
1672 &#32;&#32;&#32;&#32;&#32;&#32;operator=(_Fp&#32;__t)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1673 &#32;&#32;&#32;&#32;&#32;&#32;{
1674 &#32;&#32;&#32;&#32;this-&gt;store(__t);
1675 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__t;
1676 &#32;&#32;&#32;&#32;&#32;&#32;}
1677 
1678 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;_Fp()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;load();&#32;}
1679 
1680 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1681 &#32;&#32;&#32;&#32;&#32;&#32;is_lock_free()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1682 &#32;&#32;&#32;&#32;&#32;&#32;{
1683 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::is_lock_free&lt;sizeof(_Fp),&#32;required_alignment&gt;();
1684 &#32;&#32;&#32;&#32;&#32;&#32;}
1685 
1686 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1687 &#32;&#32;&#32;&#32;&#32;&#32;store(_Fp&#32;__t,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1688 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__atomic_impl::store(_M_ptr,&#32;__t,&#32;__m);&#32;}
1689 
1690 &#32;&#32;&#32;&#32;&#32;&#32;_Fp
1691 &#32;&#32;&#32;&#32;&#32;&#32;load(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1692 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::load(_M_ptr,&#32;__m);&#32;}
1693 
1694 &#32;&#32;&#32;&#32;&#32;&#32;_Fp
1695 &#32;&#32;&#32;&#32;&#32;&#32;exchange(_Fp&#32;__desired,
1696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1697 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::exchange(_M_ptr,&#32;__desired,&#32;__m);&#32;}
1698 
1699 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1700 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_weak(_Fp&amp;&#32;__expected,&#32;_Fp&#32;__desired,
1701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__success,
1702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__failure)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1703 &#32;&#32;&#32;&#32;&#32;&#32;{
1704 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::compare_exchange_weak(_M_ptr,
1705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__expected,&#32;__desired,
1706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__success,&#32;__failure);
1707 &#32;&#32;&#32;&#32;&#32;&#32;}
1708 
1709 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1710 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_strong(_Fp&amp;&#32;__expected,&#32;_Fp&#32;__desired,
1711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__success,
1712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__failure)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1713 &#32;&#32;&#32;&#32;&#32;&#32;{
1714 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::compare_exchange_strong(_M_ptr,
1715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__expected,&#32;__desired,
1716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__success,&#32;__failure);
1717 &#32;&#32;&#32;&#32;&#32;&#32;}
1718 
1719 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1720 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_weak(_Fp&amp;&#32;__expected,&#32;_Fp&#32;__desired,
1721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__order&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)
1722 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1723 &#32;&#32;&#32;&#32;&#32;&#32;{
1724 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;compare_exchange_weak(__expected,&#32;__desired,&#32;__order,
1725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cmpexch_failure_order(__order));
1726 &#32;&#32;&#32;&#32;&#32;&#32;}
1727 
1728 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1729 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_strong(_Fp&amp;&#32;__expected,&#32;_Fp&#32;__desired,
1730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__order&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)
1731 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1732 &#32;&#32;&#32;&#32;&#32;&#32;{
1733 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;compare_exchange_strong(__expected,&#32;__desired,&#32;__order,
1734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cmpexch_failure_order(__order));
1735 &#32;&#32;&#32;&#32;&#32;&#32;}
1736 
1737 <emphasis role="preprocessor">#if&#32;__cpp_lib_atomic_wait</emphasis>
1738 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
1739 &#32;&#32;&#32;&#32;&#32;&#32;wait(_Fp&#32;__old,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1740 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__atomic_impl::wait(_M_ptr,&#32;__old,&#32;__m);&#32;}
1741 
1742 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO&#32;add&#32;const&#32;volatile&#32;overload</emphasis>
1743 
1744 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
1745 &#32;&#32;&#32;&#32;&#32;&#32;notify_one()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1746 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__atomic_impl::notify_one(_M_ptr);&#32;}
1747 
1748 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO&#32;add&#32;const&#32;volatile&#32;overload</emphasis>
1749 
1750 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
1751 &#32;&#32;&#32;&#32;&#32;&#32;notify_all()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1752 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__atomic_impl::notify_all(_M_ptr);&#32;}
1753 
1754 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO&#32;add&#32;const&#32;volatile&#32;overload</emphasis>
1755 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__cpp_lib_atomic_wait</emphasis>
1756 
1757 &#32;&#32;&#32;&#32;&#32;&#32;value_type
1758 &#32;&#32;&#32;&#32;&#32;&#32;fetch_add(value_type&#32;__i,
1759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1760 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::__fetch_add_flt(_M_ptr,&#32;__i,&#32;__m);&#32;}
1761 
1762 &#32;&#32;&#32;&#32;&#32;&#32;value_type
1763 &#32;&#32;&#32;&#32;&#32;&#32;fetch_sub(value_type&#32;__i,
1764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1765 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::__fetch_sub_flt(_M_ptr,&#32;__i,&#32;__m);&#32;}
1766 
1767 &#32;&#32;&#32;&#32;&#32;&#32;value_type
1768 &#32;&#32;&#32;&#32;&#32;&#32;operator+=(value_type&#32;__i)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1769 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::__add_fetch_flt(_M_ptr,&#32;__i);&#32;}
1770 
1771 &#32;&#32;&#32;&#32;&#32;&#32;value_type
1772 &#32;&#32;&#32;&#32;&#32;&#32;operator-=(value_type&#32;__i)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1773 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::__sub_fetch_flt(_M_ptr,&#32;__i);&#32;}
1774 
1775 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1776 &#32;&#32;&#32;&#32;&#32;&#32;_Fp*&#32;_M_ptr;
1777 &#32;&#32;&#32;&#32;};
1778 
1779 &#32;&#32;<emphasis role="comment">//&#32;base&#32;class&#32;for&#32;atomic_ref&lt;pointer-type&gt;</emphasis>
1780 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1781 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__atomic_ref&lt;_Tp*,&#32;<emphasis role="keyword">false</emphasis>,&#32;<emphasis role="keyword">false</emphasis>&gt;
1782 &#32;&#32;&#32;&#32;{
1783 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1784 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;_Tp*;
1785 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>difference_type&#32;=&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>;
1786 
1787 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_always_lock_free&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1ab74e152cd908762af56d36b4bdc5a1bc">ATOMIC_POINTER_LOCK_FREE</link>&#32;==&#32;2;
1788 
1789 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;required_alignment&#32;=&#32;__alignof__(_Tp*);
1790 
1791 &#32;&#32;&#32;&#32;&#32;&#32;__atomic_ref()&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
1792 &#32;&#32;&#32;&#32;&#32;&#32;__atomic_ref&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;__atomic_ref&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
1793 
1794 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1795 &#32;&#32;&#32;&#32;&#32;&#32;__atomic_ref(_Tp*&amp;&#32;__t)&#32;:&#32;_M_ptr(std::__addressof(__t))
1796 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__glibcxx_assert(((<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a31b85deecb45924320becd11d3ee16ce">uintptr_t</link>)_M_ptr&#32;%&#32;required_alignment)&#32;==&#32;0);&#32;}
1797 
1798 &#32;&#32;&#32;&#32;&#32;&#32;__atomic_ref(<emphasis role="keyword">const</emphasis>&#32;__atomic_ref&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
1799 
1800 &#32;&#32;&#32;&#32;&#32;&#32;_Tp*
1801 &#32;&#32;&#32;&#32;&#32;&#32;operator=(_Tp*&#32;__t)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1802 &#32;&#32;&#32;&#32;&#32;&#32;{
1803 &#32;&#32;&#32;&#32;this-&gt;store(__t);
1804 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__t;
1805 &#32;&#32;&#32;&#32;&#32;&#32;}
1806 
1807 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;_Tp*()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;load();&#32;}
1808 
1809 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1810 &#32;&#32;&#32;&#32;&#32;&#32;is_lock_free()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1811 &#32;&#32;&#32;&#32;&#32;&#32;{
1812 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::is_lock_free&lt;sizeof(_Tp*),&#32;required_alignment&gt;();
1813 &#32;&#32;&#32;&#32;&#32;&#32;}
1814 
1815 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1816 &#32;&#32;&#32;&#32;&#32;&#32;store(_Tp*&#32;__t,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1817 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__atomic_impl::store(_M_ptr,&#32;__t,&#32;__m);&#32;}
1818 
1819 &#32;&#32;&#32;&#32;&#32;&#32;_Tp*
1820 &#32;&#32;&#32;&#32;&#32;&#32;load(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1821 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::load(_M_ptr,&#32;__m);&#32;}
1822 
1823 &#32;&#32;&#32;&#32;&#32;&#32;_Tp*
1824 &#32;&#32;&#32;&#32;&#32;&#32;exchange(_Tp*&#32;__desired,
1825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1826 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::exchange(_M_ptr,&#32;__desired,&#32;__m);&#32;}
1827 
1828 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1829 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_weak(_Tp*&amp;&#32;__expected,&#32;_Tp*&#32;__desired,
1830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__success,
1831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__failure)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1832 &#32;&#32;&#32;&#32;&#32;&#32;{
1833 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::compare_exchange_weak(_M_ptr,
1834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__expected,&#32;__desired,
1835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__success,&#32;__failure);
1836 &#32;&#32;&#32;&#32;&#32;&#32;}
1837 
1838 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1839 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_strong(_Tp*&amp;&#32;__expected,&#32;_Tp*&#32;__desired,
1840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__success,
1841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__failure)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1842 &#32;&#32;&#32;&#32;&#32;&#32;{
1843 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::compare_exchange_strong(_M_ptr,
1844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__expected,&#32;__desired,
1845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__success,&#32;__failure);
1846 &#32;&#32;&#32;&#32;&#32;&#32;}
1847 
1848 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1849 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_weak(_Tp*&amp;&#32;__expected,&#32;_Tp*&#32;__desired,
1850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__order&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)
1851 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1852 &#32;&#32;&#32;&#32;&#32;&#32;{
1853 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;compare_exchange_weak(__expected,&#32;__desired,&#32;__order,
1854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cmpexch_failure_order(__order));
1855 &#32;&#32;&#32;&#32;&#32;&#32;}
1856 
1857 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1858 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_strong(_Tp*&amp;&#32;__expected,&#32;_Tp*&#32;__desired,
1859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__order&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)
1860 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1861 &#32;&#32;&#32;&#32;&#32;&#32;{
1862 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;compare_exchange_strong(__expected,&#32;__desired,&#32;__order,
1863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cmpexch_failure_order(__order));
1864 &#32;&#32;&#32;&#32;&#32;&#32;}
1865 
1866 <emphasis role="preprocessor">#if&#32;__cpp_lib_atomic_wait</emphasis>
1867 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
1868 &#32;&#32;&#32;&#32;&#32;&#32;wait(_Tp*&#32;__old,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1869 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__atomic_impl::wait(_M_ptr,&#32;__old,&#32;__m);&#32;}
1870 
1871 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO&#32;add&#32;const&#32;volatile&#32;overload</emphasis>
1872 
1873 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
1874 &#32;&#32;&#32;&#32;&#32;&#32;notify_one()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1875 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__atomic_impl::notify_one(_M_ptr);&#32;}
1876 
1877 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO&#32;add&#32;const&#32;volatile&#32;overload</emphasis>
1878 
1879 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
1880 &#32;&#32;&#32;&#32;&#32;&#32;notify_all()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1881 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__atomic_impl::notify_all(_M_ptr);&#32;}
1882 
1883 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO&#32;add&#32;const&#32;volatile&#32;overload</emphasis>
1884 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__cpp_lib_atomic_wait</emphasis>
1885 
1886 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;value_type
1887 &#32;&#32;&#32;&#32;&#32;&#32;fetch_add(difference_type&#32;__d,
1888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1889 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::fetch_add(_M_ptr,&#32;_S_type_size(__d),&#32;__m);&#32;}
1890 
1891 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;value_type
1892 &#32;&#32;&#32;&#32;&#32;&#32;fetch_sub(difference_type&#32;__d,
1893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__m&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1894 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::fetch_sub(_M_ptr,&#32;_S_type_size(__d),&#32;__m);&#32;}
1895 
1896 &#32;&#32;&#32;&#32;&#32;&#32;value_type
1897 &#32;&#32;&#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1898 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;fetch_add(1);&#32;}
1899 
1900 &#32;&#32;&#32;&#32;&#32;&#32;value_type
1901 &#32;&#32;&#32;&#32;&#32;&#32;operator--(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1902 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;fetch_sub(1);&#32;}
1903 
1904 &#32;&#32;&#32;&#32;&#32;&#32;value_type
1905 &#32;&#32;&#32;&#32;&#32;&#32;operator++()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1906 &#32;&#32;&#32;&#32;&#32;&#32;{
1907 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::__add_fetch(_M_ptr,&#32;_S_type_size(1));
1908 &#32;&#32;&#32;&#32;&#32;&#32;}
1909 
1910 &#32;&#32;&#32;&#32;&#32;&#32;value_type
1911 &#32;&#32;&#32;&#32;&#32;&#32;operator--()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1912 &#32;&#32;&#32;&#32;&#32;&#32;{
1913 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::__sub_fetch(_M_ptr,&#32;_S_type_size(1));
1914 &#32;&#32;&#32;&#32;&#32;&#32;}
1915 
1916 &#32;&#32;&#32;&#32;&#32;&#32;value_type
1917 &#32;&#32;&#32;&#32;&#32;&#32;operator+=(difference_type&#32;__d)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1918 &#32;&#32;&#32;&#32;&#32;&#32;{
1919 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::__add_fetch(_M_ptr,&#32;_S_type_size(__d));
1920 &#32;&#32;&#32;&#32;&#32;&#32;}
1921 
1922 &#32;&#32;&#32;&#32;&#32;&#32;value_type
1923 &#32;&#32;&#32;&#32;&#32;&#32;operator-=(difference_type&#32;__d)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1924 &#32;&#32;&#32;&#32;&#32;&#32;{
1925 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::__sub_fetch(_M_ptr,&#32;_S_type_size(__d));
1926 &#32;&#32;&#32;&#32;&#32;&#32;}
1927 
1928 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1929 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>
1930 &#32;&#32;&#32;&#32;&#32;&#32;_S_type_size(<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;__d)&#32;<emphasis role="keyword">noexcept</emphasis>
1931 &#32;&#32;&#32;&#32;&#32;&#32;{
1932 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_object_v&lt;_Tp&gt;);
1933 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__d&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp);
1934 &#32;&#32;&#32;&#32;&#32;&#32;}
1935 
1936 &#32;&#32;&#32;&#32;&#32;&#32;_Tp**&#32;_M_ptr;
1937 &#32;&#32;&#32;&#32;};
1938 
1939 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++2a</emphasis>
1940 
1942 
1943 _GLIBCXX_END_NAMESPACE_VERSION
1944 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
1945 
1946 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
