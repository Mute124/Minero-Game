<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2parallel_2find__selectors_8h_source" xml:lang="en-US">
<title>find_selectors.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/parallel/find_selectors.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2007-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
31 <emphasis role="comment">//&#32;Written&#32;by&#32;Felix&#32;Putze.</emphasis>
32 
33 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_PARALLEL_FIND_SELECTORS_H</emphasis>
34 <emphasis role="preprocessor">#define&#32;_GLIBCXX_PARALLEL_FIND_SELECTORS_H&#32;1</emphasis>
35 
36 <emphasis role="preprocessor">#include&#32;&lt;parallel/tags.h&gt;</emphasis>
37 <emphasis role="preprocessor">#include&#32;&lt;parallel/basic_iterator.h&gt;</emphasis>
38 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_pair.h&gt;</emphasis>
39 
40 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__parallel">__gnu_parallel</link>
41 {
43 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__generic_find_selector
44 &#32;&#32;{&#32;};
45 
50 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__find_if_selector&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__generic_find_selector
51 &#32;&#32;{
57 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RAIter2,
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred&gt;
59 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;
60 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____find__if__selector_1ab5c063395b4e4f3e1be257ac5327f8b2">operator()</link>(_RAIter1&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;_RAIter2&#32;__i2,&#32;_Pred&#32;__pred)
61 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__pred(*<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>);&#32;}
62 
69 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RAIter2,
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred&gt;
71 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;_RAIter1,&#32;_RAIter2&gt;&#32;
72 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____find__if__selector_1a63d49b74e648a65e248b4e732b97b068">_M_sequential_algorithm</link>(_RAIter1&#32;__begin1,
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter1&#32;__end1,
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter2&#32;__begin2,&#32;_Pred&#32;__pred)
75 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(find_if(__begin1,&#32;__end1,&#32;__pred,
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">sequential_tag</link>()),&#32;__begin2);&#32;}
77 &#32;&#32;};
78 
80 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__adjacent_find_selector&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__generic_find_selector
81 &#32;&#32;{
87 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RAIter2,
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred&gt;
89 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;
90 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____adjacent__find__selector_1afba73305cf46d20618b0deb3cbd4a1ba">operator()</link>(_RAIter1&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;_RAIter2&#32;__i2,&#32;_Pred&#32;__pred)
91 &#32;&#32;&#32;&#32;&#32;&#32;{
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Passed&#32;end&#32;iterator&#32;is&#32;one&#32;short.</emphasis>
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__pred(*<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;*(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;+&#32;1));
94 &#32;&#32;&#32;&#32;&#32;&#32;}
95 
102 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RAIter2,
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred&gt;
104 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;_RAIter1,&#32;_RAIter2&gt;
105 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____adjacent__find__selector_1ab7d06dae1d5116519a4a41172ba610cd">_M_sequential_algorithm</link>(_RAIter1&#32;__begin1,
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter1&#32;__end1,
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter2&#32;__begin2,&#32;_Pred&#32;__pred)
108 &#32;&#32;&#32;&#32;&#32;&#32;{
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Passed&#32;end&#32;iterator&#32;is&#32;one&#32;short.</emphasis>
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter1&#32;__spot&#32;=&#32;adjacent_find(__begin1,&#32;__end1&#32;+&#32;1,
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pred,&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">sequential_tag</link>());
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__spot&#32;==&#32;(__end1&#32;+&#32;1))
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__spot&#32;=&#32;__end1;
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(__spot,&#32;__begin2);
115 &#32;&#32;&#32;&#32;&#32;&#32;}
116 &#32;&#32;};
117 
119 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__mismatch_selector&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__generic_find_selector
120 &#32;&#32;{
127 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RAIter2,
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred&gt;
129 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;
130 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____mismatch__selector_1acce7eaf03f5dcb028e255f8b40ad9dfd">operator()</link>(_RAIter1&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;_RAIter2&#32;__i2,&#32;_Pred&#32;__pred)
131 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!__pred(*<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;*__i2);&#32;}
132 
140 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RAIter2,
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred&gt;
142 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;_RAIter1,&#32;_RAIter2&gt;
143 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____mismatch__selector_1afb2ab78f45349666a586eb8dd429f6c6">_M_sequential_algorithm</link>(_RAIter1&#32;__begin1,
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter1&#32;__end1,
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter2&#32;__begin2,&#32;_Pred&#32;__pred)
146 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;mismatch(__begin1,&#32;__end1,&#32;__begin2,
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pred,&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">sequential_tag</link>());&#32;}
148 &#32;&#32;};
149 
150 
152 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator&gt;
153 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__find_first_of_selector&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__generic_find_selector
154 &#32;&#32;&#32;&#32;{
155 &#32;&#32;&#32;&#32;&#32;&#32;_FIterator&#32;<link linkend="_struct____gnu__parallel_1_1____find__first__of__selector_1a2d26b0ff45b0f71219a100404595d529">_M_begin</link>;
156 &#32;&#32;&#32;&#32;&#32;&#32;_FIterator&#32;<link linkend="_struct____gnu__parallel_1_1____find__first__of__selector_1a7bfb1a602022fba32ea73f5a972d5cd8">_M_end</link>;
157 
158 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_struct____gnu__parallel_1_1____find__first__of__selector_1a2f717fd63947fa50b4c6a8cfa9d7ac7b">__find_first_of_selector</link>(_FIterator&#32;__begin,
159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_FIterator&#32;__end)
160 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_struct____gnu__parallel_1_1____find__first__of__selector_1a2d26b0ff45b0f71219a100404595d529">_M_begin</link>(__begin),&#32;<link linkend="_struct____gnu__parallel_1_1____find__first__of__selector_1a7bfb1a602022fba32ea73f5a972d5cd8">_M_end</link>(__end)&#32;{&#32;}
161 
166 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RAIter2,
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred&gt;
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____find__first__of__selector_1ab86537005f7f266bbaebc18f9d44b077">operator()</link>(_RAIter1&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;_RAIter2&#32;__i2,&#32;_Pred&#32;__pred)
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
171 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_FIterator&#32;__pos_in_candidates&#32;=&#32;<link linkend="_struct____gnu__parallel_1_1____find__first__of__selector_1a2d26b0ff45b0f71219a100404595d529">_M_begin</link>;
172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pos_in_candidates&#32;!=&#32;<link linkend="_struct____gnu__parallel_1_1____find__first__of__selector_1a7bfb1a602022fba32ea73f5a972d5cd8">_M_end</link>;&#32;++__pos_in_candidates)
173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pred(*<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;*__pos_in_candidates))
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
176 &#32;&#32;&#32;&#32;}
177 
183 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RAIter2,
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred&gt;
185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;_RAIter1,&#32;_RAIter2&gt;
186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____find__first__of__selector_1a8a0c2d1d295ed9265cdb21b7a01c695d">_M_sequential_algorithm</link>(_RAIter1&#32;__begin1,
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter1&#32;__end1,
188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter2&#32;__begin2,&#32;_Pred&#32;__pred)
189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
190 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(find_first_of(__begin1,&#32;__end1,
191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____find__first__of__selector_1a2d26b0ff45b0f71219a100404595d529">_M_begin</link>,&#32;<link linkend="_struct____gnu__parallel_1_1____find__first__of__selector_1a7bfb1a602022fba32ea73f5a972d5cd8">_M_end</link>,&#32;__pred,
192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">sequential_tag</link>()),&#32;__begin2);
193 &#32;&#32;&#32;&#32;}
194 &#32;&#32;&#32;&#32;&#32;};
195 }
196 
197 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_GLIBCXX_PARALLEL_FIND_SELECTORS_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
