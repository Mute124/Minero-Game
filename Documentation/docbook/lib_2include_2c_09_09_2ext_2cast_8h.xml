<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2ext_2cast_8h" xml:lang="en-US">
<title>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/ext/cast.h File Reference</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/ext/cast.h</primary></indexterm>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>namespace __gnu_cxx <link linkend="_lib_2include_2c_09_09_2ext_2cast_8h_1a56fd5a6be7c55e53e3eb59de5aa1ab9b">_GLIBCXX_VISIBILITY</link> (default)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_lib_2include_2c_09_09_2ext_2cast_8h_1a56fd5a6be7c55e53e3eb59de5aa1ab9b"/><section>
    <title>_GLIBCXX_VISIBILITY()</title>
<indexterm><primary>_GLIBCXX_VISIBILITY</primary><secondary>cast.h</secondary></indexterm>
<indexterm><primary>cast.h</primary><secondary>_GLIBCXX_VISIBILITY</secondary></indexterm>
<para><computeroutput>namespace __gnu_cxx _GLIBCXX_VISIBILITY (default )</computeroutput></para>
<para>These functions are here to allow containers to support non standard pointer types. For normal pointers, these resolve to the use of the standard cast operation. For other types the functions will perform the appropriate cast to/from the custom pointer class so long as that class meets the following conditions: 1) has a typedef element_type which names tehe type it points to. 2) has a <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get() const </link>method which returns element_type*. 3) has a constructor which can take one element_type* argument.</para>

<para>This type supports the semantics of the pointer cast operators (below.)</para>

<para>Casting operations for cases where _FromType is not a standard pointer. _ToType can be a standard or non-standard pointer. Given that _FromType is not a pointer, it must have a <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get()</link> method that returns the standard pointer equivalent of the address it points to, and must have an element_type typedef which names the type it points to.</para>

<para>Casting operations for cases where _FromType is a standard pointer. _ToType can be a standard or non-standard pointer.</para>
</section>
</section>
</section>
