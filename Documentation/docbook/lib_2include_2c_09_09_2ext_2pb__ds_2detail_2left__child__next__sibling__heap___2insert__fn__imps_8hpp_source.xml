<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2ext_2pb__ds_2detail_2left__child__next__sibling__heap___2insert__fn__imps_8hpp_source" xml:lang="en-US">
<title>insert_fn_imps.hpp</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/ext/pb_ds/detail/left_child_next_sibling_heap_/insert_fn_imps.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2005-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2004&#32;Ami&#32;Tavory&#32;and&#32;Vladimir&#32;Dreizin,&#32;IBM-HRL.</emphasis>
26 
27 <emphasis role="comment">//&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;sell,&#32;and&#32;distribute&#32;this&#32;software</emphasis>
28 <emphasis role="comment">//&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,&#32;provided&#32;that&#32;the&#32;above&#32;copyright</emphasis>
29 <emphasis role="comment">//&#32;notice&#32;appears&#32;in&#32;all&#32;copies,&#32;and&#32;that&#32;both&#32;that&#32;copyright&#32;notice</emphasis>
30 <emphasis role="comment">//&#32;and&#32;this&#32;permission&#32;notice&#32;appear&#32;in&#32;supporting&#32;documentation.&#32;None</emphasis>
31 <emphasis role="comment">//&#32;of&#32;the&#32;above&#32;authors,&#32;nor&#32;IBM&#32;Haifa&#32;Research&#32;Laboratories,&#32;make&#32;any</emphasis>
32 <emphasis role="comment">//&#32;representation&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
33 <emphasis role="comment">//&#32;purpose.&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied</emphasis>
34 <emphasis role="comment">//&#32;warranty.</emphasis>
35 
41 <emphasis role="preprocessor">#ifdef&#32;PB_DS_CLASS_C_DEC</emphasis>
42 
43 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
44 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::node_pointer
45 PB_DS_CLASS_C_DEC::
46 get_new_node_for_insert(const_reference&#32;r_val)
47 {
48 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_new_node_for_insert(r_val,&#32;s_no_throw_copies_ind);
49 }
50 
51 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
52 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::node_pointer
53 PB_DS_CLASS_C_DEC::
54 get_new_node_for_insert(const_reference&#32;r_val,&#32;false_type)
55 {
56 &#32;&#32;node_pointer&#32;p_new_nd&#32;=&#32;s_node_allocator.allocate(1);
57 
58 &#32;&#32;cond_dealtor_t&#32;cond(p_new_nd);
59 
60 &#32;&#32;<emphasis role="keyword">new</emphasis>&#32;(<emphasis role="keyword">const_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*&#32;<emphasis role="keyword">&gt;</emphasis>(
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">void</emphasis>*&#32;<emphasis role="keyword">&gt;</emphasis>(&amp;p_new_nd-&gt;m_value)))
62 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;node::value_type(r_val);
63 
64 &#32;&#32;cond.set_no_action();
65 
66 &#32;&#32;++m_size;
67 
68 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(p_new_nd);
69 }
70 
71 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
72 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::node_pointer
73 PB_DS_CLASS_C_DEC::
74 get_new_node_for_insert(const_reference&#32;r_val,&#32;true_type)
75 {
76 &#32;&#32;node_pointer&#32;p_new_nd&#32;=&#32;s_node_allocator.allocate(1);
77 
78 &#32;&#32;<emphasis role="keyword">new</emphasis>&#32;(<emphasis role="keyword">const_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*&#32;<emphasis role="keyword">&gt;</emphasis>(
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">void</emphasis>*&#32;<emphasis role="keyword">&gt;</emphasis>(&amp;p_new_nd-&gt;m_value)))
80 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;node::value_type(r_val);
81 
82 &#32;&#32;++m_size;
83 
84 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(p_new_nd);
85 }
86 
87 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
88 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
89 PB_DS_CLASS_C_DEC::
90 make_child_of(node_pointer&#32;p_nd,&#32;node_pointer&#32;p_new_parent)
91 {
92 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_nd&#32;!=&#32;0);
93 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_new_parent&#32;!=&#32;0);
94 
95 &#32;&#32;p_nd-&gt;m_p_next_sibling&#32;=&#32;p_new_parent-&gt;m_p_l_child;
96 
97 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_new_parent-&gt;m_p_l_child&#32;!=&#32;0)
98 &#32;&#32;&#32;&#32;p_new_parent-&gt;m_p_l_child-&gt;m_p_prev_or_parent&#32;=&#32;p_nd;
99 
100 &#32;&#32;p_nd-&gt;m_p_prev_or_parent&#32;=&#32;p_new_parent;
101 
102 &#32;&#32;p_new_parent-&gt;m_p_l_child&#32;=&#32;p_nd;
103 }
104 
105 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
106 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::node_pointer
107 PB_DS_CLASS_C_DEC::
108 parent(node_pointer&#32;p_nd)
109 {
110 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)
111 &#32;&#32;&#32;&#32;{
112 &#32;&#32;&#32;&#32;&#32;&#32;node_pointer&#32;p_pot&#32;=&#32;p_nd-&gt;m_p_prev_or_parent;
113 
114 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_pot&#32;==&#32;0&#32;||&#32;p_pot-&gt;m_p_l_child&#32;==&#32;p_nd)
115 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p_pot;
116 
117 &#32;&#32;&#32;&#32;&#32;&#32;p_nd&#32;=&#32;p_pot;
118 &#32;&#32;&#32;&#32;}
119 }
120 
121 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
122 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
123 PB_DS_CLASS_C_DEC::
124 swap_with_parent(node_pointer&#32;p_nd,&#32;node_pointer&#32;p_parent)
125 {
126 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_parent&#32;==&#32;m_p_root)
127 &#32;&#32;&#32;&#32;m_p_root&#32;=&#32;p_nd;
128 
129 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_nd&#32;!=&#32;0);
130 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_parent&#32;!=&#32;0);
131 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(parent(p_nd)&#32;==&#32;p_parent);
132 
133 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;nd_direct_child&#32;=&#32;p_parent-&gt;m_p_l_child&#32;==&#32;p_nd;
134 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;parent_root&#32;=&#32;p_parent-&gt;m_p_prev_or_parent&#32;==&#32;0;
135 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;parent_direct_child&#32;=
136 &#32;&#32;&#32;&#32;!parent_root&amp;&amp;&#32;&#32;p_parent-&gt;m_p_prev_or_parent-&gt;m_p_l_child&#32;==&#32;p_parent;
137 
138 &#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(p_parent-&gt;m_p_prev_or_parent,&#32;p_nd-&gt;m_p_prev_or_parent);
139 &#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(p_parent-&gt;m_p_next_sibling,&#32;p_nd-&gt;m_p_next_sibling);
140 &#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(p_parent-&gt;m_p_l_child,&#32;p_nd-&gt;m_p_l_child);
141 &#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(p_parent-&gt;m_metadata,&#32;p_nd-&gt;m_metadata);
142 
143 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_nd-&gt;m_p_l_child&#32;!=&#32;0);
144 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_parent-&gt;m_p_prev_or_parent&#32;!=&#32;0);
145 
146 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_nd-&gt;m_p_next_sibling&#32;!=&#32;0)
147 &#32;&#32;&#32;&#32;p_nd-&gt;m_p_next_sibling-&gt;m_p_prev_or_parent&#32;=&#32;p_nd;
148 
149 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_parent-&gt;m_p_next_sibling&#32;!=&#32;0)
150 &#32;&#32;&#32;&#32;p_parent-&gt;m_p_next_sibling-&gt;m_p_prev_or_parent&#32;=&#32;p_parent;
151 
152 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_parent-&gt;m_p_l_child&#32;!=&#32;0)
153 &#32;&#32;&#32;&#32;p_parent-&gt;m_p_l_child-&gt;m_p_prev_or_parent&#32;=&#32;p_parent;
154 
155 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parent_direct_child)
156 &#32;&#32;&#32;&#32;p_nd-&gt;m_p_prev_or_parent-&gt;m_p_l_child&#32;=&#32;p_nd;
157 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!parent_root)
158 &#32;&#32;&#32;&#32;p_nd-&gt;m_p_prev_or_parent-&gt;m_p_next_sibling&#32;=&#32;p_nd;
159 
160 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!nd_direct_child)
161 &#32;&#32;&#32;&#32;{
162 &#32;&#32;&#32;&#32;&#32;&#32;p_nd-&gt;m_p_l_child-&gt;m_p_prev_or_parent&#32;=&#32;p_nd;
163 
164 &#32;&#32;&#32;&#32;&#32;&#32;p_parent-&gt;m_p_prev_or_parent-&gt;m_p_next_sibling&#32;=&#32;p_parent;
165 &#32;&#32;&#32;&#32;}
166 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
167 &#32;&#32;&#32;&#32;{
168 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_nd-&gt;m_p_l_child&#32;==&#32;p_nd);
169 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_parent-&gt;m_p_prev_or_parent&#32;==&#32;p_parent);
170 
171 &#32;&#32;&#32;&#32;&#32;&#32;p_nd-&gt;m_p_l_child&#32;=&#32;p_parent;
172 &#32;&#32;&#32;&#32;&#32;&#32;p_parent-&gt;m_p_prev_or_parent&#32;=&#32;p_nd;
173 &#32;&#32;&#32;&#32;}
174 
175 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(parent(p_parent)&#32;==&#32;p_nd);
176 }
177 
178 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
