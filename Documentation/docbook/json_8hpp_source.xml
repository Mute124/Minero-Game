<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_json_8hpp_source" xml:lang="en-US">
<title>json.hpp</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/vendor/json.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">/*</emphasis>
2 <emphasis role="comment">&#32;&#32;&#32;&#32;__&#32;_____&#32;_____&#32;_____</emphasis>
3 <emphasis role="comment">&#32;__|&#32;&#32;|&#32;&#32;&#32;__|&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;|&#32;|&#32;&#32;JSON&#32;for&#32;Modern&#32;C++</emphasis>
4 <emphasis role="comment">|&#32;&#32;|&#32;&#32;|__&#32;&#32;&#32;|&#32;&#32;|&#32;&#32;|&#32;|&#32;|&#32;|&#32;&#32;version&#32;3.10.5</emphasis>
5 <emphasis role="comment">|_____|_____|_____|_|___|&#32;&#32;https://github.com/nlohmann/json</emphasis>
6 <emphasis role="comment"></emphasis>
7 <emphasis role="comment">Licensed&#32;under&#32;the&#32;MIT&#32;License&#32;&lt;http://opensource.org/licenses/MIT&gt;.</emphasis>
8 <emphasis role="comment">SPDX-License-Identifier:&#32;MIT</emphasis>
9 <emphasis role="comment">Copyright&#32;(c)&#32;2013-2022&#32;Niels&#32;Lohmann&#32;&lt;http://nlohmann.me&gt;.</emphasis>
10 <emphasis role="comment"></emphasis>
11 <emphasis role="comment">Permission&#32;is&#32;hereby&#32;&#32;granted,&#32;free&#32;of&#32;charge,&#32;to&#32;any&#32;&#32;person&#32;obtaining&#32;a&#32;copy</emphasis>
12 <emphasis role="comment">of&#32;this&#32;software&#32;and&#32;associated&#32;&#32;documentation&#32;files&#32;(the&#32;&quot;Software&quot;),&#32;to&#32;deal</emphasis>
13 <emphasis role="comment">in&#32;the&#32;Software&#32;&#32;without&#32;restriction,&#32;including&#32;without&#32;&#32;limitation&#32;the&#32;rights</emphasis>
14 <emphasis role="comment">to&#32;&#32;use,&#32;copy,&#32;&#32;modify,&#32;merge,&#32;&#32;publish,&#32;distribute,&#32;&#32;sublicense,&#32;and/or&#32;&#32;sell</emphasis>
15 <emphasis role="comment">copies&#32;&#32;of&#32;&#32;the&#32;Software,&#32;&#32;and&#32;&#32;to&#32;&#32;permit&#32;persons&#32;&#32;to&#32;&#32;whom&#32;&#32;the&#32;Software&#32;&#32;is</emphasis>
16 <emphasis role="comment">furnished&#32;to&#32;do&#32;so,&#32;subject&#32;to&#32;the&#32;following&#32;conditions:</emphasis>
17 <emphasis role="comment"></emphasis>
18 <emphasis role="comment">The&#32;above&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;shall&#32;be&#32;included&#32;in&#32;all</emphasis>
19 <emphasis role="comment">copies&#32;or&#32;substantial&#32;portions&#32;of&#32;the&#32;Software.</emphasis>
20 <emphasis role="comment"></emphasis>
21 <emphasis role="comment">THE&#32;SOFTWARE&#32;&#32;IS&#32;PROVIDED&#32;&quot;AS&#32;&#32;IS&quot;,&#32;WITHOUT&#32;WARRANTY&#32;&#32;OF&#32;ANY&#32;KIND,&#32;&#32;EXPRESS&#32;OR</emphasis>
22 <emphasis role="comment">IMPLIED,&#32;&#32;INCLUDING&#32;BUT&#32;&#32;NOT&#32;&#32;LIMITED&#32;TO&#32;&#32;THE&#32;&#32;WARRANTIES&#32;OF&#32;&#32;MERCHANTABILITY,</emphasis>
23 <emphasis role="comment">FITNESS&#32;FOR&#32;&#32;A&#32;PARTICULAR&#32;PURPOSE&#32;AND&#32;&#32;NONINFRINGEMENT.&#32;IN&#32;NO&#32;EVENT&#32;&#32;SHALL&#32;THE</emphasis>
24 <emphasis role="comment">AUTHORS&#32;&#32;OR&#32;COPYRIGHT&#32;&#32;HOLDERS&#32;&#32;BE&#32;&#32;LIABLE&#32;FOR&#32;&#32;ANY&#32;&#32;CLAIM,&#32;&#32;DAMAGES&#32;OR&#32;&#32;OTHER</emphasis>
25 <emphasis role="comment">LIABILITY,&#32;WHETHER&#32;IN&#32;AN&#32;ACTION&#32;OF&#32;&#32;CONTRACT,&#32;TORT&#32;OR&#32;OTHERWISE,&#32;ARISING&#32;FROM,</emphasis>
26 <emphasis role="comment">OUT&#32;OF&#32;OR&#32;IN&#32;CONNECTION&#32;WITH&#32;THE&#32;SOFTWARE&#32;&#32;OR&#32;THE&#32;USE&#32;OR&#32;OTHER&#32;DEALINGS&#32;IN&#32;THE</emphasis>
27 <emphasis role="comment">SOFTWARE.</emphasis>
28 <emphasis role="comment">*/</emphasis>
29 
30 <emphasis role="comment">/****************************************************************************\</emphasis>
31 <emphasis role="comment">&#32;*&#32;Note&#32;on&#32;documentation:&#32;The&#32;source&#32;files&#32;contain&#32;links&#32;to&#32;the&#32;online&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
32 <emphasis role="comment">&#32;*&#32;documentation&#32;of&#32;the&#32;public&#32;API&#32;at&#32;https://json.nlohmann.me.&#32;This&#32;URL&#32;&#32;&#32;&#32;*</emphasis>
33 <emphasis role="comment">&#32;*&#32;contains&#32;the&#32;most&#32;recent&#32;documentation&#32;and&#32;should&#32;also&#32;be&#32;applicable&#32;to&#32;&#32;*</emphasis>
34 <emphasis role="comment">&#32;*&#32;previous&#32;versions;&#32;documentation&#32;for&#32;deprecated&#32;functions&#32;is&#32;not&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
35 <emphasis role="comment">&#32;*&#32;removed,&#32;but&#32;marked&#32;deprecated.&#32;See&#32;&quot;Generate&#32;documentation&quot;&#32;section&#32;in&#32;&#32;*</emphasis>
36 <emphasis role="comment">&#32;*&#32;file&#32;docs/README.md.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
37 <emphasis role="comment">\****************************************************************************/</emphasis>
38 
39 <emphasis role="preprocessor">#ifndef&#32;INCLUDE_NLOHMANN_JSON_HPP_</emphasis>
40 <emphasis role="preprocessor">#define&#32;INCLUDE_NLOHMANN_JSON_HPP_</emphasis>
41 
42 <emphasis role="preprocessor">#ifndef&#32;JSON_SKIP_LIBRARY_VERSION_CHECK</emphasis>
43 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#if&#32;defined(NLOHMANN_JSON_VERSION_MAJOR)&#32;&amp;&amp;&#32;defined(NLOHMANN_JSON_VERSION_MINOR)&#32;&amp;&amp;&#32;defined(NLOHMANN_JSON_VERSION_PATCH)</emphasis>
44 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#if&#32;NLOHMANN_JSON_VERSION_MAJOR&#32;!=&#32;3&#32;||&#32;NLOHMANN_JSON_VERSION_MINOR&#32;!=&#32;10&#32;||&#32;NLOHMANN_JSON_VERSION_PATCH&#32;!=&#32;5</emphasis>
45 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#warning&#32;&quot;Already&#32;included&#32;a&#32;different&#32;version&#32;of&#32;the&#32;library!&quot;</emphasis>
46 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
47 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
48 <emphasis role="preprocessor">#endif</emphasis>
49 
50 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_VERSION_MAJOR&#32;3&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;NOLINT(modernize-macro-to-enum)</emphasis>
51 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_VERSION_MINOR&#32;10&#32;&#32;</emphasis><emphasis role="comment">//&#32;NOLINT(modernize-macro-to-enum)</emphasis>
52 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_VERSION_PATCH&#32;5&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;NOLINT(modernize-macro-to-enum)</emphasis>
53 
54 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>&#32;<emphasis role="comment">//&#32;all_of,&#32;find,&#32;for_each</emphasis>
55 <emphasis role="preprocessor">#include&#32;&lt;cstddef&gt;</emphasis>&#32;<emphasis role="comment">//&#32;nullptr_t,&#32;ptrdiff_t,&#32;size_t</emphasis>
56 <emphasis role="preprocessor">#include&#32;&lt;functional&gt;</emphasis>&#32;<emphasis role="comment">//&#32;hash,&#32;less</emphasis>
57 <emphasis role="preprocessor">#include&#32;&lt;initializer_list&gt;</emphasis>&#32;<emphasis role="comment">//&#32;initializer_list</emphasis>
58 <emphasis role="preprocessor">#ifndef&#32;JSON_NO_IO</emphasis>
59 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;iosfwd&gt;</emphasis>&#32;<emphasis role="comment">//&#32;istream,&#32;ostream</emphasis>
60 <emphasis role="preprocessor">#endif&#32;&#32;</emphasis><emphasis role="comment">//&#32;JSON_NO_IO</emphasis>
61 <emphasis role="preprocessor">#include&#32;&lt;iterator&gt;</emphasis>&#32;<emphasis role="comment">//&#32;random_access_iterator_tag</emphasis>
62 <emphasis role="preprocessor">#include&#32;&lt;memory&gt;</emphasis>&#32;<emphasis role="comment">//&#32;unique_ptr</emphasis>
63 <emphasis role="preprocessor">#include&#32;&lt;numeric&gt;</emphasis>&#32;<emphasis role="comment">//&#32;accumulate</emphasis>
64 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>&#32;<emphasis role="comment">//&#32;string,&#32;stoi,&#32;to_string</emphasis>
65 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>&#32;<emphasis role="comment">//&#32;declval,&#32;forward,&#32;move,&#32;pair,&#32;swap</emphasis>
66 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>&#32;<emphasis role="comment">//&#32;vector</emphasis>
67 
68 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/adl_serializer.hpp&gt;</emphasis>
69 
70 
71 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>
72 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>
73 
74 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/conversions/from_json.hpp&gt;</emphasis>
75 
76 
77 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>&#32;<emphasis role="comment">//&#32;transform</emphasis>
78 <emphasis role="preprocessor">#include&#32;&lt;array&gt;</emphasis>&#32;<emphasis role="comment">//&#32;array</emphasis>
79 <emphasis role="preprocessor">#include&#32;&lt;forward_list&gt;</emphasis>&#32;<emphasis role="comment">//&#32;forward_list</emphasis>
80 <emphasis role="preprocessor">#include&#32;&lt;iterator&gt;</emphasis>&#32;<emphasis role="comment">//&#32;inserter,&#32;front_inserter,&#32;end</emphasis>
81 <emphasis role="preprocessor">#include&#32;&lt;map&gt;</emphasis>&#32;<emphasis role="comment">//&#32;map</emphasis>
82 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>&#32;<emphasis role="comment">//&#32;string</emphasis>
83 <emphasis role="preprocessor">#include&#32;&lt;tuple&gt;</emphasis>&#32;<emphasis role="comment">//&#32;tuple,&#32;make_tuple</emphasis>
84 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>&#32;<emphasis role="comment">//&#32;is_arithmetic,&#32;is_same,&#32;is_enum,&#32;underlying_type,&#32;is_convertible</emphasis>
85 <emphasis role="preprocessor">#include&#32;&lt;unordered_map&gt;</emphasis>&#32;<emphasis role="comment">//&#32;unordered_map</emphasis>
86 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>&#32;<emphasis role="comment">//&#32;pair,&#32;declval</emphasis>
87 <emphasis role="preprocessor">#include&#32;&lt;valarray&gt;</emphasis>&#32;<emphasis role="comment">//&#32;valarray</emphasis>
88 
89 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/exceptions.hpp&gt;</emphasis>
90 
91 
92 <emphasis role="preprocessor">#include&#32;&lt;cstddef&gt;</emphasis>&#32;<emphasis role="comment">//&#32;nullptr_t</emphasis>
93 <emphasis role="preprocessor">#include&#32;&lt;exception&gt;</emphasis>&#32;<emphasis role="comment">//&#32;exception</emphasis>
94 <emphasis role="preprocessor">#include&#32;&lt;stdexcept&gt;</emphasis>&#32;<emphasis role="comment">//&#32;runtime_error</emphasis>
95 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>&#32;<emphasis role="comment">//&#32;to_string</emphasis>
96 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>&#32;<emphasis role="comment">//&#32;vector</emphasis>
97 
98 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/value_t.hpp&gt;</emphasis>
99 
100 
101 <emphasis role="preprocessor">#include&#32;&lt;array&gt;</emphasis>&#32;<emphasis role="comment">//&#32;array</emphasis>
102 <emphasis role="preprocessor">#include&#32;&lt;cstddef&gt;</emphasis>&#32;<emphasis role="comment">//&#32;size_t</emphasis>
103 <emphasis role="preprocessor">#include&#32;&lt;cstdint&gt;</emphasis>&#32;<emphasis role="comment">//&#32;uint8_t</emphasis>
104 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>&#32;<emphasis role="comment">//&#32;string</emphasis>
105 
106 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann">nlohmann</link>
107 {
108 <emphasis role="keyword">namespace&#32;</emphasis>detail
109 {
111 <emphasis role="comment">//&#32;JSON&#32;type&#32;enumeration&#32;//</emphasis>
113 
138 <emphasis role="keyword">enum&#32;class</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link>&#32;:&#32;std::uint8_t
139 {
140 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">null</link>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
141 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">object</link>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
142 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">array</link>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
143 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">string</link>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
144 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">boolean</link>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
145 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">number_integer</link>,&#32;&#32;&#32;
146 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">number_unsigned</link>,&#32;&#32;
147 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">number_float</link>,&#32;&#32;&#32;&#32;&#32;
148 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">binary</link>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
149 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">discarded</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
150 };
151 
165 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link>&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link>&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
166 {
167 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;std::array&lt;std::uint8_t,&#32;9&gt;&#32;order&#32;=&#32;{{
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0&#32;<emphasis role="comment">/*&#32;null&#32;*/</emphasis>,&#32;3&#32;<emphasis role="comment">/*&#32;object&#32;*/</emphasis>,&#32;4&#32;<emphasis role="comment">/*&#32;array&#32;*/</emphasis>,&#32;5&#32;<emphasis role="comment">/*&#32;string&#32;*/</emphasis>,
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1&#32;<emphasis role="comment">/*&#32;boolean&#32;*/</emphasis>,&#32;2&#32;<emphasis role="comment">/*&#32;integer&#32;*/</emphasis>,&#32;2&#32;<emphasis role="comment">/*&#32;unsigned&#32;*/</emphasis>,&#32;2&#32;<emphasis role="comment">/*&#32;float&#32;*/</emphasis>,
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;6&#32;<emphasis role="comment">/*&#32;binary&#32;*/</emphasis>
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
172 &#32;&#32;&#32;&#32;};
173 
174 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;l_index&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(lhs);
175 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;r_index&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(rhs);
176 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;l_index&#32;&lt;&#32;order.size()&#32;&amp;&amp;&#32;r_index&#32;&lt;&#32;order.size()&#32;&amp;&amp;&#32;order[l_index]&#32;&lt;&#32;order[r_index];
177 }
178 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
179 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann</emphasis>
180 
181 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/string_escape.hpp&gt;</emphasis>
182 
183 
184 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/macro_scope.hpp&gt;</emphasis>
185 
186 
187 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>&#32;<emphasis role="comment">//&#32;declval,&#32;pair</emphasis>
188 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/thirdparty/hedley/hedley.hpp&gt;</emphasis>
189 
190 
191 <emphasis role="comment">/*&#32;Hedley&#32;-&#32;https://nemequ.github.io/hedley</emphasis>
192 <emphasis role="comment">&#32;*&#32;Created&#32;by&#32;Evan&#32;Nemerson&#32;&lt;evan@nemerson.com&gt;</emphasis>
193 <emphasis role="comment">&#32;*</emphasis>
194 <emphasis role="comment">&#32;*&#32;To&#32;the&#32;extent&#32;possible&#32;under&#32;law,&#32;the&#32;author(s)&#32;have&#32;dedicated&#32;all</emphasis>
195 <emphasis role="comment">&#32;*&#32;copyright&#32;and&#32;related&#32;and&#32;neighboring&#32;rights&#32;to&#32;this&#32;software&#32;to</emphasis>
196 <emphasis role="comment">&#32;*&#32;the&#32;public&#32;domain&#32;worldwide.&#32;This&#32;software&#32;is&#32;distributed&#32;without</emphasis>
197 <emphasis role="comment">&#32;*&#32;any&#32;warranty.</emphasis>
198 <emphasis role="comment">&#32;*</emphasis>
199 <emphasis role="comment">&#32;*&#32;For&#32;details,&#32;see&#32;&lt;http://creativecommons.org/publicdomain/zero/1.0/&gt;.</emphasis>
200 <emphasis role="comment">&#32;*&#32;SPDX-License-Identifier:&#32;CC0-1.0</emphasis>
201 <emphasis role="comment">&#32;*/</emphasis>
202 
203 <emphasis role="preprocessor">#if&#32;!defined(JSON_HEDLEY_VERSION)&#32;||&#32;(JSON_HEDLEY_VERSION&#32;&lt;&#32;15)</emphasis>
204 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_VERSION)</emphasis>
205 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_VERSION</emphasis>
206 <emphasis role="preprocessor">#endif</emphasis>
207 <emphasis role="preprocessor">#define&#32;JSON_HEDLEY_VERSION&#32;15</emphasis>
208 
209 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_STRINGIFY_EX)</emphasis>
210 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_STRINGIFY_EX</emphasis>
211 <emphasis role="preprocessor">#endif</emphasis>
212 <emphasis role="preprocessor">#define&#32;JSON_HEDLEY_STRINGIFY_EX(x)&#32;#x</emphasis>
213 
214 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_STRINGIFY)</emphasis>
215 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_STRINGIFY</emphasis>
216 <emphasis role="preprocessor">#endif</emphasis>
217 <emphasis role="preprocessor">#define&#32;JSON_HEDLEY_STRINGIFY(x)&#32;JSON_HEDLEY_STRINGIFY_EX(x)</emphasis>
218 
219 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_CONCAT_EX)</emphasis>
220 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_CONCAT_EX</emphasis>
221 <emphasis role="preprocessor">#endif</emphasis>
222 <emphasis role="preprocessor">#define&#32;JSON_HEDLEY_CONCAT_EX(a,b)&#32;a##b</emphasis>
223 
224 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_CONCAT)</emphasis>
225 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_CONCAT</emphasis>
226 <emphasis role="preprocessor">#endif</emphasis>
227 <emphasis role="preprocessor">#define&#32;JSON_HEDLEY_CONCAT(a,b)&#32;JSON_HEDLEY_CONCAT_EX(a,b)</emphasis>
228 
229 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_CONCAT3_EX)</emphasis>
230 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_CONCAT3_EX</emphasis>
231 <emphasis role="preprocessor">#endif</emphasis>
232 <emphasis role="preprocessor">#define&#32;JSON_HEDLEY_CONCAT3_EX(a,b,c)&#32;a##b##c</emphasis>
233 
234 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_CONCAT3)</emphasis>
235 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_CONCAT3</emphasis>
236 <emphasis role="preprocessor">#endif</emphasis>
237 <emphasis role="preprocessor">#define&#32;JSON_HEDLEY_CONCAT3(a,b,c)&#32;JSON_HEDLEY_CONCAT3_EX(a,b,c)</emphasis>
238 
239 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_VERSION_ENCODE)</emphasis>
240 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_VERSION_ENCODE</emphasis>
241 <emphasis role="preprocessor">#endif</emphasis>
242 <emphasis role="preprocessor">#define&#32;JSON_HEDLEY_VERSION_ENCODE(major,minor,revision)&#32;(((major)&#32;*&#32;1000000)&#32;+&#32;((minor)&#32;*&#32;1000)&#32;+&#32;(revision))</emphasis>
243 
244 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_VERSION_DECODE_MAJOR)</emphasis>
245 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_VERSION_DECODE_MAJOR</emphasis>
246 <emphasis role="preprocessor">#endif</emphasis>
247 <emphasis role="preprocessor">#define&#32;JSON_HEDLEY_VERSION_DECODE_MAJOR(version)&#32;((version)&#32;/&#32;1000000)</emphasis>
248 
249 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_VERSION_DECODE_MINOR)</emphasis>
250 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_VERSION_DECODE_MINOR</emphasis>
251 <emphasis role="preprocessor">#endif</emphasis>
252 <emphasis role="preprocessor">#define&#32;JSON_HEDLEY_VERSION_DECODE_MINOR(version)&#32;(((version)&#32;%&#32;1000000)&#32;/&#32;1000)</emphasis>
253 
254 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_VERSION_DECODE_REVISION)</emphasis>
255 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_VERSION_DECODE_REVISION</emphasis>
256 <emphasis role="preprocessor">#endif</emphasis>
257 <emphasis role="preprocessor">#define&#32;JSON_HEDLEY_VERSION_DECODE_REVISION(version)&#32;((version)&#32;%&#32;1000)</emphasis>
258 
259 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_GNUC_VERSION)</emphasis>
260 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_GNUC_VERSION</emphasis>
261 <emphasis role="preprocessor">#endif</emphasis>
262 <emphasis role="preprocessor">#if&#32;defined(__GNUC__)&#32;&amp;&amp;&#32;defined(__GNUC_PATCHLEVEL__)</emphasis>
263 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_GNUC_VERSION&#32;JSON_HEDLEY_VERSION_ENCODE(__GNUC__,&#32;__GNUC_MINOR__,&#32;__GNUC_PATCHLEVEL__)</emphasis>
264 <emphasis role="preprocessor">#elif&#32;defined(__GNUC__)</emphasis>
265 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_GNUC_VERSION&#32;JSON_HEDLEY_VERSION_ENCODE(__GNUC__,&#32;__GNUC_MINOR__,&#32;0)</emphasis>
266 <emphasis role="preprocessor">#endif</emphasis>
267 
268 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_GNUC_VERSION_CHECK)</emphasis>
269 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_GNUC_VERSION_CHECK</emphasis>
270 <emphasis role="preprocessor">#endif</emphasis>
271 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_GNUC_VERSION)</emphasis>
272 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch)&#32;(JSON_HEDLEY_GNUC_VERSION&#32;&gt;=&#32;JSON_HEDLEY_VERSION_ENCODE(major,&#32;minor,&#32;patch))</emphasis>
273 <emphasis role="preprocessor">#else</emphasis>
274 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch)&#32;(0)</emphasis>
275 <emphasis role="preprocessor">#endif</emphasis>
276 
277 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_MSVC_VERSION)</emphasis>
278 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_MSVC_VERSION</emphasis>
279 <emphasis role="preprocessor">#endif</emphasis>
280 <emphasis role="preprocessor">#if&#32;defined(_MSC_FULL_VER)&#32;&amp;&amp;&#32;(_MSC_FULL_VER&#32;&gt;=&#32;140000000)&#32;&amp;&amp;&#32;!defined(__ICL)</emphasis>
281 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_MSVC_VERSION&#32;JSON_HEDLEY_VERSION_ENCODE(_MSC_FULL_VER&#32;/&#32;10000000,&#32;(_MSC_FULL_VER&#32;%&#32;10000000)&#32;/&#32;100000,&#32;(_MSC_FULL_VER&#32;%&#32;100000)&#32;/&#32;100)</emphasis>
282 <emphasis role="preprocessor">#elif&#32;defined(_MSC_FULL_VER)&#32;&amp;&amp;&#32;!defined(__ICL)</emphasis>
283 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_MSVC_VERSION&#32;JSON_HEDLEY_VERSION_ENCODE(_MSC_FULL_VER&#32;/&#32;1000000,&#32;(_MSC_FULL_VER&#32;%&#32;1000000)&#32;/&#32;10000,&#32;(_MSC_FULL_VER&#32;%&#32;10000)&#32;/&#32;10)</emphasis>
284 <emphasis role="preprocessor">#elif&#32;defined(_MSC_VER)&#32;&amp;&amp;&#32;!defined(__ICL)</emphasis>
285 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_MSVC_VERSION&#32;JSON_HEDLEY_VERSION_ENCODE(_MSC_VER&#32;/&#32;100,&#32;_MSC_VER&#32;%&#32;100,&#32;0)</emphasis>
286 <emphasis role="preprocessor">#endif</emphasis>
287 
288 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_MSVC_VERSION_CHECK)</emphasis>
289 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_MSVC_VERSION_CHECK</emphasis>
290 <emphasis role="preprocessor">#endif</emphasis>
291 <emphasis role="preprocessor">#if&#32;!defined(JSON_HEDLEY_MSVC_VERSION)</emphasis>
292 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_MSVC_VERSION_CHECK(major,minor,patch)&#32;(0)</emphasis>
293 <emphasis role="preprocessor">#elif&#32;defined(_MSC_VER)&#32;&amp;&amp;&#32;(_MSC_VER&#32;&gt;=&#32;1400)</emphasis>
294 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_MSVC_VERSION_CHECK(major,minor,patch)&#32;(_MSC_FULL_VER&#32;&gt;=&#32;((major&#32;*&#32;10000000)&#32;+&#32;(minor&#32;*&#32;100000)&#32;+&#32;(patch)))</emphasis>
295 <emphasis role="preprocessor">#elif&#32;defined(_MSC_VER)&#32;&amp;&amp;&#32;(_MSC_VER&#32;&gt;=&#32;1200)</emphasis>
296 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_MSVC_VERSION_CHECK(major,minor,patch)&#32;(_MSC_FULL_VER&#32;&gt;=&#32;((major&#32;*&#32;1000000)&#32;+&#32;(minor&#32;*&#32;10000)&#32;+&#32;(patch)))</emphasis>
297 <emphasis role="preprocessor">#else</emphasis>
298 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_MSVC_VERSION_CHECK(major,minor,patch)&#32;(_MSC_VER&#32;&gt;=&#32;((major&#32;*&#32;100)&#32;+&#32;(minor)))</emphasis>
299 <emphasis role="preprocessor">#endif</emphasis>
300 
301 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_INTEL_VERSION)</emphasis>
302 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_INTEL_VERSION</emphasis>
303 <emphasis role="preprocessor">#endif</emphasis>
304 <emphasis role="preprocessor">#if&#32;defined(__INTEL_COMPILER)&#32;&amp;&amp;&#32;defined(__INTEL_COMPILER_UPDATE)&#32;&amp;&amp;&#32;!defined(__ICL)</emphasis>
305 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_INTEL_VERSION&#32;JSON_HEDLEY_VERSION_ENCODE(__INTEL_COMPILER&#32;/&#32;100,&#32;__INTEL_COMPILER&#32;%&#32;100,&#32;__INTEL_COMPILER_UPDATE)</emphasis>
306 <emphasis role="preprocessor">#elif&#32;defined(__INTEL_COMPILER)&#32;&amp;&amp;&#32;!defined(__ICL)</emphasis>
307 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_INTEL_VERSION&#32;JSON_HEDLEY_VERSION_ENCODE(__INTEL_COMPILER&#32;/&#32;100,&#32;__INTEL_COMPILER&#32;%&#32;100,&#32;0)</emphasis>
308 <emphasis role="preprocessor">#endif</emphasis>
309 
310 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_INTEL_VERSION_CHECK)</emphasis>
311 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_INTEL_VERSION_CHECK</emphasis>
312 <emphasis role="preprocessor">#endif</emphasis>
313 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_INTEL_VERSION)</emphasis>
314 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_INTEL_VERSION_CHECK(major,minor,patch)&#32;(JSON_HEDLEY_INTEL_VERSION&#32;&gt;=&#32;JSON_HEDLEY_VERSION_ENCODE(major,&#32;minor,&#32;patch))</emphasis>
315 <emphasis role="preprocessor">#else</emphasis>
316 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_INTEL_VERSION_CHECK(major,minor,patch)&#32;(0)</emphasis>
317 <emphasis role="preprocessor">#endif</emphasis>
318 
319 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_INTEL_CL_VERSION)</emphasis>
320 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_INTEL_CL_VERSION</emphasis>
321 <emphasis role="preprocessor">#endif</emphasis>
322 <emphasis role="preprocessor">#if&#32;defined(__INTEL_COMPILER)&#32;&amp;&amp;&#32;defined(__INTEL_COMPILER_UPDATE)&#32;&amp;&amp;&#32;defined(__ICL)</emphasis>
323 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_INTEL_CL_VERSION&#32;JSON_HEDLEY_VERSION_ENCODE(__INTEL_COMPILER,&#32;__INTEL_COMPILER_UPDATE,&#32;0)</emphasis>
324 <emphasis role="preprocessor">#endif</emphasis>
325 
326 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_INTEL_CL_VERSION_CHECK)</emphasis>
327 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_INTEL_CL_VERSION_CHECK</emphasis>
328 <emphasis role="preprocessor">#endif</emphasis>
329 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_INTEL_CL_VERSION)</emphasis>
330 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_INTEL_CL_VERSION_CHECK(major,minor,patch)&#32;(JSON_HEDLEY_INTEL_CL_VERSION&#32;&gt;=&#32;JSON_HEDLEY_VERSION_ENCODE(major,&#32;minor,&#32;patch))</emphasis>
331 <emphasis role="preprocessor">#else</emphasis>
332 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_INTEL_CL_VERSION_CHECK(major,minor,patch)&#32;(0)</emphasis>
333 <emphasis role="preprocessor">#endif</emphasis>
334 
335 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_PGI_VERSION)</emphasis>
336 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_PGI_VERSION</emphasis>
337 <emphasis role="preprocessor">#endif</emphasis>
338 <emphasis role="preprocessor">#if&#32;defined(__PGI)&#32;&amp;&amp;&#32;defined(__PGIC__)&#32;&amp;&amp;&#32;defined(__PGIC_MINOR__)&#32;&amp;&amp;&#32;defined(__PGIC_PATCHLEVEL__)</emphasis>
339 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_PGI_VERSION&#32;JSON_HEDLEY_VERSION_ENCODE(__PGIC__,&#32;__PGIC_MINOR__,&#32;__PGIC_PATCHLEVEL__)</emphasis>
340 <emphasis role="preprocessor">#endif</emphasis>
341 
342 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_PGI_VERSION_CHECK)</emphasis>
343 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_PGI_VERSION_CHECK</emphasis>
344 <emphasis role="preprocessor">#endif</emphasis>
345 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_PGI_VERSION)</emphasis>
346 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_PGI_VERSION_CHECK(major,minor,patch)&#32;(JSON_HEDLEY_PGI_VERSION&#32;&gt;=&#32;JSON_HEDLEY_VERSION_ENCODE(major,&#32;minor,&#32;patch))</emphasis>
347 <emphasis role="preprocessor">#else</emphasis>
348 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_PGI_VERSION_CHECK(major,minor,patch)&#32;(0)</emphasis>
349 <emphasis role="preprocessor">#endif</emphasis>
350 
351 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_SUNPRO_VERSION)</emphasis>
352 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_SUNPRO_VERSION</emphasis>
353 <emphasis role="preprocessor">#endif</emphasis>
354 <emphasis role="preprocessor">#if&#32;defined(__SUNPRO_C)&#32;&amp;&amp;&#32;(__SUNPRO_C&#32;&gt;&#32;0x1000)</emphasis>
355 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_SUNPRO_VERSION&#32;JSON_HEDLEY_VERSION_ENCODE((((__SUNPRO_C&#32;&gt;&gt;&#32;16)&#32;&amp;&#32;0xf)&#32;*&#32;10)&#32;+&#32;((__SUNPRO_C&#32;&gt;&gt;&#32;12)&#32;&amp;&#32;0xf),&#32;(((__SUNPRO_C&#32;&gt;&gt;&#32;8)&#32;&amp;&#32;0xf)&#32;*&#32;10)&#32;+&#32;((__SUNPRO_C&#32;&gt;&gt;&#32;4)&#32;&amp;&#32;0xf),&#32;(__SUNPRO_C&#32;&amp;&#32;0xf)&#32;*&#32;10)</emphasis>
356 <emphasis role="preprocessor">#elif&#32;defined(__SUNPRO_C)</emphasis>
357 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_SUNPRO_VERSION&#32;JSON_HEDLEY_VERSION_ENCODE((__SUNPRO_C&#32;&gt;&gt;&#32;8)&#32;&amp;&#32;0xf,&#32;(__SUNPRO_C&#32;&gt;&gt;&#32;4)&#32;&amp;&#32;0xf,&#32;(__SUNPRO_C)&#32;&amp;&#32;0xf)</emphasis>
358 <emphasis role="preprocessor">#elif&#32;defined(__SUNPRO_CC)&#32;&amp;&amp;&#32;(__SUNPRO_CC&#32;&gt;&#32;0x1000)</emphasis>
359 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_SUNPRO_VERSION&#32;JSON_HEDLEY_VERSION_ENCODE((((__SUNPRO_CC&#32;&gt;&gt;&#32;16)&#32;&amp;&#32;0xf)&#32;*&#32;10)&#32;+&#32;((__SUNPRO_CC&#32;&gt;&gt;&#32;12)&#32;&amp;&#32;0xf),&#32;(((__SUNPRO_CC&#32;&gt;&gt;&#32;8)&#32;&amp;&#32;0xf)&#32;*&#32;10)&#32;+&#32;((__SUNPRO_CC&#32;&gt;&gt;&#32;4)&#32;&amp;&#32;0xf),&#32;(__SUNPRO_CC&#32;&amp;&#32;0xf)&#32;*&#32;10)</emphasis>
360 <emphasis role="preprocessor">#elif&#32;defined(__SUNPRO_CC)</emphasis>
361 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_SUNPRO_VERSION&#32;JSON_HEDLEY_VERSION_ENCODE((__SUNPRO_CC&#32;&gt;&gt;&#32;8)&#32;&amp;&#32;0xf,&#32;(__SUNPRO_CC&#32;&gt;&gt;&#32;4)&#32;&amp;&#32;0xf,&#32;(__SUNPRO_CC)&#32;&amp;&#32;0xf)</emphasis>
362 <emphasis role="preprocessor">#endif</emphasis>
363 
364 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_SUNPRO_VERSION_CHECK)</emphasis>
365 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_SUNPRO_VERSION_CHECK</emphasis>
366 <emphasis role="preprocessor">#endif</emphasis>
367 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_SUNPRO_VERSION)</emphasis>
368 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_SUNPRO_VERSION_CHECK(major,minor,patch)&#32;(JSON_HEDLEY_SUNPRO_VERSION&#32;&gt;=&#32;JSON_HEDLEY_VERSION_ENCODE(major,&#32;minor,&#32;patch))</emphasis>
369 <emphasis role="preprocessor">#else</emphasis>
370 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_SUNPRO_VERSION_CHECK(major,minor,patch)&#32;(0)</emphasis>
371 <emphasis role="preprocessor">#endif</emphasis>
372 
373 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_EMSCRIPTEN_VERSION)</emphasis>
374 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_EMSCRIPTEN_VERSION</emphasis>
375 <emphasis role="preprocessor">#endif</emphasis>
376 <emphasis role="preprocessor">#if&#32;defined(__EMSCRIPTEN__)</emphasis>
377 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_EMSCRIPTEN_VERSION&#32;JSON_HEDLEY_VERSION_ENCODE(__EMSCRIPTEN_major__,&#32;__EMSCRIPTEN_minor__,&#32;__EMSCRIPTEN_tiny__)</emphasis>
378 <emphasis role="preprocessor">#endif</emphasis>
379 
380 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_EMSCRIPTEN_VERSION_CHECK)</emphasis>
381 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_EMSCRIPTEN_VERSION_CHECK</emphasis>
382 <emphasis role="preprocessor">#endif</emphasis>
383 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_EMSCRIPTEN_VERSION)</emphasis>
384 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_EMSCRIPTEN_VERSION_CHECK(major,minor,patch)&#32;(JSON_HEDLEY_EMSCRIPTEN_VERSION&#32;&gt;=&#32;JSON_HEDLEY_VERSION_ENCODE(major,&#32;minor,&#32;patch))</emphasis>
385 <emphasis role="preprocessor">#else</emphasis>
386 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_EMSCRIPTEN_VERSION_CHECK(major,minor,patch)&#32;(0)</emphasis>
387 <emphasis role="preprocessor">#endif</emphasis>
388 
389 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_ARM_VERSION)</emphasis>
390 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_ARM_VERSION</emphasis>
391 <emphasis role="preprocessor">#endif</emphasis>
392 <emphasis role="preprocessor">#if&#32;defined(__CC_ARM)&#32;&amp;&amp;&#32;defined(__ARMCOMPILER_VERSION)</emphasis>
393 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_ARM_VERSION&#32;JSON_HEDLEY_VERSION_ENCODE(__ARMCOMPILER_VERSION&#32;/&#32;1000000,&#32;(__ARMCOMPILER_VERSION&#32;%&#32;1000000)&#32;/&#32;10000,&#32;(__ARMCOMPILER_VERSION&#32;%&#32;10000)&#32;/&#32;100)</emphasis>
394 <emphasis role="preprocessor">#elif&#32;defined(__CC_ARM)&#32;&amp;&amp;&#32;defined(__ARMCC_VERSION)</emphasis>
395 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_ARM_VERSION&#32;JSON_HEDLEY_VERSION_ENCODE(__ARMCC_VERSION&#32;/&#32;1000000,&#32;(__ARMCC_VERSION&#32;%&#32;1000000)&#32;/&#32;10000,&#32;(__ARMCC_VERSION&#32;%&#32;10000)&#32;/&#32;100)</emphasis>
396 <emphasis role="preprocessor">#endif</emphasis>
397 
398 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_ARM_VERSION_CHECK)</emphasis>
399 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_ARM_VERSION_CHECK</emphasis>
400 <emphasis role="preprocessor">#endif</emphasis>
401 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_ARM_VERSION)</emphasis>
402 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_ARM_VERSION_CHECK(major,minor,patch)&#32;(JSON_HEDLEY_ARM_VERSION&#32;&gt;=&#32;JSON_HEDLEY_VERSION_ENCODE(major,&#32;minor,&#32;patch))</emphasis>
403 <emphasis role="preprocessor">#else</emphasis>
404 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_ARM_VERSION_CHECK(major,minor,patch)&#32;(0)</emphasis>
405 <emphasis role="preprocessor">#endif</emphasis>
406 
407 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_IBM_VERSION)</emphasis>
408 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_IBM_VERSION</emphasis>
409 <emphasis role="preprocessor">#endif</emphasis>
410 <emphasis role="preprocessor">#if&#32;defined(__ibmxl__)</emphasis>
411 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_IBM_VERSION&#32;JSON_HEDLEY_VERSION_ENCODE(__ibmxl_version__,&#32;__ibmxl_release__,&#32;__ibmxl_modification__)</emphasis>
412 <emphasis role="preprocessor">#elif&#32;defined(__xlC__)&#32;&amp;&amp;&#32;defined(__xlC_ver__)</emphasis>
413 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_IBM_VERSION&#32;JSON_HEDLEY_VERSION_ENCODE(__xlC__&#32;&gt;&gt;&#32;8,&#32;__xlC__&#32;&amp;&#32;0xff,&#32;(__xlC_ver__&#32;&gt;&gt;&#32;8)&#32;&amp;&#32;0xff)</emphasis>
414 <emphasis role="preprocessor">#elif&#32;defined(__xlC__)</emphasis>
415 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_IBM_VERSION&#32;JSON_HEDLEY_VERSION_ENCODE(__xlC__&#32;&gt;&gt;&#32;8,&#32;__xlC__&#32;&amp;&#32;0xff,&#32;0)</emphasis>
416 <emphasis role="preprocessor">#endif</emphasis>
417 
418 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_IBM_VERSION_CHECK)</emphasis>
419 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_IBM_VERSION_CHECK</emphasis>
420 <emphasis role="preprocessor">#endif</emphasis>
421 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_IBM_VERSION)</emphasis>
422 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_IBM_VERSION_CHECK(major,minor,patch)&#32;(JSON_HEDLEY_IBM_VERSION&#32;&gt;=&#32;JSON_HEDLEY_VERSION_ENCODE(major,&#32;minor,&#32;patch))</emphasis>
423 <emphasis role="preprocessor">#else</emphasis>
424 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_IBM_VERSION_CHECK(major,minor,patch)&#32;(0)</emphasis>
425 <emphasis role="preprocessor">#endif</emphasis>
426 
427 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_TI_VERSION)</emphasis>
428 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_TI_VERSION</emphasis>
429 <emphasis role="preprocessor">#endif</emphasis>
430 <emphasis role="preprocessor">#if&#32;\</emphasis>
431 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;defined(__TI_COMPILER_VERSION__)&#32;&amp;&amp;&#32;\</emphasis>
432 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(&#32;\</emphasis>
433 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;defined(__TMS470__)&#32;||&#32;defined(__TI_ARM__)&#32;||&#32;\</emphasis>
434 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;defined(__MSP430__)&#32;||&#32;\</emphasis>
435 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;defined(__TMS320C2000__)&#32;\</emphasis>
436 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;)</emphasis>
437 <emphasis role="preprocessor">#if&#32;(__TI_COMPILER_VERSION__&#32;&gt;=&#32;16000000)</emphasis>
438 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_TI_VERSION&#32;JSON_HEDLEY_VERSION_ENCODE(__TI_COMPILER_VERSION__&#32;/&#32;1000000,&#32;(__TI_COMPILER_VERSION__&#32;%&#32;1000000)&#32;/&#32;1000,&#32;(__TI_COMPILER_VERSION__&#32;%&#32;1000))</emphasis>
439 <emphasis role="preprocessor">#endif</emphasis>
440 <emphasis role="preprocessor">#endif</emphasis>
441 
442 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_TI_VERSION_CHECK)</emphasis>
443 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_TI_VERSION_CHECK</emphasis>
444 <emphasis role="preprocessor">#endif</emphasis>
445 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_TI_VERSION)</emphasis>
446 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_TI_VERSION_CHECK(major,minor,patch)&#32;(JSON_HEDLEY_TI_VERSION&#32;&gt;=&#32;JSON_HEDLEY_VERSION_ENCODE(major,&#32;minor,&#32;patch))</emphasis>
447 <emphasis role="preprocessor">#else</emphasis>
448 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_TI_VERSION_CHECK(major,minor,patch)&#32;(0)</emphasis>
449 <emphasis role="preprocessor">#endif</emphasis>
450 
451 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_TI_CL2000_VERSION)</emphasis>
452 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_TI_CL2000_VERSION</emphasis>
453 <emphasis role="preprocessor">#endif</emphasis>
454 <emphasis role="preprocessor">#if&#32;defined(__TI_COMPILER_VERSION__)&#32;&amp;&amp;&#32;defined(__TMS320C2000__)</emphasis>
455 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_TI_CL2000_VERSION&#32;JSON_HEDLEY_VERSION_ENCODE(__TI_COMPILER_VERSION__&#32;/&#32;1000000,&#32;(__TI_COMPILER_VERSION__&#32;%&#32;1000000)&#32;/&#32;1000,&#32;(__TI_COMPILER_VERSION__&#32;%&#32;1000))</emphasis>
456 <emphasis role="preprocessor">#endif</emphasis>
457 
458 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_TI_CL2000_VERSION_CHECK)</emphasis>
459 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_TI_CL2000_VERSION_CHECK</emphasis>
460 <emphasis role="preprocessor">#endif</emphasis>
461 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_TI_CL2000_VERSION)</emphasis>
462 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_TI_CL2000_VERSION_CHECK(major,minor,patch)&#32;(JSON_HEDLEY_TI_CL2000_VERSION&#32;&gt;=&#32;JSON_HEDLEY_VERSION_ENCODE(major,&#32;minor,&#32;patch))</emphasis>
463 <emphasis role="preprocessor">#else</emphasis>
464 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_TI_CL2000_VERSION_CHECK(major,minor,patch)&#32;(0)</emphasis>
465 <emphasis role="preprocessor">#endif</emphasis>
466 
467 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_TI_CL430_VERSION)</emphasis>
468 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_TI_CL430_VERSION</emphasis>
469 <emphasis role="preprocessor">#endif</emphasis>
470 <emphasis role="preprocessor">#if&#32;defined(__TI_COMPILER_VERSION__)&#32;&amp;&amp;&#32;defined(__MSP430__)</emphasis>
471 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_TI_CL430_VERSION&#32;JSON_HEDLEY_VERSION_ENCODE(__TI_COMPILER_VERSION__&#32;/&#32;1000000,&#32;(__TI_COMPILER_VERSION__&#32;%&#32;1000000)&#32;/&#32;1000,&#32;(__TI_COMPILER_VERSION__&#32;%&#32;1000))</emphasis>
472 <emphasis role="preprocessor">#endif</emphasis>
473 
474 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_TI_CL430_VERSION_CHECK)</emphasis>
475 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_TI_CL430_VERSION_CHECK</emphasis>
476 <emphasis role="preprocessor">#endif</emphasis>
477 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_TI_CL430_VERSION)</emphasis>
478 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_TI_CL430_VERSION_CHECK(major,minor,patch)&#32;(JSON_HEDLEY_TI_CL430_VERSION&#32;&gt;=&#32;JSON_HEDLEY_VERSION_ENCODE(major,&#32;minor,&#32;patch))</emphasis>
479 <emphasis role="preprocessor">#else</emphasis>
480 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_TI_CL430_VERSION_CHECK(major,minor,patch)&#32;(0)</emphasis>
481 <emphasis role="preprocessor">#endif</emphasis>
482 
483 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_TI_ARMCL_VERSION)</emphasis>
484 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_TI_ARMCL_VERSION</emphasis>
485 <emphasis role="preprocessor">#endif</emphasis>
486 <emphasis role="preprocessor">#if&#32;defined(__TI_COMPILER_VERSION__)&#32;&amp;&amp;&#32;(defined(__TMS470__)&#32;||&#32;defined(__TI_ARM__))</emphasis>
487 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_TI_ARMCL_VERSION&#32;JSON_HEDLEY_VERSION_ENCODE(__TI_COMPILER_VERSION__&#32;/&#32;1000000,&#32;(__TI_COMPILER_VERSION__&#32;%&#32;1000000)&#32;/&#32;1000,&#32;(__TI_COMPILER_VERSION__&#32;%&#32;1000))</emphasis>
488 <emphasis role="preprocessor">#endif</emphasis>
489 
490 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_TI_ARMCL_VERSION_CHECK)</emphasis>
491 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_TI_ARMCL_VERSION_CHECK</emphasis>
492 <emphasis role="preprocessor">#endif</emphasis>
493 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_TI_ARMCL_VERSION)</emphasis>
494 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(major,minor,patch)&#32;(JSON_HEDLEY_TI_ARMCL_VERSION&#32;&gt;=&#32;JSON_HEDLEY_VERSION_ENCODE(major,&#32;minor,&#32;patch))</emphasis>
495 <emphasis role="preprocessor">#else</emphasis>
496 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(major,minor,patch)&#32;(0)</emphasis>
497 <emphasis role="preprocessor">#endif</emphasis>
498 
499 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_TI_CL6X_VERSION)</emphasis>
500 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_TI_CL6X_VERSION</emphasis>
501 <emphasis role="preprocessor">#endif</emphasis>
502 <emphasis role="preprocessor">#if&#32;defined(__TI_COMPILER_VERSION__)&#32;&amp;&amp;&#32;defined(__TMS320C6X__)</emphasis>
503 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_TI_CL6X_VERSION&#32;JSON_HEDLEY_VERSION_ENCODE(__TI_COMPILER_VERSION__&#32;/&#32;1000000,&#32;(__TI_COMPILER_VERSION__&#32;%&#32;1000000)&#32;/&#32;1000,&#32;(__TI_COMPILER_VERSION__&#32;%&#32;1000))</emphasis>
504 <emphasis role="preprocessor">#endif</emphasis>
505 
506 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_TI_CL6X_VERSION_CHECK)</emphasis>
507 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_TI_CL6X_VERSION_CHECK</emphasis>
508 <emphasis role="preprocessor">#endif</emphasis>
509 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_TI_CL6X_VERSION)</emphasis>
510 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_TI_CL6X_VERSION_CHECK(major,minor,patch)&#32;(JSON_HEDLEY_TI_CL6X_VERSION&#32;&gt;=&#32;JSON_HEDLEY_VERSION_ENCODE(major,&#32;minor,&#32;patch))</emphasis>
511 <emphasis role="preprocessor">#else</emphasis>
512 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_TI_CL6X_VERSION_CHECK(major,minor,patch)&#32;(0)</emphasis>
513 <emphasis role="preprocessor">#endif</emphasis>
514 
515 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_TI_CL7X_VERSION)</emphasis>
516 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_TI_CL7X_VERSION</emphasis>
517 <emphasis role="preprocessor">#endif</emphasis>
518 <emphasis role="preprocessor">#if&#32;defined(__TI_COMPILER_VERSION__)&#32;&amp;&amp;&#32;defined(__C7000__)</emphasis>
519 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_TI_CL7X_VERSION&#32;JSON_HEDLEY_VERSION_ENCODE(__TI_COMPILER_VERSION__&#32;/&#32;1000000,&#32;(__TI_COMPILER_VERSION__&#32;%&#32;1000000)&#32;/&#32;1000,&#32;(__TI_COMPILER_VERSION__&#32;%&#32;1000))</emphasis>
520 <emphasis role="preprocessor">#endif</emphasis>
521 
522 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_TI_CL7X_VERSION_CHECK)</emphasis>
523 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_TI_CL7X_VERSION_CHECK</emphasis>
524 <emphasis role="preprocessor">#endif</emphasis>
525 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_TI_CL7X_VERSION)</emphasis>
526 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_TI_CL7X_VERSION_CHECK(major,minor,patch)&#32;(JSON_HEDLEY_TI_CL7X_VERSION&#32;&gt;=&#32;JSON_HEDLEY_VERSION_ENCODE(major,&#32;minor,&#32;patch))</emphasis>
527 <emphasis role="preprocessor">#else</emphasis>
528 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_TI_CL7X_VERSION_CHECK(major,minor,patch)&#32;(0)</emphasis>
529 <emphasis role="preprocessor">#endif</emphasis>
530 
531 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_TI_CLPRU_VERSION)</emphasis>
532 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_TI_CLPRU_VERSION</emphasis>
533 <emphasis role="preprocessor">#endif</emphasis>
534 <emphasis role="preprocessor">#if&#32;defined(__TI_COMPILER_VERSION__)&#32;&amp;&amp;&#32;defined(__PRU__)</emphasis>
535 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_TI_CLPRU_VERSION&#32;JSON_HEDLEY_VERSION_ENCODE(__TI_COMPILER_VERSION__&#32;/&#32;1000000,&#32;(__TI_COMPILER_VERSION__&#32;%&#32;1000000)&#32;/&#32;1000,&#32;(__TI_COMPILER_VERSION__&#32;%&#32;1000))</emphasis>
536 <emphasis role="preprocessor">#endif</emphasis>
537 
538 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_TI_CLPRU_VERSION_CHECK)</emphasis>
539 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_TI_CLPRU_VERSION_CHECK</emphasis>
540 <emphasis role="preprocessor">#endif</emphasis>
541 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_TI_CLPRU_VERSION)</emphasis>
542 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(major,minor,patch)&#32;(JSON_HEDLEY_TI_CLPRU_VERSION&#32;&gt;=&#32;JSON_HEDLEY_VERSION_ENCODE(major,&#32;minor,&#32;patch))</emphasis>
543 <emphasis role="preprocessor">#else</emphasis>
544 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(major,minor,patch)&#32;(0)</emphasis>
545 <emphasis role="preprocessor">#endif</emphasis>
546 
547 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_CRAY_VERSION)</emphasis>
548 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_CRAY_VERSION</emphasis>
549 <emphasis role="preprocessor">#endif</emphasis>
550 <emphasis role="preprocessor">#if&#32;defined(_CRAYC)</emphasis>
551 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#if&#32;defined(_RELEASE_PATCHLEVEL)</emphasis>
552 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_CRAY_VERSION&#32;JSON_HEDLEY_VERSION_ENCODE(_RELEASE_MAJOR,&#32;_RELEASE_MINOR,&#32;_RELEASE_PATCHLEVEL)</emphasis>
553 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#else</emphasis>
554 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_CRAY_VERSION&#32;JSON_HEDLEY_VERSION_ENCODE(_RELEASE_MAJOR,&#32;_RELEASE_MINOR,&#32;0)</emphasis>
555 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
556 <emphasis role="preprocessor">#endif</emphasis>
557 
558 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_CRAY_VERSION_CHECK)</emphasis>
559 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_CRAY_VERSION_CHECK</emphasis>
560 <emphasis role="preprocessor">#endif</emphasis>
561 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_CRAY_VERSION)</emphasis>
562 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_CRAY_VERSION_CHECK(major,minor,patch)&#32;(JSON_HEDLEY_CRAY_VERSION&#32;&gt;=&#32;JSON_HEDLEY_VERSION_ENCODE(major,&#32;minor,&#32;patch))</emphasis>
563 <emphasis role="preprocessor">#else</emphasis>
564 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_CRAY_VERSION_CHECK(major,minor,patch)&#32;(0)</emphasis>
565 <emphasis role="preprocessor">#endif</emphasis>
566 
567 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_IAR_VERSION)</emphasis>
568 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_IAR_VERSION</emphasis>
569 <emphasis role="preprocessor">#endif</emphasis>
570 <emphasis role="preprocessor">#if&#32;defined(__IAR_SYSTEMS_ICC__)</emphasis>
571 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#if&#32;__VER__&#32;&gt;&#32;1000</emphasis>
572 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_IAR_VERSION&#32;JSON_HEDLEY_VERSION_ENCODE((__VER__&#32;/&#32;1000000),&#32;((__VER__&#32;/&#32;1000)&#32;%&#32;1000),&#32;(__VER__&#32;%&#32;1000))</emphasis>
573 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#else</emphasis>
574 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_IAR_VERSION&#32;JSON_HEDLEY_VERSION_ENCODE(__VER__&#32;/&#32;100,&#32;__VER__&#32;%&#32;100,&#32;0)</emphasis>
575 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
576 <emphasis role="preprocessor">#endif</emphasis>
577 
578 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_IAR_VERSION_CHECK)</emphasis>
579 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_IAR_VERSION_CHECK</emphasis>
580 <emphasis role="preprocessor">#endif</emphasis>
581 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_IAR_VERSION)</emphasis>
582 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_IAR_VERSION_CHECK(major,minor,patch)&#32;(JSON_HEDLEY_IAR_VERSION&#32;&gt;=&#32;JSON_HEDLEY_VERSION_ENCODE(major,&#32;minor,&#32;patch))</emphasis>
583 <emphasis role="preprocessor">#else</emphasis>
584 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_IAR_VERSION_CHECK(major,minor,patch)&#32;(0)</emphasis>
585 <emphasis role="preprocessor">#endif</emphasis>
586 
587 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_TINYC_VERSION)</emphasis>
588 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_TINYC_VERSION</emphasis>
589 <emphasis role="preprocessor">#endif</emphasis>
590 <emphasis role="preprocessor">#if&#32;defined(__TINYC__)</emphasis>
591 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_TINYC_VERSION&#32;JSON_HEDLEY_VERSION_ENCODE(__TINYC__&#32;/&#32;1000,&#32;(__TINYC__&#32;/&#32;100)&#32;%&#32;10,&#32;__TINYC__&#32;%&#32;100)</emphasis>
592 <emphasis role="preprocessor">#endif</emphasis>
593 
594 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_TINYC_VERSION_CHECK)</emphasis>
595 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_TINYC_VERSION_CHECK</emphasis>
596 <emphasis role="preprocessor">#endif</emphasis>
597 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_TINYC_VERSION)</emphasis>
598 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_TINYC_VERSION_CHECK(major,minor,patch)&#32;(JSON_HEDLEY_TINYC_VERSION&#32;&gt;=&#32;JSON_HEDLEY_VERSION_ENCODE(major,&#32;minor,&#32;patch))</emphasis>
599 <emphasis role="preprocessor">#else</emphasis>
600 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_TINYC_VERSION_CHECK(major,minor,patch)&#32;(0)</emphasis>
601 <emphasis role="preprocessor">#endif</emphasis>
602 
603 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_DMC_VERSION)</emphasis>
604 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_DMC_VERSION</emphasis>
605 <emphasis role="preprocessor">#endif</emphasis>
606 <emphasis role="preprocessor">#if&#32;defined(__DMC__)</emphasis>
607 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DMC_VERSION&#32;JSON_HEDLEY_VERSION_ENCODE(__DMC__&#32;&gt;&gt;&#32;8,&#32;(__DMC__&#32;&gt;&gt;&#32;4)&#32;&amp;&#32;0xf,&#32;__DMC__&#32;&amp;&#32;0xf)</emphasis>
608 <emphasis role="preprocessor">#endif</emphasis>
609 
610 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_DMC_VERSION_CHECK)</emphasis>
611 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_DMC_VERSION_CHECK</emphasis>
612 <emphasis role="preprocessor">#endif</emphasis>
613 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_DMC_VERSION)</emphasis>
614 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DMC_VERSION_CHECK(major,minor,patch)&#32;(JSON_HEDLEY_DMC_VERSION&#32;&gt;=&#32;JSON_HEDLEY_VERSION_ENCODE(major,&#32;minor,&#32;patch))</emphasis>
615 <emphasis role="preprocessor">#else</emphasis>
616 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DMC_VERSION_CHECK(major,minor,patch)&#32;(0)</emphasis>
617 <emphasis role="preprocessor">#endif</emphasis>
618 
619 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_COMPCERT_VERSION)</emphasis>
620 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_COMPCERT_VERSION</emphasis>
621 <emphasis role="preprocessor">#endif</emphasis>
622 <emphasis role="preprocessor">#if&#32;defined(__COMPCERT_VERSION__)</emphasis>
623 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_COMPCERT_VERSION&#32;JSON_HEDLEY_VERSION_ENCODE(__COMPCERT_VERSION__&#32;/&#32;10000,&#32;(__COMPCERT_VERSION__&#32;/&#32;100)&#32;%&#32;100,&#32;__COMPCERT_VERSION__&#32;%&#32;100)</emphasis>
624 <emphasis role="preprocessor">#endif</emphasis>
625 
626 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_COMPCERT_VERSION_CHECK)</emphasis>
627 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_COMPCERT_VERSION_CHECK</emphasis>
628 <emphasis role="preprocessor">#endif</emphasis>
629 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_COMPCERT_VERSION)</emphasis>
630 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_COMPCERT_VERSION_CHECK(major,minor,patch)&#32;(JSON_HEDLEY_COMPCERT_VERSION&#32;&gt;=&#32;JSON_HEDLEY_VERSION_ENCODE(major,&#32;minor,&#32;patch))</emphasis>
631 <emphasis role="preprocessor">#else</emphasis>
632 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_COMPCERT_VERSION_CHECK(major,minor,patch)&#32;(0)</emphasis>
633 <emphasis role="preprocessor">#endif</emphasis>
634 
635 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_PELLES_VERSION)</emphasis>
636 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_PELLES_VERSION</emphasis>
637 <emphasis role="preprocessor">#endif</emphasis>
638 <emphasis role="preprocessor">#if&#32;defined(__POCC__)</emphasis>
639 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_PELLES_VERSION&#32;JSON_HEDLEY_VERSION_ENCODE(__POCC__&#32;/&#32;100,&#32;__POCC__&#32;%&#32;100,&#32;0)</emphasis>
640 <emphasis role="preprocessor">#endif</emphasis>
641 
642 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_PELLES_VERSION_CHECK)</emphasis>
643 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_PELLES_VERSION_CHECK</emphasis>
644 <emphasis role="preprocessor">#endif</emphasis>
645 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_PELLES_VERSION)</emphasis>
646 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_PELLES_VERSION_CHECK(major,minor,patch)&#32;(JSON_HEDLEY_PELLES_VERSION&#32;&gt;=&#32;JSON_HEDLEY_VERSION_ENCODE(major,&#32;minor,&#32;patch))</emphasis>
647 <emphasis role="preprocessor">#else</emphasis>
648 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_PELLES_VERSION_CHECK(major,minor,patch)&#32;(0)</emphasis>
649 <emphasis role="preprocessor">#endif</emphasis>
650 
651 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_MCST_LCC_VERSION)</emphasis>
652 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_MCST_LCC_VERSION</emphasis>
653 <emphasis role="preprocessor">#endif</emphasis>
654 <emphasis role="preprocessor">#if&#32;defined(__LCC__)&#32;&amp;&amp;&#32;defined(__LCC_MINOR__)</emphasis>
655 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_MCST_LCC_VERSION&#32;JSON_HEDLEY_VERSION_ENCODE(__LCC__&#32;/&#32;100,&#32;__LCC__&#32;%&#32;100,&#32;__LCC_MINOR__)</emphasis>
656 <emphasis role="preprocessor">#endif</emphasis>
657 
658 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_MCST_LCC_VERSION_CHECK)</emphasis>
659 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_MCST_LCC_VERSION_CHECK</emphasis>
660 <emphasis role="preprocessor">#endif</emphasis>
661 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_MCST_LCC_VERSION)</emphasis>
662 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_MCST_LCC_VERSION_CHECK(major,minor,patch)&#32;(JSON_HEDLEY_MCST_LCC_VERSION&#32;&gt;=&#32;JSON_HEDLEY_VERSION_ENCODE(major,&#32;minor,&#32;patch))</emphasis>
663 <emphasis role="preprocessor">#else</emphasis>
664 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_MCST_LCC_VERSION_CHECK(major,minor,patch)&#32;(0)</emphasis>
665 <emphasis role="preprocessor">#endif</emphasis>
666 
667 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_GCC_VERSION)</emphasis>
668 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_GCC_VERSION</emphasis>
669 <emphasis role="preprocessor">#endif</emphasis>
670 <emphasis role="preprocessor">#if&#32;\</emphasis>
671 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;defined(JSON_HEDLEY_GNUC_VERSION)&#32;&amp;&amp;&#32;\</emphasis>
672 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;!defined(__clang__)&#32;&amp;&amp;&#32;\</emphasis>
673 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;!defined(JSON_HEDLEY_INTEL_VERSION)&#32;&amp;&amp;&#32;\</emphasis>
674 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;!defined(JSON_HEDLEY_PGI_VERSION)&#32;&amp;&amp;&#32;\</emphasis>
675 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;!defined(JSON_HEDLEY_ARM_VERSION)&#32;&amp;&amp;&#32;\</emphasis>
676 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;!defined(JSON_HEDLEY_CRAY_VERSION)&#32;&amp;&amp;&#32;\</emphasis>
677 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;!defined(JSON_HEDLEY_TI_VERSION)&#32;&amp;&amp;&#32;\</emphasis>
678 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;!defined(JSON_HEDLEY_TI_ARMCL_VERSION)&#32;&amp;&amp;&#32;\</emphasis>
679 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;!defined(JSON_HEDLEY_TI_CL430_VERSION)&#32;&amp;&amp;&#32;\</emphasis>
680 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;!defined(JSON_HEDLEY_TI_CL2000_VERSION)&#32;&amp;&amp;&#32;\</emphasis>
681 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;!defined(JSON_HEDLEY_TI_CL6X_VERSION)&#32;&amp;&amp;&#32;\</emphasis>
682 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;!defined(JSON_HEDLEY_TI_CL7X_VERSION)&#32;&amp;&amp;&#32;\</emphasis>
683 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;!defined(JSON_HEDLEY_TI_CLPRU_VERSION)&#32;&amp;&amp;&#32;\</emphasis>
684 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;!defined(__COMPCERT__)&#32;&amp;&amp;&#32;\</emphasis>
685 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;!defined(JSON_HEDLEY_MCST_LCC_VERSION)</emphasis>
686 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_GCC_VERSION&#32;JSON_HEDLEY_GNUC_VERSION</emphasis>
687 <emphasis role="preprocessor">#endif</emphasis>
688 
689 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_GCC_VERSION_CHECK)</emphasis>
690 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_GCC_VERSION_CHECK</emphasis>
691 <emphasis role="preprocessor">#endif</emphasis>
692 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_GCC_VERSION)</emphasis>
693 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)&#32;(JSON_HEDLEY_GCC_VERSION&#32;&gt;=&#32;JSON_HEDLEY_VERSION_ENCODE(major,&#32;minor,&#32;patch))</emphasis>
694 <emphasis role="preprocessor">#else</emphasis>
695 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)&#32;(0)</emphasis>
696 <emphasis role="preprocessor">#endif</emphasis>
697 
698 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_HAS_ATTRIBUTE)</emphasis>
699 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_HAS_ATTRIBUTE</emphasis>
700 <emphasis role="preprocessor">#endif</emphasis>
701 <emphasis role="preprocessor">#if&#32;\</emphasis>
702 <emphasis role="preprocessor">&#32;&#32;defined(__has_attribute)&#32;&amp;&amp;&#32;\</emphasis>
703 <emphasis role="preprocessor">&#32;&#32;(&#32;\</emphasis>
704 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(!defined(JSON_HEDLEY_IAR_VERSION)&#32;||&#32;JSON_HEDLEY_IAR_VERSION_CHECK(8,5,9))&#32;\</emphasis>
705 <emphasis role="preprocessor">&#32;&#32;)</emphasis>
706 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_HAS_ATTRIBUTE(attribute)&#32;__has_attribute(attribute)</emphasis>
707 <emphasis role="preprocessor">#else</emphasis>
708 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_HAS_ATTRIBUTE(attribute)&#32;(0)</emphasis>
709 <emphasis role="preprocessor">#endif</emphasis>
710 
711 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_GNUC_HAS_ATTRIBUTE)</emphasis>
712 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_GNUC_HAS_ATTRIBUTE</emphasis>
713 <emphasis role="preprocessor">#endif</emphasis>
714 <emphasis role="preprocessor">#if&#32;defined(__has_attribute)</emphasis>
715 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_GNUC_HAS_ATTRIBUTE(attribute,major,minor,patch)&#32;JSON_HEDLEY_HAS_ATTRIBUTE(attribute)</emphasis>
716 <emphasis role="preprocessor">#else</emphasis>
717 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_GNUC_HAS_ATTRIBUTE(attribute,major,minor,patch)&#32;JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch)</emphasis>
718 <emphasis role="preprocessor">#endif</emphasis>
719 
720 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_GCC_HAS_ATTRIBUTE)</emphasis>
721 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_GCC_HAS_ATTRIBUTE</emphasis>
722 <emphasis role="preprocessor">#endif</emphasis>
723 <emphasis role="preprocessor">#if&#32;defined(__has_attribute)</emphasis>
724 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_GCC_HAS_ATTRIBUTE(attribute,major,minor,patch)&#32;JSON_HEDLEY_HAS_ATTRIBUTE(attribute)</emphasis>
725 <emphasis role="preprocessor">#else</emphasis>
726 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_GCC_HAS_ATTRIBUTE(attribute,major,minor,patch)&#32;JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)</emphasis>
727 <emphasis role="preprocessor">#endif</emphasis>
728 
729 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_HAS_CPP_ATTRIBUTE)</emphasis>
730 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_HAS_CPP_ATTRIBUTE</emphasis>
731 <emphasis role="preprocessor">#endif</emphasis>
732 <emphasis role="preprocessor">#if&#32;\</emphasis>
733 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;defined(__has_cpp_attribute)&#32;&amp;&amp;&#32;\</emphasis>
734 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;defined(__cplusplus)&#32;&amp;&amp;&#32;\</emphasis>
735 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(!defined(JSON_HEDLEY_SUNPRO_VERSION)&#32;||&#32;JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,15,0))</emphasis>
736 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_HAS_CPP_ATTRIBUTE(attribute)&#32;__has_cpp_attribute(attribute)</emphasis>
737 <emphasis role="preprocessor">#else</emphasis>
738 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_HAS_CPP_ATTRIBUTE(attribute)&#32;(0)</emphasis>
739 <emphasis role="preprocessor">#endif</emphasis>
740 
741 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_HAS_CPP_ATTRIBUTE_NS)</emphasis>
742 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_HAS_CPP_ATTRIBUTE_NS</emphasis>
743 <emphasis role="preprocessor">#endif</emphasis>
744 <emphasis role="preprocessor">#if&#32;!defined(__cplusplus)&#32;||&#32;!defined(__has_cpp_attribute)</emphasis>
745 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_HAS_CPP_ATTRIBUTE_NS(ns,attribute)&#32;(0)</emphasis>
746 <emphasis role="preprocessor">#elif&#32;\</emphasis>
747 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;!defined(JSON_HEDLEY_PGI_VERSION)&#32;&amp;&amp;&#32;\</emphasis>
748 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;!defined(JSON_HEDLEY_IAR_VERSION)&#32;&amp;&amp;&#32;\</emphasis>
749 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(!defined(JSON_HEDLEY_SUNPRO_VERSION)&#32;||&#32;JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,15,0))&#32;&amp;&amp;&#32;\</emphasis>
750 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(!defined(JSON_HEDLEY_MSVC_VERSION)&#32;||&#32;JSON_HEDLEY_MSVC_VERSION_CHECK(19,20,0))</emphasis>
751 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_HAS_CPP_ATTRIBUTE_NS(ns,attribute)&#32;JSON_HEDLEY_HAS_CPP_ATTRIBUTE(ns::attribute)</emphasis>
752 <emphasis role="preprocessor">#else</emphasis>
753 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_HAS_CPP_ATTRIBUTE_NS(ns,attribute)&#32;(0)</emphasis>
754 <emphasis role="preprocessor">#endif</emphasis>
755 
756 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_GNUC_HAS_CPP_ATTRIBUTE)</emphasis>
757 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_GNUC_HAS_CPP_ATTRIBUTE</emphasis>
758 <emphasis role="preprocessor">#endif</emphasis>
759 <emphasis role="preprocessor">#if&#32;defined(__has_cpp_attribute)&#32;&amp;&amp;&#32;defined(__cplusplus)</emphasis>
760 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_GNUC_HAS_CPP_ATTRIBUTE(attribute,major,minor,patch)&#32;__has_cpp_attribute(attribute)</emphasis>
761 <emphasis role="preprocessor">#else</emphasis>
762 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_GNUC_HAS_CPP_ATTRIBUTE(attribute,major,minor,patch)&#32;JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch)</emphasis>
763 <emphasis role="preprocessor">#endif</emphasis>
764 
765 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_GCC_HAS_CPP_ATTRIBUTE)</emphasis>
766 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_GCC_HAS_CPP_ATTRIBUTE</emphasis>
767 <emphasis role="preprocessor">#endif</emphasis>
768 <emphasis role="preprocessor">#if&#32;defined(__has_cpp_attribute)&#32;&amp;&amp;&#32;defined(__cplusplus)</emphasis>
769 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_GCC_HAS_CPP_ATTRIBUTE(attribute,major,minor,patch)&#32;__has_cpp_attribute(attribute)</emphasis>
770 <emphasis role="preprocessor">#else</emphasis>
771 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_GCC_HAS_CPP_ATTRIBUTE(attribute,major,minor,patch)&#32;JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)</emphasis>
772 <emphasis role="preprocessor">#endif</emphasis>
773 
774 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_HAS_BUILTIN)</emphasis>
775 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_HAS_BUILTIN</emphasis>
776 <emphasis role="preprocessor">#endif</emphasis>
777 <emphasis role="preprocessor">#if&#32;defined(__has_builtin)</emphasis>
778 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_HAS_BUILTIN(builtin)&#32;__has_builtin(builtin)</emphasis>
779 <emphasis role="preprocessor">#else</emphasis>
780 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_HAS_BUILTIN(builtin)&#32;(0)</emphasis>
781 <emphasis role="preprocessor">#endif</emphasis>
782 
783 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_GNUC_HAS_BUILTIN)</emphasis>
784 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_GNUC_HAS_BUILTIN</emphasis>
785 <emphasis role="preprocessor">#endif</emphasis>
786 <emphasis role="preprocessor">#if&#32;defined(__has_builtin)</emphasis>
787 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_GNUC_HAS_BUILTIN(builtin,major,minor,patch)&#32;__has_builtin(builtin)</emphasis>
788 <emphasis role="preprocessor">#else</emphasis>
789 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_GNUC_HAS_BUILTIN(builtin,major,minor,patch)&#32;JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch)</emphasis>
790 <emphasis role="preprocessor">#endif</emphasis>
791 
792 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_GCC_HAS_BUILTIN)</emphasis>
793 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_GCC_HAS_BUILTIN</emphasis>
794 <emphasis role="preprocessor">#endif</emphasis>
795 <emphasis role="preprocessor">#if&#32;defined(__has_builtin)</emphasis>
796 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_GCC_HAS_BUILTIN(builtin,major,minor,patch)&#32;__has_builtin(builtin)</emphasis>
797 <emphasis role="preprocessor">#else</emphasis>
798 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_GCC_HAS_BUILTIN(builtin,major,minor,patch)&#32;JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)</emphasis>
799 <emphasis role="preprocessor">#endif</emphasis>
800 
801 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_HAS_FEATURE)</emphasis>
802 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_HAS_FEATURE</emphasis>
803 <emphasis role="preprocessor">#endif</emphasis>
804 <emphasis role="preprocessor">#if&#32;defined(__has_feature)</emphasis>
805 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_HAS_FEATURE(feature)&#32;__has_feature(feature)</emphasis>
806 <emphasis role="preprocessor">#else</emphasis>
807 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_HAS_FEATURE(feature)&#32;(0)</emphasis>
808 <emphasis role="preprocessor">#endif</emphasis>
809 
810 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_GNUC_HAS_FEATURE)</emphasis>
811 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_GNUC_HAS_FEATURE</emphasis>
812 <emphasis role="preprocessor">#endif</emphasis>
813 <emphasis role="preprocessor">#if&#32;defined(__has_feature)</emphasis>
814 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_GNUC_HAS_FEATURE(feature,major,minor,patch)&#32;__has_feature(feature)</emphasis>
815 <emphasis role="preprocessor">#else</emphasis>
816 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_GNUC_HAS_FEATURE(feature,major,minor,patch)&#32;JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch)</emphasis>
817 <emphasis role="preprocessor">#endif</emphasis>
818 
819 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_GCC_HAS_FEATURE)</emphasis>
820 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_GCC_HAS_FEATURE</emphasis>
821 <emphasis role="preprocessor">#endif</emphasis>
822 <emphasis role="preprocessor">#if&#32;defined(__has_feature)</emphasis>
823 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_GCC_HAS_FEATURE(feature,major,minor,patch)&#32;__has_feature(feature)</emphasis>
824 <emphasis role="preprocessor">#else</emphasis>
825 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_GCC_HAS_FEATURE(feature,major,minor,patch)&#32;JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)</emphasis>
826 <emphasis role="preprocessor">#endif</emphasis>
827 
828 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_HAS_EXTENSION)</emphasis>
829 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_HAS_EXTENSION</emphasis>
830 <emphasis role="preprocessor">#endif</emphasis>
831 <emphasis role="preprocessor">#if&#32;defined(__has_extension)</emphasis>
832 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_HAS_EXTENSION(extension)&#32;__has_extension(extension)</emphasis>
833 <emphasis role="preprocessor">#else</emphasis>
834 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_HAS_EXTENSION(extension)&#32;(0)</emphasis>
835 <emphasis role="preprocessor">#endif</emphasis>
836 
837 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_GNUC_HAS_EXTENSION)</emphasis>
838 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_GNUC_HAS_EXTENSION</emphasis>
839 <emphasis role="preprocessor">#endif</emphasis>
840 <emphasis role="preprocessor">#if&#32;defined(__has_extension)</emphasis>
841 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_GNUC_HAS_EXTENSION(extension,major,minor,patch)&#32;__has_extension(extension)</emphasis>
842 <emphasis role="preprocessor">#else</emphasis>
843 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_GNUC_HAS_EXTENSION(extension,major,minor,patch)&#32;JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch)</emphasis>
844 <emphasis role="preprocessor">#endif</emphasis>
845 
846 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_GCC_HAS_EXTENSION)</emphasis>
847 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_GCC_HAS_EXTENSION</emphasis>
848 <emphasis role="preprocessor">#endif</emphasis>
849 <emphasis role="preprocessor">#if&#32;defined(__has_extension)</emphasis>
850 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_GCC_HAS_EXTENSION(extension,major,minor,patch)&#32;__has_extension(extension)</emphasis>
851 <emphasis role="preprocessor">#else</emphasis>
852 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_GCC_HAS_EXTENSION(extension,major,minor,patch)&#32;JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)</emphasis>
853 <emphasis role="preprocessor">#endif</emphasis>
854 
855 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_HAS_DECLSPEC_ATTRIBUTE)</emphasis>
856 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_HAS_DECLSPEC_ATTRIBUTE</emphasis>
857 <emphasis role="preprocessor">#endif</emphasis>
858 <emphasis role="preprocessor">#if&#32;defined(__has_declspec_attribute)</emphasis>
859 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_HAS_DECLSPEC_ATTRIBUTE(attribute)&#32;__has_declspec_attribute(attribute)</emphasis>
860 <emphasis role="preprocessor">#else</emphasis>
861 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_HAS_DECLSPEC_ATTRIBUTE(attribute)&#32;(0)</emphasis>
862 <emphasis role="preprocessor">#endif</emphasis>
863 
864 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_GNUC_HAS_DECLSPEC_ATTRIBUTE)</emphasis>
865 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_GNUC_HAS_DECLSPEC_ATTRIBUTE</emphasis>
866 <emphasis role="preprocessor">#endif</emphasis>
867 <emphasis role="preprocessor">#if&#32;defined(__has_declspec_attribute)</emphasis>
868 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_GNUC_HAS_DECLSPEC_ATTRIBUTE(attribute,major,minor,patch)&#32;__has_declspec_attribute(attribute)</emphasis>
869 <emphasis role="preprocessor">#else</emphasis>
870 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_GNUC_HAS_DECLSPEC_ATTRIBUTE(attribute,major,minor,patch)&#32;JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch)</emphasis>
871 <emphasis role="preprocessor">#endif</emphasis>
872 
873 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_GCC_HAS_DECLSPEC_ATTRIBUTE)</emphasis>
874 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_GCC_HAS_DECLSPEC_ATTRIBUTE</emphasis>
875 <emphasis role="preprocessor">#endif</emphasis>
876 <emphasis role="preprocessor">#if&#32;defined(__has_declspec_attribute)</emphasis>
877 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_GCC_HAS_DECLSPEC_ATTRIBUTE(attribute,major,minor,patch)&#32;__has_declspec_attribute(attribute)</emphasis>
878 <emphasis role="preprocessor">#else</emphasis>
879 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_GCC_HAS_DECLSPEC_ATTRIBUTE(attribute,major,minor,patch)&#32;JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)</emphasis>
880 <emphasis role="preprocessor">#endif</emphasis>
881 
882 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_HAS_WARNING)</emphasis>
883 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_HAS_WARNING</emphasis>
884 <emphasis role="preprocessor">#endif</emphasis>
885 <emphasis role="preprocessor">#if&#32;defined(__has_warning)</emphasis>
886 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_HAS_WARNING(warning)&#32;__has_warning(warning)</emphasis>
887 <emphasis role="preprocessor">#else</emphasis>
888 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_HAS_WARNING(warning)&#32;(0)</emphasis>
889 <emphasis role="preprocessor">#endif</emphasis>
890 
891 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_GNUC_HAS_WARNING)</emphasis>
892 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_GNUC_HAS_WARNING</emphasis>
893 <emphasis role="preprocessor">#endif</emphasis>
894 <emphasis role="preprocessor">#if&#32;defined(__has_warning)</emphasis>
895 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_GNUC_HAS_WARNING(warning,major,minor,patch)&#32;__has_warning(warning)</emphasis>
896 <emphasis role="preprocessor">#else</emphasis>
897 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_GNUC_HAS_WARNING(warning,major,minor,patch)&#32;JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch)</emphasis>
898 <emphasis role="preprocessor">#endif</emphasis>
899 
900 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_GCC_HAS_WARNING)</emphasis>
901 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_GCC_HAS_WARNING</emphasis>
902 <emphasis role="preprocessor">#endif</emphasis>
903 <emphasis role="preprocessor">#if&#32;defined(__has_warning)</emphasis>
904 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_GCC_HAS_WARNING(warning,major,minor,patch)&#32;__has_warning(warning)</emphasis>
905 <emphasis role="preprocessor">#else</emphasis>
906 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_GCC_HAS_WARNING(warning,major,minor,patch)&#32;JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)</emphasis>
907 <emphasis role="preprocessor">#endif</emphasis>
908 
909 <emphasis role="preprocessor">#if&#32;\</emphasis>
910 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(defined(__STDC_VERSION__)&#32;&amp;&amp;&#32;(__STDC_VERSION__&#32;&gt;=&#32;199901L))&#32;||&#32;\</emphasis>
911 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;defined(__clang__)&#32;||&#32;\</emphasis>
912 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_GCC_VERSION_CHECK(3,0,0)&#32;||&#32;\</emphasis>
913 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)&#32;||&#32;\</emphasis>
914 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)&#32;||&#32;\</emphasis>
915 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_PGI_VERSION_CHECK(18,4,0)&#32;||&#32;\</emphasis>
916 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0)&#32;||&#32;\</emphasis>
917 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_VERSION_CHECK(15,12,0)&#32;||&#32;\</emphasis>
918 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,7,0)&#32;||&#32;\</emphasis>
919 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL430_VERSION_CHECK(2,0,1)&#32;||&#32;\</emphasis>
920 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,1,0)&#32;||&#32;\</emphasis>
921 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,0,0)&#32;||&#32;\</emphasis>
922 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0)&#32;||&#32;\</emphasis>
923 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0)&#32;||&#32;\</emphasis>
924 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_CRAY_VERSION_CHECK(5,0,0)&#32;||&#32;\</emphasis>
925 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TINYC_VERSION_CHECK(0,9,17)&#32;||&#32;\</emphasis>
926 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_SUNPRO_VERSION_CHECK(8,0,0)&#32;||&#32;\</emphasis>
927 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0)&#32;&amp;&amp;&#32;defined(__C99_PRAGMA_OPERATOR))</emphasis>
928 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_PRAGMA(value)&#32;_Pragma(#value)</emphasis>
929 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_MSVC_VERSION_CHECK(15,0,0)</emphasis>
930 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_PRAGMA(value)&#32;__pragma(value)</emphasis>
931 <emphasis role="preprocessor">#else</emphasis>
932 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_PRAGMA(value)</emphasis>
933 <emphasis role="preprocessor">#endif</emphasis>
934 
935 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_DIAGNOSTIC_PUSH)</emphasis>
936 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_DIAGNOSTIC_PUSH</emphasis>
937 <emphasis role="preprocessor">#endif</emphasis>
938 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_DIAGNOSTIC_POP)</emphasis>
939 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_DIAGNOSTIC_POP</emphasis>
940 <emphasis role="preprocessor">#endif</emphasis>
941 <emphasis role="preprocessor">#if&#32;defined(__clang__)</emphasis>
942 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_PUSH&#32;_Pragma(&quot;clang&#32;diagnostic&#32;push&quot;)</emphasis>
943 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_POP&#32;_Pragma(&quot;clang&#32;diagnostic&#32;pop&quot;)</emphasis>
944 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)</emphasis>
945 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_PUSH&#32;_Pragma(&quot;warning(push)&quot;)</emphasis>
946 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_POP&#32;_Pragma(&quot;warning(pop)&quot;)</emphasis>
947 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_GCC_VERSION_CHECK(4,6,0)</emphasis>
948 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_PUSH&#32;_Pragma(&quot;GCC&#32;diagnostic&#32;push&quot;)</emphasis>
949 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_POP&#32;_Pragma(&quot;GCC&#32;diagnostic&#32;pop&quot;)</emphasis>
950 <emphasis role="preprocessor">#elif&#32;\</emphasis>
951 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_MSVC_VERSION_CHECK(15,0,0)&#32;||&#32;\</emphasis>
952 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)</emphasis>
953 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_PUSH&#32;__pragma(warning(push))</emphasis>
954 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_POP&#32;__pragma(warning(pop))</emphasis>
955 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_ARM_VERSION_CHECK(5,6,0)</emphasis>
956 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_PUSH&#32;_Pragma(&quot;push&quot;)</emphasis>
957 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_POP&#32;_Pragma(&quot;pop&quot;)</emphasis>
958 <emphasis role="preprocessor">#elif&#32;\</emphasis>
959 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_VERSION_CHECK(15,12,0)&#32;||&#32;\</emphasis>
960 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0)&#32;||&#32;\</emphasis>
961 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,4,0)&#32;||&#32;\</emphasis>
962 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL6X_VERSION_CHECK(8,1,0)&#32;||&#32;\</emphasis>
963 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0)&#32;||&#32;\</emphasis>
964 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0)</emphasis>
965 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_PUSH&#32;_Pragma(&quot;diag_push&quot;)</emphasis>
966 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_POP&#32;_Pragma(&quot;diag_pop&quot;)</emphasis>
967 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_PELLES_VERSION_CHECK(2,90,0)</emphasis>
968 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_PUSH&#32;_Pragma(&quot;warning(push)&quot;)</emphasis>
969 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_POP&#32;_Pragma(&quot;warning(pop)&quot;)</emphasis>
970 <emphasis role="preprocessor">#else</emphasis>
971 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_PUSH</emphasis>
972 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_POP</emphasis>
973 <emphasis role="preprocessor">#endif</emphasis>
974 
975 <emphasis role="comment">/*&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_&#32;is&#32;for</emphasis>
976 <emphasis role="comment">&#32;&#32;&#32;HEDLEY&#32;INTERNAL&#32;USE&#32;ONLY.&#32;&#32;API&#32;subject&#32;to&#32;change&#32;without&#32;notice.&#32;*/</emphasis>
977 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_)</emphasis>
978 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_</emphasis>
979 <emphasis role="preprocessor">#endif</emphasis>
980 <emphasis role="preprocessor">#if&#32;defined(__cplusplus)</emphasis>
981 <emphasis role="preprocessor">#&#32;&#32;if&#32;JSON_HEDLEY_HAS_WARNING(&quot;-Wc++98-compat&quot;)</emphasis>
982 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;if&#32;JSON_HEDLEY_HAS_WARNING(&quot;-Wc++17-extensions&quot;)</emphasis>
983 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;if&#32;JSON_HEDLEY_HAS_WARNING(&quot;-Wc++1z-extensions&quot;)</emphasis>
984 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_(xpr)&#32;\</emphasis>
985 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_DIAGNOSTIC_PUSH&#32;\</emphasis>
986 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_Pragma(&quot;clang&#32;diagnostic&#32;ignored&#32;\&quot;-Wc++98-compat\&quot;&quot;)&#32;\</emphasis>
987 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_Pragma(&quot;clang&#32;diagnostic&#32;ignored&#32;\&quot;-Wc++17-extensions\&quot;&quot;)&#32;\</emphasis>
988 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_Pragma(&quot;clang&#32;diagnostic&#32;ignored&#32;\&quot;-Wc++1z-extensions\&quot;&quot;)&#32;\</emphasis>
989 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;xpr&#32;\</emphasis>
990 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_DIAGNOSTIC_POP</emphasis>
991 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;else</emphasis>
992 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_(xpr)&#32;\</emphasis>
993 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_DIAGNOSTIC_PUSH&#32;\</emphasis>
994 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_Pragma(&quot;clang&#32;diagnostic&#32;ignored&#32;\&quot;-Wc++98-compat\&quot;&quot;)&#32;\</emphasis>
995 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_Pragma(&quot;clang&#32;diagnostic&#32;ignored&#32;\&quot;-Wc++17-extensions\&quot;&quot;)&#32;\</emphasis>
996 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;xpr&#32;\</emphasis>
997 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_DIAGNOSTIC_POP</emphasis>
998 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;endif</emphasis>
999 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;else</emphasis>
1000 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_(xpr)&#32;\</emphasis>
1001 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_DIAGNOSTIC_PUSH&#32;\</emphasis>
1002 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_Pragma(&quot;clang&#32;diagnostic&#32;ignored&#32;\&quot;-Wc++98-compat\&quot;&quot;)&#32;\</emphasis>
1003 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;xpr&#32;\</emphasis>
1004 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_DIAGNOSTIC_POP</emphasis>
1005 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;endif</emphasis>
1006 <emphasis role="preprocessor">#&#32;&#32;endif</emphasis>
1007 <emphasis role="preprocessor">#endif</emphasis>
1008 <emphasis role="preprocessor">#if&#32;!defined(JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_)</emphasis>
1009 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_(x)&#32;x</emphasis>
1010 <emphasis role="preprocessor">#endif</emphasis>
1011 
1012 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_CONST_CAST)</emphasis>
1013 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_CONST_CAST</emphasis>
1014 <emphasis role="preprocessor">#endif</emphasis>
1015 <emphasis role="preprocessor">#if&#32;defined(__cplusplus)</emphasis>
1016 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_CONST_CAST(T,&#32;expr)&#32;(const_cast&lt;T&gt;(expr))</emphasis>
1017 <emphasis role="preprocessor">#elif&#32;\</emphasis>
1018 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_HAS_WARNING(&quot;-Wcast-qual&quot;)&#32;||&#32;\</emphasis>
1019 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_GCC_VERSION_CHECK(4,6,0)&#32;||&#32;\</emphasis>
1020 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)</emphasis>
1021 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_CONST_CAST(T,&#32;expr)&#32;(__extension__&#32;({&#32;\</emphasis>
1022 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSON_HEDLEY_DIAGNOSTIC_PUSH&#32;\</emphasis>
1023 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL&#32;\</emphasis>
1024 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((T)&#32;(expr));&#32;\</emphasis>
1025 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSON_HEDLEY_DIAGNOSTIC_POP&#32;\</emphasis>
1026 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}))</emphasis>
1027 <emphasis role="preprocessor">#else</emphasis>
1028 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_CONST_CAST(T,&#32;expr)&#32;((T)&#32;(expr))</emphasis>
1029 <emphasis role="preprocessor">#endif</emphasis>
1030 
1031 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_REINTERPRET_CAST)</emphasis>
1032 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_REINTERPRET_CAST</emphasis>
1033 <emphasis role="preprocessor">#endif</emphasis>
1034 <emphasis role="preprocessor">#if&#32;defined(__cplusplus)</emphasis>
1035 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_REINTERPRET_CAST(T,&#32;expr)&#32;(reinterpret_cast&lt;T&gt;(expr))</emphasis>
1036 <emphasis role="preprocessor">#else</emphasis>
1037 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_REINTERPRET_CAST(T,&#32;expr)&#32;((T)&#32;(expr))</emphasis>
1038 <emphasis role="preprocessor">#endif</emphasis>
1039 
1040 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_STATIC_CAST)</emphasis>
1041 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_STATIC_CAST</emphasis>
1042 <emphasis role="preprocessor">#endif</emphasis>
1043 <emphasis role="preprocessor">#if&#32;defined(__cplusplus)</emphasis>
1044 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_STATIC_CAST(T,&#32;expr)&#32;(static_cast&lt;T&gt;(expr))</emphasis>
1045 <emphasis role="preprocessor">#else</emphasis>
1046 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_STATIC_CAST(T,&#32;expr)&#32;((T)&#32;(expr))</emphasis>
1047 <emphasis role="preprocessor">#endif</emphasis>
1048 
1049 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_CPP_CAST)</emphasis>
1050 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_CPP_CAST</emphasis>
1051 <emphasis role="preprocessor">#endif</emphasis>
1052 <emphasis role="preprocessor">#if&#32;defined(__cplusplus)</emphasis>
1053 <emphasis role="preprocessor">#&#32;&#32;if&#32;JSON_HEDLEY_HAS_WARNING(&quot;-Wold-style-cast&quot;)</emphasis>
1054 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;JSON_HEDLEY_CPP_CAST(T,&#32;expr)&#32;\</emphasis>
1055 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_DIAGNOSTIC_PUSH&#32;\</emphasis>
1056 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_Pragma(&quot;clang&#32;diagnostic&#32;ignored&#32;\&quot;-Wold-style-cast\&quot;&quot;)&#32;\</emphasis>
1057 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;((T)&#32;(expr))&#32;\</emphasis>
1058 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_DIAGNOSTIC_POP</emphasis>
1059 <emphasis role="preprocessor">#&#32;&#32;elif&#32;JSON_HEDLEY_IAR_VERSION_CHECK(8,3,0)</emphasis>
1060 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;JSON_HEDLEY_CPP_CAST(T,&#32;expr)&#32;\</emphasis>
1061 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_DIAGNOSTIC_PUSH&#32;\</emphasis>
1062 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_Pragma(&quot;diag_suppress=Pe137&quot;)&#32;\</emphasis>
1063 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_DIAGNOSTIC_POP</emphasis>
1064 <emphasis role="preprocessor">#&#32;&#32;else</emphasis>
1065 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;JSON_HEDLEY_CPP_CAST(T,&#32;expr)&#32;((T)&#32;(expr))</emphasis>
1066 <emphasis role="preprocessor">#&#32;&#32;endif</emphasis>
1067 <emphasis role="preprocessor">#else</emphasis>
1068 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_CPP_CAST(T,&#32;expr)&#32;(expr)</emphasis>
1069 <emphasis role="preprocessor">#endif</emphasis>
1070 
1071 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED)</emphasis>
1072 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED</emphasis>
1073 <emphasis role="preprocessor">#endif</emphasis>
1074 <emphasis role="preprocessor">#if&#32;JSON_HEDLEY_HAS_WARNING(&quot;-Wdeprecated-declarations&quot;)</emphasis>
1075 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED&#32;_Pragma(&quot;clang&#32;diagnostic&#32;ignored&#32;\&quot;-Wdeprecated-declarations\&quot;&quot;)</emphasis>
1076 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)</emphasis>
1077 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED&#32;_Pragma(&quot;warning(disable:1478&#32;1786)&quot;)</emphasis>
1078 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)</emphasis>
1079 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED&#32;__pragma(warning(disable:1478&#32;1786))</emphasis>
1080 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_PGI_VERSION_CHECK(20,7,0)</emphasis>
1081 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED&#32;_Pragma(&quot;diag_suppress&#32;1215,1216,1444,1445&quot;)</emphasis>
1082 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0)</emphasis>
1083 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED&#32;_Pragma(&quot;diag_suppress&#32;1215,1444&quot;)</emphasis>
1084 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_GCC_VERSION_CHECK(4,3,0)</emphasis>
1085 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED&#32;_Pragma(&quot;GCC&#32;diagnostic&#32;ignored&#32;\&quot;-Wdeprecated-declarations\&quot;&quot;)</emphasis>
1086 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_MSVC_VERSION_CHECK(15,0,0)</emphasis>
1087 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED&#32;__pragma(warning(disable:4996))</emphasis>
1088 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)</emphasis>
1089 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED&#32;_Pragma(&quot;diag_suppress&#32;1215,1444&quot;)</emphasis>
1090 <emphasis role="preprocessor">#elif&#32;\</emphasis>
1091 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_VERSION_CHECK(15,12,0)&#32;||&#32;\</emphasis>
1092 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1093 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0)&#32;||&#32;\</emphasis>
1094 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1095 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0)&#32;||&#32;\</emphasis>
1096 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1097 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0)&#32;||&#32;\</emphasis>
1098 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1099 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0)&#32;||&#32;\</emphasis>
1100 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0)&#32;||&#32;\</emphasis>
1101 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0)</emphasis>
1102 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED&#32;_Pragma(&quot;diag_suppress&#32;1291,1718&quot;)</emphasis>
1103 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,13,0)&#32;&amp;&amp;&#32;!defined(__cplusplus)</emphasis>
1104 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED&#32;_Pragma(&quot;error_messages(off,E_DEPRECATED_ATT,E_DEPRECATED_ATT_MESS)&quot;)</emphasis>
1105 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,13,0)&#32;&amp;&amp;&#32;defined(__cplusplus)</emphasis>
1106 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED&#32;_Pragma(&quot;error_messages(off,symdeprecated,symdeprecated2)&quot;)</emphasis>
1107 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)</emphasis>
1108 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED&#32;_Pragma(&quot;diag_suppress=Pe1444,Pe1215&quot;)</emphasis>
1109 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_PELLES_VERSION_CHECK(2,90,0)</emphasis>
1110 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED&#32;_Pragma(&quot;warn(disable:2241)&quot;)</emphasis>
1111 <emphasis role="preprocessor">#else</emphasis>
1112 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED</emphasis>
1113 <emphasis role="preprocessor">#endif</emphasis>
1114 
1115 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS)</emphasis>
1116 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS</emphasis>
1117 <emphasis role="preprocessor">#endif</emphasis>
1118 <emphasis role="preprocessor">#if&#32;JSON_HEDLEY_HAS_WARNING(&quot;-Wunknown-pragmas&quot;)</emphasis>
1119 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS&#32;_Pragma(&quot;clang&#32;diagnostic&#32;ignored&#32;\&quot;-Wunknown-pragmas\&quot;&quot;)</emphasis>
1120 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)</emphasis>
1121 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS&#32;_Pragma(&quot;warning(disable:161)&quot;)</emphasis>
1122 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)</emphasis>
1123 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS&#32;__pragma(warning(disable:161))</emphasis>
1124 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0)</emphasis>
1125 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS&#32;_Pragma(&quot;diag_suppress&#32;1675&quot;)</emphasis>
1126 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_GCC_VERSION_CHECK(4,3,0)</emphasis>
1127 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS&#32;_Pragma(&quot;GCC&#32;diagnostic&#32;ignored&#32;\&quot;-Wunknown-pragmas\&quot;&quot;)</emphasis>
1128 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_MSVC_VERSION_CHECK(15,0,0)</emphasis>
1129 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS&#32;__pragma(warning(disable:4068))</emphasis>
1130 <emphasis role="preprocessor">#elif&#32;\</emphasis>
1131 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_VERSION_CHECK(16,9,0)&#32;||&#32;\</emphasis>
1132 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL6X_VERSION_CHECK(8,0,0)&#32;||&#32;\</emphasis>
1133 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0)&#32;||&#32;\</emphasis>
1134 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,3,0)</emphasis>
1135 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS&#32;_Pragma(&quot;diag_suppress&#32;163&quot;)</emphasis>
1136 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_TI_CL6X_VERSION_CHECK(8,0,0)</emphasis>
1137 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS&#32;_Pragma(&quot;diag_suppress&#32;163&quot;)</emphasis>
1138 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)</emphasis>
1139 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS&#32;_Pragma(&quot;diag_suppress=Pe161&quot;)</emphasis>
1140 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)</emphasis>
1141 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS&#32;_Pragma(&quot;diag_suppress&#32;161&quot;)</emphasis>
1142 <emphasis role="preprocessor">#else</emphasis>
1143 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS</emphasis>
1144 <emphasis role="preprocessor">#endif</emphasis>
1145 
1146 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES)</emphasis>
1147 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES</emphasis>
1148 <emphasis role="preprocessor">#endif</emphasis>
1149 <emphasis role="preprocessor">#if&#32;JSON_HEDLEY_HAS_WARNING(&quot;-Wunknown-attributes&quot;)</emphasis>
1150 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES&#32;_Pragma(&quot;clang&#32;diagnostic&#32;ignored&#32;\&quot;-Wunknown-attributes\&quot;&quot;)</emphasis>
1151 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_GCC_VERSION_CHECK(4,6,0)</emphasis>
1152 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES&#32;_Pragma(&quot;GCC&#32;diagnostic&#32;ignored&#32;\&quot;-Wdeprecated-declarations\&quot;&quot;)</emphasis>
1153 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_INTEL_VERSION_CHECK(17,0,0)</emphasis>
1154 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES&#32;_Pragma(&quot;warning(disable:1292)&quot;)</emphasis>
1155 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)</emphasis>
1156 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES&#32;__pragma(warning(disable:1292))</emphasis>
1157 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_MSVC_VERSION_CHECK(19,0,0)</emphasis>
1158 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES&#32;__pragma(warning(disable:5030))</emphasis>
1159 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_PGI_VERSION_CHECK(20,7,0)</emphasis>
1160 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES&#32;_Pragma(&quot;diag_suppress&#32;1097,1098&quot;)</emphasis>
1161 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0)</emphasis>
1162 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES&#32;_Pragma(&quot;diag_suppress&#32;1097&quot;)</emphasis>
1163 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,14,0)&#32;&amp;&amp;&#32;defined(__cplusplus)</emphasis>
1164 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES&#32;_Pragma(&quot;error_messages(off,attrskipunsup)&quot;)</emphasis>
1165 <emphasis role="preprocessor">#elif&#32;\</emphasis>
1166 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_VERSION_CHECK(18,1,0)&#32;||&#32;\</emphasis>
1167 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL6X_VERSION_CHECK(8,3,0)&#32;||&#32;\</emphasis>
1168 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0)</emphasis>
1169 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES&#32;_Pragma(&quot;diag_suppress&#32;1173&quot;)</emphasis>
1170 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)</emphasis>
1171 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES&#32;_Pragma(&quot;diag_suppress=Pe1097&quot;)</emphasis>
1172 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)</emphasis>
1173 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES&#32;_Pragma(&quot;diag_suppress&#32;1097&quot;)</emphasis>
1174 <emphasis role="preprocessor">#else</emphasis>
1175 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES</emphasis>
1176 <emphasis role="preprocessor">#endif</emphasis>
1177 
1178 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL)</emphasis>
1179 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL</emphasis>
1180 <emphasis role="preprocessor">#endif</emphasis>
1181 <emphasis role="preprocessor">#if&#32;JSON_HEDLEY_HAS_WARNING(&quot;-Wcast-qual&quot;)</emphasis>
1182 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL&#32;_Pragma(&quot;clang&#32;diagnostic&#32;ignored&#32;\&quot;-Wcast-qual\&quot;&quot;)</emphasis>
1183 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)</emphasis>
1184 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL&#32;_Pragma(&quot;warning(disable:2203&#32;2331)&quot;)</emphasis>
1185 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_GCC_VERSION_CHECK(3,0,0)</emphasis>
1186 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL&#32;_Pragma(&quot;GCC&#32;diagnostic&#32;ignored&#32;\&quot;-Wcast-qual\&quot;&quot;)</emphasis>
1187 <emphasis role="preprocessor">#else</emphasis>
1188 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL</emphasis>
1189 <emphasis role="preprocessor">#endif</emphasis>
1190 
1191 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNUSED_FUNCTION)</emphasis>
1192 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNUSED_FUNCTION</emphasis>
1193 <emphasis role="preprocessor">#endif</emphasis>
1194 <emphasis role="preprocessor">#if&#32;JSON_HEDLEY_HAS_WARNING(&quot;-Wunused-function&quot;)</emphasis>
1195 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNUSED_FUNCTION&#32;_Pragma(&quot;clang&#32;diagnostic&#32;ignored&#32;\&quot;-Wunused-function\&quot;&quot;)</emphasis>
1196 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_GCC_VERSION_CHECK(3,4,0)</emphasis>
1197 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNUSED_FUNCTION&#32;_Pragma(&quot;GCC&#32;diagnostic&#32;ignored&#32;\&quot;-Wunused-function\&quot;&quot;)</emphasis>
1198 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_MSVC_VERSION_CHECK(1,0,0)</emphasis>
1199 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNUSED_FUNCTION&#32;__pragma(warning(disable:4505))</emphasis>
1200 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)</emphasis>
1201 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNUSED_FUNCTION&#32;_Pragma(&quot;diag_suppress&#32;3142&quot;)</emphasis>
1202 <emphasis role="preprocessor">#else</emphasis>
1203 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNUSED_FUNCTION</emphasis>
1204 <emphasis role="preprocessor">#endif</emphasis>
1205 
1206 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_DEPRECATED)</emphasis>
1207 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_DEPRECATED</emphasis>
1208 <emphasis role="preprocessor">#endif</emphasis>
1209 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_DEPRECATED_FOR)</emphasis>
1210 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_DEPRECATED_FOR</emphasis>
1211 <emphasis role="preprocessor">#endif</emphasis>
1212 <emphasis role="preprocessor">#if&#32;\</emphasis>
1213 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_MSVC_VERSION_CHECK(14,0,0)&#32;||&#32;\</emphasis>
1214 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)</emphasis>
1215 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DEPRECATED(since)&#32;__declspec(deprecated(&quot;Since&#32;&quot;&#32;#&#32;since))</emphasis>
1216 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DEPRECATED_FOR(since,&#32;replacement)&#32;__declspec(deprecated(&quot;Since&#32;&quot;&#32;#since&#32;&quot;;&#32;use&#32;&quot;&#32;#replacement))</emphasis>
1217 <emphasis role="preprocessor">#elif&#32;\</emphasis>
1218 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(JSON_HEDLEY_HAS_EXTENSION(attribute_deprecated_with_message)&#32;&amp;&amp;&#32;!defined(JSON_HEDLEY_IAR_VERSION))&#32;||&#32;\</emphasis>
1219 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_GCC_VERSION_CHECK(4,5,0)&#32;||&#32;\</emphasis>
1220 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)&#32;||&#32;\</emphasis>
1221 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_ARM_VERSION_CHECK(5,6,0)&#32;||&#32;\</emphasis>
1222 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,13,0)&#32;||&#32;\</emphasis>
1223 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0)&#32;||&#32;\</emphasis>
1224 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_VERSION_CHECK(18,1,0)&#32;||&#32;\</emphasis>
1225 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(18,1,0)&#32;||&#32;\</emphasis>
1226 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL6X_VERSION_CHECK(8,3,0)&#32;||&#32;\</emphasis>
1227 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0)&#32;||&#32;\</emphasis>
1228 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,3,0)&#32;||&#32;\</emphasis>
1229 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)</emphasis>
1230 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DEPRECATED(since)&#32;__attribute__((__deprecated__(&quot;Since&#32;&quot;&#32;#since)))</emphasis>
1231 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DEPRECATED_FOR(since,&#32;replacement)&#32;__attribute__((__deprecated__(&quot;Since&#32;&quot;&#32;#since&#32;&quot;;&#32;use&#32;&quot;&#32;#replacement)))</emphasis>
1232 <emphasis role="preprocessor">#elif&#32;defined(__cplusplus)&#32;&amp;&amp;&#32;(__cplusplus&#32;&gt;=&#32;201402L)</emphasis>
1233 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DEPRECATED(since)&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[deprecated(&quot;Since&#32;&quot;&#32;#since)]])</emphasis>
1234 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DEPRECATED_FOR(since,&#32;replacement)&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[deprecated(&quot;Since&#32;&quot;&#32;#since&#32;&quot;;&#32;use&#32;&quot;&#32;#replacement)]])</emphasis>
1235 <emphasis role="preprocessor">#elif&#32;\</emphasis>
1236 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_HAS_ATTRIBUTE(deprecated)&#32;||&#32;\</emphasis>
1237 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_GCC_VERSION_CHECK(3,1,0)&#32;||&#32;\</emphasis>
1238 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0)&#32;||&#32;\</emphasis>
1239 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_VERSION_CHECK(15,12,0)&#32;||&#32;\</emphasis>
1240 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1241 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0)&#32;||&#32;\</emphasis>
1242 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1243 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0)&#32;||&#32;\</emphasis>
1244 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1245 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0)&#32;||&#32;\</emphasis>
1246 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1247 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0)&#32;||&#32;\</emphasis>
1248 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0)&#32;||&#32;\</emphasis>
1249 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0)&#32;||&#32;\</emphasis>
1250 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)&#32;||&#32;\</emphasis>
1251 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_IAR_VERSION_CHECK(8,10,0)</emphasis>
1252 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DEPRECATED(since)&#32;__attribute__((__deprecated__))</emphasis>
1253 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DEPRECATED_FOR(since,&#32;replacement)&#32;__attribute__((__deprecated__))</emphasis>
1254 <emphasis role="preprocessor">#elif&#32;\</emphasis>
1255 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_MSVC_VERSION_CHECK(13,10,0)&#32;||&#32;\</emphasis>
1256 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_PELLES_VERSION_CHECK(6,50,0)&#32;||&#32;\</emphasis>
1257 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)</emphasis>
1258 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DEPRECATED(since)&#32;__declspec(deprecated)</emphasis>
1259 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DEPRECATED_FOR(since,&#32;replacement)&#32;__declspec(deprecated)</emphasis>
1260 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)</emphasis>
1261 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DEPRECATED(since)&#32;_Pragma(&quot;deprecated&quot;)</emphasis>
1262 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DEPRECATED_FOR(since,&#32;replacement)&#32;_Pragma(&quot;deprecated&quot;)</emphasis>
1263 <emphasis role="preprocessor">#else</emphasis>
1264 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DEPRECATED(since)</emphasis>
1265 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_DEPRECATED_FOR(since,&#32;replacement)</emphasis>
1266 <emphasis role="preprocessor">#endif</emphasis>
1267 
1268 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_UNAVAILABLE)</emphasis>
1269 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_UNAVAILABLE</emphasis>
1270 <emphasis role="preprocessor">#endif</emphasis>
1271 <emphasis role="preprocessor">#if&#32;\</emphasis>
1272 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_HAS_ATTRIBUTE(warning)&#32;||&#32;\</emphasis>
1273 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_GCC_VERSION_CHECK(4,3,0)&#32;||&#32;\</emphasis>
1274 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)&#32;||&#32;\</emphasis>
1275 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)</emphasis>
1276 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_UNAVAILABLE(available_since)&#32;__attribute__((__warning__(&quot;Not&#32;available&#32;until&#32;&quot;&#32;#available_since)))</emphasis>
1277 <emphasis role="preprocessor">#else</emphasis>
1278 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_UNAVAILABLE(available_since)</emphasis>
1279 <emphasis role="preprocessor">#endif</emphasis>
1280 
1281 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_WARN_UNUSED_RESULT)</emphasis>
1282 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_WARN_UNUSED_RESULT</emphasis>
1283 <emphasis role="preprocessor">#endif</emphasis>
1284 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_WARN_UNUSED_RESULT_MSG)</emphasis>
1285 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_WARN_UNUSED_RESULT_MSG</emphasis>
1286 <emphasis role="preprocessor">#endif</emphasis>
1287 <emphasis role="preprocessor">#if&#32;\</emphasis>
1288 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_HAS_ATTRIBUTE(warn_unused_result)&#32;||&#32;\</emphasis>
1289 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_GCC_VERSION_CHECK(3,4,0)&#32;||&#32;\</emphasis>
1290 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)&#32;||&#32;\</emphasis>
1291 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_VERSION_CHECK(15,12,0)&#32;||&#32;\</emphasis>
1292 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1293 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0)&#32;||&#32;\</emphasis>
1294 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1295 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0)&#32;||&#32;\</emphasis>
1296 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1297 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0)&#32;||&#32;\</emphasis>
1298 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1299 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0)&#32;||&#32;\</emphasis>
1300 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0)&#32;||&#32;\</emphasis>
1301 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0)&#32;||&#32;\</emphasis>
1302 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,15,0)&#32;&amp;&amp;&#32;defined(__cplusplus))&#32;||&#32;\</emphasis>
1303 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0)&#32;||&#32;\</emphasis>
1304 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)</emphasis>
1305 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_WARN_UNUSED_RESULT&#32;__attribute__((__warn_unused_result__))</emphasis>
1306 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_WARN_UNUSED_RESULT_MSG(msg)&#32;__attribute__((__warn_unused_result__))</emphasis>
1307 <emphasis role="preprocessor">#elif&#32;(JSON_HEDLEY_HAS_CPP_ATTRIBUTE(nodiscard)&#32;&gt;=&#32;201907L)</emphasis>
1308 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_WARN_UNUSED_RESULT&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[nodiscard]])</emphasis>
1309 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_WARN_UNUSED_RESULT_MSG(msg)&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[nodiscard(msg)]])</emphasis>
1310 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_HAS_CPP_ATTRIBUTE(nodiscard)</emphasis>
1311 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_WARN_UNUSED_RESULT&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[nodiscard]])</emphasis>
1312 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_WARN_UNUSED_RESULT_MSG(msg)&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[nodiscard]])</emphasis>
1313 <emphasis role="preprocessor">#elif&#32;defined(_Check_return_)&#32;</emphasis><emphasis role="comment">/*&#32;SAL&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
1314 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_WARN_UNUSED_RESULT&#32;_Check_return_</emphasis>
1315 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_WARN_UNUSED_RESULT_MSG(msg)&#32;_Check_return_</emphasis>
1316 <emphasis role="preprocessor">#else</emphasis>
1317 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_WARN_UNUSED_RESULT</emphasis>
1318 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_WARN_UNUSED_RESULT_MSG(msg)</emphasis>
1319 <emphasis role="preprocessor">#endif</emphasis>
1320 
1321 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_SENTINEL)</emphasis>
1322 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_SENTINEL</emphasis>
1323 <emphasis role="preprocessor">#endif</emphasis>
1324 <emphasis role="preprocessor">#if&#32;\</emphasis>
1325 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_HAS_ATTRIBUTE(sentinel)&#32;||&#32;\</emphasis>
1326 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_GCC_VERSION_CHECK(4,0,0)&#32;||&#32;\</emphasis>
1327 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)&#32;||&#32;\</emphasis>
1328 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_ARM_VERSION_CHECK(5,4,0)&#32;||&#32;\</emphasis>
1329 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)</emphasis>
1330 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_SENTINEL(position)&#32;__attribute__((__sentinel__(position)))</emphasis>
1331 <emphasis role="preprocessor">#else</emphasis>
1332 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_SENTINEL(position)</emphasis>
1333 <emphasis role="preprocessor">#endif</emphasis>
1334 
1335 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_NO_RETURN)</emphasis>
1336 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_NO_RETURN</emphasis>
1337 <emphasis role="preprocessor">#endif</emphasis>
1338 <emphasis role="preprocessor">#if&#32;JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)</emphasis>
1339 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_NO_RETURN&#32;__noreturn</emphasis>
1340 <emphasis role="preprocessor">#elif&#32;\</emphasis>
1341 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)&#32;||&#32;\</emphasis>
1342 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)</emphasis>
1343 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_NO_RETURN&#32;__attribute__((__noreturn__))</emphasis>
1344 <emphasis role="preprocessor">#elif&#32;defined(__STDC_VERSION__)&#32;&amp;&amp;&#32;__STDC_VERSION__&#32;&gt;=&#32;201112L</emphasis>
1345 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_NO_RETURN&#32;_Noreturn</emphasis>
1346 <emphasis role="preprocessor">#elif&#32;defined(__cplusplus)&#32;&amp;&amp;&#32;(__cplusplus&#32;&gt;=&#32;201103L)</emphasis>
1347 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_NO_RETURN&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[noreturn]])</emphasis>
1348 <emphasis role="preprocessor">#elif&#32;\</emphasis>
1349 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_HAS_ATTRIBUTE(noreturn)&#32;||&#32;\</emphasis>
1350 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_GCC_VERSION_CHECK(3,2,0)&#32;||&#32;\</emphasis>
1351 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,11,0)&#32;||&#32;\</emphasis>
1352 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0)&#32;||&#32;\</emphasis>
1353 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0)&#32;||&#32;\</emphasis>
1354 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_VERSION_CHECK(15,12,0)&#32;||&#32;\</emphasis>
1355 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1356 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0)&#32;||&#32;\</emphasis>
1357 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1358 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0)&#32;||&#32;\</emphasis>
1359 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1360 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0)&#32;||&#32;\</emphasis>
1361 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1362 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0)&#32;||&#32;\</emphasis>
1363 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0)&#32;||&#32;\</emphasis>
1364 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0)&#32;||&#32;\</emphasis>
1365 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_IAR_VERSION_CHECK(8,10,0)</emphasis>
1366 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_NO_RETURN&#32;__attribute__((__noreturn__))</emphasis>
1367 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,10,0)</emphasis>
1368 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_NO_RETURN&#32;_Pragma(&quot;does_not_return&quot;)</emphasis>
1369 <emphasis role="preprocessor">#elif&#32;\</emphasis>
1370 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_MSVC_VERSION_CHECK(13,10,0)&#32;||&#32;\</emphasis>
1371 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)</emphasis>
1372 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_NO_RETURN&#32;__declspec(noreturn)</emphasis>
1373 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_TI_CL6X_VERSION_CHECK(6,0,0)&#32;&amp;&amp;&#32;defined(__cplusplus)</emphasis>
1374 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_NO_RETURN&#32;_Pragma(&quot;FUNC_NEVER_RETURNS;&quot;)</emphasis>
1375 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_COMPCERT_VERSION_CHECK(3,2,0)</emphasis>
1376 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_NO_RETURN&#32;__attribute((noreturn))</emphasis>
1377 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_PELLES_VERSION_CHECK(9,0,0)</emphasis>
1378 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_NO_RETURN&#32;__declspec(noreturn)</emphasis>
1379 <emphasis role="preprocessor">#else</emphasis>
1380 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_NO_RETURN</emphasis>
1381 <emphasis role="preprocessor">#endif</emphasis>
1382 
1383 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_NO_ESCAPE)</emphasis>
1384 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_NO_ESCAPE</emphasis>
1385 <emphasis role="preprocessor">#endif</emphasis>
1386 <emphasis role="preprocessor">#if&#32;JSON_HEDLEY_HAS_ATTRIBUTE(noescape)</emphasis>
1387 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_NO_ESCAPE&#32;__attribute__((__noescape__))</emphasis>
1388 <emphasis role="preprocessor">#else</emphasis>
1389 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_NO_ESCAPE</emphasis>
1390 <emphasis role="preprocessor">#endif</emphasis>
1391 
1392 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_UNREACHABLE)</emphasis>
1393 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_UNREACHABLE</emphasis>
1394 <emphasis role="preprocessor">#endif</emphasis>
1395 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_UNREACHABLE_RETURN)</emphasis>
1396 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_UNREACHABLE_RETURN</emphasis>
1397 <emphasis role="preprocessor">#endif</emphasis>
1398 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_ASSUME)</emphasis>
1399 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_ASSUME</emphasis>
1400 <emphasis role="preprocessor">#endif</emphasis>
1401 <emphasis role="preprocessor">#if&#32;\</emphasis>
1402 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_MSVC_VERSION_CHECK(13,10,0)&#32;||&#32;\</emphasis>
1403 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)&#32;||&#32;\</emphasis>
1404 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)</emphasis>
1405 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_ASSUME(expr)&#32;__assume(expr)</emphasis>
1406 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_HAS_BUILTIN(__builtin_assume)</emphasis>
1407 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_ASSUME(expr)&#32;__builtin_assume(expr)</emphasis>
1408 <emphasis role="preprocessor">#elif&#32;\</emphasis>
1409 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,2,0)&#32;||&#32;\</emphasis>
1410 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL6X_VERSION_CHECK(4,0,0)</emphasis>
1411 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#if&#32;defined(__cplusplus)</emphasis>
1412 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_ASSUME(expr)&#32;std::_nassert(expr)</emphasis>
1413 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#else</emphasis>
1414 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_ASSUME(expr)&#32;_nassert(expr)</emphasis>
1415 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
1416 <emphasis role="preprocessor">#endif</emphasis>
1417 <emphasis role="preprocessor">#if&#32;\</emphasis>
1418 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(JSON_HEDLEY_HAS_BUILTIN(__builtin_unreachable)&#32;&amp;&amp;&#32;(!defined(JSON_HEDLEY_ARM_VERSION)))&#32;||&#32;\</emphasis>
1419 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_GCC_VERSION_CHECK(4,5,0)&#32;||&#32;\</emphasis>
1420 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_PGI_VERSION_CHECK(18,10,0)&#32;||&#32;\</emphasis>
1421 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)&#32;||&#32;\</emphasis>
1422 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_IBM_VERSION_CHECK(13,1,5)&#32;||&#32;\</emphasis>
1423 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_CRAY_VERSION_CHECK(10,0,0)&#32;||&#32;\</emphasis>
1424 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)</emphasis>
1425 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_UNREACHABLE()&#32;__builtin_unreachable()</emphasis>
1426 <emphasis role="preprocessor">#elif&#32;defined(JSON_HEDLEY_ASSUME)</emphasis>
1427 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_UNREACHABLE()&#32;JSON_HEDLEY_ASSUME(0)</emphasis>
1428 <emphasis role="preprocessor">#endif</emphasis>
1429 <emphasis role="preprocessor">#if&#32;!defined(JSON_HEDLEY_ASSUME)</emphasis>
1430 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#if&#32;defined(JSON_HEDLEY_UNREACHABLE)</emphasis>
1431 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_ASSUME(expr)&#32;JSON_HEDLEY_STATIC_CAST(void,&#32;((expr)&#32;?&#32;1&#32;:&#32;(JSON_HEDLEY_UNREACHABLE(),&#32;1)))</emphasis>
1432 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#else</emphasis>
1433 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_ASSUME(expr)&#32;JSON_HEDLEY_STATIC_CAST(void,&#32;expr)</emphasis>
1434 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
1435 <emphasis role="preprocessor">#endif</emphasis>
1436 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_UNREACHABLE)</emphasis>
1437 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#if&#32;&#32;\</emphasis>
1438 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,2,0)&#32;||&#32;\</emphasis>
1439 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL6X_VERSION_CHECK(4,0,0)</emphasis>
1440 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_UNREACHABLE_RETURN(value)&#32;return&#32;(JSON_HEDLEY_STATIC_CAST(void,&#32;JSON_HEDLEY_ASSUME(0)),&#32;(value))</emphasis>
1441 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#else</emphasis>
1442 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_UNREACHABLE_RETURN(value)&#32;JSON_HEDLEY_UNREACHABLE()</emphasis>
1443 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
1444 <emphasis role="preprocessor">#else</emphasis>
1445 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_UNREACHABLE_RETURN(value)&#32;return&#32;(value)</emphasis>
1446 <emphasis role="preprocessor">#endif</emphasis>
1447 <emphasis role="preprocessor">#if&#32;!defined(JSON_HEDLEY_UNREACHABLE)</emphasis>
1448 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_UNREACHABLE()&#32;JSON_HEDLEY_ASSUME(0)</emphasis>
1449 <emphasis role="preprocessor">#endif</emphasis>
1450 
1451 <link linkend="_json_8hpp_1a1850f57fcda72becebc7033a2e10e77b">JSON_HEDLEY_DIAGNOSTIC_PUSH</link>
1452 <emphasis role="preprocessor">#if&#32;JSON_HEDLEY_HAS_WARNING(&quot;-Wpedantic&quot;)</emphasis>
1453 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#pragma&#32;clang&#32;diagnostic&#32;ignored&#32;&quot;-Wpedantic&quot;</emphasis>
1454 <emphasis role="preprocessor">#endif</emphasis>
1455 <emphasis role="preprocessor">#if&#32;JSON_HEDLEY_HAS_WARNING(&quot;-Wc++98-compat-pedantic&quot;)&#32;&amp;&amp;&#32;defined(__cplusplus)</emphasis>
1456 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#pragma&#32;clang&#32;diagnostic&#32;ignored&#32;&quot;-Wc++98-compat-pedantic&quot;</emphasis>
1457 <emphasis role="preprocessor">#endif</emphasis>
1458 <emphasis role="preprocessor">#if&#32;JSON_HEDLEY_GCC_HAS_WARNING(&quot;-Wvariadic-macros&quot;,4,0,0)</emphasis>
1459 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#if&#32;defined(__clang__)</emphasis>
1460 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#pragma&#32;clang&#32;diagnostic&#32;ignored&#32;&quot;-Wvariadic-macros&quot;</emphasis>
1461 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#elif&#32;defined(JSON_HEDLEY_GCC_VERSION)</emphasis>
1462 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wvariadic-macros&quot;</emphasis>
1463 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
1464 <emphasis role="preprocessor">#endif</emphasis>
1465 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_NON_NULL)</emphasis>
1466 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_NON_NULL</emphasis>
1467 <emphasis role="preprocessor">#endif</emphasis>
1468 <emphasis role="preprocessor">#if&#32;\</emphasis>
1469 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_HAS_ATTRIBUTE(nonnull)&#32;||&#32;\</emphasis>
1470 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_GCC_VERSION_CHECK(3,3,0)&#32;||&#32;\</emphasis>
1471 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)&#32;||&#32;\</emphasis>
1472 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0)</emphasis>
1473 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_NON_NULL(...)&#32;__attribute__((__nonnull__(__VA_ARGS__)))</emphasis>
1474 <emphasis role="preprocessor">#else</emphasis>
1475 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_NON_NULL(...)</emphasis>
1476 <emphasis role="preprocessor">#endif</emphasis>
1477 <link linkend="_json_8hpp_1aeedd50a52e1ea565ceab84bb596ec07f">JSON_HEDLEY_DIAGNOSTIC_POP</link>
1478 
1479 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_PRINTF_FORMAT)</emphasis>
1480 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_PRINTF_FORMAT</emphasis>
1481 <emphasis role="preprocessor">#endif</emphasis>
1482 <emphasis role="preprocessor">#if&#32;defined(__MINGW32__)&#32;&amp;&amp;&#32;JSON_HEDLEY_GCC_HAS_ATTRIBUTE(format,4,4,0)&#32;&amp;&amp;&#32;!defined(__USE_MINGW_ANSI_STDIO)</emphasis>
1483 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_PRINTF_FORMAT(string_idx,first_to_check)&#32;__attribute__((__format__(ms_printf,&#32;string_idx,&#32;first_to_check)))</emphasis>
1484 <emphasis role="preprocessor">#elif&#32;defined(__MINGW32__)&#32;&amp;&amp;&#32;JSON_HEDLEY_GCC_HAS_ATTRIBUTE(format,4,4,0)&#32;&amp;&amp;&#32;defined(__USE_MINGW_ANSI_STDIO)</emphasis>
1485 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_PRINTF_FORMAT(string_idx,first_to_check)&#32;__attribute__((__format__(gnu_printf,&#32;string_idx,&#32;first_to_check)))</emphasis>
1486 <emphasis role="preprocessor">#elif&#32;\</emphasis>
1487 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_HAS_ATTRIBUTE(format)&#32;||&#32;\</emphasis>
1488 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_GCC_VERSION_CHECK(3,1,0)&#32;||&#32;\</emphasis>
1489 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)&#32;||&#32;\</emphasis>
1490 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_ARM_VERSION_CHECK(5,6,0)&#32;||&#32;\</emphasis>
1491 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0)&#32;||&#32;\</emphasis>
1492 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_VERSION_CHECK(15,12,0)&#32;||&#32;\</emphasis>
1493 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1494 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0)&#32;||&#32;\</emphasis>
1495 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1496 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0)&#32;||&#32;\</emphasis>
1497 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1498 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0)&#32;||&#32;\</emphasis>
1499 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1500 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0)&#32;||&#32;\</emphasis>
1501 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0)&#32;||&#32;\</emphasis>
1502 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0)&#32;||&#32;\</emphasis>
1503 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)</emphasis>
1504 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_PRINTF_FORMAT(string_idx,first_to_check)&#32;__attribute__((__format__(__printf__,&#32;string_idx,&#32;first_to_check)))</emphasis>
1505 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_PELLES_VERSION_CHECK(6,0,0)</emphasis>
1506 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_PRINTF_FORMAT(string_idx,first_to_check)&#32;__declspec(vaformat(printf,string_idx,first_to_check))</emphasis>
1507 <emphasis role="preprocessor">#else</emphasis>
1508 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_PRINTF_FORMAT(string_idx,first_to_check)</emphasis>
1509 <emphasis role="preprocessor">#endif</emphasis>
1510 
1511 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_CONSTEXPR)</emphasis>
1512 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_CONSTEXPR</emphasis>
1513 <emphasis role="preprocessor">#endif</emphasis>
1514 <emphasis role="preprocessor">#if&#32;defined(__cplusplus)</emphasis>
1515 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1516 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_CONSTEXPR&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_(constexpr)</emphasis>
1517 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
1518 <emphasis role="preprocessor">#endif</emphasis>
1519 <emphasis role="preprocessor">#if&#32;!defined(JSON_HEDLEY_CONSTEXPR)</emphasis>
1520 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_CONSTEXPR</emphasis>
1521 <emphasis role="preprocessor">#endif</emphasis>
1522 
1523 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_PREDICT)</emphasis>
1524 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_PREDICT</emphasis>
1525 <emphasis role="preprocessor">#endif</emphasis>
1526 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_LIKELY)</emphasis>
1527 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_LIKELY</emphasis>
1528 <emphasis role="preprocessor">#endif</emphasis>
1529 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_UNLIKELY)</emphasis>
1530 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_UNLIKELY</emphasis>
1531 <emphasis role="preprocessor">#endif</emphasis>
1532 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_UNPREDICTABLE)</emphasis>
1533 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_UNPREDICTABLE</emphasis>
1534 <emphasis role="preprocessor">#endif</emphasis>
1535 <emphasis role="preprocessor">#if&#32;JSON_HEDLEY_HAS_BUILTIN(__builtin_unpredictable)</emphasis>
1536 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_UNPREDICTABLE(expr)&#32;__builtin_unpredictable((expr))</emphasis>
1537 <emphasis role="preprocessor">#endif</emphasis>
1538 <emphasis role="preprocessor">#if&#32;\</emphasis>
1539 <emphasis role="preprocessor">&#32;&#32;(JSON_HEDLEY_HAS_BUILTIN(__builtin_expect_with_probability)&#32;&amp;&amp;&#32;!defined(JSON_HEDLEY_PGI_VERSION))&#32;||&#32;\</emphasis>
1540 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_GCC_VERSION_CHECK(9,0,0)&#32;||&#32;\</emphasis>
1541 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)</emphasis>
1542 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_PREDICT(expr,&#32;value,&#32;probability)&#32;__builtin_expect_with_probability(&#32;&#32;(expr),&#32;(value),&#32;(probability))</emphasis>
1543 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_PREDICT_TRUE(expr,&#32;probability)&#32;&#32;&#32;__builtin_expect_with_probability(!!(expr),&#32;&#32;&#32;&#32;1&#32;&#32;&#32;,&#32;(probability))</emphasis>
1544 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_PREDICT_FALSE(expr,&#32;probability)&#32;&#32;__builtin_expect_with_probability(!!(expr),&#32;&#32;&#32;&#32;0&#32;&#32;&#32;,&#32;(probability))</emphasis>
1545 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_LIKELY(expr)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_expect&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(!!(expr),&#32;&#32;&#32;&#32;1&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)</emphasis>
1546 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_UNLIKELY(expr)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_expect&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(!!(expr),&#32;&#32;&#32;&#32;0&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)</emphasis>
1547 <emphasis role="preprocessor">#elif&#32;\</emphasis>
1548 <emphasis role="preprocessor">&#32;&#32;(JSON_HEDLEY_HAS_BUILTIN(__builtin_expect)&#32;&amp;&amp;&#32;!defined(JSON_HEDLEY_INTEL_CL_VERSION))&#32;||&#32;\</emphasis>
1549 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_GCC_VERSION_CHECK(3,0,0)&#32;||&#32;\</emphasis>
1550 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)&#32;||&#32;\</emphasis>
1551 <emphasis role="preprocessor">&#32;&#32;(JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,15,0)&#32;&amp;&amp;&#32;defined(__cplusplus))&#32;||&#32;\</emphasis>
1552 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0)&#32;||&#32;\</emphasis>
1553 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0)&#32;||&#32;\</emphasis>
1554 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_TI_VERSION_CHECK(15,12,0)&#32;||&#32;\</emphasis>
1555 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,7,0)&#32;||&#32;\</emphasis>
1556 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_TI_CL430_VERSION_CHECK(3,1,0)&#32;||&#32;\</emphasis>
1557 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,1,0)&#32;||&#32;\</emphasis>
1558 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_TI_CL6X_VERSION_CHECK(6,1,0)&#32;||&#32;\</emphasis>
1559 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0)&#32;||&#32;\</emphasis>
1560 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0)&#32;||&#32;\</emphasis>
1561 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_TINYC_VERSION_CHECK(0,9,27)&#32;||&#32;\</emphasis>
1562 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_CRAY_VERSION_CHECK(8,1,0)&#32;||&#32;\</emphasis>
1563 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)</emphasis>
1564 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_PREDICT(expr,&#32;expected,&#32;probability)&#32;\</emphasis>
1565 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(((probability)&#32;&gt;=&#32;0.9)&#32;?&#32;__builtin_expect((expr),&#32;(expected))&#32;:&#32;(JSON_HEDLEY_STATIC_CAST(void,&#32;expected),&#32;(expr)))</emphasis>
1566 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_PREDICT_TRUE(expr,&#32;probability)&#32;\</emphasis>
1567 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(__extension__&#32;({&#32;\</emphasis>
1568 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;double&#32;hedley_probability_&#32;=&#32;(probability);&#32;\</emphasis>
1569 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((hedley_probability_&#32;&gt;=&#32;0.9)&#32;?&#32;__builtin_expect(!!(expr),&#32;1)&#32;:&#32;((hedley_probability_&#32;&lt;=&#32;0.1)&#32;?&#32;__builtin_expect(!!(expr),&#32;0)&#32;:&#32;!!(expr)));&#32;\</emphasis>
1570 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}))</emphasis>
1571 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_PREDICT_FALSE(expr,&#32;probability)&#32;\</emphasis>
1572 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(__extension__&#32;({&#32;\</emphasis>
1573 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;double&#32;hedley_probability_&#32;=&#32;(probability);&#32;\</emphasis>
1574 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((hedley_probability_&#32;&gt;=&#32;0.9)&#32;?&#32;__builtin_expect(!!(expr),&#32;0)&#32;:&#32;((hedley_probability_&#32;&lt;=&#32;0.1)&#32;?&#32;__builtin_expect(!!(expr),&#32;1)&#32;:&#32;!!(expr)));&#32;\</emphasis>
1575 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}))</emphasis>
1576 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_LIKELY(expr)&#32;&#32;&#32;__builtin_expect(!!(expr),&#32;1)</emphasis>
1577 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_UNLIKELY(expr)&#32;__builtin_expect(!!(expr),&#32;0)</emphasis>
1578 <emphasis role="preprocessor">#else</emphasis>
1579 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_PREDICT(expr,&#32;expected,&#32;probability)&#32;(JSON_HEDLEY_STATIC_CAST(void,&#32;expected),&#32;(expr))</emphasis>
1580 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_PREDICT_TRUE(expr,&#32;probability)&#32;(!!(expr))</emphasis>
1581 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_PREDICT_FALSE(expr,&#32;probability)&#32;(!!(expr))</emphasis>
1582 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_LIKELY(expr)&#32;(!!(expr))</emphasis>
1583 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_UNLIKELY(expr)&#32;(!!(expr))</emphasis>
1584 <emphasis role="preprocessor">#endif</emphasis>
1585 <emphasis role="preprocessor">#if&#32;!defined(JSON_HEDLEY_UNPREDICTABLE)</emphasis>
1586 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_UNPREDICTABLE(expr)&#32;JSON_HEDLEY_PREDICT(expr,&#32;1,&#32;0.5)</emphasis>
1587 <emphasis role="preprocessor">#endif</emphasis>
1588 
1589 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_MALLOC)</emphasis>
1590 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_MALLOC</emphasis>
1591 <emphasis role="preprocessor">#endif</emphasis>
1592 <emphasis role="preprocessor">#if&#32;\</emphasis>
1593 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_HAS_ATTRIBUTE(malloc)&#32;||&#32;\</emphasis>
1594 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_GCC_VERSION_CHECK(3,1,0)&#32;||&#32;\</emphasis>
1595 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)&#32;||&#32;\</emphasis>
1596 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,11,0)&#32;||&#32;\</emphasis>
1597 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0)&#32;||&#32;\</emphasis>
1598 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_IBM_VERSION_CHECK(12,1,0)&#32;||&#32;\</emphasis>
1599 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_VERSION_CHECK(15,12,0)&#32;||&#32;\</emphasis>
1600 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1601 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0)&#32;||&#32;\</emphasis>
1602 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1603 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0)&#32;||&#32;\</emphasis>
1604 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1605 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0)&#32;||&#32;\</emphasis>
1606 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1607 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0)&#32;||&#32;\</emphasis>
1608 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0)&#32;||&#32;\</emphasis>
1609 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0)&#32;||&#32;\</emphasis>
1610 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)</emphasis>
1611 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_MALLOC&#32;__attribute__((__malloc__))</emphasis>
1612 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,10,0)</emphasis>
1613 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_MALLOC&#32;_Pragma(&quot;returns_new_memory&quot;)</emphasis>
1614 <emphasis role="preprocessor">#elif&#32;\</emphasis>
1615 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_MSVC_VERSION_CHECK(14,0,0)&#32;||&#32;\</emphasis>
1616 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)</emphasis>
1617 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_MALLOC&#32;__declspec(restrict)</emphasis>
1618 <emphasis role="preprocessor">#else</emphasis>
1619 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_MALLOC</emphasis>
1620 <emphasis role="preprocessor">#endif</emphasis>
1621 
1622 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_PURE)</emphasis>
1623 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_PURE</emphasis>
1624 <emphasis role="preprocessor">#endif</emphasis>
1625 <emphasis role="preprocessor">#if&#32;\</emphasis>
1626 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_HAS_ATTRIBUTE(pure)&#32;||&#32;\</emphasis>
1627 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_GCC_VERSION_CHECK(2,96,0)&#32;||&#32;\</emphasis>
1628 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)&#32;||&#32;\</emphasis>
1629 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,11,0)&#32;||&#32;\</emphasis>
1630 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0)&#32;||&#32;\</emphasis>
1631 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0)&#32;||&#32;\</emphasis>
1632 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_TI_VERSION_CHECK(15,12,0)&#32;||&#32;\</emphasis>
1633 <emphasis role="preprocessor">&#32;&#32;(JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1634 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0)&#32;||&#32;\</emphasis>
1635 <emphasis role="preprocessor">&#32;&#32;(JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1636 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0)&#32;||&#32;\</emphasis>
1637 <emphasis role="preprocessor">&#32;&#32;(JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1638 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0)&#32;||&#32;\</emphasis>
1639 <emphasis role="preprocessor">&#32;&#32;(JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1640 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0)&#32;||&#32;\</emphasis>
1641 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0)&#32;||&#32;\</emphasis>
1642 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0)&#32;||&#32;\</emphasis>
1643 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0)&#32;||&#32;\</emphasis>
1644 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)</emphasis>
1645 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_PURE&#32;__attribute__((__pure__))</emphasis>
1646 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,10,0)</emphasis>
1647 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_PURE&#32;_Pragma(&quot;does_not_write_global_data&quot;)</emphasis>
1648 <emphasis role="preprocessor">#elif&#32;defined(__cplusplus)&#32;&amp;&amp;&#32;\</emphasis>
1649 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(&#32;\</emphasis>
1650 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL430_VERSION_CHECK(2,0,1)&#32;||&#32;\</emphasis>
1651 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL6X_VERSION_CHECK(4,0,0)&#32;||&#32;\</emphasis>
1652 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0)&#32;\</emphasis>
1653 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;)</emphasis>
1654 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_PURE&#32;_Pragma(&quot;FUNC_IS_PURE;&quot;)</emphasis>
1655 <emphasis role="preprocessor">#else</emphasis>
1656 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_PURE</emphasis>
1657 <emphasis role="preprocessor">#endif</emphasis>
1658 
1659 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_CONST)</emphasis>
1660 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_CONST</emphasis>
1661 <emphasis role="preprocessor">#endif</emphasis>
1662 <emphasis role="preprocessor">#if&#32;\</emphasis>
1663 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_HAS_ATTRIBUTE(const)&#32;||&#32;\</emphasis>
1664 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_GCC_VERSION_CHECK(2,5,0)&#32;||&#32;\</emphasis>
1665 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)&#32;||&#32;\</emphasis>
1666 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,11,0)&#32;||&#32;\</emphasis>
1667 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0)&#32;||&#32;\</emphasis>
1668 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0)&#32;||&#32;\</emphasis>
1669 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_VERSION_CHECK(15,12,0)&#32;||&#32;\</emphasis>
1670 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1671 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0)&#32;||&#32;\</emphasis>
1672 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1673 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0)&#32;||&#32;\</emphasis>
1674 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1675 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0)&#32;||&#32;\</emphasis>
1676 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1677 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0)&#32;||&#32;\</emphasis>
1678 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0)&#32;||&#32;\</emphasis>
1679 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0)&#32;||&#32;\</emphasis>
1680 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0)&#32;||&#32;\</emphasis>
1681 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)</emphasis>
1682 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_CONST&#32;__attribute__((__const__))</emphasis>
1683 <emphasis role="preprocessor">#elif&#32;\</emphasis>
1684 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,10,0)</emphasis>
1685 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_CONST&#32;_Pragma(&quot;no_side_effect&quot;)</emphasis>
1686 <emphasis role="preprocessor">#else</emphasis>
1687 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_CONST&#32;JSON_HEDLEY_PURE</emphasis>
1688 <emphasis role="preprocessor">#endif</emphasis>
1689 
1690 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_RESTRICT)</emphasis>
1691 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_RESTRICT</emphasis>
1692 <emphasis role="preprocessor">#endif</emphasis>
1693 <emphasis role="preprocessor">#if&#32;defined(__STDC_VERSION__)&#32;&amp;&amp;&#32;(__STDC_VERSION__&#32;&gt;=&#32;199901L)&#32;&amp;&amp;&#32;!defined(__cplusplus)</emphasis>
1694 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_RESTRICT&#32;restrict</emphasis>
1695 <emphasis role="preprocessor">#elif&#32;\</emphasis>
1696 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_GCC_VERSION_CHECK(3,1,0)&#32;||&#32;\</emphasis>
1697 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_MSVC_VERSION_CHECK(14,0,0)&#32;||&#32;\</emphasis>
1698 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)&#32;||&#32;\</emphasis>
1699 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)&#32;||&#32;\</emphasis>
1700 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0)&#32;||&#32;\</emphasis>
1701 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0)&#32;||&#32;\</emphasis>
1702 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0)&#32;||&#32;\</emphasis>
1703 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0)&#32;||&#32;\</emphasis>
1704 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,2,4)&#32;||&#32;\</emphasis>
1705 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL6X_VERSION_CHECK(8,1,0)&#32;||&#32;\</emphasis>
1706 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0)&#32;||&#32;\</emphasis>
1707 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,14,0)&#32;&amp;&amp;&#32;defined(__cplusplus))&#32;||&#32;\</emphasis>
1708 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)&#32;||&#32;\</emphasis>
1709 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;defined(__clang__)&#32;||&#32;\</emphasis>
1710 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)</emphasis>
1711 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_RESTRICT&#32;__restrict</emphasis>
1712 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,3,0)&#32;&amp;&amp;&#32;!defined(__cplusplus)</emphasis>
1713 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_RESTRICT&#32;_Restrict</emphasis>
1714 <emphasis role="preprocessor">#else</emphasis>
1715 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_RESTRICT</emphasis>
1716 <emphasis role="preprocessor">#endif</emphasis>
1717 
1718 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_INLINE)</emphasis>
1719 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_INLINE</emphasis>
1720 <emphasis role="preprocessor">#endif</emphasis>
1721 <emphasis role="preprocessor">#if&#32;\</emphasis>
1722 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(defined(__STDC_VERSION__)&#32;&amp;&amp;&#32;(__STDC_VERSION__&#32;&gt;=&#32;199901L))&#32;||&#32;\</emphasis>
1723 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(defined(__cplusplus)&#32;&amp;&amp;&#32;(__cplusplus&#32;&gt;=&#32;199711L))</emphasis>
1724 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_INLINE&#32;inline</emphasis>
1725 <emphasis role="preprocessor">#elif&#32;\</emphasis>
1726 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;defined(JSON_HEDLEY_GCC_VERSION)&#32;||&#32;\</emphasis>
1727 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_ARM_VERSION_CHECK(6,2,0)</emphasis>
1728 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_INLINE&#32;__inline__</emphasis>
1729 <emphasis role="preprocessor">#elif&#32;\</emphasis>
1730 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_MSVC_VERSION_CHECK(12,0,0)&#32;||&#32;\</emphasis>
1731 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)&#32;||&#32;\</emphasis>
1732 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0)&#32;||&#32;\</emphasis>
1733 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,1,0)&#32;||&#32;\</emphasis>
1734 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL430_VERSION_CHECK(3,1,0)&#32;||&#32;\</emphasis>
1735 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,2,0)&#32;||&#32;\</emphasis>
1736 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL6X_VERSION_CHECK(8,0,0)&#32;||&#32;\</emphasis>
1737 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0)&#32;||&#32;\</emphasis>
1738 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0)&#32;||&#32;\</emphasis>
1739 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)</emphasis>
1740 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_INLINE&#32;__inline</emphasis>
1741 <emphasis role="preprocessor">#else</emphasis>
1742 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_INLINE</emphasis>
1743 <emphasis role="preprocessor">#endif</emphasis>
1744 
1745 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_ALWAYS_INLINE)</emphasis>
1746 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_ALWAYS_INLINE</emphasis>
1747 <emphasis role="preprocessor">#endif</emphasis>
1748 <emphasis role="preprocessor">#if&#32;\</emphasis>
1749 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_HAS_ATTRIBUTE(always_inline)&#32;||&#32;\</emphasis>
1750 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_GCC_VERSION_CHECK(4,0,0)&#32;||&#32;\</emphasis>
1751 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)&#32;||&#32;\</emphasis>
1752 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,11,0)&#32;||&#32;\</emphasis>
1753 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0)&#32;||&#32;\</emphasis>
1754 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0)&#32;||&#32;\</emphasis>
1755 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_TI_VERSION_CHECK(15,12,0)&#32;||&#32;\</emphasis>
1756 <emphasis role="preprocessor">&#32;&#32;(JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1757 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0)&#32;||&#32;\</emphasis>
1758 <emphasis role="preprocessor">&#32;&#32;(JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1759 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0)&#32;||&#32;\</emphasis>
1760 <emphasis role="preprocessor">&#32;&#32;(JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1761 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0)&#32;||&#32;\</emphasis>
1762 <emphasis role="preprocessor">&#32;&#32;(JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1763 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0)&#32;||&#32;\</emphasis>
1764 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0)&#32;||&#32;\</emphasis>
1765 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0)&#32;||&#32;\</emphasis>
1766 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)&#32;||&#32;\</emphasis>
1767 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_IAR_VERSION_CHECK(8,10,0)</emphasis>
1768 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_ALWAYS_INLINE&#32;__attribute__((__always_inline__))&#32;JSON_HEDLEY_INLINE</emphasis>
1769 <emphasis role="preprocessor">#elif&#32;\</emphasis>
1770 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_MSVC_VERSION_CHECK(12,0,0)&#32;||&#32;\</emphasis>
1771 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)</emphasis>
1772 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_ALWAYS_INLINE&#32;__forceinline</emphasis>
1773 <emphasis role="preprocessor">#elif&#32;defined(__cplusplus)&#32;&amp;&amp;&#32;\</emphasis>
1774 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(&#32;\</emphasis>
1775 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0)&#32;||&#32;\</emphasis>
1776 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0)&#32;||&#32;\</emphasis>
1777 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0)&#32;||&#32;\</emphasis>
1778 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL6X_VERSION_CHECK(6,1,0)&#32;||&#32;\</emphasis>
1779 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0)&#32;||&#32;\</emphasis>
1780 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0)&#32;\</emphasis>
1781 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;)</emphasis>
1782 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_ALWAYS_INLINE&#32;_Pragma(&quot;FUNC_ALWAYS_INLINE;&quot;)</emphasis>
1783 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)</emphasis>
1784 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_ALWAYS_INLINE&#32;_Pragma(&quot;inline=forced&quot;)</emphasis>
1785 <emphasis role="preprocessor">#else</emphasis>
1786 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_ALWAYS_INLINE&#32;JSON_HEDLEY_INLINE</emphasis>
1787 <emphasis role="preprocessor">#endif</emphasis>
1788 
1789 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_NEVER_INLINE)</emphasis>
1790 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_NEVER_INLINE</emphasis>
1791 <emphasis role="preprocessor">#endif</emphasis>
1792 <emphasis role="preprocessor">#if&#32;\</emphasis>
1793 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_HAS_ATTRIBUTE(noinline)&#32;||&#32;\</emphasis>
1794 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_GCC_VERSION_CHECK(4,0,0)&#32;||&#32;\</emphasis>
1795 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)&#32;||&#32;\</emphasis>
1796 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,11,0)&#32;||&#32;\</emphasis>
1797 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0)&#32;||&#32;\</emphasis>
1798 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0)&#32;||&#32;\</emphasis>
1799 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_VERSION_CHECK(15,12,0)&#32;||&#32;\</emphasis>
1800 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1801 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0)&#32;||&#32;\</emphasis>
1802 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1803 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0)&#32;||&#32;\</emphasis>
1804 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1805 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0)&#32;||&#32;\</emphasis>
1806 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1807 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0)&#32;||&#32;\</emphasis>
1808 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0)&#32;||&#32;\</emphasis>
1809 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0)&#32;||&#32;\</emphasis>
1810 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)&#32;||&#32;\</emphasis>
1811 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_IAR_VERSION_CHECK(8,10,0)</emphasis>
1812 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_NEVER_INLINE&#32;__attribute__((__noinline__))</emphasis>
1813 <emphasis role="preprocessor">#elif&#32;\</emphasis>
1814 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_MSVC_VERSION_CHECK(13,10,0)&#32;||&#32;\</emphasis>
1815 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)</emphasis>
1816 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_NEVER_INLINE&#32;__declspec(noinline)</emphasis>
1817 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_PGI_VERSION_CHECK(10,2,0)</emphasis>
1818 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_NEVER_INLINE&#32;_Pragma(&quot;noinline&quot;)</emphasis>
1819 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_TI_CL6X_VERSION_CHECK(6,0,0)&#32;&amp;&amp;&#32;defined(__cplusplus)</emphasis>
1820 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_NEVER_INLINE&#32;_Pragma(&quot;FUNC_CANNOT_INLINE;&quot;)</emphasis>
1821 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)</emphasis>
1822 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_NEVER_INLINE&#32;_Pragma(&quot;inline=never&quot;)</emphasis>
1823 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_COMPCERT_VERSION_CHECK(3,2,0)</emphasis>
1824 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_NEVER_INLINE&#32;__attribute((noinline))</emphasis>
1825 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_PELLES_VERSION_CHECK(9,0,0)</emphasis>
1826 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_NEVER_INLINE&#32;__declspec(noinline)</emphasis>
1827 <emphasis role="preprocessor">#else</emphasis>
1828 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_NEVER_INLINE</emphasis>
1829 <emphasis role="preprocessor">#endif</emphasis>
1830 
1831 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_PRIVATE)</emphasis>
1832 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_PRIVATE</emphasis>
1833 <emphasis role="preprocessor">#endif</emphasis>
1834 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_PUBLIC)</emphasis>
1835 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_PUBLIC</emphasis>
1836 <emphasis role="preprocessor">#endif</emphasis>
1837 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_IMPORT)</emphasis>
1838 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_IMPORT</emphasis>
1839 <emphasis role="preprocessor">#endif</emphasis>
1840 <emphasis role="preprocessor">#if&#32;defined(_WIN32)&#32;||&#32;defined(__CYGWIN__)</emphasis>
1841 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_PRIVATE</emphasis>
1842 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_PUBLIC&#32;&#32;&#32;__declspec(dllexport)</emphasis>
1843 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_IMPORT&#32;&#32;&#32;__declspec(dllimport)</emphasis>
1844 <emphasis role="preprocessor">#else</emphasis>
1845 <emphasis role="preprocessor">#&#32;&#32;if&#32;\</emphasis>
1846 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_HAS_ATTRIBUTE(visibility)&#32;||&#32;\</emphasis>
1847 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_GCC_VERSION_CHECK(3,3,0)&#32;||&#32;\</emphasis>
1848 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,11,0)&#32;||&#32;\</emphasis>
1849 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)&#32;||&#32;\</emphasis>
1850 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0)&#32;||&#32;\</emphasis>
1851 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_IBM_VERSION_CHECK(13,1,0)&#32;||&#32;\</emphasis>
1852 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(&#32;\</emphasis>
1853 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;defined(__TI_EABI__)&#32;&amp;&amp;&#32;\</emphasis>
1854 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;(&#32;\</emphasis>
1855 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0)&#32;&amp;&amp;&#32;defined(__TI_GNU_ATTRIBUTE_SUPPORT__))&#32;||&#32;\</emphasis>
1856 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0)&#32;\</emphasis>
1857 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;)&#32;\</emphasis>
1858 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;)&#32;||&#32;\</emphasis>
1859 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)</emphasis>
1860 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;JSON_HEDLEY_PRIVATE&#32;__attribute__((__visibility__(&quot;hidden&quot;)))</emphasis>
1861 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;JSON_HEDLEY_PUBLIC&#32;&#32;__attribute__((__visibility__(&quot;default&quot;)))</emphasis>
1862 <emphasis role="preprocessor">#&#32;&#32;else</emphasis>
1863 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;JSON_HEDLEY_PRIVATE</emphasis>
1864 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;JSON_HEDLEY_PUBLIC</emphasis>
1865 <emphasis role="preprocessor">#&#32;&#32;endif</emphasis>
1866 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_IMPORT&#32;&#32;&#32;&#32;extern</emphasis>
1867 <emphasis role="preprocessor">#endif</emphasis>
1868 
1869 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_NO_THROW)</emphasis>
1870 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_NO_THROW</emphasis>
1871 <emphasis role="preprocessor">#endif</emphasis>
1872 <emphasis role="preprocessor">#if&#32;\</emphasis>
1873 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_HAS_ATTRIBUTE(nothrow)&#32;||&#32;\</emphasis>
1874 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_GCC_VERSION_CHECK(3,3,0)&#32;||&#32;\</emphasis>
1875 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)&#32;||&#32;\</emphasis>
1876 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)</emphasis>
1877 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_NO_THROW&#32;__attribute__((__nothrow__))</emphasis>
1878 <emphasis role="preprocessor">#elif&#32;\</emphasis>
1879 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_MSVC_VERSION_CHECK(13,1,0)&#32;||&#32;\</emphasis>
1880 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)&#32;||&#32;\</emphasis>
1881 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0)</emphasis>
1882 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_NO_THROW&#32;__declspec(nothrow)</emphasis>
1883 <emphasis role="preprocessor">#else</emphasis>
1884 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_NO_THROW</emphasis>
1885 <emphasis role="preprocessor">#endif</emphasis>
1886 
1887 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_FALL_THROUGH)</emphasis>
1888 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_FALL_THROUGH</emphasis>
1889 <emphasis role="preprocessor">#endif</emphasis>
1890 <emphasis role="preprocessor">#if&#32;\</emphasis>
1891 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_HAS_ATTRIBUTE(fallthrough)&#32;||&#32;\</emphasis>
1892 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_GCC_VERSION_CHECK(7,0,0)&#32;||&#32;\</emphasis>
1893 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)</emphasis>
1894 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_FALL_THROUGH&#32;__attribute__((__fallthrough__))</emphasis>
1895 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_HAS_CPP_ATTRIBUTE_NS(clang,fallthrough)</emphasis>
1896 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_FALL_THROUGH&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[clang::fallthrough]])</emphasis>
1897 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_HAS_CPP_ATTRIBUTE(fallthrough)</emphasis>
1898 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_FALL_THROUGH&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[fallthrough]])</emphasis>
1899 <emphasis role="preprocessor">#elif&#32;defined(__fallthrough)&#32;</emphasis><emphasis role="comment">/*&#32;SAL&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
1900 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_FALL_THROUGH&#32;__fallthrough</emphasis>
1901 <emphasis role="preprocessor">#else</emphasis>
1902 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_FALL_THROUGH</emphasis>
1903 <emphasis role="preprocessor">#endif</emphasis>
1904 
1905 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_RETURNS_NON_NULL)</emphasis>
1906 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_RETURNS_NON_NULL</emphasis>
1907 <emphasis role="preprocessor">#endif</emphasis>
1908 <emphasis role="preprocessor">#if&#32;\</emphasis>
1909 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_HAS_ATTRIBUTE(returns_nonnull)&#32;||&#32;\</emphasis>
1910 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_GCC_VERSION_CHECK(4,9,0)&#32;||&#32;\</emphasis>
1911 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)</emphasis>
1912 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_RETURNS_NON_NULL&#32;__attribute__((__returns_nonnull__))</emphasis>
1913 <emphasis role="preprocessor">#elif&#32;defined(_Ret_notnull_)&#32;</emphasis><emphasis role="comment">/*&#32;SAL&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
1914 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_RETURNS_NON_NULL&#32;_Ret_notnull_</emphasis>
1915 <emphasis role="preprocessor">#else</emphasis>
1916 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_RETURNS_NON_NULL</emphasis>
1917 <emphasis role="preprocessor">#endif</emphasis>
1918 
1919 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_ARRAY_PARAM)</emphasis>
1920 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_ARRAY_PARAM</emphasis>
1921 <emphasis role="preprocessor">#endif</emphasis>
1922 <emphasis role="preprocessor">#if&#32;\</emphasis>
1923 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;defined(__STDC_VERSION__)&#32;&amp;&amp;&#32;(__STDC_VERSION__&#32;&gt;=&#32;199901L)&#32;&amp;&amp;&#32;\</emphasis>
1924 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;!defined(__STDC_NO_VLA__)&#32;&amp;&amp;&#32;\</emphasis>
1925 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;!defined(__cplusplus)&#32;&amp;&amp;&#32;\</emphasis>
1926 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;!defined(JSON_HEDLEY_PGI_VERSION)&#32;&amp;&amp;&#32;\</emphasis>
1927 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;!defined(JSON_HEDLEY_TINYC_VERSION)</emphasis>
1928 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_ARRAY_PARAM(name)&#32;(name)</emphasis>
1929 <emphasis role="preprocessor">#else</emphasis>
1930 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_ARRAY_PARAM(name)</emphasis>
1931 <emphasis role="preprocessor">#endif</emphasis>
1932 
1933 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_IS_CONSTANT)</emphasis>
1934 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_IS_CONSTANT</emphasis>
1935 <emphasis role="preprocessor">#endif</emphasis>
1936 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_REQUIRE_CONSTEXPR)</emphasis>
1937 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_REQUIRE_CONSTEXPR</emphasis>
1938 <emphasis role="preprocessor">#endif</emphasis>
1939 <emphasis role="comment">/*&#32;JSON_HEDLEY_IS_CONSTEXPR_&#32;is&#32;for</emphasis>
1940 <emphasis role="comment">&#32;&#32;&#32;HEDLEY&#32;INTERNAL&#32;USE&#32;ONLY.&#32;&#32;API&#32;subject&#32;to&#32;change&#32;without&#32;notice.&#32;*/</emphasis>
1941 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_IS_CONSTEXPR_)</emphasis>
1942 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_IS_CONSTEXPR_</emphasis>
1943 <emphasis role="preprocessor">#endif</emphasis>
1944 <emphasis role="preprocessor">#if&#32;\</emphasis>
1945 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_HAS_BUILTIN(__builtin_constant_p)&#32;||&#32;\</emphasis>
1946 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_GCC_VERSION_CHECK(3,4,0)&#32;||&#32;\</emphasis>
1947 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)&#32;||&#32;\</emphasis>
1948 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TINYC_VERSION_CHECK(0,9,19)&#32;||&#32;\</emphasis>
1949 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0)&#32;||&#32;\</emphasis>
1950 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_IBM_VERSION_CHECK(13,1,0)&#32;||&#32;\</emphasis>
1951 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL6X_VERSION_CHECK(6,1,0)&#32;||&#32;\</emphasis>
1952 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,10,0)&#32;&amp;&amp;&#32;!defined(__cplusplus))&#32;||&#32;\</emphasis>
1953 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_CRAY_VERSION_CHECK(8,1,0)&#32;||&#32;\</emphasis>
1954 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)</emphasis>
1955 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_IS_CONSTANT(expr)&#32;__builtin_constant_p(expr)</emphasis>
1956 <emphasis role="preprocessor">#endif</emphasis>
1957 <emphasis role="preprocessor">#if&#32;!defined(__cplusplus)</emphasis>
1958 <emphasis role="preprocessor">#&#32;&#32;if&#32;\</emphasis>
1959 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSON_HEDLEY_HAS_BUILTIN(__builtin_types_compatible_p)&#32;||&#32;\</emphasis>
1960 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSON_HEDLEY_GCC_VERSION_CHECK(3,4,0)&#32;||&#32;\</emphasis>
1961 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)&#32;||&#32;\</emphasis>
1962 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSON_HEDLEY_IBM_VERSION_CHECK(13,1,0)&#32;||&#32;\</emphasis>
1963 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSON_HEDLEY_CRAY_VERSION_CHECK(8,1,0)&#32;||&#32;\</emphasis>
1964 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSON_HEDLEY_ARM_VERSION_CHECK(5,4,0)&#32;||&#32;\</emphasis>
1965 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSON_HEDLEY_TINYC_VERSION_CHECK(0,9,24)</emphasis>
1966 <emphasis role="preprocessor">#if&#32;defined(__INTPTR_TYPE__)</emphasis>
1967 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_IS_CONSTEXPR_(expr)&#32;__builtin_types_compatible_p(__typeof__((1&#32;?&#32;(void*)&#32;((__INTPTR_TYPE__)&#32;((expr)&#32;*&#32;0))&#32;:&#32;(int*)&#32;0)),&#32;int*)</emphasis>
1968 <emphasis role="preprocessor">#else</emphasis>
1969 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;stdint.h&gt;</emphasis>
1970 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_IS_CONSTEXPR_(expr)&#32;__builtin_types_compatible_p(__typeof__((1&#32;?&#32;(void*)&#32;((intptr_t)&#32;((expr)&#32;*&#32;0))&#32;:&#32;(int*)&#32;0)),&#32;int*)</emphasis>
1971 <emphasis role="preprocessor">#endif</emphasis>
1972 <emphasis role="preprocessor">#&#32;&#32;elif&#32;\</emphasis>
1973 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;\</emphasis>
1974 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;defined(__STDC_VERSION__)&#32;&amp;&amp;&#32;(__STDC_VERSION__&#32;&gt;=&#32;201112L)&#32;&amp;&amp;&#32;\</emphasis>
1975 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!defined(JSON_HEDLEY_SUNPRO_VERSION)&#32;&amp;&amp;&#32;\</emphasis>
1976 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!defined(JSON_HEDLEY_PGI_VERSION)&#32;&amp;&amp;&#32;\</emphasis>
1977 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!defined(JSON_HEDLEY_IAR_VERSION))&#32;||&#32;\</emphasis>
1978 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;(JSON_HEDLEY_HAS_EXTENSION(c_generic_selections)&#32;&amp;&amp;&#32;!defined(JSON_HEDLEY_IAR_VERSION))&#32;||&#32;\</emphasis>
1979 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSON_HEDLEY_GCC_VERSION_CHECK(4,9,0)&#32;||&#32;\</emphasis>
1980 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSON_HEDLEY_INTEL_VERSION_CHECK(17,0,0)&#32;||&#32;\</emphasis>
1981 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSON_HEDLEY_IBM_VERSION_CHECK(12,1,0)&#32;||&#32;\</emphasis>
1982 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSON_HEDLEY_ARM_VERSION_CHECK(5,3,0)</emphasis>
1983 <emphasis role="preprocessor">#if&#32;defined(__INTPTR_TYPE__)</emphasis>
1984 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_IS_CONSTEXPR_(expr)&#32;_Generic((1&#32;?&#32;(void*)&#32;((__INTPTR_TYPE__)&#32;((expr)&#32;*&#32;0))&#32;:&#32;(int*)&#32;0),&#32;int*:&#32;1,&#32;void*:&#32;0)</emphasis>
1985 <emphasis role="preprocessor">#else</emphasis>
1986 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;stdint.h&gt;</emphasis>
1987 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_IS_CONSTEXPR_(expr)&#32;_Generic((1&#32;?&#32;(void*)&#32;((intptr_t)&#32;*&#32;0)&#32;:&#32;(int*)&#32;0),&#32;int*:&#32;1,&#32;void*:&#32;0)</emphasis>
1988 <emphasis role="preprocessor">#endif</emphasis>
1989 <emphasis role="preprocessor">#&#32;&#32;elif&#32;\</emphasis>
1990 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;defined(JSON_HEDLEY_GCC_VERSION)&#32;||&#32;\</emphasis>
1991 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;defined(JSON_HEDLEY_INTEL_VERSION)&#32;||&#32;\</emphasis>
1992 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;defined(JSON_HEDLEY_TINYC_VERSION)&#32;||&#32;\</emphasis>
1993 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;defined(JSON_HEDLEY_TI_ARMCL_VERSION)&#32;||&#32;\</emphasis>
1994 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSON_HEDLEY_TI_CL430_VERSION_CHECK(18,12,0)&#32;||&#32;\</emphasis>
1995 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;defined(JSON_HEDLEY_TI_CL2000_VERSION)&#32;||&#32;\</emphasis>
1996 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;defined(JSON_HEDLEY_TI_CL6X_VERSION)&#32;||&#32;\</emphasis>
1997 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;defined(JSON_HEDLEY_TI_CL7X_VERSION)&#32;||&#32;\</emphasis>
1998 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;defined(JSON_HEDLEY_TI_CLPRU_VERSION)&#32;||&#32;\</emphasis>
1999 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;defined(__clang__)</emphasis>
2000 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;JSON_HEDLEY_IS_CONSTEXPR_(expr)&#32;(&#32;\</emphasis>
2001 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sizeof(void)&#32;!=&#32;\</emphasis>
2002 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sizeof(*(&#32;\</emphasis>
2003 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1&#32;?&#32;\</emphasis>
2004 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((void*)&#32;((expr)&#32;*&#32;0L)&#32;)&#32;:&#32;\</emphasis>
2005 <emphasis role="preprocessor">((struct&#32;{&#32;char&#32;v[sizeof(void)&#32;*&#32;2];&#32;}&#32;*)&#32;1)&#32;\</emphasis>
2006 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;\</emphasis>
2007 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;\</emphasis>
2008 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)</emphasis>
2009 <emphasis role="preprocessor">#&#32;&#32;endif</emphasis>
2010 <emphasis role="preprocessor">#endif</emphasis>
2011 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_IS_CONSTEXPR_)</emphasis>
2012 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#if&#32;!defined(JSON_HEDLEY_IS_CONSTANT)</emphasis>
2013 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_IS_CONSTANT(expr)&#32;JSON_HEDLEY_IS_CONSTEXPR_(expr)</emphasis>
2014 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
2015 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_REQUIRE_CONSTEXPR(expr)&#32;(JSON_HEDLEY_IS_CONSTEXPR_(expr)&#32;?&#32;(expr)&#32;:&#32;(-1))</emphasis>
2016 <emphasis role="preprocessor">#else</emphasis>
2017 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#if&#32;!defined(JSON_HEDLEY_IS_CONSTANT)</emphasis>
2018 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_IS_CONSTANT(expr)&#32;(0)</emphasis>
2019 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
2020 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_REQUIRE_CONSTEXPR(expr)&#32;(expr)</emphasis>
2021 <emphasis role="preprocessor">#endif</emphasis>
2022 
2023 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_BEGIN_C_DECLS)</emphasis>
2024 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_BEGIN_C_DECLS</emphasis>
2025 <emphasis role="preprocessor">#endif</emphasis>
2026 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_END_C_DECLS)</emphasis>
2027 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_END_C_DECLS</emphasis>
2028 <emphasis role="preprocessor">#endif</emphasis>
2029 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_C_DECL)</emphasis>
2030 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_C_DECL</emphasis>
2031 <emphasis role="preprocessor">#endif</emphasis>
2032 <emphasis role="preprocessor">#if&#32;defined(__cplusplus)</emphasis>
2033 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_BEGIN_C_DECLS&#32;extern&#32;&quot;C&quot;&#32;{</emphasis>
2034 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_END_C_DECLS&#32;}</emphasis>
2035 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_C_DECL&#32;extern&#32;&quot;C&quot;</emphasis>
2036 <emphasis role="preprocessor">#else</emphasis>
2037 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_BEGIN_C_DECLS</emphasis>
2038 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_END_C_DECLS</emphasis>
2039 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_C_DECL</emphasis>
2040 <emphasis role="preprocessor">#endif</emphasis>
2041 
2042 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_STATIC_ASSERT)</emphasis>
2043 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_STATIC_ASSERT</emphasis>
2044 <emphasis role="preprocessor">#endif</emphasis>
2045 <emphasis role="preprocessor">#if&#32;\</emphasis>
2046 <emphasis role="preprocessor">&#32;&#32;!defined(__cplusplus)&#32;&amp;&amp;&#32;(&#32;\</emphasis>
2047 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;(defined(__STDC_VERSION__)&#32;&amp;&amp;&#32;(__STDC_VERSION__&#32;&gt;=&#32;201112L))&#32;||&#32;\</emphasis>
2048 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;(JSON_HEDLEY_HAS_FEATURE(c_static_assert)&#32;&amp;&amp;&#32;!defined(JSON_HEDLEY_INTEL_CL_VERSION))&#32;||&#32;\</emphasis>
2049 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;JSON_HEDLEY_GCC_VERSION_CHECK(6,0,0)&#32;||&#32;\</emphasis>
2050 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)&#32;||&#32;\</emphasis>
2051 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;defined(_Static_assert)&#32;\</emphasis>
2052 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;)</emphasis>
2053 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_STATIC_ASSERT(expr,&#32;message)&#32;_Static_assert(expr,&#32;message)</emphasis>
2054 <emphasis role="preprocessor">#elif&#32;\</emphasis>
2055 <emphasis role="preprocessor">&#32;&#32;(defined(__cplusplus)&#32;&amp;&amp;&#32;(__cplusplus&#32;&gt;=&#32;201103L))&#32;||&#32;\</emphasis>
2056 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_MSVC_VERSION_CHECK(16,0,0)&#32;||&#32;\</emphasis>
2057 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)</emphasis>
2058 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_STATIC_ASSERT(expr,&#32;message)&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_(static_assert(expr,&#32;message))</emphasis>
2059 <emphasis role="preprocessor">#else</emphasis>
2060 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_STATIC_ASSERT(expr,&#32;message)</emphasis>
2061 <emphasis role="preprocessor">#endif</emphasis>
2062 
2063 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_NULL)</emphasis>
2064 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_NULL</emphasis>
2065 <emphasis role="preprocessor">#endif</emphasis>
2066 <emphasis role="preprocessor">#if&#32;defined(__cplusplus)</emphasis>
2067 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
2068 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_NULL&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_(nullptr)</emphasis>
2069 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#elif&#32;defined(NULL)</emphasis>
2070 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_NULL&#32;NULL</emphasis>
2071 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#else</emphasis>
2072 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_NULL&#32;JSON_HEDLEY_STATIC_CAST(void*,&#32;0)</emphasis>
2073 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
2074 <emphasis role="preprocessor">#elif&#32;defined(NULL)</emphasis>
2075 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_NULL&#32;NULL</emphasis>
2076 <emphasis role="preprocessor">#else</emphasis>
2077 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_NULL&#32;((void*)&#32;0)</emphasis>
2078 <emphasis role="preprocessor">#endif</emphasis>
2079 
2080 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_MESSAGE)</emphasis>
2081 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_MESSAGE</emphasis>
2082 <emphasis role="preprocessor">#endif</emphasis>
2083 <emphasis role="preprocessor">#if&#32;JSON_HEDLEY_HAS_WARNING(&quot;-Wunknown-pragmas&quot;)</emphasis>
2084 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_MESSAGE(msg)&#32;\</emphasis>
2085 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_DIAGNOSTIC_PUSH&#32;\</emphasis>
2086 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS&#32;\</emphasis>
2087 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_PRAGMA(message&#32;msg)&#32;\</emphasis>
2088 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_DIAGNOSTIC_POP</emphasis>
2089 <emphasis role="preprocessor">#elif&#32;\</emphasis>
2090 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_GCC_VERSION_CHECK(4,4,0)&#32;||&#32;\</emphasis>
2091 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)</emphasis>
2092 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_MESSAGE(msg)&#32;JSON_HEDLEY_PRAGMA(message&#32;msg)</emphasis>
2093 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_CRAY_VERSION_CHECK(5,0,0)</emphasis>
2094 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_MESSAGE(msg)&#32;JSON_HEDLEY_PRAGMA(_CRI&#32;message&#32;msg)</emphasis>
2095 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)</emphasis>
2096 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_MESSAGE(msg)&#32;JSON_HEDLEY_PRAGMA(message(msg))</emphasis>
2097 <emphasis role="preprocessor">#elif&#32;JSON_HEDLEY_PELLES_VERSION_CHECK(2,0,0)</emphasis>
2098 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_MESSAGE(msg)&#32;JSON_HEDLEY_PRAGMA(message(msg))</emphasis>
2099 <emphasis role="preprocessor">#else</emphasis>
2100 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_MESSAGE(msg)</emphasis>
2101 <emphasis role="preprocessor">#endif</emphasis>
2102 
2103 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_WARNING)</emphasis>
2104 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_WARNING</emphasis>
2105 <emphasis role="preprocessor">#endif</emphasis>
2106 <emphasis role="preprocessor">#if&#32;JSON_HEDLEY_HAS_WARNING(&quot;-Wunknown-pragmas&quot;)</emphasis>
2107 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_WARNING(msg)&#32;\</emphasis>
2108 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_DIAGNOSTIC_PUSH&#32;\</emphasis>
2109 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS&#32;\</emphasis>
2110 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_PRAGMA(clang&#32;warning&#32;msg)&#32;\</emphasis>
2111 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_DIAGNOSTIC_POP</emphasis>
2112 <emphasis role="preprocessor">#elif&#32;\</emphasis>
2113 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_GCC_VERSION_CHECK(4,8,0)&#32;||&#32;\</emphasis>
2114 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_PGI_VERSION_CHECK(18,4,0)&#32;||&#32;\</emphasis>
2115 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)</emphasis>
2116 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_WARNING(msg)&#32;JSON_HEDLEY_PRAGMA(GCC&#32;warning&#32;msg)</emphasis>
2117 <emphasis role="preprocessor">#elif&#32;\</emphasis>
2118 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_MSVC_VERSION_CHECK(15,0,0)&#32;||&#32;\</emphasis>
2119 <emphasis role="preprocessor">&#32;&#32;JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)</emphasis>
2120 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_WARNING(msg)&#32;JSON_HEDLEY_PRAGMA(message(msg))</emphasis>
2121 <emphasis role="preprocessor">#else</emphasis>
2122 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_WARNING(msg)&#32;JSON_HEDLEY_MESSAGE(msg)</emphasis>
2123 <emphasis role="preprocessor">#endif</emphasis>
2124 
2125 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_REQUIRE)</emphasis>
2126 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_REQUIRE</emphasis>
2127 <emphasis role="preprocessor">#endif</emphasis>
2128 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_REQUIRE_MSG)</emphasis>
2129 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_REQUIRE_MSG</emphasis>
2130 <emphasis role="preprocessor">#endif</emphasis>
2131 <emphasis role="preprocessor">#if&#32;JSON_HEDLEY_HAS_ATTRIBUTE(diagnose_if)</emphasis>
2132 <emphasis role="preprocessor">#&#32;&#32;if&#32;JSON_HEDLEY_HAS_WARNING(&quot;-Wgcc-compat&quot;)</emphasis>
2133 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;JSON_HEDLEY_REQUIRE(expr)&#32;\</emphasis>
2134 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_DIAGNOSTIC_PUSH&#32;\</emphasis>
2135 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_Pragma(&quot;clang&#32;diagnostic&#32;ignored&#32;\&quot;-Wgcc-compat\&quot;&quot;)&#32;\</emphasis>
2136 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__attribute__((diagnose_if(!(expr),&#32;#expr,&#32;&quot;error&quot;)))&#32;\</emphasis>
2137 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_DIAGNOSTIC_POP</emphasis>
2138 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;JSON_HEDLEY_REQUIRE_MSG(expr,msg)&#32;\</emphasis>
2139 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_DIAGNOSTIC_PUSH&#32;\</emphasis>
2140 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_Pragma(&quot;clang&#32;diagnostic&#32;ignored&#32;\&quot;-Wgcc-compat\&quot;&quot;)&#32;\</emphasis>
2141 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__attribute__((diagnose_if(!(expr),&#32;msg,&#32;&quot;error&quot;)))&#32;\</emphasis>
2142 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_DIAGNOSTIC_POP</emphasis>
2143 <emphasis role="preprocessor">#&#32;&#32;else</emphasis>
2144 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;JSON_HEDLEY_REQUIRE(expr)&#32;__attribute__((diagnose_if(!(expr),&#32;#expr,&#32;&quot;error&quot;)))</emphasis>
2145 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;JSON_HEDLEY_REQUIRE_MSG(expr,msg)&#32;__attribute__((diagnose_if(!(expr),&#32;msg,&#32;&quot;error&quot;)))</emphasis>
2146 <emphasis role="preprocessor">#&#32;&#32;endif</emphasis>
2147 <emphasis role="preprocessor">#else</emphasis>
2148 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_REQUIRE(expr)</emphasis>
2149 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_REQUIRE_MSG(expr,msg)</emphasis>
2150 <emphasis role="preprocessor">#endif</emphasis>
2151 
2152 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_FLAGS)</emphasis>
2153 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_FLAGS</emphasis>
2154 <emphasis role="preprocessor">#endif</emphasis>
2155 <emphasis role="preprocessor">#if&#32;JSON_HEDLEY_HAS_ATTRIBUTE(flag_enum)&#32;&amp;&amp;&#32;(!defined(__cplusplus)&#32;||&#32;JSON_HEDLEY_HAS_WARNING(&quot;-Wbitfield-enum-conversion&quot;))</emphasis>
2156 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_FLAGS&#32;__attribute__((__flag_enum__))</emphasis>
2157 <emphasis role="preprocessor">#else</emphasis>
2158 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_FLAGS</emphasis>
2159 <emphasis role="preprocessor">#endif</emphasis>
2160 
2161 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_FLAGS_CAST)</emphasis>
2162 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_FLAGS_CAST</emphasis>
2163 <emphasis role="preprocessor">#endif</emphasis>
2164 <emphasis role="preprocessor">#if&#32;JSON_HEDLEY_INTEL_VERSION_CHECK(19,0,0)</emphasis>
2165 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_FLAGS_CAST(T,&#32;expr)&#32;(__extension__&#32;({&#32;\</emphasis>
2166 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSON_HEDLEY_DIAGNOSTIC_PUSH&#32;\</emphasis>
2167 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pragma(&quot;warning(disable:188)&quot;)&#32;\</emphasis>
2168 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((T)&#32;(expr));&#32;\</emphasis>
2169 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSON_HEDLEY_DIAGNOSTIC_POP&#32;\</emphasis>
2170 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}))</emphasis>
2171 <emphasis role="preprocessor">#else</emphasis>
2172 <emphasis role="preprocessor">#&#32;&#32;define&#32;JSON_HEDLEY_FLAGS_CAST(T,&#32;expr)&#32;JSON_HEDLEY_STATIC_CAST(T,&#32;expr)</emphasis>
2173 <emphasis role="preprocessor">#endif</emphasis>
2174 
2175 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_EMPTY_BASES)</emphasis>
2176 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_EMPTY_BASES</emphasis>
2177 <emphasis role="preprocessor">#endif</emphasis>
2178 <emphasis role="preprocessor">#if&#32;\</emphasis>
2179 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(JSON_HEDLEY_MSVC_VERSION_CHECK(19,0,23918)&#32;&amp;&amp;&#32;!JSON_HEDLEY_MSVC_VERSION_CHECK(20,0,0))&#32;||&#32;\</emphasis>
2180 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)</emphasis>
2181 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_EMPTY_BASES&#32;__declspec(empty_bases)</emphasis>
2182 <emphasis role="preprocessor">#else</emphasis>
2183 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_EMPTY_BASES</emphasis>
2184 <emphasis role="preprocessor">#endif</emphasis>
2185 
2186 <emphasis role="comment">/*&#32;Remaining&#32;macros&#32;are&#32;deprecated.&#32;*/</emphasis>
2187 
2188 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_GCC_NOT_CLANG_VERSION_CHECK)</emphasis>
2189 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_GCC_NOT_CLANG_VERSION_CHECK</emphasis>
2190 <emphasis role="preprocessor">#endif</emphasis>
2191 <emphasis role="preprocessor">#if&#32;defined(__clang__)</emphasis>
2192 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_GCC_NOT_CLANG_VERSION_CHECK(major,minor,patch)&#32;(0)</emphasis>
2193 <emphasis role="preprocessor">#else</emphasis>
2194 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HEDLEY_GCC_NOT_CLANG_VERSION_CHECK(major,minor,patch)&#32;JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)</emphasis>
2195 <emphasis role="preprocessor">#endif</emphasis>
2196 
2197 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_CLANG_HAS_ATTRIBUTE)</emphasis>
2198 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_CLANG_HAS_ATTRIBUTE</emphasis>
2199 <emphasis role="preprocessor">#endif</emphasis>
2200 <emphasis role="preprocessor">#define&#32;JSON_HEDLEY_CLANG_HAS_ATTRIBUTE(attribute)&#32;JSON_HEDLEY_HAS_ATTRIBUTE(attribute)</emphasis>
2201 
2202 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_CLANG_HAS_CPP_ATTRIBUTE)</emphasis>
2203 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_CLANG_HAS_CPP_ATTRIBUTE</emphasis>
2204 <emphasis role="preprocessor">#endif</emphasis>
2205 <emphasis role="preprocessor">#define&#32;JSON_HEDLEY_CLANG_HAS_CPP_ATTRIBUTE(attribute)&#32;JSON_HEDLEY_HAS_CPP_ATTRIBUTE(attribute)</emphasis>
2206 
2207 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_CLANG_HAS_BUILTIN)</emphasis>
2208 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_CLANG_HAS_BUILTIN</emphasis>
2209 <emphasis role="preprocessor">#endif</emphasis>
2210 <emphasis role="preprocessor">#define&#32;JSON_HEDLEY_CLANG_HAS_BUILTIN(builtin)&#32;JSON_HEDLEY_HAS_BUILTIN(builtin)</emphasis>
2211 
2212 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_CLANG_HAS_FEATURE)</emphasis>
2213 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_CLANG_HAS_FEATURE</emphasis>
2214 <emphasis role="preprocessor">#endif</emphasis>
2215 <emphasis role="preprocessor">#define&#32;JSON_HEDLEY_CLANG_HAS_FEATURE(feature)&#32;JSON_HEDLEY_HAS_FEATURE(feature)</emphasis>
2216 
2217 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_CLANG_HAS_EXTENSION)</emphasis>
2218 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_CLANG_HAS_EXTENSION</emphasis>
2219 <emphasis role="preprocessor">#endif</emphasis>
2220 <emphasis role="preprocessor">#define&#32;JSON_HEDLEY_CLANG_HAS_EXTENSION(extension)&#32;JSON_HEDLEY_HAS_EXTENSION(extension)</emphasis>
2221 
2222 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_CLANG_HAS_DECLSPEC_DECLSPEC_ATTRIBUTE)</emphasis>
2223 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_CLANG_HAS_DECLSPEC_DECLSPEC_ATTRIBUTE</emphasis>
2224 <emphasis role="preprocessor">#endif</emphasis>
2225 <emphasis role="preprocessor">#define&#32;JSON_HEDLEY_CLANG_HAS_DECLSPEC_ATTRIBUTE(attribute)&#32;JSON_HEDLEY_HAS_DECLSPEC_ATTRIBUTE(attribute)</emphasis>
2226 
2227 <emphasis role="preprocessor">#if&#32;defined(JSON_HEDLEY_CLANG_HAS_WARNING)</emphasis>
2228 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HEDLEY_CLANG_HAS_WARNING</emphasis>
2229 <emphasis role="preprocessor">#endif</emphasis>
2230 <emphasis role="preprocessor">#define&#32;JSON_HEDLEY_CLANG_HAS_WARNING(warning)&#32;JSON_HEDLEY_HAS_WARNING(warning)</emphasis>
2231 
2232 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;!defined(JSON_HEDLEY_VERSION)&#32;||&#32;(JSON_HEDLEY_VERSION&#32;&lt;&#32;X)&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
2233 
2234 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/meta/detected.hpp&gt;</emphasis>
2235 
2236 
2237 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>
2238 
2239 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/meta/void_t.hpp&gt;</emphasis>
2240 
2241 
2242 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann">nlohmann</link>
2243 {
2244 <emphasis role="keyword">namespace&#32;</emphasis>detail
2245 {
2246 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;...Ts&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1make__void">make_void</link>
2247 {
2248 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1make__void_1a8961e24ae3b2cb65ec47d1ce805d94e4">type</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>;
2249 };
2250 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;...Ts&gt;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1a92a167c49c6697b6ffe4f79492c705e5">void_t</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_structnlohmann_1_1detail_1_1make__void">make_void</link>&lt;Ts...&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
2251 }&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
2252 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann</emphasis>
2253 
2254 
2255 <emphasis role="comment">//&#32;https://en.cppreference.com/w/cpp/experimental/is_detected</emphasis>
2256 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann">nlohmann</link>
2257 {
2258 <emphasis role="keyword">namespace&#32;</emphasis>detail
2259 {
2260 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1nonesuch">nonesuch</link>
2261 {
2262 &#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1nonesuch_1a6fe87da966856c6cb06617940d90f010">nonesuch</link>()&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
2263 &#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1nonesuch_1a7b1119845860e548b67f1644a2084373">~nonesuch</link>()&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
2264 &#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1nonesuch_1a563462ef2d05fe60cdf1dc7f567dc276">nonesuch</link>(<link linkend="_structnlohmann_1_1detail_1_1nonesuch">nonesuch</link>&#32;<emphasis role="keyword">const</emphasis>&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
2265 &#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1nonesuch_1ad7719f7d2a00263be8b8d123870217d8">nonesuch</link>(<link linkend="_structnlohmann_1_1detail_1_1nonesuch">nonesuch</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
2266 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structnlohmann_1_1detail_1_1nonesuch_1add6ef84c52a851e391cef514c85f2ffe">operator=</link>(<link linkend="_structnlohmann_1_1detail_1_1nonesuch">nonesuch</link>&#32;<emphasis role="keyword">const</emphasis>&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
2267 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structnlohmann_1_1detail_1_1nonesuch_1a78ca022a1b4defe4f7ba662843602231">operator=</link>(<link linkend="_structnlohmann_1_1detail_1_1nonesuch">nonesuch</link>&amp;&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
2268 };
2269 
2270 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>Default,
2271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>AlwaysVoid,
2272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>...&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>Op,
2273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class</emphasis>...&#32;Args&gt;
2274 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1detector">detector</link>
2275 {
2276 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1detector_1a5a132aab543d1706e2439268faf8d487">value_t</link>&#32;=&#32;std::false_type;
2277 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1detector_1a0cd69423587748bf3d3d702cc7b7c2ce">type</link>&#32;=&#32;Default;
2278 };
2279 
2280 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>Default,&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>...&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>Op,&#32;<emphasis role="keyword">class</emphasis>...&#32;Args&gt;
2281 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1detector">detector</link>&lt;Default,&#32;<link linkend="_namespacenlohmann_1_1detail_1a92a167c49c6697b6ffe4f79492c705e5">void_t</link>&lt;Op&lt;Args...&gt;&gt;,&#32;Op,&#32;Args...&gt;
2282 {
2283 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1detector_3_01_default_00_01void__t_3_01_op_3_01_args_8_8_8_01_4_01_4_00_01_op_00_01_args_8_8_8_01_4_1ab748f9f00bb31bee4978a033589f8c85">value_t</link>&#32;=&#32;std::true_type;
2284 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1detector_3_01_default_00_01void__t_3_01_op_3_01_args_8_8_8_01_4_01_4_00_01_op_00_01_args_8_8_8_01_4_1a5afd6a40e94dde21d120ac646468c495">type</link>&#32;=&#32;Op&lt;Args...&gt;;
2285 };
2286 
2287 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>...&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>Op,&#32;<emphasis role="keyword">class</emphasis>...&#32;Args&gt;
2288 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1a9135fcf616d6ac6e231a86e0a055ac44">is_detected</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_structnlohmann_1_1detail_1_1detector">detector</link>&lt;<link linkend="_structnlohmann_1_1detail_1_1nonesuch">nonesuch</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>,&#32;Op,&#32;Args...&gt;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">::value_t</link>;
2289 
2290 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>...&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>Op,&#32;<emphasis role="keyword">class</emphasis>...&#32;Args&gt;
2291 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__detected__lazy">is_detected_lazy</link>&#32;:&#32;<link linkend="_namespacenlohmann_1_1detail_1a9135fcf616d6ac6e231a86e0a055ac44">is_detected</link>&lt;Op,&#32;Args...&gt;&#32;{&#32;};
2292 
2293 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>...&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>Op,&#32;<emphasis role="keyword">class</emphasis>...&#32;Args&gt;
2294 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1a37e97a32d0b94ce5f745427e4e40204d">detected_t</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_structnlohmann_1_1detail_1_1detector">detector</link>&lt;<link linkend="_structnlohmann_1_1detail_1_1nonesuch">nonesuch</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>,&#32;Op,&#32;Args...&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
2295 
2296 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>Default,&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>...&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>Op,&#32;<emphasis role="keyword">class</emphasis>...&#32;Args&gt;
2297 <emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1detector">detected_or</link>&#32;=&#32;<link linkend="_structnlohmann_1_1detail_1_1detector">detector</link>&lt;Default,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>,&#32;Op,&#32;Args...&gt;;
2298 
2299 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>Default,&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>...&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>Op,&#32;<emphasis role="keyword">class</emphasis>...&#32;Args&gt;
2300 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1a7ac5b8ef0363101275a2827b3b117dcf">detected_or_t</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_structnlohmann_1_1detail_1_1detector">detected_or</link>&lt;Default,&#32;Op,&#32;Args...&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
2301 
2302 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>Expected,&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>...&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>Op,&#32;<emphasis role="keyword">class</emphasis>...&#32;Args&gt;
2303 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1a7542b4dbac07817fd4849ecfa4619def">is_detected_exact</link>&#32;=&#32;std::is_same&lt;Expected,&#32;<link linkend="_namespacenlohmann_1_1detail_1a37e97a32d0b94ce5f745427e4e40204d">detected_t</link>&lt;Op,&#32;Args...&gt;&gt;;
2304 
2305 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>To,&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>...&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>Op,&#32;<emphasis role="keyword">class</emphasis>...&#32;Args&gt;
2306 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1a5262e531c46e357b33007060f294673b">is_detected_convertible</link>&#32;=
2307 &#32;&#32;&#32;&#32;std::is_convertible&lt;<link linkend="_namespacenlohmann_1_1detail_1a37e97a32d0b94ce5f745427e4e40204d">detected_t</link>&lt;Op,&#32;Args...&gt;,&#32;To&gt;;
2308 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
2309 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann</emphasis>
2310 
2311 
2312 <emphasis role="comment">//&#32;This&#32;file&#32;contains&#32;all&#32;internal&#32;macro&#32;definitions</emphasis>
2313 <emphasis role="comment">//&#32;You&#32;MUST&#32;include&#32;macro_unscope.hpp&#32;at&#32;the&#32;end&#32;of&#32;json.hpp&#32;to&#32;undef&#32;all&#32;of&#32;them</emphasis>
2314 
2315 <emphasis role="comment">//&#32;exclude&#32;unsupported&#32;compilers</emphasis>
2316 <emphasis role="preprocessor">#if&#32;!defined(JSON_SKIP_UNSUPPORTED_COMPILER_CHECK)</emphasis>
2317 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#if&#32;defined(__clang__)</emphasis>
2318 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#if&#32;(__clang_major__&#32;*&#32;10000&#32;+&#32;__clang_minor__&#32;*&#32;100&#32;+&#32;__clang_patchlevel__)&#32;&lt;&#32;30400</emphasis>
2319 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#error&#32;&quot;unsupported&#32;Clang&#32;version&#32;-&#32;see&#32;https://github.com/nlohmann/json#supported-compilers&quot;</emphasis>
2320 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
2321 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#elif&#32;defined(__GNUC__)&#32;&amp;&amp;&#32;!(defined(__ICC)&#32;||&#32;defined(__INTEL_COMPILER))</emphasis>
2322 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#if&#32;(__GNUC__&#32;*&#32;10000&#32;+&#32;__GNUC_MINOR__&#32;*&#32;100&#32;+&#32;__GNUC_PATCHLEVEL__)&#32;&lt;&#32;40800</emphasis>
2323 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#error&#32;&quot;unsupported&#32;GCC&#32;version&#32;-&#32;see&#32;https://github.com/nlohmann/json#supported-compilers&quot;</emphasis>
2324 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
2325 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
2326 <emphasis role="preprocessor">#endif</emphasis>
2327 
2328 <emphasis role="comment">//&#32;C++&#32;language&#32;standard&#32;detection</emphasis>
2329 <emphasis role="comment">//&#32;if&#32;the&#32;user&#32;manually&#32;specified&#32;the&#32;used&#32;c++&#32;version&#32;this&#32;is&#32;skipped</emphasis>
2330 <emphasis role="preprocessor">#if&#32;!defined(JSON_HAS_CPP_20)&#32;&amp;&amp;&#32;!defined(JSON_HAS_CPP_17)&#32;&amp;&amp;&#32;!defined(JSON_HAS_CPP_14)&#32;&amp;&amp;&#32;!defined(JSON_HAS_CPP_11)</emphasis>
2331 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#if&#32;(defined(__cplusplus)&#32;&amp;&amp;&#32;__cplusplus&#32;&gt;=&#32;202002L)&#32;||&#32;(defined(_MSVC_LANG)&#32;&amp;&amp;&#32;_MSVC_LANG&#32;&gt;=&#32;202002L)</emphasis>
2332 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;JSON_HAS_CPP_20</emphasis>
2333 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;JSON_HAS_CPP_17</emphasis>
2334 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;JSON_HAS_CPP_14</emphasis>
2335 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#elif&#32;(defined(__cplusplus)&#32;&amp;&amp;&#32;__cplusplus&#32;&gt;=&#32;201703L)&#32;||&#32;(defined(_HAS_CXX17)&#32;&amp;&amp;&#32;_HAS_CXX17&#32;==&#32;1)&#32;</emphasis><emphasis role="comment">//&#32;fix&#32;for&#32;issue&#32;#464</emphasis>
2336 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;JSON_HAS_CPP_17</emphasis>
2337 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;JSON_HAS_CPP_14</emphasis>
2338 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#elif&#32;(defined(__cplusplus)&#32;&amp;&amp;&#32;__cplusplus&#32;&gt;=&#32;201402L)&#32;||&#32;(defined(_HAS_CXX14)&#32;&amp;&amp;&#32;_HAS_CXX14&#32;==&#32;1)</emphasis>
2339 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;JSON_HAS_CPP_14</emphasis>
2340 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
2341 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;cpp&#32;11&#32;flag&#32;is&#32;always&#32;specified&#32;because&#32;it&#32;is&#32;the&#32;minimal&#32;required&#32;version</emphasis>
2342 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HAS_CPP_11</emphasis>
2343 <emphasis role="preprocessor">#endif</emphasis>
2344 
2345 <emphasis role="preprocessor">#if&#32;!defined(JSON_HAS_FILESYSTEM)&#32;&amp;&amp;&#32;!defined(JSON_HAS_EXPERIMENTAL_FILESYSTEM)</emphasis>
2346 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#ifdef&#32;JSON_HAS_CPP_17</emphasis>
2347 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#if&#32;defined(__cpp_lib_filesystem)</emphasis>
2348 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;JSON_HAS_FILESYSTEM&#32;1</emphasis>
2349 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#elif&#32;defined(__cpp_lib_experimental_filesystem)</emphasis>
2350 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;JSON_HAS_EXPERIMENTAL_FILESYSTEM&#32;1</emphasis>
2351 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#elif&#32;!defined(__has_include)</emphasis>
2352 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;JSON_HAS_EXPERIMENTAL_FILESYSTEM&#32;1</emphasis>
2353 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#elif&#32;__has_include(&lt;filesystem&gt;)</emphasis>
2354 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;JSON_HAS_FILESYSTEM&#32;1</emphasis>
2355 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#elif&#32;__has_include(&lt;experimental/filesystem&gt;)</emphasis>
2356 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;JSON_HAS_EXPERIMENTAL_FILESYSTEM&#32;1</emphasis>
2357 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
2358 
2359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::filesystem&#32;does&#32;not&#32;work&#32;on&#32;MinGW&#32;GCC&#32;8:&#32;https://sourceforge.net/p/mingw-w64/bugs/737/</emphasis>
2360 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#if&#32;defined(__MINGW32__)&#32;&amp;&amp;&#32;defined(__GNUC__)&#32;&amp;&amp;&#32;__GNUC__&#32;==&#32;8</emphasis>
2361 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#undef&#32;JSON_HAS_FILESYSTEM</emphasis>
2362 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#undef&#32;JSON_HAS_EXPERIMENTAL_FILESYSTEM</emphasis>
2363 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
2364 
2365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;no&#32;filesystem&#32;support&#32;before&#32;GCC&#32;8:&#32;https://en.cppreference.com/w/cpp/compiler_support</emphasis>
2366 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#if&#32;defined(__GNUC__)&#32;&amp;&amp;&#32;!defined(__clang__)&#32;&amp;&amp;&#32;__GNUC__&#32;&lt;&#32;8</emphasis>
2367 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#undef&#32;JSON_HAS_FILESYSTEM</emphasis>
2368 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#undef&#32;JSON_HAS_EXPERIMENTAL_FILESYSTEM</emphasis>
2369 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
2370 
2371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;no&#32;filesystem&#32;support&#32;before&#32;Clang&#32;7:&#32;https://en.cppreference.com/w/cpp/compiler_support</emphasis>
2372 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#if&#32;defined(__clang_major__)&#32;&amp;&amp;&#32;__clang_major__&#32;&lt;&#32;7</emphasis>
2373 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#undef&#32;JSON_HAS_FILESYSTEM</emphasis>
2374 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#undef&#32;JSON_HAS_EXPERIMENTAL_FILESYSTEM</emphasis>
2375 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
2376 
2377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;no&#32;filesystem&#32;support&#32;before&#32;MSVC&#32;19.14:&#32;https://en.cppreference.com/w/cpp/compiler_support</emphasis>
2378 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#if&#32;defined(_MSC_VER)&#32;&amp;&amp;&#32;_MSC_VER&#32;&lt;&#32;1914</emphasis>
2379 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#undef&#32;JSON_HAS_FILESYSTEM</emphasis>
2380 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#undef&#32;JSON_HAS_EXPERIMENTAL_FILESYSTEM</emphasis>
2381 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
2382 
2383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;no&#32;filesystem&#32;support&#32;before&#32;iOS&#32;13</emphasis>
2384 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#if&#32;defined(__IPHONE_OS_VERSION_MIN_REQUIRED)&#32;&amp;&amp;&#32;__IPHONE_OS_VERSION_MIN_REQUIRED&#32;&lt;&#32;130000</emphasis>
2385 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#undef&#32;JSON_HAS_FILESYSTEM</emphasis>
2386 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#undef&#32;JSON_HAS_EXPERIMENTAL_FILESYSTEM</emphasis>
2387 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
2388 
2389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;no&#32;filesystem&#32;support&#32;before&#32;macOS&#32;Catalina</emphasis>
2390 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#if&#32;defined(__MAC_OS_X_VERSION_MIN_REQUIRED)&#32;&amp;&amp;&#32;__MAC_OS_X_VERSION_MIN_REQUIRED&#32;&lt;&#32;101500</emphasis>
2391 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#undef&#32;JSON_HAS_FILESYSTEM</emphasis>
2392 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#undef&#32;JSON_HAS_EXPERIMENTAL_FILESYSTEM</emphasis>
2393 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
2394 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
2395 <emphasis role="preprocessor">#endif</emphasis>
2396 
2397 <emphasis role="preprocessor">#ifndef&#32;JSON_HAS_EXPERIMENTAL_FILESYSTEM</emphasis>
2398 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HAS_EXPERIMENTAL_FILESYSTEM&#32;0</emphasis>
2399 <emphasis role="preprocessor">#endif</emphasis>
2400 
2401 <emphasis role="preprocessor">#ifndef&#32;JSON_HAS_FILESYSTEM</emphasis>
2402 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_HAS_FILESYSTEM&#32;0</emphasis>
2403 <emphasis role="preprocessor">#endif</emphasis>
2404 
2405 <emphasis role="preprocessor">#ifndef&#32;JSON_HAS_THREE_WAY_COMPARISON</emphasis>
2406 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#if&#32;defined(__cpp_lib_three_way_comparison)&#32;&amp;&amp;&#32;__cpp_lib_three_way_comparison&#32;&gt;=&#32;201907L&#32;\</emphasis>
2407 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;defined(__cpp_impl_three_way_comparison)&amp;&amp;&#32;__cpp_impl_three_way_comparison&#32;&gt;=&#32;201907L</emphasis>
2408 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;JSON_HAS_THREE_WAY_COMPARISON&#32;1</emphasis>
2409 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#else</emphasis>
2410 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;JSON_HAS_THREE_WAY_COMPARISON&#32;0</emphasis>
2411 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
2412 <emphasis role="preprocessor">#endif</emphasis>
2413 
2414 <emphasis role="preprocessor">#if&#32;JSON_HEDLEY_HAS_ATTRIBUTE(no_unique_address)</emphasis>
2415 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_NO_UNIQUE_ADDRESS&#32;[[no_unique_address]]</emphasis>
2416 <emphasis role="preprocessor">#else</emphasis>
2417 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_NO_UNIQUE_ADDRESS</emphasis>
2418 <emphasis role="preprocessor">#endif</emphasis>
2419 
2420 <emphasis role="comment">//&#32;disable&#32;documentation&#32;warnings&#32;on&#32;clang</emphasis>
2421 <emphasis role="preprocessor">#if&#32;defined(__clang__)</emphasis>
2422 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#pragma&#32;clang&#32;diagnostic&#32;push</emphasis>
2423 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#pragma&#32;clang&#32;diagnostic&#32;ignored&#32;&quot;-Wdocumentation&quot;</emphasis>
2424 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#pragma&#32;clang&#32;diagnostic&#32;ignored&#32;&quot;-Wdocumentation-unknown-command&quot;</emphasis>
2425 <emphasis role="preprocessor">#endif</emphasis>
2426 
2427 <emphasis role="comment">//&#32;allow&#32;disabling&#32;exceptions</emphasis>
2428 <emphasis role="preprocessor">#if&#32;(defined(__cpp_exceptions)&#32;||&#32;defined(__EXCEPTIONS)&#32;||&#32;defined(_CPPUNWIND))&#32;&amp;&amp;&#32;!defined(JSON_NOEXCEPTION)</emphasis>
2429 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_THROW(exception)&#32;throw&#32;exception</emphasis>
2430 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_TRY&#32;try</emphasis>
2431 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_CATCH(exception)&#32;catch(exception)</emphasis>
2432 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_INTERNAL_CATCH(exception)&#32;catch(exception)</emphasis>
2433 <emphasis role="preprocessor">#else</emphasis>
2434 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;cstdlib&gt;</emphasis>
2435 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_THROW(exception)&#32;std::abort()</emphasis>
2436 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_TRY&#32;if(true)</emphasis>
2437 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_CATCH(exception)&#32;if(false)</emphasis>
2438 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_INTERNAL_CATCH(exception)&#32;if(false)</emphasis>
2439 <emphasis role="preprocessor">#endif</emphasis>
2440 
2441 <emphasis role="comment">//&#32;override&#32;exception&#32;macros</emphasis>
2442 <emphasis role="preprocessor">#if&#32;defined(JSON_THROW_USER)</emphasis>
2443 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_THROW</emphasis>
2444 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_THROW&#32;JSON_THROW_USER</emphasis>
2445 <emphasis role="preprocessor">#endif</emphasis>
2446 <emphasis role="preprocessor">#if&#32;defined(JSON_TRY_USER)</emphasis>
2447 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_TRY</emphasis>
2448 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_TRY&#32;JSON_TRY_USER</emphasis>
2449 <emphasis role="preprocessor">#endif</emphasis>
2450 <emphasis role="preprocessor">#if&#32;defined(JSON_CATCH_USER)</emphasis>
2451 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_CATCH</emphasis>
2452 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_CATCH&#32;JSON_CATCH_USER</emphasis>
2453 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_INTERNAL_CATCH</emphasis>
2454 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_INTERNAL_CATCH&#32;JSON_CATCH_USER</emphasis>
2455 <emphasis role="preprocessor">#endif</emphasis>
2456 <emphasis role="preprocessor">#if&#32;defined(JSON_INTERNAL_CATCH_USER)</emphasis>
2457 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_INTERNAL_CATCH</emphasis>
2458 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_INTERNAL_CATCH&#32;JSON_INTERNAL_CATCH_USER</emphasis>
2459 <emphasis role="preprocessor">#endif</emphasis>
2460 
2461 <emphasis role="comment">//&#32;allow&#32;overriding&#32;assert</emphasis>
2462 <emphasis role="preprocessor">#if&#32;!defined(JSON_ASSERT)</emphasis>
2463 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;cassert&gt;</emphasis>&#32;<emphasis role="comment">//&#32;assert</emphasis>
2464 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_ASSERT(x)&#32;assert(x)</emphasis>
2465 <emphasis role="preprocessor">#endif</emphasis>
2466 
2467 <emphasis role="comment">//&#32;allow&#32;to&#32;access&#32;some&#32;private&#32;functions&#32;(needed&#32;by&#32;the&#32;test&#32;suite)</emphasis>
2468 <emphasis role="preprocessor">#if&#32;defined(JSON_TESTS_PRIVATE)</emphasis>
2469 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_PRIVATE_UNLESS_TESTED&#32;public</emphasis>
2470 <emphasis role="preprocessor">#else</emphasis>
2471 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_PRIVATE_UNLESS_TESTED&#32;private</emphasis>
2472 <emphasis role="preprocessor">#endif</emphasis>
2473 
2479 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_SERIALIZE_ENUM(ENUM_TYPE,&#32;...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2480 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;typename&#32;BasicJsonType&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2481 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;inline&#32;void&#32;to_json(BasicJsonType&amp;&#32;j,&#32;const&#32;ENUM_TYPE&amp;&#32;e)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2482 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2483 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_assert(std::is_enum&lt;ENUM_TYPE&gt;::value,&#32;#ENUM_TYPE&#32;&quot;&#32;must&#32;be&#32;an&#32;enum!&quot;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2484 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static&#32;const&#32;std::pair&lt;ENUM_TYPE,&#32;BasicJsonType&gt;&#32;m[]&#32;=&#32;__VA_ARGS__;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2485 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;auto&#32;it&#32;=&#32;std::find_if(std::begin(m),&#32;std::end(m),&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2486 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[e](const&#32;std::pair&lt;ENUM_TYPE,&#32;BasicJsonType&gt;&amp;&#32;ej_pair)&#32;-&gt;&#32;bool&#32;&#32;\</emphasis>
2487 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2488 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;ej_pair.first&#32;==&#32;e;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2489 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2490 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j&#32;=&#32;((it&#32;!=&#32;std::end(m))&#32;?&#32;it&#32;:&#32;std::begin(m))-&gt;second;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2491 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2492 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;typename&#32;BasicJsonType&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2493 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;inline&#32;void&#32;from_json(const&#32;BasicJsonType&amp;&#32;j,&#32;ENUM_TYPE&amp;&#32;e)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2494 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2495 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_assert(std::is_enum&lt;ENUM_TYPE&gt;::value,&#32;#ENUM_TYPE&#32;&quot;&#32;must&#32;be&#32;an&#32;enum!&quot;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2496 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static&#32;const&#32;std::pair&lt;ENUM_TYPE,&#32;BasicJsonType&gt;&#32;m[]&#32;=&#32;__VA_ARGS__;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2497 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;auto&#32;it&#32;=&#32;std::find_if(std::begin(m),&#32;std::end(m),&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2498 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;j](const&#32;std::pair&lt;ENUM_TYPE,&#32;BasicJsonType&gt;&amp;&#32;ej_pair)&#32;-&gt;&#32;bool&#32;\</emphasis>
2499 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2500 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;ej_pair.second&#32;==&#32;j;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2501 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2502 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;e&#32;=&#32;((it&#32;!=&#32;std::end(m))&#32;?&#32;it&#32;:&#32;std::begin(m))-&gt;first;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2503 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}</emphasis>
2504 
2505 <emphasis role="comment">//&#32;Ugly&#32;macros&#32;to&#32;avoid&#32;uglier&#32;copy-paste&#32;when&#32;specializing&#32;basic_json.&#32;They</emphasis>
2506 <emphasis role="comment">//&#32;may&#32;be&#32;removed&#32;in&#32;the&#32;future&#32;once&#32;the&#32;class&#32;is&#32;split.</emphasis>
2507 
2508 <emphasis role="preprocessor">#define&#32;NLOHMANN_BASIC_JSON_TPL_DECLARATION&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2509 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;template&lt;typename,&#32;typename,&#32;typename...&gt;&#32;class&#32;ObjectType,&#32;&#32;&#32;\</emphasis>
2510 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;template&lt;typename,&#32;typename...&gt;&#32;class&#32;ArrayType,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2511 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;class&#32;StringType,&#32;class&#32;BooleanType,&#32;class&#32;NumberIntegerType,&#32;\</emphasis>
2512 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;class&#32;NumberUnsignedType,&#32;class&#32;NumberFloatType,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2513 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;template&lt;typename&gt;&#32;class&#32;AllocatorType,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2514 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;template&lt;typename,&#32;typename&#32;=&#32;void&gt;&#32;class&#32;JSONSerializer,&#32;&#32;&#32;&#32;&#32;\</emphasis>
2515 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;class&#32;BinaryType&gt;</emphasis>
2516 
2517 <emphasis role="preprocessor">#define&#32;NLOHMANN_BASIC_JSON_TPL&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2518 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;basic_json&lt;ObjectType,&#32;ArrayType,&#32;StringType,&#32;BooleanType,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2519 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;NumberIntegerType,&#32;NumberUnsignedType,&#32;NumberFloatType,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2520 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;AllocatorType,&#32;JSONSerializer,&#32;BinaryType&gt;</emphasis>
2521 
2522 <emphasis role="comment">//&#32;Macros&#32;to&#32;simplify&#32;conversion&#32;from/to&#32;types</emphasis>
2523 
2524 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_EXPAND(&#32;x&#32;)&#32;x</emphasis>
2525 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_GET_MACRO(_1,&#32;_2,&#32;_3,&#32;_4,&#32;_5,&#32;_6,&#32;_7,&#32;_8,&#32;_9,&#32;_10,&#32;_11,&#32;_12,&#32;_13,&#32;_14,&#32;_15,&#32;_16,&#32;_17,&#32;_18,&#32;_19,&#32;_20,&#32;_21,&#32;_22,&#32;_23,&#32;_24,&#32;_25,&#32;_26,&#32;_27,&#32;_28,&#32;_29,&#32;_30,&#32;_31,&#32;_32,&#32;_33,&#32;_34,&#32;_35,&#32;_36,&#32;_37,&#32;_38,&#32;_39,&#32;_40,&#32;_41,&#32;_42,&#32;_43,&#32;_44,&#32;_45,&#32;_46,&#32;_47,&#32;_48,&#32;_49,&#32;_50,&#32;_51,&#32;_52,&#32;_53,&#32;_54,&#32;_55,&#32;_56,&#32;_57,&#32;_58,&#32;_59,&#32;_60,&#32;_61,&#32;_62,&#32;_63,&#32;_64,&#32;NAME,...)&#32;NAME</emphasis>
2526 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE(...)&#32;NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_GET_MACRO(__VA_ARGS__,&#32;\</emphasis>
2527 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE64,&#32;\</emphasis>
2528 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE63,&#32;\</emphasis>
2529 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE62,&#32;\</emphasis>
2530 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE61,&#32;\</emphasis>
2531 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE60,&#32;\</emphasis>
2532 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE59,&#32;\</emphasis>
2533 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE58,&#32;\</emphasis>
2534 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE57,&#32;\</emphasis>
2535 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE56,&#32;\</emphasis>
2536 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE55,&#32;\</emphasis>
2537 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE54,&#32;\</emphasis>
2538 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE53,&#32;\</emphasis>
2539 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE52,&#32;\</emphasis>
2540 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE51,&#32;\</emphasis>
2541 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE50,&#32;\</emphasis>
2542 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE49,&#32;\</emphasis>
2543 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE48,&#32;\</emphasis>
2544 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE47,&#32;\</emphasis>
2545 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE46,&#32;\</emphasis>
2546 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE45,&#32;\</emphasis>
2547 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE44,&#32;\</emphasis>
2548 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE43,&#32;\</emphasis>
2549 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE42,&#32;\</emphasis>
2550 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE41,&#32;\</emphasis>
2551 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE40,&#32;\</emphasis>
2552 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE39,&#32;\</emphasis>
2553 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE38,&#32;\</emphasis>
2554 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE37,&#32;\</emphasis>
2555 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE36,&#32;\</emphasis>
2556 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE35,&#32;\</emphasis>
2557 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE34,&#32;\</emphasis>
2558 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE33,&#32;\</emphasis>
2559 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE32,&#32;\</emphasis>
2560 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE31,&#32;\</emphasis>
2561 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE30,&#32;\</emphasis>
2562 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE29,&#32;\</emphasis>
2563 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE28,&#32;\</emphasis>
2564 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE27,&#32;\</emphasis>
2565 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE26,&#32;\</emphasis>
2566 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE25,&#32;\</emphasis>
2567 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE24,&#32;\</emphasis>
2568 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE23,&#32;\</emphasis>
2569 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE22,&#32;\</emphasis>
2570 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE21,&#32;\</emphasis>
2571 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE20,&#32;\</emphasis>
2572 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE19,&#32;\</emphasis>
2573 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE18,&#32;\</emphasis>
2574 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE17,&#32;\</emphasis>
2575 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE16,&#32;\</emphasis>
2576 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE15,&#32;\</emphasis>
2577 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE14,&#32;\</emphasis>
2578 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE13,&#32;\</emphasis>
2579 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE12,&#32;\</emphasis>
2580 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE11,&#32;\</emphasis>
2581 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE10,&#32;\</emphasis>
2582 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE9,&#32;\</emphasis>
2583 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE8,&#32;\</emphasis>
2584 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE7,&#32;\</emphasis>
2585 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE6,&#32;\</emphasis>
2586 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE5,&#32;\</emphasis>
2587 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE4,&#32;\</emphasis>
2588 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE3,&#32;\</emphasis>
2589 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE2,&#32;\</emphasis>
2590 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NLOHMANN_JSON_PASTE1)(__VA_ARGS__))</emphasis>
2591 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;func(v1)</emphasis>
2592 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE3(func,&#32;v1,&#32;v2)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v2)</emphasis>
2593 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE4(func,&#32;v1,&#32;v2,&#32;v3)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE3(func,&#32;v2,&#32;v3)</emphasis>
2594 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE5(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE4(func,&#32;v2,&#32;v3,&#32;v4)</emphasis>
2595 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE6(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE5(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5)</emphasis>
2596 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE7(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE6(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6)</emphasis>
2597 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE8(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE7(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7)</emphasis>
2598 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE9(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE8(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8)</emphasis>
2599 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE10(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE9(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9)</emphasis>
2600 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE11(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE10(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10)</emphasis>
2601 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE12(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE11(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11)</emphasis>
2602 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE13(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE12(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12)</emphasis>
2603 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE14(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE13(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13)</emphasis>
2604 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE15(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE14(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14)</emphasis>
2605 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE16(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE15(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15)</emphasis>
2606 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE17(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE16(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16)</emphasis>
2607 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE18(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE17(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17)</emphasis>
2608 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE19(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE18(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18)</emphasis>
2609 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE20(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE19(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19)</emphasis>
2610 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE21(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE20(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20)</emphasis>
2611 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE22(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE21(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21)</emphasis>
2612 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE23(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE22(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22)</emphasis>
2613 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE24(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE23(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23)</emphasis>
2614 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE25(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE24(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24)</emphasis>
2615 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE26(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE25(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25)</emphasis>
2616 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE27(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE26(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26)</emphasis>
2617 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE28(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE27(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27)</emphasis>
2618 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE29(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE28(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28)</emphasis>
2619 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE30(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE29(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29)</emphasis>
2620 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE31(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE30(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30)</emphasis>
2621 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE32(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE31(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31)</emphasis>
2622 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE33(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE32(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32)</emphasis>
2623 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE34(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE33(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33)</emphasis>
2624 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE35(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE34(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34)</emphasis>
2625 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE36(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE35(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35)</emphasis>
2626 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE37(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE36(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36)</emphasis>
2627 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE38(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE37(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37)</emphasis>
2628 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE39(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE38(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38)</emphasis>
2629 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE40(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE39(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39)</emphasis>
2630 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE41(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE40(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40)</emphasis>
2631 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE42(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE41(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41)</emphasis>
2632 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE43(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE42(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42)</emphasis>
2633 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE44(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE43(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43)</emphasis>
2634 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE45(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE44(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44)</emphasis>
2635 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE46(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44,&#32;v45)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE45(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44,&#32;v45)</emphasis>
2636 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE47(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44,&#32;v45,&#32;v46)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE46(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44,&#32;v45,&#32;v46)</emphasis>
2637 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE48(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44,&#32;v45,&#32;v46,&#32;v47)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE47(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44,&#32;v45,&#32;v46,&#32;v47)</emphasis>
2638 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE49(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44,&#32;v45,&#32;v46,&#32;v47,&#32;v48)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE48(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44,&#32;v45,&#32;v46,&#32;v47,&#32;v48)</emphasis>
2639 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE50(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44,&#32;v45,&#32;v46,&#32;v47,&#32;v48,&#32;v49)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE49(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44,&#32;v45,&#32;v46,&#32;v47,&#32;v48,&#32;v49)</emphasis>
2640 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE51(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44,&#32;v45,&#32;v46,&#32;v47,&#32;v48,&#32;v49,&#32;v50)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE50(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44,&#32;v45,&#32;v46,&#32;v47,&#32;v48,&#32;v49,&#32;v50)</emphasis>
2641 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE52(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44,&#32;v45,&#32;v46,&#32;v47,&#32;v48,&#32;v49,&#32;v50,&#32;v51)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE51(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44,&#32;v45,&#32;v46,&#32;v47,&#32;v48,&#32;v49,&#32;v50,&#32;v51)</emphasis>
2642 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE53(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44,&#32;v45,&#32;v46,&#32;v47,&#32;v48,&#32;v49,&#32;v50,&#32;v51,&#32;v52)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE52(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44,&#32;v45,&#32;v46,&#32;v47,&#32;v48,&#32;v49,&#32;v50,&#32;v51,&#32;v52)</emphasis>
2643 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE54(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44,&#32;v45,&#32;v46,&#32;v47,&#32;v48,&#32;v49,&#32;v50,&#32;v51,&#32;v52,&#32;v53)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE53(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44,&#32;v45,&#32;v46,&#32;v47,&#32;v48,&#32;v49,&#32;v50,&#32;v51,&#32;v52,&#32;v53)</emphasis>
2644 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE55(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44,&#32;v45,&#32;v46,&#32;v47,&#32;v48,&#32;v49,&#32;v50,&#32;v51,&#32;v52,&#32;v53,&#32;v54)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE54(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44,&#32;v45,&#32;v46,&#32;v47,&#32;v48,&#32;v49,&#32;v50,&#32;v51,&#32;v52,&#32;v53,&#32;v54)</emphasis>
2645 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE56(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44,&#32;v45,&#32;v46,&#32;v47,&#32;v48,&#32;v49,&#32;v50,&#32;v51,&#32;v52,&#32;v53,&#32;v54,&#32;v55)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE55(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44,&#32;v45,&#32;v46,&#32;v47,&#32;v48,&#32;v49,&#32;v50,&#32;v51,&#32;v52,&#32;v53,&#32;v54,&#32;v55)</emphasis>
2646 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE57(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44,&#32;v45,&#32;v46,&#32;v47,&#32;v48,&#32;v49,&#32;v50,&#32;v51,&#32;v52,&#32;v53,&#32;v54,&#32;v55,&#32;v56)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE56(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44,&#32;v45,&#32;v46,&#32;v47,&#32;v48,&#32;v49,&#32;v50,&#32;v51,&#32;v52,&#32;v53,&#32;v54,&#32;v55,&#32;v56)</emphasis>
2647 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE58(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44,&#32;v45,&#32;v46,&#32;v47,&#32;v48,&#32;v49,&#32;v50,&#32;v51,&#32;v52,&#32;v53,&#32;v54,&#32;v55,&#32;v56,&#32;v57)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE57(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44,&#32;v45,&#32;v46,&#32;v47,&#32;v48,&#32;v49,&#32;v50,&#32;v51,&#32;v52,&#32;v53,&#32;v54,&#32;v55,&#32;v56,&#32;v57)</emphasis>
2648 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE59(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44,&#32;v45,&#32;v46,&#32;v47,&#32;v48,&#32;v49,&#32;v50,&#32;v51,&#32;v52,&#32;v53,&#32;v54,&#32;v55,&#32;v56,&#32;v57,&#32;v58)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE58(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44,&#32;v45,&#32;v46,&#32;v47,&#32;v48,&#32;v49,&#32;v50,&#32;v51,&#32;v52,&#32;v53,&#32;v54,&#32;v55,&#32;v56,&#32;v57,&#32;v58)</emphasis>
2649 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE60(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44,&#32;v45,&#32;v46,&#32;v47,&#32;v48,&#32;v49,&#32;v50,&#32;v51,&#32;v52,&#32;v53,&#32;v54,&#32;v55,&#32;v56,&#32;v57,&#32;v58,&#32;v59)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE59(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44,&#32;v45,&#32;v46,&#32;v47,&#32;v48,&#32;v49,&#32;v50,&#32;v51,&#32;v52,&#32;v53,&#32;v54,&#32;v55,&#32;v56,&#32;v57,&#32;v58,&#32;v59)</emphasis>
2650 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE61(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44,&#32;v45,&#32;v46,&#32;v47,&#32;v48,&#32;v49,&#32;v50,&#32;v51,&#32;v52,&#32;v53,&#32;v54,&#32;v55,&#32;v56,&#32;v57,&#32;v58,&#32;v59,&#32;v60)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE60(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44,&#32;v45,&#32;v46,&#32;v47,&#32;v48,&#32;v49,&#32;v50,&#32;v51,&#32;v52,&#32;v53,&#32;v54,&#32;v55,&#32;v56,&#32;v57,&#32;v58,&#32;v59,&#32;v60)</emphasis>
2651 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE62(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44,&#32;v45,&#32;v46,&#32;v47,&#32;v48,&#32;v49,&#32;v50,&#32;v51,&#32;v52,&#32;v53,&#32;v54,&#32;v55,&#32;v56,&#32;v57,&#32;v58,&#32;v59,&#32;v60,&#32;v61)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE61(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44,&#32;v45,&#32;v46,&#32;v47,&#32;v48,&#32;v49,&#32;v50,&#32;v51,&#32;v52,&#32;v53,&#32;v54,&#32;v55,&#32;v56,&#32;v57,&#32;v58,&#32;v59,&#32;v60,&#32;v61)</emphasis>
2652 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE63(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44,&#32;v45,&#32;v46,&#32;v47,&#32;v48,&#32;v49,&#32;v50,&#32;v51,&#32;v52,&#32;v53,&#32;v54,&#32;v55,&#32;v56,&#32;v57,&#32;v58,&#32;v59,&#32;v60,&#32;v61,&#32;v62)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE62(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44,&#32;v45,&#32;v46,&#32;v47,&#32;v48,&#32;v49,&#32;v50,&#32;v51,&#32;v52,&#32;v53,&#32;v54,&#32;v55,&#32;v56,&#32;v57,&#32;v58,&#32;v59,&#32;v60,&#32;v61,&#32;v62)</emphasis>
2653 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_PASTE64(func,&#32;v1,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44,&#32;v45,&#32;v46,&#32;v47,&#32;v48,&#32;v49,&#32;v50,&#32;v51,&#32;v52,&#32;v53,&#32;v54,&#32;v55,&#32;v56,&#32;v57,&#32;v58,&#32;v59,&#32;v60,&#32;v61,&#32;v62,&#32;v63)&#32;NLOHMANN_JSON_PASTE2(func,&#32;v1)&#32;NLOHMANN_JSON_PASTE63(func,&#32;v2,&#32;v3,&#32;v4,&#32;v5,&#32;v6,&#32;v7,&#32;v8,&#32;v9,&#32;v10,&#32;v11,&#32;v12,&#32;v13,&#32;v14,&#32;v15,&#32;v16,&#32;v17,&#32;v18,&#32;v19,&#32;v20,&#32;v21,&#32;v22,&#32;v23,&#32;v24,&#32;v25,&#32;v26,&#32;v27,&#32;v28,&#32;v29,&#32;v30,&#32;v31,&#32;v32,&#32;v33,&#32;v34,&#32;v35,&#32;v36,&#32;v37,&#32;v38,&#32;v39,&#32;v40,&#32;v41,&#32;v42,&#32;v43,&#32;v44,&#32;v45,&#32;v46,&#32;v47,&#32;v48,&#32;v49,&#32;v50,&#32;v51,&#32;v52,&#32;v53,&#32;v54,&#32;v55,&#32;v56,&#32;v57,&#32;v58,&#32;v59,&#32;v60,&#32;v61,&#32;v62,&#32;v63)</emphasis>
2654 
2655 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_TO(v1)&#32;nlohmann_json_j[#v1]&#32;=&#32;nlohmann_json_t.v1;</emphasis>
2656 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_FROM(v1)&#32;nlohmann_json_j.at(#v1).get_to(nlohmann_json_t.v1);</emphasis>
2657 <emphasis role="preprocessor">#define&#32;NLOHMANN_JSON_FROM_WITH_DEFAULT(v1)&#32;nlohmann_json_t.v1&#32;=&#32;nlohmann_json_j.value(#v1,&#32;nlohmann_json_default_obj.v1);</emphasis>
2658 
2664 <emphasis role="preprocessor">#define&#32;NLOHMANN_DEFINE_TYPE_INTRUSIVE(Type,&#32;...)&#32;&#32;\</emphasis>
2665 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;friend&#32;void&#32;to_json(nlohmann::json&amp;&#32;nlohmann_json_j,&#32;const&#32;Type&amp;&#32;nlohmann_json_t)&#32;{&#32;NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_PASTE(NLOHMANN_JSON_TO,&#32;__VA_ARGS__))&#32;}&#32;\</emphasis>
2666 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;friend&#32;void&#32;from_json(const&#32;nlohmann::json&amp;&#32;nlohmann_json_j,&#32;Type&amp;&#32;nlohmann_json_t)&#32;{&#32;NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_PASTE(NLOHMANN_JSON_FROM,&#32;__VA_ARGS__))&#32;}</emphasis>
2667 
2668 <emphasis role="preprocessor">#define&#32;NLOHMANN_DEFINE_TYPE_INTRUSIVE_WITH_DEFAULT(Type,&#32;...)&#32;&#32;\</emphasis>
2669 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;friend&#32;void&#32;to_json(nlohmann::json&amp;&#32;nlohmann_json_j,&#32;const&#32;Type&amp;&#32;nlohmann_json_t)&#32;{&#32;NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_PASTE(NLOHMANN_JSON_TO,&#32;__VA_ARGS__))&#32;}&#32;\</emphasis>
2670 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;friend&#32;void&#32;from_json(const&#32;nlohmann::json&amp;&#32;nlohmann_json_j,&#32;Type&amp;&#32;nlohmann_json_t)&#32;{&#32;Type&#32;nlohmann_json_default_obj;&#32;NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_PASTE(NLOHMANN_JSON_FROM_WITH_DEFAULT,&#32;__VA_ARGS__))&#32;}</emphasis>
2671 
2677 <emphasis role="preprocessor">#define&#32;NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE(Type,&#32;...)&#32;&#32;\</emphasis>
2678 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;inline&#32;void&#32;to_json(nlohmann::json&amp;&#32;nlohmann_json_j,&#32;const&#32;Type&amp;&#32;nlohmann_json_t)&#32;{&#32;NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_PASTE(NLOHMANN_JSON_TO,&#32;__VA_ARGS__))&#32;}&#32;\</emphasis>
2679 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;inline&#32;void&#32;from_json(const&#32;nlohmann::json&amp;&#32;nlohmann_json_j,&#32;Type&amp;&#32;nlohmann_json_t)&#32;{&#32;NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_PASTE(NLOHMANN_JSON_FROM,&#32;__VA_ARGS__))&#32;}</emphasis>
2680 
2681 <emphasis role="preprocessor">#define&#32;NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE_WITH_DEFAULT(Type,&#32;...)&#32;&#32;\</emphasis>
2682 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;inline&#32;void&#32;to_json(nlohmann::json&amp;&#32;nlohmann_json_j,&#32;const&#32;Type&amp;&#32;nlohmann_json_t)&#32;{&#32;NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_PASTE(NLOHMANN_JSON_TO,&#32;__VA_ARGS__))&#32;}&#32;\</emphasis>
2683 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;inline&#32;void&#32;from_json(const&#32;nlohmann::json&amp;&#32;nlohmann_json_j,&#32;Type&amp;&#32;nlohmann_json_t)&#32;{&#32;Type&#32;nlohmann_json_default_obj;&#32;NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_PASTE(NLOHMANN_JSON_FROM_WITH_DEFAULT,&#32;__VA_ARGS__))&#32;}</emphasis>
2684 
2685 
2686 <emphasis role="comment">//&#32;inspired&#32;from&#32;https://stackoverflow.com/a/26745591</emphasis>
2687 <emphasis role="comment">//&#32;allows&#32;to&#32;call&#32;any&#32;std&#32;function&#32;as&#32;if&#32;(e.g.&#32;with&#32;begin):</emphasis>
2688 <emphasis role="comment">//&#32;using&#32;std::begin;&#32;begin(x);</emphasis>
2689 <emphasis role="comment">//</emphasis>
2690 <emphasis role="comment">//&#32;it&#32;allows&#32;using&#32;the&#32;detected&#32;idiom&#32;to&#32;retrieve&#32;the&#32;return&#32;type</emphasis>
2691 <emphasis role="comment">//&#32;of&#32;such&#32;an&#32;expression</emphasis>
2692 <emphasis role="preprocessor">#define&#32;NLOHMANN_CAN_CALL_STD_FUNC_IMPL(std_name)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2693 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;namespace&#32;detail&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2694 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;using&#32;std::std_name;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2695 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;\</emphasis>
2696 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;typename...&#32;T&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2697 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;using&#32;result_of_##std_name&#32;=&#32;decltype(std_name(std::declval&lt;T&gt;()...));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2698 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2699 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;\</emphasis>
2700 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;namespace&#32;detail2&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2701 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;struct&#32;std_name##_tag&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2702 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2703 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;};&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2704 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;\</emphasis>
2705 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;typename...&#32;T&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2706 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;std_name##_tag&#32;std_name(T&amp;&amp;...);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2707 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;\</emphasis>
2708 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;typename...&#32;T&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2709 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;using&#32;result_of_##std_name&#32;=&#32;decltype(std_name(std::declval&lt;T&gt;()...));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2710 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;\</emphasis>
2711 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;typename...&#32;T&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2712 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;struct&#32;would_call_std_##std_name&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2713 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2714 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static&#32;constexpr&#32;auto&#32;const&#32;value&#32;=&#32;::nlohmann::detail::&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2715 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_detected_exact&lt;std_name##_tag,&#32;result_of_##std_name,&#32;T...&gt;::value;&#32;\</emphasis>
2716 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;};&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2717 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;</emphasis><emphasis role="comment">/*&#32;namespace&#32;detail2&#32;*/</emphasis><emphasis role="preprocessor">&#32;\</emphasis>
2718 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;\</emphasis>
2719 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;typename...&#32;T&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2720 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;struct&#32;would_call_std_##std_name&#32;:&#32;detail2::would_call_std_##std_name&lt;T...&gt;&#32;&#32;&#32;\</emphasis>
2721 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2722 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}</emphasis>
2723 
2724 <emphasis role="preprocessor">#ifndef&#32;JSON_USE_IMPLICIT_CONVERSIONS</emphasis>
2725 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_USE_IMPLICIT_CONVERSIONS&#32;1</emphasis>
2726 <emphasis role="preprocessor">#endif</emphasis>
2727 
2728 <emphasis role="preprocessor">#if&#32;JSON_USE_IMPLICIT_CONVERSIONS</emphasis>
2729 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_EXPLICIT</emphasis>
2730 <emphasis role="preprocessor">#else</emphasis>
2731 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_EXPLICIT&#32;explicit</emphasis>
2732 <emphasis role="preprocessor">#endif</emphasis>
2733 
2734 <emphasis role="preprocessor">#ifndef&#32;JSON_DIAGNOSTICS</emphasis>
2735 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;JSON_DIAGNOSTICS&#32;0</emphasis>
2736 <emphasis role="preprocessor">#endif</emphasis>
2737 
2738 
2739 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann">nlohmann</link>
2740 {
2741 <emphasis role="keyword">namespace&#32;</emphasis>detail
2742 {
2743 
2757 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;StringType&gt;
2758 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a8d9ddce5bf139f92a61e44827cb6842f">replace_substring</link>(StringType&amp;&#32;s,&#32;<emphasis role="keyword">const</emphasis>&#32;StringType&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>,
2759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;StringType&amp;&#32;t)
2760 {
2761 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(!<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>.empty());
2762 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;pos&#32;=&#32;s.find(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;find&#32;first&#32;occurrence&#32;of&#32;f</emphasis>
2763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;!=&#32;StringType::npos;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;make&#32;sure&#32;f&#32;was&#32;found</emphasis>
2764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s.replace(pos,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>.size(),&#32;t),&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;replace&#32;with&#32;t,&#32;and</emphasis>
2765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;=&#32;s.find(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>,&#32;pos&#32;+&#32;t.size()))&#32;&#32;<emphasis role="comment">//&#32;find&#32;next&#32;occurrence&#32;of&#32;f</emphasis>
2766 &#32;&#32;&#32;&#32;{}
2767 }
2768 
2776 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;StringType&gt;
2777 <emphasis role="keyword">inline</emphasis>&#32;StringType&#32;<link linkend="_namespacenlohmann_1_1detail_1a6d49f8d1bdd1b5d9c574d13a9b3374f6">escape</link>(StringType&#32;s)
2778 {
2779 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a8d9ddce5bf139f92a61e44827cb6842f">replace_substring</link>(s,&#32;StringType{<emphasis role="stringliteral">&quot;~&quot;</emphasis>},&#32;StringType{<emphasis role="stringliteral">&quot;~0&quot;</emphasis>});
2780 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a8d9ddce5bf139f92a61e44827cb6842f">replace_substring</link>(s,&#32;StringType{<emphasis role="stringliteral">&quot;/&quot;</emphasis>},&#32;StringType{<emphasis role="stringliteral">&quot;~1&quot;</emphasis>});
2781 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;s;
2782 }
2783 
2791 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;StringType&gt;
2792 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;unescape(StringType&amp;&#32;s)
2793 {
2794 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a8d9ddce5bf139f92a61e44827cb6842f">replace_substring</link>(s,&#32;StringType{<emphasis role="stringliteral">&quot;~1&quot;</emphasis>},&#32;StringType{<emphasis role="stringliteral">&quot;/&quot;</emphasis>});
2795 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a8d9ddce5bf139f92a61e44827cb6842f">replace_substring</link>(s,&#32;StringType{<emphasis role="stringliteral">&quot;~0&quot;</emphasis>},&#32;StringType{<emphasis role="stringliteral">&quot;~&quot;</emphasis>});
2796 }
2797 
2798 }&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
2799 }&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann</emphasis>
2800 
2801 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/input/position_t.hpp&gt;</emphasis>
2802 
2803 
2804 <emphasis role="preprocessor">#include&#32;&lt;cstddef&gt;</emphasis>&#32;<emphasis role="comment">//&#32;size_t</emphasis>
2805 
2806 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann">nlohmann</link>
2807 {
2808 <emphasis role="keyword">namespace&#32;</emphasis>detail
2809 {
2811 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1position__t">position_t</link>
2812 {
2814 &#32;&#32;&#32;&#32;std::size_t&#32;<link linkend="_structnlohmann_1_1detail_1_1position__t_1a94cf85cd91d478c20ae143eba906ea1a">chars_read_total</link>&#32;=&#32;0;
2816 &#32;&#32;&#32;&#32;std::size_t&#32;<link linkend="_structnlohmann_1_1detail_1_1position__t_1a74df94563dd32102152ceb8c6d9041d8">chars_read_current_line</link>&#32;=&#32;0;
2818 &#32;&#32;&#32;&#32;std::size_t&#32;<link linkend="_structnlohmann_1_1detail_1_1position__t_1a4bbad8bc2c0d17c1b61c3ce729908b71">lines_read</link>&#32;=&#32;0;
2819 
2821 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link>()<emphasis role="keyword">&#32;const</emphasis>
2822 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
2823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structnlohmann_1_1detail_1_1position__t_1a94cf85cd91d478c20ae143eba906ea1a">chars_read_total</link>;
2824 &#32;&#32;&#32;&#32;}
2825 };
2826 
2827 }&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
2828 }&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann</emphasis>
2829 
2830 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/macro_scope.hpp&gt;</emphasis>
2831 
2832 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/meta/cpp_future.hpp&gt;</emphasis>
2833 
2834 
2835 <emphasis role="preprocessor">#include&#32;&lt;cstddef&gt;</emphasis>&#32;<emphasis role="comment">//&#32;size_t</emphasis>
2836 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>&#32;<emphasis role="comment">//&#32;conditional,&#32;enable_if,&#32;false_type,&#32;integral_constant,&#32;is_constructible,&#32;is_integral,&#32;is_same,&#32;remove_cv,&#32;remove_reference,&#32;true_type</emphasis>
2837 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>&#32;<emphasis role="comment">//&#32;index_sequence,&#32;make_index_sequence,&#32;index_sequence_for</emphasis>
2838 
2839 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/macro_scope.hpp&gt;</emphasis>
2840 
2841 
2842 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann">nlohmann</link>
2843 {
2844 <emphasis role="keyword">namespace&#32;</emphasis>detail
2845 {
2846 
2847 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2848 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1a53a082eedad9f4729fcd8fed552a21f7">uncvref_t</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::remove_cv&lt;typename&#32;std::remove_reference&lt;T&gt;::type&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
2849 
2850 <emphasis role="preprocessor">#ifdef&#32;JSON_HAS_CPP_14</emphasis>
2851 
2852 <emphasis role="comment">//&#32;the&#32;following&#32;utilities&#32;are&#32;natively&#32;available&#32;in&#32;C++14</emphasis>
2853 <emphasis role="keyword">using&#32;</emphasis>std::enable_if_t;
2854 <emphasis role="keyword">using&#32;</emphasis>std::index_sequence;
2855 <emphasis role="keyword">using&#32;</emphasis>std::make_index_sequence;
2856 <emphasis role="keyword">using&#32;</emphasis>std::index_sequence_for;
2857 
2858 <emphasis role="preprocessor">#else</emphasis>
2859 
2860 <emphasis role="comment">//&#32;alias&#32;templates&#32;to&#32;reduce&#32;boilerplate</emphasis>
2861 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;B,&#32;<emphasis role="keyword">typename</emphasis>&#32;T&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
2862 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;B,&#32;T&gt;::type;
2863 
2864 <emphasis role="comment">//&#32;The&#32;following&#32;code&#32;is&#32;taken&#32;from&#32;https://github.com/abseil/abseil-cpp/blob/10cb35e459f5ecca5b2ff107635da0bfa41011b4/absl/utility/utility.h</emphasis>
2865 <emphasis role="comment">//&#32;which&#32;is&#32;part&#32;of&#32;Google&#32;Abseil&#32;(https://github.com/abseil/abseil-cpp),&#32;licensed&#32;under&#32;the&#32;Apache&#32;License&#32;2.0.</emphasis>
2866 
2868 
2869 <emphasis role="comment">//&#32;integer_sequence</emphasis>
2870 <emphasis role="comment">//</emphasis>
2871 <emphasis role="comment">//&#32;Class&#32;template&#32;representing&#32;a&#32;compile-time&#32;integer&#32;sequence.&#32;An&#32;instantiation</emphasis>
2872 <emphasis role="comment">//&#32;of&#32;`integer_sequence&lt;T,&#32;Ints...&gt;`&#32;has&#32;a&#32;sequence&#32;of&#32;integers&#32;encoded&#32;in&#32;its</emphasis>
2873 <emphasis role="comment">//&#32;type&#32;through&#32;its&#32;template&#32;arguments&#32;(which&#32;is&#32;a&#32;common&#32;need&#32;when</emphasis>
2874 <emphasis role="comment">//&#32;working&#32;with&#32;C++11&#32;variadic&#32;templates).&#32;`absl::integer_sequence`&#32;is&#32;designed</emphasis>
2875 <emphasis role="comment">//&#32;to&#32;be&#32;a&#32;drop-in&#32;replacement&#32;for&#32;C++14&apos;s&#32;`std::integer_sequence`.</emphasis>
2876 <emphasis role="comment">//</emphasis>
2877 <emphasis role="comment">//&#32;Example:</emphasis>
2878 <emphasis role="comment">//</emphasis>
2879 <emphasis role="comment">//&#32;&#32;&#32;template&lt;&#32;class&#32;T,&#32;T...&#32;Ints&#32;&gt;</emphasis>
2880 <emphasis role="comment">//&#32;&#32;&#32;void&#32;user_function(integer_sequence&lt;T,&#32;Ints...&gt;);</emphasis>
2881 <emphasis role="comment">//</emphasis>
2882 <emphasis role="comment">//&#32;&#32;&#32;int&#32;main()</emphasis>
2883 <emphasis role="comment">//&#32;&#32;&#32;{</emphasis>
2884 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;//&#32;user_function&apos;s&#32;`T`&#32;will&#32;be&#32;deduced&#32;to&#32;`int`&#32;and&#32;`Ints...`</emphasis>
2885 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;//&#32;will&#32;be&#32;deduced&#32;to&#32;`0,&#32;1,&#32;2,&#32;3,&#32;4`.</emphasis>
2886 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;user_function(make_integer_sequence&lt;int,&#32;5&gt;());</emphasis>
2887 <emphasis role="comment">//&#32;&#32;&#32;}</emphasis>
2888 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;T...&#32;Ints&gt;
2889 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1integer__sequence">integer_sequence</link>
2890 {
2891 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1integer__sequence_1a0220e7e5f85f91c6b7a930e469cda5c5">value_type</link>&#32;=&#32;T;
2892 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;std::size_t&#32;<link linkend="_structnlohmann_1_1detail_1_1integer__sequence_1a6024bae596d01193397a7396af3aa19a">size</link>()&#32;noexcept
2893 &#32;&#32;&#32;&#32;{
2894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">sizeof</emphasis>...(Ints);
2895 &#32;&#32;&#32;&#32;}
2896 };
2897 
2898 <emphasis role="comment">//&#32;index_sequence</emphasis>
2899 <emphasis role="comment">//</emphasis>
2900 <emphasis role="comment">//&#32;A&#32;helper&#32;template&#32;for&#32;an&#32;`integer_sequence`&#32;of&#32;`size_t`,</emphasis>
2901 <emphasis role="comment">//&#32;`absl::index_sequence`&#32;is&#32;designed&#32;to&#32;be&#32;a&#32;drop-in&#32;replacement&#32;for&#32;C++14&apos;s</emphasis>
2902 <emphasis role="comment">//&#32;`std::index_sequence`.</emphasis>
2903 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>...&#32;Ints&gt;
2904 <emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1integer__sequence">index_sequence</link>&#32;=&#32;<link linkend="_structnlohmann_1_1detail_1_1integer__sequence">integer_sequence</link>&lt;<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link>,&#32;Ints...&gt;;
2905 
2906 <emphasis role="keyword">namespace&#32;</emphasis>utility_internal
2907 {
2908 
2909 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Seq,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;SeqSize,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;Rem&gt;
2910 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1utility__internal_1_1_extend">Extend</link>;
2911 
2912 <emphasis role="comment">//&#32;Note&#32;that&#32;SeqSize&#32;==&#32;sizeof...(Ints).&#32;It&apos;s&#32;passed&#32;explicitly&#32;for&#32;efficiency.</emphasis>
2913 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;T...&#32;Ints,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;SeqSize&gt;
2914 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1utility__internal_1_1_extend">Extend</link>&lt;<link linkend="_structnlohmann_1_1detail_1_1integer__sequence">integer_sequence</link>&lt;T,&#32;Ints...&gt;,&#32;SeqSize,&#32;0&gt;
2915 {
2916 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1integer__sequence">type</link>&#32;=&#32;<link linkend="_structnlohmann_1_1detail_1_1integer__sequence">integer_sequence</link>&#32;&lt;&#32;T,&#32;Ints...,&#32;(Ints&#32;+&#32;SeqSize)...&#32;&gt;;
2917 };
2918 
2919 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;T...&#32;Ints,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;SeqSize&gt;
2920 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1utility__internal_1_1_extend">Extend</link>&lt;<link linkend="_structnlohmann_1_1detail_1_1integer__sequence">integer_sequence</link>&lt;T,&#32;Ints...&gt;,&#32;SeqSize,&#32;1&gt;
2921 {
2922 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1integer__sequence">type</link>&#32;=&#32;<link linkend="_structnlohmann_1_1detail_1_1integer__sequence">integer_sequence</link>&#32;&lt;&#32;T,&#32;Ints...,&#32;(Ints&#32;+&#32;SeqSize)...,&#32;2&#32;*&#32;SeqSize&#32;&gt;;
2923 };
2924 
2925 <emphasis role="comment">//&#32;Recursion&#32;helper&#32;for&#32;&apos;make_integer_sequence&lt;T,&#32;N&gt;&apos;.</emphasis>
2926 <emphasis role="comment">//&#32;&apos;Gen&lt;T,&#32;N&gt;::type&apos;&#32;is&#32;an&#32;alias&#32;for&#32;&apos;integer_sequence&lt;T,&#32;0,&#32;1,&#32;...&#32;N-1&gt;&apos;.</emphasis>
2927 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;
2928 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1utility__internal_1_1_gen">Gen</link>
2929 {
2930 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1utility__internal_1_1_gen_1a1d6f2c7fb3fa065bf8cf6e6e3544dcef">type</link>&#32;=
2931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_structnlohmann_1_1detail_1_1utility__internal_1_1_extend">Extend</link>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_structnlohmann_1_1detail_1_1utility__internal_1_1_gen">Gen</link>&#32;&lt;&#32;T,&#32;N&#32;/&#32;2&#32;&gt;<link linkend="_structnlohmann_1_1detail_1_1utility__internal_1_1_gen_1a1d6f2c7fb3fa065bf8cf6e6e3544dcef">::type</link>,&#32;N&#32;/&#32;2,&#32;N&#32;%&#32;2&#32;&gt;<link linkend="_structnlohmann_1_1detail_1_1utility__internal_1_1_gen_1a1d6f2c7fb3fa065bf8cf6e6e3544dcef">::type</link>;
2932 };
2933 
2934 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2935 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1utility__internal_1_1_gen">Gen</link>&lt;T,&#32;0&gt;
2936 {
2937 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1integer__sequence">type</link>&#32;=&#32;<link linkend="_structnlohmann_1_1detail_1_1integer__sequence">integer_sequence&lt;T&gt;</link>;
2938 };
2939 
2940 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;utility_internal</emphasis>
2941 
2942 <emphasis role="comment">//&#32;Compile-time&#32;sequences&#32;of&#32;integers</emphasis>
2943 
2944 <emphasis role="comment">//&#32;make_integer_sequence</emphasis>
2945 <emphasis role="comment">//</emphasis>
2946 <emphasis role="comment">//&#32;This&#32;template&#32;alias&#32;is&#32;equivalent&#32;to</emphasis>
2947 <emphasis role="comment">//&#32;`integer_sequence&lt;int,&#32;0,&#32;1,&#32;...,&#32;N-1&gt;`,&#32;and&#32;is&#32;designed&#32;to&#32;be&#32;a&#32;drop-in</emphasis>
2948 <emphasis role="comment">//&#32;replacement&#32;for&#32;C++14&apos;s&#32;`std::make_integer_sequence`.</emphasis>
2949 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;T&#32;N&gt;
2950 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1a745268b2c803a873cdbe1fdecb4e88b2">make_integer_sequence</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_structnlohmann_1_1detail_1_1utility__internal_1_1_gen_1a1d6f2c7fb3fa065bf8cf6e6e3544dcef">utility_internal::Gen&lt;T, N&gt;::type</link>;
2951 
2952 <emphasis role="comment">//&#32;make_index_sequence</emphasis>
2953 <emphasis role="comment">//</emphasis>
2954 <emphasis role="comment">//&#32;This&#32;template&#32;alias&#32;is&#32;equivalent&#32;to&#32;`index_sequence&lt;0,&#32;1,&#32;...,&#32;N-1&gt;`,</emphasis>
2955 <emphasis role="comment">//&#32;and&#32;is&#32;designed&#32;to&#32;be&#32;a&#32;drop-in&#32;replacement&#32;for&#32;C++14&apos;s</emphasis>
2956 <emphasis role="comment">//&#32;`std::make_index_sequence`.</emphasis>
2957 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;
2958 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1a9b47f1c18e3c9739b20633aeee0d0f62">make_index_sequence</link>&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a745268b2c803a873cdbe1fdecb4e88b2">make_integer_sequence&lt;size_t, N&gt;</link>;
2959 
2960 <emphasis role="comment">//&#32;index_sequence_for</emphasis>
2961 <emphasis role="comment">//</emphasis>
2962 <emphasis role="comment">//&#32;Converts&#32;a&#32;typename&#32;pack&#32;into&#32;an&#32;index&#32;sequence&#32;of&#32;the&#32;same&#32;length,&#32;and</emphasis>
2963 <emphasis role="comment">//&#32;is&#32;designed&#32;to&#32;be&#32;a&#32;drop-in&#32;replacement&#32;for&#32;C++14&apos;s</emphasis>
2964 <emphasis role="comment">//&#32;`std::index_sequence_for()`</emphasis>
2965 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;Ts&gt;
2966 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1a24800493c6ec02ce033dcbb47b7fd28e">index_sequence_for</link>&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a9b47f1c18e3c9739b20633aeee0d0f62">make_index_sequence</link>&lt;<emphasis role="keyword">sizeof</emphasis>...(Ts)&gt;;
2967 
2969 
2970 <emphasis role="preprocessor">#endif</emphasis>
2971 
2972 <emphasis role="comment">//&#32;dispatch&#32;utility&#32;(taken&#32;from&#32;ranges-v3)</emphasis>
2973 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">unsigned</emphasis>&#32;N&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1priority__tag">priority_tag</link>&#32;:&#32;<link linkend="_structnlohmann_1_1detail_1_1priority__tag">priority_tag</link>&#32;&lt;&#32;N&#32;-&#32;1&#32;&gt;&#32;{};
2974 <emphasis role="keyword">template</emphasis>&lt;&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1priority__tag">priority_tag</link>&lt;0&gt;&#32;{};
2975 
2976 <emphasis role="comment">//&#32;taken&#32;from&#32;ranges-v3</emphasis>
2977 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2978 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1static__const">static_const</link>
2979 {
2980 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;T&#32;<link linkend="_classvalue">value</link>{};
2981 };
2982 
2983 <emphasis role="preprocessor">#ifndef&#32;JSON_HAS_CPP_17</emphasis>
2984 
2985 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2986 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;T&#32;<link linkend="_structnlohmann_1_1detail_1_1static__const_1a6bb7ab2ddd6abc41fb4ffb7c6dfa237e">static_const&lt;T&gt;::value</link>;&#32;<emphasis role="comment">//&#32;NOLINT(readability-redundant-declaration)</emphasis>
2987 
2988 <emphasis role="preprocessor">#endif</emphasis>
2989 
2990 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
2991 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann</emphasis>
2992 
2993 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/meta/type_traits.hpp&gt;</emphasis>
2994 
2995 
2996 <emphasis role="preprocessor">#include&#32;&lt;limits&gt;</emphasis>&#32;<emphasis role="comment">//&#32;numeric_limits</emphasis>
2997 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>&#32;<emphasis role="comment">//&#32;false_type,&#32;is_constructible,&#32;is_integral,&#32;is_same,&#32;true_type</emphasis>
2998 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>&#32;<emphasis role="comment">//&#32;declval</emphasis>
2999 <emphasis role="preprocessor">#include&#32;&lt;tuple&gt;</emphasis>&#32;<emphasis role="comment">//&#32;tuple</emphasis>
3000 
3001 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/macro_scope.hpp&gt;</emphasis>
3002 
3003 
3004 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/iterators/iterator_traits.hpp&gt;</emphasis>
3005 
3006 
3007 <emphasis role="preprocessor">#include&#32;&lt;iterator&gt;</emphasis>&#32;<emphasis role="comment">//&#32;random_access_iterator_tag</emphasis>
3008 
3009 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/meta/void_t.hpp&gt;</emphasis>
3010 
3011 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/meta/cpp_future.hpp&gt;</emphasis>
3012 
3013 
3014 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann">nlohmann</link>
3015 {
3016 <emphasis role="keyword">namespace&#32;</emphasis>detail
3017 {
3018 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;It,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
3019 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1iterator__types">iterator_types</link>&#32;{};
3020 
3021 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;It&gt;
3022 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1iterator__types">iterator_types</link>&#32;&lt;
3023 &#32;&#32;&#32;&#32;It,
3024 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a92a167c49c6697b6ffe4f79492c705e5">void_t</link>&lt;typename&#32;It::<link linkend="_structnlohmann_1_1detail_1_1iterator__types_3_01_it_00_01void__t_3_01typename_01_it_1_1differenc4a413e9bd546446175f10f15c5631361_1a1ce16c1c8c1d6a195f5a3d3ad31820f0">difference_type</link>,&#32;typename&#32;It::value_type,&#32;typename&#32;It::pointer,
3025 &#32;&#32;&#32;&#32;typename&#32;It::reference,&#32;typename&#32;It::iterator_category&#32;&gt;&gt;
3026 {
3027 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1iterator__types_3_01_it_00_01void__t_3_01typename_01_it_1_1differenc4a413e9bd546446175f10f15c5631361_1a1ce16c1c8c1d6a195f5a3d3ad31820f0">difference_type</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;It::difference_type;
3028 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1iterator__types_3_01_it_00_01void__t_3_01typename_01_it_1_1differenc4a413e9bd546446175f10f15c5631361_1ac70fcab4cacd8b386c3f2b056885e15e">value_type</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;It::value_type;
3029 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1iterator__types_3_01_it_00_01void__t_3_01typename_01_it_1_1differenc4a413e9bd546446175f10f15c5631361_1aacaf73dc959b7c2119c15e53b5ce00a3">pointer</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;It::pointer;
3030 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1iterator__types_3_01_it_00_01void__t_3_01typename_01_it_1_1differenc4a413e9bd546446175f10f15c5631361_1a5e82d2d8dabd022b8ff916f2e83a82f2">reference</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;It::reference;
3031 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1iterator__types_3_01_it_00_01void__t_3_01typename_01_it_1_1differenc4a413e9bd546446175f10f15c5631361_1aaaafbcd0573ec9cfc5d19411950dc1ac">iterator_category</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;It::iterator_category;
3032 };
3033 
3034 <emphasis role="comment">//&#32;This&#32;is&#32;required&#32;as&#32;some&#32;compilers&#32;implement&#32;std::iterator_traits&#32;in&#32;a&#32;way&#32;that</emphasis>
3035 <emphasis role="comment">//&#32;doesn&apos;t&#32;work&#32;with&#32;SFINAE.&#32;See&#32;https://github.com/nlohmann/json/issues/1341.</emphasis>
3036 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
3037 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1iterator__traits">iterator_traits</link>
3038 {
3039 };
3040 
3041 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3042 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1iterator__traits">iterator_traits</link>&#32;&lt;&#32;T,&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&#32;&lt;&#32;!<link linkend="_namespacestd">std</link>::is_pointer&lt;T&gt;<link linkend="_classvalue">::value</link>&#32;&gt;&gt;
3043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_structnlohmann_1_1detail_1_1iterator__types">iterator_types</link>&lt;T&gt;
3044 {
3045 };
3046 
3047 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3048 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1iterator__traits">iterator_traits</link>&lt;T*,&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t&lt;std::is_object&lt;T&gt;::value</link>&gt;&gt;
3049 {
3050 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1iterator__traits_3_01_t_01_5_00_01enable__if__t_3_01std_1_1is__objec8d960665487688165530972cda4f1bea_1a9b043cfe0fdfb3e9665428fb2be9cea1">iterator_category</link>&#32;=&#32;std::random_access_iterator_tag;
3051 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1iterator__traits_3_01_t_01_5_00_01enable__if__t_3_01std_1_1is__objec8d960665487688165530972cda4f1bea_1a443e6a62f5fb2c545fc71c751b98ca8d">value_type</link>&#32;=&#32;T;
3052 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1iterator__traits_3_01_t_01_5_00_01enable__if__t_3_01std_1_1is__objec8d960665487688165530972cda4f1bea_1ae7be99eb434f5b5f34692874c272b759">difference_type</link>&#32;=&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>;
3053 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1iterator__traits_3_01_t_01_5_00_01enable__if__t_3_01std_1_1is__objec8d960665487688165530972cda4f1bea_1a33ee9a1beb8ee099f989fd4af15178a5">pointer</link>&#32;=&#32;T*;
3054 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1iterator__traits_3_01_t_01_5_00_01enable__if__t_3_01std_1_1is__objec8d960665487688165530972cda4f1bea_1a0809c5949d22f08a993231d2fdf285f0">reference</link>&#32;=&#32;T&amp;;
3055 };
3056 }&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
3057 }&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann</emphasis>
3058 
3059 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/meta/call_std/begin.hpp&gt;</emphasis>
3060 
3061 
3062 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/macro_scope.hpp&gt;</emphasis>
3063 
3064 
3065 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann">nlohmann</link>
3066 {
3067 <link linkend="_json_8hpp_1abe62b1dc3431d9ca95f4e819cc6250ba">NLOHMANN_CAN_CALL_STD_FUNC_IMPL</link>(begin);
3068 }&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann</emphasis>
3069 
3070 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/meta/call_std/end.hpp&gt;</emphasis>
3071 
3072 
3073 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/macro_scope.hpp&gt;</emphasis>
3074 
3075 
3076 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann">nlohmann</link>
3077 {
3078 <link linkend="_json_8hpp_1abe62b1dc3431d9ca95f4e819cc6250ba">NLOHMANN_CAN_CALL_STD_FUNC_IMPL</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>);
3079 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann</emphasis>
3080 
3081 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/meta/cpp_future.hpp&gt;</emphasis>
3082 
3083 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/meta/detected.hpp&gt;</emphasis>
3084 
3085 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/json_fwd.hpp&gt;</emphasis>
3086 <emphasis role="preprocessor">#ifndef&#32;INCLUDE_NLOHMANN_JSON_FWD_HPP_</emphasis>
3087 <emphasis role="preprocessor">#define&#32;INCLUDE_NLOHMANN_JSON_FWD_HPP_</emphasis>
3088 
3089 <emphasis role="preprocessor">#include&#32;&lt;cstdint&gt;</emphasis>&#32;<emphasis role="comment">//&#32;int64_t,&#32;uint64_t</emphasis>
3090 <emphasis role="preprocessor">#include&#32;&lt;map&gt;</emphasis>&#32;<emphasis role="comment">//&#32;map</emphasis>
3091 <emphasis role="preprocessor">#include&#32;&lt;memory&gt;</emphasis>&#32;<emphasis role="comment">//&#32;allocator</emphasis>
3092 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>&#32;<emphasis role="comment">//&#32;string</emphasis>
3093 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>&#32;<emphasis role="comment">//&#32;vector</emphasis>
3094 
3100 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann">nlohmann</link>
3101 {
3109 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&#32;=&#32;<emphasis role="keywordtype">void</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>&#32;SFINAE&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
3110 <emphasis role="keyword">struct&#32;</emphasis>adl_serializer;
3111 
3114 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;U,&#32;<emphasis role="keyword">typename</emphasis>&#32;V,&#32;<emphasis role="keyword">typename</emphasis>...&#32;Args&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>ObjectType&#32;=
3115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::map,
3116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;U,&#32;<emphasis role="keyword">typename</emphasis>...&#32;Args&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>ArrayType&#32;=&#32;std::vector,
3117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>StringType&#32;=&#32;std::string,&#32;<emphasis role="keyword">class&#32;</emphasis>BooleanType&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>,
3118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>NumberIntegerType&#32;=&#32;std::int64_t,
3119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>NumberUnsignedType&#32;=&#32;std::uint64_t,
3120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>NumberFloatType&#32;=&#32;double,
3121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;U&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>AllocatorType&#32;=&#32;std::allocator,
3122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;SFINAE&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>JSONSerializer&#32;=
3123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;adl_serializer,
3124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>BinaryType&#32;=&#32;std::vector&lt;std::uint8_t&gt;&gt;
3125 <emphasis role="keyword">class&#32;</emphasis>basic_json;
3126 
3129 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
3130 <emphasis role="keyword">class&#32;</emphasis>json_pointer;
3131 
3136 <emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1basic__json">json</link>&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json&lt;&gt;</link>;
3137 
3140 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;Key,&#32;<emphasis role="keyword">class</emphasis>&#32;T,&#32;<emphasis role="keyword">class</emphasis>&#32;IgnoredLess,&#32;<emphasis role="keyword">class</emphasis>&#32;Allocator&gt;
3141 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1ordered__map">ordered_map</link>;
3142 
3145 <emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1basic__json">ordered_json</link>&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json&lt;nlohmann::ordered_map&gt;</link>;
3146 
3147 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann</emphasis>
3148 
3149 <emphasis role="preprocessor">#endif&#32;&#32;</emphasis><emphasis role="comment">//&#32;INCLUDE_NLOHMANN_JSON_FWD_HPP_</emphasis>
3150 
3151 
3152 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann">nlohmann</link>
3153 {
3162 <emphasis role="keyword">namespace&#32;</emphasis>detail
3163 {
3165 <emphasis role="comment">//&#32;helpers&#32;//</emphasis>
3167 
3168 <emphasis role="comment">//&#32;Note&#32;to&#32;maintainers:</emphasis>
3169 <emphasis role="comment">//</emphasis>
3170 <emphasis role="comment">//&#32;Every&#32;trait&#32;in&#32;this&#32;file&#32;expects&#32;a&#32;non&#32;CV-qualified&#32;type.</emphasis>
3171 <emphasis role="comment">//&#32;The&#32;only&#32;exceptions&#32;are&#32;in&#32;the&#32;&apos;aliases&#32;for&#32;detected&apos;&#32;section</emphasis>
3172 <emphasis role="comment">//&#32;(i.e.&#32;those&#32;of&#32;the&#32;form:&#32;decltype(T::member_function(std::declval&lt;T&gt;())))</emphasis>
3173 <emphasis role="comment">//</emphasis>
3174 <emphasis role="comment">//&#32;In&#32;this&#32;case,&#32;T&#32;has&#32;to&#32;be&#32;properly&#32;CV-qualified&#32;to&#32;constraint&#32;the&#32;function&#32;arguments</emphasis>
3175 <emphasis role="comment">//&#32;(e.g.&#32;to_json(BasicJsonType&amp;,&#32;const&#32;T&amp;))</emphasis>
3176 
3177 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__basic__json">is_basic_json</link>&#32;:&#32;std::false_type&#32;{};
3178 
3179 <link linkend="_json_8hpp_1a0643bd74c2dc6f0e4e420b8190ea8f0f">NLOHMANN_BASIC_JSON_TPL_DECLARATION</link>
3180 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__basic__json">is_basic_json</link>&lt;<link linkend="_json_8hpp_1a80b7254e63f199a1f656f07ae551f632">NLOHMANN_BASIC_JSON_TPL</link>&gt;&#32;:&#32;std::true_type&#32;{};
3181 
3182 <emphasis role="comment">//&#32;used&#32;by&#32;exceptions&#32;create()&#32;member&#32;functions</emphasis>
3183 <emphasis role="comment">//&#32;true_type&#32;for&#32;pointer&#32;to&#32;possibly&#32;cv-qualified&#32;basic_json&#32;or&#32;std::nullptr_t</emphasis>
3184 <emphasis role="comment">//&#32;false_type&#32;otherwise</emphasis>
3185 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonContext&gt;
3186 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__basic__json__context">is_basic_json_context</link>&#32;:
3187 &#32;&#32;&#32;&#32;std::integral_constant&#32;&lt;&#32;bool,
3188 &#32;&#32;&#32;&#32;is_basic_json&lt;typename&#32;std::remove_cv&lt;typename&#32;std::remove_pointer&lt;BasicJsonContext&gt;::type&gt;::type&gt;::value
3189 &#32;&#32;&#32;&#32;||&#32;std::is_same&lt;BasicJsonContext,&#32;std::nullptr_t&gt;::value&#32;&gt;
3190 {};
3191 
3193 <emphasis role="comment">//&#32;json_ref&#32;helpers&#32;//</emphasis>
3195 
3196 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&gt;
3197 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1json__ref">json_ref</link>;
3198 
3199 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&gt;
3200 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__json__ref">is_json_ref</link>&#32;:&#32;std::false_type&#32;{};
3201 
3202 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3203 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__json__ref">is_json_ref</link>&lt;<link linkend="_classnlohmann_1_1detail_1_1json__ref">json_ref</link>&lt;T&gt;&gt;&#32;:&#32;std::true_type&#32;{};
3204 
3206 <emphasis role="comment">//&#32;aliases&#32;for&#32;detected&#32;//</emphasis>
3208 
3209 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3210 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1a9c1795c148875722f8482d39e0eb9364">mapped_type_t</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;T::mapped_type;
3211 
3212 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3213 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1a66dfe39f03b05d6b7265a0ff748d64ef">key_type_t</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;T::key_type;
3214 
3215 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3216 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1af91beae90c2fb0f931079b3d50a343bc">value_type_t</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;T::value_type;
3217 
3218 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3219 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1a3603b59a17d1c5e15050743b847992f2">difference_type_t</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;T::difference_type;
3220 
3221 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3222 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1a26dc71e2dd9336587e56062178f9abce">pointer_t</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;T::pointer;
3223 
3224 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3225 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1a082bdafd3b4c61d9d1e92b35b8f75ee3">reference_t</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;T::reference;
3226 
3227 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3228 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1ad22d2aa3aab018050ae519f6754366e1">iterator_category_t</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;T::iterator_category;
3229 
3230 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>...&#32;Args&gt;
3231 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1af846b6cf2f926009ff3a7a61495ca383">to_json_function</link>&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(T::to_json(std::declval&lt;Args&gt;()...));
3232 
3233 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>...&#32;Args&gt;
3234 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1a1711ee5cef66a0523055c8d9f024f322">from_json_function</link>&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(T::from_json(std::declval&lt;Args&gt;()...));
3235 
3236 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;U&gt;
3237 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1ab4d22cdb6521ee3508db496dea66711e">get_template_function</link>&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(std::declval&lt;T&gt;().template&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get&lt;U&gt;</link>());
3238 
3239 <emphasis role="comment">//&#32;trait&#32;checking&#32;if&#32;JSONSerializer&lt;T&gt;::from_json(json&#32;const&amp;,&#32;udt&amp;)&#32;exists</emphasis>
3240 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
3241 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1has__from__json">has_from_json</link>&#32;:&#32;std::false_type&#32;{};
3242 
3243 <emphasis role="comment">//&#32;trait&#32;checking&#32;if&#32;j.get&lt;T&gt;&#32;is&#32;valid</emphasis>
3244 <emphasis role="comment">//&#32;use&#32;this&#32;trait&#32;instead&#32;of&#32;std::is_constructible&#32;or&#32;std::is_convertible,</emphasis>
3245 <emphasis role="comment">//&#32;both&#32;rely&#32;on,&#32;or&#32;make&#32;use&#32;of&#32;implicit&#32;conversions,&#32;and&#32;thus&#32;fail&#32;when&#32;T</emphasis>
3246 <emphasis role="comment">//&#32;has&#32;several&#32;constructors/operator=&#32;(see&#32;https://github.com/nlohmann/json/issues/958)</emphasis>
3247 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3248 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__getable">is_getable</link>
3249 {
3250 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classvalue">value</link>&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a9135fcf616d6ac6e231a86e0a055ac44">is_detected&lt;get_template_function, const BasicJsonType&amp;, T&gt;::value</link>;
3251 };
3252 
3253 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3254 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1has__from__json">has_from_json</link>&#32;&lt;&#32;BasicJsonType,&#32;T,&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&#32;&lt;&#32;!<link linkend="_structnlohmann_1_1detail_1_1is__basic__json">is_basic_json</link>&lt;T&gt;::<link linkend="_classvalue">value</link>&#32;&gt;&gt;
3255 {
3256 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1has__from__json_3_01_basic_json_type_00_01_t_00_01enable__if__t_3_01f77b5e367f2d5612b4276a155bf11896_1ac0718a48961f28e32604e1b16c6f2e8d">serializer</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::template&#32;json_serializer&lt;T,&#32;void&gt;;
3257 
3258 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classvalue">value</link>&#32;=
3259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a7542b4dbac07817fd4849ecfa4619def">is_detected_exact</link>&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>,&#32;<link linkend="_namespacenlohmann_1_1detail_1a1711ee5cef66a0523055c8d9f024f322">from_json_function</link>,&#32;<link linkend="_structnlohmann_1_1detail_1_1has__from__json_3_01_basic_json_type_00_01_t_00_01enable__if__t_3_01f77b5e367f2d5612b4276a155bf11896_1ac0718a48961f28e32604e1b16c6f2e8d">serializer</link>,
3260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;,&#32;T&amp;&gt;<link linkend="_classvalue">::value</link>;
3261 };
3262 
3263 <emphasis role="comment">//&#32;This&#32;trait&#32;checks&#32;if&#32;JSONSerializer&lt;T&gt;::from_json(json&#32;const&amp;)&#32;exists</emphasis>
3264 <emphasis role="comment">//&#32;this&#32;overload&#32;is&#32;used&#32;for&#32;non-default-constructible&#32;user-defined-types</emphasis>
3265 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
3266 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1has__non__default__from__json">has_non_default_from_json</link>&#32;:&#32;std::false_type&#32;{};
3267 
3268 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3269 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1has__non__default__from__json">has_non_default_from_json</link>&#32;&lt;&#32;BasicJsonType,&#32;T,&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&#32;&lt;&#32;!<link linkend="_structnlohmann_1_1detail_1_1is__basic__json">is_basic_json</link>&lt;T&gt;::<link linkend="_classvalue">value</link>&#32;&gt;&gt;
3270 {
3271 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1has__non__default__from__json_3_01_basic_json_type_00_01_t_00_01enab072547deb606b69b2d65cb910e223bb8_1a4bcee5e52902d3011df08cf0233e5e10">serializer</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::template&#32;json_serializer&lt;T,&#32;void&gt;;
3272 
3273 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classvalue">value</link>&#32;=
3274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a7542b4dbac07817fd4849ecfa4619def">is_detected_exact</link>&lt;T,&#32;<link linkend="_namespacenlohmann_1_1detail_1a1711ee5cef66a0523055c8d9f024f322">from_json_function</link>,&#32;<link linkend="_structnlohmann_1_1detail_1_1has__non__default__from__json_3_01_basic_json_type_00_01_t_00_01enab072547deb606b69b2d65cb910e223bb8_1a4bcee5e52902d3011df08cf0233e5e10">serializer</link>,
3275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&gt;<link linkend="_classvalue">::value</link>;
3276 };
3277 
3278 <emphasis role="comment">//&#32;This&#32;trait&#32;checks&#32;if&#32;BasicJsonType::json_serializer&lt;T&gt;::to_json&#32;exists</emphasis>
3279 <emphasis role="comment">//&#32;Do&#32;not&#32;evaluate&#32;the&#32;trait&#32;when&#32;T&#32;is&#32;a&#32;basic_json&#32;type,&#32;to&#32;avoid&#32;template&#32;instantiation&#32;infinite&#32;recursion.</emphasis>
3280 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
3281 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1has__to__json">has_to_json</link>&#32;:&#32;std::false_type&#32;{};
3282 
3283 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3284 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1has__to__json">has_to_json</link>&#32;&lt;&#32;BasicJsonType,&#32;T,&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&#32;&lt;&#32;!<link linkend="_structnlohmann_1_1detail_1_1is__basic__json">is_basic_json</link>&lt;T&gt;::<link linkend="_classvalue">value</link>&#32;&gt;&gt;
3285 {
3286 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1has__to__json_3_01_basic_json_type_00_01_t_00_01enable__if__t_3_01_96b7bbbe462cd4ff87697dab3bc993a77_1a7af8dd95a01e7ca32f10075c9934b107">serializer</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::template&#32;json_serializer&lt;T,&#32;void&gt;;
3287 
3288 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classvalue">value</link>&#32;=
3289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a7542b4dbac07817fd4849ecfa4619def">is_detected_exact</link>&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>,&#32;<link linkend="_namespacenlohmann_1_1detail_1af846b6cf2f926009ff3a7a61495ca383">to_json_function</link>,&#32;<link linkend="_structnlohmann_1_1detail_1_1has__to__json_3_01_basic_json_type_00_01_t_00_01enable__if__t_3_01_96b7bbbe462cd4ff87697dab3bc993a77_1a7af8dd95a01e7ca32f10075c9934b107">serializer</link>,&#32;BasicJsonType&amp;,
3290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&gt;<link linkend="_classvalue">::value</link>;
3291 };
3292 
3293 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3294 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1a0c1c269cee3ca095e48735e791d27eb7">detect_key_compare</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;T::key_compare;
3295 
3296 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3297 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1has__key__compare">has_key_compare</link>&#32;:&#32;std::integral_constant&lt;bool,&#32;is_detected&lt;detect_key_compare,&#32;T&gt;::value&gt;&#32;{};
3298 
3299 <emphasis role="comment">//&#32;obtains&#32;the&#32;actual&#32;object&#32;key&#32;comparator</emphasis>
3300 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
3301 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1actual__object__comparator">actual_object_comparator</link>
3302 {
3303 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1actual__object__comparator_1ae1fb9353e776416d652fc014b0674818">object_t</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::object_t;
3304 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1actual__object__comparator_1a0508b68cbf3e8c5d51de9d43277dedaa">object_comparator_t</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::default_object_comparator_t;
3305 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1actual__object__comparator_1a847b401323bd9bbeee2f156aba393c0a">type</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::conditional&#32;&lt;&#32;has_key_compare&lt;object_t&gt;::value,
3306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;object_t::key_compare,&#32;<link linkend="_structnlohmann_1_1detail_1_1actual__object__comparator_1a0508b68cbf3e8c5d51de9d43277dedaa">object_comparator_t</link>&gt;<link linkend="_structnlohmann_1_1detail_1_1actual__object__comparator_1a847b401323bd9bbeee2f156aba393c0a">::type</link>;
3307 };
3308 
3309 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
3310 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1a0a41b6ed14eb953d0b6eee0e4d4bb5d4">actual_object_comparator_t</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_structnlohmann_1_1detail_1_1actual__object__comparator_1a847b401323bd9bbeee2f156aba393c0a">actual_object_comparator&lt;BasicJsonType&gt;::type</link>;
3311 
3313 <emphasis role="comment">//&#32;is_&#32;functions&#32;//</emphasis>
3315 
3316 <emphasis role="comment">//&#32;https://en.cppreference.com/w/cpp/types/conjunction</emphasis>
3317 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>...&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1conjunction">conjunction</link>&#32;:&#32;std::true_type&#32;{&#32;};
3318 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;B&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1conjunction">conjunction&lt;B&gt;</link>&#32;:&#32;B&#32;{&#32;};
3319 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>B,&#32;<emphasis role="keyword">class</emphasis>...&#32;Bn&gt;
3320 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1conjunction">conjunction</link>&lt;B,&#32;Bn...&gt;
3321 :&#32;std::conditional&lt;bool(B::value),&#32;conjunction&lt;Bn...&gt;,&#32;B&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&#32;{};
3322 
3323 <emphasis role="comment">//&#32;https://en.cppreference.com/w/cpp/types/negation</emphasis>
3324 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;B&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1negation">negation</link>&#32;:&#32;std::integral_constant&#32;&lt;&#32;bool,&#32;!B::value&#32;&gt;&#32;{&#32;};
3325 
3326 <emphasis role="comment">//&#32;Reimplementation&#32;of&#32;is_constructible&#32;and&#32;is_default_constructible,&#32;due&#32;to&#32;them&#32;being&#32;broken&#32;for</emphasis>
3327 <emphasis role="comment">//&#32;std::pair&#32;and&#32;std::tuple&#32;until&#32;LWG&#32;2367&#32;fix&#32;(see&#32;https://cplusplus.github.io/LWG/lwg-defects.html#2367).</emphasis>
3328 <emphasis role="comment">//&#32;This&#32;causes&#32;compile&#32;errors&#32;in&#32;e.g.&#32;clang&#32;3.5&#32;or&#32;gcc&#32;4.9.</emphasis>
3329 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3330 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__default__constructible">is_default_constructible</link>&#32;:&#32;std::is_default_constructible&lt;T&gt;&#32;{};
3331 
3332 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;T2&gt;
3333 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__default__constructible">is_default_constructible</link>&lt;<link linkend="_namespacestd">std</link>::pair&lt;T1,&#32;T2&gt;&gt;
3334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_structnlohmann_1_1detail_1_1conjunction">conjunction</link>&lt;is_default_constructible&lt;T1&gt;,&#32;is_default_constructible&lt;T2&gt;&gt;&#32;{};
3335 
3336 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;T2&gt;
3337 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__default__constructible">is_default_constructible</link>&lt;const&#32;<link linkend="_namespacestd">std</link>::pair&lt;T1,&#32;T2&gt;&gt;
3338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_structnlohmann_1_1detail_1_1conjunction">conjunction</link>&lt;is_default_constructible&lt;T1&gt;,&#32;is_default_constructible&lt;T2&gt;&gt;&#32;{};
3339 
3340 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;Ts&gt;
3341 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__default__constructible">is_default_constructible</link>&lt;<link linkend="_namespacestd">std</link>::tuple&lt;Ts...&gt;&gt;
3342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_structnlohmann_1_1detail_1_1conjunction">conjunction</link>&lt;is_default_constructible&lt;Ts&gt;...&gt;&#32;{};
3343 
3344 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;Ts&gt;
3345 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__default__constructible">is_default_constructible</link>&lt;const&#32;<link linkend="_namespacestd">std</link>::tuple&lt;Ts...&gt;&gt;
3346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_structnlohmann_1_1detail_1_1conjunction">conjunction</link>&lt;is_default_constructible&lt;Ts&gt;...&gt;&#32;{};
3347 
3348 
3349 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>...&#32;Args&gt;
3350 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__constructible">is_constructible</link>&#32;:&#32;std::is_constructible&lt;T,&#32;Args...&gt;&#32;{};
3351 
3352 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;T2&gt;
3353 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__constructible">is_constructible</link>&lt;<link linkend="_namespacestd">std</link>::pair&lt;T1,&#32;T2&gt;&gt;&#32;:&#32;<link linkend="_structnlohmann_1_1detail_1_1is__default__constructible">is_default_constructible</link>&lt;std::pair&lt;T1,&#32;T2&gt;&gt;&#32;{};
3354 
3355 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;T2&gt;
3356 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__constructible">is_constructible</link>&lt;const&#32;<link linkend="_namespacestd">std</link>::pair&lt;T1,&#32;T2&gt;&gt;&#32;:&#32;<link linkend="_structnlohmann_1_1detail_1_1is__default__constructible">is_default_constructible</link>&lt;const&#32;std::pair&lt;T1,&#32;T2&gt;&gt;&#32;{};
3357 
3358 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;Ts&gt;
3359 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__constructible">is_constructible</link>&lt;<link linkend="_namespacestd">std</link>::tuple&lt;Ts...&gt;&gt;&#32;:&#32;<link linkend="_structnlohmann_1_1detail_1_1is__default__constructible">is_default_constructible</link>&lt;std::tuple&lt;Ts...&gt;&gt;&#32;{};
3360 
3361 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;Ts&gt;
3362 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__constructible">is_constructible</link>&lt;const&#32;<link linkend="_namespacestd">std</link>::tuple&lt;Ts...&gt;&gt;&#32;:&#32;<link linkend="_structnlohmann_1_1detail_1_1is__default__constructible">is_default_constructible</link>&lt;const&#32;std::tuple&lt;Ts...&gt;&gt;&#32;{};
3363 
3364 
3365 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
3366 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__iterator__traits">is_iterator_traits</link>&#32;:&#32;std::false_type&#32;{};
3367 
3368 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3369 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__iterator__traits">is_iterator_traits</link>&lt;<link linkend="_structnlohmann_1_1detail_1_1iterator__traits">iterator_traits</link>&lt;T&gt;&gt;
3370 {
3371 &#32;&#32;<emphasis role="keyword">private</emphasis>:
3372 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1iterator__traits">traits</link>&#32;=&#32;<link linkend="_structnlohmann_1_1detail_1_1iterator__traits">iterator_traits&lt;T&gt;</link>;
3373 
3374 &#32;&#32;<emphasis role="keyword">public</emphasis>:
3375 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_classvalue">value</link>&#32;=
3376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a9135fcf616d6ac6e231a86e0a055ac44">is_detected&lt;value_type_t, traits&gt;::value</link>&#32;&amp;&amp;
3377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a9135fcf616d6ac6e231a86e0a055ac44">is_detected&lt;difference_type_t, traits&gt;::value</link>&#32;&amp;&amp;
3378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a9135fcf616d6ac6e231a86e0a055ac44">is_detected&lt;pointer_t, traits&gt;::value</link>&#32;&amp;&amp;
3379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a9135fcf616d6ac6e231a86e0a055ac44">is_detected&lt;iterator_category_t, traits&gt;::value</link>&#32;&amp;&amp;
3380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a9135fcf616d6ac6e231a86e0a055ac44">is_detected&lt;reference_t, traits&gt;::value</link>;
3381 };
3382 
3383 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3384 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__range">is_range</link>
3385 {
3386 &#32;&#32;<emphasis role="keyword">private</emphasis>:
3387 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>t_ref&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::add_lvalue_reference&lt;T&gt;::type;
3388 
3389 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>iterator&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a37e97a32d0b94ce5f745427e4e40204d">detected_t&lt;result_of_begin, t_ref&gt;</link>;
3390 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>sentinel&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a37e97a32d0b94ce5f745427e4e40204d">detected_t&lt;result_of_end, t_ref&gt;</link>;
3391 
3392 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;to&#32;be&#32;100%&#32;correct,&#32;it&#32;should&#32;use&#32;https://en.cppreference.com/w/cpp/iterator/input_or_output_iterator</emphasis>
3393 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;and&#32;https://en.cppreference.com/w/cpp/iterator/sentinel_for</emphasis>
3394 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;but&#32;reimplementing&#32;these&#32;would&#32;be&#32;too&#32;much&#32;work,&#32;as&#32;a&#32;lot&#32;of&#32;other&#32;concepts&#32;are&#32;used&#32;underneath</emphasis>
3395 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;is_iterator_begin&#32;=
3396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1is__iterator__traits">is_iterator_traits&lt;iterator_traits&lt;iterator&gt;</link>&gt;<link linkend="_structnlohmann_1_1detail_1_1is__range_1af7cd9fa19ca24709795adaae999e8ce9">::value</link>;
3397 
3398 &#32;&#32;<emphasis role="keyword">public</emphasis>:
3399 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classvalue">value</link>&#32;=&#32;!std::is_same&lt;iterator,&#32;nonesuch&gt;::value&#32;&amp;&amp;&#32;!std::is_same&lt;sentinel,&#32;nonesuch&gt;::value&#32;&amp;&amp;&#32;is_iterator_begin;
3400 };
3401 
3402 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;R&gt;
3403 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1a520ea901ba1560b9bc3e274b61497afe">iterator_t</link>&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t&lt;is_range&lt;R&gt;::value</link>,&#32;result_of_begin&lt;decltype(std::declval&lt;R&amp;&gt;())&gt;&gt;;
3404 
3405 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3406 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1a1eb075b086024e7c18e3a56db93a6688">range_value_t</link>&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1af91beae90c2fb0f931079b3d50a343bc">value_type_t&lt;iterator_traits&lt;iterator_t&lt;T&gt;</link>&gt;&gt;;
3407 
3408 <emphasis role="comment">//&#32;The&#32;following&#32;implementation&#32;of&#32;is_complete_type&#32;is&#32;taken&#32;from</emphasis>
3409 <emphasis role="comment">//&#32;https://blogs.msdn.microsoft.com/vcblog/2015/12/02/partial-support-for-expression-sfinae-in-vs-2015-update-1/</emphasis>
3410 <emphasis role="comment">//&#32;and&#32;is&#32;written&#32;by&#32;Xiang&#32;Fan&#32;who&#32;agreed&#32;to&#32;using&#32;it&#32;in&#32;this&#32;library.</emphasis>
3411 
3412 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
3413 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__complete__type">is_complete_type</link>&#32;:&#32;std::false_type&#32;{};
3414 
3415 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3416 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__complete__type">is_complete_type</link>&lt;T,&#32;decltype(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>(sizeof(T)))&gt;&#32;:&#32;std::true_type&#32;{};
3417 
3418 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;CompatibleObjectType,
3419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
3420 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__compatible__object__type__impl">is_compatible_object_type_impl</link>&#32;:&#32;std::false_type&#32;{};
3421 
3422 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;CompatibleObjectType&gt;
3423 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__compatible__object__type__impl">is_compatible_object_type_impl</link>&#32;&lt;
3424 &#32;&#32;&#32;&#32;BasicJsonType,&#32;CompatibleObjectType,
3425 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&#32;&lt;&#32;<link linkend="_namespacenlohmann_1_1detail_1a9135fcf616d6ac6e231a86e0a055ac44">is_detected</link>&lt;<link linkend="_namespacenlohmann_1_1detail_1a9c1795c148875722f8482d39e0eb9364">mapped_type_t</link>,&#32;CompatibleObjectType&gt;::<link linkend="_classvalue">value</link>&amp;&amp;
3426 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a9135fcf616d6ac6e231a86e0a055ac44">is_detected</link>&lt;key_type_t,&#32;CompatibleObjectType&gt;<link linkend="_classvalue">::value</link>&#32;&gt;&gt;
3427 {
3428 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__compatible__object__type__impl_3_01_basic_json_type_00_01_compat5b5eeaa8fc54c99a69d765462ac539f5_1ab019855b17c1a0cb16fda6731f338afc">object_t</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::object_t;
3429 
3430 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;macOS&apos;s&#32;is_constructible&#32;does&#32;not&#32;play&#32;well&#32;with&#32;nonesuch...</emphasis>
3431 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classvalue">value</link>&#32;=
3432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1is__constructible">is_constructible</link>&lt;<emphasis role="keyword">typename</emphasis>&#32;object_t::key_type,
3433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;CompatibleObjectType::key_type&gt;<link linkend="_classvalue">::value</link>&#32;&amp;&amp;
3434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1is__constructible">is_constructible</link>&lt;<emphasis role="keyword">typename</emphasis>&#32;object_t::mapped_type,
3435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;CompatibleObjectType::mapped_type&gt;<link linkend="_classvalue">::value</link>;
3436 };
3437 
3438 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;CompatibleObjectType&gt;
3439 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__compatible__object__type">is_compatible_object_type</link>
3440 &#32;&#32;&#32;&#32;:&#32;<link linkend="_structnlohmann_1_1detail_1_1is__compatible__object__type__impl">is_compatible_object_type_impl</link>&lt;BasicJsonType,&#32;CompatibleObjectType&gt;&#32;{};
3441 
3442 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;ConstructibleObjectType,
3443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
3444 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__constructible__object__type__impl">is_constructible_object_type_impl</link>&#32;:&#32;std::false_type&#32;{};
3445 
3446 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;ConstructibleObjectType&gt;
3447 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__constructible__object__type__impl">is_constructible_object_type_impl</link>&#32;&lt;
3448 &#32;&#32;&#32;&#32;BasicJsonType,&#32;ConstructibleObjectType,
3449 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&#32;&lt;&#32;<link linkend="_namespacenlohmann_1_1detail_1a9135fcf616d6ac6e231a86e0a055ac44">is_detected</link>&lt;<link linkend="_namespacenlohmann_1_1detail_1a9c1795c148875722f8482d39e0eb9364">mapped_type_t</link>,&#32;ConstructibleObjectType&gt;::<link linkend="_classvalue">value</link>&amp;&amp;
3450 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a9135fcf616d6ac6e231a86e0a055ac44">is_detected</link>&lt;key_type_t,&#32;ConstructibleObjectType&gt;<link linkend="_classvalue">::value</link>&#32;&gt;&gt;
3451 {
3452 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__constructible__object__type__impl_3_01_basic_json_type_00_01_con1038de539babd212ea0aef1cc5752545_1ae335fdc59d1b0d79e52a808b71b11c67">object_t</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::object_t;
3453 
3454 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classvalue">value</link>&#32;=
3455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<link linkend="_structnlohmann_1_1detail_1_1is__default__constructible">is_default_constructible&lt;ConstructibleObjectType&gt;::value</link>&#32;&amp;&amp;
3456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(std::is_move_assignable&lt;ConstructibleObjectType&gt;::value&#32;||
3457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_copy_assignable&lt;ConstructibleObjectType&gt;::value)&#32;&amp;&amp;
3458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<link linkend="_structnlohmann_1_1detail_1_1is__constructible">is_constructible</link>&lt;<emphasis role="keyword">typename</emphasis>&#32;ConstructibleObjectType::key_type,
3459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;object_t::key_type&gt;<link linkend="_classvalue">::value</link>&#32;&amp;&amp;
3460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_same&#32;&lt;
3461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;object_t::mapped_type,
3462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;ConstructibleObjectType::mapped_type&#32;&gt;<link linkend="_classvalue">::value</link>))&#32;||
3463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<link linkend="_structnlohmann_1_1detail_1_1has__from__json">has_from_json</link>&lt;BasicJsonType,
3464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;ConstructibleObjectType::mapped_type&gt;<link linkend="_classvalue">::value</link>&#32;||
3465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1has__non__default__from__json">has_non_default_from_json</link>&#32;&lt;
3466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BasicJsonType,
3467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;ConstructibleObjectType::mapped_type&#32;&gt;<link linkend="_classvalue">::value</link>);
3468 };
3469 
3470 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;ConstructibleObjectType&gt;
3471 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__constructible__object__type">is_constructible_object_type</link>
3472 &#32;&#32;&#32;&#32;:&#32;<link linkend="_structnlohmann_1_1detail_1_1is__constructible__object__type__impl">is_constructible_object_type_impl</link>&lt;BasicJsonType,
3473 &#32;&#32;&#32;&#32;&#32;&#32;ConstructibleObjectType&gt;&#32;{};
3474 
3475 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;CompatibleStringType&gt;
3476 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__compatible__string__type">is_compatible_string_type</link>
3477 {
3478 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_classvalue">value</link>&#32;=
3479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1is__constructible">is_constructible&lt;typename BasicJsonType::string_t, CompatibleStringType&gt;::value</link>;
3480 };
3481 
3482 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;ConstructibleStringType&gt;
3483 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__constructible__string__type">is_constructible_string_type</link>
3484 {
3485 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_classvalue">value</link>&#32;=
3486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1is__constructible">is_constructible</link>&lt;ConstructibleStringType,
3487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::string_t&gt;<link linkend="_structnlohmann_1_1detail_1_1is__constructible__string__type_1a7006ba555b7a92e3f35f8806f781a995">::value</link>;
3488 };
3489 
3490 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;CompatibleArrayType,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
3491 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__compatible__array__type__impl">is_compatible_array_type_impl</link>&#32;:&#32;std::false_type&#32;{};
3492 
3493 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;CompatibleArrayType&gt;
3494 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__compatible__array__type__impl">is_compatible_array_type_impl</link>&#32;&lt;
3495 &#32;&#32;&#32;&#32;BasicJsonType,&#32;CompatibleArrayType,
3496 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&#32;&lt;
3497 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a9135fcf616d6ac6e231a86e0a055ac44">is_detected</link>&lt;<link linkend="_namespacenlohmann_1_1detail_1a520ea901ba1560b9bc3e274b61497afe">iterator_t</link>,&#32;CompatibleArrayType&gt;::<link linkend="_classvalue">value</link>&amp;&amp;
3498 &#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1is__iterator__traits">is_iterator_traits</link>&lt;iterator_traits&lt;detected_t&lt;iterator_t,&#32;CompatibleArrayType&gt;&gt;&gt;<link linkend="_classvalue">::value</link>&amp;&amp;
3499 <emphasis role="comment">//&#32;special&#32;case&#32;for&#32;types&#32;like&#32;std::filesystem::path&#32;whose&#32;iterator&apos;s&#32;value_type&#32;are&#32;themselves</emphasis>
3500 <emphasis role="comment">//&#32;c.f.&#32;https://github.com/nlohmann/json/pull/3073</emphasis>
3501 &#32;&#32;&#32;&#32;!std::is_same&lt;CompatibleArrayType,&#32;detected_t&lt;range_value_t,&#32;CompatibleArrayType&gt;&gt;<link linkend="_classvalue">::value</link>&#32;&gt;&gt;
3502 {
3503 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classvalue">value</link>&#32;=
3504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1is__constructible">is_constructible</link>&lt;BasicJsonType,
3505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a1eb075b086024e7c18e3a56db93a6688">range_value_t&lt;CompatibleArrayType&gt;</link>&gt;<link linkend="_classvalue">::value</link>;
3506 };
3507 
3508 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;CompatibleArrayType&gt;
3509 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__compatible__array__type">is_compatible_array_type</link>
3510 &#32;&#32;&#32;&#32;:&#32;<link linkend="_structnlohmann_1_1detail_1_1is__compatible__array__type__impl">is_compatible_array_type_impl</link>&lt;BasicJsonType,&#32;CompatibleArrayType&gt;&#32;{};
3511 
3512 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;ConstructibleArrayType,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
3513 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__constructible__array__type__impl">is_constructible_array_type_impl</link>&#32;:&#32;std::false_type&#32;{};
3514 
3515 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;ConstructibleArrayType&gt;
3516 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__constructible__array__type__impl">is_constructible_array_type_impl</link>&#32;&lt;
3517 &#32;&#32;&#32;&#32;BasicJsonType,&#32;ConstructibleArrayType,
3518 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;<link linkend="_namespacestd">std</link>::is_same&lt;ConstructibleArrayType,
3519 &#32;&#32;&#32;&#32;typename&#32;BasicJsonType::value_type&gt;<link linkend="_classvalue">::value</link>&#32;&gt;&gt;
3520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;std::true_type&#32;{};
3521 
3522 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;ConstructibleArrayType&gt;
3523 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__constructible__array__type__impl">is_constructible_array_type_impl</link>&#32;&lt;
3524 &#32;&#32;&#32;&#32;BasicJsonType,&#32;ConstructibleArrayType,
3525 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&#32;&lt;&#32;!<link linkend="_namespacestd">std</link>::is_same&lt;ConstructibleArrayType,
3526 &#32;&#32;&#32;&#32;typename&#32;BasicJsonType::value_type&gt;<link linkend="_classvalue">::value</link>&amp;&amp;
3527 &#32;&#32;&#32;&#32;!<link linkend="_structnlohmann_1_1detail_1_1is__compatible__string__type">is_compatible_string_type</link>&lt;BasicJsonType,&#32;ConstructibleArrayType&gt;<link linkend="_classvalue">::value</link>&amp;&amp;
3528 &#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1is__default__constructible">is_default_constructible</link>&lt;ConstructibleArrayType&gt;<link linkend="_classvalue">::value</link>&amp;&amp;
3529 (std::is_move_assignable&lt;ConstructibleArrayType&gt;::value&#32;||
3530 &#32;std::is_copy_assignable&lt;ConstructibleArrayType&gt;::value)&amp;&amp;
3531 <link linkend="_namespacenlohmann_1_1detail_1a9135fcf616d6ac6e231a86e0a055ac44">is_detected</link>&lt;iterator_t,&#32;ConstructibleArrayType&gt;<link linkend="_classvalue">::value</link>&amp;&amp;
3532 <link linkend="_structnlohmann_1_1detail_1_1is__iterator__traits">is_iterator_traits</link>&lt;iterator_traits&lt;detected_t&lt;iterator_t,&#32;ConstructibleArrayType&gt;&gt;&gt;<link linkend="_classvalue">::value</link>&amp;&amp;
3533 <link linkend="_namespacenlohmann_1_1detail_1a9135fcf616d6ac6e231a86e0a055ac44">is_detected</link>&lt;range_value_t,&#32;ConstructibleArrayType&gt;<link linkend="_classvalue">::value</link>&amp;&amp;
3534 <emphasis role="comment">//&#32;special&#32;case&#32;for&#32;types&#32;like&#32;std::filesystem::path&#32;whose&#32;iterator&apos;s&#32;value_type&#32;are&#32;themselves</emphasis>
3535 <emphasis role="comment">//&#32;c.f.&#32;https://github.com/nlohmann/json/pull/3073</emphasis>
3536 !std::is_same&lt;ConstructibleArrayType,&#32;detected_t&lt;range_value_t,&#32;ConstructibleArrayType&gt;&gt;<link linkend="_classvalue">::value</link>&amp;&amp;
3537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1is__complete__type">is_complete_type</link>&#32;&lt;
3538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;detected_t&lt;range_value_t,&#32;ConstructibleArrayType&#32;&gt;&gt;<link linkend="_classvalue">::value</link>&#32;&gt;&gt;
3539 {
3540 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__constructible__array__type__impl_3_01_basic_json_type_00_01_cons27075d101b6ea0a206984ee0c21ea5d0_1a438d22266bdc2c931702813be54fe166">value_type</link>&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a1eb075b086024e7c18e3a56db93a6688">range_value_t&lt;ConstructibleArrayType&gt;</link>;
3541 
3542 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classvalue">value</link>&#32;=
3543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_same&lt;<link linkend="_structnlohmann_1_1detail_1_1is__constructible__array__type__impl_3_01_basic_json_type_00_01_cons27075d101b6ea0a206984ee0c21ea5d0_1a438d22266bdc2c931702813be54fe166">value_type</link>,
3544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::array_t::value_type&gt;<link linkend="_classvalue">::value</link>&#32;||
3545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1has__from__json">has_from_json</link>&lt;BasicJsonType,
3546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1is__constructible__array__type__impl_3_01_basic_json_type_00_01_cons27075d101b6ea0a206984ee0c21ea5d0_1a438d22266bdc2c931702813be54fe166">value_type</link>&gt;<link linkend="_classvalue">::value</link>&#32;||
3547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1has__non__default__from__json">has_non_default_from_json</link>&#32;&lt;
3548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BasicJsonType,
3549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1is__constructible__array__type__impl_3_01_basic_json_type_00_01_cons27075d101b6ea0a206984ee0c21ea5d0_1a438d22266bdc2c931702813be54fe166">value_type</link>&#32;&gt;<link linkend="_classvalue">::value</link>;
3550 };
3551 
3552 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;ConstructibleArrayType&gt;
3553 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__constructible__array__type">is_constructible_array_type</link>
3554 &#32;&#32;&#32;&#32;:&#32;<link linkend="_structnlohmann_1_1detail_1_1is__constructible__array__type__impl">is_constructible_array_type_impl</link>&lt;BasicJsonType,&#32;ConstructibleArrayType&gt;&#32;{};
3555 
3556 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;RealIntegerType,&#32;<emphasis role="keyword">typename</emphasis>&#32;CompatibleNumberIntegerType,
3557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
3558 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__compatible__integer__type__impl">is_compatible_integer_type_impl</link>&#32;:&#32;std::false_type&#32;{};
3559 
3560 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;RealIntegerType,&#32;<emphasis role="keyword">typename</emphasis>&#32;CompatibleNumberIntegerType&gt;
3561 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__compatible__integer__type__impl">is_compatible_integer_type_impl</link>&#32;&lt;
3562 &#32;&#32;&#32;&#32;RealIntegerType,&#32;CompatibleNumberIntegerType,
3563 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&#32;&lt;&#32;<link linkend="_namespacestd">std</link>::is_integral&lt;RealIntegerType&gt;<link linkend="_classvalue">::value</link>&amp;&amp;
3564 &#32;&#32;&#32;&#32;std::is_integral&lt;CompatibleNumberIntegerType&gt;<link linkend="_classvalue">::value</link>&amp;&amp;
3565 &#32;&#32;&#32;&#32;!std::is_same&lt;bool,&#32;CompatibleNumberIntegerType&gt;<link linkend="_classvalue">::value</link>&#32;&gt;&gt;
3566 {
3567 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;is&#32;there&#32;an&#32;assert&#32;somewhere&#32;on&#32;overflows?</emphasis>
3568 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__compatible__integer__type__impl_3_01_real_integer_type_00_01_combbf637f45e4984de1d118b9d7a65e604_1ab267aabfe36c5b9c305c5e5faf06ea36">RealLimits</link>&#32;=&#32;std::numeric_limits&lt;RealIntegerType&gt;;
3569 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__compatible__integer__type__impl_3_01_real_integer_type_00_01_combbf637f45e4984de1d118b9d7a65e604_1a24d97696ca33fba8096e452b1901a8e6">CompatibleLimits</link>&#32;=&#32;std::numeric_limits&lt;CompatibleNumberIntegerType&gt;;
3570 
3571 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_classvalue">value</link>&#32;=
3572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1is__constructible">is_constructible</link>&lt;RealIntegerType,
3573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CompatibleNumberIntegerType&gt;<link linkend="_classvalue">::value</link>&#32;&amp;&amp;
3574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CompatibleLimits::is_integer&#32;&amp;&amp;
3575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RealLimits::is_signed&#32;==&#32;CompatibleLimits::is_signed;
3576 };
3577 
3578 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;RealIntegerType,&#32;<emphasis role="keyword">typename</emphasis>&#32;CompatibleNumberIntegerType&gt;
3579 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__compatible__integer__type">is_compatible_integer_type</link>
3580 &#32;&#32;&#32;&#32;:&#32;<link linkend="_structnlohmann_1_1detail_1_1is__compatible__integer__type__impl">is_compatible_integer_type_impl</link>&lt;RealIntegerType,
3581 &#32;&#32;&#32;&#32;&#32;&#32;CompatibleNumberIntegerType&gt;&#32;{};
3582 
3583 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;CompatibleType,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
3584 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__compatible__type__impl">is_compatible_type_impl</link>:&#32;std::false_type&#32;{};
3585 
3586 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;CompatibleType&gt;
3587 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__compatible__type__impl">is_compatible_type_impl</link>&#32;&lt;
3588 &#32;&#32;&#32;&#32;BasicJsonType,&#32;CompatibleType,
3589 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;<link linkend="_structnlohmann_1_1detail_1_1is__complete__type">is_complete_type</link>&lt;CompatibleType&gt;::<link linkend="_classvalue">value</link>&#32;&gt;&gt;
3590 {
3591 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classvalue">value</link>&#32;=
3592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1has__to__json">has_to_json&lt;BasicJsonType, CompatibleType&gt;::value</link>;
3593 };
3594 
3595 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;CompatibleType&gt;
3596 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__compatible__type">is_compatible_type</link>
3597 &#32;&#32;&#32;&#32;:&#32;<link linkend="_structnlohmann_1_1detail_1_1is__compatible__type__impl">is_compatible_type_impl</link>&lt;BasicJsonType,&#32;CompatibleType&gt;&#32;{};
3598 
3599 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;T2&gt;
3600 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__constructible__tuple">is_constructible_tuple</link>&#32;:&#32;std::false_type&#32;{};
3601 
3602 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T1,&#32;<emphasis role="keyword">typename</emphasis>...&#32;Args&gt;
3603 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__constructible__tuple">is_constructible_tuple</link>&lt;T1,&#32;<link linkend="_namespacestd">std</link>::tuple&lt;Args...&gt;&gt;&#32;:&#32;<link linkend="_structnlohmann_1_1detail_1_1conjunction">conjunction</link>&lt;is_constructible&lt;T1,&#32;Args&gt;...&gt;&#32;{};
3604 
3605 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3606 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__json__iterator__of">is_json_iterator_of</link>&#32;:&#32;std::false_type&#32;{};
3607 
3608 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
3609 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__json__iterator__of">is_json_iterator_of</link>&lt;BasicJsonType,&#32;typename&#32;BasicJsonType::iterator&gt;&#32;:&#32;std::true_type&#32;{};
3610 
3611 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
3612 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__json__iterator__of">is_json_iterator_of</link>&lt;BasicJsonType,&#32;typename&#32;BasicJsonType::const_iterator&gt;&#32;:&#32;std::true_type
3613 {};
3614 
3615 <emphasis role="comment">//&#32;checks&#32;if&#32;a&#32;given&#32;type&#32;T&#32;is&#32;a&#32;template&#32;specialization&#32;of&#32;Primary</emphasis>
3616 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>Primary,&#32;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3617 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__specialization__of">is_specialization_of</link>&#32;:&#32;std::false_type&#32;{};
3618 
3619 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>Primary,&#32;<emphasis role="keyword">typename</emphasis>...&#32;Args&gt;
3620 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__specialization__of">is_specialization_of</link>&lt;Primary,&#32;Primary&lt;Args...&gt;&gt;&#32;:&#32;std::true_type&#32;{};
3621 
3622 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3623 <emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__specialization__of">is_json_pointer</link>&#32;=&#32;<link linkend="_structnlohmann_1_1detail_1_1is__specialization__of">is_specialization_of&lt;::nlohmann::json_pointer, uncvref_t&lt;T&gt;</link>&gt;;
3624 
3625 <emphasis role="comment">//&#32;checks&#32;if&#32;A&#32;and&#32;B&#32;are&#32;comparable&#32;using&#32;Compare&#32;functor</emphasis>
3626 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;A,&#32;<emphasis role="keyword">typename</emphasis>&#32;B,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
3627 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__comparable">is_comparable</link>&#32;:&#32;std::false_type&#32;{};
3628 
3629 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;A,&#32;<emphasis role="keyword">typename</emphasis>&#32;B&gt;
3630 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__comparable">is_comparable</link>&lt;Compare,&#32;A,&#32;B,&#32;<link linkend="_namespacenlohmann_1_1detail_1a92a167c49c6697b6ffe4f79492c705e5">void_t</link>&lt;
3631 decltype(<link linkend="_namespacestd">std</link>::declval&lt;Compare&gt;()(std::declval&lt;A&gt;(),&#32;std::declval&lt;B&gt;())),
3632 decltype(std::declval&lt;Compare&gt;()(std::declval&lt;B&gt;(),&#32;std::declval&lt;A&gt;()))
3633 &gt;&gt;&#32;:&#32;std::true_type&#32;{};
3634 
3635 <emphasis role="comment">//&#32;checks&#32;if&#32;BasicJsonType::object_t::key_type&#32;and&#32;KeyType&#32;are&#32;comparable&#32;using&#32;Compare&#32;functor</emphasis>
3636 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;KeyType&gt;
3637 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1aca254ee7eaae7285993f354c4e845618">is_key_type_comparable</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_structnlohmann_1_1detail_1_1is__comparable">is_comparable</link>&#32;&lt;
3638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::object_comparator_t,
3639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a66dfe39f03b05d6b7265a0ff748d64ef">key_type_t&lt;typename BasicJsonType::object_t&gt;</link>&amp;,
3640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;KeyType&#32;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
3641 
3642 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3643 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1abf19d85a572101c960440a3d92704795">detect_is_transparent</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;T::is_transparent;
3644 
3645 <emphasis role="comment">//&#32;type&#32;trait&#32;to&#32;check&#32;if&#32;KeyType&#32;can&#32;be&#32;used&#32;as&#32;object&#32;key</emphasis>
3646 <emphasis role="comment">//&#32;true&#32;if:</emphasis>
3647 <emphasis role="comment">//&#32;&#32;&#32;-&#32;KeyType&#32;is&#32;comparable&#32;with&#32;BasicJsonType::object_t::key_type</emphasis>
3648 <emphasis role="comment">//&#32;&#32;&#32;-&#32;if&#32;ExcludeObjectKeyType&#32;is&#32;true,&#32;KeyType&#32;is&#32;not&#32;BasicJsonType::object_t::key_type</emphasis>
3649 <emphasis role="comment">//&#32;&#32;&#32;-&#32;the&#32;comparator&#32;is&#32;transparent&#32;or&#32;RequireTransparentComparator&#32;is&#32;false</emphasis>
3650 <emphasis role="comment">//&#32;&#32;&#32;-&#32;KeyType&#32;is&#32;not&#32;a&#32;JSON&#32;iterator&#32;or&#32;json_pointer</emphasis>
3651 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;KeyTypeCVRef,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;RequireTransparentComparator&#32;=&#32;<emphasis role="keyword">true</emphasis>,
3652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ExcludeObjectKeyType&#32;=&#32;RequireTransparentComparator,&#32;<emphasis role="keyword">typename</emphasis>&#32;KeyType&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a53a082eedad9f4729fcd8fed552a21f7">uncvref_t&lt;KeyTypeCVRef&gt;</link>&gt;
3653 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1a4e8fbfae87f964a99124c7e26c3095fb">is_usable_as_key_type</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::conditional&#32;&lt;
3654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1aca254ee7eaae7285993f354c4e845618">is_key_type_comparable&lt;BasicJsonType, KeyTypeCVRef&gt;::value</link>
3655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!(ExcludeObjectKeyType&#32;&amp;&amp;&#32;std::is_same&lt;KeyType,
3656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::object_t::key_type&gt;<link linkend="_classvalue">::value</link>)
3657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(!RequireTransparentComparator&#32;||&#32;<link linkend="_namespacenlohmann_1_1detail_1a9135fcf616d6ac6e231a86e0a055ac44">is_detected</link>&#32;&lt;
3658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1abf19d85a572101c960440a3d92704795">detect_is_transparent</link>,
3659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::object_comparator_t&#32;&gt;<link linkend="_classvalue">::value</link>)
3660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!<link linkend="_structnlohmann_1_1detail_1_1is__json__iterator__of">is_json_iterator_of&lt;BasicJsonType, KeyType&gt;::value</link>
3661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!<link linkend="_structnlohmann_1_1detail_1_1is__specialization__of">is_json_pointer&lt;KeyType&gt;::value</link>,
3662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::true_type,
3663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::false_type&#32;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
3664 
3665 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;ObjectType,&#32;<emphasis role="keyword">typename</emphasis>&#32;KeyType&gt;
3666 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1ab87c9bcf91a334b083fd404c4f9b6bab">detect_erase_with_key_type</link>&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(std::declval&lt;ObjectType&amp;&gt;().erase(std::declval&lt;KeyType&gt;()));
3667 
3668 <emphasis role="comment">//&#32;type&#32;trait&#32;to&#32;check&#32;if&#32;object_t&#32;has&#32;an&#32;erase()&#32;member&#32;functions&#32;accepting&#32;KeyType</emphasis>
3669 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;KeyType&gt;
3670 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1a6512ad13626e93ed63e65817b5fa2abf">has_erase_with_key_type</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::conditional&#32;&lt;
3671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a9135fcf616d6ac6e231a86e0a055ac44">is_detected</link>&#32;&lt;
3672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1ab87c9bcf91a334b083fd404c4f9b6bab">detect_erase_with_key_type</link>,
3673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::object_t,&#32;KeyType&#32;&gt;<link linkend="_classvalue">::value</link>,
3674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::true_type,
3675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::false_type&#32;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
3676 
3677 <emphasis role="comment">//&#32;a&#32;naive&#32;helper&#32;to&#32;check&#32;if&#32;a&#32;type&#32;is&#32;an&#32;ordered_map&#32;(exploits&#32;the&#32;fact&#32;that</emphasis>
3678 <emphasis role="comment">//&#32;ordered_map&#32;inherits&#32;capacity()&#32;from&#32;std::vector)</emphasis>
3679 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3680 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__ordered__map">is_ordered_map</link>
3681 {
3682 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__ordered__map_1a99a559f257bee6888355dc2d18ed2a17">one</link>&#32;=&#32;char;
3683 
3684 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1is__ordered__map_1_1two">two</link>
3685 &#32;&#32;&#32;&#32;{
3686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[2];&#32;<emphasis role="comment">//&#32;NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)</emphasis>
3687 &#32;&#32;&#32;&#32;};
3688 
3689 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;C&gt;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_structnlohmann_1_1detail_1_1is__ordered__map_1a99a559f257bee6888355dc2d18ed2a17">one</link>&#32;<link linkend="_structnlohmann_1_1detail_1_1is__ordered__map_1adae06dbd38b0f19c5930d37db1a476b1">test</link>(&#32;<emphasis role="keyword">decltype</emphasis>(&amp;C::capacity)&#32;)&#32;;
3690 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;C&gt;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_structnlohmann_1_1detail_1_1is__ordered__map_1_1two">two</link>&#32;<link linkend="_structnlohmann_1_1detail_1_1is__ordered__map_1ac566c43218f7753a8c7c1867c907d1c4">test</link>(...);
3691 
3692 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;<link linkend="_classvalue">value</link>&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(test&lt;T&gt;(<emphasis role="keyword">nullptr</emphasis>))&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">char</emphasis>)&#32;};&#32;<emphasis role="comment">//&#32;NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)</emphasis>
3693 };
3694 
3695 <emphasis role="comment">//&#32;to&#32;avoid&#32;useless&#32;casts&#32;(see&#32;https://github.com/nlohmann/json/issues/2893#issuecomment-889152324)</emphasis>
3696 template&#32;&lt;&#32;typename&#32;T,&#32;typename&#32;U,&#32;enable_if_t&#32;&lt;&#32;!std::is_same&lt;T,&#32;U&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;&#32;=&#32;0&#32;&gt;
3697 T&#32;<link linkend="_namespacenlohmann_1_1detail_1af6c76d47b35f0493b1072b9323e98ca8">conditional_static_cast</link>(U&#32;<link linkend="_classvalue">value</link>)
3698 {
3699 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(<link linkend="_classvalue">value</link>);
3700 }
3701 
3702 template&lt;typename&#32;T,&#32;typename&#32;U,&#32;enable_if_t&lt;std::is_same&lt;T,&#32;U&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&gt;
3703 T&#32;<link linkend="_namespacenlohmann_1_1detail_1af6c76d47b35f0493b1072b9323e98ca8">conditional_static_cast</link>(U&#32;<link linkend="_classvalue">value</link>)
3704 {
3705 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classvalue">value</link>;
3706 }
3707 
3708 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
3709 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann</emphasis>
3710 
3711 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/string_concat.hpp&gt;</emphasis>
3712 
3713 
3714 <emphasis role="preprocessor">#include&#32;&lt;cstring&gt;</emphasis>&#32;<emphasis role="comment">//&#32;strlen</emphasis>
3715 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>&#32;<emphasis role="comment">//&#32;string</emphasis>
3716 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>&#32;<emphasis role="comment">//&#32;forward</emphasis>
3717 
3718 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/meta/cpp_future.hpp&gt;</emphasis>
3719 
3720 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/meta/detected.hpp&gt;</emphasis>
3721 
3722 
3723 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann">nlohmann</link>
3724 {
3725 <emphasis role="keyword">namespace&#32;</emphasis>detail
3726 {
3727 
3728 <emphasis role="keyword">inline</emphasis>&#32;std::size_t&#32;<link linkend="_namespacenlohmann_1_1detail_1ade7da17ad4a5a2be5bc12a6427a3c207">concat_length</link>()
3729 {
3730 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
3731 }
3732 
3733 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;Args&gt;
3734 <emphasis role="keyword">inline</emphasis>&#32;std::size_t&#32;<link linkend="_namespacenlohmann_1_1detail_1ade7da17ad4a5a2be5bc12a6427a3c207">concat_length</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;cstr,&#32;Args&amp;&amp;&#32;...&#32;rest);
3735 
3736 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;StringType,&#32;<emphasis role="keyword">typename</emphasis>...&#32;Args&gt;
3737 <emphasis role="keyword">inline</emphasis>&#32;std::size_t&#32;<link linkend="_namespacenlohmann_1_1detail_1ade7da17ad4a5a2be5bc12a6427a3c207">concat_length</link>(<emphasis role="keyword">const</emphasis>&#32;StringType&amp;&#32;str,&#32;Args&amp;&amp;&#32;...&#32;rest);
3738 
3739 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;Args&gt;
3740 <emphasis role="keyword">inline</emphasis>&#32;std::size_t&#32;<link linkend="_namespacenlohmann_1_1detail_1ade7da17ad4a5a2be5bc12a6427a3c207">concat_length</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="comment">/*c*/</emphasis>,&#32;Args&amp;&amp;&#32;...&#32;rest)
3741 {
3742 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1&#32;+&#32;<link linkend="_namespacenlohmann_1_1detail_1ade7da17ad4a5a2be5bc12a6427a3c207">concat_length</link>(std::forward&lt;Args&gt;(rest)...);
3743 }
3744 
3745 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;Args&gt;
3746 <emphasis role="keyword">inline</emphasis>&#32;std::size_t&#32;<link linkend="_namespacenlohmann_1_1detail_1ade7da17ad4a5a2be5bc12a6427a3c207">concat_length</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;cstr,&#32;Args&amp;&amp;&#32;...&#32;rest)
3747 {
3748 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;cppcheck-suppress&#32;ignoredReturnValue</emphasis>
3749 &#32;&#32;&#32;&#32;return&#32;::strlen(cstr)&#32;+&#32;<link linkend="_namespacenlohmann_1_1detail_1ade7da17ad4a5a2be5bc12a6427a3c207">concat_length</link>(std::forward&lt;Args&gt;(rest)...);
3750 }
3751 
3752 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;StringType,&#32;<emphasis role="keyword">typename</emphasis>...&#32;Args&gt;
3753 <emphasis role="keyword">inline</emphasis>&#32;std::size_t&#32;<link linkend="_namespacenlohmann_1_1detail_1ade7da17ad4a5a2be5bc12a6427a3c207">concat_length</link>(<emphasis role="keyword">const</emphasis>&#32;StringType&amp;&#32;str,&#32;Args&amp;&amp;&#32;...&#32;rest)
3754 {
3755 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;str.size()&#32;+&#32;<link linkend="_namespacenlohmann_1_1detail_1ade7da17ad4a5a2be5bc12a6427a3c207">concat_length</link>(std::forward&lt;Args&gt;(rest)...);
3756 }
3757 
3758 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;OutStringType&gt;
3759 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a8501011f8c39fdc1451d41a17032a9c1">concat_into</link>(OutStringType&amp;&#32;<emphasis role="comment">/*out*/</emphasis>)
3760 {}
3761 
3762 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;StringType,&#32;<emphasis role="keyword">typename</emphasis>&#32;Arg&gt;
3763 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1a586e6ff28034ee3ec4401c5084f4528e">string_can_append</link>&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(std::declval&lt;StringType&amp;&gt;().append(std::declval&#32;&lt;&#32;Arg&#32;&amp;&amp;&#32;&gt;&#32;()));
3764 
3765 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;StringType,&#32;<emphasis role="keyword">typename</emphasis>&#32;Arg&gt;
3766 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1a29bfb663fbc654255b1ede85e38856ca">detect_string_can_append</link>&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a9135fcf616d6ac6e231a86e0a055ac44">is_detected&lt;string_can_append, StringType, Arg&gt;</link>;
3767 
3768 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;StringType,&#32;<emphasis role="keyword">typename</emphasis>&#32;Arg&gt;
3769 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1ae276c07102bfafe8dadbd2c8d4778666">string_can_append_op</link>&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(std::declval&lt;StringType&amp;&gt;()&#32;+=&#32;std::declval&#32;&lt;&#32;Arg&#32;&amp;&amp;&#32;&gt;&#32;());
3770 
3771 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;StringType,&#32;<emphasis role="keyword">typename</emphasis>&#32;Arg&gt;
3772 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1ae0aacc9e080718fa30659a3275dd804b">detect_string_can_append_op</link>&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a9135fcf616d6ac6e231a86e0a055ac44">is_detected&lt;string_can_append_op, StringType, Arg&gt;</link>;
3773 
3774 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;StringType,&#32;<emphasis role="keyword">typename</emphasis>&#32;Arg&gt;
3775 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1abacf1983baed06ea5405146b0944c39d">string_can_append_iter</link>&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(std::declval&lt;StringType&amp;&gt;().append(std::declval&lt;const&#32;Arg&amp;&gt;().begin(),&#32;std::declval&lt;const&#32;Arg&amp;&gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()));
3776 
3777 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;StringType,&#32;<emphasis role="keyword">typename</emphasis>&#32;Arg&gt;
3778 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1a1861f42509bbf3272b7b451d0fb59374">detect_string_can_append_iter</link>&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a9135fcf616d6ac6e231a86e0a055ac44">is_detected&lt;string_can_append_iter, StringType, Arg&gt;</link>;
3779 
3780 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;StringType,&#32;<emphasis role="keyword">typename</emphasis>&#32;Arg&gt;
3781 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1a083eb22c6777a8c28ea3c4721e4dd5b7">string_can_append_data</link>&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(std::declval&lt;StringType&amp;&gt;().append(std::declval&lt;const&#32;Arg&amp;&gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>(),&#32;std::declval&lt;const&#32;Arg&amp;&gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()));
3782 
3783 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;StringType,&#32;<emphasis role="keyword">typename</emphasis>&#32;Arg&gt;
3784 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1a9220ff36b04e15fcd63befa6d6c9a978">detect_string_can_append_data</link>&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a9135fcf616d6ac6e231a86e0a055ac44">is_detected&lt;string_can_append_data, StringType, Arg&gt;</link>;
3785 
3786 <emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;OutStringType,&#32;<emphasis role="keyword">typename</emphasis>&#32;Arg,&#32;<emphasis role="keyword">typename</emphasis>...&#32;Args,
3787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enable_if_t&#32;&lt;&#32;!detect_string_can_append&lt;OutStringType,&#32;Arg&gt;::value
3788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="_namespacenlohmann_1_1detail_1ae0aacc9e080718fa30659a3275dd804b">detect_string_can_append_op&lt;OutStringType, Arg&gt;::value</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;&#32;=&#32;0&#32;&gt;
3789 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a8501011f8c39fdc1451d41a17032a9c1">concat_into</link>(OutStringType&amp;&#32;out,&#32;Arg&#32;&amp;&amp;&#32;arg,&#32;Args&#32;&amp;&amp;&#32;...&#32;rest);
3790 
3791 <emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;OutStringType,&#32;<emphasis role="keyword">typename</emphasis>&#32;Arg,&#32;<emphasis role="keyword">typename</emphasis>...&#32;Args,
3792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enable_if_t&#32;&lt;&#32;!detect_string_can_append&lt;OutStringType,&#32;Arg&gt;::value
3793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!<link linkend="_namespacenlohmann_1_1detail_1ae0aacc9e080718fa30659a3275dd804b">detect_string_can_append_op&lt;OutStringType, Arg&gt;::value</link>
3794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="_namespacenlohmann_1_1detail_1a1861f42509bbf3272b7b451d0fb59374">detect_string_can_append_iter&lt;OutStringType, Arg&gt;::value</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;&#32;=&#32;0&#32;&gt;
3795 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a8501011f8c39fdc1451d41a17032a9c1">concat_into</link>(OutStringType&amp;&#32;out,&#32;<emphasis role="keyword">const</emphasis>&#32;Arg&amp;&#32;arg,&#32;Args&#32;&amp;&amp;&#32;...&#32;rest);
3796 
3797 <emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;OutStringType,&#32;<emphasis role="keyword">typename</emphasis>&#32;Arg,&#32;<emphasis role="keyword">typename</emphasis>...&#32;Args,
3798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enable_if_t&#32;&lt;&#32;!detect_string_can_append&lt;OutStringType,&#32;Arg&gt;::value
3799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!<link linkend="_namespacenlohmann_1_1detail_1ae0aacc9e080718fa30659a3275dd804b">detect_string_can_append_op&lt;OutStringType, Arg&gt;::value</link>
3800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!<link linkend="_namespacenlohmann_1_1detail_1a1861f42509bbf3272b7b451d0fb59374">detect_string_can_append_iter&lt;OutStringType, Arg&gt;::value</link>
3801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="_namespacenlohmann_1_1detail_1a9220ff36b04e15fcd63befa6d6c9a978">detect_string_can_append_data&lt;OutStringType, Arg&gt;::value</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;&#32;=&#32;0&#32;&gt;
3802 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a8501011f8c39fdc1451d41a17032a9c1">concat_into</link>(OutStringType&amp;&#32;out,&#32;<emphasis role="keyword">const</emphasis>&#32;Arg&amp;&#32;arg,&#32;Args&#32;&amp;&amp;&#32;...&#32;rest);
3803 
3804 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;OutStringType,&#32;<emphasis role="keyword">typename</emphasis>&#32;Arg,&#32;<emphasis role="keyword">typename</emphasis>...&#32;Args,
3805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t&lt;detect_string_can_append&lt;OutStringType, Arg&gt;::value</link>,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&gt;
3806 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a8501011f8c39fdc1451d41a17032a9c1">concat_into</link>(OutStringType&amp;&#32;out,&#32;Arg&#32;&amp;&amp;&#32;arg,&#32;Args&#32;&amp;&amp;&#32;...&#32;rest)
3807 {
3808 &#32;&#32;&#32;&#32;out.append(std::forward&lt;Arg&gt;(arg));
3809 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a8501011f8c39fdc1451d41a17032a9c1">concat_into</link>(out,&#32;std::forward&lt;Args&gt;(rest)...);
3810 }
3811 
3812 <emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;OutStringType,&#32;<emphasis role="keyword">typename</emphasis>&#32;Arg,&#32;<emphasis role="keyword">typename</emphasis>...&#32;Args,
3813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enable_if_t&#32;&lt;&#32;!detect_string_can_append&lt;OutStringType,&#32;Arg&gt;::value
3814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;detect_string_can_append_op&lt;OutStringType,&#32;Arg&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;&#32;&gt;
3815 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a8501011f8c39fdc1451d41a17032a9c1">concat_into</link>(OutStringType&amp;&#32;out,&#32;Arg&amp;&amp;&#32;arg,&#32;Args&amp;&amp;&#32;...&#32;rest)
3816 {
3817 &#32;&#32;&#32;&#32;out&#32;+=&#32;std::forward&lt;Arg&gt;(arg);
3818 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a8501011f8c39fdc1451d41a17032a9c1">concat_into</link>(out,&#32;std::forward&lt;Args&gt;(rest)...);
3819 }
3820 
3821 <emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;OutStringType,&#32;<emphasis role="keyword">typename</emphasis>&#32;Arg,&#32;<emphasis role="keyword">typename</emphasis>...&#32;Args,
3822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enable_if_t&#32;&lt;&#32;!detect_string_can_append&lt;OutStringType,&#32;Arg&gt;::value
3823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!detect_string_can_append_op&lt;OutStringType,&#32;Arg&gt;::value
3824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;detect_string_can_append_iter&lt;OutStringType,&#32;Arg&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;&#32;&gt;
3825 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a8501011f8c39fdc1451d41a17032a9c1">concat_into</link>(OutStringType&amp;&#32;out,&#32;<emphasis role="keyword">const</emphasis>&#32;Arg&amp;&#32;arg,&#32;Args&amp;&amp;&#32;...&#32;rest)
3826 {
3827 &#32;&#32;&#32;&#32;out.append(arg.begin(),&#32;arg.end());
3828 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a8501011f8c39fdc1451d41a17032a9c1">concat_into</link>(out,&#32;std::forward&lt;Args&gt;(rest)...);
3829 }
3830 
3831 <emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;OutStringType,&#32;<emphasis role="keyword">typename</emphasis>&#32;Arg,&#32;<emphasis role="keyword">typename</emphasis>...&#32;Args,
3832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enable_if_t&#32;&lt;&#32;!detect_string_can_append&lt;OutStringType,&#32;Arg&gt;::value
3833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!detect_string_can_append_op&lt;OutStringType,&#32;Arg&gt;::value
3834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!detect_string_can_append_iter&lt;OutStringType,&#32;Arg&gt;::value
3835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;detect_string_can_append_data&lt;OutStringType,&#32;Arg&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;&#32;&gt;
3836 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a8501011f8c39fdc1451d41a17032a9c1">concat_into</link>(OutStringType&amp;&#32;out,&#32;<emphasis role="keyword">const</emphasis>&#32;Arg&amp;&#32;arg,&#32;Args&amp;&amp;&#32;...&#32;rest)
3837 {
3838 &#32;&#32;&#32;&#32;out.append(arg.data(),&#32;arg.size());
3839 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a8501011f8c39fdc1451d41a17032a9c1">concat_into</link>(out,&#32;std::forward&lt;Args&gt;(rest)...);
3840 }
3841 
3842 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;OutStringType&#32;=&#32;std::string,&#32;<emphasis role="keyword">typename</emphasis>...&#32;Args&gt;
3843 <emphasis role="keyword">inline</emphasis>&#32;OutStringType&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(Args&#32;&amp;&amp;&#32;...&#32;args)
3844 {
3845 &#32;&#32;&#32;&#32;OutStringType&#32;str;
3846 &#32;&#32;&#32;&#32;str.reserve(<link linkend="_namespacenlohmann_1_1detail_1ade7da17ad4a5a2be5bc12a6427a3c207">concat_length</link>(std::forward&lt;Args&gt;(args)...));
3847 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a8501011f8c39fdc1451d41a17032a9c1">concat_into</link>(str,&#32;std::forward&lt;Args&gt;(args)...);
3848 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;str;
3849 }
3850 
3851 }&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
3852 }&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann</emphasis>
3853 
3854 
3855 
3856 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann">nlohmann</link>
3857 {
3858 <emphasis role="keyword">namespace&#32;</emphasis>detail
3859 {
3861 <emphasis role="comment">//&#32;exceptions&#32;//</emphasis>
3863 
3866 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1exception">exception</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_classstd_1_1exception">std::exception</link>
3867 {
3868 &#32;&#32;<emphasis role="keyword">public</emphasis>:
3870 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_classnlohmann_1_1detail_1_1exception_1ad863f4455f8bb2ea006a78e6fcf0b090">what</link>()&#32;const&#32;noexcept<emphasis role="keyword">&#32;override</emphasis>
3871 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
3872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m.what();
3873 &#32;&#32;&#32;&#32;}
3874 
3876 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1exception_1a0d4589a3fb54e81646d986c05efa3b9a">id</link>;&#32;<emphasis role="comment">//&#32;NOLINT(cppcoreguidelines-non-private-member-variables-in-classes)</emphasis>
3877 
3878 &#32;&#32;<emphasis role="keyword">protected</emphasis>:
3879 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a5338981b5ad9027c9e54b1c5597f4344">JSON_HEDLEY_NON_NULL</link>(3)
3880 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1exception">exception</link>(<emphasis role="keywordtype">int</emphasis>&#32;id_,&#32;const&#32;<emphasis role="keywordtype">char</emphasis>*&#32;what_arg)&#32;:&#32;<emphasis role="keywordtype">id</emphasis>(id_),&#32;m(what_arg)&#32;{}&#32;<emphasis role="comment">//&#32;NOLINT(bugprone-throw-keyword-missing)</emphasis>
3881 
3882 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_classnlohmann_1_1detail_1_1exception_1abf41a7e9178356314082284e6cfea278">name</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;ename,&#32;<emphasis role="keywordtype">int</emphasis>&#32;id_)
3883 &#32;&#32;&#32;&#32;{
3884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;[json.exception.&quot;</emphasis>,&#32;ename,&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>,&#32;std::to_string(id_),&#32;<emphasis role="stringliteral">&quot;]&#32;&quot;</emphasis>);
3885 &#32;&#32;&#32;&#32;}
3886 
3887 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_classnlohmann_1_1detail_1_1exception_1a9032b2e5d344c9f1f7afef4212f0ad39">diagnostics</link>(std::nullptr_t&#32;<emphasis role="comment">/*leaf_element*/</emphasis>)
3888 &#32;&#32;&#32;&#32;{
3889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
3890 &#32;&#32;&#32;&#32;}
3891 
3892 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
3893 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_classnlohmann_1_1detail_1_1exception_1a9f8f89e64fc50d8840e35a5e1c154f73">diagnostics</link>(<emphasis role="keyword">const</emphasis>&#32;BasicJsonType*&#32;leaf_element)
3894 &#32;&#32;&#32;&#32;{
3895 <emphasis role="preprocessor">#if&#32;JSON_DIAGNOSTICS</emphasis>
3896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;tokens;
3897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>*&#32;current&#32;=&#32;leaf_element;&#32;current&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>&#32;&amp;&amp;&#32;current-&gt;m_parent&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>;&#32;current&#32;=&#32;current-&gt;m_parent)
3898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(current-&gt;m_parent-&gt;type())
3900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">value_t::array</link>:
3902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;current-&gt;m_parent-&gt;m_value.array-&gt;size();&#32;++i)
3904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&amp;current-&gt;m_parent-&gt;m_value.array-&gt;operator[](i)&#32;==&#32;current)
3906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tokens.emplace_back(std::to_string(i));
3908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
3909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
3912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3913 
3914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">value_t::object</link>:
3915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;element&#32;:&#32;*current-&gt;m_parent-&gt;m_value.object)
3917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&amp;element.second&#32;==&#32;current)
3919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tokens.emplace_back(element.first.c_str());
3921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
3922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
3925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3926 
3927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">value_t::null</link>:&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
3928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">value_t::string</link>:&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
3929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">value_t::boolean</link>:&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
3930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">value_t::number_integer</link>:&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
3931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">value_t::number_unsigned</link>:&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
3932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">value_t::number_float</link>:&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
3933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">value_t::binary</link>:&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
3934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">value_t::discarded</link>:&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
3935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;&#32;&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
3936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
3937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3939 
3940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(tokens.empty())
3941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
3943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3944 
3945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;str&#32;=&#32;std::accumulate(tokens.rbegin(),&#32;tokens.rend(),&#32;std::string{},
3946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>)
3947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;concat(a,&#32;<emphasis role="stringliteral">&apos;/&apos;</emphasis>,&#32;detail::escape(b));
3949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
3950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="charliteral">&apos;(&apos;</emphasis>,&#32;str,&#32;<emphasis role="stringliteral">&quot;)&#32;&quot;</emphasis>);
3951 <emphasis role="preprocessor">#else</emphasis>
3952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis><emphasis role="keyword">&gt;</emphasis>(leaf_element);
3953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
3954 <emphasis role="preprocessor">#endif</emphasis>
3955 &#32;&#32;&#32;&#32;}
3956 
3957 &#32;&#32;<emphasis role="keyword">private</emphasis>:
3959 &#32;&#32;&#32;&#32;std::runtime_error&#32;m;
3960 };
3961 
3964 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1parse__error">parse_error</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1exception">exception</link>
3965 {
3966 &#32;&#32;<emphasis role="keyword">public</emphasis>:
3976 &#32;&#32;&#32;&#32;template&lt;typename&#32;BasicJsonContext,&#32;enable_if_t&lt;is_basic_json_context&lt;BasicJsonContext&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&gt;
3977 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1parse__error">parse_error</link>&#32;<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">create</link>(<emphasis role="keywordtype">int</emphasis>&#32;id_,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structnlohmann_1_1detail_1_1position__t">position_t</link>&amp;&#32;pos,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;what_arg,&#32;BasicJsonContext&#32;context)
3978 &#32;&#32;&#32;&#32;{
3979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a1ad83f255afd4038129297b57ef91603">w</link>&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<link linkend="_classnlohmann_1_1detail_1_1exception_1abf41a7e9178356314082284e6cfea278">exception::name</link>(<emphasis role="stringliteral">&quot;parse_error&quot;</emphasis>,&#32;id_),&#32;<emphasis role="stringliteral">&quot;parse&#32;error&quot;</emphasis>,
3980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;position_string(pos),&#32;<emphasis role="stringliteral">&quot;:&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1detail_1_1exception_1a9032b2e5d344c9f1f7afef4212f0ad39">exception::diagnostics</link>(context),&#32;what_arg);
3981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{id_,&#32;pos.<link linkend="_structnlohmann_1_1detail_1_1position__t_1a94cf85cd91d478c20ae143eba906ea1a">chars_read_total</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a1ad83f255afd4038129297b57ef91603">w</link>.c_str()};
3982 &#32;&#32;&#32;&#32;}
3983 
3984 &#32;&#32;&#32;&#32;template&lt;typename&#32;BasicJsonContext,&#32;enable_if_t&lt;is_basic_json_context&lt;BasicJsonContext&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&gt;
3985 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1parse__error">parse_error</link>&#32;<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a80f6011cc0a2ef991c11c53bd9ac50dd">create</link>(<emphasis role="keywordtype">int</emphasis>&#32;id_,&#32;std::size_t&#32;byte_,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;what_arg,&#32;BasicJsonContext&#32;context)
3986 &#32;&#32;&#32;&#32;{
3987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a1ad83f255afd4038129297b57ef91603">w</link>&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<link linkend="_classnlohmann_1_1detail_1_1exception_1abf41a7e9178356314082284e6cfea278">exception::name</link>(<emphasis role="stringliteral">&quot;parse_error&quot;</emphasis>,&#32;id_),&#32;<emphasis role="stringliteral">&quot;parse&#32;error&quot;</emphasis>,
3988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(byte_&#32;!=&#32;0&#32;?&#32;(<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;&#32;at&#32;byte&#32;&quot;</emphasis>,&#32;std::to_string(byte_)))&#32;:&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>),
3989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;:&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1detail_1_1exception_1a9032b2e5d344c9f1f7afef4212f0ad39">exception::diagnostics</link>(context),&#32;what_arg);
3990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{id_,&#32;byte_,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a1ad83f255afd4038129297b57ef91603">w</link>.c_str()};
3991 &#32;&#32;&#32;&#32;}
3992 
4002 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::size_t&#32;<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a9505aaa1ca943be927eec7cc579592ff">byte</link>;
4003 
4004 &#32;&#32;<emphasis role="keyword">private</emphasis>:
4005 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1parse__error">parse_error</link>(<emphasis role="keywordtype">int</emphasis>&#32;id_,&#32;std::size_t&#32;byte_,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;what_arg)
4006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classnlohmann_1_1detail_1_1exception">exception</link>(id_,&#32;what_arg),&#32;<link linkend="__classes_2lib_2raylib_2src_2rlgl_8h_1a0c8186d9b9b7880309c27230bbb5e69d">byte</link>(byte_)&#32;{}
4007 
4008 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;position_string(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structnlohmann_1_1detail_1_1position__t">position_t</link>&amp;&#32;pos)
4009 &#32;&#32;&#32;&#32;{
4010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;&#32;at&#32;line&#32;&quot;</emphasis>,&#32;std::to_string(pos.<link linkend="_structnlohmann_1_1detail_1_1position__t_1a4bbad8bc2c0d17c1b61c3ce729908b71">lines_read</link>&#32;+&#32;1),
4011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;,&#32;column&#32;&quot;</emphasis>,&#32;std::to_string(pos.<link linkend="_structnlohmann_1_1detail_1_1position__t_1a74df94563dd32102152ceb8c6d9041d8">chars_read_current_line</link>));
4012 &#32;&#32;&#32;&#32;}
4013 };
4014 
4017 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1invalid__iterator">invalid_iterator</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1exception">exception</link>
4018 {
4019 &#32;&#32;<emphasis role="keyword">public</emphasis>:
4020 &#32;&#32;&#32;&#32;template&lt;typename&#32;BasicJsonContext,&#32;enable_if_t&lt;is_basic_json_context&lt;BasicJsonContext&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&gt;
4021 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1invalid__iterator">invalid_iterator</link>&#32;<link linkend="_classnlohmann_1_1detail_1_1invalid__iterator_1af6e8410249ce3252f5e7294cd4ef0a28">create</link>(<emphasis role="keywordtype">int</emphasis>&#32;id_,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;what_arg,&#32;BasicJsonContext&#32;context)
4022 &#32;&#32;&#32;&#32;{
4023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a1ad83f255afd4038129297b57ef91603">w</link>&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<link linkend="_classnlohmann_1_1detail_1_1exception_1abf41a7e9178356314082284e6cfea278">exception::name</link>(<emphasis role="stringliteral">&quot;invalid_iterator&quot;</emphasis>,&#32;id_),&#32;<link linkend="_classnlohmann_1_1detail_1_1exception_1a9032b2e5d344c9f1f7afef4212f0ad39">exception::diagnostics</link>(context),&#32;what_arg);
4024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{id_,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a1ad83f255afd4038129297b57ef91603">w</link>.c_str()};
4025 &#32;&#32;&#32;&#32;}
4026 
4027 &#32;&#32;<emphasis role="keyword">private</emphasis>:
4028 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a5338981b5ad9027c9e54b1c5597f4344">JSON_HEDLEY_NON_NULL</link>(3)
4029 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1invalid__iterator">invalid_iterator</link>(<emphasis role="keywordtype">int</emphasis>&#32;id_,&#32;const&#32;<emphasis role="keywordtype">char</emphasis>*&#32;what_arg)
4030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classnlohmann_1_1detail_1_1exception">exception</link>(id_,&#32;what_arg)&#32;{}
4031 };
4032 
4035 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1type__error">type_error</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1exception">exception</link>
4036 {
4037 &#32;&#32;<emphasis role="keyword">public</emphasis>:
4038 &#32;&#32;&#32;&#32;template&lt;typename&#32;BasicJsonContext,&#32;enable_if_t&lt;is_basic_json_context&lt;BasicJsonContext&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&gt;
4039 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1type__error">type_error</link>&#32;<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">create</link>(<emphasis role="keywordtype">int</emphasis>&#32;id_,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;what_arg,&#32;BasicJsonContext&#32;context)
4040 &#32;&#32;&#32;&#32;{
4041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a1ad83f255afd4038129297b57ef91603">w</link>&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<link linkend="_classnlohmann_1_1detail_1_1exception_1abf41a7e9178356314082284e6cfea278">exception::name</link>(<emphasis role="stringliteral">&quot;type_error&quot;</emphasis>,&#32;id_),&#32;<link linkend="_classnlohmann_1_1detail_1_1exception_1a9032b2e5d344c9f1f7afef4212f0ad39">exception::diagnostics</link>(context),&#32;what_arg);
4042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{id_,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a1ad83f255afd4038129297b57ef91603">w</link>.c_str()};
4043 &#32;&#32;&#32;&#32;}
4044 
4045 &#32;&#32;<emphasis role="keyword">private</emphasis>:
4046 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a5338981b5ad9027c9e54b1c5597f4344">JSON_HEDLEY_NON_NULL</link>(3)
4047 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1type__error">type_error</link>(<emphasis role="keywordtype">int</emphasis>&#32;id_,&#32;const&#32;<emphasis role="keywordtype">char</emphasis>*&#32;what_arg)&#32;:&#32;<link linkend="_classnlohmann_1_1detail_1_1exception">exception</link>(id_,&#32;what_arg)&#32;{}
4048 };
4049 
4052 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1out__of__range">out_of_range</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1exception">exception</link>
4053 {
4054 &#32;&#32;<emphasis role="keyword">public</emphasis>:
4055 &#32;&#32;&#32;&#32;template&lt;typename&#32;BasicJsonContext,&#32;enable_if_t&lt;is_basic_json_context&lt;BasicJsonContext&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&gt;
4056 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1out__of__range">out_of_range</link>&#32;<link linkend="_classnlohmann_1_1detail_1_1out__of__range_1a4c0af7bdbf4f20e0812900639829028e">create</link>(<emphasis role="keywordtype">int</emphasis>&#32;id_,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;what_arg,&#32;BasicJsonContext&#32;context)
4057 &#32;&#32;&#32;&#32;{
4058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a1ad83f255afd4038129297b57ef91603">w</link>&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<link linkend="_classnlohmann_1_1detail_1_1exception_1abf41a7e9178356314082284e6cfea278">exception::name</link>(<emphasis role="stringliteral">&quot;out_of_range&quot;</emphasis>,&#32;id_),&#32;<link linkend="_classnlohmann_1_1detail_1_1exception_1a9032b2e5d344c9f1f7afef4212f0ad39">exception::diagnostics</link>(context),&#32;what_arg);
4059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{id_,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a1ad83f255afd4038129297b57ef91603">w</link>.c_str()};
4060 &#32;&#32;&#32;&#32;}
4061 
4062 &#32;&#32;<emphasis role="keyword">private</emphasis>:
4063 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a5338981b5ad9027c9e54b1c5597f4344">JSON_HEDLEY_NON_NULL</link>(3)
4064 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1out__of__range">out_of_range</link>(<emphasis role="keywordtype">int</emphasis>&#32;id_,&#32;const&#32;<emphasis role="keywordtype">char</emphasis>*&#32;what_arg)&#32;:&#32;<link linkend="_classnlohmann_1_1detail_1_1exception">exception</link>(id_,&#32;what_arg)&#32;{}
4065 };
4066 
4069 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1other__error">other_error</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1exception">exception</link>
4070 {
4071 &#32;&#32;<emphasis role="keyword">public</emphasis>:
4072 &#32;&#32;&#32;&#32;template&lt;typename&#32;BasicJsonContext,&#32;enable_if_t&lt;is_basic_json_context&lt;BasicJsonContext&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&gt;
4073 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1other__error">other_error</link>&#32;<link linkend="_classnlohmann_1_1detail_1_1other__error_1a4ea29b55f963ecc3ee7ddda7c731a9b1">create</link>(<emphasis role="keywordtype">int</emphasis>&#32;id_,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;what_arg,&#32;BasicJsonContext&#32;context)
4074 &#32;&#32;&#32;&#32;{
4075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a1ad83f255afd4038129297b57ef91603">w</link>&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<link linkend="_classnlohmann_1_1detail_1_1exception_1abf41a7e9178356314082284e6cfea278">exception::name</link>(<emphasis role="stringliteral">&quot;other_error&quot;</emphasis>,&#32;id_),&#32;<link linkend="_classnlohmann_1_1detail_1_1exception_1a9032b2e5d344c9f1f7afef4212f0ad39">exception::diagnostics</link>(context),&#32;what_arg);
4076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{id_,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a1ad83f255afd4038129297b57ef91603">w</link>.c_str()};
4077 &#32;&#32;&#32;&#32;}
4078 
4079 &#32;&#32;<emphasis role="keyword">private</emphasis>:
4080 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a5338981b5ad9027c9e54b1c5597f4344">JSON_HEDLEY_NON_NULL</link>(3)
4081 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1other__error">other_error</link>(<emphasis role="keywordtype">int</emphasis>&#32;id_,&#32;const&#32;<emphasis role="keywordtype">char</emphasis>*&#32;what_arg)&#32;:&#32;<link linkend="_classnlohmann_1_1detail_1_1exception">exception</link>(id_,&#32;what_arg)&#32;{}
4082 };
4083 
4084 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
4085 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann</emphasis>
4086 
4087 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/macro_scope.hpp&gt;</emphasis>
4088 
4089 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/meta/cpp_future.hpp&gt;</emphasis>
4090 
4091 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/meta/identity_tag.hpp&gt;</emphasis>
4092 
4093 
4094 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann">nlohmann</link>
4095 {
4096 <emphasis role="keyword">namespace&#32;</emphasis>detail
4097 {
4098 <emphasis role="comment">//&#32;dispatching&#32;helper&#32;struct</emphasis>
4099 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;T&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>identity_tag&#32;{};
4100 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
4101 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann</emphasis>
4102 
4103 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/meta/type_traits.hpp&gt;</emphasis>
4104 
4105 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/string_concat.hpp&gt;</emphasis>
4106 
4107 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/value_t.hpp&gt;</emphasis>
4108 
4109 
4110 <emphasis role="preprocessor">#if&#32;JSON_HAS_EXPERIMENTAL_FILESYSTEM</emphasis>
4111 <emphasis role="preprocessor">#include&#32;&lt;experimental/filesystem&gt;</emphasis>
4112 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail">nlohmann::detail</link>
4113 {
4114 <emphasis role="keyword">namespace&#32;</emphasis>std_fs&#32;=&#32;std::experimental::filesystem;
4115 }&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann::detail</emphasis>
4116 <emphasis role="preprocessor">#elif&#32;JSON_HAS_FILESYSTEM</emphasis>
4117 <emphasis role="preprocessor">#include&#32;&lt;filesystem&gt;</emphasis>
4118 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail">nlohmann::detail</link>
4119 {
4120 <emphasis role="keyword">namespace&#32;</emphasis>std_fs&#32;=&#32;std::filesystem;
4121 }&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann::detail</emphasis>
4122 <emphasis role="preprocessor">#endif</emphasis>
4123 
4124 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann">nlohmann</link>
4125 {
4126 <emphasis role="keyword">namespace&#32;</emphasis>detail
4127 {
4128 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
4129 <emphasis role="keywordtype">void</emphasis>&#32;from_json(<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">typename</emphasis>&#32;std::nullptr_t&amp;&#32;n)
4130 {
4131 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!j.is_null()))
4132 &#32;&#32;&#32;&#32;{
4133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(302,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;type&#32;must&#32;be&#32;null,&#32;but&#32;is&#32;&quot;</emphasis>,&#32;j.type_name()),&#32;&amp;j));
4134 &#32;&#32;&#32;&#32;}
4135 &#32;&#32;&#32;&#32;n&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
4136 }
4137 
4138 <emphasis role="comment">//&#32;overloads&#32;for&#32;basic_json&#32;template&#32;parameters</emphasis>
4139 <emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;ArithmeticType,
4140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enable_if_t&#32;&lt;&#32;std::is_arithmetic&lt;ArithmeticType&gt;::value&amp;&amp;
4141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!std::is_same&lt;ArithmeticType,&#32;typename&#32;BasicJsonType::boolean_t&gt;::value,
4142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;&#32;=&#32;0&#32;&gt;
4143 <emphasis role="keywordtype">void</emphasis>&#32;get_arithmetic_value(<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;j,&#32;ArithmeticType&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
4144 {
4145 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link><emphasis role="keyword">&gt;</emphasis>(j))
4146 &#32;&#32;&#32;&#32;{
4147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">value_t::number_unsigned</link>:
4148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>ArithmeticType<emphasis role="keyword">&gt;</emphasis>(*j.template&#32;get_ptr&lt;const&#32;typename&#32;BasicJsonType::number_unsigned_t*&gt;());
4150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
4151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">value_t::number_integer</link>:
4153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>ArithmeticType<emphasis role="keyword">&gt;</emphasis>(*j.template&#32;get_ptr&lt;const&#32;typename&#32;BasicJsonType::number_integer_t*&gt;());
4155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
4156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">value_t::number_float</link>:
4158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>ArithmeticType<emphasis role="keyword">&gt;</emphasis>(*j.template&#32;get_ptr&lt;const&#32;typename&#32;BasicJsonType::number_float_t*&gt;());
4160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
4161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4162 
4163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">value_t::null</link>:
4164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">value_t::object</link>:
4165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">value_t::array</link>:
4166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">value_t::string</link>:
4167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">value_t::boolean</link>:
4168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">value_t::binary</link>:
4169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">value_t::discarded</link>:
4170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
4171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(302,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;type&#32;must&#32;be&#32;number,&#32;but&#32;is&#32;&quot;</emphasis>,&#32;j.type_name()),&#32;&amp;j));
4172 &#32;&#32;&#32;&#32;}
4173 }
4174 
4175 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
4176 <emphasis role="keywordtype">void</emphasis>&#32;from_json(<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::boolean_t&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>)
4177 {
4178 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!j.is_boolean()))
4179 &#32;&#32;&#32;&#32;{
4180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(302,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;type&#32;must&#32;be&#32;boolean,&#32;but&#32;is&#32;&quot;</emphasis>,&#32;j.type_name()),&#32;&amp;j));
4181 &#32;&#32;&#32;&#32;}
4182 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>&#32;=&#32;*j.template&#32;get_ptr&lt;const&#32;typename&#32;BasicJsonType::boolean_t*&gt;();
4183 }
4184 
4185 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
4186 <emphasis role="keywordtype">void</emphasis>&#32;from_json(<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::string_t&amp;&#32;s)
4187 {
4188 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!j.is_string()))
4189 &#32;&#32;&#32;&#32;{
4190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(302,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;type&#32;must&#32;be&#32;string,&#32;but&#32;is&#32;&quot;</emphasis>,&#32;j.type_name()),&#32;&amp;j));
4191 &#32;&#32;&#32;&#32;}
4192 &#32;&#32;&#32;&#32;s&#32;=&#32;*j.template&#32;get_ptr&lt;const&#32;typename&#32;BasicJsonType::string_t*&gt;();
4193 }
4194 
4195 <emphasis role="keyword">template</emphasis>&#32;&lt;
4196 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;StringType,
4197 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&#32;&lt;
4198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_assignable&lt;StringType&amp;,&#32;const&#32;typename&#32;BasicJsonType::string_t&gt;::value
4199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!std::is_same&lt;typename&#32;BasicJsonType::string_t,&#32;StringType&gt;::value
4200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!is_json_ref&lt;StringType&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;&#32;=&#32;0&#32;&gt;
4201 <emphasis role="keywordtype">void</emphasis>&#32;from_json(<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;j,&#32;StringType&amp;&#32;s)
4202 {
4203 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!j.is_string()))
4204 &#32;&#32;&#32;&#32;{
4205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(302,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;type&#32;must&#32;be&#32;string,&#32;but&#32;is&#32;&quot;</emphasis>,&#32;j.type_name()),&#32;&amp;j));
4206 &#32;&#32;&#32;&#32;}
4207 
4208 &#32;&#32;&#32;&#32;s&#32;=&#32;*j.template&#32;get_ptr&lt;const&#32;typename&#32;BasicJsonType::string_t*&gt;();
4209 }
4210 
4211 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
4212 <emphasis role="keywordtype">void</emphasis>&#32;from_json(<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_float_t&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
4213 {
4214 &#32;&#32;&#32;&#32;get_arithmetic_value(j,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
4215 }
4216 
4217 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
4218 <emphasis role="keywordtype">void</emphasis>&#32;from_json(<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_unsigned_t&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
4219 {
4220 &#32;&#32;&#32;&#32;get_arithmetic_value(j,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
4221 }
4222 
4223 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
4224 <emphasis role="keywordtype">void</emphasis>&#32;from_json(<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_integer_t&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
4225 {
4226 &#32;&#32;&#32;&#32;get_arithmetic_value(j,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
4227 }
4228 
4229 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;EnumType,
4230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enable_if_t&lt;std::is_enum&lt;EnumType&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&gt;
4231 <emphasis role="keywordtype">void</emphasis>&#32;from_json(<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;j,&#32;EnumType&amp;&#32;e)
4232 {
4233 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::underlying_type&lt;EnumType&gt;::type&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>;
4234 &#32;&#32;&#32;&#32;get_arithmetic_value(j,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
4235 &#32;&#32;&#32;&#32;<link linkend="_group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139">e</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>EnumType<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
4236 }
4237 
4238 <emphasis role="comment">//&#32;forward_list&#32;doesn&apos;t&#32;have&#32;an&#32;insert&#32;method</emphasis>
4239 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;Allocator,
4240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enable_if_t&lt;is_getable&lt;BasicJsonType,&#32;T&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&gt;
4241 <emphasis role="keywordtype">void</emphasis>&#32;from_json(<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;j,&#32;std::forward_list&lt;T,&#32;Allocator&gt;&amp;&#32;l)
4242 {
4243 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!j.is_array()))
4244 &#32;&#32;&#32;&#32;{
4245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(302,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;type&#32;must&#32;be&#32;array,&#32;but&#32;is&#32;&quot;</emphasis>,&#32;j.type_name()),&#32;&amp;j));
4246 &#32;&#32;&#32;&#32;}
4247 &#32;&#32;&#32;&#32;l.clear();
4248 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a83797c5677d80005911de218c819adab">std::transform</link>(j.rbegin(),&#32;j.rend(),
4249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::front_inserter(l),&#32;[](<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&#32;&amp;&#32;i)
4250 &#32;&#32;&#32;&#32;{
4251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;i.template&#32;get&lt;T&gt;();
4252 &#32;&#32;&#32;&#32;});
4253 }
4254 
4255 <emphasis role="comment">//&#32;valarray&#32;doesn&apos;t&#32;have&#32;an&#32;insert&#32;method</emphasis>
4256 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,
4257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enable_if_t&lt;is_getable&lt;BasicJsonType,&#32;T&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&gt;
4258 <emphasis role="keywordtype">void</emphasis>&#32;from_json(<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;j,&#32;std::valarray&lt;T&gt;&amp;&#32;l)
4259 {
4260 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!j.is_array()))
4261 &#32;&#32;&#32;&#32;{
4262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(302,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;type&#32;must&#32;be&#32;array,&#32;but&#32;is&#32;&quot;</emphasis>,&#32;j.type_name()),&#32;&amp;j));
4263 &#32;&#32;&#32;&#32;}
4264 &#32;&#32;&#32;&#32;l.resize(j.size());
4265 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a83797c5677d80005911de218c819adab">std::transform</link>(j.begin(),&#32;j.end(),&#32;std::begin(l),
4266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&#32;&amp;&#32;elem)
4267 &#32;&#32;&#32;&#32;{
4268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;elem.template&#32;get&lt;T&gt;();
4269 &#32;&#32;&#32;&#32;});
4270 }
4271 
4272 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;std::<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;
4273 <emphasis role="keyword">auto</emphasis>&#32;from_json(<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;j,&#32;T&#32;(&amp;arr)[N])&#32;&#32;<emphasis role="comment">//&#32;NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)</emphasis>
4274 -&gt;&#32;<emphasis role="keyword">decltype</emphasis>(j.template&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get&lt;T&gt;</link>(),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>())
4275 {
4276 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;N;&#32;++i)
4277 &#32;&#32;&#32;&#32;{
4278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arr[i]&#32;=&#32;j.at(i).template&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get&lt;T&gt;</link>();
4279 &#32;&#32;&#32;&#32;}
4280 }
4281 
4282 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
4283 <emphasis role="keywordtype">void</emphasis>&#32;from_json_array_impl(<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::array_t&amp;&#32;arr,&#32;priority_tag&lt;3&gt;&#32;<emphasis role="comment">/*unused*/</emphasis>)
4284 {
4285 &#32;&#32;&#32;&#32;arr&#32;=&#32;*j.template&#32;get_ptr&lt;const&#32;typename&#32;BasicJsonType::array_t*&gt;();
4286 }
4287 
4288 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;std::<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;
4289 <emphasis role="keyword">auto</emphasis>&#32;from_json_array_impl(<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;j,&#32;std::array&lt;T,&#32;N&gt;&amp;&#32;arr,
4290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;priority_tag&lt;2&gt;&#32;<emphasis role="comment">/*unused*/</emphasis>)
4291 -&gt;&#32;<emphasis role="keyword">decltype</emphasis>(j.template&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get&lt;T&gt;</link>(),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>())
4292 {
4293 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;N;&#32;++i)
4294 &#32;&#32;&#32;&#32;{
4295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arr[i]&#32;=&#32;j.at(i).template&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get&lt;T&gt;</link>();
4296 &#32;&#32;&#32;&#32;}
4297 }
4298 
4299 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;ConstructibleArrayType,
4300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;
4301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_assignable&lt;ConstructibleArrayType&amp;,&#32;ConstructibleArrayType&gt;::value,
4302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&gt;
4303 <emphasis role="keyword">auto</emphasis>&#32;from_json_array_impl(<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;j,&#32;ConstructibleArrayType&amp;&#32;arr,&#32;priority_tag&lt;1&gt;&#32;<emphasis role="comment">/*unused*/</emphasis>)
4304 -&gt;&#32;<emphasis role="keyword">decltype</emphasis>(
4305 &#32;&#32;&#32;&#32;arr.reserve(std::declval&lt;typename&#32;ConstructibleArrayType::size_type&gt;()),
4306 &#32;&#32;&#32;&#32;j.template&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get&lt;typename ConstructibleArrayType::value_type&gt;</link>(),
4307 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>())
4308 {
4309 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::end;
4310 
4311 &#32;&#32;&#32;&#32;ConstructibleArrayType&#32;ret;
4312 &#32;&#32;&#32;&#32;ret.reserve(j.size());
4313 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a83797c5677d80005911de218c819adab">std::transform</link>(j.begin(),&#32;j.end(),
4314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::inserter(ret,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(ret)),&#32;[](<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&#32;&amp;&#32;i)
4315 &#32;&#32;&#32;&#32;{
4316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;get&lt;BasicJsonType&gt;()&#32;returns&#32;*this,&#32;this&#32;won&apos;t&#32;call&#32;a&#32;from_json</emphasis>
4317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;method&#32;when&#32;value_type&#32;is&#32;BasicJsonType</emphasis>
4318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;i.template&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get&lt;typename ConstructibleArrayType::value_type&gt;</link>();
4319 &#32;&#32;&#32;&#32;});
4320 &#32;&#32;&#32;&#32;arr&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(ret);
4321 }
4322 
4323 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;ConstructibleArrayType,
4324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;
4325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_assignable&lt;ConstructibleArrayType&amp;,&#32;ConstructibleArrayType&gt;::value,
4326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&gt;
4327 <emphasis role="keywordtype">void</emphasis>&#32;from_json_array_impl(<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;j,&#32;ConstructibleArrayType&amp;&#32;arr,
4328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;priority_tag&lt;0&gt;&#32;<emphasis role="comment">/*unused*/</emphasis>)
4329 {
4330 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::end;
4331 
4332 &#32;&#32;&#32;&#32;ConstructibleArrayType&#32;ret;
4333 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a83797c5677d80005911de218c819adab">std::transform</link>(
4334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.begin(),&#32;j.end(),&#32;std::inserter(ret,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(ret)),
4335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&#32;&amp;&#32;i)
4336 &#32;&#32;&#32;&#32;{
4337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;get&lt;BasicJsonType&gt;()&#32;returns&#32;*this,&#32;this&#32;won&apos;t&#32;call&#32;a&#32;from_json</emphasis>
4338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;method&#32;when&#32;value_type&#32;is&#32;BasicJsonType</emphasis>
4339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;i.template&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get&lt;typename ConstructibleArrayType::value_type&gt;</link>();
4340 &#32;&#32;&#32;&#32;});
4341 &#32;&#32;&#32;&#32;arr&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(ret);
4342 }
4343 
4344 <emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;ConstructibleArrayType,
4345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&#32;&lt;
4346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_constructible_array_type&lt;BasicJsonType,&#32;ConstructibleArrayType&gt;::value&amp;&amp;
4347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!is_constructible_object_type&lt;BasicJsonType,&#32;ConstructibleArrayType&gt;::value&amp;&amp;
4348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!<link linkend="_structnlohmann_1_1detail_1_1is__constructible__string__type_1a7006ba555b7a92e3f35f8806f781a995">is_constructible_string_type&lt;BasicJsonType, ConstructibleArrayType&gt;::value</link>&amp;&amp;
4349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!std::is_same&lt;ConstructibleArrayType,&#32;typename&#32;BasicJsonType::binary_t&gt;::value&amp;&amp;
4350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!is_basic_json&lt;ConstructibleArrayType&gt;::value,
4351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;&#32;=&#32;0&#32;&gt;
4352 <emphasis role="keyword">auto</emphasis>&#32;from_json(<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;j,&#32;ConstructibleArrayType&amp;&#32;arr)
4353 -&gt;&#32;<emphasis role="keyword">decltype</emphasis>(from_json_array_impl(j,&#32;arr,&#32;priority_tag&lt;3&gt;&#32;{}),
4354 j.template&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get&lt;typename ConstructibleArrayType::value_type&gt;</link>(),
4355 <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>())
4356 {
4357 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!j.is_array()))
4358 &#32;&#32;&#32;&#32;{
4359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(302,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;type&#32;must&#32;be&#32;array,&#32;but&#32;is&#32;&quot;</emphasis>,&#32;j.type_name()),&#32;&amp;j));
4360 &#32;&#32;&#32;&#32;}
4361 
4362 &#32;&#32;&#32;&#32;from_json_array_impl(j,&#32;arr,&#32;priority_tag&lt;3&gt;&#32;{});
4363 }
4364 
4365 <emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;std::size_t...&#32;Idx&#32;&gt;
4366 std::array&lt;T,&#32;<emphasis role="keyword">sizeof</emphasis>...(Idx)&gt;&#32;from_json_inplace_array_impl(BasicJsonType&amp;&amp;&#32;j,
4367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;identity_tag&lt;std::array&lt;T,&#32;<emphasis role="keyword">sizeof</emphasis>...(Idx)&gt;&gt;&#32;<emphasis role="comment">/*unused*/</emphasis>,&#32;<link linkend="_namespacenlohmann_1_1detail_1a422430dab7adbe4dfcf125dfcfbeffd0">index_sequence</link>&lt;Idx...&gt;&#32;<emphasis role="comment">/*unused*/</emphasis>)
4368 {
4369 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;{&#32;std::forward&lt;BasicJsonType&gt;(j).at(Idx).template&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get&lt;T&gt;</link>()...&#32;}&#32;};
4370 }
4371 
4372 <emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;std::<emphasis role="keywordtype">size_t</emphasis>&#32;N&#32;&gt;
4373 <emphasis role="keyword">auto</emphasis>&#32;from_json(BasicJsonType&amp;&amp;&#32;j,&#32;identity_tag&lt;std::array&lt;T,&#32;N&gt;&gt;&#32;tag)
4374 -&gt;&#32;<emphasis role="keyword">decltype</emphasis>(from_json_inplace_array_impl(std::forward&lt;BasicJsonType&gt;(j),&#32;tag,&#32;make_index_sequence&lt;N&gt;&#32;{}))
4375 {
4376 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!j.is_array()))
4377 &#32;&#32;&#32;&#32;{
4378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(302,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;type&#32;must&#32;be&#32;array,&#32;but&#32;is&#32;&quot;</emphasis>,&#32;j.type_name()),&#32;&amp;j));
4379 &#32;&#32;&#32;&#32;}
4380 
4381 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;from_json_inplace_array_impl(std::forward&lt;BasicJsonType&gt;(j),&#32;tag,&#32;make_index_sequence&lt;N&gt;&#32;{});
4382 }
4383 
4384 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
4385 <emphasis role="keywordtype">void</emphasis>&#32;from_json(<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::binary_t&amp;&#32;bin)
4386 {
4387 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!j.is_binary()))
4388 &#32;&#32;&#32;&#32;{
4389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(302,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;type&#32;must&#32;be&#32;binary,&#32;but&#32;is&#32;&quot;</emphasis>,&#32;j.type_name()),&#32;&amp;j));
4390 &#32;&#32;&#32;&#32;}
4391 
4392 &#32;&#32;&#32;&#32;bin&#32;=&#32;*j.template&#32;get_ptr&lt;const&#32;typename&#32;BasicJsonType::binary_t*&gt;();
4393 }
4394 
4395 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;ConstructibleObjectType,
4396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enable_if_t&lt;is_constructible_object_type&lt;BasicJsonType,&#32;ConstructibleObjectType&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&gt;
4397 <emphasis role="keywordtype">void</emphasis>&#32;from_json(<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;j,&#32;ConstructibleObjectType&amp;&#32;obj)
4398 {
4399 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!j.is_object()))
4400 &#32;&#32;&#32;&#32;{
4401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(302,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;type&#32;must&#32;be&#32;object,&#32;but&#32;is&#32;&quot;</emphasis>,&#32;j.type_name()),&#32;&amp;j));
4402 &#32;&#32;&#32;&#32;}
4403 
4404 &#32;&#32;&#32;&#32;ConstructibleObjectType&#32;ret;
4405 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>*&#32;inner_object&#32;=&#32;j.template&#32;get_ptr&lt;const&#32;typename&#32;BasicJsonType::object_t*&gt;();
4406 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;ConstructibleObjectType::value_type;
4407 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a83797c5677d80005911de218c819adab">std::transform</link>(
4408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inner_object-&gt;begin(),&#32;inner_object-&gt;end(),
4409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::inserter(ret,&#32;ret.begin()),
4410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::object_t::value_type&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;p)
4411 &#32;&#32;&#32;&#32;{
4412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;value_type(p.first,&#32;p.second.template&#32;get&lt;typename&#32;ConstructibleObjectType::mapped_type&gt;());
4413 &#32;&#32;&#32;&#32;});
4414 &#32;&#32;&#32;&#32;obj&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(ret);
4415 }
4416 
4417 <emphasis role="comment">//&#32;overload&#32;for&#32;arithmetic&#32;types,&#32;not&#32;chosen&#32;for&#32;basic_json&#32;template&#32;arguments</emphasis>
4418 <emphasis role="comment">//&#32;(BooleanType,&#32;etc..);&#32;note:&#32;Is&#32;it&#32;really&#32;necessary&#32;to&#32;provide&#32;explicit</emphasis>
4419 <emphasis role="comment">//&#32;overloads&#32;for&#32;boolean_t&#32;etc.&#32;in&#32;case&#32;of&#32;a&#32;custom&#32;BooleanType&#32;which&#32;is&#32;not</emphasis>
4420 <emphasis role="comment">//&#32;an&#32;arithmetic&#32;type?</emphasis>
4421 <emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;ArithmeticType,
4422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&#32;&lt;
4423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_arithmetic&lt;ArithmeticType&gt;::value&amp;&amp;
4424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!std::is_same&lt;ArithmeticType,&#32;typename&#32;BasicJsonType::number_unsigned_t&gt;::value&amp;&amp;
4425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!std::is_same&lt;ArithmeticType,&#32;typename&#32;BasicJsonType::number_integer_t&gt;::value&amp;&amp;
4426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!std::is_same&lt;ArithmeticType,&#32;typename&#32;BasicJsonType::number_float_t&gt;::value&amp;&amp;
4427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!std::is_same&lt;ArithmeticType,&#32;typename&#32;BasicJsonType::boolean_t&gt;::value,
4428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;&#32;=&#32;0&#32;&gt;
4429 <emphasis role="keywordtype">void</emphasis>&#32;from_json(<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;j,&#32;ArithmeticType&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
4430 {
4431 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link><emphasis role="keyword">&gt;</emphasis>(j))
4432 &#32;&#32;&#32;&#32;{
4433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">value_t::number_unsigned</link>:
4434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>ArithmeticType<emphasis role="keyword">&gt;</emphasis>(*j.template&#32;get_ptr&lt;const&#32;typename&#32;BasicJsonType::number_unsigned_t*&gt;());
4436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
4437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">value_t::number_integer</link>:
4439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>ArithmeticType<emphasis role="keyword">&gt;</emphasis>(*j.template&#32;get_ptr&lt;const&#32;typename&#32;BasicJsonType::number_integer_t*&gt;());
4441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
4442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">value_t::number_float</link>:
4444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>ArithmeticType<emphasis role="keyword">&gt;</emphasis>(*j.template&#32;get_ptr&lt;const&#32;typename&#32;BasicJsonType::number_float_t*&gt;());
4446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
4447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">value_t::boolean</link>:
4449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>ArithmeticType<emphasis role="keyword">&gt;</emphasis>(*j.template&#32;get_ptr&lt;const&#32;typename&#32;BasicJsonType::boolean_t*&gt;());
4451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
4452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4453 
4454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">value_t::null</link>:
4455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">value_t::object</link>:
4456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">value_t::array</link>:
4457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">value_t::string</link>:
4458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">value_t::binary</link>:
4459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">value_t::discarded</link>:
4460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
4461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(302,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;type&#32;must&#32;be&#32;number,&#32;but&#32;is&#32;&quot;</emphasis>,&#32;j.type_name()),&#32;&amp;j));
4462 &#32;&#32;&#32;&#32;}
4463 }
4464 
4465 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>...&#32;Args,&#32;std::size_t...&#32;Idx&gt;
4466 std::tuple&lt;Args...&gt;&#32;from_json_tuple_impl_base(BasicJsonType&amp;&amp;&#32;j,&#32;index_sequence&lt;Idx...&gt;&#32;<emphasis role="comment">/*unused*/</emphasis>)
4467 {
4468 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_tuple(std::forward&lt;BasicJsonType&gt;(j).at(Idx).<emphasis role="keyword">template</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get&lt;Args&gt;</link>()...);
4469 }
4470 
4471 <emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">class</emphasis>&#32;A1,&#32;<emphasis role="keyword">class</emphasis>&#32;A2&#32;&gt;
4472 std::pair&lt;A1,&#32;A2&gt;&#32;from_json_tuple_impl(BasicJsonType&amp;&amp;&#32;j,&#32;identity_tag&lt;std::pair&lt;A1,&#32;A2&gt;&gt;&#32;<emphasis role="comment">/*unused*/</emphasis>,&#32;priority_tag&lt;0&gt;&#32;<emphasis role="comment">/*unused*/</emphasis>)
4473 {
4474 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{std::forward&lt;BasicJsonType&gt;(j).at(0).template&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get&lt;A1&gt;</link>(),
4475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;BasicJsonType&gt;(j).at(1).template&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get&lt;A2&gt;</link>()};
4476 }
4477 
4478 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;A1,&#32;<emphasis role="keyword">typename</emphasis>&#32;A2&gt;
4479 <emphasis role="keywordtype">void</emphasis>&#32;from_json_tuple_impl(BasicJsonType&amp;&amp;&#32;j,&#32;std::pair&lt;A1,&#32;A2&gt;&amp;&#32;p,&#32;priority_tag&lt;1&gt;&#32;<emphasis role="comment">/*unused*/</emphasis>)
4480 {
4481 &#32;&#32;&#32;&#32;p&#32;=&#32;from_json_tuple_impl(std::forward&lt;BasicJsonType&gt;(j),&#32;identity_tag&lt;std::pair&lt;A1,&#32;A2&gt;&gt;&#32;{},&#32;priority_tag&lt;0&gt;&#32;{});
4482 }
4483 
4484 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>...&#32;Args&gt;
4485 std::tuple&lt;Args...&gt;&#32;from_json_tuple_impl(BasicJsonType&amp;&amp;&#32;j,&#32;identity_tag&lt;std::tuple&lt;Args...&gt;&gt;&#32;<emphasis role="comment">/*unused*/</emphasis>,&#32;priority_tag&lt;2&gt;&#32;<emphasis role="comment">/*unused*/</emphasis>)
4486 {
4487 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;from_json_tuple_impl_base&lt;BasicJsonType,&#32;Args...&gt;(std::forward&lt;BasicJsonType&gt;(j),&#32;<link linkend="_namespacenlohmann_1_1detail_1a24800493c6ec02ce033dcbb47b7fd28e">index_sequence_for</link>&lt;Args...&gt;&#32;{});
4488 }
4489 
4490 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>...&#32;Args&gt;
4491 <emphasis role="keywordtype">void</emphasis>&#32;from_json_tuple_impl(BasicJsonType&amp;&amp;&#32;j,&#32;std::tuple&lt;Args...&gt;&amp;&#32;t,&#32;priority_tag&lt;3&gt;&#32;<emphasis role="comment">/*unused*/</emphasis>)
4492 {
4493 &#32;&#32;&#32;&#32;t&#32;=&#32;from_json_tuple_impl_base&lt;BasicJsonType,&#32;Args...&gt;(std::forward&lt;BasicJsonType&gt;(j),&#32;<link linkend="_namespacenlohmann_1_1detail_1a24800493c6ec02ce033dcbb47b7fd28e">index_sequence_for</link>&lt;Args...&gt;&#32;{});
4494 }
4495 
4496 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;TupleRelated&gt;
4497 <emphasis role="keyword">auto</emphasis>&#32;from_json(BasicJsonType&amp;&amp;&#32;j,&#32;TupleRelated&amp;&amp;&#32;t)
4498 -&gt;&#32;<emphasis role="keyword">decltype</emphasis>(from_json_tuple_impl(std::forward&lt;BasicJsonType&gt;(j),&#32;std::forward&lt;TupleRelated&gt;(t),&#32;priority_tag&lt;3&gt;&#32;{}))
4499 {
4500 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!j.is_array()))
4501 &#32;&#32;&#32;&#32;{
4502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(302,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;type&#32;must&#32;be&#32;array,&#32;but&#32;is&#32;&quot;</emphasis>,&#32;j.type_name()),&#32;&amp;j));
4503 &#32;&#32;&#32;&#32;}
4504 
4505 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;from_json_tuple_impl(std::forward&lt;BasicJsonType&gt;(j),&#32;std::forward&lt;TupleRelated&gt;(t),&#32;priority_tag&lt;3&gt;&#32;{});
4506 }
4507 
4508 <emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;Value,&#32;<emphasis role="keyword">typename</emphasis>&#32;Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;Allocator,
4509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&#32;&lt;&#32;!std::is_constructible&#32;&lt;
4510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::string_t,&#32;Key&#32;&gt;<link linkend="_classvalue">::value</link>&#32;&gt;&gt;
4511 <emphasis role="keywordtype">void</emphasis>&#32;from_json(<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;j,&#32;std::map&lt;Key,&#32;Value,&#32;Compare,&#32;Allocator&gt;&amp;&#32;m)
4512 {
4513 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!j.is_array()))
4514 &#32;&#32;&#32;&#32;{
4515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(302,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;type&#32;must&#32;be&#32;array,&#32;but&#32;is&#32;&quot;</emphasis>,&#32;j.type_name()),&#32;&amp;j));
4516 &#32;&#32;&#32;&#32;}
4517 &#32;&#32;&#32;&#32;m.clear();
4518 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;p&#32;:&#32;j)
4519 &#32;&#32;&#32;&#32;{
4520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!p.is_array()))
4521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(302,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;type&#32;must&#32;be&#32;array,&#32;but&#32;is&#32;&quot;</emphasis>,&#32;p.type_name()),&#32;&amp;j));
4523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m.emplace(p.at(0).template&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get&lt;Key&gt;</link>(),&#32;p.at(1).template&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get&lt;Value&gt;</link>());
4525 &#32;&#32;&#32;&#32;}
4526 }
4527 
4528 <emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;Value,&#32;<emphasis role="keyword">typename</emphasis>&#32;Hash,&#32;<emphasis role="keyword">typename</emphasis>&#32;KeyEqual,&#32;<emphasis role="keyword">typename</emphasis>&#32;Allocator,
4529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&#32;&lt;&#32;!std::is_constructible&#32;&lt;
4530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::string_t,&#32;Key&#32;&gt;<link linkend="_classvalue">::value</link>&#32;&gt;&gt;
4531 <emphasis role="keywordtype">void</emphasis>&#32;from_json(<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;j,&#32;std::unordered_map&lt;Key,&#32;Value,&#32;Hash,&#32;KeyEqual,&#32;Allocator&gt;&amp;&#32;m)
4532 {
4533 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!j.is_array()))
4534 &#32;&#32;&#32;&#32;{
4535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(302,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;type&#32;must&#32;be&#32;array,&#32;but&#32;is&#32;&quot;</emphasis>,&#32;j.type_name()),&#32;&amp;j));
4536 &#32;&#32;&#32;&#32;}
4537 &#32;&#32;&#32;&#32;m.clear();
4538 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;p&#32;:&#32;j)
4539 &#32;&#32;&#32;&#32;{
4540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!p.is_array()))
4541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(302,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;type&#32;must&#32;be&#32;array,&#32;but&#32;is&#32;&quot;</emphasis>,&#32;p.type_name()),&#32;&amp;j));
4543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m.emplace(p.at(0).template&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get&lt;Key&gt;</link>(),&#32;p.at(1).template&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get&lt;Value&gt;</link>());
4545 &#32;&#32;&#32;&#32;}
4546 }
4547 
4548 <emphasis role="preprocessor">#if&#32;JSON_HAS_FILESYSTEM&#32;||&#32;JSON_HAS_EXPERIMENTAL_FILESYSTEM</emphasis>
4549 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
4550 <emphasis role="keywordtype">void</emphasis>&#32;from_json(<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;j,&#32;std_fs::path&amp;&#32;p)
4551 {
4552 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!j.is_string()))
4553 &#32;&#32;&#32;&#32;{
4554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(302,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;type&#32;must&#32;be&#32;string,&#32;but&#32;is&#32;&quot;</emphasis>,&#32;j.type_name()),&#32;&amp;j));
4555 &#32;&#32;&#32;&#32;}
4556 &#32;&#32;&#32;&#32;p&#32;=&#32;*j.template&#32;get_ptr&lt;const&#32;typename&#32;BasicJsonType::string_t*&gt;();
4557 }
4558 <emphasis role="preprocessor">#endif</emphasis>
4559 
4560 <emphasis role="keyword">struct&#32;</emphasis>from_json_fn
4561 {
4562 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4563 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;j,&#32;T&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;<emphasis role="keyword">const</emphasis>
4564 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(from_json(j,&#32;std::forward&lt;T&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>))))
4565 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(from_json(j,&#32;std::forward&lt;T&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)))
4566 &#32;&#32;&#32;&#32;{
4567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;from_json(j,&#32;std::forward&lt;T&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>));
4568 &#32;&#32;&#32;&#32;}
4569 };
4570 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
4571 
4575 <emphasis role="keyword">namespace&#32;</emphasis><emphasis role="comment">//&#32;NOLINT(cert-dcl59-cpp,fuchsia-header-anon-namespaces,google-build-namespaces)</emphasis>
4576 {
4577 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;from_json&#32;=&#32;<link linkend="_structnlohmann_1_1detail_1_1static__const_1a6bb7ab2ddd6abc41fb4ffb7c6dfa237e">detail::static_const&lt;detail::from_json_fn&gt;::value</link>;&#32;<emphasis role="comment">//&#32;NOLINT(misc-definitions-in-headers)</emphasis>
4578 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
4579 }&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann</emphasis>
4580 
4581 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/conversions/to_json.hpp&gt;</emphasis>
4582 
4583 
4584 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>&#32;<emphasis role="comment">//&#32;copy</emphasis>
4585 <emphasis role="preprocessor">#include&#32;&lt;iterator&gt;</emphasis>&#32;<emphasis role="comment">//&#32;begin,&#32;end</emphasis>
4586 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>&#32;<emphasis role="comment">//&#32;string</emphasis>
4587 <emphasis role="preprocessor">#include&#32;&lt;tuple&gt;</emphasis>&#32;<emphasis role="comment">//&#32;tuple,&#32;get</emphasis>
4588 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>&#32;<emphasis role="comment">//&#32;is_same,&#32;is_constructible,&#32;is_floating_point,&#32;is_enum,&#32;underlying_type</emphasis>
4589 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>&#32;<emphasis role="comment">//&#32;move,&#32;forward,&#32;declval,&#32;pair</emphasis>
4590 <emphasis role="preprocessor">#include&#32;&lt;valarray&gt;</emphasis>&#32;<emphasis role="comment">//&#32;valarray</emphasis>
4591 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>&#32;<emphasis role="comment">//&#32;vector</emphasis>
4592 
4593 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/macro_scope.hpp&gt;</emphasis>
4594 
4595 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/iterators/iteration_proxy.hpp&gt;</emphasis>
4596 
4597 
4598 <emphasis role="preprocessor">#include&#32;&lt;cstddef&gt;</emphasis>&#32;<emphasis role="comment">//&#32;size_t</emphasis>
4599 <emphasis role="preprocessor">#include&#32;&lt;iterator&gt;</emphasis>&#32;<emphasis role="comment">//&#32;input_iterator_tag</emphasis>
4600 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>&#32;<emphasis role="comment">//&#32;string,&#32;to_string</emphasis>
4601 <emphasis role="preprocessor">#include&#32;&lt;tuple&gt;</emphasis>&#32;<emphasis role="comment">//&#32;tuple_size,&#32;get,&#32;tuple_element</emphasis>
4602 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>&#32;<emphasis role="comment">//&#32;move</emphasis>
4603 
4604 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/meta/type_traits.hpp&gt;</emphasis>
4605 
4606 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/value_t.hpp&gt;</emphasis>
4607 
4608 
4609 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann">nlohmann</link>
4610 {
4611 <emphasis role="keyword">namespace&#32;</emphasis>detail
4612 {
4613 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>_type&gt;
4614 <emphasis role="keywordtype">void</emphasis>&#32;int_to_string(&#32;string_type&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1af9d0cbbbeb7414e786c41899e5a856d7">target</link>,&#32;std::size_t&#32;<link linkend="_classvalue">value</link>&#32;)
4615 {
4616 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;ADL</emphasis>
4617 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::to_string;
4618 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1af9d0cbbbeb7414e786c41899e5a856d7">target</link>&#32;=&#32;to_string(<link linkend="_classvalue">value</link>);
4619 }
4620 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;IteratorType&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>iteration_proxy_value
4621 {
4622 &#32;&#32;<emphasis role="keyword">public</emphasis>:
4623 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>difference_type&#32;=&#32;std::ptrdiff_t;
4624 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;iteration_proxy_value;
4625 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;=&#32;value_type&#32;*&#32;;
4626 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>reference&#32;=&#32;value_type&#32;&amp;&#32;;
4627 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>iterator_category&#32;=&#32;std::input_iterator_tag;
4628 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>string_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::remove_cv&lt;&#32;typename&#32;std::remove_reference&lt;decltype(&#32;std::declval&lt;IteratorType&gt;().key()&#32;)&#32;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&#32;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
4629 
4630 &#32;&#32;<emphasis role="keyword">private</emphasis>:
4632 &#32;&#32;&#32;&#32;IteratorType&#32;anchor;
4634 &#32;&#32;&#32;&#32;std::size_t&#32;array_index&#32;=&#32;0;
4636 &#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;std::size_t&#32;array_index_last&#32;=&#32;0;
4638 &#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;string_type&#32;array_index_str&#32;=&#32;<emphasis role="stringliteral">&quot;0&quot;</emphasis>;
4640 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;string_type&#32;empty_str{};
4641 
4642 &#32;&#32;<emphasis role="keyword">public</emphasis>:
4643 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;iteration_proxy_value(IteratorType&#32;it)&#32;noexcept
4644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;anchor(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(it))
4645 &#32;&#32;&#32;&#32;{}
4646 
4648 &#32;&#32;&#32;&#32;iteration_proxy_value&amp;&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>()
4649 &#32;&#32;&#32;&#32;{
4650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
4651 &#32;&#32;&#32;&#32;}
4652 
4654 &#32;&#32;&#32;&#32;iteration_proxy_value&amp;&#32;operator++()
4655 &#32;&#32;&#32;&#32;{
4656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++anchor;
4657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++array_index;
4658 
4659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
4660 &#32;&#32;&#32;&#32;}
4661 
4663 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;iteration_proxy_value&amp;&#32;o)<emphasis role="keyword">&#32;const</emphasis>
4664 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
4665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;anchor&#32;==&#32;o.anchor;
4666 &#32;&#32;&#32;&#32;}
4667 
4669 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;iteration_proxy_value&amp;&#32;o)<emphasis role="keyword">&#32;const</emphasis>
4670 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
4671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;anchor&#32;!=&#32;o.anchor;
4672 &#32;&#32;&#32;&#32;}
4673 
4675 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;string_type&amp;&#32;key()<emphasis role="keyword">&#32;const</emphasis>
4676 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
4677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(anchor.m_object&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
4678 
4679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(anchor.m_object-&gt;type())
4680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;use&#32;integer&#32;array&#32;index&#32;as&#32;key</emphasis>
4682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">value_t::array</link>:
4683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(array_index&#32;!=&#32;array_index_last)
4685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int_to_string(&#32;array_index_str,&#32;array_index&#32;);
4687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_index_last&#32;=&#32;array_index;
4688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;array_index_str;
4690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4691 
4692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;use&#32;key&#32;from&#32;the&#32;object</emphasis>
4693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">value_t::object</link>:
4694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;anchor.key();
4695 
4696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;use&#32;an&#32;empty&#32;key&#32;for&#32;all&#32;primitive&#32;types</emphasis>
4697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">value_t::null</link>:
4698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">value_t::string</link>:
4699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">value_t::boolean</link>:
4700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">value_t::number_integer</link>:
4701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">value_t::number_unsigned</link>:
4702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">value_t::number_float</link>:
4703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">value_t::binary</link>:
4704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">value_t::discarded</link>:
4705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
4706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;empty_str;
4707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4708 &#32;&#32;&#32;&#32;}
4709 
4711 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;IteratorType::reference&#32;<link linkend="_classvalue">value</link>()<emphasis role="keyword">&#32;const</emphasis>
4712 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
4713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;anchor.value();
4714 &#32;&#32;&#32;&#32;}
4715 };
4716 
4718 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;IteratorType&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>iteration_proxy
4719 {
4720 &#32;&#32;<emphasis role="keyword">private</emphasis>:
4722 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;IteratorType::reference&#32;container;
4723 
4724 &#32;&#32;<emphasis role="keyword">public</emphasis>:
4726 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;iteration_proxy(<emphasis role="keyword">typename</emphasis>&#32;IteratorType::reference&#32;cont)&#32;noexcept
4727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;container(cont)&#32;{}
4728 
4730 &#32;&#32;&#32;&#32;iteration_proxy_value&lt;IteratorType&gt;&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>()&#32;noexcept
4731 &#32;&#32;&#32;&#32;{
4732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iteration_proxy_value&lt;IteratorType&gt;(container.begin());
4733 &#32;&#32;&#32;&#32;}
4734 
4736 &#32;&#32;&#32;&#32;iteration_proxy_value&lt;IteratorType&gt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;noexcept
4737 &#32;&#32;&#32;&#32;{
4738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iteration_proxy_value&lt;IteratorType&gt;(container.end());
4739 &#32;&#32;&#32;&#32;}
4740 };
4741 <emphasis role="comment">//&#32;Structured&#32;Bindings&#32;Support</emphasis>
4742 <emphasis role="comment">//&#32;For&#32;further&#32;reference&#32;see&#32;https://blog.tartanllama.xyz/structured-bindings/</emphasis>
4743 <emphasis role="comment">//&#32;And&#32;see&#32;https://github.com/nlohmann/json/pull/1391</emphasis>
4744 <emphasis role="keyword">template</emphasis>&lt;std::<emphasis role="keywordtype">size_t</emphasis>&#32;N,&#32;<emphasis role="keyword">typename</emphasis>&#32;IteratorType,&#32;enable_if_t&lt;N&#32;==&#32;0,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&gt;
4745 <emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(<emphasis role="keyword">const</emphasis>&#32;nlohmann::detail::iteration_proxy_value&lt;IteratorType&gt;&amp;&#32;i)&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(i.key())
4746 {
4747 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;i.key();
4748 }
4749 <emphasis role="comment">//&#32;Structured&#32;Bindings&#32;Support</emphasis>
4750 <emphasis role="comment">//&#32;For&#32;further&#32;reference&#32;see&#32;https://blog.tartanllama.xyz/structured-bindings/</emphasis>
4751 <emphasis role="comment">//&#32;And&#32;see&#32;https://github.com/nlohmann/json/pull/1391</emphasis>
4752 <emphasis role="keyword">template</emphasis>&lt;std::<emphasis role="keywordtype">size_t</emphasis>&#32;N,&#32;<emphasis role="keyword">typename</emphasis>&#32;IteratorType,&#32;enable_if_t&lt;N&#32;==&#32;1,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&gt;
4753 <emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(<emphasis role="keyword">const</emphasis>&#32;nlohmann::detail::iteration_proxy_value&lt;IteratorType&gt;&amp;&#32;i)&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(i.value())
4754 {
4755 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;i.value();
4756 }
4757 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
4758 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann</emphasis>
4759 
4760 <emphasis role="comment">//&#32;The&#32;Addition&#32;to&#32;the&#32;STD&#32;Namespace&#32;is&#32;required&#32;to&#32;add</emphasis>
4761 <emphasis role="comment">//&#32;Structured&#32;Bindings&#32;Support&#32;to&#32;the&#32;iteration_proxy_value&#32;class</emphasis>
4762 <emphasis role="comment">//&#32;For&#32;further&#32;reference&#32;see&#32;https://blog.tartanllama.xyz/structured-bindings/</emphasis>
4763 <emphasis role="comment">//&#32;And&#32;see&#32;https://github.com/nlohmann/json/pull/1391</emphasis>
4764 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>
4765 {
4766 <emphasis role="preprocessor">#if&#32;defined(__clang__)</emphasis>
4767 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Fix:&#32;https://github.com/nlohmann/json/issues/1401</emphasis>
4768 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#pragma&#32;clang&#32;diagnostic&#32;push</emphasis>
4769 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#pragma&#32;clang&#32;diagnostic&#32;ignored&#32;&quot;-Wmismatched-tags&quot;</emphasis>
4770 <emphasis role="preprocessor">#endif</emphasis>
4771 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;IteratorType&gt;
4772 <emphasis role="keyword">class&#32;</emphasis>tuple_size&lt;::nlohmann::detail::iteration_proxy_value&lt;IteratorType&gt;&gt;
4773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;std::integral_constant&lt;std::size_t,&#32;2&gt;&#32;{};
4774 
4775 <emphasis role="keyword">template</emphasis>&lt;std::<emphasis role="keywordtype">size_t</emphasis>&#32;N,&#32;<emphasis role="keyword">typename</emphasis>&#32;IteratorType&gt;
4776 <emphasis role="keyword">class&#32;</emphasis>tuple_element&lt;N,&#32;::nlohmann::detail::iteration_proxy_value&lt;IteratorType&#32;&gt;&gt;
4777 {
4778 &#32;&#32;<emphasis role="keyword">public</emphasis>:
4779 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classstd_1_1tuple__element_3_01_n_00_01_1_1nlohmann_1_1detail_1_1iteration__proxy__value_3_01_iterator_type_01_4_01_4_1ace1dfdb74841c2f58c064a50598188fd">type</link>&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(
4780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get&lt;N&gt;</link>(std::declval&#32;&lt;
4781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::nlohmann::detail::iteration_proxy_value&lt;IteratorType&#32;&gt;&gt;&#32;()));
4782 };
4783 <emphasis role="preprocessor">#if&#32;defined(__clang__)</emphasis>
4784 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#pragma&#32;clang&#32;diagnostic&#32;pop</emphasis>
4785 <emphasis role="preprocessor">#endif</emphasis>
4786 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
4787 
4788 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/meta/cpp_future.hpp&gt;</emphasis>
4789 
4790 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/meta/type_traits.hpp&gt;</emphasis>
4791 
4792 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/value_t.hpp&gt;</emphasis>
4793 
4794 
4795 <emphasis role="preprocessor">#if&#32;JSON_HAS_EXPERIMENTAL_FILESYSTEM</emphasis>
4796 <emphasis role="preprocessor">#include&#32;&lt;experimental/filesystem&gt;</emphasis>
4797 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail">nlohmann::detail</link>
4798 {
4799 <emphasis role="keyword">namespace&#32;</emphasis>std_fs&#32;=&#32;std::experimental::filesystem;
4800 }&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann::detail</emphasis>
4801 <emphasis role="preprocessor">#elif&#32;JSON_HAS_FILESYSTEM</emphasis>
4802 <emphasis role="preprocessor">#include&#32;&lt;filesystem&gt;</emphasis>
4803 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail">nlohmann::detail</link>
4804 {
4805 <emphasis role="keyword">namespace&#32;</emphasis>std_fs&#32;=&#32;std::filesystem;
4806 }&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann::detail</emphasis>
4807 <emphasis role="preprocessor">#endif</emphasis>
4808 
4809 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann">nlohmann</link>
4810 {
4811 <emphasis role="keyword">namespace&#32;</emphasis>detail
4812 {
4814 <emphasis role="comment">//&#32;constructors&#32;//</emphasis>
4816 
4817 <emphasis role="comment">/*</emphasis>
4818 <emphasis role="comment">&#32;*&#32;Note&#32;all&#32;external_constructor&lt;&gt;::construct&#32;functions&#32;need&#32;to&#32;call</emphasis>
4819 <emphasis role="comment">&#32;*&#32;j.m_value.destroy(j.m_type)&#32;to&#32;avoid&#32;a&#32;memory&#32;leak&#32;in&#32;case&#32;j&#32;contains&#32;an</emphasis>
4820 <emphasis role="comment">&#32;*&#32;allocated&#32;value&#32;(e.g.,&#32;a&#32;string).&#32;See&#32;bug&#32;issue</emphasis>
4821 <emphasis role="comment">&#32;*&#32;https://github.com/nlohmann/json/issues/2865&#32;for&#32;more&#32;information.</emphasis>
4822 <emphasis role="comment">&#32;*/</emphasis>
4823 
4824 <emphasis role="keyword">template</emphasis>&lt;value_t&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1external__constructor">external_constructor</link>;
4825 
4826 <emphasis role="keyword">template</emphasis>&lt;&gt;
4827 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1external__constructor">external_constructor</link>&lt;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link>::<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">boolean</link>&gt;
4828 {
4829 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
4830 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1boolean_01_4_1a867122bcf0856c757bd6bcbfb8be74bc">construct</link>(BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::boolean_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
4831 &#32;&#32;&#32;&#32;{
4832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value.destroy(j.m_type);
4833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_type&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">value_t::boolean</link>;
4834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>;
4835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.assert_invariant();
4836 &#32;&#32;&#32;&#32;}
4837 };
4838 
4839 <emphasis role="keyword">template</emphasis>&lt;&gt;
4840 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1external__constructor">external_constructor</link>&lt;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link>::<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string</link>&gt;
4841 {
4842 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
4843 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1string_01_4_1ad88d0b4b7ea01ea20e12cc1b82fe0d92">construct</link>(BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::string_t&amp;&#32;s)
4844 &#32;&#32;&#32;&#32;{
4845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value.destroy(j.m_type);
4846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_type&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">value_t::string</link>;
4847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value&#32;=&#32;s;
4848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.assert_invariant();
4849 &#32;&#32;&#32;&#32;}
4850 
4851 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
4852 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1string_01_4_1a74f56b9ca1d4e8db9751353d76668322">construct</link>(BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::string_t&amp;&amp;&#32;s)
4853 &#32;&#32;&#32;&#32;{
4854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value.destroy(j.m_type);
4855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_type&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">value_t::string</link>;
4856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(s);
4857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.assert_invariant();
4858 &#32;&#32;&#32;&#32;}
4859 
4860 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;CompatibleStringType,
4861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enable_if_t&#32;&lt;&#32;!std::is_same&lt;CompatibleStringType,&#32;typename&#32;BasicJsonType::string_t&gt;::value,
4862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;&#32;=&#32;0&#32;&gt;
4863 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1string_01_4_1a8822d43f0e20c5a28be329f9ca7de6c4">construct</link>(BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">const</emphasis>&#32;CompatibleStringType&amp;&#32;str)
4864 &#32;&#32;&#32;&#32;{
4865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value.destroy(j.m_type);
4866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_type&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">value_t::string</link>;
4867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value.string&#32;=&#32;j.template&#32;create&lt;typename&#32;BasicJsonType::string_t&gt;(str);
4868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.assert_invariant();
4869 &#32;&#32;&#32;&#32;}
4870 };
4871 
4872 <emphasis role="keyword">template</emphasis>&lt;&gt;
4873 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1external__constructor">external_constructor</link>&lt;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link>::<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab49f49751b4640af1400b6a633535539">binary</link>&gt;
4874 {
4875 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
4876 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1binary_01_4_1a0ff0da4f9a4d27955961477102c50a27">construct</link>(BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::binary_t&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>)
4877 &#32;&#32;&#32;&#32;{
4878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value.destroy(j.m_type);
4879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_type&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">value_t::binary</link>;
4880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::binary_t(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>);
4881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.assert_invariant();
4882 &#32;&#32;&#32;&#32;}
4883 
4884 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
4885 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1binary_01_4_1a1c478157dc8bad20f09572c5b2406150">construct</link>(BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::binary_t&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>)
4886 &#32;&#32;&#32;&#32;{
4887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value.destroy(j.m_type);
4888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_type&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">value_t::binary</link>;
4889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::binary_t(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>));
4890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.assert_invariant();
4891 &#32;&#32;&#32;&#32;}
4892 };
4893 
4894 <emphasis role="keyword">template</emphasis>&lt;&gt;
4895 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1external__constructor">external_constructor</link>&lt;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link>::<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">number_float</link>&gt;
4896 {
4897 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
4898 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1number__float_01_4_1a669df5a4d258b588e67f747c6d656cdb">construct</link>(BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_float_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
4899 &#32;&#32;&#32;&#32;{
4900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value.destroy(j.m_type);
4901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_type&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">value_t::number_float</link>;
4902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>;
4903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.assert_invariant();
4904 &#32;&#32;&#32;&#32;}
4905 };
4906 
4907 <emphasis role="keyword">template</emphasis>&lt;&gt;
4908 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1external__constructor">external_constructor</link>&lt;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link>::<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">number_unsigned</link>&gt;
4909 {
4910 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
4911 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1number__unsigned_01_4_1a17969b14852f43e04353858c87b0f539">construct</link>(BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_unsigned_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
4912 &#32;&#32;&#32;&#32;{
4913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value.destroy(j.m_type);
4914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_type&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">value_t::number_unsigned</link>;
4915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>;
4916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.assert_invariant();
4917 &#32;&#32;&#32;&#32;}
4918 };
4919 
4920 <emphasis role="keyword">template</emphasis>&lt;&gt;
4921 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1external__constructor">external_constructor</link>&lt;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link>::<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">number_integer</link>&gt;
4922 {
4923 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
4924 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1number__integer_01_4_1a7c3949672ddb45095cc2527635feef0b">construct</link>(BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_integer_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
4925 &#32;&#32;&#32;&#32;{
4926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value.destroy(j.m_type);
4927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_type&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">value_t::number_integer</link>;
4928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>;
4929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.assert_invariant();
4930 &#32;&#32;&#32;&#32;}
4931 };
4932 
4933 <emphasis role="keyword">template</emphasis>&lt;&gt;
4934 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1external__constructor">external_constructor</link>&lt;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link>::<link linkend="_classarray">array</link>&gt;
4935 {
4936 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
4937 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1array_01_4_1abfb2a6eec0bc21e8a7438546aebc55d8">construct</link>(BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::array_t&amp;&#32;arr)
4938 &#32;&#32;&#32;&#32;{
4939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value.destroy(j.m_type);
4940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_type&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">value_t::array</link>;
4941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value&#32;=&#32;arr;
4942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.set_parents();
4943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.assert_invariant();
4944 &#32;&#32;&#32;&#32;}
4945 
4946 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
4947 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1array_01_4_1a50474d6624957a630a1d398cac1e7bfa">construct</link>(BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::array_t&amp;&amp;&#32;arr)
4948 &#32;&#32;&#32;&#32;{
4949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value.destroy(j.m_type);
4950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_type&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">value_t::array</link>;
4951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(arr);
4952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.set_parents();
4953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.assert_invariant();
4954 &#32;&#32;&#32;&#32;}
4955 
4956 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;CompatibleArrayType,
4957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enable_if_t&#32;&lt;&#32;!std::is_same&lt;CompatibleArrayType,&#32;typename&#32;BasicJsonType::array_t&gt;::value,
4958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;&#32;=&#32;0&#32;&gt;
4959 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1array_01_4_1a110f50fd5378da876d9a6d6a8d945e37">construct</link>(BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">const</emphasis>&#32;CompatibleArrayType&amp;&#32;arr)
4960 &#32;&#32;&#32;&#32;{
4961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::begin;
4962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::end;
4963 
4964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value.destroy(j.m_type);
4965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_type&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">value_t::array</link>;
4966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value.array&#32;=&#32;j.template&#32;create&lt;typename&#32;BasicJsonType::array_t&gt;(begin(arr),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(arr));
4967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.set_parents();
4968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.assert_invariant();
4969 &#32;&#32;&#32;&#32;}
4970 
4971 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
4972 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1array_01_4_1a4ebb19b1cb84b4cb224a4c5322e16f14">construct</link>(BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;bool&gt;&amp;&#32;arr)
4973 &#32;&#32;&#32;&#32;{
4974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value.destroy(j.m_type);
4975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_type&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">value_t::array</link>;
4976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">value_t::array</link>;
4977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value.array-&gt;reserve(arr.size());
4978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;:&#32;arr)
4979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value.array-&gt;push_back(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>);
4981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.set_parent(j.m_value.array-&gt;back());
4982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.assert_invariant();
4984 &#32;&#32;&#32;&#32;}
4985 
4986 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,
4987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t&lt;std::is_convertible&lt;T, BasicJsonType&gt;::value</link>,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&gt;
4988 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1array_01_4_1a1b9226304e6492141080b4ebf228ddac">construct</link>(BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">const</emphasis>&#32;std::valarray&lt;T&gt;&amp;&#32;arr)
4989 &#32;&#32;&#32;&#32;{
4990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value.destroy(j.m_type);
4991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_type&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">value_t::array</link>;
4992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">value_t::array</link>;
4993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value.array-&gt;resize(arr.size());
4994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arr.size()&#32;&gt;&#32;0)
4995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link>(std::begin(arr),&#32;std::end(arr),&#32;j.m_value.array-&gt;begin());
4997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.set_parents();
4999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.assert_invariant();
5000 &#32;&#32;&#32;&#32;}
5001 };
5002 
5003 <emphasis role="keyword">template</emphasis>&lt;&gt;
5004 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1external__constructor">external_constructor</link>&lt;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link>::<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab49790263c78300fbf05719e38246198">object</link>&gt;
5005 {
5006 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
5007 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1object_01_4_1a3a369c5d49596dd4411e368425f9ac7a">construct</link>(BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::object_t&amp;&#32;obj)
5008 &#32;&#32;&#32;&#32;{
5009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value.destroy(j.m_type);
5010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_type&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">value_t::object</link>;
5011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value&#32;=&#32;obj;
5012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.set_parents();
5013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.assert_invariant();
5014 &#32;&#32;&#32;&#32;}
5015 
5016 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
5017 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1object_01_4_1a1e044961affbd6417386d6e9f1d545e9">construct</link>(BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::object_t&amp;&amp;&#32;obj)
5018 &#32;&#32;&#32;&#32;{
5019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value.destroy(j.m_type);
5020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_type&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">value_t::object</link>;
5021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(obj);
5022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.set_parents();
5023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.assert_invariant();
5024 &#32;&#32;&#32;&#32;}
5025 
5026 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;CompatibleObjectType,
5027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enable_if_t&#32;&lt;&#32;!std::is_same&lt;CompatibleObjectType,&#32;typename&#32;BasicJsonType::object_t&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;&#32;=&#32;0&#32;&gt;
5028 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1object_01_4_1a91f89abe0ec4dec59099b691682ff927">construct</link>(BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">const</emphasis>&#32;CompatibleObjectType&amp;&#32;obj)
5029 &#32;&#32;&#32;&#32;{
5030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::begin;
5031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::end;
5032 
5033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value.destroy(j.m_type);
5034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_type&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">value_t::object</link>;
5035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value.object&#32;=&#32;j.template&#32;create&lt;typename&#32;BasicJsonType::object_t&gt;(begin(obj),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(obj));
5036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.set_parents();
5037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.assert_invariant();
5038 &#32;&#32;&#32;&#32;}
5039 };
5040 
5042 <emphasis role="comment">//&#32;to_json&#32;//</emphasis>
5044 
5045 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,
5046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enable_if_t&lt;std::is_same&lt;T,&#32;typename&#32;BasicJsonType::boolean_t&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&gt;
5047 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1a804b98cbe89b7e44b698f2ca860490">to_json</link>(BasicJsonType&amp;&#32;j,&#32;T&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
5048 {
5049 &#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1external__constructor">external_constructor&lt;value_t::boolean&gt;::construct</link>(j,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>);
5050 }
5051 
5052 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;CompatibleString,
5053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enable_if_t&lt;std::is_constructible&lt;typename&#32;BasicJsonType::string_t,&#32;CompatibleString&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&gt;
5054 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1a804b98cbe89b7e44b698f2ca860490">to_json</link>(BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">const</emphasis>&#32;CompatibleString&amp;&#32;s)
5055 {
5056 &#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1external__constructor">external_constructor&lt;value_t::string&gt;::construct</link>(j,&#32;s);
5057 }
5058 
5059 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
5060 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1a804b98cbe89b7e44b698f2ca860490">to_json</link>(BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::string_t&amp;&amp;&#32;s)
5061 {
5062 &#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1external__constructor">external_constructor&lt;value_t::string&gt;::construct</link>(j,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(s));
5063 }
5064 
5065 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;FloatType,
5066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enable_if_t&lt;std::is_floating_point&lt;FloatType&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&gt;
5067 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1a804b98cbe89b7e44b698f2ca860490">to_json</link>(BasicJsonType&amp;&#32;j,&#32;FloatType&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
5068 {
5069 &#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1external__constructor">external_constructor&lt;value_t::number_float&gt;::construct</link>(j,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;BasicJsonType::number_float_t<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>));
5070 }
5071 
5072 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;CompatibleNumberUnsignedType,
5073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enable_if_t&lt;is_compatible_integer_type&lt;typename&#32;BasicJsonType::number_unsigned_t,&#32;CompatibleNumberUnsignedType&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&gt;
5074 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1a804b98cbe89b7e44b698f2ca860490">to_json</link>(BasicJsonType&amp;&#32;j,&#32;CompatibleNumberUnsignedType&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
5075 {
5076 &#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1external__constructor">external_constructor&lt;value_t::number_unsigned&gt;::construct</link>(j,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;BasicJsonType::number_unsigned_t<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>));
5077 }
5078 
5079 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;CompatibleNumberIntegerType,
5080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enable_if_t&lt;is_compatible_integer_type&lt;typename&#32;BasicJsonType::number_integer_t,&#32;CompatibleNumberIntegerType&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&gt;
5081 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1a804b98cbe89b7e44b698f2ca860490">to_json</link>(BasicJsonType&amp;&#32;j,&#32;CompatibleNumberIntegerType&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
5082 {
5083 &#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1external__constructor">external_constructor&lt;value_t::number_integer&gt;::construct</link>(j,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;BasicJsonType::number_integer_t<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>));
5084 }
5085 
5086 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;EnumType,
5087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enable_if_t&lt;std::is_enum&lt;EnumType&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&gt;
5088 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1a804b98cbe89b7e44b698f2ca860490">to_json</link>(BasicJsonType&amp;&#32;j,&#32;EnumType&#32;e)&#32;<emphasis role="keyword">noexcept</emphasis>
5089 {
5090 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>underlying_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::underlying_type&lt;EnumType&gt;::type;
5091 &#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1external__constructor">external_constructor&lt;value_t::number_integer&gt;::construct</link>(j,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>underlying_type<emphasis role="keyword">&gt;</emphasis>(e));
5092 }
5093 
5094 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
5095 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1a804b98cbe89b7e44b698f2ca860490">to_json</link>(BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;bool&gt;&amp;&#32;e)
5096 {
5097 &#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1external__constructor">external_constructor&lt;value_t::array&gt;::construct</link>(j,&#32;e);
5098 }
5099 
5100 <emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;CompatibleArrayType,
5101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&#32;&lt;&#32;is_compatible_array_type&lt;BasicJsonType,
5102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CompatibleArrayType&gt;<link linkend="_classvalue">::value</link>&amp;&amp;
5103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!is_compatible_object_type&lt;BasicJsonType,&#32;CompatibleArrayType&gt;::value&amp;&amp;
5104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!<link linkend="_structnlohmann_1_1detail_1_1is__compatible__string__type_1a3a4d8480fba1300e3986a80f37da7713">is_compatible_string_type&lt;BasicJsonType, CompatibleArrayType&gt;::value</link>&amp;&amp;
5105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!std::is_same&lt;typename&#32;BasicJsonType::binary_t,&#32;CompatibleArrayType&gt;::value&amp;&amp;
5106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!is_basic_json&lt;CompatibleArrayType&gt;::value,
5107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;&#32;=&#32;0&#32;&gt;
5108 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1a804b98cbe89b7e44b698f2ca860490">to_json</link>(BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">const</emphasis>&#32;CompatibleArrayType&amp;&#32;arr)
5109 {
5110 &#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1external__constructor">external_constructor&lt;value_t::array&gt;::construct</link>(j,&#32;arr);
5111 }
5112 
5113 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
5114 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1a804b98cbe89b7e44b698f2ca860490">to_json</link>(BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::binary_t&amp;&#32;bin)
5115 {
5116 &#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1external__constructor">external_constructor&lt;value_t::binary&gt;::construct</link>(j,&#32;bin);
5117 }
5118 
5119 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,
5120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enable_if_t&lt;std::is_convertible&lt;T,&#32;BasicJsonType&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&gt;
5121 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1a804b98cbe89b7e44b698f2ca860490">to_json</link>(BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">const</emphasis>&#32;std::valarray&lt;T&gt;&amp;&#32;arr)
5122 {
5123 &#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1external__constructor">external_constructor&lt;value_t::array&gt;::construct</link>(j,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(arr));
5124 }
5125 
5126 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
5127 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1a804b98cbe89b7e44b698f2ca860490">to_json</link>(BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::array_t&amp;&amp;&#32;arr)
5128 {
5129 &#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1external__constructor">external_constructor&lt;value_t::array&gt;::construct</link>(j,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(arr));
5130 }
5131 
5132 <emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;CompatibleObjectType,
5133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enable_if_t&#32;&lt;&#32;is_compatible_object_type&lt;BasicJsonType,&#32;CompatibleObjectType&gt;::value&amp;&amp;&#32;!is_basic_json&lt;CompatibleObjectType&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;&#32;=&#32;0&#32;&gt;
5134 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1a804b98cbe89b7e44b698f2ca860490">to_json</link>(BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">const</emphasis>&#32;CompatibleObjectType&amp;&#32;obj)
5135 {
5136 &#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1external__constructor">external_constructor&lt;value_t::object&gt;::construct</link>(j,&#32;obj);
5137 }
5138 
5139 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
5140 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1a804b98cbe89b7e44b698f2ca860490">to_json</link>(BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::object_t&amp;&amp;&#32;obj)
5141 {
5142 &#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1external__constructor">external_constructor&lt;value_t::object&gt;::construct</link>(j,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(obj));
5143 }
5144 
5145 <emphasis role="keyword">template</emphasis>&#32;&lt;
5146 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;std::size_t&#32;N,
5147 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&#32;&lt;&#32;!std::is_constructible&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::string_t,
5148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;T(&amp;)[N]&gt;<link linkend="_classvalue">::value</link>,&#32;<emphasis role="comment">//&#32;NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)</emphasis>
5149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;&#32;=&#32;0&#32;&gt;
5150 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1a804b98cbe89b7e44b698f2ca860490">to_json</link>(BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">const</emphasis>&#32;T(&amp;arr)[N])&#32;<emphasis role="comment">//&#32;NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)</emphasis>
5151 {
5152 &#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1external__constructor">external_constructor&lt;value_t::array&gt;::construct</link>(j,&#32;arr);
5153 }
5154 
5155 template&#32;&lt;&#32;typename&#32;BasicJsonType,&#32;typename&#32;T1,&#32;typename&#32;T2,&#32;enable_if_t&#32;&lt;&#32;std::is_constructible&lt;BasicJsonType,&#32;T1&gt;::value&amp;&amp;&#32;std::is_constructible&lt;BasicJsonType,&#32;T2&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;&#32;=&#32;0&#32;&gt;
5156 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1a804b98cbe89b7e44b698f2ca860490">to_json</link>(BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">const</emphasis>&#32;std::pair&lt;T1,&#32;T2&gt;&amp;&#32;p)
5157 {
5158 &#32;&#32;&#32;&#32;j&#32;=&#32;{&#32;p.first,&#32;p.second&#32;};
5159 }
5160 
5161 <emphasis role="comment">//&#32;for&#32;https://github.com/nlohmann/json/pull/1134</emphasis>
5162 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,
5163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enable_if_t&lt;std::is_same&lt;T,&#32;iteration_proxy_value&lt;typename&#32;BasicJsonType::iterator&gt;&gt;<link linkend="_classvalue">::value</link>,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&gt;
5164 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1a804b98cbe89b7e44b698f2ca860490">to_json</link>(BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>)
5165 {
5166 &#32;&#32;&#32;&#32;j&#32;=&#32;{&#32;{<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>.key(),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>.value()}&#32;};
5167 }
5168 
5169 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;Tuple,&#32;std::size_t...&#32;Idx&gt;
5170 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a510dfa15b01e9a8afe31600a27b28199">to_json_tuple_impl</link>(BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">const</emphasis>&#32;Tuple&amp;&#32;t,&#32;<link linkend="_structnlohmann_1_1detail_1_1integer__sequence">index_sequence&lt;Idx...&gt;</link>&#32;<emphasis role="comment">/*unused*/</emphasis>)
5171 {
5172 &#32;&#32;&#32;&#32;j&#32;=&#32;{&#32;std::get&lt;Idx&gt;(t)...&#32;};
5173 }
5174 
5175 template&lt;typename&#32;BasicJsonType,&#32;typename&#32;T,&#32;enable_if_t&lt;is_constructible_tuple&lt;BasicJsonType,&#32;T&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;&#32;=&#32;0&gt;
5176 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1a804b98cbe89b7e44b698f2ca860490">to_json</link>(BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;t)
5177 {
5178 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a510dfa15b01e9a8afe31600a27b28199">to_json_tuple_impl</link>(j,&#32;t,&#32;<link linkend="_namespacenlohmann_1_1detail_1a9b47f1c18e3c9739b20633aeee0d0f62">make_index_sequence</link>&lt;std::tuple_size&lt;T&gt;::value&gt;&#32;{});
5179 }
5180 
5181 <emphasis role="preprocessor">#if&#32;JSON_HAS_FILESYSTEM&#32;||&#32;JSON_HAS_EXPERIMENTAL_FILESYSTEM</emphasis>
5182 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
5183 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1a804b98cbe89b7e44b698f2ca860490">to_json</link>(BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">const</emphasis>&#32;std_fs::path&amp;&#32;p)
5184 {
5185 &#32;&#32;&#32;&#32;j&#32;=&#32;p.string();
5186 }
5187 <emphasis role="preprocessor">#endif</emphasis>
5188 
5189 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1to__json__fn">to_json_fn</link>
5190 {
5191 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
5192 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_structnlohmann_1_1detail_1_1to__json__fn_1aecfb5114c8a737fc89d98589482795b8">operator()</link>(BasicJsonType&amp;&#32;j,&#32;T&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(<link linkend="_namespacenlohmann_1_1detail_1a1a804b98cbe89b7e44b698f2ca860490">to_json</link>(j,&#32;std::forward&lt;T&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>))))
5193 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(<link linkend="_namespacenlohmann_1_1detail_1a1a804b98cbe89b7e44b698f2ca860490">to_json</link>(j,&#32;std::forward&lt;T&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>())
5194 &#32;&#32;&#32;&#32;{
5195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1a804b98cbe89b7e44b698f2ca860490">to_json</link>(j,&#32;std::forward&lt;T&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>));
5196 &#32;&#32;&#32;&#32;}
5197 };
5198 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
5199 
5203 <emphasis role="keyword">namespace&#32;</emphasis><emphasis role="comment">//&#32;NOLINT(cert-dcl59-cpp,fuchsia-header-anon-namespaces,google-build-namespaces)</emphasis>
5204 {
5205 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;to_json&#32;=&#32;<link linkend="_structnlohmann_1_1detail_1_1static__const_1a6bb7ab2ddd6abc41fb4ffb7c6dfa237e">detail::static_const&lt;detail::to_json_fn&gt;::value</link>;&#32;<emphasis role="comment">//&#32;NOLINT(misc-definitions-in-headers)</emphasis>
5206 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
5207 }&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann</emphasis>
5208 
5209 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/meta/identity_tag.hpp&gt;</emphasis>
5210 
5211 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/meta/type_traits.hpp&gt;</emphasis>
5212 
5213 
5214 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann">nlohmann</link>
5215 {
5216 
5218 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;ValueType,&#32;<emphasis role="keyword">typename</emphasis>&gt;
5219 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1adl__serializer">adl_serializer</link>
5220 {
5223 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;TargetType&#32;=&#32;ValueType&gt;
5224 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_structnlohmann_1_1adl__serializer_1a8180f52bf21fc610705bc521f22116ae">from_json</link>(BasicJsonType&#32;&amp;&amp;&#32;j,&#32;TargetType&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;<emphasis role="keyword">noexcept</emphasis>(
5225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(::nlohmann::from_json(std::forward&lt;BasicJsonType&gt;(j),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)))
5226 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(::nlohmann::from_json(std::forward&lt;BasicJsonType&gt;(j),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>())
5227 &#32;&#32;&#32;&#32;{
5228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::nlohmann::from_json(std::forward&lt;BasicJsonType&gt;(j),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
5229 &#32;&#32;&#32;&#32;}
5230 
5233 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;TargetType&#32;=&#32;ValueType&gt;
5234 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_structnlohmann_1_1adl__serializer_1abdae6028cdef1bf1838b47eeb7022ebc">from_json</link>(BasicJsonType&#32;&amp;&amp;&#32;j)&#32;<emphasis role="keyword">noexcept</emphasis>(
5235 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(::nlohmann::from_json(std::forward&lt;BasicJsonType&gt;(j),&#32;detail::identity_tag&lt;TargetType&gt;&#32;{})))
5236 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(::nlohmann::from_json(std::forward&lt;BasicJsonType&gt;(j),&#32;detail::identity_tag&lt;TargetType&gt;&#32;{}))
5237 &#32;&#32;&#32;&#32;{
5238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;::nlohmann::from_json(std::forward&lt;BasicJsonType&gt;(j),&#32;detail::identity_tag&lt;TargetType&gt;&#32;{});
5239 &#32;&#32;&#32;&#32;}
5240 
5243 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;TargetType&#32;=&#32;ValueType&gt;
5244 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_structnlohmann_1_1adl__serializer_1afdcc8f0204ce8ac7d28a5403f6e1f0e7">to_json</link>(BasicJsonType&amp;&#32;j,&#32;TargetType&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;<emphasis role="keyword">noexcept</emphasis>(
5245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(::nlohmann::to_json(j,&#32;std::forward&lt;TargetType&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>))))
5246 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(::nlohmann::to_json(j,&#32;std::forward&lt;TargetType&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>())
5247 &#32;&#32;&#32;&#32;{
5248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::nlohmann::to_json(j,&#32;std::forward&lt;TargetType&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>));
5249 &#32;&#32;&#32;&#32;}
5250 };
5251 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann</emphasis>
5252 
5253 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/byte_container_with_subtype.hpp&gt;</emphasis>
5254 
5255 
5256 <emphasis role="preprocessor">#include&#32;&lt;cstdint&gt;</emphasis>&#32;<emphasis role="comment">//&#32;uint8_t,&#32;uint64_t</emphasis>
5257 <emphasis role="preprocessor">#include&#32;&lt;tuple&gt;</emphasis>&#32;<emphasis role="comment">//&#32;tie</emphasis>
5258 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>&#32;<emphasis role="comment">//&#32;move</emphasis>
5259 
5260 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann">nlohmann</link>
5261 {
5262 
5265 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BinaryType&gt;
5266 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classnlohmann_1_1byte__container__with__subtype">byte_container_with_subtype</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;BinaryType
5267 {
5268 &#32;&#32;<emphasis role="keyword">public</emphasis>:
5269 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">container_type</link>&#32;=&#32;BinaryType;
5270 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1byte__container__with__subtype_1abf1e0e8ecd51472c25b0fe8aae786a70">subtype_type</link>&#32;=&#32;std::uint64_t;
5271 
5273 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1byte__container__with__subtype_1a89c78caf8c7b54dc1bcfa4b0b23d2fc8">byte_container_with_subtype</link>()&#32;noexcept(noexcept(<link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">container_type</link>()))
5274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">container_type</link>()
5275 &#32;&#32;&#32;&#32;{}
5276 
5278 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1byte__container__with__subtype_1a640b6dd55847e86dbb936f97b946170e">byte_container_with_subtype</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">container_type</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>)&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(<link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">container_type</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>)))
5279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">container_type</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>)
5280 &#32;&#32;&#32;&#32;{}
5281 
5283 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1byte__container__with__subtype_1a73dcae1798eab1b496936bfae7b4b9c0">byte_container_with_subtype</link>(<link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">container_type</link>&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>)&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(<link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">container_type</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>))))
5284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">container_type</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>))
5285 &#32;&#32;&#32;&#32;{}
5286 
5288 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1byte__container__with__subtype_1a3c0a82d77668f384bce05c6ec4537cfe">byte_container_with_subtype</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">container_type</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>,&#32;<link linkend="_classnlohmann_1_1byte__container__with__subtype_1abf1e0e8ecd51472c25b0fe8aae786a70">subtype_type</link>&#32;subtype_)&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(<link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">container_type</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>)))
5289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">container_type</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>)
5290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;m_subtype(subtype_)
5291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;m_has_subtype(<emphasis role="keyword">true</emphasis>)
5292 &#32;&#32;&#32;&#32;{}
5293 
5295 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1byte__container__with__subtype_1a8c61acfee31216f530d2bd37571a6ff4">byte_container_with_subtype</link>(<link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">container_type</link>&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>,&#32;<link linkend="_classnlohmann_1_1byte__container__with__subtype_1abf1e0e8ecd51472c25b0fe8aae786a70">subtype_type</link>&#32;subtype_)&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(<link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">container_type</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>))))
5296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">container_type</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>))
5297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;m_subtype(subtype_)
5298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;m_has_subtype(<emphasis role="keyword">true</emphasis>)
5299 &#32;&#32;&#32;&#32;{}
5300 
5301 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1byte__container__with__subtype_1aee67fde9d3d571a07d5bb35df21c0555">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1byte__container__with__subtype">byte_container_with_subtype</link>&amp;&#32;rhs)<emphasis role="keyword">&#32;const</emphasis>
5302 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
5303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::tie(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>BinaryType&amp;<emphasis role="keyword">&gt;</emphasis>(*<emphasis role="keyword">this</emphasis>),&#32;m_subtype,&#32;m_has_subtype)&#32;==
5304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::tie(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>BinaryType&amp;<emphasis role="keyword">&gt;</emphasis>(rhs),&#32;rhs.m_subtype,&#32;rhs.m_has_subtype);
5305 &#32;&#32;&#32;&#32;}
5306 
5307 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1byte__container__with__subtype_1a760bf39cc5477bc663d8bb3c44aabf6a">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1byte__container__with__subtype">byte_container_with_subtype</link>&amp;&#32;rhs)<emphasis role="keyword">&#32;const</emphasis>
5308 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
5309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(rhs&#32;==&#32;*<emphasis role="keyword">this</emphasis>);
5310 &#32;&#32;&#32;&#32;}
5311 
5314 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classnlohmann_1_1byte__container__with__subtype_1aa8f9fca70673949d7483a6097d00d61c">set_subtype</link>(<link linkend="_classnlohmann_1_1byte__container__with__subtype_1abf1e0e8ecd51472c25b0fe8aae786a70">subtype_type</link>&#32;subtype_)&#32;<emphasis role="keyword">noexcept</emphasis>
5315 &#32;&#32;&#32;&#32;{
5316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_subtype&#32;=&#32;subtype_;
5317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_has_subtype&#32;=&#32;<emphasis role="keyword">true</emphasis>;
5318 &#32;&#32;&#32;&#32;}
5319 
5322 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_classnlohmann_1_1byte__container__with__subtype_1abf1e0e8ecd51472c25b0fe8aae786a70">subtype_type</link>&#32;<link linkend="_classnlohmann_1_1byte__container__with__subtype_1abe68a969df28c8cb0b63355b4d38ec1a">subtype</link>()&#32;const&#32;noexcept
5323 &#32;&#32;&#32;&#32;{
5324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_has_subtype&#32;?&#32;m_subtype&#32;:&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classnlohmann_1_1byte__container__with__subtype_1abf1e0e8ecd51472c25b0fe8aae786a70">subtype_type</link><emphasis role="keyword">&gt;</emphasis>(-1);
5325 &#32;&#32;&#32;&#32;}
5326 
5329 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1byte__container__with__subtype_1a9fc42fb07003bf7048c2f1fc79478e02">has_subtype</link>()&#32;const&#32;noexcept
5330 &#32;&#32;&#32;&#32;{
5331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_has_subtype;
5332 &#32;&#32;&#32;&#32;}
5333 
5336 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classnlohmann_1_1byte__container__with__subtype_1a7b122b28ff2b8680557ca44ac9748e49">clear_subtype</link>()&#32;noexcept
5337 &#32;&#32;&#32;&#32;{
5338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_subtype&#32;=&#32;0;
5339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_has_subtype&#32;=&#32;<emphasis role="keyword">false</emphasis>;
5340 &#32;&#32;&#32;&#32;}
5341 
5342 &#32;&#32;<emphasis role="keyword">private</emphasis>:
5343 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1byte__container__with__subtype_1abf1e0e8ecd51472c25b0fe8aae786a70">subtype_type</link>&#32;m_subtype&#32;=&#32;0;
5344 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;m_has_subtype&#32;=&#32;<emphasis role="keyword">false</emphasis>;
5345 };
5346 
5347 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann</emphasis>
5348 
5349 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/conversions/from_json.hpp&gt;</emphasis>
5350 
5351 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/conversions/to_json.hpp&gt;</emphasis>
5352 
5353 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/exceptions.hpp&gt;</emphasis>
5354 
5355 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/hash.hpp&gt;</emphasis>
5356 
5357 
5358 <emphasis role="preprocessor">#include&#32;&lt;cstdint&gt;</emphasis>&#32;<emphasis role="comment">//&#32;uint8_t</emphasis>
5359 <emphasis role="preprocessor">#include&#32;&lt;cstddef&gt;</emphasis>&#32;<emphasis role="comment">//&#32;size_t</emphasis>
5360 <emphasis role="preprocessor">#include&#32;&lt;functional&gt;</emphasis>&#32;<emphasis role="comment">//&#32;hash</emphasis>
5361 
5362 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/macro_scope.hpp&gt;</emphasis>
5363 
5364 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/value_t.hpp&gt;</emphasis>
5365 
5366 
5367 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann">nlohmann</link>
5368 {
5369 <emphasis role="keyword">namespace&#32;</emphasis>detail
5370 {
5371 
5372 <emphasis role="comment">//&#32;boost::hash_combine</emphasis>
5373 <emphasis role="keyword">inline</emphasis>&#32;std::size_t&#32;combine(std::size_t&#32;seed,&#32;std::size_t&#32;h)&#32;<emphasis role="keyword">noexcept</emphasis>
5374 {
5375 &#32;&#32;&#32;&#32;<link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link>&#32;^=&#32;h&#32;+&#32;0x9e3779b9&#32;+&#32;(<link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link>&#32;&lt;&lt;&#32;6U)&#32;+&#32;(seed&#32;&gt;&gt;&#32;2U);
5376 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link>;
5377 }
5378 
5390 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
5391 std::size_t&#32;hash(<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;j)
5392 {
5393 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>string_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::string_t;
5394 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>number_integer_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_integer_t;
5395 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>number_unsigned_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_unsigned_t;
5396 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>number_float_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_float_t;
5397 
5398 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(j.type());
5399 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(j.type())
5400 &#32;&#32;&#32;&#32;{
5401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BasicJsonType::value_t::null:
5402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BasicJsonType::value_t::discarded:
5403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;combine(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>,&#32;0);
5405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5406 
5407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BasicJsonType::value_t::object:
5408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link>&#32;=&#32;combine(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>,&#32;j.size());
5410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;element&#32;:&#32;j.items())
5411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;h&#32;=&#32;std::hash&lt;string_t&gt;&#32;{}(element.key());
5413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link>&#32;=&#32;combine(seed,&#32;h);
5414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link>&#32;=&#32;combine(seed,&#32;hash(element.value()));
5415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link>;
5417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5418 
5419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BasicJsonType::value_t::array:
5420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link>&#32;=&#32;combine(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>,&#32;j.size());
5422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;element&#32;:&#32;j)
5423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link>&#32;=&#32;combine(seed,&#32;hash(element));
5425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link>;
5427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5428 
5429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BasicJsonType::value_t::string:
5430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;h&#32;=&#32;std::hash&lt;string_t&gt;&#32;{}(j.template&#32;get_ref&lt;const&#32;string_t&amp;&gt;());
5432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;combine(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>,&#32;h);
5433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5434 
5435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BasicJsonType::value_t::boolean:
5436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;h&#32;=&#32;std::hash&lt;bool&gt;&#32;{}(j.template&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get&lt;bool&gt;</link>());
5438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;combine(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>,&#32;h);
5439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5440 
5441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BasicJsonType::value_t::number_integer:
5442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;h&#32;=&#32;std::hash&lt;number_integer_t&gt;&#32;{}(j.template&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get&lt;number_integer_t&gt;</link>());
5444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;combine(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>,&#32;h);
5445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5446 
5447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BasicJsonType::value_t::number_unsigned:
5448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;h&#32;=&#32;std::hash&lt;number_unsigned_t&gt;&#32;{}(j.template&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get&lt;number_unsigned_t&gt;</link>());
5450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;combine(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>,&#32;h);
5451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5452 
5453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BasicJsonType::value_t::number_float:
5454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;h&#32;=&#32;std::hash&lt;number_float_t&gt;&#32;{}(j.template&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get&lt;number_float_t&gt;</link>());
5456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;combine(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>,&#32;h);
5457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5458 
5459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BasicJsonType::value_t::binary:
5460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link>&#32;=&#32;combine(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>,&#32;j.get_binary().size());
5462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;h&#32;=&#32;std::hash&lt;bool&gt;&#32;{}(j.get_binary().has_subtype());
5463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link>&#32;=&#32;combine(seed,&#32;h);
5464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link>&#32;=&#32;combine(seed,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(j.get_binary().subtype()));
5465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keywordtype">byte</emphasis>&#32;:&#32;j.get_binary())
5466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link>&#32;=&#32;combine(seed,&#32;std::hash&lt;std::uint8_t&gt;&#32;{}(<link linkend="__classes_2lib_2raylib_2src_2rlgl_8h_1a0c8186d9b9b7880309c27230bbb5e69d">byte</link>));
5468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link>;
5470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5471 
5472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
5473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(<emphasis role="keyword">false</emphasis>);&#32;<emphasis role="comment">//&#32;NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)&#32;LCOV_EXCL_LINE</emphasis>
5474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
5475 &#32;&#32;&#32;&#32;}
5476 }
5477 
5478 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
5479 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann</emphasis>
5480 
5481 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/input/binary_reader.hpp&gt;</emphasis>
5482 
5483 
5484 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>&#32;<emphasis role="comment">//&#32;generate_n</emphasis>
5485 <emphasis role="preprocessor">#include&#32;&lt;array&gt;</emphasis>&#32;<emphasis role="comment">//&#32;array</emphasis>
5486 <emphasis role="preprocessor">#include&#32;&lt;cmath&gt;</emphasis>&#32;<emphasis role="comment">//&#32;ldexp</emphasis>
5487 <emphasis role="preprocessor">#include&#32;&lt;cstddef&gt;</emphasis>&#32;<emphasis role="comment">//&#32;size_t</emphasis>
5488 <emphasis role="preprocessor">#include&#32;&lt;cstdint&gt;</emphasis>&#32;<emphasis role="comment">//&#32;uint8_t,&#32;uint16_t,&#32;uint32_t,&#32;uint64_t</emphasis>
5489 <emphasis role="preprocessor">#include&#32;&lt;cstdio&gt;</emphasis>&#32;<emphasis role="comment">//&#32;snprintf</emphasis>
5490 <emphasis role="preprocessor">#include&#32;&lt;cstring&gt;</emphasis>&#32;<emphasis role="comment">//&#32;memcpy</emphasis>
5491 <emphasis role="preprocessor">#include&#32;&lt;iterator&gt;</emphasis>&#32;<emphasis role="comment">//&#32;back_inserter</emphasis>
5492 <emphasis role="preprocessor">#include&#32;&lt;limits&gt;</emphasis>&#32;<emphasis role="comment">//&#32;numeric_limits</emphasis>
5493 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>&#32;<emphasis role="comment">//&#32;char_traits,&#32;string</emphasis>
5494 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>&#32;<emphasis role="comment">//&#32;make_pair,&#32;move</emphasis>
5495 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>&#32;<emphasis role="comment">//&#32;vector</emphasis>
5496 <emphasis role="preprocessor">#include&#32;&lt;map&gt;</emphasis>&#32;<emphasis role="comment">//&#32;map</emphasis>
5497 
5498 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/exceptions.hpp&gt;</emphasis>
5499 
5500 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/input/input_adapters.hpp&gt;</emphasis>
5501 
5502 
5503 <emphasis role="preprocessor">#include&#32;&lt;array&gt;</emphasis>&#32;<emphasis role="comment">//&#32;array</emphasis>
5504 <emphasis role="preprocessor">#include&#32;&lt;cstddef&gt;</emphasis>&#32;<emphasis role="comment">//&#32;size_t</emphasis>
5505 <emphasis role="preprocessor">#include&#32;&lt;cstring&gt;</emphasis>&#32;<emphasis role="comment">//&#32;strlen</emphasis>
5506 <emphasis role="preprocessor">#include&#32;&lt;iterator&gt;</emphasis>&#32;<emphasis role="comment">//&#32;begin,&#32;end,&#32;iterator_traits,&#32;random_access_iterator_tag,&#32;distance,&#32;next</emphasis>
5507 <emphasis role="preprocessor">#include&#32;&lt;memory&gt;</emphasis>&#32;<emphasis role="comment">//&#32;shared_ptr,&#32;make_shared,&#32;addressof</emphasis>
5508 <emphasis role="preprocessor">#include&#32;&lt;numeric&gt;</emphasis>&#32;<emphasis role="comment">//&#32;accumulate</emphasis>
5509 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>&#32;<emphasis role="comment">//&#32;string,&#32;char_traits</emphasis>
5510 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>&#32;<emphasis role="comment">//&#32;enable_if,&#32;is_base_of,&#32;is_pointer,&#32;is_integral,&#32;remove_pointer</emphasis>
5511 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>&#32;<emphasis role="comment">//&#32;pair,&#32;declval</emphasis>
5512 
5513 <emphasis role="preprocessor">#ifndef&#32;JSON_NO_IO</emphasis>
5514 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;cstdio&gt;</emphasis>&#32;&#32;&#32;<emphasis role="comment">//&#32;FILE&#32;*</emphasis>
5515 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;istream&gt;</emphasis>&#32;&#32;<emphasis role="comment">//&#32;istream</emphasis>
5516 <emphasis role="preprocessor">#endif&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;JSON_NO_IO</emphasis>
5517 
5518 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/iterators/iterator_traits.hpp&gt;</emphasis>
5519 
5520 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/macro_scope.hpp&gt;</emphasis>
5521 
5522 
5523 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann">nlohmann</link>
5524 {
5525 <emphasis role="keyword">namespace&#32;</emphasis>detail
5526 {
5528 <emphasis role="keyword">enum&#32;class</emphasis>&#32;input_format_t&#32;{&#32;<link linkend="_namespacenlohmann_1a2bfd99e845a2e5cd90aeaf1b1431f474">json</link>,&#32;cbor,&#32;msgpack,&#32;ubjson,&#32;bson,&#32;bjdata&#32;};
5529 
5531 <emphasis role="comment">//&#32;input&#32;adapters&#32;//</emphasis>
5533 
5534 <emphasis role="preprocessor">#ifndef&#32;JSON_NO_IO</emphasis>
5539 <emphasis role="keyword">class&#32;</emphasis>file_input_adapter
5540 {
5541 &#32;&#32;<emphasis role="keyword">public</emphasis>:
5542 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>char_type&#32;=&#32;char;
5543 
5544 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a5338981b5ad9027c9e54b1c5597f4344">JSON_HEDLEY_NON_NULL</link>(2)
5545 &#32;&#32;&#32;&#32;explicit&#32;file_input_adapter(<link linkend="_namespacestd">std</link>::FILE*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>)&#32;noexcept
5546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;m_file(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>)
5547 &#32;&#32;&#32;&#32;{}
5548 
5549 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;make&#32;class&#32;move-only</emphasis>
5550 &#32;&#32;&#32;&#32;file_input_adapter(<emphasis role="keyword">const</emphasis>&#32;file_input_adapter&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
5551 &#32;&#32;&#32;&#32;file_input_adapter(file_input_adapter&amp;&amp;)&#32;noexcept&#32;=&#32;default;
5552 &#32;&#32;&#32;&#32;file_input_adapter&amp;&#32;operator=(const&#32;file_input_adapter&amp;)&#32;=&#32;delete;
5553 &#32;&#32;&#32;&#32;file_input_adapter&amp;&#32;operator=(file_input_adapter&amp;&amp;)&#32;=&#32;delete;
5554 &#32;&#32;&#32;&#32;~file_input_adapter()&#32;=&#32;default;
5555 
5556 &#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::char_traits&lt;<emphasis role="keywordtype">char</emphasis>&gt;::int_type&#32;get_character()&#32;noexcept
5557 &#32;&#32;&#32;&#32;{
5558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::fgetc(m_file);
5559 &#32;&#32;&#32;&#32;}
5560 
5561 &#32;&#32;<emphasis role="keyword">private</emphasis>:
5563 &#32;&#32;&#32;&#32;std::FILE*&#32;m_file;
5564 };
5565 
5566 
5576 <emphasis role="keyword">class&#32;</emphasis>input_stream_adapter
5577 {
5578 &#32;&#32;<emphasis role="keyword">public</emphasis>:
5579 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>char_type&#32;=&#32;char;
5580 
5581 &#32;&#32;&#32;&#32;~input_stream_adapter()
5582 &#32;&#32;&#32;&#32;{
5583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clear&#32;stream&#32;flags;&#32;we&#32;use&#32;underlying&#32;streambuf&#32;I/O,&#32;do&#32;not</emphasis>
5584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;maintain&#32;ifstream&#32;flags,&#32;except&#32;eof</emphasis>
5585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)
5586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__monobehavior_8h_1a9870e0caa2f8e3e5700c4cbb21d73c07">is</link>-&gt;clear(<link linkend="__monobehavior_8h_1a9870e0caa2f8e3e5700c4cbb21d73c07">is</link>-&gt;rdstate()&#32;&amp;&#32;std::ios::eofbit);
5588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5589 &#32;&#32;&#32;&#32;}
5590 
5591 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;input_stream_adapter(std::istream&amp;&#32;i)
5592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="__monobehavior_8h_1a9870e0caa2f8e3e5700c4cbb21d73c07">is</link>(&amp;i),&#32;sb(i.rdbuf())
5593 &#32;&#32;&#32;&#32;{}
5594 
5595 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;delete&#32;because&#32;of&#32;pointer&#32;members</emphasis>
5596 &#32;&#32;&#32;&#32;input_stream_adapter(<emphasis role="keyword">const</emphasis>&#32;input_stream_adapter&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
5597 &#32;&#32;&#32;&#32;input_stream_adapter&amp;&#32;operator=(input_stream_adapter&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
5598 &#32;&#32;&#32;&#32;input_stream_adapter&amp;&#32;operator=(input_stream_adapter&amp;&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
5599 
5600 &#32;&#32;&#32;&#32;input_stream_adapter(input_stream_adapter&amp;&amp;&#32;rhs)&#32;noexcept
5601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="__monobehavior_8h_1a9870e0caa2f8e3e5700c4cbb21d73c07">is</link>(rhs.is),&#32;sb(rhs.sb)
5602 &#32;&#32;&#32;&#32;{
5603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rhs.is&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
5604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rhs.sb&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
5605 &#32;&#32;&#32;&#32;}
5606 
5607 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::istream/std::streambuf&#32;use&#32;std::char_traits&lt;char&gt;::to_int_type,&#32;to</emphasis>
5608 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ensure&#32;that&#32;std::char_traits&lt;char&gt;::eof()&#32;and&#32;the&#32;character&#32;0xFF&#32;do&#32;not</emphasis>
5609 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;end&#32;up&#32;as&#32;the&#32;same&#32;value,&#32;e.g.&#32;0xFFFFFFFF.</emphasis>
5610 &#32;&#32;&#32;&#32;std::char_traits&lt;char&gt;::int_type&#32;get_character()
5611 &#32;&#32;&#32;&#32;{
5612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;=&#32;sb-&gt;sbumpc();
5613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;set&#32;eof&#32;manually,&#32;as&#32;we&#32;don&apos;t&#32;use&#32;the&#32;istream&#32;interface.</emphasis>
5614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;==&#32;std::char_traits&lt;char&gt;::eof()))
5615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__monobehavior_8h_1a9870e0caa2f8e3e5700c4cbb21d73c07">is</link>-&gt;clear(<link linkend="__monobehavior_8h_1a9870e0caa2f8e3e5700c4cbb21d73c07">is</link>-&gt;rdstate()&#32;|&#32;std::ios::eofbit);
5617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>;
5619 &#32;&#32;&#32;&#32;}
5620 
5621 &#32;&#32;<emphasis role="keyword">private</emphasis>:
5623 &#32;&#32;&#32;&#32;std::istream*&#32;<link linkend="__monobehavior_8h_1a9870e0caa2f8e3e5700c4cbb21d73c07">is</link>&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
5624 &#32;&#32;&#32;&#32;std::streambuf*&#32;sb&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
5625 };
5626 <emphasis role="preprocessor">#endif&#32;&#32;</emphasis><emphasis role="comment">//&#32;JSON_NO_IO</emphasis>
5627 
5628 <emphasis role="comment">//&#32;General-purpose&#32;iterator-based&#32;adapter.&#32;It&#32;might&#32;not&#32;be&#32;as&#32;fast&#32;as</emphasis>
5629 <emphasis role="comment">//&#32;theoretically&#32;possible&#32;for&#32;some&#32;containers,&#32;but&#32;it&#32;is&#32;extremely&#32;versatile.</emphasis>
5630 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;IteratorType&gt;
5631 <emphasis role="keyword">class&#32;</emphasis>iterator_input_adapter
5632 {
5633 &#32;&#32;<emphasis role="keyword">public</emphasis>:
5634 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>char_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;IteratorType&gt;::value_type;
5635 
5636 &#32;&#32;&#32;&#32;iterator_input_adapter(IteratorType&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;IteratorType&#32;last)
5637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;current(<link linkend="_namespacestd">std</link>::<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>)),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(<link linkend="_namespacestd">std</link>::<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(last))
5638 &#32;&#32;&#32;&#32;{}
5639 
5640 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::char_traits&lt;char_type&gt;::int_type&#32;get_character()
5641 &#32;&#32;&#32;&#32;{
5642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0">JSON_HEDLEY_LIKELY</link>(current&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>))
5643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;std::char_traits&lt;char_type&gt;::to_int_type(*current);
5645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::advance(current,&#32;1);
5646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
5647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5648 
5649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::char_traits&lt;char_type&gt;::eof();
5650 &#32;&#32;&#32;&#32;}
5651 
5652 &#32;&#32;<emphasis role="keyword">private</emphasis>:
5653 &#32;&#32;&#32;&#32;IteratorType&#32;current;
5654 &#32;&#32;&#32;&#32;IteratorType&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>;
5655 
5656 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BaseInputAdapter,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;T&gt;
5657 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>wide_string_input_helper;
5658 
5659 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;empty()<emphasis role="keyword">&#32;const</emphasis>
5660 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
5661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;current&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>;
5662 &#32;&#32;&#32;&#32;}
5663 };
5664 
5665 
5666 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BaseInputAdapter,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;T&gt;
5667 <emphasis role="keyword">struct&#32;</emphasis>wide_string_input_helper;
5668 
5669 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BaseInputAdapter&gt;
5670 <emphasis role="keyword">struct&#32;</emphasis>wide_string_input_helper&lt;BaseInputAdapter,&#32;4&gt;
5671 {
5672 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;UTF-32</emphasis>
5673 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;fill_buffer(BaseInputAdapter&amp;&#32;input,
5674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::array&lt;std::char_traits&lt;char&gt;::int_type,&#32;4&gt;&amp;&#32;utf8_bytes,
5675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;utf8_bytes_index,
5676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;utf8_bytes_filled)
5677 &#32;&#32;&#32;&#32;{
5678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_bytes_index&#32;=&#32;0;
5679 
5680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(input.empty()))
5681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_bytes[0]&#32;=&#32;std::char_traits&lt;char&gt;::eof();
5683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_bytes_filled&#32;=&#32;1;
5684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;get&#32;the&#32;current&#32;character</emphasis>
5688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;wc&#32;=&#32;input.get_character();
5689 
5690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;UTF-32&#32;to&#32;UTF-8&#32;encoding</emphasis>
5691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(wc&#32;&lt;&#32;0x80)
5692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_bytes[0]&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::char_traits&lt;char&gt;::int_type<emphasis role="keyword">&gt;</emphasis>(wc);
5694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_bytes_filled&#32;=&#32;1;
5695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(wc&#32;&lt;=&#32;0x7FF)
5697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_bytes[0]&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::char_traits&lt;char&gt;::int_type<emphasis role="keyword">&gt;</emphasis>(0xC0u&#32;|&#32;((<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(wc)&#32;&gt;&gt;&#32;6u)&#32;&amp;&#32;0x1Fu));
5699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_bytes[1]&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::char_traits&lt;char&gt;::int_type<emphasis role="keyword">&gt;</emphasis>(0x80u&#32;|&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(wc)&#32;&amp;&#32;0x3Fu));
5700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_bytes_filled&#32;=&#32;2;
5701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(wc&#32;&lt;=&#32;0xFFFF)
5703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_bytes[0]&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::char_traits&lt;char&gt;::int_type<emphasis role="keyword">&gt;</emphasis>(0xE0u&#32;|&#32;((<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(wc)&#32;&gt;&gt;&#32;12u)&#32;&amp;&#32;0x0Fu));
5705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_bytes[1]&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::char_traits&lt;char&gt;::int_type<emphasis role="keyword">&gt;</emphasis>(0x80u&#32;|&#32;((<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(wc)&#32;&gt;&gt;&#32;6u)&#32;&amp;&#32;0x3Fu));
5706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_bytes[2]&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::char_traits&lt;char&gt;::int_type<emphasis role="keyword">&gt;</emphasis>(0x80u&#32;|&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(wc)&#32;&amp;&#32;0x3Fu));
5707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_bytes_filled&#32;=&#32;3;
5708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(wc&#32;&lt;=&#32;0x10FFFF)
5710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_bytes[0]&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::char_traits&lt;char&gt;::int_type<emphasis role="keyword">&gt;</emphasis>(0xF0u&#32;|&#32;((<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(wc)&#32;&gt;&gt;&#32;18u)&#32;&amp;&#32;0x07u));
5712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_bytes[1]&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::char_traits&lt;char&gt;::int_type<emphasis role="keyword">&gt;</emphasis>(0x80u&#32;|&#32;((<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(wc)&#32;&gt;&gt;&#32;12u)&#32;&amp;&#32;0x3Fu));
5713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_bytes[2]&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::char_traits&lt;char&gt;::int_type<emphasis role="keyword">&gt;</emphasis>(0x80u&#32;|&#32;((<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(wc)&#32;&gt;&gt;&#32;6u)&#32;&amp;&#32;0x3Fu));
5714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_bytes[3]&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::char_traits&lt;char&gt;::int_type<emphasis role="keyword">&gt;</emphasis>(0x80u&#32;|&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(wc)&#32;&amp;&#32;0x3Fu));
5715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_bytes_filled&#32;=&#32;4;
5716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;unknown&#32;character</emphasis>
5720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_bytes[0]&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::char_traits&lt;char&gt;::int_type<emphasis role="keyword">&gt;</emphasis>(wc);
5721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_bytes_filled&#32;=&#32;1;
5722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5724 &#32;&#32;&#32;&#32;}
5725 };
5726 
5727 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BaseInputAdapter&gt;
5728 <emphasis role="keyword">struct&#32;</emphasis>wide_string_input_helper&lt;BaseInputAdapter,&#32;2&gt;
5729 {
5730 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;UTF-16</emphasis>
5731 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;fill_buffer(BaseInputAdapter&amp;&#32;input,
5732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::array&lt;std::char_traits&lt;char&gt;::int_type,&#32;4&gt;&amp;&#32;utf8_bytes,
5733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;utf8_bytes_index,
5734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;utf8_bytes_filled)
5735 &#32;&#32;&#32;&#32;{
5736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_bytes_index&#32;=&#32;0;
5737 
5738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(input.empty()))
5739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_bytes[0]&#32;=&#32;std::char_traits&lt;char&gt;::eof();
5741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_bytes_filled&#32;=&#32;1;
5742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;get&#32;the&#32;current&#32;character</emphasis>
5746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;wc&#32;=&#32;input.get_character();
5747 
5748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;UTF-16&#32;to&#32;UTF-8&#32;encoding</emphasis>
5749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(wc&#32;&lt;&#32;0x80)
5750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_bytes[0]&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::char_traits&lt;char&gt;::int_type<emphasis role="keyword">&gt;</emphasis>(wc);
5752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_bytes_filled&#32;=&#32;1;
5753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(wc&#32;&lt;=&#32;0x7FF)
5755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_bytes[0]&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::char_traits&lt;char&gt;::int_type<emphasis role="keyword">&gt;</emphasis>(0xC0u&#32;|&#32;((<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(wc)&#32;&gt;&gt;&#32;6u)));
5757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_bytes[1]&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::char_traits&lt;char&gt;::int_type<emphasis role="keyword">&gt;</emphasis>(0x80u&#32;|&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(wc)&#32;&amp;&#32;0x3Fu));
5758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_bytes_filled&#32;=&#32;2;
5759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(0xD800&#32;&gt;&#32;wc&#32;||&#32;wc&#32;&gt;=&#32;0xE000)
5761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_bytes[0]&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::char_traits&lt;char&gt;::int_type<emphasis role="keyword">&gt;</emphasis>(0xE0u&#32;|&#32;((<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(wc)&#32;&gt;&gt;&#32;12u)));
5763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_bytes[1]&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::char_traits&lt;char&gt;::int_type<emphasis role="keyword">&gt;</emphasis>(0x80u&#32;|&#32;((<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(wc)&#32;&gt;&gt;&#32;6u)&#32;&amp;&#32;0x3Fu));
5764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_bytes[2]&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::char_traits&lt;char&gt;::int_type<emphasis role="keyword">&gt;</emphasis>(0x80u&#32;|&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(wc)&#32;&amp;&#32;0x3Fu));
5765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_bytes_filled&#32;=&#32;3;
5766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!input.empty()))
5770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;wc2&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(input.get_character());
5772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;charcode&#32;=&#32;0x10000u&#32;+&#32;(((<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(wc)&#32;&amp;&#32;0x3FFu)&#32;&lt;&lt;&#32;10u)&#32;|&#32;(wc2&#32;&amp;&#32;0x3FFu));
5773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_bytes[0]&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::char_traits&lt;char&gt;::int_type<emphasis role="keyword">&gt;</emphasis>(0xF0u&#32;|&#32;(charcode&#32;&gt;&gt;&#32;18u));
5774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_bytes[1]&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::char_traits&lt;char&gt;::int_type<emphasis role="keyword">&gt;</emphasis>(0x80u&#32;|&#32;((charcode&#32;&gt;&gt;&#32;12u)&#32;&amp;&#32;0x3Fu));
5775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_bytes[2]&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::char_traits&lt;char&gt;::int_type<emphasis role="keyword">&gt;</emphasis>(0x80u&#32;|&#32;((charcode&#32;&gt;&gt;&#32;6u)&#32;&amp;&#32;0x3Fu));
5776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_bytes[3]&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::char_traits&lt;char&gt;::int_type<emphasis role="keyword">&gt;</emphasis>(0x80u&#32;|&#32;(charcode&#32;&amp;&#32;0x3Fu));
5777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_bytes_filled&#32;=&#32;4;
5778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_bytes[0]&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::char_traits&lt;char&gt;::int_type<emphasis role="keyword">&gt;</emphasis>(wc);
5782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_bytes_filled&#32;=&#32;1;
5783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5786 &#32;&#32;&#32;&#32;}
5787 };
5788 
5789 <emphasis role="comment">//&#32;Wraps&#32;another&#32;input&#32;apdater&#32;to&#32;convert&#32;wide&#32;character&#32;types&#32;into&#32;individual&#32;bytes.</emphasis>
5790 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BaseInputAdapter,&#32;<emphasis role="keyword">typename</emphasis>&#32;W<emphasis role="keywordtype">id</emphasis>eCharType&gt;
5791 <emphasis role="keyword">class&#32;</emphasis>wide_string_input_adapter
5792 {
5793 &#32;&#32;<emphasis role="keyword">public</emphasis>:
5794 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>char_type&#32;=&#32;char;
5795 
5796 &#32;&#32;&#32;&#32;wide_string_input_adapter(BaseInputAdapter&#32;base)
5797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;base_adapter(base)&#32;{}
5798 
5799 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::char_traits&lt;char&gt;::int_type&#32;get_character()&#32;noexcept
5800 &#32;&#32;&#32;&#32;{
5801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;if&#32;buffer&#32;needs&#32;to&#32;be&#32;filled</emphasis>
5802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(utf8_bytes_index&#32;==&#32;utf8_bytes_filled)
5803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fill_buffer&lt;sizeof(WideCharType)&gt;();
5805 
5806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(utf8_bytes_filled&#32;&gt;&#32;0);
5807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(utf8_bytes_index&#32;==&#32;0);
5808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5809 
5810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;use&#32;buffer</emphasis>
5811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(utf8_bytes_filled&#32;&gt;&#32;0);
5812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(utf8_bytes_index&#32;&lt;&#32;utf8_bytes_filled);
5813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;utf8_bytes[utf8_bytes_index++];
5814 &#32;&#32;&#32;&#32;}
5815 
5816 &#32;&#32;<emphasis role="keyword">private</emphasis>:
5817 &#32;&#32;&#32;&#32;BaseInputAdapter&#32;base_adapter;
5818 
5819 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;T&gt;
5820 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;fill_buffer()
5821 &#32;&#32;&#32;&#32;{
5822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wide_string_input_helper&lt;BaseInputAdapter,&#32;T&gt;::fill_buffer(base_adapter,&#32;utf8_bytes,&#32;utf8_bytes_index,&#32;utf8_bytes_filled);
5823 &#32;&#32;&#32;&#32;}
5824 
5826 &#32;&#32;&#32;&#32;std::array&lt;std::char_traits&lt;char&gt;::int_type,&#32;4&gt;&#32;utf8_bytes&#32;=&#32;{{0,&#32;0,&#32;0,&#32;0}};
5827 
5829 &#32;&#32;&#32;&#32;std::size_t&#32;utf8_bytes_index&#32;=&#32;0;
5831 &#32;&#32;&#32;&#32;std::size_t&#32;utf8_bytes_filled&#32;=&#32;0;
5832 };
5833 
5834 
5835 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;IteratorType,&#32;<emphasis role="keyword">typename</emphasis>&#32;Enable&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
5836 <emphasis role="keyword">struct&#32;</emphasis>iterator_input_adapter_factory
5837 {
5838 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>iterator_type&#32;=&#32;IteratorType;
5839 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>char_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;iterator_type&gt;::value_type;
5840 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>adapter_type&#32;=&#32;iterator_input_adapter&lt;iterator_type&gt;;
5841 
5842 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;adapter_type&#32;create(IteratorType&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;IteratorType&#32;last)
5843 &#32;&#32;&#32;&#32;{
5844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;adapter_type(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(last));
5845 &#32;&#32;&#32;&#32;}
5846 };
5847 
5848 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
5849 <emphasis role="keyword">struct&#32;</emphasis>is_iterator_of_multibyte
5850 {
5851 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;T&gt;::value_type;
5852 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>
5853 &#32;&#32;&#32;&#32;{
5854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(value_type)&#32;&gt;&#32;1
5855 &#32;&#32;&#32;&#32;};
5856 };
5857 
5858 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;IteratorType&gt;
5859 <emphasis role="keyword">struct&#32;</emphasis>iterator_input_adapter_factory&lt;IteratorType,&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;is_iterator_of_multibyte&lt;IteratorType&gt;::<link linkend="_classvalue">value</link>&gt;&gt;
5860 {
5861 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>iterator_type&#32;=&#32;IteratorType;
5862 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>char_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;iterator_type&gt;::value_type;
5863 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>base_adapter_type&#32;=&#32;iterator_input_adapter&lt;iterator_type&gt;;
5864 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>adapter_type&#32;=&#32;wide_string_input_adapter&lt;base_adapter_type,&#32;char_type&gt;;
5865 
5866 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;adapter_type&#32;create(IteratorType&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;IteratorType&#32;last)
5867 &#32;&#32;&#32;&#32;{
5868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;adapter_type(base_adapter_type(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(last)));
5869 &#32;&#32;&#32;&#32;}
5870 };
5871 
5872 <emphasis role="comment">//&#32;General&#32;purpose&#32;iterator-based&#32;input</emphasis>
5873 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;IteratorType&gt;
5874 <emphasis role="keyword">typename</emphasis>&#32;iterator_input_adapter_factory&lt;IteratorType&gt;::adapter_type&#32;input_adapter(IteratorType&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;IteratorType&#32;last)
5875 {
5876 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>factory_type&#32;=&#32;iterator_input_adapter_factory&lt;IteratorType&gt;;
5877 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;factory_type::create(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;last);
5878 }
5879 
5880 <emphasis role="comment">//&#32;Convenience&#32;shorthand&#32;from&#32;container&#32;to&#32;iterator</emphasis>
5881 <emphasis role="comment">//&#32;Enables&#32;ADL&#32;on&#32;begin(container)&#32;and&#32;end(container)</emphasis>
5882 <emphasis role="comment">//&#32;Encloses&#32;the&#32;using&#32;declarations&#32;in&#32;namespace&#32;for&#32;not&#32;to&#32;leak&#32;them&#32;to&#32;outside&#32;scope</emphasis>
5883 
5884 <emphasis role="keyword">namespace&#32;</emphasis>container_input_adapter_factory_impl
5885 {
5886 
5887 <emphasis role="keyword">using&#32;</emphasis>std::begin;
5888 <emphasis role="keyword">using&#32;</emphasis>std::end;
5889 
5890 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;ContainerType,&#32;<emphasis role="keyword">typename</emphasis>&#32;Enable&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
5891 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1container__input__adapter__factory__impl_1_1container__input__adapter__factory">container_input_adapter_factory</link>&#32;{};
5892 
5893 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;ContainerType&gt;
5894 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1container__input__adapter__factory__impl_1_1container__input__adapter__factory">container_input_adapter_factory</link>&lt;&#32;ContainerType,
5895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a92a167c49c6697b6ffe4f79492c705e5">void_t</link>&lt;decltype(begin(<link linkend="_namespacestd">std</link>::declval&lt;ContainerType&gt;()),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(std::declval&lt;ContainerType&gt;()))&gt;&gt;
5896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1container__input__adapter__factory__impl_1_1container__input__adaptec6d36799bbab06a12576748f72ebcf00_1aa801458464e2dc726530463d35310abf">adapter_type</link>&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(input_adapter(begin(std::declval&lt;ContainerType&gt;()),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(std::declval&lt;ContainerType&gt;())));
5898 
5899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_structnlohmann_1_1detail_1_1container__input__adapter__factory__impl_1_1container__input__adaptec6d36799bbab06a12576748f72ebcf00_1aa801458464e2dc726530463d35310abf">adapter_type</link>&#32;<link linkend="_structnlohmann_1_1detail_1_1container__input__adapter__factory__impl_1_1container__input__adaptec6d36799bbab06a12576748f72ebcf00_1a282eae71ce3b7a4249c6bc06da8b2670">create</link>(<emphasis role="keyword">const</emphasis>&#32;ContainerType&amp;&#32;container)
5900 {
5901 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;input_adapter(begin(container),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(container));
5902 }
5903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;};
5904 
5905 }&#32;<emphasis role="comment">//&#32;namespace&#32;container_input_adapter_factory_impl</emphasis>
5906 
5907 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;ContainerType&gt;
5908 <emphasis role="keyword">typename</emphasis>&#32;container_input_adapter_factory_impl::container_input_adapter_factory&lt;ContainerType&gt;::adapter_type&#32;input_adapter(<emphasis role="keyword">const</emphasis>&#32;ContainerType&amp;&#32;container)
5909 {
5910 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;container_input_adapter_factory_impl::container_input_adapter_factory&lt;ContainerType&gt;::create(container);
5911 }
5912 
5913 <emphasis role="preprocessor">#ifndef&#32;JSON_NO_IO</emphasis>
5914 <emphasis role="comment">//&#32;Special&#32;cases&#32;with&#32;fast&#32;paths</emphasis>
5915 <emphasis role="keyword">inline</emphasis>&#32;file_input_adapter&#32;input_adapter(std::FILE*&#32;file)
5916 {
5917 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;file_input_adapter(file);
5918 }
5919 
5920 <emphasis role="keyword">inline</emphasis>&#32;input_stream_adapter&#32;input_adapter(std::istream&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>)
5921 {
5922 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;input_stream_adapter(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>);
5923 }
5924 
5925 <emphasis role="keyword">inline</emphasis>&#32;input_stream_adapter&#32;input_adapter(std::istream&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>)
5926 {
5927 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;input_stream_adapter(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>);
5928 }
5929 <emphasis role="preprocessor">#endif&#32;&#32;</emphasis><emphasis role="comment">//&#32;JSON_NO_IO</emphasis>
5930 
5931 <emphasis role="keyword">using&#32;</emphasis>contiguous_bytes_input_adapter&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(input_adapter(std::declval&lt;const&#32;char*&gt;(),&#32;std::declval&lt;const&#32;char*&gt;()));
5932 
5933 <emphasis role="comment">//&#32;Null-delimited&#32;strings,&#32;and&#32;the&#32;like.</emphasis>
5934 <emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;CharT,
5935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&#32;&lt;
5936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_pointer&lt;CharT&gt;::value&amp;&amp;
5937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!std::is_array&lt;CharT&gt;::value&amp;&amp;
5938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_integral&lt;typename&#32;std::remove_pointer&lt;CharT&gt;::type&gt;<link linkend="_classvalue">::value</link>&amp;&amp;
5939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keyword">typename</emphasis>&#32;std::remove_pointer&lt;CharT&gt;::type)&#32;==&#32;1,
5940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&#32;=&#32;0&#32;&gt;
5941 contiguous_bytes_input_adapter&#32;input_adapter(CharT&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>)
5942 {
5943 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespacelength">length</link>&#32;=&#32;std::strlen(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>));
5944 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>*&#32;ptr&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>);
5945 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;input_adapter(ptr,&#32;ptr&#32;+&#32;<link linkend="_namespacelength">length</link>);
5946 }
5947 
5948 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;std::<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;
5949 <emphasis role="keyword">auto</emphasis>&#32;input_adapter(T&#32;(&amp;<link linkend="_classarray">array</link>)[N])&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(input_adapter(<link linkend="_classarray">array</link>,&#32;<link linkend="_classarray">array</link>&#32;+&#32;N))&#32;<emphasis role="comment">//&#32;NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)</emphasis>
5950 {
5951 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;input_adapter(<link linkend="_classarray">array</link>,&#32;<link linkend="_classarray">array</link>&#32;+&#32;N);
5952 }
5953 
5954 <emphasis role="comment">//&#32;This&#32;class&#32;only&#32;handles&#32;inputs&#32;of&#32;input_buffer_adapter&#32;type.</emphasis>
5955 <emphasis role="comment">//&#32;It&apos;s&#32;required&#32;so&#32;that&#32;expressions&#32;like&#32;{ptr,&#32;len}&#32;can&#32;be&#32;implicitly&#32;cast</emphasis>
5956 <emphasis role="comment">//&#32;to&#32;the&#32;correct&#32;adapter.</emphasis>
5957 <emphasis role="keyword">class&#32;</emphasis>span_input_adapter
5958 {
5959 &#32;&#32;<emphasis role="keyword">public</emphasis>:
5960 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;CharT,
5961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&#32;&lt;
5962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_pointer&lt;CharT&gt;::value&amp;&amp;
5963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_integral&lt;typename&#32;std::remove_pointer&lt;CharT&gt;::type&gt;<link linkend="_classvalue">::value</link>&amp;&amp;
5964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keyword">typename</emphasis>&#32;std::remove_pointer&lt;CharT&gt;::type)&#32;==&#32;1,
5965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&#32;=&#32;0&#32;&gt;
5966 &#32;&#32;&#32;&#32;span_input_adapter(CharT&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>,&#32;std::size_t&#32;l)
5967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;ia(reinterpret_cast&lt;const&#32;char*&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>),&#32;reinterpret_cast&lt;const&#32;char*&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>)&#32;+&#32;l)&#32;{}
5968 
5969 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>IteratorType,
5970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;
5971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_same&lt;typename&#32;iterator_traits&lt;IteratorType&gt;::iterator_category,&#32;std::random_access_iterator_tag&gt;<link linkend="_classvalue">::value</link>,
5972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&#32;=&#32;0&gt;
5973 &#32;&#32;&#32;&#32;span_input_adapter(IteratorType&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;IteratorType&#32;last)
5974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;ia(input_adapter(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;last))&#32;{}
5975 
5976 &#32;&#32;&#32;&#32;contiguous_bytes_input_adapter&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>()
5977 &#32;&#32;&#32;&#32;{
5978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(ia);&#32;<emphasis role="comment">//&#32;NOLINT(hicpp-move-const-arg,performance-move-const-arg)</emphasis>
5979 &#32;&#32;&#32;&#32;}
5980 
5981 &#32;&#32;<emphasis role="keyword">private</emphasis>:
5982 &#32;&#32;&#32;&#32;contiguous_bytes_input_adapter&#32;ia;
5983 };
5984 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
5985 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann</emphasis>
5986 
5987 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/input/json_sax.hpp&gt;</emphasis>
5988 
5989 
5990 <emphasis role="preprocessor">#include&#32;&lt;cstddef&gt;</emphasis>
5991 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>&#32;<emphasis role="comment">//&#32;string</emphasis>
5992 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>&#32;<emphasis role="comment">//&#32;move</emphasis>
5993 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>&#32;<emphasis role="comment">//&#32;vector</emphasis>
5994 
5995 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/exceptions.hpp&gt;</emphasis>
5996 
5997 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/macro_scope.hpp&gt;</emphasis>
5998 
5999 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/string_concat.hpp&gt;</emphasis>
6000 
6001 
6002 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann">nlohmann</link>
6003 {
6004 
6013 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
6014 <emphasis role="keyword">struct&#32;</emphasis>json_sax
6015 {
6016 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>number_integer_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_integer_t;
6017 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>number_unsigned_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_unsigned_t;
6018 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>number_float_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_float_t;
6019 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>string_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::string_t;
6020 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>binary_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::binary_t;
6021 
6026 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">null</link>()&#32;=&#32;0;
6027 
6033 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">boolean</link>(<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;=&#32;0;
6034 
6040 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">number_integer</link>(number_integer_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;=&#32;0;
6041 
6047 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">number_unsigned</link>(number_unsigned_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;=&#32;0;
6048 
6055 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">number_float</link>(number_float_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;string_t&amp;&#32;s)&#32;=&#32;0;
6056 
6063 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string</link>(string_t&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;=&#32;0;
6064 
6071 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab49f49751b4640af1400b6a633535539">binary</link>(binary_t&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;=&#32;0;
6072 
6079 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;start_object(std::size_t&#32;elements)&#32;=&#32;0;
6080 
6087 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;key(string_t&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;=&#32;0;
6088 
6093 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;end_object()&#32;=&#32;0;
6094 
6101 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;start_array(std::size_t&#32;elements)&#32;=&#32;0;
6102 
6107 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;end_array()&#32;=&#32;0;
6108 
6116 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;parse_error(std::size_t&#32;<link linkend="_main_8cpp_1a76777b356ab2a080225682528119c4fe">position</link>,
6117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;last_token,
6118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;detail::exception&amp;&#32;ex)&#32;=&#32;0;
6119 
6120 &#32;&#32;&#32;&#32;json_sax()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
6121 &#32;&#32;&#32;&#32;json_sax(<emphasis role="keyword">const</emphasis>&#32;json_sax&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
6122 &#32;&#32;&#32;&#32;json_sax(json_sax&amp;&amp;)&#32;noexcept&#32;=&#32;default;
6123 &#32;&#32;&#32;&#32;json_sax&amp;&#32;operator=(const&#32;json_sax&amp;)&#32;=&#32;default;
6124 &#32;&#32;&#32;&#32;json_sax&amp;&#32;operator=(json_sax&amp;&amp;)&#32;noexcept&#32;=&#32;default;
6125 &#32;&#32;&#32;&#32;virtual&#32;~json_sax()&#32;=&#32;default;
6126 };
6127 
6128 
6129 namespace&#32;detail
6130 {
6144 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
6145 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser">json_sax_dom_parser</link>
6146 {
6147 &#32;&#32;<emphasis role="keyword">public</emphasis>:
6148 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser_1a3d5cd67d179aa7422ce90e54984a441e">number_integer_t</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_integer_t;
6149 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser_1a90f19b272530a479db81db11be2ea15c">number_unsigned_t</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_unsigned_t;
6150 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser_1ad8da3aad0147b18b3cb76868480300fe">number_float_t</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_float_t;
6151 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser_1afd4d961ab2a6b01cbe6e840f7fb90cdc">string_t</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::string_t;
6152 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser_1a188c267325965fdbe487ce68ab5496aa">binary_t</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::binary_t;
6153 
6159 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser_1afc50fee0a92ce84afb84041ebbdfba80">json_sax_dom_parser</link>(BasicJsonType&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abe08814c2f72843fde4d8df41440d5a0">r</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;allow_exceptions_&#32;=&#32;<emphasis role="keyword">true</emphasis>)
6160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;root(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abe08814c2f72843fde4d8df41440d5a0">r</link>),&#32;allow_exceptions(allow_exceptions_)
6161 &#32;&#32;&#32;&#32;{}
6162 
6163 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;make&#32;class&#32;move-only</emphasis>
6164 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser_1a0a00cd158d678e294f6e974cd9373c4b">json_sax_dom_parser</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser">json_sax_dom_parser</link>&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
6165 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser_1ad6e588652d5a9cb647a3c32a6221f13e">json_sax_dom_parser</link>(<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser">json_sax_dom_parser</link>&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;&#32;<emphasis role="comment">//&#32;NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)</emphasis>
6166 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser">json_sax_dom_parser</link>&amp;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser_1adb1091806f82603a2151472039a2ab56">operator=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser">json_sax_dom_parser</link>&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
6167 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser">json_sax_dom_parser</link>&amp;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser_1a1acf25a05470af22173805ff171bcfbf">operator=</link>(<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser">json_sax_dom_parser</link>&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;&#32;<emphasis role="comment">//&#32;NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)</emphasis>
6168 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser_1a4b93deb5c1d716dcfb33b3ed8a00ac4d">~json_sax_dom_parser</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
6169 
6170 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser_1abb06babaa861f123d8d0cb443b887d8a">null</link>()
6171 &#32;&#32;&#32;&#32;{
6172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;handle_value(<emphasis role="keyword">nullptr</emphasis>);
6173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6174 &#32;&#32;&#32;&#32;}
6175 
6176 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser_1a476c4634b93546a1a555725e551c2b33">boolean</link>(<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
6177 &#32;&#32;&#32;&#32;{
6178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;handle_value(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
6179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6180 &#32;&#32;&#32;&#32;}
6181 
6182 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser_1aff77f861ba336df48c9786a993941397">number_integer</link>(<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser_1a3d5cd67d179aa7422ce90e54984a441e">number_integer_t</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
6183 &#32;&#32;&#32;&#32;{
6184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;handle_value(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
6185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6186 &#32;&#32;&#32;&#32;}
6187 
6188 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser_1a2b4ff5146ed46993527e4a67d99c1355">number_unsigned</link>(<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser_1a90f19b272530a479db81db11be2ea15c">number_unsigned_t</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
6189 &#32;&#32;&#32;&#32;{
6190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;handle_value(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
6191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6192 &#32;&#32;&#32;&#32;}
6193 
6194 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser_1aef4652c0e81d6c052acb5d36afe09499">number_float</link>(<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser_1ad8da3aad0147b18b3cb76868480300fe">number_float_t</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser_1afd4d961ab2a6b01cbe6e840f7fb90cdc">string_t</link>&amp;&#32;<emphasis role="comment">/*unused*/</emphasis>)
6195 &#32;&#32;&#32;&#32;{
6196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;handle_value(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
6197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6198 &#32;&#32;&#32;&#32;}
6199 
6200 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser_1a851d965082d20a726138f5d0330dc7d8">string</link>(<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser_1afd4d961ab2a6b01cbe6e840f7fb90cdc">string_t</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
6201 &#32;&#32;&#32;&#32;{
6202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;handle_value(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
6203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6204 &#32;&#32;&#32;&#32;}
6205 
6206 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser_1acc05c450d515f0f95c37401bf23c8db3">binary</link>(<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser_1a188c267325965fdbe487ce68ab5496aa">binary_t</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
6207 &#32;&#32;&#32;&#32;{
6208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;handle_value(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>));
6209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6210 &#32;&#32;&#32;&#32;}
6211 
6212 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser_1a9929b4cc92d471c49bd0a92802629f90">start_object</link>(std::size_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)
6213 &#32;&#32;&#32;&#32;{
6214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ref_stack.push_back(handle_value(BasicJsonType::value_t::object));
6215 
6216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;!=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(-1)&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;&gt;&#32;ref_stack.back()-&gt;max_size()))
6217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(out_of_range::create(408,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;excessive&#32;object&#32;size:&#32;&quot;</emphasis>,&#32;std::to_string(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)),&#32;ref_stack.back()));
6219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6220 
6221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6222 &#32;&#32;&#32;&#32;}
6223 
6224 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser_1ad427febda4997cbd8345a2596af66649">key</link>(<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser_1afd4d961ab2a6b01cbe6e840f7fb90cdc">string_t</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
6225 &#32;&#32;&#32;&#32;{
6226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;add&#32;null&#32;at&#32;given&#32;key&#32;and&#32;store&#32;the&#32;reference&#32;for&#32;later</emphasis>
6227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;object_element&#32;=&#32;&amp;(ref_stack.back()-&gt;m_value.object-&gt;operator[](<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>));
6228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6229 &#32;&#32;&#32;&#32;}
6230 
6231 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser_1a88de4907ad5668d0358af2135236101f">end_object</link>()
6232 &#32;&#32;&#32;&#32;{
6233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ref_stack.back()-&gt;set_parents();
6234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ref_stack.pop_back();
6235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6236 &#32;&#32;&#32;&#32;}
6237 
6238 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser_1a056b895d011efaf48ea096c024aca0d4">start_array</link>(std::size_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)
6239 &#32;&#32;&#32;&#32;{
6240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ref_stack.push_back(handle_value(BasicJsonType::value_t::array));
6241 
6242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;!=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(-1)&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;&gt;&#32;ref_stack.back()-&gt;max_size()))
6243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(out_of_range::create(408,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;excessive&#32;array&#32;size:&#32;&quot;</emphasis>,&#32;std::to_string(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)),&#32;ref_stack.back()));
6245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6246 
6247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6248 &#32;&#32;&#32;&#32;}
6249 
6250 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser_1af7cb5e5fe06ea908b0ce4ed762919759">end_array</link>()
6251 &#32;&#32;&#32;&#32;{
6252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ref_stack.back()-&gt;set_parents();
6253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ref_stack.pop_back();
6254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6255 &#32;&#32;&#32;&#32;}
6256 
6257 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;Exception&gt;
6258 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser_1a7bc7d26e6a6f30185310de42cb2e820d">parse_error</link>(std::size_t&#32;<emphasis role="comment">/*unused*/</emphasis>,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;<emphasis role="comment">/*unused*/</emphasis>,
6259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Exception&amp;&#32;ex)
6260 &#32;&#32;&#32;&#32;{
6261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;errored&#32;=&#32;<emphasis role="keyword">true</emphasis>;
6262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis><emphasis role="keyword">&gt;</emphasis>(ex);
6263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(allow_exceptions)
6264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(ex);
6266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
6268 &#32;&#32;&#32;&#32;}
6269 
6270 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser_1ad1b9f3681fadbbb2e0127f5c8a99c662">is_errored</link>()<emphasis role="keyword">&#32;const</emphasis>
6271 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
6272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;errored;
6273 &#32;&#32;&#32;&#32;}
6274 
6275 &#32;&#32;<emphasis role="keyword">private</emphasis>:
6282 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Value&gt;
6283 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a5f2aaec3b681d0a72f7d6e90b70cdcd1">JSON_HEDLEY_RETURNS_NON_NULL</link>
6284 &#32;&#32;&#32;&#32;BasicJsonType*&#32;handle_value(Value&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)
6285 &#32;&#32;&#32;&#32;{
6286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ref_stack.empty())
6287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;root&#32;=&#32;BasicJsonType(std::forward&lt;Value&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>));
6289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;root;
6290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6291 
6292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(ref_stack.back()-&gt;is_array()&#32;||&#32;ref_stack.back()-&gt;is_object());
6293 
6294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ref_stack.back()-&gt;is_array())
6295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ref_stack.back()-&gt;m_value.array-&gt;emplace_back(std::forward&lt;Value&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>));
6297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;(ref_stack.back()-&gt;m_value.array-&gt;back());
6298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6299 
6300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(ref_stack.back()-&gt;is_object());
6301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(object_element);
6302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*object_element&#32;=&#32;BasicJsonType(std::forward&lt;Value&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>));
6303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;object_element;
6304 &#32;&#32;&#32;&#32;}
6305 
6307 &#32;&#32;&#32;&#32;BasicJsonType&amp;&#32;<link linkend="_namespaceversion_1ab64fdd4f88cc81edfc86738fbae8bb9a">root</link>;
6309 &#32;&#32;&#32;&#32;std::vector&lt;BasicJsonType*&gt;&#32;ref_stack&#32;{};
6311 &#32;&#32;&#32;&#32;BasicJsonType*&#32;object_element&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
6313 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;errored&#32;=&#32;<emphasis role="keyword">false</emphasis>;
6315 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;allow_exceptions&#32;=&#32;<emphasis role="keyword">true</emphasis>;
6316 };
6317 
6318 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
6319 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser">json_sax_dom_callback_parser</link>
6320 {
6321 &#32;&#32;<emphasis role="keyword">public</emphasis>:
6322 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser_1a3ba8fc7a8d83c5b0eeb3b543ad844b8d">number_integer_t</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_integer_t;
6323 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser_1a2406c5125f7128fb9c01921df2903001">number_unsigned_t</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_unsigned_t;
6324 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser_1a914ea0555cea5290449fb791ae41c655">number_float_t</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_float_t;
6325 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser_1a00e7d95d82d5d8a43421526a42a8eabc">string_t</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::string_t;
6326 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser_1a5af8493f830eeb1a79c69fc39ed54ef8">binary_t</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::binary_t;
6327 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser_1a4f636086fa8e7cf26c35c8afd50903ce">parser_callback_t</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::parser_callback_t;
6328 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser_1aac6d706967b2ecc2510e172577d8550b">parse_event_t</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::parse_event_t;
6329 
6330 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser_1afec9434e54590f10df51b062973d4daf">json_sax_dom_callback_parser</link>(BasicJsonType&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abe08814c2f72843fde4d8df41440d5a0">r</link>,
6331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser_1a4f636086fa8e7cf26c35c8afd50903ce">parser_callback_t</link>&#32;cb,
6332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;allow_exceptions_&#32;=&#32;<emphasis role="keyword">true</emphasis>)
6333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;root(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abe08814c2f72843fde4d8df41440d5a0">r</link>),&#32;callback(cb),&#32;allow_exceptions(allow_exceptions_)
6334 &#32;&#32;&#32;&#32;{
6335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;keep_stack.push_back(<emphasis role="keyword">true</emphasis>);
6336 &#32;&#32;&#32;&#32;}
6337 
6338 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;make&#32;class&#32;move-only</emphasis>
6339 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser_1a589998730e650a425b1b311e2e9f7f09">json_sax_dom_callback_parser</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser">json_sax_dom_callback_parser</link>&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
6340 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser_1af1ce6c746e3ebadb7994170725fcdbb5">json_sax_dom_callback_parser</link>(<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser">json_sax_dom_callback_parser</link>&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;&#32;<emphasis role="comment">//&#32;NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)</emphasis>
6341 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser">json_sax_dom_callback_parser</link>&amp;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser_1a033b8110f630613581ce74f6c4b12bad">operator=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser">json_sax_dom_callback_parser</link>&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
6342 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser">json_sax_dom_callback_parser</link>&amp;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser_1acedad160f4ce60b08cd28ad7cf7e145e">operator=</link>(<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser">json_sax_dom_callback_parser</link>&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;&#32;<emphasis role="comment">//&#32;NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)</emphasis>
6343 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser_1a54ffcdfb0a8c5c9a876cd003b404ef4b">~json_sax_dom_callback_parser</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
6344 
6345 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser_1a446262b6a75371fe8e0a6218ba2911e6">null</link>()
6346 &#32;&#32;&#32;&#32;{
6347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;handle_value(<emphasis role="keyword">nullptr</emphasis>);
6348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6349 &#32;&#32;&#32;&#32;}
6350 
6351 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser_1ab7d8db672189164a8c0731e65ada1b45">boolean</link>(<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
6352 &#32;&#32;&#32;&#32;{
6353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;handle_value(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
6354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6355 &#32;&#32;&#32;&#32;}
6356 
6357 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser_1a68d9eddfd572e8687c1c8107e0505aa6">number_integer</link>(<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser_1a3ba8fc7a8d83c5b0eeb3b543ad844b8d">number_integer_t</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
6358 &#32;&#32;&#32;&#32;{
6359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;handle_value(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
6360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6361 &#32;&#32;&#32;&#32;}
6362 
6363 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser_1acabb231463bf669441c22e4ea385a9fb">number_unsigned</link>(<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser_1a2406c5125f7128fb9c01921df2903001">number_unsigned_t</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
6364 &#32;&#32;&#32;&#32;{
6365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;handle_value(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
6366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6367 &#32;&#32;&#32;&#32;}
6368 
6369 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser_1ae21f7872c334c77d03ae033cb0749b1c">number_float</link>(<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser_1a914ea0555cea5290449fb791ae41c655">number_float_t</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser_1a00e7d95d82d5d8a43421526a42a8eabc">string_t</link>&amp;&#32;<emphasis role="comment">/*unused*/</emphasis>)
6370 &#32;&#32;&#32;&#32;{
6371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;handle_value(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
6372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6373 &#32;&#32;&#32;&#32;}
6374 
6375 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser_1ad94e912a67c7b96158937236805b8b47">string</link>(<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser_1a00e7d95d82d5d8a43421526a42a8eabc">string_t</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
6376 &#32;&#32;&#32;&#32;{
6377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;handle_value(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
6378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6379 &#32;&#32;&#32;&#32;}
6380 
6381 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser_1a66f5515cddef5074c9499f21c26ac099">binary</link>(<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser_1a5af8493f830eeb1a79c69fc39ed54ef8">binary_t</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
6382 &#32;&#32;&#32;&#32;{
6383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;handle_value(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>));
6384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6385 &#32;&#32;&#32;&#32;}
6386 
6387 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser_1a040e60243cc7c18a6078c6b83cdb4a81">start_object</link>(std::size_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)
6388 &#32;&#32;&#32;&#32;{
6389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;callback&#32;for&#32;object&#32;start</emphasis>
6390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;keep&#32;=&#32;callback(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(ref_stack.size()),&#32;parse_event_t::object_start,&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">discarded</link>);
6391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;keep_stack.push_back(keep);
6392 
6393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;=&#32;handle_value(BasicJsonType::value_t::object,&#32;<emphasis role="keyword">true</emphasis>);
6394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ref_stack.push_back(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.second);
6395 
6396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;object&#32;limit</emphasis>
6397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ref_stack.back()&#32;&amp;&amp;&#32;<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;!=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(-1)&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;&gt;&#32;ref_stack.back()-&gt;max_size()))
6398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(out_of_range::create(408,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;excessive&#32;object&#32;size:&#32;&quot;</emphasis>,&#32;std::to_string(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)),&#32;ref_stack.back()));
6400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6401 
6402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6403 &#32;&#32;&#32;&#32;}
6404 
6405 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser_1a0cc4a5192fe9b803276edb831b6099fa">key</link>(<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser_1a00e7d95d82d5d8a43421526a42a8eabc">string_t</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
6406 &#32;&#32;&#32;&#32;{
6407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BasicJsonType&#32;k&#32;=&#32;BasicJsonType(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
6408 
6409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;callback&#32;for&#32;key</emphasis>
6410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;keep&#32;=&#32;callback(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(ref_stack.size()),&#32;parse_event_t::key,&#32;k);
6411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_keep_stack.push_back(keep);
6412 
6413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;add&#32;discarded&#32;value&#32;at&#32;given&#32;key&#32;and&#32;store&#32;the&#32;reference&#32;for&#32;later</emphasis>
6414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(keep&#32;&amp;&amp;&#32;ref_stack.back())
6415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;object_element&#32;=&#32;&amp;(ref_stack.back()-&gt;m_value.object-&gt;operator[](<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">discarded</link>);
6417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6418 
6419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6420 &#32;&#32;&#32;&#32;}
6421 
6422 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser_1ae75d313d6d1b9c29508e740a10fefa18">end_object</link>()
6423 &#32;&#32;&#32;&#32;{
6424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ref_stack.back())
6425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!callback(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(ref_stack.size())&#32;-&#32;1,&#32;parse_event_t::object_end,&#32;*ref_stack.back()))
6427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;discard&#32;object</emphasis>
6429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*ref_stack.back()&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">discarded</link>;
6430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
6432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ref_stack.back()-&gt;set_parents();
6434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6436 
6437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(!ref_stack.empty());
6438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(!keep_stack.empty());
6439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ref_stack.pop_back();
6440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;keep_stack.pop_back();
6441 
6442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!ref_stack.empty()&#32;&amp;&amp;&#32;ref_stack.back()&#32;&amp;&amp;&#32;ref_stack.back()-&gt;is_structured())
6443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;remove&#32;discarded&#32;value</emphasis>
6445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;ref_stack.back()-&gt;begin();&#32;it&#32;!=&#32;ref_stack.back()-&gt;end();&#32;++it)
6446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(it-&gt;is_discarded())
6448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ref_stack.back()-&gt;erase(it);
6450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
6451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6454 
6455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6456 &#32;&#32;&#32;&#32;}
6457 
6458 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser_1a5255b98ba8282e3625968f91cff9d3d0">start_array</link>(std::size_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)
6459 &#32;&#32;&#32;&#32;{
6460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;keep&#32;=&#32;callback(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(ref_stack.size()),&#32;parse_event_t::array_start,&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">discarded</link>);
6461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;keep_stack.push_back(keep);
6462 
6463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;=&#32;handle_value(BasicJsonType::value_t::array,&#32;<emphasis role="keyword">true</emphasis>);
6464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ref_stack.push_back(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.second);
6465 
6466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;array&#32;limit</emphasis>
6467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ref_stack.back()&#32;&amp;&amp;&#32;<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;!=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(-1)&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;&gt;&#32;ref_stack.back()-&gt;max_size()))
6468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(out_of_range::create(408,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;excessive&#32;array&#32;size:&#32;&quot;</emphasis>,&#32;std::to_string(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)),&#32;ref_stack.back()));
6470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6471 
6472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6473 &#32;&#32;&#32;&#32;}
6474 
6475 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser_1aa64e7a650952174037d32028de582c12">end_array</link>()
6476 &#32;&#32;&#32;&#32;{
6477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;keep&#32;=&#32;<emphasis role="keyword">true</emphasis>;
6478 
6479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ref_stack.back())
6480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;keep&#32;=&#32;callback(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(ref_stack.size())&#32;-&#32;1,&#32;parse_event_t::array_end,&#32;*ref_stack.back());
6482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(keep)
6483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ref_stack.back()-&gt;set_parents();
6485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
6487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;discard&#32;array</emphasis>
6489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*ref_stack.back()&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">discarded</link>;
6490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6492 
6493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(!ref_stack.empty());
6494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(!keep_stack.empty());
6495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ref_stack.pop_back();
6496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;keep_stack.pop_back();
6497 
6498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;remove&#32;discarded&#32;value</emphasis>
6499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!keep&#32;&amp;&amp;&#32;!ref_stack.empty()&#32;&amp;&amp;&#32;ref_stack.back()-&gt;is_array())
6500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ref_stack.back()-&gt;m_value.array-&gt;pop_back();
6502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6503 
6504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6505 &#32;&#32;&#32;&#32;}
6506 
6507 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;Exception&gt;
6508 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser_1afb54d6937ee5d5a40e1db94422998aec">parse_error</link>(std::size_t&#32;<emphasis role="comment">/*unused*/</emphasis>,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;<emphasis role="comment">/*unused*/</emphasis>,
6509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Exception&amp;&#32;ex)
6510 &#32;&#32;&#32;&#32;{
6511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;errored&#32;=&#32;<emphasis role="keyword">true</emphasis>;
6512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis><emphasis role="keyword">&gt;</emphasis>(ex);
6513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(allow_exceptions)
6514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(ex);
6516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
6518 &#32;&#32;&#32;&#32;}
6519 
6520 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser_1a167fd9bf385d3d08bcbbba8a927c0eff">is_errored</link>()<emphasis role="keyword">&#32;const</emphasis>
6521 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
6522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;errored;
6523 &#32;&#32;&#32;&#32;}
6524 
6525 &#32;&#32;<emphasis role="keyword">private</emphasis>:
6541 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Value&gt;
6542 &#32;&#32;&#32;&#32;std::pair&lt;bool,&#32;BasicJsonType*&gt;&#32;handle_value(Value&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;skip_callback&#32;=&#32;<emphasis role="keyword">false</emphasis>)
6543 &#32;&#32;&#32;&#32;{
6544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(!keep_stack.empty());
6545 
6546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;do&#32;not&#32;handle&#32;this&#32;value&#32;if&#32;we&#32;know&#32;it&#32;would&#32;be&#32;added&#32;to&#32;a&#32;discarded</emphasis>
6547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;container</emphasis>
6548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!keep_stack.back())
6549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<emphasis role="keyword">false</emphasis>,&#32;<emphasis role="keyword">nullptr</emphasis>};
6551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6552 
6553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;create&#32;value</emphasis>
6554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_classvalue">value</link>&#32;=&#32;BasicJsonType(std::forward&lt;Value&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>));
6555 
6556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;callback</emphasis>
6557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;keep&#32;=&#32;skip_callback&#32;||&#32;callback(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(ref_stack.size()),&#32;parse_event_t::value,&#32;<link linkend="_classvalue">value</link>);
6558 
6559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;do&#32;not&#32;handle&#32;this&#32;value&#32;if&#32;we&#32;just&#32;learnt&#32;it&#32;shall&#32;be&#32;discarded</emphasis>
6560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!keep)
6561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<emphasis role="keyword">false</emphasis>,&#32;<emphasis role="keyword">nullptr</emphasis>};
6563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6564 
6565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ref_stack.empty())
6566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceversion_1ab64fdd4f88cc81edfc86738fbae8bb9a">root</link>&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="_classvalue">value</link>);
6568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<emphasis role="keyword">true</emphasis>,&#32;&amp;<link linkend="_namespaceversion_1ab64fdd4f88cc81edfc86738fbae8bb9a">root</link>};
6569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6570 
6571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;skip&#32;this&#32;value&#32;if&#32;we&#32;already&#32;decided&#32;to&#32;skip&#32;the&#32;parent</emphasis>
6572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(https://github.com/nlohmann/json/issues/971#issuecomment-413678360)</emphasis>
6573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!ref_stack.back())
6574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<emphasis role="keyword">false</emphasis>,&#32;<emphasis role="keyword">nullptr</emphasis>};
6576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6577 
6578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&#32;now&#32;only&#32;expect&#32;arrays&#32;and&#32;objects</emphasis>
6579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(ref_stack.back()-&gt;is_array()&#32;||&#32;ref_stack.back()-&gt;is_object());
6580 
6581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;array</emphasis>
6582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ref_stack.back()-&gt;is_array())
6583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ref_stack.back()-&gt;m_value.array-&gt;emplace_back(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="_classvalue">value</link>));
6585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<emphasis role="keyword">true</emphasis>,&#32;&amp;(ref_stack.back()-&gt;m_value.array-&gt;back())};
6586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6587 
6588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;object</emphasis>
6589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(ref_stack.back()-&gt;is_object());
6590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;if&#32;we&#32;should&#32;store&#32;an&#32;element&#32;for&#32;the&#32;current&#32;key</emphasis>
6591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(!key_keep_stack.empty());
6592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;store_element&#32;=&#32;key_keep_stack.back();
6593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_keep_stack.pop_back();
6594 
6595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!store_element)
6596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<emphasis role="keyword">false</emphasis>,&#32;<emphasis role="keyword">nullptr</emphasis>};
6598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6599 
6600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(object_element);
6601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*object_element&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="_classvalue">value</link>);
6602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<emphasis role="keyword">true</emphasis>,&#32;object_element};
6603 &#32;&#32;&#32;&#32;}
6604 
6606 &#32;&#32;&#32;&#32;BasicJsonType&amp;&#32;<link linkend="_namespaceversion_1ab64fdd4f88cc81edfc86738fbae8bb9a">root</link>;
6608 &#32;&#32;&#32;&#32;std::vector&lt;BasicJsonType*&gt;&#32;ref_stack&#32;{};
6610 &#32;&#32;&#32;&#32;std::vector&lt;bool&gt;&#32;keep_stack&#32;{};
6612 &#32;&#32;&#32;&#32;std::vector&lt;bool&gt;&#32;key_keep_stack&#32;{};
6614 &#32;&#32;&#32;&#32;BasicJsonType*&#32;object_element&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
6616 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;errored&#32;=&#32;<emphasis role="keyword">false</emphasis>;
6618 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;parser_callback_t&#32;callback&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
6620 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;allow_exceptions&#32;=&#32;<emphasis role="keyword">true</emphasis>;
6622 &#32;&#32;&#32;&#32;BasicJsonType&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">discarded</link>&#32;=&#32;BasicJsonType::value_t::discarded;
6623 };
6624 
6625 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
6626 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1json__sax__acceptor">json_sax_acceptor</link>
6627 {
6628 &#32;&#32;<emphasis role="keyword">public</emphasis>:
6629 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1json__sax__acceptor_1a41876b17c0e8bdb55580eaf5e4e2ded8">number_integer_t</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_integer_t;
6630 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1json__sax__acceptor_1ae07454608ea6f3cfb765f95e3c850043">number_unsigned_t</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_unsigned_t;
6631 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1json__sax__acceptor_1a5502f483fc60a1bcd73e0e46b6ab36e4">number_float_t</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_float_t;
6632 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1json__sax__acceptor_1a3a8078bbf865ec355106f6048241609a">string_t</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::string_t;
6633 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1json__sax__acceptor_1a56346d95ee4e539eaded2e6826fecf66">binary_t</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::binary_t;
6634 
6635 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__acceptor_1ad7ad55168af6e03ed8b844c94a17b9ce">null</link>()
6636 &#32;&#32;&#32;&#32;{
6637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6638 &#32;&#32;&#32;&#32;}
6639 
6640 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__acceptor_1a3f5fe42a9b195de8d251d6d98d5ee92c">boolean</link>(<emphasis role="keywordtype">bool</emphasis>&#32;<emphasis role="comment">/*unused*/</emphasis>)
6641 &#32;&#32;&#32;&#32;{
6642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6643 &#32;&#32;&#32;&#32;}
6644 
6645 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__acceptor_1a976bf4ce6e9a2ffe48f683ddff80af00">number_integer</link>(<link linkend="_classnlohmann_1_1detail_1_1json__sax__acceptor_1a41876b17c0e8bdb55580eaf5e4e2ded8">number_integer_t</link>&#32;<emphasis role="comment">/*unused*/</emphasis>)
6646 &#32;&#32;&#32;&#32;{
6647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6648 &#32;&#32;&#32;&#32;}
6649 
6650 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__acceptor_1ad15b288f3351287edbe289502f595491">number_unsigned</link>(<link linkend="_classnlohmann_1_1detail_1_1json__sax__acceptor_1ae07454608ea6f3cfb765f95e3c850043">number_unsigned_t</link>&#32;<emphasis role="comment">/*unused*/</emphasis>)
6651 &#32;&#32;&#32;&#32;{
6652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6653 &#32;&#32;&#32;&#32;}
6654 
6655 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__acceptor_1aebf8800023eb20d472f111f86b189e60">number_float</link>(<link linkend="_classnlohmann_1_1detail_1_1json__sax__acceptor_1a5502f483fc60a1bcd73e0e46b6ab36e4">number_float_t</link>&#32;<emphasis role="comment">/*unused*/</emphasis>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__acceptor_1a3a8078bbf865ec355106f6048241609a">string_t</link>&amp;&#32;<emphasis role="comment">/*unused*/</emphasis>)
6656 &#32;&#32;&#32;&#32;{
6657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6658 &#32;&#32;&#32;&#32;}
6659 
6660 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__acceptor_1aaa69255e757a6ecc4403a2aa4931fc60">string</link>(<link linkend="_classnlohmann_1_1detail_1_1json__sax__acceptor_1a3a8078bbf865ec355106f6048241609a">string_t</link>&amp;&#32;<emphasis role="comment">/*unused*/</emphasis>)
6661 &#32;&#32;&#32;&#32;{
6662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6663 &#32;&#32;&#32;&#32;}
6664 
6665 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__acceptor_1a3d193985aac764f99398e3ae8ba0c5db">binary</link>(<link linkend="_classnlohmann_1_1detail_1_1json__sax__acceptor_1a56346d95ee4e539eaded2e6826fecf66">binary_t</link>&amp;&#32;<emphasis role="comment">/*unused*/</emphasis>)
6666 &#32;&#32;&#32;&#32;{
6667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6668 &#32;&#32;&#32;&#32;}
6669 
6670 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__acceptor_1a271f0709144d1b25534d6260c600a607">start_object</link>(std::size_t&#32;<emphasis role="comment">/*unused*/</emphasis>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(-1))
6671 &#32;&#32;&#32;&#32;{
6672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6673 &#32;&#32;&#32;&#32;}
6674 
6675 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__acceptor_1a59e1ea5e9c8d25346a564bf9287a5c2a">key</link>(<link linkend="_classnlohmann_1_1detail_1_1json__sax__acceptor_1a3a8078bbf865ec355106f6048241609a">string_t</link>&amp;&#32;<emphasis role="comment">/*unused*/</emphasis>)
6676 &#32;&#32;&#32;&#32;{
6677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6678 &#32;&#32;&#32;&#32;}
6679 
6680 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__acceptor_1a919645fd1827a561a994d70a435e3f19">end_object</link>()
6681 &#32;&#32;&#32;&#32;{
6682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6683 &#32;&#32;&#32;&#32;}
6684 
6685 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__acceptor_1a9255aab848624a21f0dabd1e172b0c8b">start_array</link>(std::size_t&#32;<emphasis role="comment">/*unused*/</emphasis>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(-1))
6686 &#32;&#32;&#32;&#32;{
6687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6688 &#32;&#32;&#32;&#32;}
6689 
6690 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__acceptor_1a22ef94ca5476a9563dcaca15b7d6e654">end_array</link>()
6691 &#32;&#32;&#32;&#32;{
6692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6693 &#32;&#32;&#32;&#32;}
6694 
6695 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__acceptor_1a95bb3e8b6feaa523ecda8106fb5e38e3">parse_error</link>(std::size_t&#32;<emphasis role="comment">/*unused*/</emphasis>,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;<emphasis role="comment">/*unused*/</emphasis>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1exception">detail::exception</link>&amp;&#32;<emphasis role="comment">/*unused*/</emphasis>)
6696 &#32;&#32;&#32;&#32;{
6697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
6698 &#32;&#32;&#32;&#32;}
6699 };
6700 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
6701 
6702 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann</emphasis>
6703 
6704 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/input/lexer.hpp&gt;</emphasis>
6705 
6706 
6707 <emphasis role="preprocessor">#include&#32;&lt;array&gt;</emphasis>&#32;<emphasis role="comment">//&#32;array</emphasis>
6708 <emphasis role="preprocessor">#include&#32;&lt;clocale&gt;</emphasis>&#32;<emphasis role="comment">//&#32;localeconv</emphasis>
6709 <emphasis role="preprocessor">#include&#32;&lt;cstddef&gt;</emphasis>&#32;<emphasis role="comment">//&#32;size_t</emphasis>
6710 <emphasis role="preprocessor">#include&#32;&lt;cstdio&gt;</emphasis>&#32;<emphasis role="comment">//&#32;snprintf</emphasis>
6711 <emphasis role="preprocessor">#include&#32;&lt;cstdlib&gt;</emphasis>&#32;<emphasis role="comment">//&#32;strtof,&#32;strtod,&#32;strtold,&#32;strtoll,&#32;strtoull</emphasis>
6712 <emphasis role="preprocessor">#include&#32;&lt;initializer_list&gt;</emphasis>&#32;<emphasis role="comment">//&#32;initializer_list</emphasis>
6713 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>&#32;<emphasis role="comment">//&#32;char_traits,&#32;string</emphasis>
6714 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>&#32;<emphasis role="comment">//&#32;move</emphasis>
6715 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>&#32;<emphasis role="comment">//&#32;vector</emphasis>
6716 
6717 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/input/input_adapters.hpp&gt;</emphasis>
6718 
6719 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/input/position_t.hpp&gt;</emphasis>
6720 
6721 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/macro_scope.hpp&gt;</emphasis>
6722 
6723 
6724 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann">nlohmann</link>
6725 {
6726 <emphasis role="keyword">namespace&#32;</emphasis>detail
6727 {
6729 <emphasis role="comment">//&#32;lexer&#32;//</emphasis>
6731 
6732 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
6733 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1lexer__base">lexer_base</link>
6734 {
6735 &#32;&#32;<emphasis role="keyword">public</emphasis>:
6737 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454">token_type</link>
6738 &#32;&#32;&#32;&#32;{
6739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454a42dd1a73d072bb6bf3f494f22b15db8e">uninitialized</link>,&#32;&#32;&#32;&#32;
6740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454a85cc1a37b0aaa52de40e72f0ed4e0c0d">literal_true</link>,&#32;&#32;&#32;&#32;&#32;
6741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454afab1694b1b3937a079f4625fe0b6108b">literal_false</link>,&#32;&#32;&#32;&#32;
6742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454ab7ae4c0e46d86f884677768160b26e9e">literal_null</link>,&#32;&#32;&#32;&#32;&#32;
6743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454a2b490e8bf366b4cbe3ebd99b26ce15ce">value_string</link>,&#32;&#32;&#32;&#32;&#32;
6744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454aaf1f040fcd2f674d2e5893d7a731078f">value_unsigned</link>,&#32;&#32;&#32;
6745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454a5064b6655d88a50ae16665cf7751c0ee">value_integer</link>,&#32;&#32;&#32;&#32;
6746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454a0d2671a6f81efb91e77f6ac3bdb11443">value_float</link>,&#32;&#32;&#32;&#32;&#32;&#32;
6747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454a16c226b4425b68560fea322b46dabe01">begin_array</link>,&#32;&#32;&#32;&#32;&#32;&#32;
6748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454a9a9ffd53b6869d4eca271b1ed5b57fe8">begin_object</link>,&#32;&#32;&#32;&#32;&#32;
6749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454a2f3e68e7f111a1e5c7728742b3ca2b7f">end_array</link>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
6750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454a7d5b4427866814de4d8f132721d59c87">end_object</link>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;
6751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454acc3c64f8ae08c00de1b33f19a4d2913a">name_separator</link>,&#32;&#32;&#32;
6752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454a745373036100d7392ad62c617cab59af">value_separator</link>,&#32;&#32;
6753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454a456e19aeafa334241c7ff3f589547f9d">parse_error</link>,&#32;&#32;&#32;&#32;&#32;&#32;
6754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454aca11f56dd477c09e06583dbdcda0985f">end_of_input</link>,&#32;&#32;&#32;&#32;&#32;
6755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454ad2a8e6f6721cccec0b466301dd9495a5">literal_or_value</link>&#32;&#32;
6756 &#32;&#32;&#32;&#32;};
6757 
6759 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a5f2aaec3b681d0a72f7d6e90b70cdcd1">JSON_HEDLEY_RETURNS_NON_NULL</link>
6760 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a0d17bf1a54fc45a04ced6d3aa86a96e3">JSON_HEDLEY_CONST</link>
6761 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1a3e49458ca35019e4db8a45629f5be192">token_type_name</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454">token_type</link>&#32;t)&#32;<emphasis role="keyword">noexcept</emphasis>
6762 &#32;&#32;&#32;&#32;{
6763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(t)
6764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454a42dd1a73d072bb6bf3f494f22b15db8e">token_type::uninitialized</link>:
6766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&lt;uninitialized&gt;&quot;</emphasis>;
6767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454a85cc1a37b0aaa52de40e72f0ed4e0c0d">token_type::literal_true</link>:
6768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;true&#32;literal&quot;</emphasis>;
6769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454afab1694b1b3937a079f4625fe0b6108b">token_type::literal_false</link>:
6770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;false&#32;literal&quot;</emphasis>;
6771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454ab7ae4c0e46d86f884677768160b26e9e">token_type::literal_null</link>:
6772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;null&#32;literal&quot;</emphasis>;
6773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454a2b490e8bf366b4cbe3ebd99b26ce15ce">token_type::value_string</link>:
6774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;string&#32;literal&quot;</emphasis>;
6775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454aaf1f040fcd2f674d2e5893d7a731078f">token_type::value_unsigned</link>:
6776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454a5064b6655d88a50ae16665cf7751c0ee">token_type::value_integer</link>:
6777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454a0d2671a6f81efb91e77f6ac3bdb11443">token_type::value_float</link>:
6778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;number&#32;literal&quot;</emphasis>;
6779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454a16c226b4425b68560fea322b46dabe01">token_type::begin_array</link>:
6780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&apos;[&apos;&quot;</emphasis>;
6781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454a9a9ffd53b6869d4eca271b1ed5b57fe8">token_type::begin_object</link>:
6782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&apos;{&apos;&quot;</emphasis>;
6783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454a2f3e68e7f111a1e5c7728742b3ca2b7f">token_type::end_array</link>:
6784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&apos;]&apos;&quot;</emphasis>;
6785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454a7d5b4427866814de4d8f132721d59c87">token_type::end_object</link>:
6786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&apos;}&apos;&quot;</emphasis>;
6787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454acc3c64f8ae08c00de1b33f19a4d2913a">token_type::name_separator</link>:
6788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&apos;:&apos;&quot;</emphasis>;
6789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454a745373036100d7392ad62c617cab59af">token_type::value_separator</link>:
6790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&apos;,&apos;&quot;</emphasis>;
6791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454a456e19aeafa334241c7ff3f589547f9d">token_type::parse_error</link>:
6792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&lt;parse&#32;error&gt;&quot;</emphasis>;
6793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454aca11f56dd477c09e06583dbdcda0985f">token_type::end_of_input</link>:
6794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;end&#32;of&#32;input&quot;</emphasis>;
6795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454ad2a8e6f6721cccec0b466301dd9495a5">token_type::literal_or_value</link>:
6796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&apos;[&apos;,&#32;&apos;{&apos;,&#32;or&#32;a&#32;literal&quot;</emphasis>;
6797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LCOV_EXCL_START</emphasis>
6798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="comment">//&#32;catch&#32;non-enum&#32;values</emphasis>
6799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;unknown&#32;token&quot;</emphasis>;
6800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LCOV_EXCL_STOP</emphasis>
6801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6802 &#32;&#32;&#32;&#32;}
6803 };
6809 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;InputAdapterType&gt;
6810 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1lexer">lexer</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base">lexer_base</link>&lt;BasicJsonType&gt;
6811 {
6812 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>number_integer_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_integer_t;
6813 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>number_unsigned_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_unsigned_t;
6814 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>number_float_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_float_t;
6815 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>string_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::string_t;
6816 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>char_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;InputAdapterType::char_type;
6817 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>char_int_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::char_traits&lt;char_type&gt;::int_type;
6818 
6819 &#32;&#32;<emphasis role="keyword">public</emphasis>:
6820 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1lexer_1a986907dff5ceb4fa06aa8ff301822726">token_type</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454">lexer_base&lt;BasicJsonType&gt;::token_type</link>;
6821 
6822 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer_1a89bbc051da2514a469441a3a30ad63e4">lexer</link>(InputAdapterType&amp;&amp;&#32;adapter,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ignore_comments_&#32;=&#32;<emphasis role="keyword">false</emphasis>)&#32;noexcept
6823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;ia(<link linkend="_namespacestd">std</link>::move(adapter))
6824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;ignore_comments(ignore_comments_)
6825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;decimal_point_char(static_cast&lt;char_int_type&gt;(get_decimal_point()))
6826 &#32;&#32;&#32;&#32;{}
6827 
6828 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;delete&#32;because&#32;of&#32;pointer&#32;members</emphasis>
6829 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer_1ab75d61c4de687717648c7698850ddb9b">lexer</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer">lexer</link>&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
6830 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer_1ae95416c7ae8b36f0dd0ab349eaa754a2">lexer</link>(<link linkend="_classnlohmann_1_1detail_1_1lexer">lexer</link>&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;&#32;<emphasis role="comment">//&#32;NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)</emphasis>
6831 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer">lexer</link>&amp;&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer_1aad4020e9be20612197f8d4e049300adc">operator=</link>(<link linkend="_classnlohmann_1_1detail_1_1lexer">lexer</link>&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
6832 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer">lexer</link>&amp;&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer_1a5e448bb3dea993ecb9ee92e71d78ca84">operator=</link>(<link linkend="_classnlohmann_1_1detail_1_1lexer">lexer</link>&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;&#32;<emphasis role="comment">//&#32;NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)</emphasis>
6833 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer_1ac0557f111d82f7729a93ee9b40b31402">~lexer</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
6834 
6835 &#32;&#32;<emphasis role="keyword">private</emphasis>:
6837 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;locales</emphasis>
6839 
6841 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1af5c84b7d1a43361bdc14cc6941078000">JSON_HEDLEY_PURE</link>
6842 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;get_decimal_point()&#32;noexcept
6843 &#32;&#32;&#32;&#32;{
6844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>*&#32;loc&#32;=&#32;localeconv();
6845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(loc&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
6846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(loc-&gt;decimal_point&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>)&#32;?&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>&#32;:&#32;*(loc-&gt;decimal_point);
6847 &#32;&#32;&#32;&#32;}
6848 
6850 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;scan&#32;functions</emphasis>
6852 
6868 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;get_codepoint()
6869 &#32;&#32;&#32;&#32;{
6870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;this&#32;function&#32;only&#32;makes&#32;sense&#32;after&#32;reading&#32;`\u`</emphasis>
6871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(current&#32;==&#32;<emphasis role="charliteral">&apos;u&apos;</emphasis>);
6872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;codepoint&#32;=&#32;0;
6873 
6874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;factors&#32;=&#32;{&#32;12u,&#32;8u,&#32;4u,&#32;0<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>&#32;};
6875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;factor&#32;:&#32;factors)
6876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>();
6878 
6879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(current&#32;&gt;=&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;&amp;&amp;&#32;current&#32;&lt;=&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>)
6880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;codepoint&#32;+=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>((<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(current)&#32;-&#32;0x30u)&#32;&lt;&lt;&#32;factor);
6882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(current&#32;&gt;=&#32;<emphasis role="charliteral">&apos;A&apos;</emphasis>&#32;&amp;&amp;&#32;current&#32;&lt;=&#32;<emphasis role="charliteral">&apos;F&apos;</emphasis>)
6884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;codepoint&#32;+=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>((<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(current)&#32;-&#32;0x37u)&#32;&lt;&lt;&#32;factor);
6886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(current&#32;&gt;=&#32;<emphasis role="charliteral">&apos;a&apos;</emphasis>&#32;&amp;&amp;&#32;current&#32;&lt;=&#32;<emphasis role="charliteral">&apos;f&apos;</emphasis>)
6888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;codepoint&#32;+=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>((<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(current)&#32;-&#32;0x57u)&#32;&lt;&lt;&#32;factor);
6890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
6892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
6894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6896 
6897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(0x0000&#32;&lt;=&#32;codepoint&#32;&amp;&amp;&#32;codepoint&#32;&lt;=&#32;0xFFFF);
6898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;codepoint;
6899 &#32;&#32;&#32;&#32;}
6900 
6916 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;next_byte_in_range(std::initializer_list&lt;char_int_type&gt;&#32;ranges)
6917 &#32;&#32;&#32;&#32;{
6918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(ranges.size()&#32;==&#32;2&#32;||&#32;ranges.size()&#32;==&#32;4&#32;||&#32;ranges.size()&#32;==&#32;6);
6919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;add(current);
6920 
6921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a7b8ad0b27a927682837f95528fa454f5">range</link>&#32;=&#32;ranges.begin();&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a7b8ad0b27a927682837f95528fa454f5">range</link>&#32;!=&#32;ranges.end();&#32;++<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a7b8ad0b27a927682837f95528fa454f5">range</link>)
6922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>();
6924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0">JSON_HEDLEY_LIKELY</link>(*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a7b8ad0b27a927682837f95528fa454f5">range</link>&#32;&lt;=&#32;current&#32;&amp;&amp;&#32;current&#32;&lt;=&#32;*(++<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a7b8ad0b27a927682837f95528fa454f5">range</link>)))
6925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;add(current);
6927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
6929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;ill-formed&#32;UTF-8&#32;byte&quot;</emphasis>;
6931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
6932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6934 
6935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6936 &#32;&#32;&#32;&#32;}
6937 
6953 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer_1a986907dff5ceb4fa06aa8ff301822726">token_type</link>&#32;scan_string()
6954 &#32;&#32;&#32;&#32;{
6955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;reset&#32;token_buffer&#32;(ignore&#32;opening&#32;quote)</emphasis>
6956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reset();
6957 
6958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&#32;entered&#32;the&#32;function&#32;by&#32;reading&#32;an&#32;open&#32;quote</emphasis>
6959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(current&#32;==&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>);
6960 
6961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)
6962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;get&#32;next&#32;character</emphasis>
6964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>())
6965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;end&#32;of&#32;file&#32;while&#32;parsing&#32;string</emphasis>
6967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;std::char_traits&lt;char_type&gt;::eof():
6968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;missing&#32;closing&#32;quote&quot;</emphasis>;
6970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
6971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6972 
6973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;closing&#32;quote</emphasis>
6974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>:
6975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::value_string;
6977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6978 
6979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;escapes</emphasis>
6980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>:
6981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>())
6983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;quotation&#32;mark</emphasis>
6985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>:
6986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__setup__force__size__t__length_8cpp_1a125cf68de8b64e40ee4cede7e2b57ea2">add</link>(<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>);
6987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
6988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;reverse&#32;solidus</emphasis>
6989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>:
6990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__setup__force__size__t__length_8cpp_1a125cf68de8b64e40ee4cede7e2b57ea2">add</link>(<emphasis role="charliteral">&apos;\\&apos;</emphasis>);
6991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
6992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;solidus</emphasis>
6993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>:
6994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__setup__force__size__t__length_8cpp_1a125cf68de8b64e40ee4cede7e2b57ea2">add</link>(<emphasis role="charliteral">&apos;/&apos;</emphasis>);
6995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
6996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;backspace</emphasis>
6997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;b&apos;</emphasis>:
6998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__setup__force__size__t__length_8cpp_1a125cf68de8b64e40ee4cede7e2b57ea2">add</link>(<emphasis role="charliteral">&apos;\b&apos;</emphasis>);
6999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
7000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;form&#32;feed</emphasis>
7001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;f&apos;</emphasis>:
7002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__setup__force__size__t__length_8cpp_1a125cf68de8b64e40ee4cede7e2b57ea2">add</link>(<emphasis role="charliteral">&apos;\f&apos;</emphasis>);
7003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
7004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;line&#32;feed</emphasis>
7005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;n&apos;</emphasis>:
7006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__setup__force__size__t__length_8cpp_1a125cf68de8b64e40ee4cede7e2b57ea2">add</link>(<emphasis role="charliteral">&apos;\n&apos;</emphasis>);
7007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
7008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;carriage&#32;return</emphasis>
7009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;r&apos;</emphasis>:
7010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__setup__force__size__t__length_8cpp_1a125cf68de8b64e40ee4cede7e2b57ea2">add</link>(<emphasis role="charliteral">&apos;\r&apos;</emphasis>);
7011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
7012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;tab</emphasis>
7013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;t&apos;</emphasis>:
7014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__setup__force__size__t__length_8cpp_1a125cf68de8b64e40ee4cede7e2b57ea2">add</link>(<emphasis role="charliteral">&apos;\t&apos;</emphasis>);
7015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
7016 
7017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;unicode&#32;escapes</emphasis>
7018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;u&apos;</emphasis>:
7019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;codepoint1&#32;=&#32;get_codepoint();
7021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;codepoint&#32;=&#32;codepoint1;&#32;<emphasis role="comment">//&#32;start&#32;with&#32;codepoint1</emphasis>
7022 
7023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(codepoint1&#32;==&#32;-1))
7024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;&apos;\\u&apos;&#32;must&#32;be&#32;followed&#32;by&#32;4&#32;hex&#32;digits&quot;</emphasis>;
7026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7028 
7029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;if&#32;code&#32;point&#32;is&#32;a&#32;high&#32;surrogate</emphasis>
7030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(0xD800&#32;&lt;=&#32;codepoint1&#32;&amp;&amp;&#32;codepoint1&#32;&lt;=&#32;0xDBFF)
7031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;expect&#32;next&#32;\uxxxx&#32;entry</emphasis>
7033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0">JSON_HEDLEY_LIKELY</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>()&#32;==&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>()&#32;==&#32;<emphasis role="charliteral">&apos;u&apos;</emphasis>))
7034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;codepoint2&#32;=&#32;get_codepoint();
7036 
7037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(codepoint2&#32;==&#32;-1))
7038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;&apos;\\u&apos;&#32;must&#32;be&#32;followed&#32;by&#32;4&#32;hex&#32;digits&quot;</emphasis>;
7040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7042 
7043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;if&#32;codepoint2&#32;is&#32;a&#32;low&#32;surrogate</emphasis>
7044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0">JSON_HEDLEY_LIKELY</link>(0xDC00&#32;&lt;=&#32;codepoint2&#32;&amp;&amp;&#32;codepoint2&#32;&lt;=&#32;0xDFFF))
7045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;overwrite&#32;codepoint</emphasis>
7047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;codepoint&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(
7048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;high&#32;surrogate&#32;occupies&#32;the&#32;most&#32;significant&#32;22&#32;bits</emphasis>
7049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(codepoint1)&#32;&lt;&lt;&#32;10u)
7050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;low&#32;surrogate&#32;occupies&#32;the&#32;least&#32;significant&#32;15&#32;bits</emphasis>
7051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(codepoint2)
7052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;there&#32;is&#32;still&#32;the&#32;0xD800,&#32;0xDC00&#32;and&#32;0x10000&#32;noise</emphasis>
7053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;in&#32;the&#32;result,&#32;so&#32;we&#32;have&#32;to&#32;subtract&#32;with:</emphasis>
7054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(0xD800&#32;&lt;&lt;&#32;10)&#32;+&#32;DC00&#32;-&#32;0x10000&#32;=&#32;0x35FDC00</emphasis>
7055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;0x35FDC00u);
7056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
7058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;surrogate&#32;U+D800..U+DBFF&#32;must&#32;be&#32;followed&#32;by&#32;U+DC00..U+DFFF&quot;</emphasis>;
7060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
7064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;surrogate&#32;U+D800..U+DBFF&#32;must&#32;be&#32;followed&#32;by&#32;U+DC00..U+DFFF&quot;</emphasis>;
7066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
7070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(0xDC00&#32;&lt;=&#32;codepoint1&#32;&amp;&amp;&#32;codepoint1&#32;&lt;=&#32;0xDFFF))
7072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;surrogate&#32;U+DC00..U+DFFF&#32;must&#32;follow&#32;U+D800..U+DBFF&quot;</emphasis>;
7074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7077 
7078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;result&#32;of&#32;the&#32;above&#32;calculation&#32;yields&#32;a&#32;proper&#32;codepoint</emphasis>
7079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(0x00&#32;&lt;=&#32;codepoint&#32;&amp;&amp;&#32;codepoint&#32;&lt;=&#32;0x10FFFF);
7080 
7081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;translate&#32;codepoint&#32;into&#32;bytes</emphasis>
7082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(codepoint&#32;&lt;&#32;0x80)
7083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;1-byte&#32;characters:&#32;0xxxxxxx&#32;(ASCII)</emphasis>
7085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__setup__force__size__t__length_8cpp_1a125cf68de8b64e40ee4cede7e2b57ea2">add</link>(<emphasis role="keyword">static_cast&lt;</emphasis>char_int_type<emphasis role="keyword">&gt;</emphasis>(codepoint));
7086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(codepoint&#32;&lt;=&#32;0x7FF)
7088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2-byte&#32;characters:&#32;110xxxxx&#32;10xxxxxx</emphasis>
7090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__setup__force__size__t__length_8cpp_1a125cf68de8b64e40ee4cede7e2b57ea2">add</link>(<emphasis role="keyword">static_cast&lt;</emphasis>char_int_type<emphasis role="keyword">&gt;</emphasis>(0xC0u&#32;|&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(codepoint)&#32;&gt;&gt;&#32;6u)));
7091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__setup__force__size__t__length_8cpp_1a125cf68de8b64e40ee4cede7e2b57ea2">add</link>(<emphasis role="keyword">static_cast&lt;</emphasis>char_int_type<emphasis role="keyword">&gt;</emphasis>(0x80u&#32;|&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(codepoint)&#32;&amp;&#32;0x3Fu)));
7092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(codepoint&#32;&lt;=&#32;0xFFFF)
7094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;3-byte&#32;characters:&#32;1110xxxx&#32;10xxxxxx&#32;10xxxxxx</emphasis>
7096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__setup__force__size__t__length_8cpp_1a125cf68de8b64e40ee4cede7e2b57ea2">add</link>(<emphasis role="keyword">static_cast&lt;</emphasis>char_int_type<emphasis role="keyword">&gt;</emphasis>(0xE0u&#32;|&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(codepoint)&#32;&gt;&gt;&#32;12u)));
7097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__setup__force__size__t__length_8cpp_1a125cf68de8b64e40ee4cede7e2b57ea2">add</link>(<emphasis role="keyword">static_cast&lt;</emphasis>char_int_type<emphasis role="keyword">&gt;</emphasis>(0x80u&#32;|&#32;((<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(codepoint)&#32;&gt;&gt;&#32;6u)&#32;&amp;&#32;0x3Fu)));
7098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__setup__force__size__t__length_8cpp_1a125cf68de8b64e40ee4cede7e2b57ea2">add</link>(<emphasis role="keyword">static_cast&lt;</emphasis>char_int_type<emphasis role="keyword">&gt;</emphasis>(0x80u&#32;|&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(codepoint)&#32;&amp;&#32;0x3Fu)));
7099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
7101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;4-byte&#32;characters:&#32;11110xxx&#32;10xxxxxx&#32;10xxxxxx&#32;10xxxxxx</emphasis>
7103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__setup__force__size__t__length_8cpp_1a125cf68de8b64e40ee4cede7e2b57ea2">add</link>(<emphasis role="keyword">static_cast&lt;</emphasis>char_int_type<emphasis role="keyword">&gt;</emphasis>(0xF0u&#32;|&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(codepoint)&#32;&gt;&gt;&#32;18u)));
7104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__setup__force__size__t__length_8cpp_1a125cf68de8b64e40ee4cede7e2b57ea2">add</link>(<emphasis role="keyword">static_cast&lt;</emphasis>char_int_type<emphasis role="keyword">&gt;</emphasis>(0x80u&#32;|&#32;((<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(codepoint)&#32;&gt;&gt;&#32;12u)&#32;&amp;&#32;0x3Fu)));
7105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__setup__force__size__t__length_8cpp_1a125cf68de8b64e40ee4cede7e2b57ea2">add</link>(<emphasis role="keyword">static_cast&lt;</emphasis>char_int_type<emphasis role="keyword">&gt;</emphasis>(0x80u&#32;|&#32;((<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(codepoint)&#32;&gt;&gt;&#32;6u)&#32;&amp;&#32;0x3Fu)));
7106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__setup__force__size__t__length_8cpp_1a125cf68de8b64e40ee4cede7e2b57ea2">add</link>(<emphasis role="keyword">static_cast&lt;</emphasis>char_int_type<emphasis role="keyword">&gt;</emphasis>(0x80u&#32;|&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(codepoint)&#32;&amp;&#32;0x3Fu)));
7107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7108 
7109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
7110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7111 
7112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;other&#32;characters&#32;after&#32;escape</emphasis>
7113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
7114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;forbidden&#32;character&#32;after&#32;backslash&quot;</emphasis>;
7115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7117 
7118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
7119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7120 
7121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;invalid&#32;control&#32;characters</emphasis>
7122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x00:
7123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;control&#32;character&#32;U+0000&#32;(NUL)&#32;must&#32;be&#32;escaped&#32;to&#32;\\u0000&quot;</emphasis>;
7125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7127 
7128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x01:
7129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;control&#32;character&#32;U+0001&#32;(SOH)&#32;must&#32;be&#32;escaped&#32;to&#32;\\u0001&quot;</emphasis>;
7131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7133 
7134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x02:
7135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;control&#32;character&#32;U+0002&#32;(STX)&#32;must&#32;be&#32;escaped&#32;to&#32;\\u0002&quot;</emphasis>;
7137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7139 
7140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x03:
7141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;control&#32;character&#32;U+0003&#32;(ETX)&#32;must&#32;be&#32;escaped&#32;to&#32;\\u0003&quot;</emphasis>;
7143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7145 
7146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x04:
7147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;control&#32;character&#32;U+0004&#32;(EOT)&#32;must&#32;be&#32;escaped&#32;to&#32;\\u0004&quot;</emphasis>;
7149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7151 
7152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x05:
7153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;control&#32;character&#32;U+0005&#32;(ENQ)&#32;must&#32;be&#32;escaped&#32;to&#32;\\u0005&quot;</emphasis>;
7155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7157 
7158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x06:
7159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;control&#32;character&#32;U+0006&#32;(ACK)&#32;must&#32;be&#32;escaped&#32;to&#32;\\u0006&quot;</emphasis>;
7161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7163 
7164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x07:
7165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;control&#32;character&#32;U+0007&#32;(BEL)&#32;must&#32;be&#32;escaped&#32;to&#32;\\u0007&quot;</emphasis>;
7167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7169 
7170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x08:
7171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;control&#32;character&#32;U+0008&#32;(BS)&#32;must&#32;be&#32;escaped&#32;to&#32;\\u0008&#32;or&#32;\\b&quot;</emphasis>;
7173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7175 
7176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x09:
7177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;control&#32;character&#32;U+0009&#32;(HT)&#32;must&#32;be&#32;escaped&#32;to&#32;\\u0009&#32;or&#32;\\t&quot;</emphasis>;
7179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7181 
7182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x0A:
7183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;control&#32;character&#32;U+000A&#32;(LF)&#32;must&#32;be&#32;escaped&#32;to&#32;\\u000A&#32;or&#32;\\n&quot;</emphasis>;
7185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7187 
7188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x0B:
7189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;control&#32;character&#32;U+000B&#32;(VT)&#32;must&#32;be&#32;escaped&#32;to&#32;\\u000B&quot;</emphasis>;
7191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7193 
7194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x0C:
7195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;control&#32;character&#32;U+000C&#32;(FF)&#32;must&#32;be&#32;escaped&#32;to&#32;\\u000C&#32;or&#32;\\f&quot;</emphasis>;
7197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7199 
7200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x0D:
7201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;control&#32;character&#32;U+000D&#32;(CR)&#32;must&#32;be&#32;escaped&#32;to&#32;\\u000D&#32;or&#32;\\r&quot;</emphasis>;
7203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7205 
7206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x0E:
7207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;control&#32;character&#32;U+000E&#32;(SO)&#32;must&#32;be&#32;escaped&#32;to&#32;\\u000E&quot;</emphasis>;
7209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7211 
7212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x0F:
7213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;control&#32;character&#32;U+000F&#32;(SI)&#32;must&#32;be&#32;escaped&#32;to&#32;\\u000F&quot;</emphasis>;
7215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7217 
7218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x10:
7219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;control&#32;character&#32;U+0010&#32;(DLE)&#32;must&#32;be&#32;escaped&#32;to&#32;\\u0010&quot;</emphasis>;
7221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7223 
7224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x11:
7225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;control&#32;character&#32;U+0011&#32;(DC1)&#32;must&#32;be&#32;escaped&#32;to&#32;\\u0011&quot;</emphasis>;
7227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7229 
7230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x12:
7231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;control&#32;character&#32;U+0012&#32;(DC2)&#32;must&#32;be&#32;escaped&#32;to&#32;\\u0012&quot;</emphasis>;
7233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7235 
7236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x13:
7237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;control&#32;character&#32;U+0013&#32;(DC3)&#32;must&#32;be&#32;escaped&#32;to&#32;\\u0013&quot;</emphasis>;
7239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7241 
7242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x14:
7243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;control&#32;character&#32;U+0014&#32;(DC4)&#32;must&#32;be&#32;escaped&#32;to&#32;\\u0014&quot;</emphasis>;
7245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7247 
7248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x15:
7249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;control&#32;character&#32;U+0015&#32;(NAK)&#32;must&#32;be&#32;escaped&#32;to&#32;\\u0015&quot;</emphasis>;
7251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7253 
7254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x16:
7255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;control&#32;character&#32;U+0016&#32;(SYN)&#32;must&#32;be&#32;escaped&#32;to&#32;\\u0016&quot;</emphasis>;
7257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7259 
7260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x17:
7261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;control&#32;character&#32;U+0017&#32;(ETB)&#32;must&#32;be&#32;escaped&#32;to&#32;\\u0017&quot;</emphasis>;
7263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7265 
7266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x18:
7267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;control&#32;character&#32;U+0018&#32;(CAN)&#32;must&#32;be&#32;escaped&#32;to&#32;\\u0018&quot;</emphasis>;
7269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7271 
7272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x19:
7273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;control&#32;character&#32;U+0019&#32;(EM)&#32;must&#32;be&#32;escaped&#32;to&#32;\\u0019&quot;</emphasis>;
7275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7277 
7278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x1A:
7279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;control&#32;character&#32;U+001A&#32;(SUB)&#32;must&#32;be&#32;escaped&#32;to&#32;\\u001A&quot;</emphasis>;
7281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7283 
7284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x1B:
7285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;control&#32;character&#32;U+001B&#32;(ESC)&#32;must&#32;be&#32;escaped&#32;to&#32;\\u001B&quot;</emphasis>;
7287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7289 
7290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x1C:
7291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;control&#32;character&#32;U+001C&#32;(FS)&#32;must&#32;be&#32;escaped&#32;to&#32;\\u001C&quot;</emphasis>;
7293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7295 
7296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x1D:
7297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;control&#32;character&#32;U+001D&#32;(GS)&#32;must&#32;be&#32;escaped&#32;to&#32;\\u001D&quot;</emphasis>;
7299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7301 
7302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x1E:
7303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;control&#32;character&#32;U+001E&#32;(RS)&#32;must&#32;be&#32;escaped&#32;to&#32;\\u001E&quot;</emphasis>;
7305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7307 
7308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x1F:
7309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;control&#32;character&#32;U+001F&#32;(US)&#32;must&#32;be&#32;escaped&#32;to&#32;\\u001F&quot;</emphasis>;
7311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7313 
7314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;U+0020..U+007F&#32;(except&#32;U+0022&#32;(quote)&#32;and&#32;U+005C&#32;(backspace))</emphasis>
7315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x20:
7316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x21:
7317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x23:
7318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x24:
7319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x25:
7320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x26:
7321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x27:
7322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x28:
7323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x29:
7324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x2A:
7325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x2B:
7326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x2C:
7327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x2D:
7328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x2E:
7329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x2F:
7330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x30:
7331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x31:
7332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x32:
7333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x33:
7334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x34:
7335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x35:
7336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x36:
7337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x37:
7338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x38:
7339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x39:
7340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x3A:
7341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x3B:
7342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x3C:
7343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x3D:
7344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x3E:
7345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x3F:
7346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x40:
7347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x41:
7348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x42:
7349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x43:
7350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x44:
7351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x45:
7352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x46:
7353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x47:
7354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x48:
7355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x49:
7356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x4A:
7357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x4B:
7358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x4C:
7359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x4D:
7360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x4E:
7361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x4F:
7362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x50:
7363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x51:
7364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x52:
7365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x53:
7366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x54:
7367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x55:
7368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x56:
7369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x57:
7370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x58:
7371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x59:
7372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x5A:
7373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x5B:
7374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x5D:
7375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x5E:
7376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x5F:
7377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x60:
7378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x61:
7379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x62:
7380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x63:
7381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x64:
7382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x65:
7383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x66:
7384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x67:
7385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x68:
7386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x69:
7387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x6A:
7388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x6B:
7389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x6C:
7390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x6D:
7391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x6E:
7392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x6F:
7393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x70:
7394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x71:
7395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x72:
7396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x73:
7397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x74:
7398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x75:
7399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x76:
7400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x77:
7401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x78:
7402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x79:
7403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x7A:
7404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x7B:
7405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x7C:
7406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x7D:
7407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x7E:
7408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x7F:
7409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__setup__force__size__t__length_8cpp_1a125cf68de8b64e40ee4cede7e2b57ea2">add</link>(current);
7411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
7412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7413 
7414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;U+0080..U+07FF:&#32;bytes&#32;C2..DF&#32;80..BF</emphasis>
7415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xC2:
7416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xC3:
7417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xC4:
7418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xC5:
7419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xC6:
7420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xC7:
7421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xC8:
7422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xC9:
7423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xCA:
7424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xCB:
7425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xCC:
7426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xCD:
7427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xCE:
7428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xCF:
7429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xD0:
7430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xD1:
7431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xD2:
7432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xD3:
7433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xD4:
7434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xD5:
7435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xD6:
7436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xD7:
7437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xD8:
7438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xD9:
7439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xDA:
7440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xDB:
7441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xDC:
7442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xDD:
7443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xDE:
7444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xDF:
7445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!next_byte_in_range({0x80,&#32;0xBF})))
7447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
7451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7452 
7453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;U+0800..U+0FFF:&#32;bytes&#32;E0&#32;A0..BF&#32;80..BF</emphasis>
7454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xE0:
7455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!(next_byte_in_range({0xA0,&#32;0xBF,&#32;0x80,&#32;0xBF}))))
7457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
7461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7462 
7463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;U+1000..U+CFFF:&#32;bytes&#32;E1..EC&#32;80..BF&#32;80..BF</emphasis>
7464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;U+E000..U+FFFF:&#32;bytes&#32;EE..EF&#32;80..BF&#32;80..BF</emphasis>
7465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xE1:
7466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xE2:
7467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xE3:
7468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xE4:
7469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xE5:
7470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xE6:
7471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xE7:
7472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xE8:
7473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xE9:
7474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xEA:
7475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xEB:
7476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xEC:
7477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xEE:
7478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xEF:
7479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!(next_byte_in_range({0x80,&#32;0xBF,&#32;0x80,&#32;0xBF}))))
7481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
7485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7486 
7487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;U+D000..U+D7FF:&#32;bytes&#32;ED&#32;80..9F&#32;80..BF</emphasis>
7488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xED:
7489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!(next_byte_in_range({0x80,&#32;0x9F,&#32;0x80,&#32;0xBF}))))
7491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
7495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7496 
7497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;U+10000..U+3FFFF&#32;F0&#32;90..BF&#32;80..BF&#32;80..BF</emphasis>
7498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xF0:
7499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!(next_byte_in_range({0x90,&#32;0xBF,&#32;0x80,&#32;0xBF,&#32;0x80,&#32;0xBF}))))
7501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
7505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7506 
7507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;U+40000..U+FFFFF&#32;F1..F3&#32;80..BF&#32;80..BF&#32;80..BF</emphasis>
7508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xF1:
7509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xF2:
7510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xF3:
7511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!(next_byte_in_range({0x80,&#32;0xBF,&#32;0x80,&#32;0xBF,&#32;0x80,&#32;0xBF}))))
7513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
7517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7518 
7519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;U+100000..U+10FFFF&#32;F4&#32;80..8F&#32;80..BF&#32;80..BF</emphasis>
7520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xF4:
7521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!(next_byte_in_range({0x80,&#32;0x8F,&#32;0x80,&#32;0xBF,&#32;0x80,&#32;0xBF}))))
7523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
7527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7528 
7529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;remaining&#32;bytes&#32;(80..C1&#32;and&#32;F5..FF)&#32;are&#32;ill-formed</emphasis>
7530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
7531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;string:&#32;ill-formed&#32;UTF-8&#32;byte&quot;</emphasis>;
7533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7537 &#32;&#32;&#32;&#32;}
7538 
7543 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;scan_comment()
7544 &#32;&#32;&#32;&#32;{
7545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>())
7546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;single-line&#32;comments&#32;skip&#32;input&#32;until&#32;a&#32;newline&#32;or&#32;EOF&#32;is&#32;read</emphasis>
7548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>:
7549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)
7551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>())
7553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>:
7555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;\r&apos;</emphasis>:
7556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;std::char_traits&lt;char_type&gt;::eof():
7557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;case&#32;<emphasis role="stringliteral">&apos;\0&apos;</emphasis>:
7558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>;
7559 
7560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
7561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
7562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7565 
7566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;multi-line&#32;comments&#32;skip&#32;input&#32;until&#32;*/&#32;is&#32;read</emphasis>
7567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;*&apos;</emphasis>:
7568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)
7570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>())
7572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;std::char_traits&lt;char_type&gt;::eof():
7574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;case&#32;<emphasis role="stringliteral">&apos;\0&apos;</emphasis>:
7575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;comment;&#32;missing&#32;closing&#32;&apos;*/&apos;&quot;</emphasis>;
7577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
7578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7579 
7580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;*&apos;</emphasis>:
7581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>())
7583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>:
7585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
7586 
7587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
7588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unget();
7590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
7591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7594 
7595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
7596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
7597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7600 
7601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;unexpected&#32;character&#32;after&#32;reading&#32;&apos;/&apos;</emphasis>
7602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
7603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;comment;&#32;expecting&#32;&apos;/&apos;&#32;or&#32;&apos;*&apos;&#32;after&#32;&apos;/&apos;&quot;</emphasis>;
7605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
7606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7608 &#32;&#32;&#32;&#32;}
7609 
7610 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a5338981b5ad9027c9e54b1c5597f4344">JSON_HEDLEY_NON_NULL</link>(2)
7611 &#32;&#32;&#32;&#32;static&#32;<emphasis role="keywordtype">void</emphasis>&#32;strtof(<emphasis role="keywordtype">float</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>,&#32;const&#32;<emphasis role="keywordtype">char</emphasis>*&#32;str,&#32;<emphasis role="keywordtype">char</emphasis>**&#32;endptr)&#32;noexcept
7612 &#32;&#32;&#32;&#32;{
7613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>&#32;=&#32;std::strtof(str,&#32;endptr);
7614 &#32;&#32;&#32;&#32;}
7615 
7616 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a5338981b5ad9027c9e54b1c5597f4344">JSON_HEDLEY_NON_NULL</link>(2)
7617 &#32;&#32;&#32;&#32;static&#32;<emphasis role="keywordtype">void</emphasis>&#32;strtof(<emphasis role="keywordtype">double</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>,&#32;const&#32;<emphasis role="keywordtype">char</emphasis>*&#32;str,&#32;<emphasis role="keywordtype">char</emphasis>**&#32;endptr)&#32;noexcept
7618 &#32;&#32;&#32;&#32;{
7619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>&#32;=&#32;std::strtod(str,&#32;endptr);
7620 &#32;&#32;&#32;&#32;}
7621 
7622 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a5338981b5ad9027c9e54b1c5597f4344">JSON_HEDLEY_NON_NULL</link>(2)
7623 &#32;&#32;&#32;&#32;static&#32;<emphasis role="keywordtype">void</emphasis>&#32;strtof(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>,&#32;const&#32;<emphasis role="keywordtype">char</emphasis>*&#32;str,&#32;<emphasis role="keywordtype">char</emphasis>**&#32;endptr)&#32;noexcept
7624 &#32;&#32;&#32;&#32;{
7625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>&#32;=&#32;std::strtold(str,&#32;endptr);
7626 &#32;&#32;&#32;&#32;}
7627 
7668 &#32;&#32;&#32;&#32;token_type&#32;scan_number()&#32;&#32;<emphasis role="comment">//&#32;lgtm&#32;[cpp/use-of-goto]</emphasis>
7669 &#32;&#32;&#32;&#32;{
7670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;reset&#32;token_buffer&#32;to&#32;store&#32;the&#32;number&apos;s&#32;bytes</emphasis>
7671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reset();
7672 
7673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;type&#32;of&#32;the&#32;parsed&#32;number;&#32;initially&#32;set&#32;to&#32;unsigned;&#32;will&#32;be</emphasis>
7674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;changed&#32;if&#32;minus&#32;sign,&#32;decimal&#32;point&#32;or&#32;exponent&#32;is&#32;read</emphasis>
7675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token_type&#32;number_type&#32;=&#32;token_type::value_unsigned;
7676 
7677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;state&#32;(init):&#32;we&#32;just&#32;found&#32;out&#32;we&#32;need&#32;to&#32;scan&#32;a&#32;number</emphasis>
7678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(current)
7679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>:
7681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__setup__force__size__t__length_8cpp_1a125cf68de8b64e40ee4cede7e2b57ea2">add</link>(current);
7683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;scan_number_minus;
7684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7685 
7686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>:
7687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__setup__force__size__t__length_8cpp_1a125cf68de8b64e40ee4cede7e2b57ea2">add</link>(current);
7689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;scan_number_zero;
7690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7691 
7692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;1&apos;</emphasis>:
7693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;2&apos;</emphasis>:
7694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;3&apos;</emphasis>:
7695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;4&apos;</emphasis>:
7696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;5&apos;</emphasis>:
7697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;6&apos;</emphasis>:
7698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;7&apos;</emphasis>:
7699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;8&apos;</emphasis>:
7700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>:
7701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__setup__force__size__t__length_8cpp_1a125cf68de8b64e40ee4cede7e2b57ea2">add</link>(current);
7703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;scan_number_any1;
7704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7705 
7706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;all&#32;other&#32;characters&#32;are&#32;rejected&#32;outside&#32;scan_number()</emphasis>
7707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
7708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(<emphasis role="keyword">false</emphasis>);&#32;<emphasis role="comment">//&#32;NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)&#32;LCOV_EXCL_LINE</emphasis>
7709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7710 
7711 scan_number_minus:
7712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;state:&#32;we&#32;just&#32;parsed&#32;a&#32;leading&#32;minus&#32;sign</emphasis>
7713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;number_type&#32;=&#32;token_type::value_integer;
7714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>())
7715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>:
7717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__setup__force__size__t__length_8cpp_1a125cf68de8b64e40ee4cede7e2b57ea2">add</link>(current);
7719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;scan_number_zero;
7720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7721 
7722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;1&apos;</emphasis>:
7723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;2&apos;</emphasis>:
7724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;3&apos;</emphasis>:
7725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;4&apos;</emphasis>:
7726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;5&apos;</emphasis>:
7727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;6&apos;</emphasis>:
7728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;7&apos;</emphasis>:
7729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;8&apos;</emphasis>:
7730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>:
7731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__setup__force__size__t__length_8cpp_1a125cf68de8b64e40ee4cede7e2b57ea2">add</link>(current);
7733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;scan_number_any1;
7734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7735 
7736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
7737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;number;&#32;expected&#32;digit&#32;after&#32;&apos;-&apos;&quot;</emphasis>;
7739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7742 
7743 scan_number_zero:
7744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;state:&#32;we&#32;just&#32;parse&#32;a&#32;zero&#32;(maybe&#32;with&#32;a&#32;leading&#32;minus&#32;sign)</emphasis>
7745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>())
7746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>:
7748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__setup__force__size__t__length_8cpp_1a125cf68de8b64e40ee4cede7e2b57ea2">add</link>(decimal_point_char);
7750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;scan_number_decimal1;
7751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7752 
7753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;e&apos;</emphasis>:
7754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;E&apos;</emphasis>:
7755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__setup__force__size__t__length_8cpp_1a125cf68de8b64e40ee4cede7e2b57ea2">add</link>(current);
7757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;scan_number_exponent;
7758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7759 
7760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
7761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;scan_number_done;
7762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7763 
7764 scan_number_any1:
7765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;state:&#32;we&#32;just&#32;parsed&#32;a&#32;number&#32;0-9&#32;(maybe&#32;with&#32;a&#32;leading&#32;minus&#32;sign)</emphasis>
7766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>())
7767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>:
7769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;1&apos;</emphasis>:
7770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;2&apos;</emphasis>:
7771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;3&apos;</emphasis>:
7772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;4&apos;</emphasis>:
7773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;5&apos;</emphasis>:
7774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;6&apos;</emphasis>:
7775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;7&apos;</emphasis>:
7776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;8&apos;</emphasis>:
7777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>:
7778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__setup__force__size__t__length_8cpp_1a125cf68de8b64e40ee4cede7e2b57ea2">add</link>(current);
7780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;scan_number_any1;
7781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7782 
7783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>:
7784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__setup__force__size__t__length_8cpp_1a125cf68de8b64e40ee4cede7e2b57ea2">add</link>(decimal_point_char);
7786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;scan_number_decimal1;
7787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7788 
7789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;e&apos;</emphasis>:
7790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;E&apos;</emphasis>:
7791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__setup__force__size__t__length_8cpp_1a125cf68de8b64e40ee4cede7e2b57ea2">add</link>(current);
7793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;scan_number_exponent;
7794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7795 
7796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
7797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;scan_number_done;
7798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7799 
7800 scan_number_decimal1:
7801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;state:&#32;we&#32;just&#32;parsed&#32;a&#32;decimal&#32;point</emphasis>
7802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;number_type&#32;=&#32;token_type::value_float;
7803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>())
7804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>:
7806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;1&apos;</emphasis>:
7807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;2&apos;</emphasis>:
7808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;3&apos;</emphasis>:
7809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;4&apos;</emphasis>:
7810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;5&apos;</emphasis>:
7811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;6&apos;</emphasis>:
7812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;7&apos;</emphasis>:
7813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;8&apos;</emphasis>:
7814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>:
7815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__setup__force__size__t__length_8cpp_1a125cf68de8b64e40ee4cede7e2b57ea2">add</link>(current);
7817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;scan_number_decimal2;
7818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7819 
7820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
7821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;number;&#32;expected&#32;digit&#32;after&#32;&apos;.&apos;&quot;</emphasis>;
7823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7826 
7827 scan_number_decimal2:
7828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&#32;just&#32;parsed&#32;at&#32;least&#32;one&#32;number&#32;after&#32;a&#32;decimal&#32;point</emphasis>
7829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>())
7830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>:
7832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;1&apos;</emphasis>:
7833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;2&apos;</emphasis>:
7834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;3&apos;</emphasis>:
7835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;4&apos;</emphasis>:
7836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;5&apos;</emphasis>:
7837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;6&apos;</emphasis>:
7838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;7&apos;</emphasis>:
7839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;8&apos;</emphasis>:
7840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>:
7841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__setup__force__size__t__length_8cpp_1a125cf68de8b64e40ee4cede7e2b57ea2">add</link>(current);
7843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;scan_number_decimal2;
7844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7845 
7846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;e&apos;</emphasis>:
7847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;E&apos;</emphasis>:
7848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__setup__force__size__t__length_8cpp_1a125cf68de8b64e40ee4cede7e2b57ea2">add</link>(current);
7850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;scan_number_exponent;
7851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7852 
7853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
7854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;scan_number_done;
7855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7856 
7857 scan_number_exponent:
7858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&#32;just&#32;parsed&#32;an&#32;exponent</emphasis>
7859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;number_type&#32;=&#32;token_type::value_float;
7860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>())
7861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;+&apos;</emphasis>:
7863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>:
7864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__setup__force__size__t__length_8cpp_1a125cf68de8b64e40ee4cede7e2b57ea2">add</link>(current);
7866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;scan_number_sign;
7867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7868 
7869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>:
7870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;1&apos;</emphasis>:
7871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;2&apos;</emphasis>:
7872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;3&apos;</emphasis>:
7873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;4&apos;</emphasis>:
7874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;5&apos;</emphasis>:
7875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;6&apos;</emphasis>:
7876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;7&apos;</emphasis>:
7877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;8&apos;</emphasis>:
7878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>:
7879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__setup__force__size__t__length_8cpp_1a125cf68de8b64e40ee4cede7e2b57ea2">add</link>(current);
7881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;scan_number_any2;
7882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7883 
7884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
7885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=
7887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;invalid&#32;number;&#32;expected&#32;&apos;+&apos;,&#32;&apos;-&apos;,&#32;or&#32;digit&#32;after&#32;exponent&quot;</emphasis>;
7888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7891 
7892 scan_number_sign:
7893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&#32;just&#32;parsed&#32;an&#32;exponent&#32;sign</emphasis>
7894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>())
7895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>:
7897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;1&apos;</emphasis>:
7898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;2&apos;</emphasis>:
7899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;3&apos;</emphasis>:
7900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;4&apos;</emphasis>:
7901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;5&apos;</emphasis>:
7902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;6&apos;</emphasis>:
7903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;7&apos;</emphasis>:
7904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;8&apos;</emphasis>:
7905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>:
7906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__setup__force__size__t__length_8cpp_1a125cf68de8b64e40ee4cede7e2b57ea2">add</link>(current);
7908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;scan_number_any2;
7909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7910 
7911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
7912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;number;&#32;expected&#32;digit&#32;after&#32;exponent&#32;sign&quot;</emphasis>;
7914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
7915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7917 
7918 scan_number_any2:
7919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&#32;just&#32;parsed&#32;a&#32;number&#32;after&#32;the&#32;exponent&#32;or&#32;exponent&#32;sign</emphasis>
7920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>())
7921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>:
7923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;1&apos;</emphasis>:
7924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;2&apos;</emphasis>:
7925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;3&apos;</emphasis>:
7926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;4&apos;</emphasis>:
7927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;5&apos;</emphasis>:
7928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;6&apos;</emphasis>:
7929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;7&apos;</emphasis>:
7930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;8&apos;</emphasis>:
7931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>:
7932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__setup__force__size__t__length_8cpp_1a125cf68de8b64e40ee4cede7e2b57ea2">add</link>(current);
7934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;scan_number_any2;
7935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7936 
7937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
7938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;scan_number_done;
7939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7940 
7941 scan_number_done:
7942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;unget&#32;the&#32;character&#32;after&#32;the&#32;number&#32;(we&#32;only&#32;read&#32;it&#32;to&#32;know&#32;that</emphasis>
7943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&#32;are&#32;done&#32;scanning&#32;a&#32;number)</emphasis>
7944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unget();
7945 
7946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>*&#32;endptr&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;&#32;<emphasis role="comment">//&#32;NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)</emphasis>
7947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;errno&#32;=&#32;0;
7948 
7949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;try&#32;to&#32;parse&#32;integers&#32;first&#32;and&#32;fall&#32;back&#32;to&#32;floats</emphasis>
7950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(number_type&#32;==&#32;token_type::value_unsigned)
7951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;std::strtoull(token_buffer.data(),&#32;&amp;endptr,&#32;10);
7953 
7954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&#32;checked&#32;the&#32;number&#32;format&#32;before</emphasis>
7955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(endptr&#32;==&#32;token_buffer.data()&#32;+&#32;token_buffer.size());
7956 
7957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(errno&#32;==&#32;0)
7958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_unsigned&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>number_unsigned_t<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>);
7960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(value_unsigned&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
7961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::value_unsigned;
7963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(number_type&#32;==&#32;token_type::value_integer)
7967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;std::strtoll(token_buffer.data(),&#32;&amp;endptr,&#32;10);
7969 
7970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&#32;checked&#32;the&#32;number&#32;format&#32;before</emphasis>
7971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(endptr&#32;==&#32;token_buffer.data()&#32;+&#32;token_buffer.size());
7972 
7973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(errno&#32;==&#32;0)
7974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_integer&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>number_integer_t<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>);
7976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(value_integer&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
7977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::value_integer;
7979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7982 
7983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;this&#32;code&#32;is&#32;reached&#32;if&#32;we&#32;parse&#32;a&#32;floating-point&#32;number&#32;or&#32;if&#32;an</emphasis>
7984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;integer&#32;conversion&#32;above&#32;failed</emphasis>
7985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;strtof(value_float,&#32;token_buffer.data(),&#32;&amp;endptr);
7986 
7987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&#32;checked&#32;the&#32;number&#32;format&#32;before</emphasis>
7988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(endptr&#32;==&#32;token_buffer.data()&#32;+&#32;token_buffer.size());
7989 
7990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::value_float;
7991 &#32;&#32;&#32;&#32;}
7992 
7998 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a5338981b5ad9027c9e54b1c5597f4344">JSON_HEDLEY_NON_NULL</link>(2)
7999 &#32;&#32;&#32;&#32;token_type&#32;scan_literal(const&#32;char_type*&#32;literal_text,&#32;const&#32;<link linkend="_namespacestd">std</link>::<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_namespacelength">length</link>,
8000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token_type&#32;return_type)
8001 &#32;&#32;&#32;&#32;{
8002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(std::char_traits&lt;char_type&gt;::to_char_type(current)&#32;==&#32;literal_text[0]);
8003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;<link linkend="_namespacelength">length</link>;&#32;++i)
8004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(std::char_traits&lt;char_type&gt;::to_char_type(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>())&#32;!=&#32;literal_text[i]))
8006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;literal&quot;</emphasis>;
8008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
8009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;return_type;
8012 &#32;&#32;&#32;&#32;}
8013 
8015 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;input&#32;management</emphasis>
8017 
8019 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;reset()&#32;noexcept
8020 &#32;&#32;&#32;&#32;{
8021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token_buffer.clear();
8022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token_string.clear();
8023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token_string.push_back(std::char_traits&lt;char_type&gt;::to_char_type(current));
8024 &#32;&#32;&#32;&#32;}
8025 
8026 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
8027 <emphasis role="comment">&#32;&#32;&#32;&#32;@brief&#32;get&#32;next&#32;character&#32;from&#32;the&#32;input</emphasis>
8028 <emphasis role="comment"></emphasis>
8029 <emphasis role="comment">&#32;&#32;&#32;&#32;This&#32;function&#32;provides&#32;the&#32;interface&#32;to&#32;the&#32;used&#32;input&#32;adapter.&#32;It&#32;does</emphasis>
8030 <emphasis role="comment">&#32;&#32;&#32;&#32;not&#32;throw&#32;in&#32;case&#32;the&#32;input&#32;reached&#32;EOF,&#32;but&#32;returns&#32;a</emphasis>
8031 <emphasis role="comment">&#32;&#32;&#32;&#32;`std::char_traits&lt;char&gt;::eof()`&#32;in&#32;that&#32;case.&#32;&#32;Stores&#32;the&#32;scanned&#32;characters</emphasis>
8032 <emphasis role="comment">&#32;&#32;&#32;&#32;for&#32;use&#32;in&#32;error&#32;messages.</emphasis>
8033 <emphasis role="comment"></emphasis>
8034 <emphasis role="comment">&#32;&#32;&#32;&#32;@return&#32;character&#32;read&#32;from&#32;the&#32;input</emphasis>
8035 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
8036 &#32;&#32;&#32;&#32;char_int_type&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>()
8037 &#32;&#32;&#32;&#32;{
8038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++<link linkend="_main_8cpp_1a76777b356ab2a080225682528119c4fe">position</link>.chars_read_total;
8039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++<link linkend="_main_8cpp_1a76777b356ab2a080225682528119c4fe">position</link>.chars_read_current_line;
8040 
8041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(next_unget)
8042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;just&#32;reset&#32;the&#32;next_unget&#32;variable&#32;and&#32;work&#32;with&#32;current</emphasis>
8044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;next_unget&#32;=&#32;<emphasis role="keyword">false</emphasis>;
8045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
8047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;current&#32;=&#32;ia.get_character();
8049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8050 
8051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0">JSON_HEDLEY_LIKELY</link>(current&#32;!=&#32;std::char_traits&lt;char_type&gt;::eof()))
8052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token_string.push_back(std::char_traits&lt;char_type&gt;::to_char_type(current));
8054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8055 
8056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(current&#32;==&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>)
8057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++<link linkend="_main_8cpp_1a76777b356ab2a080225682528119c4fe">position</link>.lines_read;
8059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_main_8cpp_1a76777b356ab2a080225682528119c4fe">position</link>.chars_read_current_line&#32;=&#32;0;
8060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8061 
8062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;current;
8063 &#32;&#32;&#32;&#32;}
8064 
8073 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;unget()
8074 &#32;&#32;&#32;&#32;{
8075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;next_unget&#32;=&#32;<emphasis role="keyword">true</emphasis>;
8076 
8077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--<link linkend="_main_8cpp_1a76777b356ab2a080225682528119c4fe">position</link>.chars_read_total;
8078 
8079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;in&#32;case&#32;we&#32;&quot;unget&quot;&#32;a&#32;newline,&#32;we&#32;have&#32;to&#32;also&#32;decrement&#32;the&#32;lines_read</emphasis>
8080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_main_8cpp_1a76777b356ab2a080225682528119c4fe">position</link>.chars_read_current_line&#32;==&#32;0)
8081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_main_8cpp_1a76777b356ab2a080225682528119c4fe">position</link>.lines_read&#32;&gt;&#32;0)
8083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--<link linkend="_main_8cpp_1a76777b356ab2a080225682528119c4fe">position</link>.lines_read;
8085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
8088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--<link linkend="_main_8cpp_1a76777b356ab2a080225682528119c4fe">position</link>.chars_read_current_line;
8090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8091 
8092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0">JSON_HEDLEY_LIKELY</link>(current&#32;!=&#32;std::char_traits&lt;char_type&gt;::eof()))
8093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(!token_string.empty());
8095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token_string.pop_back();
8096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8097 &#32;&#32;&#32;&#32;}
8098 
8100 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__setup__force__size__t__length_8cpp_1a125cf68de8b64e40ee4cede7e2b57ea2">add</link>(char_int_type&#32;c)
8101 &#32;&#32;&#32;&#32;{
8102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token_buffer.push_back(<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;string_t::value_type<emphasis role="keyword">&gt;</emphasis>(c));
8103 &#32;&#32;&#32;&#32;}
8104 
8105 &#32;&#32;<emphasis role="keyword">public</emphasis>:
8107 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;value&#32;getters</emphasis>
8109 
8111 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;number_integer_t&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer_1a9535d0c72adbe9fe149853ebad5faee8">get_number_integer</link>()&#32;const&#32;noexcept
8112 &#32;&#32;&#32;&#32;{
8113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;value_integer;
8114 &#32;&#32;&#32;&#32;}
8115 
8117 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;number_unsigned_t&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer_1abfc85ff04fcb1a5a8d8ea299a4c479e5">get_number_unsigned</link>()&#32;const&#32;noexcept
8118 &#32;&#32;&#32;&#32;{
8119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;value_unsigned;
8120 &#32;&#32;&#32;&#32;}
8121 
8123 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;number_float_t&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer_1adb1a71f6a3e65ed32c452a318967b61e">get_number_float</link>()&#32;const&#32;noexcept
8124 &#32;&#32;&#32;&#32;{
8125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;value_float;
8126 &#32;&#32;&#32;&#32;}
8127 
8129 &#32;&#32;&#32;&#32;string_t&amp;&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer_1a0d4629316aaa5c05a9b8adb0cd76705e">get_string</link>()
8130 &#32;&#32;&#32;&#32;{
8131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_buffer;
8132 &#32;&#32;&#32;&#32;}
8133 
8135 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;diagnostics</emphasis>
8137 
8139 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_structnlohmann_1_1detail_1_1position__t">position_t</link>&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer_1a948c80b8bd8a3095b544e4655e1ca37e">get_position</link>()&#32;const&#32;noexcept
8140 &#32;&#32;&#32;&#32;{
8141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_main_8cpp_1a76777b356ab2a080225682528119c4fe">position</link>;
8142 &#32;&#32;&#32;&#32;}
8143 
8147 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer_1ae000b7571480e528dee4b281f63d5b15">get_token_string</link>()<emphasis role="keyword">&#32;const</emphasis>
8148 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
8149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;escape&#32;control&#32;characters</emphasis>
8150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
8151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;c&#32;:&#32;token_string)
8152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(c)&#32;&lt;=&#32;<emphasis role="stringliteral">&apos;\x1F&apos;</emphasis>)
8154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;escape&#32;control&#32;characters</emphasis>
8156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::array&lt;char,&#32;9&gt;&#32;cs{{}};
8157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis><emphasis role="keyword">&gt;</emphasis>((std::snprintf)(cs.data(),&#32;cs.size(),&#32;<emphasis role="stringliteral">&quot;&lt;U+%.4X&gt;&quot;</emphasis>,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(c)));&#32;<emphasis role="comment">//&#32;NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)</emphasis>
8158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;+=&#32;cs.data();
8159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
8161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;add&#32;character&#32;as&#32;is</emphasis>
8163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.push_back(<emphasis role="keyword">static_cast&lt;</emphasis>std::string::value_type<emphasis role="keyword">&gt;</emphasis>(c));
8164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8166 
8167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
8168 &#32;&#32;&#32;&#32;}
8169 
8171 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a5f2aaec3b681d0a72f7d6e90b70cdcd1">JSON_HEDLEY_RETURNS_NON_NULL</link>
8172 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer_1afe2f78f0bad1d08f67dc417278a59f29">get_error_message</link>()&#32;const&#32;noexcept
8173 &#32;&#32;&#32;&#32;{
8174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;error_message;
8175 &#32;&#32;&#32;&#32;}
8176 
8178 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;actual&#32;scanner</emphasis>
8180 
8185 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer_1a7cd7d55de2cd398660bc243c7229caf9">skip_bom</link>()
8186 &#32;&#32;&#32;&#32;{
8187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>()&#32;==&#32;0xEF)
8188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;if&#32;we&#32;completely&#32;parse&#32;the&#32;BOM</emphasis>
8190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>()&#32;==&#32;0xBB&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>()&#32;==&#32;0xBF;
8191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8192 
8193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;first&#32;character&#32;is&#32;not&#32;the&#32;beginning&#32;of&#32;the&#32;BOM;&#32;unget&#32;it&#32;to</emphasis>
8194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;process&#32;is&#32;later</emphasis>
8195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unget();
8196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
8197 &#32;&#32;&#32;&#32;}
8198 
8199 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer_1a449f3f3703dfbf8b757e12f002668604">skip_whitespace</link>()
8200 &#32;&#32;&#32;&#32;{
8201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>
8202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>();
8204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(current&#32;==&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>&#32;||&#32;current&#32;==&#32;<emphasis role="charliteral">&apos;\t&apos;</emphasis>&#32;||&#32;current&#32;==&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;||&#32;current&#32;==&#32;<emphasis role="charliteral">&apos;\r&apos;</emphasis>);
8206 &#32;&#32;&#32;&#32;}
8207 
8208 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer_1a986907dff5ceb4fa06aa8ff301822726">token_type</link>&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer_1a40320a8fef5f1f03b60c8b2f2f40af4d">scan</link>()
8209 &#32;&#32;&#32;&#32;{
8210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;initially,&#32;skip&#32;the&#32;BOM</emphasis>
8211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_main_8cpp_1a76777b356ab2a080225682528119c4fe">position</link>.chars_read_total&#32;==&#32;0&#32;&amp;&amp;&#32;!skip_bom())
8212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;BOM;&#32;must&#32;be&#32;0xEF&#32;0xBB&#32;0xBF&#32;if&#32;given&quot;</emphasis>;
8214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
8215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8216 
8217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;read&#32;next&#32;character&#32;and&#32;ignore&#32;whitespace</emphasis>
8218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;skip_whitespace();
8219 
8220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ignore&#32;comments</emphasis>
8221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(ignore_comments&#32;&amp;&amp;&#32;current&#32;==&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>)
8222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!scan_comment())
8224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
8226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8227 
8228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;skip&#32;following&#32;whitespace</emphasis>
8229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;skip_whitespace();
8230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8231 
8232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(current)
8233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;structural&#32;characters</emphasis>
8235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;[&apos;</emphasis>:
8236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::begin_array;
8237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;]&apos;</emphasis>:
8238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::end_array;
8239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;{&apos;</emphasis>:
8240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::begin_object;
8241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;}&apos;</emphasis>:
8242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::end_object;
8243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;:&apos;</emphasis>:
8244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::name_separator;
8245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;,&apos;</emphasis>:
8246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::value_separator;
8247 
8248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;literals</emphasis>
8249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;t&apos;</emphasis>:
8250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::array&lt;char_type,&#32;4&gt;&#32;true_literal&#32;=&#32;{{<emphasis role="keyword">static_cast&lt;</emphasis>char_type<emphasis role="keyword">&gt;</emphasis>(<emphasis role="charliteral">&apos;t&apos;</emphasis>),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>char_type<emphasis role="keyword">&gt;</emphasis>(<emphasis role="charliteral">&apos;r&apos;</emphasis>),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>char_type<emphasis role="keyword">&gt;</emphasis>(<emphasis role="charliteral">&apos;u&apos;</emphasis>),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>char_type<emphasis role="keyword">&gt;</emphasis>(<emphasis role="charliteral">&apos;e&apos;</emphasis>)}};
8252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;scan_literal(true_literal.data(),&#32;true_literal.size(),&#32;token_type::literal_true);
8253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;f&apos;</emphasis>:
8255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::array&lt;char_type,&#32;5&gt;&#32;false_literal&#32;=&#32;{{<emphasis role="keyword">static_cast&lt;</emphasis>char_type<emphasis role="keyword">&gt;</emphasis>(<emphasis role="charliteral">&apos;f&apos;</emphasis>),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>char_type<emphasis role="keyword">&gt;</emphasis>(<emphasis role="charliteral">&apos;a&apos;</emphasis>),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>char_type<emphasis role="keyword">&gt;</emphasis>(<emphasis role="charliteral">&apos;l&apos;</emphasis>),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>char_type<emphasis role="keyword">&gt;</emphasis>(<emphasis role="charliteral">&apos;s&apos;</emphasis>),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>char_type<emphasis role="keyword">&gt;</emphasis>(<emphasis role="charliteral">&apos;e&apos;</emphasis>)}};
8257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;scan_literal(false_literal.data(),&#32;false_literal.size(),&#32;token_type::literal_false);
8258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;n&apos;</emphasis>:
8260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::array&lt;char_type,&#32;4&gt;&#32;null_literal&#32;=&#32;{{<emphasis role="keyword">static_cast&lt;</emphasis>char_type<emphasis role="keyword">&gt;</emphasis>(<emphasis role="charliteral">&apos;n&apos;</emphasis>),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>char_type<emphasis role="keyword">&gt;</emphasis>(<emphasis role="charliteral">&apos;u&apos;</emphasis>),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>char_type<emphasis role="keyword">&gt;</emphasis>(<emphasis role="charliteral">&apos;l&apos;</emphasis>),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>char_type<emphasis role="keyword">&gt;</emphasis>(<emphasis role="charliteral">&apos;l&apos;</emphasis>)}};
8262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;scan_literal(null_literal.data(),&#32;null_literal.size(),&#32;token_type::literal_null);
8263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8264 
8265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;string</emphasis>
8266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>:
8267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;scan_string();
8268 
8269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;number</emphasis>
8270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>:
8271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>:
8272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;1&apos;</emphasis>:
8273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;2&apos;</emphasis>:
8274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;3&apos;</emphasis>:
8275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;4&apos;</emphasis>:
8276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;5&apos;</emphasis>:
8277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;6&apos;</emphasis>:
8278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;7&apos;</emphasis>:
8279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;8&apos;</emphasis>:
8280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>:
8281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;scan_number();
8282 
8283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;end&#32;of&#32;input&#32;(the&#32;null&#32;byte&#32;is&#32;needed&#32;when&#32;parsing&#32;from</emphasis>
8284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;string&#32;literals)</emphasis>
8285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>:
8286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;std::char_traits&lt;char_type&gt;::eof():
8287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::end_of_input;
8288 
8289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;error</emphasis>
8290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
8291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;literal&quot;</emphasis>;
8292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;token_type::parse_error;
8293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8294 &#32;&#32;&#32;&#32;}
8295 
8296 &#32;&#32;<emphasis role="keyword">private</emphasis>:
8298 &#32;&#32;&#32;&#32;InputAdapterType&#32;ia;
8299 
8301 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ignore_comments&#32;=&#32;<emphasis role="keyword">false</emphasis>;
8302 
8304 &#32;&#32;&#32;&#32;char_int_type&#32;current&#32;=&#32;std::char_traits&lt;char_type&gt;::eof();
8305 
8307 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;next_unget&#32;=&#32;<emphasis role="keyword">false</emphasis>;
8308 
8310 &#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1position__t">position_t</link>&#32;<link linkend="_main_8cpp_1a76777b356ab2a080225682528119c4fe">position</link>&#32;{};
8311 
8313 &#32;&#32;&#32;&#32;std::vector&lt;char_type&gt;&#32;token_string&#32;{};
8314 
8316 &#32;&#32;&#32;&#32;string_t&#32;token_buffer&#32;{};
8317 
8319 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;error_message&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
8320 
8321 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;number&#32;values</emphasis>
8322 &#32;&#32;&#32;&#32;number_integer_t&#32;value_integer&#32;=&#32;0;
8323 &#32;&#32;&#32;&#32;number_unsigned_t&#32;value_unsigned&#32;=&#32;0;
8324 &#32;&#32;&#32;&#32;number_float_t&#32;value_float&#32;=&#32;0;
8325 
8327 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;char_int_type&#32;decimal_point_char&#32;=&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>;
8328 };
8329 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
8330 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann</emphasis>
8331 
8332 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/macro_scope.hpp&gt;</emphasis>
8333 
8334 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/meta/is_sax.hpp&gt;</emphasis>
8335 
8336 
8337 <emphasis role="preprocessor">#include&#32;&lt;cstdint&gt;</emphasis>&#32;<emphasis role="comment">//&#32;size_t</emphasis>
8338 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>&#32;<emphasis role="comment">//&#32;declval</emphasis>
8339 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>&#32;<emphasis role="comment">//&#32;string</emphasis>
8340 
8341 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/meta/detected.hpp&gt;</emphasis>
8342 
8343 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/meta/type_traits.hpp&gt;</emphasis>
8344 
8345 
8346 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann">nlohmann</link>
8347 {
8348 <emphasis role="keyword">namespace&#32;</emphasis>detail
8349 {
8350 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
8351 <emphasis role="keyword">using&#32;</emphasis>null_function_t&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(std::declval&lt;T&amp;&gt;().null());
8352 
8353 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
8354 <emphasis role="keyword">using&#32;</emphasis>boolean_function_t&#32;=
8355 &#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(std::declval&lt;T&amp;&gt;().boolean(std::declval&lt;bool&gt;()));
8356 
8357 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;Integer&gt;
8358 <emphasis role="keyword">using&#32;</emphasis>number_integer_function_t&#32;=
8359 &#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(std::declval&lt;T&amp;&gt;().number_integer(std::declval&lt;Integer&gt;()));
8360 
8361 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;Un<emphasis role="keywordtype">signed</emphasis>&gt;
8362 <emphasis role="keyword">using&#32;</emphasis>number_unsigned_function_t&#32;=
8363 &#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(std::declval&lt;T&amp;&gt;().number_unsigned(std::declval&lt;Unsigned&gt;()));
8364 
8365 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;Float,&#32;<emphasis role="keyword">typename</emphasis>&#32;String&gt;
8366 <emphasis role="keyword">using&#32;</emphasis>number_float_function_t&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(std::declval&lt;T&amp;&gt;().number_float(
8367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::declval&lt;Float&gt;(),&#32;std::declval&lt;const&#32;String&amp;&gt;()));
8368 
8369 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;String&gt;
8370 <emphasis role="keyword">using&#32;</emphasis>string_function_t&#32;=
8371 &#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(std::declval&lt;T&amp;&gt;().string(std::declval&lt;String&amp;&gt;()));
8372 
8373 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;Binary&gt;
8374 <emphasis role="keyword">using&#32;</emphasis>binary_function_t&#32;=
8375 &#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(std::declval&lt;T&amp;&gt;().binary(std::declval&lt;Binary&amp;&gt;()));
8376 
8377 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
8378 <emphasis role="keyword">using&#32;</emphasis>start_object_function_t&#32;=
8379 &#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(std::declval&lt;T&amp;&gt;().start_object(std::declval&lt;std::size_t&gt;()));
8380 
8381 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;String&gt;
8382 <emphasis role="keyword">using&#32;</emphasis>key_function_t&#32;=
8383 &#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(std::declval&lt;T&amp;&gt;().key(std::declval&lt;String&amp;&gt;()));
8384 
8385 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
8386 <emphasis role="keyword">using&#32;</emphasis>end_object_function_t&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(std::declval&lt;T&amp;&gt;().end_object());
8387 
8388 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
8389 <emphasis role="keyword">using&#32;</emphasis>start_array_function_t&#32;=
8390 &#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(std::declval&lt;T&amp;&gt;().start_array(std::declval&lt;std::size_t&gt;()));
8391 
8392 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
8393 <emphasis role="keyword">using&#32;</emphasis>end_array_function_t&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(std::declval&lt;T&amp;&gt;().end_array());
8394 
8395 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;Exception&gt;
8396 <emphasis role="keyword">using&#32;</emphasis>parse_error_function_t&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(std::declval&lt;T&amp;&gt;().parse_error(
8397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::declval&lt;std::size_t&gt;(),&#32;std::declval&lt;const&#32;std::string&amp;&gt;(),
8398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::declval&lt;const&#32;Exception&amp;&gt;()));
8399 
8400 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;SAX,&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
8401 <emphasis role="keyword">struct&#32;</emphasis>is_sax
8402 {
8403 &#32;&#32;<emphasis role="keyword">private</emphasis>:
8404 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_basic_json&lt;BasicJsonType&gt;::value,
8405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;BasicJsonType&#32;must&#32;be&#32;of&#32;type&#32;basic_json&lt;...&gt;&quot;</emphasis>);
8406 
8407 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>number_integer_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_integer_t;
8408 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>number_unsigned_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_unsigned_t;
8409 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>number_float_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_float_t;
8410 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>string_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::string_t;
8411 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>binary_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::binary_t;
8412 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>exception_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::exception;
8413 
8414 &#32;&#32;<emphasis role="keyword">public</emphasis>:
8415 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classvalue">value</link>&#32;=
8416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_detected_exact&lt;bool,&#32;null_function_t,&#32;SAX&gt;::value&#32;&amp;&amp;
8417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_detected_exact&lt;bool,&#32;boolean_function_t,&#32;SAX&gt;::value&#32;&amp;&amp;
8418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_detected_exact&lt;bool,&#32;number_integer_function_t,&#32;SAX,&#32;number_integer_t&gt;::value&#32;&amp;&amp;
8419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_detected_exact&lt;bool,&#32;number_unsigned_function_t,&#32;SAX,&#32;number_unsigned_t&gt;::value&#32;&amp;&amp;
8420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_detected_exact&lt;bool,&#32;number_float_function_t,&#32;SAX,&#32;number_float_t,&#32;string_t&gt;::value&#32;&amp;&amp;
8421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_detected_exact&lt;bool,&#32;string_function_t,&#32;SAX,&#32;string_t&gt;::value&#32;&amp;&amp;
8422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_detected_exact&lt;bool,&#32;binary_function_t,&#32;SAX,&#32;binary_t&gt;::value&#32;&amp;&amp;
8423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_detected_exact&lt;bool,&#32;start_object_function_t,&#32;SAX&gt;::value&#32;&amp;&amp;
8424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_detected_exact&lt;bool,&#32;key_function_t,&#32;SAX,&#32;string_t&gt;::value&#32;&amp;&amp;
8425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_detected_exact&lt;bool,&#32;end_object_function_t,&#32;SAX&gt;::value&#32;&amp;&amp;
8426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_detected_exact&lt;bool,&#32;start_array_function_t,&#32;SAX&gt;::value&#32;&amp;&amp;
8427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_detected_exact&lt;bool,&#32;end_array_function_t,&#32;SAX&gt;::value&#32;&amp;&amp;
8428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_detected_exact&lt;bool,&#32;parse_error_function_t,&#32;SAX,&#32;exception_t&gt;::value;
8429 };
8430 
8431 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;SAX,&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
8432 <emphasis role="keyword">struct&#32;</emphasis>is_sax_static_asserts
8433 {
8434 &#32;&#32;<emphasis role="keyword">private</emphasis>:
8435 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_basic_json&lt;BasicJsonType&gt;::value,
8436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;BasicJsonType&#32;must&#32;be&#32;of&#32;type&#32;basic_json&lt;...&gt;&quot;</emphasis>);
8437 
8438 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>number_integer_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_integer_t;
8439 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>number_unsigned_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_unsigned_t;
8440 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>number_float_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_float_t;
8441 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>string_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::string_t;
8442 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>binary_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::binary_t;
8443 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>exception_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::exception;
8444 
8445 &#32;&#32;<emphasis role="keyword">public</emphasis>:
8446 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_detected_exact&lt;bool,&#32;null_function_t,&#32;SAX&gt;::value,
8447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Missing/invalid&#32;function:&#32;bool&#32;null()&quot;</emphasis>);
8448 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_detected_exact&lt;bool,&#32;boolean_function_t,&#32;SAX&gt;::value,
8449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Missing/invalid&#32;function:&#32;bool&#32;boolean(bool)&quot;</emphasis>);
8450 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_detected_exact&lt;bool,&#32;boolean_function_t,&#32;SAX&gt;::value,
8451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Missing/invalid&#32;function:&#32;bool&#32;boolean(bool)&quot;</emphasis>);
8452 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(
8453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a7542b4dbac07817fd4849ecfa4619def">is_detected_exact</link>&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>,&#32;number_integer_function_t,&#32;SAX,
8454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;number_integer_t&gt;<link linkend="_classvalue">::value</link>,
8455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Missing/invalid&#32;function:&#32;bool&#32;number_integer(number_integer_t)&quot;</emphasis>);
8456 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(
8457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a7542b4dbac07817fd4849ecfa4619def">is_detected_exact</link>&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>,&#32;number_unsigned_function_t,&#32;SAX,
8458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;number_unsigned_t&gt;<link linkend="_classvalue">::value</link>,
8459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Missing/invalid&#32;function:&#32;bool&#32;number_unsigned(number_unsigned_t)&quot;</emphasis>);
8460 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<link linkend="_namespacenlohmann_1_1detail_1a7542b4dbac07817fd4849ecfa4619def">is_detected_exact</link>&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>,&#32;number_float_function_t,&#32;SAX,
8461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;number_float_t,&#32;string_t&gt;<link linkend="_classvalue">::value</link>,
8462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Missing/invalid&#32;function:&#32;bool&#32;number_float(number_float_t,&#32;const&#32;string_t&amp;)&quot;</emphasis>);
8463 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(
8464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_detected_exact&lt;bool,&#32;string_function_t,&#32;SAX,&#32;string_t&gt;::value,
8465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Missing/invalid&#32;function:&#32;bool&#32;string(string_t&amp;)&quot;</emphasis>);
8466 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(
8467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_detected_exact&lt;bool,&#32;binary_function_t,&#32;SAX,&#32;binary_t&gt;::value,
8468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Missing/invalid&#32;function:&#32;bool&#32;binary(binary_t&amp;)&quot;</emphasis>);
8469 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_detected_exact&lt;bool,&#32;start_object_function_t,&#32;SAX&gt;::value,
8470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Missing/invalid&#32;function:&#32;bool&#32;start_object(std::size_t)&quot;</emphasis>);
8471 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_detected_exact&lt;bool,&#32;key_function_t,&#32;SAX,&#32;string_t&gt;::value,
8472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Missing/invalid&#32;function:&#32;bool&#32;key(string_t&amp;)&quot;</emphasis>);
8473 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_detected_exact&lt;bool,&#32;end_object_function_t,&#32;SAX&gt;::value,
8474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Missing/invalid&#32;function:&#32;bool&#32;end_object()&quot;</emphasis>);
8475 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_detected_exact&lt;bool,&#32;start_array_function_t,&#32;SAX&gt;::value,
8476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Missing/invalid&#32;function:&#32;bool&#32;start_array(std::size_t)&quot;</emphasis>);
8477 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_detected_exact&lt;bool,&#32;end_array_function_t,&#32;SAX&gt;::value,
8478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Missing/invalid&#32;function:&#32;bool&#32;end_array()&quot;</emphasis>);
8479 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(
8480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_detected_exact&lt;bool,&#32;parse_error_function_t,&#32;SAX,&#32;exception_t&gt;::value,
8481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Missing/invalid&#32;function:&#32;bool&#32;parse_error(std::size_t,&#32;const&#32;&quot;</emphasis>
8482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;std::string&amp;,&#32;const&#32;exception&amp;)&quot;</emphasis>);
8483 };
8484 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
8485 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann</emphasis>
8486 
8487 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/meta/type_traits.hpp&gt;</emphasis>
8488 
8489 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/string_concat.hpp&gt;</emphasis>
8490 
8491 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/value_t.hpp&gt;</emphasis>
8492 
8493 
8494 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann">nlohmann</link>
8495 {
8496 <emphasis role="keyword">namespace&#32;</emphasis>detail
8497 {
8498 
8500 <emphasis role="keyword">enum&#32;class</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9ac">cbor_tag_handler_t</link>
8501 {
8502 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9acacb5e100e5a9a3e7f6d1fd97512215282">error</link>,&#32;&#32;&#32;
8503 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9aca567bc1d268f135496de3d5b946b691f3">ignore</link>,&#32;&#32;
8504 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9aca8cd892b7b97ef9489ae4479d3f4ef0fc">store</link>&#32;&#32;&#32;&#32;
8505 };
8506 
8514 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;little_endianness(<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abb50fc1ead3a02a46fb52daa2045f95c">num</link>&#32;=&#32;1)&#32;noexcept
8515 {
8516 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abb50fc1ead3a02a46fb52daa2045f95c">num</link>)&#32;==&#32;1;
8517 }
8518 
8519 
8521 <emphasis role="comment">//&#32;binary&#32;reader&#32;//</emphasis>
8523 
8527 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;InputAdapterType,&#32;<emphasis role="keyword">typename</emphasis>&#32;SAX&#32;=&#32;json_sax_dom_parser&lt;BasicJsonType&gt;&gt;
8528 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1binary__reader">binary_reader</link>
8529 {
8530 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>number_integer_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_integer_t;
8531 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>number_unsigned_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_unsigned_t;
8532 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>number_float_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_float_t;
8533 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>string_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::string_t;
8534 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>binary_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::binary_t;
8535 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>json_sax_t&#32;=&#32;SAX;
8536 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>char_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;InputAdapterType::char_type;
8537 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>char_int_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::char_traits&lt;char_type&gt;::int_type;
8538 
8539 &#32;&#32;<emphasis role="keyword">public</emphasis>:
8545 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1binary__reader_1a1d20d84097d2e2e0a6cf0502b0c911aa">binary_reader</link>(InputAdapterType&amp;&amp;&#32;adapter,&#32;<emphasis role="keyword">const</emphasis>&#32;input_format_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>&#32;=&#32;input_format_t::json)&#32;noexcept&#32;:&#32;ia(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(adapter)),&#32;input_format(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>)
8546 &#32;&#32;&#32;&#32;{
8547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)detail::is_sax_static_asserts&lt;SAX,&#32;BasicJsonType&gt;&#32;{};
8548 &#32;&#32;&#32;&#32;}
8549 
8550 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;make&#32;class&#32;move-only</emphasis>
8551 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1binary__reader_1ab29d56b1e980a7b9a3383cf1ce862d1b">binary_reader</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1binary__reader">binary_reader</link>&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
8552 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1binary__reader_1acca2c4076df85f27dc1c904475e05c26">binary_reader</link>(<link linkend="_classnlohmann_1_1detail_1_1binary__reader">binary_reader</link>&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;&#32;<emphasis role="comment">//&#32;NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)</emphasis>
8553 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1binary__reader">binary_reader</link>&amp;&#32;<link linkend="_classnlohmann_1_1detail_1_1binary__reader_1a13fd2840d1b037f2fd0958a603f076f0">operator=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1binary__reader">binary_reader</link>&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
8554 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1binary__reader">binary_reader</link>&amp;&#32;<link linkend="_classnlohmann_1_1detail_1_1binary__reader_1a7a18eca2aae5c5de1d706985803e0015">operator=</link>(<link linkend="_classnlohmann_1_1detail_1_1binary__reader">binary_reader</link>&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;&#32;<emphasis role="comment">//&#32;NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)</emphasis>
8555 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1binary__reader_1a359031cba136452d9030ed9ab4517b74">~binary_reader</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
8556 
8565 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a5338981b5ad9027c9e54b1c5597f4344">JSON_HEDLEY_NON_NULL</link>(3)
8566 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>&#32;<link linkend="_classnlohmann_1_1detail_1_1binary__reader_1ab4afd9ee276bbb15a0f898061aad94dd">sax_parse</link>(const&#32;input_format_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>,
8567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;json_sax_t*&#32;sax_,
8568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa2133fd717402a7966ee88d06f9e0b792">strict</link>&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,
8569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;<link linkend="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9ac">cbor_tag_handler_t</link>&#32;tag_handler&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9ac">cbor_tag_handler_t</link>::<link linkend="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9acacb5e100e5a9a3e7f6d1fd97512215282">error</link>)
8570 &#32;&#32;&#32;&#32;{
8571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sax&#32;=&#32;sax_;
8572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
8573 
8574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>)
8575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;input_format_t::bson:
8577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;parse_bson_internal();
8578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
8579 
8580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;input_format_t::cbor:
8581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;parse_cbor_internal(<emphasis role="keyword">true</emphasis>,&#32;tag_handler);
8582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
8583 
8584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;input_format_t::msgpack:
8585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;parse_msgpack_internal();
8586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
8587 
8588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;input_format_t::ubjson:
8589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;input_format_t::bjdata:
8590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;parse_ubjson_internal();
8591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
8592 
8593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;input_format_t::json:&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
8594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
8595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(<emphasis role="keyword">false</emphasis>);&#32;<emphasis role="comment">//&#32;NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)&#32;LCOV_EXCL_LINE</emphasis>
8596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8597 
8598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;strict&#32;mode:&#32;next&#32;byte&#32;must&#32;be&#32;EOF</emphasis>
8599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;&amp;&amp;&#32;<link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa2133fd717402a7966ee88d06f9e0b792">strict</link>)
8600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(input_format&#32;==&#32;input_format_t::ubjson&#32;||&#32;input_format&#32;==&#32;input_format_t::bjdata)
8602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_ignore_noop();
8604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
8606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>();
8608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8609 
8610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(current&#32;!=&#32;std::char_traits&lt;char_type&gt;::eof()))
8611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;parse_error(chars_read,&#32;get_token_string(),&#32;<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">parse_error::create</link>(110,&#32;chars_read,
8613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exception_message(input_format,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;expected&#32;end&#32;of&#32;input;&#32;last&#32;byte:&#32;0x&quot;</emphasis>,&#32;get_token_string()),&#32;<emphasis role="stringliteral">&quot;value&quot;</emphasis>),&#32;<emphasis role="keyword">nullptr</emphasis>));
8614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8616 
8617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
8618 &#32;&#32;&#32;&#32;}
8619 
8620 &#32;&#32;<emphasis role="keyword">private</emphasis>:
8622 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;BSON&#32;//</emphasis>
8624 
8629 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;parse_bson_internal()
8630 &#32;&#32;&#32;&#32;{
8631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int32_t&#32;document_size{};
8632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_number&lt;std::int32_t,&#32;true&gt;(input_format_t::bson,&#32;document_size);
8633 
8634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!sax-&gt;start_object(<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(-1))))
8635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
8637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8638 
8639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!parse_bson_element_list(<emphasis role="comment">/*is_array*/</emphasis><emphasis role="keyword">false</emphasis>)))
8640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
8642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8643 
8644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;end_object();
8645 &#32;&#32;&#32;&#32;}
8646 
8654 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;get_bson_cstr(string_t&amp;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>)
8655 &#32;&#32;&#32;&#32;{
8656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;out&#32;=&#32;std::back_inserter(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
8657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)
8658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>();
8660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!unexpect_eof(input_format_t::bson,&#32;<emphasis role="stringliteral">&quot;cstring&quot;</emphasis>)))
8661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
8663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(current&#32;==&#32;0x00)
8665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
8667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*out++&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;string_t::value_type<emphasis role="keyword">&gt;</emphasis>(current);
8669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8670 &#32;&#32;&#32;&#32;}
8671 
8683 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;NumberType&gt;
8684 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;get_bson_string(<emphasis role="keyword">const</emphasis>&#32;NumberType&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;string_t&amp;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>)
8685 &#32;&#32;&#32;&#32;{
8686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;&lt;&#32;1))
8687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;last_token&#32;=&#32;get_token_string();
8689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;parse_error(chars_read,&#32;last_token,&#32;<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">parse_error::create</link>(112,&#32;chars_read,
8690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exception_message(input_format_t::bson,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;string&#32;length&#32;must&#32;be&#32;at&#32;least&#32;1,&#32;is&#32;&quot;</emphasis>,&#32;std::to_string(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)),&#32;<emphasis role="stringliteral">&quot;string&quot;</emphasis>),&#32;<emphasis role="keyword">nullptr</emphasis>));
8691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8692 
8693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_string(input_format_t::bson,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;-&#32;<emphasis role="keyword">static_cast&lt;</emphasis>NumberType<emphasis role="keyword">&gt;</emphasis>(1),&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>)&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>()&#32;!=&#32;std::char_traits&lt;char_type&gt;::eof();
8694 &#32;&#32;&#32;&#32;}
8695 
8705 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;NumberType&gt;
8706 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;get_bson_binary(<emphasis role="keyword">const</emphasis>&#32;NumberType&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;binary_t&amp;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>)
8707 &#32;&#32;&#32;&#32;{
8708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;&lt;&#32;0))
8709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;last_token&#32;=&#32;get_token_string();
8711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;parse_error(chars_read,&#32;last_token,&#32;<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">parse_error::create</link>(112,&#32;chars_read,
8712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exception_message(input_format_t::bson,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;byte&#32;array&#32;length&#32;cannot&#32;be&#32;negative,&#32;is&#32;&quot;</emphasis>,&#32;std::to_string(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)),&#32;<emphasis role="stringliteral">&quot;binary&quot;</emphasis>),&#32;<emphasis role="keyword">nullptr</emphasis>));
8713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8714 
8715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;All&#32;BSON&#32;binary&#32;values&#32;have&#32;a&#32;subtype</emphasis>
8716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint8_t&#32;subtype{};
8717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_number&lt;std::uint8_t&gt;(input_format_t::bson,&#32;subtype);
8718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.set_subtype(subtype);
8719 
8720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_binary(input_format_t::bson,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
8721 &#32;&#32;&#32;&#32;}
8722 
8733 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;parse_bson_element_internal(<emphasis role="keyword">const</emphasis>&#32;char_int_type&#32;element_type,
8734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::size_t&#32;element_type_parse_position)
8735 &#32;&#32;&#32;&#32;{
8736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(element_type)
8737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x01:&#32;<emphasis role="comment">//&#32;double</emphasis>
8739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;number{};
8741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number&lt;double,&#32;true&gt;(input_format_t::bson,&#32;number)&#32;&amp;&amp;&#32;sax-&gt;number_float(<emphasis role="keyword">static_cast&lt;</emphasis>number_float_t<emphasis role="keyword">&gt;</emphasis>(number),&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
8742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8743 
8744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x02:&#32;<emphasis role="comment">//&#32;string</emphasis>
8745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int32_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>{};
8747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;string_t&#32;<link linkend="_classvalue">value</link>;
8748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number&lt;std::int32_t,&#32;true&gt;(input_format_t::bson,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&amp;&amp;&#32;get_bson_string(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;<link linkend="_classvalue">value</link>)&#32;&amp;&amp;&#32;sax-&gt;string(<link linkend="_classvalue">value</link>);
8749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8750 
8751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x03:&#32;<emphasis role="comment">//&#32;object</emphasis>
8752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;parse_bson_internal();
8754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8755 
8756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x04:&#32;<emphasis role="comment">//&#32;array</emphasis>
8757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;parse_bson_array();
8759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8760 
8761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x05:&#32;<emphasis role="comment">//&#32;binary</emphasis>
8762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int32_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>{};
8764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;binary_t&#32;<link linkend="_classvalue">value</link>;
8765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number&lt;std::int32_t,&#32;true&gt;(input_format_t::bson,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&amp;&amp;&#32;get_bson_binary(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;<link linkend="_classvalue">value</link>)&#32;&amp;&amp;&#32;sax-&gt;binary(<link linkend="_classvalue">value</link>);
8766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8767 
8768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x08:&#32;<emphasis role="comment">//&#32;boolean</emphasis>
8769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;boolean(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>()&#32;!=&#32;0);
8771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8772 
8773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x0A:&#32;<emphasis role="comment">//&#32;null</emphasis>
8774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;null();
8776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8777 
8778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x10:&#32;<emphasis role="comment">//&#32;int32</emphasis>
8779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int32_t&#32;<link linkend="_classvalue">value</link>{};
8781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number&lt;std::int32_t,&#32;true&gt;(input_format_t::bson,&#32;<link linkend="_classvalue">value</link>)&#32;&amp;&amp;&#32;sax-&gt;number_integer(<link linkend="_classvalue">value</link>);
8782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8783 
8784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x12:&#32;<emphasis role="comment">//&#32;int64</emphasis>
8785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int64_t&#32;<link linkend="_classvalue">value</link>{};
8787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number&lt;std::int64_t,&#32;true&gt;(input_format_t::bson,&#32;<link linkend="_classvalue">value</link>)&#32;&amp;&amp;&#32;sax-&gt;number_integer(<link linkend="_classvalue">value</link>);
8788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8789 
8790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="comment">//&#32;anything&#32;else&#32;not&#32;supported&#32;(yet)</emphasis>
8791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::array&lt;char,&#32;3&gt;&#32;cr{{}};
8793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis><emphasis role="keyword">&gt;</emphasis>((std::snprintf)(cr.data(),&#32;cr.size(),&#32;<emphasis role="stringliteral">&quot;%.2hhX&quot;</emphasis>,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(element_type)));&#32;<emphasis role="comment">//&#32;NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)</emphasis>
8794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;cr_str{cr.data()};
8795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;parse_error(element_type_parse_position,&#32;cr_str,
8796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">parse_error::create</link>(114,&#32;element_type_parse_position,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;Unsupported&#32;BSON&#32;record&#32;type&#32;0x&quot;</emphasis>,&#32;cr_str),&#32;<emphasis role="keyword">nullptr</emphasis>));
8797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8799 &#32;&#32;&#32;&#32;}
8800 
8813 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;parse_bson_element_list(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a70231801eb17e45cd17c7eb332b4d36f">is_array</link>)
8814 &#32;&#32;&#32;&#32;{
8815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;string_t&#32;key;
8816 
8817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;element_type&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>())
8818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!unexpect_eof(input_format_t::bson,&#32;<emphasis role="stringliteral">&quot;element&#32;list&quot;</emphasis>)))
8820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
8822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8823 
8824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::size_t&#32;element_type_parse_position&#32;=&#32;chars_read;
8825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!get_bson_cstr(key)))
8826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
8828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8829 
8830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_forward__declarations_8h_1a70231801eb17e45cd17c7eb332b4d36f">is_array</link>&#32;&amp;&amp;&#32;!sax-&gt;key(key))
8831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
8833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8834 
8835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!parse_bson_element_internal(element_type,&#32;element_type_parse_position)))
8836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
8838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8839 
8840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;get_bson_cstr&#32;only&#32;appends</emphasis>
8841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key.clear();
8842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8843 
8844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
8845 &#32;&#32;&#32;&#32;}
8846 
8851 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;parse_bson_array()
8852 &#32;&#32;&#32;&#32;{
8853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int32_t&#32;document_size{};
8854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_number&lt;std::int32_t,&#32;true&gt;(input_format_t::bson,&#32;document_size);
8855 
8856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!sax-&gt;start_array(<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(-1))))
8857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
8859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8860 
8861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!parse_bson_element_list(<emphasis role="comment">/*is_array*/</emphasis><emphasis role="keyword">true</emphasis>)))
8862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
8864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8865 
8866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;end_array();
8867 &#32;&#32;&#32;&#32;}
8868 
8870 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;CBOR&#32;//</emphasis>
8872 
8881 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;parse_cbor_internal(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;get_char,
8882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9ac">cbor_tag_handler_t</link>&#32;tag_handler)
8883 &#32;&#32;&#32;&#32;{
8884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(get_char&#32;?&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>()&#32;:&#32;current)
8885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;EOF</emphasis>
8887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;std::char_traits&lt;char_type&gt;::eof():
8888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;unexpect_eof(input_format_t::cbor,&#32;<emphasis role="stringliteral">&quot;value&quot;</emphasis>);
8889 
8890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Integer&#32;0x00..0x17&#32;(0..23)</emphasis>
8891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x00:
8892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x01:
8893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x02:
8894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x03:
8895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x04:
8896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x05:
8897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x06:
8898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x07:
8899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x08:
8900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x09:
8901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x0A:
8902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x0B:
8903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x0C:
8904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x0D:
8905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x0E:
8906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x0F:
8907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x10:
8908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x11:
8909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x12:
8910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x13:
8911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x14:
8912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x15:
8913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x16:
8914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x17:
8915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;number_unsigned(<emphasis role="keyword">static_cast&lt;</emphasis>number_unsigned_t<emphasis role="keyword">&gt;</emphasis>(current));
8916 
8917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x18:&#32;<emphasis role="comment">//&#32;Unsigned&#32;integer&#32;(one-byte&#32;uint8_t&#32;follows)</emphasis>
8918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint8_t&#32;number{};
8920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::cbor,&#32;number)&#32;&amp;&amp;&#32;sax-&gt;number_unsigned(number);
8921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8922 
8923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x19:&#32;<emphasis role="comment">//&#32;Unsigned&#32;integer&#32;(two-byte&#32;uint16_t&#32;follows)</emphasis>
8924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint16_t&#32;number{};
8926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::cbor,&#32;number)&#32;&amp;&amp;&#32;sax-&gt;number_unsigned(number);
8927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8928 
8929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x1A:&#32;<emphasis role="comment">//&#32;Unsigned&#32;integer&#32;(four-byte&#32;uint32_t&#32;follows)</emphasis>
8930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint32_t&#32;number{};
8932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::cbor,&#32;number)&#32;&amp;&amp;&#32;sax-&gt;number_unsigned(number);
8933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8934 
8935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x1B:&#32;<emphasis role="comment">//&#32;Unsigned&#32;integer&#32;(eight-byte&#32;uint64_t&#32;follows)</emphasis>
8936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint64_t&#32;number{};
8938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::cbor,&#32;number)&#32;&amp;&amp;&#32;sax-&gt;number_unsigned(number);
8939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8940 
8941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Negative&#32;integer&#32;-1-0x00..-1-0x17&#32;(-1..-24)</emphasis>
8942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x20:
8943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x21:
8944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x22:
8945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x23:
8946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x24:
8947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x25:
8948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x26:
8949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x27:
8950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x28:
8951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x29:
8952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x2A:
8953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x2B:
8954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x2C:
8955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x2D:
8956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x2E:
8957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x2F:
8958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x30:
8959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x31:
8960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x32:
8961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x33:
8962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x34:
8963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x35:
8964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x36:
8965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x37:
8966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;number_integer(<emphasis role="keyword">static_cast&lt;</emphasis>std::int8_t<emphasis role="keyword">&gt;</emphasis>(0x20&#32;-&#32;1&#32;-&#32;current));
8967 
8968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x38:&#32;<emphasis role="comment">//&#32;Negative&#32;integer&#32;(one-byte&#32;uint8_t&#32;follows)</emphasis>
8969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint8_t&#32;number{};
8971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::cbor,&#32;number)&#32;&amp;&amp;&#32;sax-&gt;number_integer(<emphasis role="keyword">static_cast&lt;</emphasis>number_integer_t<emphasis role="keyword">&gt;</emphasis>(-1)&#32;-&#32;number);
8972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8973 
8974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x39:&#32;<emphasis role="comment">//&#32;Negative&#32;integer&#32;-1-n&#32;(two-byte&#32;uint16_t&#32;follows)</emphasis>
8975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint16_t&#32;number{};
8977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::cbor,&#32;number)&#32;&amp;&amp;&#32;sax-&gt;number_integer(<emphasis role="keyword">static_cast&lt;</emphasis>number_integer_t<emphasis role="keyword">&gt;</emphasis>(-1)&#32;-&#32;number);
8978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8979 
8980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x3A:&#32;<emphasis role="comment">//&#32;Negative&#32;integer&#32;-1-n&#32;(four-byte&#32;uint32_t&#32;follows)</emphasis>
8981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint32_t&#32;number{};
8983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::cbor,&#32;number)&#32;&amp;&amp;&#32;sax-&gt;number_integer(<emphasis role="keyword">static_cast&lt;</emphasis>number_integer_t<emphasis role="keyword">&gt;</emphasis>(-1)&#32;-&#32;number);
8984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8985 
8986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x3B:&#32;<emphasis role="comment">//&#32;Negative&#32;integer&#32;-1-n&#32;(eight-byte&#32;uint64_t&#32;follows)</emphasis>
8987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint64_t&#32;number{};
8989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::cbor,&#32;number)&#32;&amp;&amp;&#32;sax-&gt;number_integer(<emphasis role="keyword">static_cast&lt;</emphasis>number_integer_t<emphasis role="keyword">&gt;</emphasis>(-1)
8990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;<emphasis role="keyword">static_cast&lt;</emphasis>number_integer_t<emphasis role="keyword">&gt;</emphasis>(number));
8991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8992 
8993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Binary&#32;data&#32;(0x00..0x17&#32;bytes&#32;follow)</emphasis>
8994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x40:
8995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x41:
8996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x42:
8997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x43:
8998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x44:
8999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x45:
9000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x46:
9001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x47:
9002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x48:
9003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x49:
9004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x4A:
9005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x4B:
9006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x4C:
9007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x4D:
9008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x4E:
9009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x4F:
9010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x50:
9011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x51:
9012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x52:
9013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x53:
9014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x54:
9015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x55:
9016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x56:
9017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x57:
9018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x58:&#32;<emphasis role="comment">//&#32;Binary&#32;data&#32;(one-byte&#32;uint8_t&#32;for&#32;n&#32;follows)</emphasis>
9019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x59:&#32;<emphasis role="comment">//&#32;Binary&#32;data&#32;(two-byte&#32;uint16_t&#32;for&#32;n&#32;follow)</emphasis>
9020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x5A:&#32;<emphasis role="comment">//&#32;Binary&#32;data&#32;(four-byte&#32;uint32_t&#32;for&#32;n&#32;follow)</emphasis>
9021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x5B:&#32;<emphasis role="comment">//&#32;Binary&#32;data&#32;(eight-byte&#32;uint64_t&#32;for&#32;n&#32;follow)</emphasis>
9022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x5F:&#32;<emphasis role="comment">//&#32;Binary&#32;data&#32;(indefinite&#32;length)</emphasis>
9023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;binary_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>;
9025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_cbor_binary(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>)&#32;&amp;&amp;&#32;sax-&gt;binary(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>);
9026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9027 
9028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;UTF-8&#32;string&#32;(0x00..0x17&#32;bytes&#32;follow)</emphasis>
9029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x60:
9030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x61:
9031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x62:
9032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x63:
9033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x64:
9034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x65:
9035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x66:
9036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x67:
9037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x68:
9038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x69:
9039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x6A:
9040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x6B:
9041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x6C:
9042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x6D:
9043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x6E:
9044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x6F:
9045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x70:
9046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x71:
9047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x72:
9048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x73:
9049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x74:
9050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x75:
9051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x76:
9052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x77:
9053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x78:&#32;<emphasis role="comment">//&#32;UTF-8&#32;string&#32;(one-byte&#32;uint8_t&#32;for&#32;n&#32;follows)</emphasis>
9054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x79:&#32;<emphasis role="comment">//&#32;UTF-8&#32;string&#32;(two-byte&#32;uint16_t&#32;for&#32;n&#32;follow)</emphasis>
9055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x7A:&#32;<emphasis role="comment">//&#32;UTF-8&#32;string&#32;(four-byte&#32;uint32_t&#32;for&#32;n&#32;follow)</emphasis>
9056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x7B:&#32;<emphasis role="comment">//&#32;UTF-8&#32;string&#32;(eight-byte&#32;uint64_t&#32;for&#32;n&#32;follow)</emphasis>
9057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x7F:&#32;<emphasis role="comment">//&#32;UTF-8&#32;string&#32;(indefinite&#32;length)</emphasis>
9058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;string_t&#32;s;
9060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_cbor_string(s)&#32;&amp;&amp;&#32;sax-&gt;string(s);
9061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9062 
9063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;array&#32;(0x00..0x17&#32;data&#32;items&#32;follow)</emphasis>
9064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x80:
9065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x81:
9066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x82:
9067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x83:
9068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x84:
9069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x85:
9070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x86:
9071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x87:
9072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x88:
9073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x89:
9074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x8A:
9075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x8B:
9076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x8C:
9077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x8D:
9078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x8E:
9079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x8F:
9080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x90:
9081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x91:
9082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x92:
9083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x93:
9084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x94:
9085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x95:
9086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x96:
9087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x97:
9088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_cbor_array(<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(current)&#32;&amp;&#32;0x1Fu),&#32;tag_handler);
9089 
9090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x98:&#32;<emphasis role="comment">//&#32;array&#32;(one-byte&#32;uint8_t&#32;for&#32;n&#32;follows)</emphasis>
9091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint8_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>{};
9093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::cbor,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&amp;&amp;&#32;get_cbor_array(<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>),&#32;tag_handler);
9094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9095 
9096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x99:&#32;<emphasis role="comment">//&#32;array&#32;(two-byte&#32;uint16_t&#32;for&#32;n&#32;follow)</emphasis>
9097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint16_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>{};
9099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::cbor,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&amp;&amp;&#32;get_cbor_array(<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>),&#32;tag_handler);
9100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9101 
9102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x9A:&#32;<emphasis role="comment">//&#32;array&#32;(four-byte&#32;uint32_t&#32;for&#32;n&#32;follow)</emphasis>
9103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint32_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>{};
9105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::cbor,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&amp;&amp;&#32;get_cbor_array(<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>),&#32;tag_handler);
9106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9107 
9108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x9B:&#32;<emphasis role="comment">//&#32;array&#32;(eight-byte&#32;uint64_t&#32;for&#32;n&#32;follow)</emphasis>
9109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint64_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>{};
9111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::cbor,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&amp;&amp;&#32;get_cbor_array(detail::conditional_static_cast&lt;std::size_t&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>),&#32;tag_handler);
9112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9113 
9114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x9F:&#32;<emphasis role="comment">//&#32;array&#32;(indefinite&#32;length)</emphasis>
9115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_cbor_array(<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(-1),&#32;tag_handler);
9116 
9117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;map&#32;(0x00..0x17&#32;pairs&#32;of&#32;data&#32;items&#32;follow)</emphasis>
9118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xA0:
9119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xA1:
9120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xA2:
9121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xA3:
9122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xA4:
9123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xA5:
9124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xA6:
9125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xA7:
9126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xA8:
9127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xA9:
9128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xAA:
9129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xAB:
9130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xAC:
9131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xAD:
9132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xAE:
9133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xAF:
9134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xB0:
9135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xB1:
9136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xB2:
9137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xB3:
9138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xB4:
9139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xB5:
9140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xB6:
9141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xB7:
9142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_cbor_object(<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(current)&#32;&amp;&#32;0x1Fu),&#32;tag_handler);
9143 
9144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xB8:&#32;<emphasis role="comment">//&#32;map&#32;(one-byte&#32;uint8_t&#32;for&#32;n&#32;follows)</emphasis>
9145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint8_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>{};
9147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::cbor,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&amp;&amp;&#32;get_cbor_object(<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>),&#32;tag_handler);
9148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9149 
9150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xB9:&#32;<emphasis role="comment">//&#32;map&#32;(two-byte&#32;uint16_t&#32;for&#32;n&#32;follow)</emphasis>
9151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint16_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>{};
9153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::cbor,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&amp;&amp;&#32;get_cbor_object(<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>),&#32;tag_handler);
9154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9155 
9156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xBA:&#32;<emphasis role="comment">//&#32;map&#32;(four-byte&#32;uint32_t&#32;for&#32;n&#32;follow)</emphasis>
9157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint32_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>{};
9159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::cbor,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&amp;&amp;&#32;get_cbor_object(<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>),&#32;tag_handler);
9160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9161 
9162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xBB:&#32;<emphasis role="comment">//&#32;map&#32;(eight-byte&#32;uint64_t&#32;for&#32;n&#32;follow)</emphasis>
9163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint64_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>{};
9165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::cbor,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&amp;&amp;&#32;get_cbor_object(detail::conditional_static_cast&lt;std::size_t&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>),&#32;tag_handler);
9166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9167 
9168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xBF:&#32;<emphasis role="comment">//&#32;map&#32;(indefinite&#32;length)</emphasis>
9169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_cbor_object(<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(-1),&#32;tag_handler);
9170 
9171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xC6:&#32;<emphasis role="comment">//&#32;tagged&#32;item</emphasis>
9172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xC7:
9173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xC8:
9174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xC9:
9175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xCA:
9176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xCB:
9177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xCC:
9178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xCD:
9179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xCE:
9180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xCF:
9181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xD0:
9182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xD1:
9183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xD2:
9184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xD3:
9185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xD4:
9186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xD8:&#32;<emphasis role="comment">//&#32;tagged&#32;item&#32;(1&#32;bytes&#32;follow)</emphasis>
9187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xD9:&#32;<emphasis role="comment">//&#32;tagged&#32;item&#32;(2&#32;bytes&#32;follow)</emphasis>
9188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xDA:&#32;<emphasis role="comment">//&#32;tagged&#32;item&#32;(4&#32;bytes&#32;follow)</emphasis>
9189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xDB:&#32;<emphasis role="comment">//&#32;tagged&#32;item&#32;(8&#32;bytes&#32;follow)</emphasis>
9190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(tag_handler)
9192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9acacb5e100e5a9a3e7f6d1fd97512215282">cbor_tag_handler_t::error</link>:
9194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;last_token&#32;=&#32;get_token_string();
9196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;parse_error(chars_read,&#32;last_token,&#32;<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">parse_error::create</link>(112,&#32;chars_read,
9197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exception_message(input_format_t::cbor,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;invalid&#32;byte:&#32;0x&quot;</emphasis>,&#32;last_token),&#32;<emphasis role="stringliteral">&quot;value&quot;</emphasis>),&#32;<emphasis role="keyword">nullptr</emphasis>));
9198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9199 
9200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9aca567bc1d268f135496de3d5b946b691f3">cbor_tag_handler_t::ignore</link>:
9201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ignore&#32;binary&#32;subtype</emphasis>
9203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(current)
9204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xD8:
9206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint8_t&#32;subtype_to_ignore{};
9208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_number(input_format_t::cbor,&#32;subtype_to_ignore);
9209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
9210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xD9:
9212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint16_t&#32;subtype_to_ignore{};
9214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_number(input_format_t::cbor,&#32;subtype_to_ignore);
9215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
9216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xDA:
9218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint32_t&#32;subtype_to_ignore{};
9220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_number(input_format_t::cbor,&#32;subtype_to_ignore);
9221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
9222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xDB:
9224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint64_t&#32;subtype_to_ignore{};
9226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_number(input_format_t::cbor,&#32;subtype_to_ignore);
9227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
9228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
9230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
9231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;parse_cbor_internal(<emphasis role="keyword">true</emphasis>,&#32;tag_handler);
9233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9234 
9235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9aca8cd892b7b97ef9489ae4479d3f4ef0fc">cbor_tag_handler_t::store</link>:
9236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;binary_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>;
9238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;use&#32;binary&#32;subtype&#32;and&#32;store&#32;in&#32;binary&#32;container</emphasis>
9239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(current)
9240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xD8:
9242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint8_t&#32;subtype{};
9244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_number(input_format_t::cbor,&#32;subtype);
9245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>.set_subtype(detail::conditional_static_cast&lt;typename&#32;binary_t::subtype_type&gt;(subtype));
9246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
9247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xD9:
9249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint16_t&#32;subtype{};
9251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_number(input_format_t::cbor,&#32;subtype);
9252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>.set_subtype(detail::conditional_static_cast&lt;typename&#32;binary_t::subtype_type&gt;(subtype));
9253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
9254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xDA:
9256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint32_t&#32;subtype{};
9258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_number(input_format_t::cbor,&#32;subtype);
9259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>.set_subtype(detail::conditional_static_cast&lt;typename&#32;binary_t::subtype_type&gt;(subtype));
9260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
9261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xDB:
9263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint64_t&#32;subtype{};
9265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_number(input_format_t::cbor,&#32;subtype);
9266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>.set_subtype(detail::conditional_static_cast&lt;typename&#32;binary_t::subtype_type&gt;(subtype));
9267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
9268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
9270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;parse_cbor_internal(<emphasis role="keyword">true</emphasis>,&#32;tag_handler);
9271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>();
9273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_cbor_binary(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>)&#32;&amp;&amp;&#32;sax-&gt;binary(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>);
9274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9275 
9276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
9277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(<emphasis role="keyword">false</emphasis>);&#32;<emphasis role="comment">//&#32;NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)&#32;LCOV_EXCL_LINE</emphasis>
9278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
9279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9281 
9282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xF4:&#32;<emphasis role="comment">//&#32;false</emphasis>
9283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;boolean(<emphasis role="keyword">false</emphasis>);
9284 
9285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xF5:&#32;<emphasis role="comment">//&#32;true</emphasis>
9286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;boolean(<emphasis role="keyword">true</emphasis>);
9287 
9288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xF6:&#32;<emphasis role="comment">//&#32;null</emphasis>
9289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;null();
9290 
9291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xF9:&#32;<emphasis role="comment">//&#32;Half-Precision&#32;Float&#32;(two-byte&#32;IEEE&#32;754)</emphasis>
9292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;byte1_raw&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>();
9294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!unexpect_eof(input_format_t::cbor,&#32;<emphasis role="stringliteral">&quot;number&quot;</emphasis>)))
9295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
9297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;byte2_raw&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>();
9299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!unexpect_eof(input_format_t::cbor,&#32;<emphasis role="stringliteral">&quot;number&quot;</emphasis>)))
9300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
9302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9303 
9304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;byte1&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(byte1_raw);
9305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;byte2&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(byte2_raw);
9306 
9307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;code&#32;from&#32;RFC&#32;7049,&#32;Appendix&#32;D,&#32;Figure&#32;3:</emphasis>
9308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;As&#32;half-precision&#32;floating-point&#32;numbers&#32;were&#32;only&#32;added</emphasis>
9309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;to&#32;IEEE&#32;754&#32;in&#32;2008,&#32;today&apos;s&#32;programming&#32;platforms&#32;often</emphasis>
9310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;still&#32;only&#32;have&#32;limited&#32;support&#32;for&#32;them.&#32;It&#32;is&#32;very</emphasis>
9311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;easy&#32;to&#32;include&#32;at&#32;least&#32;decoding&#32;support&#32;for&#32;them&#32;even</emphasis>
9312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;without&#32;such&#32;support.&#32;An&#32;example&#32;of&#32;a&#32;small&#32;decoder&#32;for</emphasis>
9313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;half-precision&#32;floating-point&#32;numbers&#32;in&#32;the&#32;C&#32;language</emphasis>
9314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;is&#32;shown&#32;in&#32;Fig.&#32;3.</emphasis>
9315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;half&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>((byte1&#32;&lt;&lt;&#32;8u)&#32;+&#32;byte2);
9316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;=&#32;[&amp;half]
9317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a15078bfb380de3cfbb83117d459a475b">exp</link>&#32;=&#32;(half&#32;&gt;&gt;&#32;10u)&#32;&amp;&#32;0x1Fu;
9319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;mant&#32;=&#32;half&#32;&amp;&#32;0x3FFu;
9320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(0&#32;&lt;=&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a15078bfb380de3cfbb83117d459a475b">exp</link>&amp;&amp;&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a15078bfb380de3cfbb83117d459a475b">exp</link>&#32;&lt;=&#32;32);
9321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(mant&#32;&lt;=&#32;1024);
9322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2lib_2include_2tgmath_8h_1a15078bfb380de3cfbb83117d459a475b">exp</link>)
9323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0:
9325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::ldexp(mant,&#32;-24);
9326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;31:
9327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(mant&#32;==&#32;0)
9328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;std::numeric_limits&lt;double&gt;::infinity()
9329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_namespacestd">std</link>::numeric_limits&lt;double&gt;::quiet_NaN();
9330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
9331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::ldexp(mant&#32;+&#32;1024,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a15078bfb380de3cfbb83117d459a475b">exp</link>&#32;-&#32;25);
9332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}();
9334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;number_float((half&#32;&amp;&#32;0x8000u)&#32;!=&#32;0
9335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;<emphasis role="keyword">static_cast&lt;</emphasis>number_float_t<emphasis role="keyword">&gt;</emphasis>(-<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
9336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;static_cast&lt;number_float_t&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>),&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
9337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9338 
9339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xFA:&#32;<emphasis role="comment">//&#32;Single-Precision&#32;Float&#32;(four-byte&#32;IEEE&#32;754)</emphasis>
9340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;number{};
9342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::cbor,&#32;number)&#32;&amp;&amp;&#32;sax-&gt;number_float(<emphasis role="keyword">static_cast&lt;</emphasis>number_float_t<emphasis role="keyword">&gt;</emphasis>(number),&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
9343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9344 
9345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xFB:&#32;<emphasis role="comment">//&#32;Double-Precision&#32;Float&#32;(eight-byte&#32;IEEE&#32;754)</emphasis>
9346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;number{};
9348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::cbor,&#32;number)&#32;&amp;&amp;&#32;sax-&gt;number_float(<emphasis role="keyword">static_cast&lt;</emphasis>number_float_t<emphasis role="keyword">&gt;</emphasis>(number),&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
9349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9350 
9351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="comment">//&#32;anything&#32;else&#32;(0xFF&#32;is&#32;handled&#32;inside&#32;the&#32;other&#32;types)</emphasis>
9352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;last_token&#32;=&#32;get_token_string();
9354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;parse_error(chars_read,&#32;last_token,&#32;<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">parse_error::create</link>(112,&#32;chars_read,
9355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exception_message(input_format_t::cbor,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;invalid&#32;byte:&#32;0x&quot;</emphasis>,&#32;last_token),&#32;<emphasis role="stringliteral">&quot;value&quot;</emphasis>),&#32;<emphasis role="keyword">nullptr</emphasis>));
9356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9358 &#32;&#32;&#32;&#32;}
9359 
9371 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;get_cbor_string(string_t&amp;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>)
9372 &#32;&#32;&#32;&#32;{
9373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!unexpect_eof(input_format_t::cbor,&#32;<emphasis role="stringliteral">&quot;string&quot;</emphasis>)))
9374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
9376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9377 
9378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(current)
9379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;UTF-8&#32;string&#32;(0x00..0x17&#32;bytes&#32;follow)</emphasis>
9381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x60:
9382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x61:
9383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x62:
9384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x63:
9385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x64:
9386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x65:
9387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x66:
9388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x67:
9389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x68:
9390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x69:
9391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x6A:
9392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x6B:
9393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x6C:
9394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x6D:
9395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x6E:
9396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x6F:
9397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x70:
9398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x71:
9399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x72:
9400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x73:
9401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x74:
9402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x75:
9403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x76:
9404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x77:
9405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_string(input_format_t::cbor,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(current)&#32;&amp;&#32;0x1Fu,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
9407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9408 
9409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x78:&#32;<emphasis role="comment">//&#32;UTF-8&#32;string&#32;(one-byte&#32;uint8_t&#32;for&#32;n&#32;follows)</emphasis>
9410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint8_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>{};
9412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::cbor,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&amp;&amp;&#32;get_string(input_format_t::cbor,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
9413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9414 
9415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x79:&#32;<emphasis role="comment">//&#32;UTF-8&#32;string&#32;(two-byte&#32;uint16_t&#32;for&#32;n&#32;follow)</emphasis>
9416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint16_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>{};
9418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::cbor,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&amp;&amp;&#32;get_string(input_format_t::cbor,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
9419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9420 
9421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x7A:&#32;<emphasis role="comment">//&#32;UTF-8&#32;string&#32;(four-byte&#32;uint32_t&#32;for&#32;n&#32;follow)</emphasis>
9422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint32_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>{};
9424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::cbor,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&amp;&amp;&#32;get_string(input_format_t::cbor,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
9425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9426 
9427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x7B:&#32;<emphasis role="comment">//&#32;UTF-8&#32;string&#32;(eight-byte&#32;uint64_t&#32;for&#32;n&#32;follow)</emphasis>
9428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint64_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>{};
9430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::cbor,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&amp;&amp;&#32;get_string(input_format_t::cbor,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
9431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9432 
9433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x7F:&#32;<emphasis role="comment">//&#32;UTF-8&#32;string&#32;(indefinite&#32;length)</emphasis>
9434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>()&#32;!=&#32;0xFF)
9436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;string_t&#32;<link linkend="_namespace_catch_1_1_generators_1acb4654b4e840e438e3bc204ac4d8e157">chunk</link>;
9438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!get_cbor_string(chunk))
9439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
9441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.append(chunk);
9443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
9445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9446 
9447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
9448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;last_token&#32;=&#32;get_token_string();
9450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;parse_error(chars_read,&#32;last_token,&#32;<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">parse_error::create</link>(113,&#32;chars_read,
9451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exception_message(input_format_t::cbor,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;expected&#32;length&#32;specification&#32;(0x60-0x7B)&#32;or&#32;indefinite&#32;string&#32;type&#32;(0x7F);&#32;last&#32;byte:&#32;0x&quot;</emphasis>,&#32;last_token),&#32;<emphasis role="stringliteral">&quot;string&quot;</emphasis>),&#32;<emphasis role="keyword">nullptr</emphasis>));
9452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9454 &#32;&#32;&#32;&#32;}
9455 
9467 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;get_cbor_binary(binary_t&amp;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>)
9468 &#32;&#32;&#32;&#32;{
9469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!unexpect_eof(input_format_t::cbor,&#32;<emphasis role="stringliteral">&quot;binary&quot;</emphasis>)))
9470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
9472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9473 
9474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(current)
9475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Binary&#32;data&#32;(0x00..0x17&#32;bytes&#32;follow)</emphasis>
9477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x40:
9478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x41:
9479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x42:
9480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x43:
9481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x44:
9482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x45:
9483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x46:
9484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x47:
9485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x48:
9486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x49:
9487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x4A:
9488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x4B:
9489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x4C:
9490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x4D:
9491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x4E:
9492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x4F:
9493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x50:
9494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x51:
9495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x52:
9496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x53:
9497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x54:
9498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x55:
9499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x56:
9500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x57:
9501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_binary(input_format_t::cbor,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(current)&#32;&amp;&#32;0x1Fu,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
9503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9504 
9505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x58:&#32;<emphasis role="comment">//&#32;Binary&#32;data&#32;(one-byte&#32;uint8_t&#32;for&#32;n&#32;follows)</emphasis>
9506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint8_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>{};
9508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::cbor,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&amp;&amp;
9509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_binary(input_format_t::cbor,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
9510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9511 
9512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x59:&#32;<emphasis role="comment">//&#32;Binary&#32;data&#32;(two-byte&#32;uint16_t&#32;for&#32;n&#32;follow)</emphasis>
9513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint16_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>{};
9515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::cbor,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&amp;&amp;
9516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_binary(input_format_t::cbor,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
9517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9518 
9519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x5A:&#32;<emphasis role="comment">//&#32;Binary&#32;data&#32;(four-byte&#32;uint32_t&#32;for&#32;n&#32;follow)</emphasis>
9520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint32_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>{};
9522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::cbor,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&amp;&amp;
9523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_binary(input_format_t::cbor,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
9524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9525 
9526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x5B:&#32;<emphasis role="comment">//&#32;Binary&#32;data&#32;(eight-byte&#32;uint64_t&#32;for&#32;n&#32;follow)</emphasis>
9527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint64_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>{};
9529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::cbor,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&amp;&amp;
9530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_binary(input_format_t::cbor,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
9531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9532 
9533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x5F:&#32;<emphasis role="comment">//&#32;Binary&#32;data&#32;(indefinite&#32;length)</emphasis>
9534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>()&#32;!=&#32;0xFF)
9536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;binary_t&#32;<link linkend="_namespace_catch_1_1_generators_1acb4654b4e840e438e3bc204ac4d8e157">chunk</link>;
9538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!get_cbor_binary(chunk))
9539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
9541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.insert(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.end(),&#32;<link linkend="_namespace_catch_1_1_generators_1acb4654b4e840e438e3bc204ac4d8e157">chunk</link>.begin(),&#32;<link linkend="_namespace_catch_1_1_generators_1acb4654b4e840e438e3bc204ac4d8e157">chunk</link>.end());
9543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
9545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9546 
9547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
9548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;last_token&#32;=&#32;get_token_string();
9550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;parse_error(chars_read,&#32;last_token,&#32;<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">parse_error::create</link>(113,&#32;chars_read,
9551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exception_message(input_format_t::cbor,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;expected&#32;length&#32;specification&#32;(0x40-0x5B)&#32;or&#32;indefinite&#32;binary&#32;array&#32;type&#32;(0x5F);&#32;last&#32;byte:&#32;0x&quot;</emphasis>,&#32;last_token),&#32;<emphasis role="stringliteral">&quot;binary&quot;</emphasis>),&#32;<emphasis role="keyword">nullptr</emphasis>));
9552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9554 &#32;&#32;&#32;&#32;}
9555 
9562 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;get_cbor_array(<emphasis role="keyword">const</emphasis>&#32;std::size_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,
9563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9ac">cbor_tag_handler_t</link>&#32;tag_handler)
9564 &#32;&#32;&#32;&#32;{
9565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!sax-&gt;start_array(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)))
9566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
9568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9569 
9570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;!=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(-1))
9571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>;&#32;++i)
9573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!parse_cbor_internal(<emphasis role="keyword">true</emphasis>,&#32;tag_handler)))
9575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
9577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
9581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>()&#32;!=&#32;0xFF)
9583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!parse_cbor_internal(<emphasis role="keyword">false</emphasis>,&#32;tag_handler)))
9585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
9587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9590 
9591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;end_array();
9592 &#32;&#32;&#32;&#32;}
9593 
9600 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;get_cbor_object(<emphasis role="keyword">const</emphasis>&#32;std::size_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,
9601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9ac">cbor_tag_handler_t</link>&#32;tag_handler)
9602 &#32;&#32;&#32;&#32;{
9603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!sax-&gt;start_object(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)))
9604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
9606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9607 
9608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;!=&#32;0)
9609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;string_t&#32;key;
9611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;!=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(-1))
9612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>;&#32;++i)
9614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>();
9616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!get_cbor_string(key)&#32;||&#32;!sax-&gt;key(key)))
9617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
9619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9620 
9621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!parse_cbor_internal(<emphasis role="keyword">true</emphasis>,&#32;tag_handler)))
9622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
9624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key.clear();
9626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
9629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>()&#32;!=&#32;0xFF)
9631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!get_cbor_string(key)&#32;||&#32;!sax-&gt;key(key)))
9633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
9635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9636 
9637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!parse_cbor_internal(<emphasis role="keyword">true</emphasis>,&#32;tag_handler)))
9638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
9640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key.clear();
9642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9645 
9646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;end_object();
9647 &#32;&#32;&#32;&#32;}
9648 
9650 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;MsgPack&#32;//</emphasis>
9652 
9656 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;parse_msgpack_internal()
9657 &#32;&#32;&#32;&#32;{
9658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>())
9659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;EOF</emphasis>
9661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;std::char_traits&lt;char_type&gt;::eof():
9662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;unexpect_eof(input_format_t::msgpack,&#32;<emphasis role="stringliteral">&quot;value&quot;</emphasis>);
9663 
9664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;positive&#32;fixint</emphasis>
9665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x00:
9666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x01:
9667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x02:
9668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x03:
9669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x04:
9670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x05:
9671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x06:
9672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x07:
9673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x08:
9674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x09:
9675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x0A:
9676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x0B:
9677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x0C:
9678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x0D:
9679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x0E:
9680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x0F:
9681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x10:
9682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x11:
9683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x12:
9684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x13:
9685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x14:
9686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x15:
9687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x16:
9688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x17:
9689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x18:
9690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x19:
9691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x1A:
9692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x1B:
9693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x1C:
9694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x1D:
9695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x1E:
9696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x1F:
9697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x20:
9698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x21:
9699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x22:
9700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x23:
9701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x24:
9702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x25:
9703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x26:
9704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x27:
9705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x28:
9706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x29:
9707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x2A:
9708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x2B:
9709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x2C:
9710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x2D:
9711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x2E:
9712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x2F:
9713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x30:
9714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x31:
9715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x32:
9716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x33:
9717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x34:
9718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x35:
9719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x36:
9720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x37:
9721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x38:
9722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x39:
9723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x3A:
9724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x3B:
9725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x3C:
9726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x3D:
9727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x3E:
9728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x3F:
9729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x40:
9730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x41:
9731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x42:
9732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x43:
9733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x44:
9734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x45:
9735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x46:
9736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x47:
9737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x48:
9738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x49:
9739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x4A:
9740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x4B:
9741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x4C:
9742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x4D:
9743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x4E:
9744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x4F:
9745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x50:
9746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x51:
9747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x52:
9748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x53:
9749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x54:
9750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x55:
9751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x56:
9752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x57:
9753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x58:
9754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x59:
9755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x5A:
9756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x5B:
9757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x5C:
9758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x5D:
9759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x5E:
9760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x5F:
9761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x60:
9762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x61:
9763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x62:
9764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x63:
9765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x64:
9766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x65:
9767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x66:
9768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x67:
9769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x68:
9770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x69:
9771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x6A:
9772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x6B:
9773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x6C:
9774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x6D:
9775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x6E:
9776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x6F:
9777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x70:
9778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x71:
9779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x72:
9780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x73:
9781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x74:
9782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x75:
9783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x76:
9784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x77:
9785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x78:
9786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x79:
9787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x7A:
9788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x7B:
9789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x7C:
9790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x7D:
9791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x7E:
9792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x7F:
9793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;number_unsigned(<emphasis role="keyword">static_cast&lt;</emphasis>number_unsigned_t<emphasis role="keyword">&gt;</emphasis>(current));
9794 
9795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;fixmap</emphasis>
9796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x80:
9797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x81:
9798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x82:
9799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x83:
9800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x84:
9801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x85:
9802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x86:
9803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x87:
9804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x88:
9805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x89:
9806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x8A:
9807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x8B:
9808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x8C:
9809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x8D:
9810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x8E:
9811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x8F:
9812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_msgpack_object(<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(current)&#32;&amp;&#32;0x0Fu));
9813 
9814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;fixarray</emphasis>
9815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x90:
9816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x91:
9817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x92:
9818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x93:
9819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x94:
9820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x95:
9821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x96:
9822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x97:
9823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x98:
9824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x99:
9825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x9A:
9826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x9B:
9827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x9C:
9828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x9D:
9829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x9E:
9830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x9F:
9831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_msgpack_array(<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(current)&#32;&amp;&#32;0x0Fu));
9832 
9833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;fixstr</emphasis>
9834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xA0:
9835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xA1:
9836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xA2:
9837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xA3:
9838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xA4:
9839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xA5:
9840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xA6:
9841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xA7:
9842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xA8:
9843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xA9:
9844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xAA:
9845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xAB:
9846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xAC:
9847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xAD:
9848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xAE:
9849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xAF:
9850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xB0:
9851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xB1:
9852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xB2:
9853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xB3:
9854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xB4:
9855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xB5:
9856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xB6:
9857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xB7:
9858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xB8:
9859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xB9:
9860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xBA:
9861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xBB:
9862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xBC:
9863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xBD:
9864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xBE:
9865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xBF:
9866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xD9:&#32;<emphasis role="comment">//&#32;str&#32;8</emphasis>
9867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xDA:&#32;<emphasis role="comment">//&#32;str&#32;16</emphasis>
9868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xDB:&#32;<emphasis role="comment">//&#32;str&#32;32</emphasis>
9869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;string_t&#32;s;
9871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_msgpack_string(s)&#32;&amp;&amp;&#32;sax-&gt;string(s);
9872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9873 
9874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xC0:&#32;<emphasis role="comment">//&#32;nil</emphasis>
9875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;null();
9876 
9877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xC2:&#32;<emphasis role="comment">//&#32;false</emphasis>
9878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;boolean(<emphasis role="keyword">false</emphasis>);
9879 
9880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xC3:&#32;<emphasis role="comment">//&#32;true</emphasis>
9881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;boolean(<emphasis role="keyword">true</emphasis>);
9882 
9883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xC4:&#32;<emphasis role="comment">//&#32;bin&#32;8</emphasis>
9884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xC5:&#32;<emphasis role="comment">//&#32;bin&#32;16</emphasis>
9885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xC6:&#32;<emphasis role="comment">//&#32;bin&#32;32</emphasis>
9886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xC7:&#32;<emphasis role="comment">//&#32;ext&#32;8</emphasis>
9887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xC8:&#32;<emphasis role="comment">//&#32;ext&#32;16</emphasis>
9888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xC9:&#32;<emphasis role="comment">//&#32;ext&#32;32</emphasis>
9889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xD4:&#32;<emphasis role="comment">//&#32;fixext&#32;1</emphasis>
9890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xD5:&#32;<emphasis role="comment">//&#32;fixext&#32;2</emphasis>
9891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xD6:&#32;<emphasis role="comment">//&#32;fixext&#32;4</emphasis>
9892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xD7:&#32;<emphasis role="comment">//&#32;fixext&#32;8</emphasis>
9893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xD8:&#32;<emphasis role="comment">//&#32;fixext&#32;16</emphasis>
9894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;binary_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>;
9896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_msgpack_binary(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>)&#32;&amp;&amp;&#32;sax-&gt;binary(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>);
9897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9898 
9899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xCA:&#32;<emphasis role="comment">//&#32;float&#32;32</emphasis>
9900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;number{};
9902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::msgpack,&#32;number)&#32;&amp;&amp;&#32;sax-&gt;number_float(<emphasis role="keyword">static_cast&lt;</emphasis>number_float_t<emphasis role="keyword">&gt;</emphasis>(number),&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
9903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9904 
9905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xCB:&#32;<emphasis role="comment">//&#32;float&#32;64</emphasis>
9906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;number{};
9908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::msgpack,&#32;number)&#32;&amp;&amp;&#32;sax-&gt;number_float(<emphasis role="keyword">static_cast&lt;</emphasis>number_float_t<emphasis role="keyword">&gt;</emphasis>(number),&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
9909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9910 
9911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xCC:&#32;<emphasis role="comment">//&#32;uint&#32;8</emphasis>
9912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint8_t&#32;number{};
9914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::msgpack,&#32;number)&#32;&amp;&amp;&#32;sax-&gt;number_unsigned(number);
9915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9916 
9917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xCD:&#32;<emphasis role="comment">//&#32;uint&#32;16</emphasis>
9918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint16_t&#32;number{};
9920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::msgpack,&#32;number)&#32;&amp;&amp;&#32;sax-&gt;number_unsigned(number);
9921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9922 
9923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xCE:&#32;<emphasis role="comment">//&#32;uint&#32;32</emphasis>
9924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint32_t&#32;number{};
9926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::msgpack,&#32;number)&#32;&amp;&amp;&#32;sax-&gt;number_unsigned(number);
9927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9928 
9929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xCF:&#32;<emphasis role="comment">//&#32;uint&#32;64</emphasis>
9930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint64_t&#32;number{};
9932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::msgpack,&#32;number)&#32;&amp;&amp;&#32;sax-&gt;number_unsigned(number);
9933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9934 
9935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xD0:&#32;<emphasis role="comment">//&#32;int&#32;8</emphasis>
9936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int8_t&#32;number{};
9938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::msgpack,&#32;number)&#32;&amp;&amp;&#32;sax-&gt;number_integer(number);
9939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9940 
9941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xD1:&#32;<emphasis role="comment">//&#32;int&#32;16</emphasis>
9942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int16_t&#32;number{};
9944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::msgpack,&#32;number)&#32;&amp;&amp;&#32;sax-&gt;number_integer(number);
9945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9946 
9947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xD2:&#32;<emphasis role="comment">//&#32;int&#32;32</emphasis>
9948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int32_t&#32;number{};
9950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::msgpack,&#32;number)&#32;&amp;&amp;&#32;sax-&gt;number_integer(number);
9951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9952 
9953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xD3:&#32;<emphasis role="comment">//&#32;int&#32;64</emphasis>
9954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int64_t&#32;number{};
9956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::msgpack,&#32;number)&#32;&amp;&amp;&#32;sax-&gt;number_integer(number);
9957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9958 
9959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xDC:&#32;<emphasis role="comment">//&#32;array&#32;16</emphasis>
9960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint16_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>{};
9962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::msgpack,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&amp;&amp;&#32;get_msgpack_array(<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>));
9963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9964 
9965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xDD:&#32;<emphasis role="comment">//&#32;array&#32;32</emphasis>
9966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint32_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>{};
9968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::msgpack,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&amp;&amp;&#32;get_msgpack_array(<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>));
9969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9970 
9971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xDE:&#32;<emphasis role="comment">//&#32;map&#32;16</emphasis>
9972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint16_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>{};
9974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::msgpack,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&amp;&amp;&#32;get_msgpack_object(<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>));
9975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9976 
9977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xDF:&#32;<emphasis role="comment">//&#32;map&#32;32</emphasis>
9978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint32_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>{};
9980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::msgpack,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&amp;&amp;&#32;get_msgpack_object(<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>));
9981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9982 
9983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;negative&#32;fixint</emphasis>
9984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xE0:
9985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xE1:
9986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xE2:
9987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xE3:
9988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xE4:
9989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xE5:
9990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xE6:
9991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xE7:
9992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xE8:
9993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xE9:
9994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xEA:
9995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xEB:
9996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xEC:
9997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xED:
9998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xEE:
9999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xEF:
10000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xF0:
10001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xF1:
10002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xF2:
10003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xF3:
10004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xF4:
10005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xF5:
10006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xF6:
10007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xF7:
10008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xF8:
10009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xF9:
10010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xFA:
10011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xFB:
10012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xFC:
10013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xFD:
10014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xFE:
10015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xFF:
10016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;number_integer(<emphasis role="keyword">static_cast&lt;</emphasis>std::int8_t<emphasis role="keyword">&gt;</emphasis>(current));
10017 
10018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="comment">//&#32;anything&#32;else</emphasis>
10019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;last_token&#32;=&#32;get_token_string();
10021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;parse_error(chars_read,&#32;last_token,&#32;<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">parse_error::create</link>(112,&#32;chars_read,
10022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exception_message(input_format_t::msgpack,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;invalid&#32;byte:&#32;0x&quot;</emphasis>,&#32;last_token),&#32;<emphasis role="stringliteral">&quot;value&quot;</emphasis>),&#32;<emphasis role="keyword">nullptr</emphasis>));
10023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10025 &#32;&#32;&#32;&#32;}
10026 
10037 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;get_msgpack_string(string_t&amp;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>)
10038 &#32;&#32;&#32;&#32;{
10039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!unexpect_eof(input_format_t::msgpack,&#32;<emphasis role="stringliteral">&quot;string&quot;</emphasis>)))
10040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10043 
10044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(current)
10045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;fixstr</emphasis>
10047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xA0:
10048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xA1:
10049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xA2:
10050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xA3:
10051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xA4:
10052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xA5:
10053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xA6:
10054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xA7:
10055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xA8:
10056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xA9:
10057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xAA:
10058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xAB:
10059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xAC:
10060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xAD:
10061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xAE:
10062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xAF:
10063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xB0:
10064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xB1:
10065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xB2:
10066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xB3:
10067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xB4:
10068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xB5:
10069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xB6:
10070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xB7:
10071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xB8:
10072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xB9:
10073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xBA:
10074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xBB:
10075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xBC:
10076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xBD:
10077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xBE:
10078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xBF:
10079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_string(input_format_t::msgpack,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(current)&#32;&amp;&#32;0x1Fu,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
10081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10082 
10083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xD9:&#32;<emphasis role="comment">//&#32;str&#32;8</emphasis>
10084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint8_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>{};
10086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::msgpack,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&amp;&amp;&#32;get_string(input_format_t::msgpack,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
10087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10088 
10089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xDA:&#32;<emphasis role="comment">//&#32;str&#32;16</emphasis>
10090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint16_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>{};
10092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::msgpack,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&amp;&amp;&#32;get_string(input_format_t::msgpack,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
10093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10094 
10095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xDB:&#32;<emphasis role="comment">//&#32;str&#32;32</emphasis>
10096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint32_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>{};
10098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::msgpack,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&amp;&amp;&#32;get_string(input_format_t::msgpack,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
10099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10100 
10101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
10102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;last_token&#32;=&#32;get_token_string();
10104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;parse_error(chars_read,&#32;last_token,&#32;<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">parse_error::create</link>(113,&#32;chars_read,
10105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exception_message(input_format_t::msgpack,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;expected&#32;length&#32;specification&#32;(0xA0-0xBF,&#32;0xD9-0xDB);&#32;last&#32;byte:&#32;0x&quot;</emphasis>,&#32;last_token),&#32;<emphasis role="stringliteral">&quot;string&quot;</emphasis>),&#32;<emphasis role="keyword">nullptr</emphasis>));
10106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10108 &#32;&#32;&#32;&#32;}
10109 
10120 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;get_msgpack_binary(binary_t&amp;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>)
10121 &#32;&#32;&#32;&#32;{
10122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;helper&#32;function&#32;to&#32;set&#32;the&#32;subtype</emphasis>
10123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;assign_and_return_true&#32;=&#32;[&amp;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>](std::int8_t&#32;subtype)
10124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.set_subtype(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(subtype));
10126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
10127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
10128 
10129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(current)
10130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xC4:&#32;<emphasis role="comment">//&#32;bin&#32;8</emphasis>
10132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint8_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>{};
10134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::msgpack,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&amp;&amp;
10135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_binary(input_format_t::msgpack,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
10136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10137 
10138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xC5:&#32;<emphasis role="comment">//&#32;bin&#32;16</emphasis>
10139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint16_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>{};
10141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::msgpack,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&amp;&amp;
10142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_binary(input_format_t::msgpack,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
10143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10144 
10145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xC6:&#32;<emphasis role="comment">//&#32;bin&#32;32</emphasis>
10146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint32_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>{};
10148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::msgpack,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&amp;&amp;
10149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_binary(input_format_t::msgpack,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
10150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10151 
10152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xC7:&#32;<emphasis role="comment">//&#32;ext&#32;8</emphasis>
10153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint8_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>{};
10155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int8_t&#32;subtype{};
10156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::msgpack,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&amp;&amp;
10157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_number(input_format_t::msgpack,&#32;subtype)&#32;&amp;&amp;
10158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_binary(input_format_t::msgpack,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>)&#32;&amp;&amp;
10159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assign_and_return_true(subtype);
10160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10161 
10162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xC8:&#32;<emphasis role="comment">//&#32;ext&#32;16</emphasis>
10163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint16_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>{};
10165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int8_t&#32;subtype{};
10166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::msgpack,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&amp;&amp;
10167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_number(input_format_t::msgpack,&#32;subtype)&#32;&amp;&amp;
10168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_binary(input_format_t::msgpack,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>)&#32;&amp;&amp;
10169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assign_and_return_true(subtype);
10170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10171 
10172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xC9:&#32;<emphasis role="comment">//&#32;ext&#32;32</emphasis>
10173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint32_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>{};
10175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int8_t&#32;subtype{};
10176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::msgpack,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&amp;&amp;
10177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_number(input_format_t::msgpack,&#32;subtype)&#32;&amp;&amp;
10178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_binary(input_format_t::msgpack,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>)&#32;&amp;&amp;
10179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assign_and_return_true(subtype);
10180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10181 
10182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xD4:&#32;<emphasis role="comment">//&#32;fixext&#32;1</emphasis>
10183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int8_t&#32;subtype{};
10185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::msgpack,&#32;subtype)&#32;&amp;&amp;
10186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_binary(input_format_t::msgpack,&#32;1,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>)&#32;&amp;&amp;
10187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assign_and_return_true(subtype);
10188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10189 
10190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xD5:&#32;<emphasis role="comment">//&#32;fixext&#32;2</emphasis>
10191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int8_t&#32;subtype{};
10193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::msgpack,&#32;subtype)&#32;&amp;&amp;
10194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_binary(input_format_t::msgpack,&#32;2,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>)&#32;&amp;&amp;
10195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assign_and_return_true(subtype);
10196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10197 
10198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xD6:&#32;<emphasis role="comment">//&#32;fixext&#32;4</emphasis>
10199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int8_t&#32;subtype{};
10201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::msgpack,&#32;subtype)&#32;&amp;&amp;
10202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_binary(input_format_t::msgpack,&#32;4,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>)&#32;&amp;&amp;
10203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assign_and_return_true(subtype);
10204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10205 
10206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xD7:&#32;<emphasis role="comment">//&#32;fixext&#32;8</emphasis>
10207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int8_t&#32;subtype{};
10209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::msgpack,&#32;subtype)&#32;&amp;&amp;
10210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_binary(input_format_t::msgpack,&#32;8,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>)&#32;&amp;&amp;
10211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assign_and_return_true(subtype);
10212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10213 
10214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0xD8:&#32;<emphasis role="comment">//&#32;fixext&#32;16</emphasis>
10215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int8_t&#32;subtype{};
10217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format_t::msgpack,&#32;subtype)&#32;&amp;&amp;
10218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_binary(input_format_t::msgpack,&#32;16,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>)&#32;&amp;&amp;
10219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assign_and_return_true(subtype);
10220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10221 
10222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
10223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
10224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10225 &#32;&#32;&#32;&#32;}
10226 
10231 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;get_msgpack_array(<emphasis role="keyword">const</emphasis>&#32;std::size_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)
10232 &#32;&#32;&#32;&#32;{
10233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!sax-&gt;start_array(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)))
10234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10237 
10238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>;&#32;++i)
10239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!parse_msgpack_internal()))
10241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10245 
10246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;end_array();
10247 &#32;&#32;&#32;&#32;}
10248 
10253 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;get_msgpack_object(<emphasis role="keyword">const</emphasis>&#32;std::size_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)
10254 &#32;&#32;&#32;&#32;{
10255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!sax-&gt;start_object(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)))
10256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10259 
10260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;string_t&#32;key;
10261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>;&#32;++i)
10262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>();
10264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!get_msgpack_string(key)&#32;||&#32;!sax-&gt;key(key)))
10265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10268 
10269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!parse_msgpack_internal()))
10270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key.clear();
10274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10275 
10276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;end_object();
10277 &#32;&#32;&#32;&#32;}
10278 
10280 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;UBJSON&#32;//</emphasis>
10282 
10290 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;parse_ubjson_internal(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;get_char&#32;=&#32;<emphasis role="keyword">true</emphasis>)
10291 &#32;&#32;&#32;&#32;{
10292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_ubjson_value(get_char&#32;?&#32;get_ignore_noop()&#32;:&#32;current);
10293 &#32;&#32;&#32;&#32;}
10294 
10309 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;get_ubjson_string(string_t&amp;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;get_char&#32;=&#32;<emphasis role="keyword">true</emphasis>)
10310 &#32;&#32;&#32;&#32;{
10311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(get_char)
10312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>();&#32;&#32;<emphasis role="comment">//&#32;TODO(niels):&#32;may&#32;we&#32;ignore&#32;N&#32;here?</emphasis>
10314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10315 
10316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!unexpect_eof(input_format,&#32;<emphasis role="stringliteral">&quot;value&quot;</emphasis>)))
10317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10320 
10321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(current)
10322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;U&apos;</emphasis>:
10324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint8_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>{};
10326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&amp;&amp;&#32;get_string(input_format,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
10327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10328 
10329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;i&apos;</emphasis>:
10330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int8_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>{};
10332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&amp;&amp;&#32;get_string(input_format,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
10333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10334 
10335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;I&apos;</emphasis>:
10336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int16_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>{};
10338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&amp;&amp;&#32;get_string(input_format,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
10339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10340 
10341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;l&apos;</emphasis>:
10342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int32_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>{};
10344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&amp;&amp;&#32;get_string(input_format,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
10345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10346 
10347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;L&apos;</emphasis>:
10348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int64_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>{};
10350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&amp;&amp;&#32;get_string(input_format,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
10351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10352 
10353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;u&apos;</emphasis>:
10354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(input_format&#32;!=&#32;input_format_t::bjdata)
10356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
10358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint16_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>{};
10360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&amp;&amp;&#32;get_string(input_format,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
10361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10362 
10363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;m&apos;</emphasis>:
10364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(input_format&#32;!=&#32;input_format_t::bjdata)
10366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
10368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint32_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>{};
10370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&amp;&amp;&#32;get_string(input_format,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
10371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10372 
10373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;M&apos;</emphasis>:
10374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(input_format&#32;!=&#32;input_format_t::bjdata)
10376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
10378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint64_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>{};
10380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&amp;&amp;&#32;get_string(input_format,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
10381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10382 
10383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
10384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
10385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;last_token&#32;=&#32;get_token_string();
10387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a7b6161cffb9b8aee272b3b916183d28c">message</link>;
10388 
10389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(input_format&#32;!=&#32;input_format_t::bjdata)
10390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a7b6161cffb9b8aee272b3b916183d28c">message</link>&#32;=&#32;<emphasis role="stringliteral">&quot;expected&#32;length&#32;type&#32;specification&#32;(U,&#32;i,&#32;I,&#32;l,&#32;L);&#32;last&#32;byte:&#32;0x&quot;</emphasis>&#32;+&#32;last_token;
10392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
10394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a7b6161cffb9b8aee272b3b916183d28c">message</link>&#32;=&#32;<emphasis role="stringliteral">&quot;expected&#32;length&#32;type&#32;specification&#32;(U,&#32;i,&#32;u,&#32;I,&#32;m,&#32;l,&#32;M,&#32;L);&#32;last&#32;byte:&#32;0x&quot;</emphasis>&#32;+&#32;last_token;
10396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;parse_error(chars_read,&#32;last_token,&#32;<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">parse_error::create</link>(113,&#32;chars_read,&#32;exception_message(input_format,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a7b6161cffb9b8aee272b3b916183d28c">message</link>,&#32;<emphasis role="stringliteral">&quot;string&quot;</emphasis>),&#32;<emphasis role="keyword">nullptr</emphasis>));
10398 &#32;&#32;&#32;&#32;}
10399 
10404 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;get_ubjson_ndarray_size(std::vector&lt;size_t&gt;&amp;&#32;dim)
10405 &#32;&#32;&#32;&#32;{
10406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;std::size_t,&#32;char_int_type&gt;&#32;size_and_type;
10407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;dimlen&#32;=&#32;0;
10408 
10409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!get_ubjson_size_type(size_and_type)))
10410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10413 
10414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size_and_type.first&#32;!=&#32;string_t::npos)
10415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size_and_type.second&#32;!=&#32;0)
10417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size_and_type.second&#32;!=&#32;<emphasis role="charliteral">&apos;N&apos;</emphasis>)
10419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;size_and_type.first;&#32;++i)
10421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!get_ubjson_size_value(dimlen,&#32;size_and_type.second)))
10423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dim.push_back(dimlen);
10427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
10431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;size_and_type.first;&#32;++i)
10433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!get_ubjson_size_value(dimlen)))
10435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dim.push_back(dimlen);
10439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
10443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(current&#32;!=&#32;<emphasis role="charliteral">&apos;]&apos;</emphasis>)
10445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!get_ubjson_size_value(dimlen,&#32;current)))
10447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dim.push_back(dimlen);
10451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_ignore_noop();
10452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
10455 &#32;&#32;&#32;&#32;}
10456 
10461 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;get_ubjson_size_value(std::size_t&amp;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>,&#32;char_int_type&#32;prefix&#32;=&#32;0)
10462 &#32;&#32;&#32;&#32;{
10463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(prefix&#32;==&#32;0)
10464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prefix&#32;=&#32;get_ignore_noop();
10466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10467 
10468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(prefix)
10469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;U&apos;</emphasis>:
10471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint8_t&#32;number{};
10473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!get_number(input_format,&#32;number)))
10474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(number);
10478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
10479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10480 
10481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;i&apos;</emphasis>:
10482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int8_t&#32;number{};
10484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!get_number(input_format,&#32;number)))
10485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(number);&#32;<emphasis role="comment">//&#32;NOLINT(bugprone-signed-char-misuse,cert-str34-c):&#32;number&#32;is&#32;not&#32;a&#32;char</emphasis>
10489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
10490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10491 
10492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;I&apos;</emphasis>:
10493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int16_t&#32;number{};
10495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!get_number(input_format,&#32;number)))
10496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(number);
10500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
10501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10502 
10503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;l&apos;</emphasis>:
10504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int32_t&#32;number{};
10506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!get_number(input_format,&#32;number)))
10507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(number);
10511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
10512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10513 
10514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;L&apos;</emphasis>:
10515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int64_t&#32;number{};
10517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!get_number(input_format,&#32;number)))
10518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(number);
10522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
10523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10524 
10525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;u&apos;</emphasis>:
10526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(input_format&#32;!=&#32;input_format_t::bjdata)
10528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
10530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint16_t&#32;number{};
10532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!get_number(input_format,&#32;number)))
10533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(number);
10537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
10538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10539 
10540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;m&apos;</emphasis>:
10541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(input_format&#32;!=&#32;input_format_t::bjdata)
10543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
10545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint32_t&#32;number{};
10547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!get_number(input_format,&#32;number)))
10548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(number);
10552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
10553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10554 
10555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;M&apos;</emphasis>:
10556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(input_format&#32;!=&#32;input_format_t::bjdata)
10558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
10560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint64_t&#32;number{};
10562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!get_number(input_format,&#32;number)))
10563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;detail::conditional_static_cast&lt;std::size_t&gt;(number);
10567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
10568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10569 
10570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;[&apos;</emphasis>:
10571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(input_format&#32;!=&#32;input_format_t::bjdata)
10573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
10575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;size_t&gt;&#32;dim;
10577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!get_ubjson_ndarray_size(dim)))
10578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(dim.size()&#32;==&#32;1&#32;||&#32;(dim.size()&#32;==&#32;2&#32;&amp;&amp;&#32;dim.at(0)&#32;==&#32;1))&#32;<emphasis role="comment">//&#32;return&#32;normal&#32;array&#32;size&#32;if&#32;1D&#32;row&#32;vector</emphasis>
10582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;dim.at(dim.size()&#32;-&#32;1);
10584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
10585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!dim.empty())&#32;&#32;<emphasis role="comment">//&#32;if&#32;ndarray,&#32;convert&#32;to&#32;an&#32;object&#32;in&#32;JData&#32;annotated&#32;array&#32;format</emphasis>
10587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;string_t&#32;key&#32;=&#32;<emphasis role="stringliteral">&quot;_ArraySize_&quot;</emphasis>;
10589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!sax-&gt;start_object(3)&#32;||&#32;!sax-&gt;key(key)&#32;||&#32;!sax-&gt;start_array(dim.size())))
10590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;1;
10594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;i&#32;:&#32;dim)
10595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;*=&#32;i;
10597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!sax-&gt;number_integer(<emphasis role="keyword">static_cast&lt;</emphasis>number_integer_t<emphasis role="keyword">&gt;</emphasis>(i))))
10598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;|=&#32;(1ull&#32;&lt;&lt;&#32;(<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>)&#32;*&#32;8&#32;-&#32;1));&#32;<emphasis role="comment">//&#32;low&#32;63&#32;bit&#32;of&#32;result&#32;stores&#32;the&#32;total&#32;element&#32;count,&#32;sign-bit&#32;indicates&#32;ndarray</emphasis>
10603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;end_array();
10604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;0;
10606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
10607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10608 
10609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
10610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
10611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;last_token&#32;=&#32;get_token_string();
10613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a7b6161cffb9b8aee272b3b916183d28c">message</link>;
10614 
10615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(input_format&#32;!=&#32;input_format_t::bjdata)
10616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a7b6161cffb9b8aee272b3b916183d28c">message</link>&#32;=&#32;<emphasis role="stringliteral">&quot;expected&#32;length&#32;type&#32;specification&#32;(U,&#32;i,&#32;I,&#32;l,&#32;L)&#32;after&#32;&apos;#&apos;;&#32;last&#32;byte:&#32;0x&quot;</emphasis>&#32;+&#32;last_token;
10618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
10620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a7b6161cffb9b8aee272b3b916183d28c">message</link>&#32;=&#32;<emphasis role="stringliteral">&quot;expected&#32;length&#32;type&#32;specification&#32;(U,&#32;i,&#32;u,&#32;I,&#32;m,&#32;l,&#32;M,&#32;L)&#32;after&#32;&apos;#&apos;;&#32;last&#32;byte:&#32;0x&quot;</emphasis>&#32;+&#32;last_token;
10622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;parse_error(chars_read,&#32;last_token,&#32;<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">parse_error::create</link>(113,&#32;chars_read,&#32;exception_message(input_format,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a7b6161cffb9b8aee272b3b916183d28c">message</link>,&#32;<emphasis role="stringliteral">&quot;size&quot;</emphasis>),&#32;<emphasis role="keyword">nullptr</emphasis>));
10624 &#32;&#32;&#32;&#32;}
10625 
10636 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;get_ubjson_size_type(std::pair&lt;std::size_t,&#32;char_int_type&gt;&amp;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>)
10637 &#32;&#32;&#32;&#32;{
10638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.first&#32;=&#32;string_t::npos;&#32;<emphasis role="comment">//&#32;size</emphasis>
10639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.second&#32;=&#32;0;&#32;<emphasis role="comment">//&#32;type</emphasis>
10640 
10641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_ignore_noop();
10642 
10643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(current&#32;==&#32;<emphasis role="charliteral">&apos;$&apos;</emphasis>)
10644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;char_int_type&gt;&#32;bjdx&#32;=&#32;{<emphasis role="charliteral">&apos;[&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;{&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;S&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;H&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;T&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;F&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;N&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;Z&apos;</emphasis>};&#32;<emphasis role="comment">//&#32;excluded&#32;markers&#32;in&#32;bjdata&#32;optimized&#32;type</emphasis>
10646 
10647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.second&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>();&#32;&#32;<emphasis role="comment">//&#32;must&#32;not&#32;ignore&#32;&apos;N&apos;,&#32;because&#32;&apos;N&apos;&#32;maybe&#32;the&#32;type</emphasis>
10648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!unexpect_eof(input_format,&#32;<emphasis role="stringliteral">&quot;type&quot;</emphasis>)&#32;||&#32;(input_format&#32;==&#32;input_format_t::bjdata&#32;&amp;&amp;&#32;<link linkend="_namespacestd_1ae3e398a3f38b0182e770944d57402701">std::find</link>(bjdx.begin(),&#32;bjdx.end(),&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.second)&#32;!=&#32;bjdx.end()&#32;)))
10649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10652 
10653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_ignore_noop();
10654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(current&#32;!=&#32;<emphasis role="charliteral">&apos;#&apos;</emphasis>))
10655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!unexpect_eof(input_format,&#32;<emphasis role="stringliteral">&quot;value&quot;</emphasis>)))
10657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;last_token&#32;=&#32;get_token_string();
10661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;parse_error(chars_read,&#32;last_token,&#32;<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">parse_error::create</link>(112,&#32;chars_read,
10662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exception_message(input_format,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;expected&#32;&apos;#&apos;&#32;after&#32;type&#32;information;&#32;last&#32;byte:&#32;0x&quot;</emphasis>,&#32;last_token),&#32;<emphasis role="stringliteral">&quot;size&quot;</emphasis>),&#32;<emphasis role="keyword">nullptr</emphasis>));
10663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10664 
10665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_ubjson_size_value(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.first);
10666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10667 
10668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(current&#32;==&#32;<emphasis role="charliteral">&apos;#&apos;</emphasis>)
10669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_ubjson_size_value(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.first);
10671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10672 
10673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
10674 &#32;&#32;&#32;&#32;}
10675 
10680 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;get_ubjson_value(<emphasis role="keyword">const</emphasis>&#32;char_int_type&#32;prefix)
10681 &#32;&#32;&#32;&#32;{
10682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(prefix)
10683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;std::char_traits&lt;char_type&gt;::eof():&#32;&#32;<emphasis role="comment">//&#32;EOF</emphasis>
10685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;unexpect_eof(input_format,&#32;<emphasis role="stringliteral">&quot;value&quot;</emphasis>);
10686 
10687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;T&apos;</emphasis>:&#32;&#32;<emphasis role="comment">//&#32;true</emphasis>
10688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;boolean(<emphasis role="keyword">true</emphasis>);
10689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;F&apos;</emphasis>:&#32;&#32;<emphasis role="comment">//&#32;false</emphasis>
10690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;boolean(<emphasis role="keyword">false</emphasis>);
10691 
10692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;Z&apos;</emphasis>:&#32;&#32;<emphasis role="comment">//&#32;null</emphasis>
10693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;null();
10694 
10695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;U&apos;</emphasis>:
10696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint8_t&#32;number{};
10698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format,&#32;number)&#32;&amp;&amp;&#32;sax-&gt;number_unsigned(number);
10699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10700 
10701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;i&apos;</emphasis>:
10702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int8_t&#32;number{};
10704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format,&#32;number)&#32;&amp;&amp;&#32;sax-&gt;number_integer(number);
10705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10706 
10707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;I&apos;</emphasis>:
10708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int16_t&#32;number{};
10710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format,&#32;number)&#32;&amp;&amp;&#32;sax-&gt;number_integer(number);
10711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10712 
10713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;l&apos;</emphasis>:
10714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int32_t&#32;number{};
10716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format,&#32;number)&#32;&amp;&amp;&#32;sax-&gt;number_integer(number);
10717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10718 
10719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;L&apos;</emphasis>:
10720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::int64_t&#32;number{};
10722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format,&#32;number)&#32;&amp;&amp;&#32;sax-&gt;number_integer(number);
10723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10724 
10725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;u&apos;</emphasis>:
10726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(input_format&#32;!=&#32;input_format_t::bjdata)
10728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
10730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint16_t&#32;number{};
10732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format,&#32;number)&#32;&amp;&amp;&#32;sax-&gt;number_unsigned(number);
10733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10734 
10735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;m&apos;</emphasis>:
10736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(input_format&#32;!=&#32;input_format_t::bjdata)
10738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
10740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint32_t&#32;number{};
10742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format,&#32;number)&#32;&amp;&amp;&#32;sax-&gt;number_unsigned(number);
10743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10744 
10745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;M&apos;</emphasis>:
10746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(input_format&#32;!=&#32;input_format_t::bjdata)
10748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
10750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint64_t&#32;number{};
10752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format,&#32;number)&#32;&amp;&amp;&#32;sax-&gt;number_unsigned(number);
10753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10754 
10755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;h&apos;</emphasis>:
10756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(input_format&#32;!=&#32;input_format_t::bjdata)
10758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
10760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;byte1_raw&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>();
10762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!unexpect_eof(input_format,&#32;<emphasis role="stringliteral">&quot;number&quot;</emphasis>)))
10763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;byte2_raw&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>();
10767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!unexpect_eof(input_format,&#32;<emphasis role="stringliteral">&quot;number&quot;</emphasis>)))
10768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10771 
10772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;byte1&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(byte1_raw);
10773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;byte2&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(byte2_raw);
10774 
10775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;code&#32;from&#32;RFC&#32;7049,&#32;Appendix&#32;D,&#32;Figure&#32;3:</emphasis>
10776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;As&#32;half-precision&#32;floating-point&#32;numbers&#32;were&#32;only&#32;added</emphasis>
10777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;to&#32;IEEE&#32;754&#32;in&#32;2008,&#32;today&apos;s&#32;programming&#32;platforms&#32;often</emphasis>
10778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;still&#32;only&#32;have&#32;limited&#32;support&#32;for&#32;them.&#32;It&#32;is&#32;very</emphasis>
10779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;easy&#32;to&#32;include&#32;at&#32;least&#32;decoding&#32;support&#32;for&#32;them&#32;even</emphasis>
10780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;without&#32;such&#32;support.&#32;An&#32;example&#32;of&#32;a&#32;small&#32;decoder&#32;for</emphasis>
10781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;half-precision&#32;floating-point&#32;numbers&#32;in&#32;the&#32;C&#32;language</emphasis>
10782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;is&#32;shown&#32;in&#32;Fig.&#32;3.</emphasis>
10783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;half&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>((byte2&#32;&lt;&lt;&#32;8u)&#32;+&#32;byte1);
10784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;=&#32;[&amp;half]
10785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a15078bfb380de3cfbb83117d459a475b">exp</link>&#32;=&#32;(half&#32;&gt;&gt;&#32;10u)&#32;&amp;&#32;0x1Fu;
10787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;mant&#32;=&#32;half&#32;&amp;&#32;0x3FFu;
10788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(0&#32;&lt;=&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a15078bfb380de3cfbb83117d459a475b">exp</link>&amp;&amp;&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a15078bfb380de3cfbb83117d459a475b">exp</link>&#32;&lt;=&#32;32);
10789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(mant&#32;&lt;=&#32;1024);
10790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2lib_2include_2tgmath_8h_1a15078bfb380de3cfbb83117d459a475b">exp</link>)
10791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0:
10793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::ldexp(mant,&#32;-24);
10794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;31:
10795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(mant&#32;==&#32;0)
10796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;std::numeric_limits&lt;double&gt;::infinity()
10797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_namespacestd">std</link>::numeric_limits&lt;double&gt;::quiet_NaN();
10798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
10799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::ldexp(mant&#32;+&#32;1024,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a15078bfb380de3cfbb83117d459a475b">exp</link>&#32;-&#32;25);
10800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}();
10802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;number_float((half&#32;&amp;&#32;0x8000u)&#32;!=&#32;0
10803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;<emphasis role="keyword">static_cast&lt;</emphasis>number_float_t<emphasis role="keyword">&gt;</emphasis>(-<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
10804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;static_cast&lt;number_float_t&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>),&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
10805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10806 
10807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;d&apos;</emphasis>:
10808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;number{};
10810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format,&#32;number)&#32;&amp;&amp;&#32;sax-&gt;number_float(<emphasis role="keyword">static_cast&lt;</emphasis>number_float_t<emphasis role="keyword">&gt;</emphasis>(number),&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
10811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10812 
10813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;D&apos;</emphasis>:
10814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;number{};
10816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_number(input_format,&#32;number)&#32;&amp;&amp;&#32;sax-&gt;number_float(<emphasis role="keyword">static_cast&lt;</emphasis>number_float_t<emphasis role="keyword">&gt;</emphasis>(number),&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
10817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10818 
10819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;H&apos;</emphasis>:
10820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_ubjson_high_precision_number();
10822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10823 
10824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;C&apos;</emphasis>:&#32;&#32;<emphasis role="comment">//&#32;char</emphasis>
10825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>();
10827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!unexpect_eof(input_format,&#32;<emphasis role="stringliteral">&quot;char&quot;</emphasis>)))
10828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(current&#32;&gt;&#32;127))
10832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;last_token&#32;=&#32;get_token_string();
10834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;parse_error(chars_read,&#32;last_token,&#32;<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">parse_error::create</link>(113,&#32;chars_read,
10835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exception_message(input_format,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;byte&#32;after&#32;&apos;C&apos;&#32;must&#32;be&#32;in&#32;range&#32;0x00..0x7F;&#32;last&#32;byte:&#32;0x&quot;</emphasis>,&#32;last_token),&#32;<emphasis role="stringliteral">&quot;char&quot;</emphasis>),&#32;<emphasis role="keyword">nullptr</emphasis>));
10836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;string_t&#32;s(1,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;string_t::value_type<emphasis role="keyword">&gt;</emphasis>(current));
10838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;string(s);
10839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10840 
10841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;S&apos;</emphasis>:&#32;&#32;<emphasis role="comment">//&#32;string</emphasis>
10842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;string_t&#32;s;
10844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_ubjson_string(s)&#32;&amp;&amp;&#32;sax-&gt;string(s);
10845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10846 
10847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;[&apos;</emphasis>:&#32;&#32;<emphasis role="comment">//&#32;array</emphasis>
10848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_ubjson_array();
10849 
10850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;{&apos;</emphasis>:&#32;&#32;<emphasis role="comment">//&#32;object</emphasis>
10851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_ubjson_object();
10852 
10853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="comment">//&#32;anything&#32;else</emphasis>
10854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
10855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;last_token&#32;=&#32;get_token_string();
10857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;parse_error(chars_read,&#32;last_token,&#32;<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">parse_error::create</link>(112,&#32;chars_read,&#32;exception_message(input_format,&#32;<emphasis role="stringliteral">&quot;invalid&#32;byte:&#32;0x&quot;</emphasis>&#32;+&#32;last_token,&#32;<emphasis role="stringliteral">&quot;value&quot;</emphasis>),&#32;<emphasis role="keyword">nullptr</emphasis>));
10858 &#32;&#32;&#32;&#32;}
10859 
10863 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;get_ubjson_array()
10864 &#32;&#32;&#32;&#32;{
10865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;std::size_t,&#32;char_int_type&gt;&#32;size_and_type;
10866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!get_ubjson_size_type(size_and_type)))
10867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10870 
10871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;detect&#32;and&#32;encode&#32;bjdata&#32;ndarray&#32;as&#32;an&#32;object&#32;in&#32;JData&#32;annotated&#32;array&#32;format&#32;(https://github.com/NeuroJSON/jdata):</emphasis>
10872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;{&quot;_ArrayType_&quot;&#32;:&#32;&quot;typeid&quot;,&#32;&quot;_ArraySize_&quot;&#32;:&#32;[n1,&#32;n2,&#32;...],&#32;&quot;_ArrayData_&quot;&#32;:&#32;[v1,&#32;v2,&#32;...]}</emphasis>
10873 
10874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(input_format&#32;==&#32;input_format_t::bjdata&#32;&amp;&amp;&#32;size_and_type.first&#32;!=&#32;string_t::npos&#32;&amp;&amp;&#32;size_and_type.first&#32;&gt;=&#32;(1ull&#32;&lt;&lt;&#32;(<emphasis role="keyword">sizeof</emphasis>(std::size_t)&#32;*&#32;8&#32;-&#32;1)))
10875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::map&lt;char_int_type,&#32;string_t&gt;&#32;bjdtype&#32;=&#32;{{<emphasis role="charliteral">&apos;U&apos;</emphasis>,&#32;<emphasis role="stringliteral">&quot;uint8&quot;</emphasis>},&#32;&#32;{<emphasis role="charliteral">&apos;i&apos;</emphasis>,&#32;<emphasis role="stringliteral">&quot;int8&quot;</emphasis>},&#32;&#32;{<emphasis role="charliteral">&apos;u&apos;</emphasis>,&#32;<emphasis role="stringliteral">&quot;uint16&quot;</emphasis>},&#32;{<emphasis role="charliteral">&apos;I&apos;</emphasis>,&#32;<emphasis role="stringliteral">&quot;int16&quot;</emphasis>},
10877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="charliteral">&apos;m&apos;</emphasis>,&#32;<emphasis role="stringliteral">&quot;uint32&quot;</emphasis>},&#32;{<emphasis role="charliteral">&apos;l&apos;</emphasis>,&#32;<emphasis role="stringliteral">&quot;int32&quot;</emphasis>},&#32;{<emphasis role="charliteral">&apos;M&apos;</emphasis>,&#32;<emphasis role="stringliteral">&quot;uint64&quot;</emphasis>},&#32;{<emphasis role="charliteral">&apos;L&apos;</emphasis>,&#32;<emphasis role="stringliteral">&quot;int64&quot;</emphasis>},&#32;{<emphasis role="charliteral">&apos;d&apos;</emphasis>,&#32;<emphasis role="stringliteral">&quot;single&quot;</emphasis>},&#32;{<emphasis role="charliteral">&apos;D&apos;</emphasis>,&#32;<emphasis role="stringliteral">&quot;double&quot;</emphasis>},&#32;{<emphasis role="charliteral">&apos;C&apos;</emphasis>,&#32;<emphasis role="stringliteral">&quot;char&quot;</emphasis>}
10878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
10879 
10880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;string_t&#32;key&#32;=&#32;<emphasis role="stringliteral">&quot;_ArrayType_&quot;</emphasis>;
10881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(bjdtype.count(size_and_type.second)&#32;==&#32;0&#32;||&#32;!sax-&gt;key(key)&#32;||&#32;!sax-&gt;string(bjdtype[size_and_type.second])&#32;))
10882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10885 
10886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size_and_type.second&#32;==&#32;<emphasis role="charliteral">&apos;C&apos;</emphasis>)
10887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_and_type.second&#32;=&#32;<emphasis role="charliteral">&apos;U&apos;</emphasis>;
10889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10890 
10891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_and_type.first&#32;&amp;=&#32;~(1ull&#32;&lt;&lt;&#32;(<emphasis role="keyword">sizeof</emphasis>(std::size_t)&#32;*&#32;8&#32;-&#32;1));
10892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key&#32;=&#32;<emphasis role="stringliteral">&quot;_ArrayData_&quot;</emphasis>;
10893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!sax-&gt;key(key)&#32;||&#32;!sax-&gt;start_array(size_and_type.first)&#32;))
10894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10897 
10898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;size_and_type.first;&#32;++i)
10899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!get_ubjson_value(size_and_type.second)))
10901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10905 
10906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(sax-&gt;end_array()&#32;&amp;&amp;&#32;sax-&gt;end_object());
10907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10908 
10909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size_and_type.first&#32;!=&#32;string_t::npos)
10910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!sax-&gt;start_array(size_and_type.first)))
10912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10915 
10916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size_and_type.second&#32;!=&#32;0)
10917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size_and_type.second&#32;!=&#32;<emphasis role="charliteral">&apos;N&apos;</emphasis>)
10919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;size_and_type.first;&#32;++i)
10921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!get_ubjson_value(size_and_type.second)))
10923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
10930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;size_and_type.first;&#32;++i)
10932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!parse_ubjson_internal()))
10934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
10941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!sax-&gt;start_array(<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(-1))))
10943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10946 
10947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(current&#32;!=&#32;<emphasis role="charliteral">&apos;]&apos;</emphasis>)
10948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!parse_ubjson_internal(<emphasis role="keyword">false</emphasis>)))
10950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_ignore_noop();
10954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10956 
10957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;end_array();
10958 &#32;&#32;&#32;&#32;}
10959 
10963 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;get_ubjson_object()
10964 &#32;&#32;&#32;&#32;{
10965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;std::size_t,&#32;char_int_type&gt;&#32;size_and_type;
10966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!get_ubjson_size_type(size_and_type)))
10967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10970 
10971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(input_format&#32;==&#32;input_format_t::bjdata&#32;&amp;&amp;&#32;size_and_type.first&#32;!=&#32;string_t::npos&#32;&amp;&amp;&#32;size_and_type.first&#32;&gt;=&#32;(1ull&#32;&lt;&lt;&#32;(<emphasis role="keyword">sizeof</emphasis>(std::size_t)&#32;*&#32;8&#32;-&#32;1)))
10972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10975 
10976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;string_t&#32;key;
10977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size_and_type.first&#32;!=&#32;string_t::npos)
10978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!sax-&gt;start_object(size_and_type.first)))
10980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10983 
10984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size_and_type.second&#32;!=&#32;0)
10985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;size_and_type.first;&#32;++i)
10987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!get_ubjson_string(key)&#32;||&#32;!sax-&gt;key(key)))
10989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!get_ubjson_value(size_and_type.second)))
10993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key.clear();
10997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
11000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;size_and_type.first;&#32;++i)
11002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!get_ubjson_string(key)&#32;||&#32;!sax-&gt;key(key)))
11004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
11006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!parse_ubjson_internal()))
11008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
11010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key.clear();
11012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
11016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!sax-&gt;start_object(<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(-1))))
11018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
11020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11021 
11022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(current&#32;!=&#32;<emphasis role="charliteral">&apos;}&apos;</emphasis>)
11023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!get_ubjson_string(key,&#32;<emphasis role="keyword">false</emphasis>)&#32;||&#32;!sax-&gt;key(key)))
11025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
11027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!parse_ubjson_internal()))
11029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
11031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_ignore_noop();
11033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key.clear();
11034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11036 
11037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;end_object();
11038 &#32;&#32;&#32;&#32;}
11039 
11040 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note,&#32;no&#32;reader&#32;for&#32;UBJSON&#32;binary&#32;types&#32;is&#32;implemented&#32;because&#32;they&#32;do</emphasis>
11041 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;not&#32;exist</emphasis>
11042 
11043 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;get_ubjson_high_precision_number()
11044 &#32;&#32;&#32;&#32;{
11045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;get&#32;size&#32;of&#32;following&#32;number&#32;string</emphasis>
11046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>{};
11047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;=&#32;get_ubjson_size_value(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>);
11048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>))
11049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>;
11051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11052 
11053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;get&#32;number&#32;string</emphasis>
11054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;char&gt;&#32;number_vector;
11055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>;&#32;++i)
11056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>();
11058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!unexpect_eof(input_format,&#32;<emphasis role="stringliteral">&quot;number&quot;</emphasis>)))
11059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
11061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;number_vector.push_back(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(current));
11063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11064 
11065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;parse&#32;number&#32;string</emphasis>
11066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>ia_type&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(detail::input_adapter(number_vector));
11067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;number_lexer&#32;=&#32;detail::lexer&lt;BasicJsonType,&#32;ia_type&gt;(detail::input_adapter(number_vector),&#32;<emphasis role="keyword">false</emphasis>);
11068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;result_number&#32;=&#32;number_lexer.scan();
11069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;number_string&#32;=&#32;number_lexer.get_token_string();
11070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;result_remainder&#32;=&#32;number_lexer.scan();
11071 
11072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>token_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454">detail::lexer_base&lt;BasicJsonType&gt;::token_type</link>;
11073 
11074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(result_remainder&#32;!=&#32;token_type::end_of_input))
11075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;parse_error(chars_read,&#32;number_string,&#32;<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">parse_error::create</link>(115,&#32;chars_read,
11077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exception_message(input_format,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;invalid&#32;number&#32;text:&#32;&quot;</emphasis>,&#32;number_lexer.get_token_string()),&#32;<emphasis role="stringliteral">&quot;high-precision&#32;number&quot;</emphasis>),&#32;<emphasis role="keyword">nullptr</emphasis>));
11078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11079 
11080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(result_number)
11081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;token_type::value_integer:
11083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;number_integer(number_lexer.get_number_integer());
11084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;token_type::value_unsigned:
11085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;number_unsigned(number_lexer.get_number_unsigned());
11086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;token_type::value_float:
11087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;number_float(number_lexer.get_number_float(),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(number_string));
11088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;token_type::uninitialized:
11089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;token_type::literal_true:
11090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;token_type::literal_false:
11091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;token_type::literal_null:
11092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;token_type::value_string:
11093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;token_type::begin_array:
11094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;token_type::begin_object:
11095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;token_type::end_array:
11096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;token_type::end_object:
11097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;token_type::name_separator:
11098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;token_type::value_separator:
11099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;token_type::parse_error:
11100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;token_type::end_of_input:
11101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;token_type::literal_or_value:
11102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
11103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;parse_error(chars_read,&#32;number_string,&#32;<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">parse_error::create</link>(115,&#32;chars_read,
11104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exception_message(input_format,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;invalid&#32;number&#32;text:&#32;&quot;</emphasis>,&#32;number_lexer.get_token_string()),&#32;<emphasis role="stringliteral">&quot;high-precision&#32;number&quot;</emphasis>),&#32;<emphasis role="keyword">nullptr</emphasis>));
11105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11106 &#32;&#32;&#32;&#32;}
11107 
11109 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Utility&#32;functions&#32;//</emphasis>
11111 
11121 &#32;&#32;&#32;&#32;char_int_type&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>()
11122 &#32;&#32;&#32;&#32;{
11123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++chars_read;
11124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;current&#32;=&#32;ia.get_character();
11125 &#32;&#32;&#32;&#32;}
11126 
11130 &#32;&#32;&#32;&#32;char_int_type&#32;get_ignore_noop()
11131 &#32;&#32;&#32;&#32;{
11132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>
11133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>();
11135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(current&#32;==&#32;<emphasis role="charliteral">&apos;N&apos;</emphasis>);
11137 
11138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;current;
11139 &#32;&#32;&#32;&#32;}
11140 
11141 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
11142 <emphasis role="comment">&#32;&#32;&#32;&#32;@brief&#32;read&#32;a&#32;number&#32;from&#32;the&#32;input</emphasis>
11143 <emphasis role="comment"></emphasis>
11144 <emphasis role="comment">&#32;&#32;&#32;&#32;@tparam&#32;NumberType&#32;the&#32;type&#32;of&#32;the&#32;number</emphasis>
11145 <emphasis role="comment">&#32;&#32;&#32;&#32;@param[in]&#32;format&#32;&#32;&#32;the&#32;current&#32;format&#32;(for&#32;diagnostics)</emphasis>
11146 <emphasis role="comment">&#32;&#32;&#32;&#32;@param[out]&#32;result&#32;&#32;number&#32;of&#32;type&#32;@a&#32;NumberType</emphasis>
11147 <emphasis role="comment"></emphasis>
11148 <emphasis role="comment">&#32;&#32;&#32;&#32;@return&#32;whether&#32;conversion&#32;completed</emphasis>
11149 <emphasis role="comment"></emphasis>
11150 <emphasis role="comment">&#32;&#32;&#32;&#32;@note&#32;This&#32;function&#32;needs&#32;to&#32;respect&#32;the&#32;system&apos;s&#32;endianness,&#32;because</emphasis>
11151 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bytes&#32;in&#32;CBOR,&#32;MessagePack,&#32;and&#32;UBJSON&#32;are&#32;stored&#32;in&#32;network&#32;order</emphasis>
11152 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(big&#32;endian)&#32;and&#32;therefore&#32;need&#32;reordering&#32;on&#32;little&#32;endian&#32;systems.</emphasis>
11153 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;On&#32;the&#32;other&#32;hand,&#32;BSON&#32;and&#32;BJData&#32;use&#32;little&#32;endian&#32;and&#32;should&#32;reorder</emphasis>
11154 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;on&#32;big&#32;endian&#32;systems.</emphasis>
11155 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
11156 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;NumberType,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;InputIsLittleEndian&#32;=&#32;false&gt;
11157 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;get_number(<emphasis role="keyword">const</emphasis>&#32;input_format_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>,&#32;NumberType&amp;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>)
11158 &#32;&#32;&#32;&#32;{
11159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;step&#32;1:&#32;read&#32;input&#32;into&#32;array&#32;with&#32;system&apos;s&#32;byte&#32;order</emphasis>
11160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::array&lt;std::uint8_t,&#32;<emphasis role="keyword">sizeof</emphasis>(NumberType)&gt;&#32;vec{};
11161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<emphasis role="keyword">sizeof</emphasis>(NumberType);&#32;++i)
11162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>();
11164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!unexpect_eof(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>,&#32;<emphasis role="stringliteral">&quot;number&quot;</emphasis>)))
11165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
11167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11168 
11169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;reverse&#32;byte&#32;order&#32;prior&#32;to&#32;conversion&#32;if&#32;necessary</emphasis>
11170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is_little_endian&#32;!=&#32;(InputIsLittleEndian&#32;||&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>&#32;==&#32;input_format_t::bjdata))
11171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vec[<emphasis role="keyword">sizeof</emphasis>(NumberType)&#32;-&#32;i&#32;-&#32;1]&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(current);
11173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
11175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vec[i]&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(current);&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
11177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11179 
11180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;step&#32;2:&#32;convert&#32;array&#32;into&#32;number&#32;of&#32;type&#32;T&#32;and&#32;return</emphasis>
11181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memcpy(&amp;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>,&#32;vec.data(),&#32;<emphasis role="keyword">sizeof</emphasis>(NumberType));
11182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
11183 &#32;&#32;&#32;&#32;}
11184 
11199 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;NumberType&gt;
11200 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;get_string(<emphasis role="keyword">const</emphasis>&#32;input_format_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>,
11201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;NumberType&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,
11202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;string_t&amp;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>)
11203 &#32;&#32;&#32;&#32;{
11204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;success&#32;=&#32;<emphasis role="keyword">true</emphasis>;
11205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(NumberType&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>;&#32;i++)
11206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>();
11208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!unexpect_eof(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>,&#32;<emphasis role="stringliteral">&quot;string&quot;</emphasis>)))
11209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;success&#32;=&#32;<emphasis role="keyword">false</emphasis>;
11211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
11212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.push_back(<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;string_t::value_type<emphasis role="keyword">&gt;</emphasis>(current));
11214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;success;
11216 &#32;&#32;&#32;&#32;}
11217 
11232 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;NumberType&gt;
11233 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;get_binary(<emphasis role="keyword">const</emphasis>&#32;input_format_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>,
11234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;NumberType&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,
11235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;binary_t&amp;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>)
11236 &#32;&#32;&#32;&#32;{
11237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;success&#32;=&#32;<emphasis role="keyword">true</emphasis>;
11238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(NumberType&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>;&#32;i++)
11239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>();
11241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!unexpect_eof(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>,&#32;<emphasis role="stringliteral">&quot;binary&quot;</emphasis>)))
11242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;success&#32;=&#32;<emphasis role="keyword">false</emphasis>;
11244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
11245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.push_back(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(current));
11247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;success;
11249 &#32;&#32;&#32;&#32;}
11250 
11256 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a5338981b5ad9027c9e54b1c5597f4344">JSON_HEDLEY_NON_NULL</link>(3)
11257 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>&#32;unexpect_eof(const&#32;input_format_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>,&#32;const&#32;<emphasis role="keywordtype">char</emphasis>*&#32;context)<emphasis role="keyword">&#32;const</emphasis>
11258 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
11259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(current&#32;==&#32;std::char_traits&lt;char_type&gt;::eof()))
11260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;parse_error(chars_read,&#32;<emphasis role="stringliteral">&quot;&lt;end&#32;of&#32;file&gt;&quot;</emphasis>,
11262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">parse_error::create</link>(110,&#32;chars_read,&#32;exception_message(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>,&#32;<emphasis role="stringliteral">&quot;unexpected&#32;end&#32;of&#32;input&quot;</emphasis>,&#32;context),&#32;<emphasis role="keyword">nullptr</emphasis>));
11263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
11265 &#32;&#32;&#32;&#32;}
11266 
11270 &#32;&#32;&#32;&#32;std::string&#32;get_token_string()<emphasis role="keyword">&#32;const</emphasis>
11271 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
11272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::array&lt;char,&#32;3&gt;&#32;cr{{}};
11273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis><emphasis role="keyword">&gt;</emphasis>((std::snprintf)(cr.data(),&#32;cr.size(),&#32;<emphasis role="stringliteral">&quot;%.2hhX&quot;</emphasis>,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(current)));&#32;<emphasis role="comment">//&#32;NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)</emphasis>
11274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::string{cr.data()};
11275 &#32;&#32;&#32;&#32;}
11276 
11283 &#32;&#32;&#32;&#32;std::string&#32;exception_message(<emphasis role="keyword">const</emphasis>&#32;input_format_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>,
11284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;detail,
11285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;context)<emphasis role="keyword">&#32;const</emphasis>
11286 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
11287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;error_msg&#32;=&#32;<emphasis role="stringliteral">&quot;syntax&#32;error&#32;while&#32;parsing&#32;&quot;</emphasis>;
11288 
11289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>)
11290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;input_format_t::cbor:
11292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_msg&#32;+=&#32;<emphasis role="stringliteral">&quot;CBOR&quot;</emphasis>;
11293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
11294 
11295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;input_format_t::msgpack:
11296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_msg&#32;+=&#32;<emphasis role="stringliteral">&quot;MessagePack&quot;</emphasis>;
11297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
11298 
11299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;input_format_t::ubjson:
11300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_msg&#32;+=&#32;<emphasis role="stringliteral">&quot;UBJSON&quot;</emphasis>;
11301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
11302 
11303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;input_format_t::bson:
11304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_msg&#32;+=&#32;<emphasis role="stringliteral">&quot;BSON&quot;</emphasis>;
11305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
11306 
11307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;input_format_t::bjdata:
11308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_msg&#32;+=&#32;<emphasis role="stringliteral">&quot;BJData&quot;</emphasis>;
11309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
11310 
11311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;input_format_t::json:&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
11312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
11313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(<emphasis role="keyword">false</emphasis>);&#32;<emphasis role="comment">//&#32;NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)&#32;LCOV_EXCL_LINE</emphasis>
11314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11315 
11316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(error_msg,&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>,&#32;context,&#32;<emphasis role="stringliteral">&quot;:&#32;&quot;</emphasis>,&#32;detail);
11317 &#32;&#32;&#32;&#32;}
11318 
11319 &#32;&#32;<emphasis role="keyword">private</emphasis>:
11321 &#32;&#32;&#32;&#32;InputAdapterType&#32;ia;
11322 
11324 &#32;&#32;&#32;&#32;char_int_type&#32;current&#32;=&#32;std::char_traits&lt;char_type&gt;::eof();
11325 
11327 &#32;&#32;&#32;&#32;std::size_t&#32;chars_read&#32;=&#32;0;
11328 
11330 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_little_endian&#32;=&#32;little_endianness();
11331 
11333 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;input_format_t&#32;input_format&#32;=&#32;input_format_t::json;
11334 
11336 &#32;&#32;&#32;&#32;json_sax_t*&#32;sax&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
11337 };
11338 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
11339 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann</emphasis>
11340 
11341 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/input/input_adapters.hpp&gt;</emphasis>
11342 
11343 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/input/lexer.hpp&gt;</emphasis>
11344 
11345 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/input/parser.hpp&gt;</emphasis>
11346 
11347 
11348 <emphasis role="preprocessor">#include&#32;&lt;cmath&gt;</emphasis>&#32;<emphasis role="comment">//&#32;isfinite</emphasis>
11349 <emphasis role="preprocessor">#include&#32;&lt;cstdint&gt;</emphasis>&#32;<emphasis role="comment">//&#32;uint8_t</emphasis>
11350 <emphasis role="preprocessor">#include&#32;&lt;functional&gt;</emphasis>&#32;<emphasis role="comment">//&#32;function</emphasis>
11351 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>&#32;<emphasis role="comment">//&#32;string</emphasis>
11352 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>&#32;<emphasis role="comment">//&#32;move</emphasis>
11353 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>&#32;<emphasis role="comment">//&#32;vector</emphasis>
11354 
11355 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/exceptions.hpp&gt;</emphasis>
11356 
11357 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/input/input_adapters.hpp&gt;</emphasis>
11358 
11359 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/input/json_sax.hpp&gt;</emphasis>
11360 
11361 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/input/lexer.hpp&gt;</emphasis>
11362 
11363 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/macro_scope.hpp&gt;</emphasis>
11364 
11365 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/meta/is_sax.hpp&gt;</emphasis>
11366 
11367 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/string_concat.hpp&gt;</emphasis>
11368 
11369 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/value_t.hpp&gt;</emphasis>
11370 
11371 
11372 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann">nlohmann</link>
11373 {
11374 <emphasis role="keyword">namespace&#32;</emphasis>detail
11375 {
11377 <emphasis role="comment">//&#32;parser&#32;//</emphasis>
11379 
11380 <emphasis role="keyword">enum&#32;class</emphasis>&#32;parse_event_t&#32;:&#32;std::uint8_t
11381 {
11383 &#32;&#32;&#32;&#32;object_start,
11385 &#32;&#32;&#32;&#32;object_end,
11387 &#32;&#32;&#32;&#32;array_start,
11389 &#32;&#32;&#32;&#32;array_end,
11391 &#32;&#32;&#32;&#32;key,
11393 &#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>
11394 };
11395 
11396 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
11397 <emphasis role="keyword">using&#32;</emphasis>parser_callback_t&#32;=
11398 &#32;&#32;&#32;&#32;std::function&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>(<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="comment">/*depth*/</emphasis>,&#32;parse_event_t&#32;<emphasis role="comment">/*event*/</emphasis>,&#32;BasicJsonType&amp;&#32;<emphasis role="comment">/*parsed*/</emphasis>)&gt;;
11399 
11405 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;InputAdapterType&gt;
11406 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classparser">parser</link>
11407 {
11408 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>number_integer_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_integer_t;
11409 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>number_unsigned_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_unsigned_t;
11410 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>number_float_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_float_t;
11411 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>string_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::string_t;
11412 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>lexer_t&#32;=&#32;lexer&lt;BasicJsonType,&#32;InputAdapterType&gt;;
11413 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>token_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer_1a986907dff5ceb4fa06aa8ff301822726">lexer_t::token_type</link>;
11414 
11415 &#32;&#32;<emphasis role="keyword">public</emphasis>:
11417 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_classparser">parser</link>(InputAdapterType&amp;&amp;&#32;adapter,
11418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;parser_callback_t&lt;BasicJsonType&gt;&#32;cb&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>,
11419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;allow_exceptions_&#32;=&#32;<emphasis role="keyword">true</emphasis>,
11420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;skip_comments&#32;=&#32;<emphasis role="keyword">false</emphasis>)
11421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;callback(cb)
11422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;m_lexer(<link linkend="_namespacestd">std</link>::<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(adapter),&#32;skip_comments)
11423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;allow_exceptions(allow_exceptions_)
11424 &#32;&#32;&#32;&#32;{
11425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;read&#32;first&#32;token</emphasis>
11426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_token();
11427 &#32;&#32;&#32;&#32;}
11428 
11439 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_parser_8h_1a6b22a2b999bcc2d61e471470a4ef8e96">parse</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa2133fd717402a7966ee88d06f9e0b792">strict</link>,&#32;BasicJsonType&amp;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>)
11440 &#32;&#32;&#32;&#32;{
11441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(callback)
11442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;json_sax_dom_callback_parser&lt;BasicJsonType&gt;&#32;sdp(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>,&#32;callback,&#32;allow_exceptions);
11444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sax_parse_internal(&amp;sdp);
11445 
11446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;in&#32;strict&#32;mode,&#32;input&#32;must&#32;be&#32;completely&#32;read</emphasis>
11447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa2133fd717402a7966ee88d06f9e0b792">strict</link>&#32;&amp;&amp;&#32;(get_token()&#32;!=&#32;token_type::end_of_input))
11448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sdp.parse_error(m_lexer.get_position(),
11450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_lexer.get_token_string(),
11451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">parse_error::create</link>(101,&#32;m_lexer.get_position(),
11452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exception_message(token_type::end_of_input,&#32;<emphasis role="stringliteral">&quot;value&quot;</emphasis>),&#32;<emphasis role="keyword">nullptr</emphasis>));
11453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11454 
11455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;in&#32;case&#32;of&#32;an&#32;error,&#32;return&#32;discarded&#32;value</emphasis>
11456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sdp.is_errored())
11457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">value_t::discarded</link>;
11459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
11460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11461 
11462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;set&#32;top-level&#32;value&#32;to&#32;null&#32;if&#32;it&#32;was&#32;discarded&#32;by&#32;the&#32;callback</emphasis>
11463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;function</emphasis>
11464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.is_discarded())
11465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
11467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
11470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;json_sax_dom_parser&lt;BasicJsonType&gt;&#32;sdp(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>,&#32;allow_exceptions);
11472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sax_parse_internal(&amp;sdp);
11473 
11474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;in&#32;strict&#32;mode,&#32;input&#32;must&#32;be&#32;completely&#32;read</emphasis>
11475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa2133fd717402a7966ee88d06f9e0b792">strict</link>&#32;&amp;&amp;&#32;(get_token()&#32;!=&#32;token_type::end_of_input))
11476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sdp.parse_error(m_lexer.get_position(),
11478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_lexer.get_token_string(),
11479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">parse_error::create</link>(101,&#32;m_lexer.get_position(),&#32;exception_message(token_type::end_of_input,&#32;<emphasis role="stringliteral">&quot;value&quot;</emphasis>),&#32;<emphasis role="keyword">nullptr</emphasis>));
11480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11481 
11482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;in&#32;case&#32;of&#32;an&#32;error,&#32;return&#32;discarded&#32;value</emphasis>
11483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sdp.is_errored())
11484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">value_t::discarded</link>;
11486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
11487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11489 
11490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.assert_invariant();
11491 &#32;&#32;&#32;&#32;}
11492 
11499 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;accept(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa2133fd717402a7966ee88d06f9e0b792">strict</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>)
11500 &#32;&#32;&#32;&#32;{
11501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;json_sax_acceptor&lt;BasicJsonType&gt;&#32;sax_acceptor;
11502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax_parse(&amp;sax_acceptor,&#32;<link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa2133fd717402a7966ee88d06f9e0b792">strict</link>);
11503 &#32;&#32;&#32;&#32;}
11504 
11505 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;SAX&gt;
11506 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a5338981b5ad9027c9e54b1c5597f4344">JSON_HEDLEY_NON_NULL</link>(2)
11507 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>&#32;sax_parse(SAX*&#32;sax,&#32;const&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa2133fd717402a7966ee88d06f9e0b792">strict</link>&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)
11508 &#32;&#32;&#32;&#32;{
11509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)detail::is_sax_static_asserts&lt;SAX,&#32;BasicJsonType&gt;&#32;{};
11510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;sax_parse_internal(sax);
11511 
11512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;strict&#32;mode:&#32;next&#32;byte&#32;must&#32;be&#32;EOF</emphasis>
11513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;&amp;&amp;&#32;<link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa2133fd717402a7966ee88d06f9e0b792">strict</link>&#32;&amp;&amp;&#32;(get_token()&#32;!=&#32;token_type::end_of_input))
11514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;parse_error(m_lexer.get_position(),
11516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_lexer.get_token_string(),
11517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">parse_error::create</link>(101,&#32;m_lexer.get_position(),&#32;exception_message(token_type::end_of_input,&#32;<emphasis role="stringliteral">&quot;value&quot;</emphasis>),&#32;<emphasis role="keyword">nullptr</emphasis>));
11518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11519 
11520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
11521 &#32;&#32;&#32;&#32;}
11522 
11523 &#32;&#32;<emphasis role="keyword">private</emphasis>:
11524 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;SAX&gt;
11525 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a5338981b5ad9027c9e54b1c5597f4344">JSON_HEDLEY_NON_NULL</link>(2)
11526 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>&#32;sax_parse_internal(SAX*&#32;sax)
11527 &#32;&#32;&#32;&#32;{
11528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;stack&#32;to&#32;remember&#32;the&#32;hierarchy&#32;of&#32;structured&#32;values&#32;we&#32;are&#32;parsing</emphasis>
11529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;true&#32;=&#32;array;&#32;false&#32;=&#32;object</emphasis>
11530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;bool&gt;&#32;states;
11531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;value&#32;to&#32;avoid&#32;a&#32;goto&#32;(see&#32;comment&#32;where&#32;set&#32;to&#32;true)</emphasis>
11532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;skip_to_state_evaluation&#32;=&#32;<emphasis role="keyword">false</emphasis>;
11533 
11534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)
11535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!skip_to_state_evaluation)
11537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;invariant:&#32;get_token()&#32;was&#32;called&#32;before&#32;each&#32;iteration</emphasis>
11539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(last_token)
11540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;token_type::begin_object:
11542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!sax-&gt;start_object(<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(-1))))
11544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
11546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11547 
11548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;closing&#32;}&#32;-&gt;&#32;we&#32;are&#32;done</emphasis>
11549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(get_token()&#32;==&#32;token_type::end_object)
11550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!sax-&gt;end_object()))
11552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
11554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
11556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11557 
11558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;parse&#32;key</emphasis>
11559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(last_token&#32;!=&#32;token_type::value_string))
11560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;parse_error(m_lexer.get_position(),
11562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_lexer.get_token_string(),
11563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">parse_error::create</link>(101,&#32;m_lexer.get_position(),&#32;exception_message(token_type::value_string,&#32;<emphasis role="stringliteral">&quot;object&#32;key&quot;</emphasis>),&#32;<emphasis role="keyword">nullptr</emphasis>));
11564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!sax-&gt;key(m_lexer.get_string())))
11566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
11568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11569 
11570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;parse&#32;separator&#32;(:)</emphasis>
11571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(get_token()&#32;!=&#32;token_type::name_separator))
11572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;parse_error(m_lexer.get_position(),
11574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_lexer.get_token_string(),
11575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">parse_error::create</link>(101,&#32;m_lexer.get_position(),&#32;exception_message(token_type::name_separator,&#32;<emphasis role="stringliteral">&quot;object&#32;separator&quot;</emphasis>),&#32;<emphasis role="keyword">nullptr</emphasis>));
11576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11577 
11578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;remember&#32;we&#32;are&#32;now&#32;inside&#32;an&#32;object</emphasis>
11579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;states.push_back(<emphasis role="keyword">false</emphasis>);
11580 
11581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;parse&#32;values</emphasis>
11582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_token();
11583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
11584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11585 
11586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;token_type::begin_array:
11587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!sax-&gt;start_array(<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(-1))))
11589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
11591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11592 
11593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;closing&#32;]&#32;-&gt;&#32;we&#32;are&#32;done</emphasis>
11594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(get_token()&#32;==&#32;token_type::end_array)
11595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!sax-&gt;end_array()))
11597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
11599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
11601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11602 
11603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;remember&#32;we&#32;are&#32;now&#32;inside&#32;an&#32;array</emphasis>
11604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;states.push_back(<emphasis role="keyword">true</emphasis>);
11605 
11606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;parse&#32;values&#32;(no&#32;need&#32;to&#32;call&#32;get_token)</emphasis>
11607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
11608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11609 
11610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;token_type::value_float:
11611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;=&#32;m_lexer.get_number_float();
11613 
11614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!std::isfinite(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>)))
11615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;parse_error(m_lexer.get_position(),
11617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_lexer.get_token_string(),
11618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1out__of__range_1a4c0af7bdbf4f20e0812900639829028e">out_of_range::create</link>(406,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;number&#32;overflow&#32;parsing&#32;&apos;&quot;</emphasis>,&#32;m_lexer.get_token_string(),&#32;<emphasis role="charliteral">&apos;\&apos;&apos;</emphasis>),&#32;<emphasis role="keyword">nullptr</emphasis>));
11619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11620 
11621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!sax-&gt;number_float(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>,&#32;m_lexer.get_string())))
11622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
11624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11625 
11626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
11627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11628 
11629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;token_type::literal_false:
11630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!sax-&gt;boolean(<emphasis role="keyword">false</emphasis>)))
11632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
11634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
11636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11637 
11638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;token_type::literal_null:
11639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!sax-&gt;null()))
11641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
11643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
11645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11646 
11647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;token_type::literal_true:
11648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!sax-&gt;boolean(<emphasis role="keyword">true</emphasis>)))
11650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
11652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
11654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11655 
11656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;token_type::value_integer:
11657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!sax-&gt;number_integer(m_lexer.get_number_integer())))
11659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
11661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
11663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11664 
11665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;token_type::value_string:
11666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!sax-&gt;string(m_lexer.get_string())))
11668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
11670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
11672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11673 
11674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;token_type::value_unsigned:
11675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!sax-&gt;number_unsigned(m_lexer.get_number_unsigned())))
11677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
11679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
11681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11682 
11683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;token_type::parse_error:
11684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;using&#32;&quot;uninitialized&quot;&#32;to&#32;avoid&#32;&quot;expected&quot;&#32;message</emphasis>
11686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;parse_error(m_lexer.get_position(),
11687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_lexer.get_token_string(),
11688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">parse_error::create</link>(101,&#32;m_lexer.get_position(),&#32;exception_message(token_type::uninitialized,&#32;<emphasis role="stringliteral">&quot;value&quot;</emphasis>),&#32;<emphasis role="keyword">nullptr</emphasis>));
11689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11690 
11691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;token_type::uninitialized:
11692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;token_type::end_array:
11693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;token_type::end_object:
11694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;token_type::name_separator:
11695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;token_type::value_separator:
11696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;token_type::end_of_input:
11697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;token_type::literal_or_value:
11698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="comment">//&#32;the&#32;last&#32;token&#32;was&#32;unexpected</emphasis>
11699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;parse_error(m_lexer.get_position(),
11701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_lexer.get_token_string(),
11702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">parse_error::create</link>(101,&#32;m_lexer.get_position(),&#32;exception_message(token_type::literal_or_value,&#32;<emphasis role="stringliteral">&quot;value&quot;</emphasis>),&#32;<emphasis role="keyword">nullptr</emphasis>));
11703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
11707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;skip_to_state_evaluation&#32;=&#32;<emphasis role="keyword">false</emphasis>;
11709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11710 
11711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&#32;reached&#32;this&#32;line&#32;after&#32;we&#32;successfully&#32;parsed&#32;a&#32;value</emphasis>
11712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(states.empty())
11713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;empty&#32;stack:&#32;we&#32;reached&#32;the&#32;end&#32;of&#32;the&#32;hierarchy:&#32;done</emphasis>
11715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
11716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11717 
11718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(states.back())&#32;&#32;<emphasis role="comment">//&#32;array</emphasis>
11719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;comma&#32;-&gt;&#32;next&#32;value</emphasis>
11721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(get_token()&#32;==&#32;token_type::value_separator)
11722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;parse&#32;a&#32;new&#32;value</emphasis>
11724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_token();
11725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
11726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11727 
11728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;closing&#32;]</emphasis>
11729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0">JSON_HEDLEY_LIKELY</link>(last_token&#32;==&#32;token_type::end_array))
11730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!sax-&gt;end_array()))
11732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
11734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11735 
11736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;are&#32;done&#32;with&#32;this&#32;array.&#32;Before&#32;we&#32;can&#32;parse&#32;a</emphasis>
11737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;new&#32;value,&#32;we&#32;need&#32;to&#32;evaluate&#32;the&#32;new&#32;state&#32;first.</emphasis>
11738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;By&#32;setting&#32;skip_to_state_evaluation&#32;to&#32;false,&#32;we</emphasis>
11739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;are&#32;effectively&#32;jumping&#32;to&#32;the&#32;beginning&#32;of&#32;this&#32;if.</emphasis>
11740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(!states.empty());
11741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;states.pop_back();
11742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;skip_to_state_evaluation&#32;=&#32;<emphasis role="keyword">true</emphasis>;
11743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
11744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11745 
11746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;parse_error(m_lexer.get_position(),
11747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_lexer.get_token_string(),
11748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">parse_error::create</link>(101,&#32;m_lexer.get_position(),&#32;exception_message(token_type::end_array,&#32;<emphasis role="stringliteral">&quot;array&quot;</emphasis>),&#32;<emphasis role="keyword">nullptr</emphasis>));
11749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11750 
11751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;states.back()&#32;is&#32;false&#32;-&gt;&#32;object</emphasis>
11752 
11753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;comma&#32;-&gt;&#32;next&#32;value</emphasis>
11754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(get_token()&#32;==&#32;token_type::value_separator)
11755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;parse&#32;key</emphasis>
11757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(get_token()&#32;!=&#32;token_type::value_string))
11758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;parse_error(m_lexer.get_position(),
11760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_lexer.get_token_string(),
11761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">parse_error::create</link>(101,&#32;m_lexer.get_position(),&#32;exception_message(token_type::value_string,&#32;<emphasis role="stringliteral">&quot;object&#32;key&quot;</emphasis>),&#32;<emphasis role="keyword">nullptr</emphasis>));
11762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11763 
11764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!sax-&gt;key(m_lexer.get_string())))
11765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
11767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11768 
11769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;parse&#32;separator&#32;(:)</emphasis>
11770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(get_token()&#32;!=&#32;token_type::name_separator))
11771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;parse_error(m_lexer.get_position(),
11773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_lexer.get_token_string(),
11774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">parse_error::create</link>(101,&#32;m_lexer.get_position(),&#32;exception_message(token_type::name_separator,&#32;<emphasis role="stringliteral">&quot;object&#32;separator&quot;</emphasis>),&#32;<emphasis role="keyword">nullptr</emphasis>));
11775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11776 
11777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;parse&#32;values</emphasis>
11778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_token();
11779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
11780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11781 
11782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;closing&#32;}</emphasis>
11783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0">JSON_HEDLEY_LIKELY</link>(last_token&#32;==&#32;token_type::end_object))
11784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!sax-&gt;end_object()))
11786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
11788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11789 
11790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;are&#32;done&#32;with&#32;this&#32;object.&#32;Before&#32;we&#32;can&#32;parse&#32;a</emphasis>
11791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;new&#32;value,&#32;we&#32;need&#32;to&#32;evaluate&#32;the&#32;new&#32;state&#32;first.</emphasis>
11792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;By&#32;setting&#32;skip_to_state_evaluation&#32;to&#32;false,&#32;we</emphasis>
11793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;are&#32;effectively&#32;jumping&#32;to&#32;the&#32;beginning&#32;of&#32;this&#32;if.</emphasis>
11794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(!states.empty());
11795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;states.pop_back();
11796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;skip_to_state_evaluation&#32;=&#32;<emphasis role="keyword">true</emphasis>;
11797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
11798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11799 
11800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sax-&gt;parse_error(m_lexer.get_position(),
11801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_lexer.get_token_string(),
11802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">parse_error::create</link>(101,&#32;m_lexer.get_position(),&#32;exception_message(token_type::end_object,&#32;<emphasis role="stringliteral">&quot;object&quot;</emphasis>),&#32;<emphasis role="keyword">nullptr</emphasis>));
11803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11804 &#32;&#32;&#32;&#32;}
11805 
11807 &#32;&#32;&#32;&#32;token_type&#32;get_token()
11808 &#32;&#32;&#32;&#32;{
11809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;last_token&#32;=&#32;m_lexer.scan();
11810 &#32;&#32;&#32;&#32;}
11811 
11812 &#32;&#32;&#32;&#32;std::string&#32;exception_message(<emphasis role="keyword">const</emphasis>&#32;token_type&#32;expected,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;context)
11813 &#32;&#32;&#32;&#32;{
11814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;error_msg&#32;=&#32;<emphasis role="stringliteral">&quot;syntax&#32;error&#32;&quot;</emphasis>;
11815 
11816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!context.empty())
11817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_msg&#32;+=&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;while&#32;parsing&#32;&quot;</emphasis>,&#32;context,&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>);
11819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11820 
11821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_msg&#32;+=&#32;<emphasis role="stringliteral">&quot;-&#32;&quot;</emphasis>;
11822 
11823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(last_token&#32;==&#32;token_type::parse_error)
11824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_msg&#32;+=&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(m_lexer.get_error_message(),&#32;<emphasis role="stringliteral">&quot;;&#32;last&#32;read:&#32;&apos;&quot;</emphasis>,
11826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_lexer.get_token_string(),&#32;<emphasis role="charliteral">&apos;\&apos;&apos;</emphasis>);
11827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
11829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_msg&#32;+=&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;unexpected&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1a3e49458ca35019e4db8a45629f5be192">lexer_t::token_type_name</link>(last_token));
11831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11832 
11833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(expected&#32;!=&#32;token_type::uninitialized)
11834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_msg&#32;+=&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;;&#32;expected&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base_1a3e49458ca35019e4db8a45629f5be192">lexer_t::token_type_name</link>(expected));
11836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11837 
11838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;error_msg;
11839 &#32;&#32;&#32;&#32;}
11840 
11841 &#32;&#32;<emphasis role="keyword">private</emphasis>:
11843 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;parser_callback_t&lt;BasicJsonType&gt;&#32;callback&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
11845 &#32;&#32;&#32;&#32;token_type&#32;last_token&#32;=&#32;token_type::uninitialized;
11847 &#32;&#32;&#32;&#32;lexer_t&#32;m_lexer;
11849 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;allow_exceptions&#32;=&#32;<emphasis role="keyword">true</emphasis>;
11850 };
11851 
11852 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
11853 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann</emphasis>
11854 
11855 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/iterators/internal_iterator.hpp&gt;</emphasis>
11856 
11857 
11858 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/iterators/primitive_iterator.hpp&gt;</emphasis>
11859 
11860 
11861 <emphasis role="preprocessor">#include&#32;&lt;cstddef&gt;</emphasis>&#32;<emphasis role="comment">//&#32;ptrdiff_t</emphasis>
11862 <emphasis role="preprocessor">#include&#32;&lt;limits&gt;</emphasis>&#32;&#32;<emphasis role="comment">//&#32;numeric_limits</emphasis>
11863 
11864 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/macro_scope.hpp&gt;</emphasis>
11865 
11866 
11867 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann">nlohmann</link>
11868 {
11869 <emphasis role="keyword">namespace&#32;</emphasis>detail
11870 {
11871 <emphasis role="comment">/*</emphasis>
11872 <emphasis role="comment">@brief&#32;an&#32;iterator&#32;for&#32;primitive&#32;JSON&#32;types</emphasis>
11873 <emphasis role="comment"></emphasis>
11874 <emphasis role="comment">This&#32;class&#32;models&#32;an&#32;iterator&#32;for&#32;primitive&#32;JSON&#32;types&#32;(boolean,&#32;number,</emphasis>
11875 <emphasis role="comment">string).&#32;It&apos;s&#32;only&#32;purpose&#32;is&#32;to&#32;allow&#32;the&#32;iterator/const_iterator&#32;classes</emphasis>
11876 <emphasis role="comment">to&#32;&quot;iterate&quot;&#32;over&#32;primitive&#32;values.&#32;Internally,&#32;the&#32;iterator&#32;is&#32;modeled&#32;by</emphasis>
11877 <emphasis role="comment">a&#32;`difference_type`&#32;variable.&#32;Value&#32;begin_value&#32;(`0`)&#32;models&#32;the&#32;begin,</emphasis>
11878 <emphasis role="comment">end_value&#32;(`1`)&#32;models&#32;past&#32;the&#32;end.</emphasis>
11879 <emphasis role="comment">*/</emphasis>
11880 <emphasis role="keyword">class&#32;</emphasis>primitive_iterator_t
11881 {
11882 &#32;&#32;<emphasis role="keyword">private</emphasis>:
11883 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>difference_type&#32;=&#32;std::ptrdiff_t;
11884 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;difference_type&#32;begin_value&#32;=&#32;0;
11885 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;difference_type&#32;end_value&#32;=&#32;begin_value&#32;+&#32;1;
11886 
11887 &#32;&#32;<link linkend="_json_8hpp_1a2cf645f34610e7f7d6e09ab88a2ab917">JSON_PRIVATE_UNLESS_TESTED</link>:
11889 &#32;&#32;&#32;&#32;difference_type&#32;m_it&#32;=&#32;(std::numeric_limits&lt;std::ptrdiff_t&gt;::min)();
11890 
11891 &#32;&#32;<emphasis role="keyword">public</emphasis>:
11892 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;difference_type&#32;get_value()&#32;const&#32;noexcept
11893 &#32;&#32;&#32;&#32;{
11894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_it;
11895 &#32;&#32;&#32;&#32;}
11896 
11898 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;set_begin()&#32;noexcept
11899 &#32;&#32;&#32;&#32;{
11900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_it&#32;=&#32;begin_value;
11901 &#32;&#32;&#32;&#32;}
11902 
11904 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;set_end()&#32;noexcept
11905 &#32;&#32;&#32;&#32;{
11906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_it&#32;=&#32;end_value;
11907 &#32;&#32;&#32;&#32;}
11908 
11910 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_begin()&#32;const&#32;noexcept
11911 &#32;&#32;&#32;&#32;{
11912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_it&#32;==&#32;begin_value;
11913 &#32;&#32;&#32;&#32;}
11914 
11916 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_end()&#32;const&#32;noexcept
11917 &#32;&#32;&#32;&#32;{
11918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_it&#32;==&#32;end_value;
11919 &#32;&#32;&#32;&#32;}
11920 
11921 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(primitive_iterator_t&#32;lhs,&#32;primitive_iterator_t&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
11922 &#32;&#32;&#32;&#32;{
11923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.m_it&#32;==&#32;rhs.m_it;
11924 &#32;&#32;&#32;&#32;}
11925 
11926 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(primitive_iterator_t&#32;lhs,&#32;primitive_iterator_t&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
11927 &#32;&#32;&#32;&#32;{
11928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.m_it&#32;&lt;&#32;rhs.m_it;
11929 &#32;&#32;&#32;&#32;}
11930 
11931 &#32;&#32;&#32;&#32;primitive_iterator_t&#32;<link linkend="_namespace_catch_1a074287bb202b5f53de64b5b63c16b23c">operator+</link>(difference_type&#32;n)&#32;<emphasis role="keyword">noexcept</emphasis>
11932 &#32;&#32;&#32;&#32;{
11933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
11934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;+=&#32;n;
11935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
11936 &#32;&#32;&#32;&#32;}
11937 
11938 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;difference_type&#32;<link linkend="_namespaceglm_1a773876155d1503e9901e13f073e4947d">operator-</link>(primitive_iterator_t&#32;lhs,&#32;primitive_iterator_t&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
11939 &#32;&#32;&#32;&#32;{
11940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.m_it&#32;-&#32;rhs.m_it;
11941 &#32;&#32;&#32;&#32;}
11942 
11943 &#32;&#32;&#32;&#32;primitive_iterator_t&amp;&#32;operator++()&#32;noexcept
11944 &#32;&#32;&#32;&#32;{
11945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++m_it;
11946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
11947 &#32;&#32;&#32;&#32;}
11948 
11949 &#32;&#32;&#32;&#32;primitive_iterator_t&#32;operator++(<emphasis role="keywordtype">int</emphasis>)&amp;&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//&#32;NOLINT(cert-dcl21-cpp)</emphasis>
11950 &#32;&#32;&#32;&#32;{
11951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
11952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++m_it;
11953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
11954 &#32;&#32;&#32;&#32;}
11955 
11956 &#32;&#32;&#32;&#32;primitive_iterator_t&amp;&#32;operator--()&#32;noexcept
11957 &#32;&#32;&#32;&#32;{
11958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--m_it;
11959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
11960 &#32;&#32;&#32;&#32;}
11961 
11962 &#32;&#32;&#32;&#32;primitive_iterator_t&#32;operator--(<emphasis role="keywordtype">int</emphasis>)&amp;&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//&#32;NOLINT(cert-dcl21-cpp)</emphasis>
11963 &#32;&#32;&#32;&#32;{
11964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
11965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--m_it;
11966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
11967 &#32;&#32;&#32;&#32;}
11968 
11969 &#32;&#32;&#32;&#32;primitive_iterator_t&amp;&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(difference_type&#32;n)&#32;<emphasis role="keyword">noexcept</emphasis>
11970 &#32;&#32;&#32;&#32;{
11971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_it&#32;+=&#32;n;
11972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
11973 &#32;&#32;&#32;&#32;}
11974 
11975 &#32;&#32;&#32;&#32;primitive_iterator_t&amp;&#32;operator-=(difference_type&#32;n)&#32;<emphasis role="keyword">noexcept</emphasis>
11976 &#32;&#32;&#32;&#32;{
11977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_it&#32;-=&#32;n;
11978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
11979 &#32;&#32;&#32;&#32;}
11980 };
11981 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
11982 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann</emphasis>
11983 
11984 
11985 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann">nlohmann</link>
11986 {
11987 <emphasis role="keyword">namespace&#32;</emphasis>detail
11988 {
11995 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1internal__iterator">internal_iterator</link>
11996 {
11998 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::object_t::iterator&#32;<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a8cb0af3498061426c1d0a65ad6220408">object_iterator</link>&#32;{};
12000 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::array_t::iterator&#32;<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a8294a6e6f01b58e1cce8fbae66a50b5d">array_iterator</link>&#32;{};
12002 &#32;&#32;&#32;&#32;primitive_iterator_t&#32;<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a2b3bb45f968210e42c282017eeeb63a8">primitive_iterator</link>&#32;{};
12003 };
12004 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
12005 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann</emphasis>
12006 
12007 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/iterators/iter_impl.hpp&gt;</emphasis>
12008 
12009 
12010 <emphasis role="preprocessor">#include&#32;&lt;iterator&gt;</emphasis>&#32;<emphasis role="comment">//&#32;iterator,&#32;random_access_iterator_tag,&#32;bidirectional_iterator_tag,&#32;advance,&#32;next</emphasis>
12011 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>&#32;<emphasis role="comment">//&#32;conditional,&#32;is_const,&#32;remove_const</emphasis>
12012 
12013 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/exceptions.hpp&gt;</emphasis>
12014 
12015 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/iterators/internal_iterator.hpp&gt;</emphasis>
12016 
12017 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/iterators/primitive_iterator.hpp&gt;</emphasis>
12018 
12019 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/macro_scope.hpp&gt;</emphasis>
12020 
12021 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/meta/cpp_future.hpp&gt;</emphasis>
12022 
12023 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/meta/type_traits.hpp&gt;</emphasis>
12024 
12025 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/value_t.hpp&gt;</emphasis>
12026 
12027 
12028 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann">nlohmann</link>
12029 {
12030 <emphasis role="keyword">namespace&#32;</emphasis>detail
12031 {
12032 <emphasis role="comment">//&#32;forward&#32;declare,&#32;to&#32;be&#32;able&#32;to&#32;friend&#32;it&#32;later&#32;on</emphasis>
12033 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;IteratorType&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>iteration_proxy;
12034 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;IteratorType&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>iteration_proxy_value;
12035 
12052 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
12053 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&#32;<emphasis role="comment">//&#32;NOLINT(cppcoreguidelines-special-member-functions,hicpp-special-member-functions)</emphasis>
12054 {
12056 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1iter__impl">other_iter_impl</link>&#32;=&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl&lt;typename std::conditional&lt;std::is_const&lt;BasicJsonType&gt;::value</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;std::remove_const&lt;BasicJsonType&gt;::type,&#32;<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&gt;;
12058 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">other_iter_impl</link>;
12059 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;BasicJsonType;
12060 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;iteration_proxy&lt;iter_impl&gt;;
12061 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;iteration_proxy_value&lt;iter_impl&gt;;
12062 
12063 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>object_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::object_t;
12064 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>array_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::array_t;
12065 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;make&#32;sure&#32;BasicJsonType&#32;is&#32;basic_json&#32;or&#32;const&#32;basic_json</emphasis>
12066 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<link linkend="_structnlohmann_1_1detail_1_1is__basic__json">is_basic_json&lt;typename std::remove_const&lt;BasicJsonType&gt;::type</link>&gt;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1ab447c50354c6611fa2ae0100ac17845c">::value</link>,
12067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;iter_impl&#32;only&#32;accepts&#32;(const)&#32;basic_json&quot;</emphasis>);
12068 
12069 &#32;&#32;<emphasis role="keyword">public</emphasis>:
12070 
12076 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1iter__impl_1ad9e091f5c70b34b5b1abc1ab15fd9106">iterator_category</link>&#32;=&#32;std::bidirectional_iterator_tag;
12077 
12079 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1iter__impl_1ab35586a44f2222272c5346baa3013f67">value_type</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::value_type;
12081 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">difference_type</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::difference_type;
12083 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a69e52f890ce8c556fd68ce109e24b360">pointer</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::conditional&lt;std::is_const&lt;BasicJsonType&gt;::value,
12084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::const_pointer,
12085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::pointer&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
12087 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a5be8001be099c6b82310f4d387b953ce">reference</link>&#32;=
12088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::conditional&lt;std::is_const&lt;BasicJsonType&gt;::value,
12089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::const_reference,
12090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::reference&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
12091 
12092 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a31090f248ce10fd7b386027c1a19c16f">iter_impl</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
12093 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a3fc5c9a782628d91047aa35f40bb7fdc">~iter_impl</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
12094 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a603ba9c477f878a69ed281becca6f56a">iter_impl</link>(<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&amp;&amp;)&#32;noexcept&#32;=&#32;default;
12095 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&amp;&#32;operator=(<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&amp;&amp;)&#32;noexcept&#32;=&#32;default;
12096 
12103 &#32;&#32;&#32;&#32;explicit&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>(<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a69e52f890ce8c556fd68ce109e24b360">pointer</link>&#32;<emphasis role="keywordtype">object</emphasis>)&#32;noexcept&#32;:&#32;m_object(<emphasis role="keywordtype">object</emphasis>)
12104 &#32;&#32;&#32;&#32;{
12105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(m_object&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
12106 
12107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(m_object-&gt;m_type)
12108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">value_t::object</link>:
12110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a8cb0af3498061426c1d0a65ad6220408">object_iterator</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;object_t::iterator();
12112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
12113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12114 
12115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">value_t::array</link>:
12116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a8294a6e6f01b58e1cce8fbae66a50b5d">array_iterator</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;array_t::iterator();
12118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
12119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12120 
12121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">value_t::null</link>:
12122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">value_t::string</link>:
12123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">value_t::boolean</link>:
12124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">value_t::number_integer</link>:
12125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">value_t::number_unsigned</link>:
12126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">value_t::number_float</link>:
12127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">value_t::binary</link>:
12128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">value_t::discarded</link>:
12129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
12130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a2b3bb45f968210e42c282017eeeb63a8">primitive_iterator</link>&#32;=&#32;primitive_iterator_t();
12132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
12133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12135 &#32;&#32;&#32;&#32;}
12136 
12153 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a71f84fb6e009619f12972bcf9002b8cd">iter_impl</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl&lt;const BasicJsonType&gt;</link>&amp;&#32;other)&#32;noexcept
12154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;m_object(other.m_object),&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>(other.m_it)
12155 &#32;&#32;&#32;&#32;{}
12156 
12163 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&amp;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a565fc40a5c685e6b216ac3eba93d7f99">operator=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl&lt;const BasicJsonType&gt;</link>&amp;&#32;other)&#32;<emphasis role="keyword">noexcept</emphasis>
12164 &#32;&#32;&#32;&#32;{
12165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&amp;other&#32;!=&#32;<emphasis role="keyword">this</emphasis>)
12166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_object&#32;=&#32;other.m_object;
12168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>&#32;=&#32;other.m_it;
12169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
12171 &#32;&#32;&#32;&#32;}
12172 
12178 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a867f7eb55091be31b013adb3e46816d3">iter_impl</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&lt;<emphasis role="keyword">typename</emphasis>&#32;std::remove_const&lt;BasicJsonType&gt;::type&gt;&amp;&#32;other)&#32;noexcept
12179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;m_object(other.m_object),&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>(other.m_it)
12180 &#32;&#32;&#32;&#32;{}
12181 
12188 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&amp;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a6c4bf19f552b496705fe0f0a130204dd">operator=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&lt;<emphasis role="keyword">typename</emphasis>&#32;std::remove_const&lt;BasicJsonType&gt;::type&gt;&amp;&#32;other)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//&#32;NOLINT(cert-oop54-cpp)</emphasis>
12189 &#32;&#32;&#32;&#32;{
12190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_object&#32;=&#32;other.m_object;
12191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>&#32;=&#32;other.m_it;
12192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
12193 &#32;&#32;&#32;&#32;}
12194 
12195 &#32;&#32;<link linkend="_json_8hpp_1a2cf645f34610e7f7d6e09ab88a2ab917">JSON_PRIVATE_UNLESS_TESTED</link>:
12200 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;set_begin()&#32;noexcept
12201 &#32;&#32;&#32;&#32;{
12202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(m_object&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
12203 
12204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(m_object-&gt;m_type)
12205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">value_t::object</link>:
12207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a8cb0af3498061426c1d0a65ad6220408">object_iterator</link>&#32;=&#32;m_object-&gt;m_value.object-&gt;begin();
12209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
12210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12211 
12212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">value_t::array</link>:
12213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a8294a6e6f01b58e1cce8fbae66a50b5d">array_iterator</link>&#32;=&#32;m_object-&gt;m_value.array-&gt;begin();
12215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
12216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12217 
12218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">value_t::null</link>:
12219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;set&#32;to&#32;end&#32;so&#32;begin()==end()&#32;is&#32;true:&#32;null&#32;is&#32;empty</emphasis>
12221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a2b3bb45f968210e42c282017eeeb63a8">primitive_iterator</link>.set_end();
12222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
12223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12224 
12225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">value_t::string</link>:
12226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">value_t::boolean</link>:
12227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">value_t::number_integer</link>:
12228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">value_t::number_unsigned</link>:
12229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">value_t::number_float</link>:
12230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">value_t::binary</link>:
12231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">value_t::discarded</link>:
12232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
12233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a2b3bb45f968210e42c282017eeeb63a8">primitive_iterator</link>.set_begin();
12235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
12236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12238 &#32;&#32;&#32;&#32;}
12239 
12244 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a23e50ad4c13aa62d9ac7f60a123823ee">set_end</link>()&#32;noexcept
12245 &#32;&#32;&#32;&#32;{
12246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(m_object&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
12247 
12248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(m_object-&gt;m_type)
12249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">value_t::object</link>:
12251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a8cb0af3498061426c1d0a65ad6220408">object_iterator</link>&#32;=&#32;m_object-&gt;m_value.object-&gt;end();
12253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
12254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12255 
12256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">value_t::array</link>:
12257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a8294a6e6f01b58e1cce8fbae66a50b5d">array_iterator</link>&#32;=&#32;m_object-&gt;m_value.array-&gt;end();
12259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
12260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12261 
12262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">value_t::null</link>:
12263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">value_t::string</link>:
12264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">value_t::boolean</link>:
12265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">value_t::number_integer</link>:
12266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">value_t::number_unsigned</link>:
12267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">value_t::number_float</link>:
12268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">value_t::binary</link>:
12269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">value_t::discarded</link>:
12270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
12271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a2b3bb45f968210e42c282017eeeb63a8">primitive_iterator</link>.set_end();
12273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
12274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12276 &#32;&#32;&#32;&#32;}
12277 
12278 &#32;&#32;<emphasis role="keyword">public</emphasis>:
12283 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a5be8001be099c6b82310f4d387b953ce">reference</link>&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a5ca57856d9bba54a5fc51cee891de827">operator*</link>()<emphasis role="keyword">&#32;const</emphasis>
12284 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
12285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(m_object&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
12286 
12287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(m_object-&gt;m_type)
12288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">value_t::object</link>:
12290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a8cb0af3498061426c1d0a65ad6220408">object_iterator</link>&#32;!=&#32;m_object-&gt;m_value.object-&gt;end());
12292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a8cb0af3498061426c1d0a65ad6220408">object_iterator</link>-&gt;second;
12293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12294 
12295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">value_t::array</link>:
12296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a8294a6e6f01b58e1cce8fbae66a50b5d">array_iterator</link>&#32;!=&#32;m_object-&gt;m_value.array-&gt;end());
12298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a8294a6e6f01b58e1cce8fbae66a50b5d">array_iterator</link>;
12299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12300 
12301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">value_t::null</link>:
12302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1invalid__iterator_1af6e8410249ce3252f5e7294cd4ef0a28">invalid_iterator::create</link>(214,&#32;<emphasis role="stringliteral">&quot;cannot&#32;get&#32;value&quot;</emphasis>,&#32;m_object));
12303 
12304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">value_t::string</link>:
12305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">value_t::boolean</link>:
12306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">value_t::number_integer</link>:
12307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">value_t::number_unsigned</link>:
12308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">value_t::number_float</link>:
12309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">value_t::binary</link>:
12310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">value_t::discarded</link>:
12311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
12312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0">JSON_HEDLEY_LIKELY</link>(<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a2b3bb45f968210e42c282017eeeb63a8">primitive_iterator</link>.is_begin()))
12314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*m_object;
12316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12317 
12318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1invalid__iterator_1af6e8410249ce3252f5e7294cd4ef0a28">invalid_iterator::create</link>(214,&#32;<emphasis role="stringliteral">&quot;cannot&#32;get&#32;value&quot;</emphasis>,&#32;m_object));
12319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12321 &#32;&#32;&#32;&#32;}
12322 
12327 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a69e52f890ce8c556fd68ce109e24b360">pointer</link>&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a6da3d2b34528aff328f3dcb513076dec">operator-&gt;</link>()<emphasis role="keyword">&#32;const</emphasis>
12328 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
12329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(m_object&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
12330 
12331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(m_object-&gt;m_type)
12332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">value_t::object</link>:
12334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a8cb0af3498061426c1d0a65ad6220408">object_iterator</link>&#32;!=&#32;m_object-&gt;m_value.object-&gt;end());
12336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;(<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a8cb0af3498061426c1d0a65ad6220408">object_iterator</link>-&gt;second);
12337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12338 
12339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">value_t::array</link>:
12340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a8294a6e6f01b58e1cce8fbae66a50b5d">array_iterator</link>&#32;!=&#32;m_object-&gt;m_value.array-&gt;end());
12342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;*<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a8294a6e6f01b58e1cce8fbae66a50b5d">array_iterator</link>;
12343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12344 
12345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">value_t::null</link>:
12346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">value_t::string</link>:
12347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">value_t::boolean</link>:
12348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">value_t::number_integer</link>:
12349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">value_t::number_unsigned</link>:
12350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">value_t::number_float</link>:
12351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">value_t::binary</link>:
12352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">value_t::discarded</link>:
12353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
12354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0">JSON_HEDLEY_LIKELY</link>(<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a2b3bb45f968210e42c282017eeeb63a8">primitive_iterator</link>.is_begin()))
12356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_object;
12358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12359 
12360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1invalid__iterator_1af6e8410249ce3252f5e7294cd4ef0a28">invalid_iterator::create</link>(214,&#32;<emphasis role="stringliteral">&quot;cannot&#32;get&#32;value&quot;</emphasis>,&#32;m_object));
12361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12363 &#32;&#32;&#32;&#32;}
12364 
12369 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1ace624462789947a281a7dfb748825e50">operator++</link>(<emphasis role="keywordtype">int</emphasis>)&amp;&#32;<emphasis role="comment">//&#32;NOLINT(cert-dcl21-cpp)</emphasis>
12370 &#32;&#32;&#32;&#32;{
12371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
12372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++(*this);
12373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
12374 &#32;&#32;&#32;&#32;}
12375 
12380 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&amp;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abd1c853b2f0092dc053d5a3631702d82">operator++</link>()
12381 &#32;&#32;&#32;&#32;{
12382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(m_object&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
12383 
12384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(m_object-&gt;m_type)
12385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">value_t::object</link>:
12387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::advance(<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a8cb0af3498061426c1d0a65ad6220408">object_iterator</link>,&#32;1);
12389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
12390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12391 
12392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">value_t::array</link>:
12393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::advance(<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a8294a6e6f01b58e1cce8fbae66a50b5d">array_iterator</link>,&#32;1);
12395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
12396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12397 
12398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">value_t::null</link>:
12399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">value_t::string</link>:
12400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">value_t::boolean</link>:
12401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">value_t::number_integer</link>:
12402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">value_t::number_unsigned</link>:
12403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">value_t::number_float</link>:
12404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">value_t::binary</link>:
12405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">value_t::discarded</link>:
12406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
12407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a2b3bb45f968210e42c282017eeeb63a8">primitive_iterator</link>;
12409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
12410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12412 
12413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
12414 &#32;&#32;&#32;&#32;}
12415 
12420 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1ae1d1c37c244b4d64ea44614b0838a0a4">operator--</link>(<emphasis role="keywordtype">int</emphasis>)&amp;&#32;<emphasis role="comment">//&#32;NOLINT(cert-dcl21-cpp)</emphasis>
12421 &#32;&#32;&#32;&#32;{
12422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
12423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--(*this);
12424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
12425 &#32;&#32;&#32;&#32;}
12426 
12431 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&amp;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a3c7a6bd94c22950a8dabf79367026d83">operator--</link>()
12432 &#32;&#32;&#32;&#32;{
12433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(m_object&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
12434 
12435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(m_object-&gt;m_type)
12436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">value_t::object</link>:
12438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::advance(<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a8cb0af3498061426c1d0a65ad6220408">object_iterator</link>,&#32;-1);
12440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
12441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12442 
12443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">value_t::array</link>:
12444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::advance(<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a8294a6e6f01b58e1cce8fbae66a50b5d">array_iterator</link>,&#32;-1);
12446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
12447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12448 
12449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">value_t::null</link>:
12450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">value_t::string</link>:
12451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">value_t::boolean</link>:
12452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">value_t::number_integer</link>:
12453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">value_t::number_unsigned</link>:
12454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">value_t::number_float</link>:
12455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">value_t::binary</link>:
12456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">value_t::discarded</link>:
12457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
12458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a2b3bb45f968210e42c282017eeeb63a8">primitive_iterator</link>;
12460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
12461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12463 
12464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
12465 &#32;&#32;&#32;&#32;}
12466 
12471 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;IterImpl,&#32;detail::enable_if_t&#32;&lt;&#32;(std::is_same&lt;IterImpl,&#32;iter_impl&gt;::value&#32;||&#32;std::is_same&lt;IterImpl,&#32;other_iter_impl&gt;::value),&#32;std::<emphasis role="keywordtype">nullptr</emphasis>_t&#32;&gt;&#32;=&#32;<emphasis role="keywordtype">nullptr</emphasis>&#32;&gt;
12472 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1aaddab83c2b4023cb0f0fdbc757c54f65">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;IterImpl&amp;&#32;other)<emphasis role="keyword">&#32;const</emphasis>
12473 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
12474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;objects&#32;are&#32;not&#32;the&#32;same,&#32;the&#32;comparison&#32;is&#32;undefined</emphasis>
12475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(m_object&#32;!=&#32;other.m_object))
12476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1invalid__iterator_1af6e8410249ce3252f5e7294cd4ef0a28">invalid_iterator::create</link>(212,&#32;<emphasis role="stringliteral">&quot;cannot&#32;compare&#32;iterators&#32;of&#32;different&#32;containers&quot;</emphasis>,&#32;m_object));
12478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12479 
12480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(m_object&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
12481 
12482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(m_object-&gt;m_type)
12483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">value_t::object</link>:
12485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a8cb0af3498061426c1d0a65ad6220408">object_iterator</link>&#32;==&#32;other.m_it.object_iterator);
12486 
12487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">value_t::array</link>:
12488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a8294a6e6f01b58e1cce8fbae66a50b5d">array_iterator</link>&#32;==&#32;other.m_it.array_iterator);
12489 
12490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">value_t::null</link>:
12491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">value_t::string</link>:
12492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">value_t::boolean</link>:
12493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">value_t::number_integer</link>:
12494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">value_t::number_unsigned</link>:
12495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">value_t::number_float</link>:
12496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">value_t::binary</link>:
12497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">value_t::discarded</link>:
12498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
12499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a2b3bb45f968210e42c282017eeeb63a8">primitive_iterator</link>&#32;==&#32;other.m_it.primitive_iterator);
12500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12501 &#32;&#32;&#32;&#32;}
12502 
12507 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;IterImpl,&#32;detail::enable_if_t&#32;&lt;&#32;(std::is_same&lt;IterImpl,&#32;iter_impl&gt;::value&#32;||&#32;std::is_same&lt;IterImpl,&#32;other_iter_impl&gt;::value),&#32;std::<emphasis role="keywordtype">nullptr</emphasis>_t&#32;&gt;&#32;=&#32;<emphasis role="keywordtype">nullptr</emphasis>&#32;&gt;
12508 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a190077df326c10886020bbcfaa169b20">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;IterImpl&amp;&#32;other)<emphasis role="keyword">&#32;const</emphasis>
12509 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
12510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1aaddab83c2b4023cb0f0fdbc757c54f65">operator==</link>(other);
12511 &#32;&#32;&#32;&#32;}
12512 
12517 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a0d14cd76203e00bdcef6a64a5d055cc7">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&amp;&#32;other)<emphasis role="keyword">&#32;const</emphasis>
12518 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
12519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;objects&#32;are&#32;not&#32;the&#32;same,&#32;the&#32;comparison&#32;is&#32;undefined</emphasis>
12520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(m_object&#32;!=&#32;other.m_object))
12521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1invalid__iterator_1af6e8410249ce3252f5e7294cd4ef0a28">invalid_iterator::create</link>(212,&#32;<emphasis role="stringliteral">&quot;cannot&#32;compare&#32;iterators&#32;of&#32;different&#32;containers&quot;</emphasis>,&#32;m_object));
12523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12524 
12525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(m_object&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
12526 
12527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(m_object-&gt;m_type)
12528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">value_t::object</link>:
12530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1invalid__iterator_1af6e8410249ce3252f5e7294cd4ef0a28">invalid_iterator::create</link>(213,&#32;<emphasis role="stringliteral">&quot;cannot&#32;compare&#32;order&#32;of&#32;object&#32;iterators&quot;</emphasis>,&#32;m_object));
12531 
12532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">value_t::array</link>:
12533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a8294a6e6f01b58e1cce8fbae66a50b5d">array_iterator</link>&#32;&lt;&#32;other.<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a8294a6e6f01b58e1cce8fbae66a50b5d">array_iterator</link>);
12534 
12535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">value_t::null</link>:
12536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">value_t::string</link>:
12537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">value_t::boolean</link>:
12538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">value_t::number_integer</link>:
12539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">value_t::number_unsigned</link>:
12540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">value_t::number_float</link>:
12541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">value_t::binary</link>:
12542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">value_t::discarded</link>:
12543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
12544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a2b3bb45f968210e42c282017eeeb63a8">primitive_iterator</link>&#32;&lt;&#32;other.<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a2b3bb45f968210e42c282017eeeb63a8">primitive_iterator</link>);
12545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12546 &#32;&#32;&#32;&#32;}
12547 
12552 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1ac6f71b36d7c87e427d1fee83f2600fad">operator&lt;=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&amp;&#32;other)<emphasis role="keyword">&#32;const</emphasis>
12553 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
12554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!other.operator&#32;&lt;&#32;(*this);
12555 &#32;&#32;&#32;&#32;}
12556 
12561 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1aaf3620b8dfa4bed8a9ac2b51dd55dbd7">operator&gt;</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&amp;&#32;other)<emphasis role="keyword">&#32;const</emphasis>
12562 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
12563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1ac6f71b36d7c87e427d1fee83f2600fad">operator&lt;=</link>(other);
12564 &#32;&#32;&#32;&#32;}
12565 
12570 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a634f85da575cb60b012a687efa26e11a">operator&gt;=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&amp;&#32;other)<emphasis role="keyword">&#32;const</emphasis>
12571 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
12572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a0d14cd76203e00bdcef6a64a5d055cc7">operator&lt;</link>(other);
12573 &#32;&#32;&#32;&#32;}
12574 
12579 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&amp;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1ae576098902fa32c109d9d036d30e0cd7">operator+=</link>(<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">difference_type</link>&#32;i)
12580 &#32;&#32;&#32;&#32;{
12581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(m_object&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
12582 
12583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(m_object-&gt;m_type)
12584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">value_t::object</link>:
12586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1invalid__iterator_1af6e8410249ce3252f5e7294cd4ef0a28">invalid_iterator::create</link>(209,&#32;<emphasis role="stringliteral">&quot;cannot&#32;use&#32;offsets&#32;with&#32;object&#32;iterators&quot;</emphasis>,&#32;m_object));
12587 
12588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">value_t::array</link>:
12589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::advance(<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a8294a6e6f01b58e1cce8fbae66a50b5d">array_iterator</link>,&#32;i);
12591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
12592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12593 
12594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">value_t::null</link>:
12595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">value_t::string</link>:
12596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">value_t::boolean</link>:
12597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">value_t::number_integer</link>:
12598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">value_t::number_unsigned</link>:
12599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">value_t::number_float</link>:
12600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">value_t::binary</link>:
12601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">value_t::discarded</link>:
12602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
12603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a2b3bb45f968210e42c282017eeeb63a8">primitive_iterator</link>&#32;+=&#32;i;
12605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
12606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12608 
12609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
12610 &#32;&#32;&#32;&#32;}
12611 
12616 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&amp;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1af0d52c75e651a915e3dc5cdab71c06bd">operator-=</link>(<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">difference_type</link>&#32;i)
12617 &#32;&#32;&#32;&#32;{
12618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1ae576098902fa32c109d9d036d30e0cd7">operator+=</link>(-i);
12619 &#32;&#32;&#32;&#32;}
12620 
12625 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8ef76aeb5a5032768f0f61f48ac189c0">operator+</link>(<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">difference_type</link>&#32;i)<emphasis role="keyword">&#32;const</emphasis>
12626 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
12627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
12628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;+=&#32;i;
12629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
12630 &#32;&#32;&#32;&#32;}
12631 
12636 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a94108d1a7563e103534f23eb5c1ee175">operator+</link>(<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">difference_type</link>&#32;i,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&amp;&#32;it)
12637 &#32;&#32;&#32;&#32;{
12638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;it;
12639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;+=&#32;i;
12640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
12641 &#32;&#32;&#32;&#32;}
12642 
12647 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a0dd9c415b94a02ff2aa25da75e52da30">operator-</link>(<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">difference_type</link>&#32;i)<emphasis role="keyword">&#32;const</emphasis>
12648 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
12649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
12650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;-=&#32;i;
12651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
12652 &#32;&#32;&#32;&#32;}
12653 
12658 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">difference_type</link>&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a49bf3e708a9c1c88c415011735962d06">operator-</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&amp;&#32;other)<emphasis role="keyword">&#32;const</emphasis>
12659 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
12660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(m_object&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
12661 
12662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(m_object-&gt;m_type)
12663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">value_t::object</link>:
12665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1invalid__iterator_1af6e8410249ce3252f5e7294cd4ef0a28">invalid_iterator::create</link>(209,&#32;<emphasis role="stringliteral">&quot;cannot&#32;use&#32;offsets&#32;with&#32;object&#32;iterators&quot;</emphasis>,&#32;m_object));
12666 
12667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">value_t::array</link>:
12668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a8294a6e6f01b58e1cce8fbae66a50b5d">array_iterator</link>&#32;-&#32;other.<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a8294a6e6f01b58e1cce8fbae66a50b5d">array_iterator</link>;
12669 
12670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">value_t::null</link>:
12671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">value_t::string</link>:
12672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">value_t::boolean</link>:
12673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">value_t::number_integer</link>:
12674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">value_t::number_unsigned</link>:
12675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">value_t::number_float</link>:
12676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">value_t::binary</link>:
12677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">value_t::discarded</link>:
12678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
12679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a2b3bb45f968210e42c282017eeeb63a8">primitive_iterator</link>&#32;-&#32;other.<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a2b3bb45f968210e42c282017eeeb63a8">primitive_iterator</link>;
12680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12681 &#32;&#32;&#32;&#32;}
12682 
12687 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a5be8001be099c6b82310f4d387b953ce">reference</link>&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1ac0b9276f1102ed4b9cd3f5f56287e3ce">operator[]</link>(<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">difference_type</link>&#32;n)<emphasis role="keyword">&#32;const</emphasis>
12688 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
12689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(m_object&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
12690 
12691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(m_object-&gt;m_type)
12692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">value_t::object</link>:
12694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1invalid__iterator_1af6e8410249ce3252f5e7294cd4ef0a28">invalid_iterator::create</link>(208,&#32;<emphasis role="stringliteral">&quot;cannot&#32;use&#32;operator[]&#32;for&#32;object&#32;iterators&quot;</emphasis>,&#32;m_object));
12695 
12696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">value_t::array</link>:
12697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*std::next(<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a8294a6e6f01b58e1cce8fbae66a50b5d">array_iterator</link>,&#32;n);
12698 
12699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">value_t::null</link>:
12700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1invalid__iterator_1af6e8410249ce3252f5e7294cd4ef0a28">invalid_iterator::create</link>(214,&#32;<emphasis role="stringliteral">&quot;cannot&#32;get&#32;value&quot;</emphasis>,&#32;m_object));
12701 
12702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">value_t::string</link>:
12703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">value_t::boolean</link>:
12704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">value_t::number_integer</link>:
12705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">value_t::number_unsigned</link>:
12706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">value_t::number_float</link>:
12707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">value_t::binary</link>:
12708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">value_t::discarded</link>:
12709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
12710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0">JSON_HEDLEY_LIKELY</link>(<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a2b3bb45f968210e42c282017eeeb63a8">primitive_iterator</link>.get_value()&#32;==&#32;-n))
12712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*m_object;
12714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12715 
12716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1invalid__iterator_1af6e8410249ce3252f5e7294cd4ef0a28">invalid_iterator::create</link>(214,&#32;<emphasis role="stringliteral">&quot;cannot&#32;get&#32;value&quot;</emphasis>,&#32;m_object));
12717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12719 &#32;&#32;&#32;&#32;}
12720 
12725 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;object_t::key_type&amp;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a9aa08ccaf6e80f7bd9513c0d054efb64">key</link>()<emphasis role="keyword">&#32;const</emphasis>
12726 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
12727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(m_object&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
12728 
12729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0">JSON_HEDLEY_LIKELY</link>(m_object-&gt;is_object()))
12730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a8cb0af3498061426c1d0a65ad6220408">object_iterator</link>-&gt;first;
12732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12733 
12734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1invalid__iterator_1af6e8410249ce3252f5e7294cd4ef0a28">invalid_iterator::create</link>(207,&#32;<emphasis role="stringliteral">&quot;cannot&#32;use&#32;key()&#32;for&#32;non-object&#32;iterators&quot;</emphasis>,&#32;m_object));
12735 &#32;&#32;&#32;&#32;}
12736 
12741 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a5be8001be099c6b82310f4d387b953ce">reference</link>&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1ab447c50354c6611fa2ae0100ac17845c">value</link>()<emphasis role="keyword">&#32;const</emphasis>
12742 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
12743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a5ca57856d9bba54a5fc51cee891de827">operator*</link>();
12744 &#32;&#32;&#32;&#32;}
12745 
12746 &#32;&#32;<link linkend="_json_8hpp_1a2cf645f34610e7f7d6e09ab88a2ab917">JSON_PRIVATE_UNLESS_TESTED</link>:
12748 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a69e52f890ce8c556fd68ce109e24b360">pointer</link>&#32;m_object&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
12750 &#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1internal__iterator">internal_iterator&lt;typename std::remove_const&lt;BasicJsonType&gt;::type</link>&gt;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>&#32;{};
12751 };
12752 }&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
12753 }&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann</emphasis>
12754 
12755 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/iterators/iteration_proxy.hpp&gt;</emphasis>
12756 
12757 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/iterators/json_reverse_iterator.hpp&gt;</emphasis>
12758 
12759 
12760 <emphasis role="preprocessor">#include&#32;&lt;cstddef&gt;</emphasis>&#32;<emphasis role="comment">//&#32;ptrdiff_t</emphasis>
12761 <emphasis role="preprocessor">#include&#32;&lt;iterator&gt;</emphasis>&#32;<emphasis role="comment">//&#32;reverse_iterator</emphasis>
12762 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>&#32;<emphasis role="comment">//&#32;declval</emphasis>
12763 
12764 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann">nlohmann</link>
12765 {
12766 <emphasis role="keyword">namespace&#32;</emphasis>detail
12767 {
12769 <emphasis role="comment">//&#32;reverse_iterator&#32;//</emphasis>
12771 
12790 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Base&gt;
12791 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator">json_reverse_iterator</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;std::reverse_iterator&lt;Base&gt;
12792 {
12793 &#32;&#32;<emphasis role="keyword">public</emphasis>:
12794 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator_1a9ab55987c05ec6427ad36082e351cc45">difference_type</link>&#32;=&#32;std::ptrdiff_t;
12796 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator_1a6b2ef1d632fe49bfcc22fbd1abd62395">base_iterator</link>&#32;=&#32;std::reverse_iterator&lt;Base&gt;;
12798 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator_1a42f51a69bac7b2aebb613b2164e457f1">reference</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;Base::reference;
12799 
12801 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator_1a0246de16ece16293f2917dfa5d96e278">json_reverse_iterator</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;base_iterator::iterator_type&amp;&#32;it)&#32;noexcept
12802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator_1a6b2ef1d632fe49bfcc22fbd1abd62395">base_iterator</link>(it)&#32;{}
12803 
12805 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator_1a6c2d025530114ed989188e8adfc8467e">json_reverse_iterator</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator_1a6b2ef1d632fe49bfcc22fbd1abd62395">base_iterator</link>&amp;&#32;it)&#32;noexcept&#32;:&#32;<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator_1a6b2ef1d632fe49bfcc22fbd1abd62395">base_iterator</link>(it)&#32;{}
12806 
12808 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator">json_reverse_iterator</link>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator_1abe59030fe80330d027ef7386161c3b52">operator++</link>(<emphasis role="keywordtype">int</emphasis>)&amp;&#32;<emphasis role="comment">//&#32;NOLINT(cert-dcl21-cpp)</emphasis>
12809 &#32;&#32;&#32;&#32;{
12810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator">json_reverse_iterator</link><emphasis role="keyword">&gt;</emphasis>(base_iterator::operator++(1));
12811 &#32;&#32;&#32;&#32;}
12812 
12814 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator">json_reverse_iterator</link>&amp;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator_1af59444009efa2f8038191090d113f8db">operator++</link>()
12815 &#32;&#32;&#32;&#32;{
12816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator">json_reverse_iterator</link>&amp;<emphasis role="keyword">&gt;</emphasis>(base_iterator::operator++());
12817 &#32;&#32;&#32;&#32;}
12818 
12820 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator">json_reverse_iterator</link>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator_1a92660242206cdff8a1d1e28e58698b19">operator--</link>(<emphasis role="keywordtype">int</emphasis>)&amp;&#32;<emphasis role="comment">//&#32;NOLINT(cert-dcl21-cpp)</emphasis>
12821 &#32;&#32;&#32;&#32;{
12822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator">json_reverse_iterator</link><emphasis role="keyword">&gt;</emphasis>(base_iterator::operator--(1));
12823 &#32;&#32;&#32;&#32;}
12824 
12826 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator">json_reverse_iterator</link>&amp;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator_1adf01962240de86b1882b62525534589a">operator--</link>()
12827 &#32;&#32;&#32;&#32;{
12828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator">json_reverse_iterator</link>&amp;<emphasis role="keyword">&gt;</emphasis>(base_iterator::operator--());
12829 &#32;&#32;&#32;&#32;}
12830 
12832 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator">json_reverse_iterator</link>&amp;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator_1a595336e4d683e7df647bba2cfc9bb544">operator+=</link>(<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator_1a9ab55987c05ec6427ad36082e351cc45">difference_type</link>&#32;i)
12833 &#32;&#32;&#32;&#32;{
12834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator">json_reverse_iterator</link>&amp;<emphasis role="keyword">&gt;</emphasis>(base_iterator::operator+=(i));
12835 &#32;&#32;&#32;&#32;}
12836 
12838 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator">json_reverse_iterator</link>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator_1aabf172b436988e2edde22f13f27caaed">operator+</link>(<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator_1a9ab55987c05ec6427ad36082e351cc45">difference_type</link>&#32;i)<emphasis role="keyword">&#32;const</emphasis>
12839 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
12840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator">json_reverse_iterator</link><emphasis role="keyword">&gt;</emphasis>(base_iterator::operator+(i));
12841 &#32;&#32;&#32;&#32;}
12842 
12844 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator">json_reverse_iterator</link>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator_1a549c6eb10b6434eaf772f71d129a6d79">operator-</link>(<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator_1a9ab55987c05ec6427ad36082e351cc45">difference_type</link>&#32;i)<emphasis role="keyword">&#32;const</emphasis>
12845 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
12846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator">json_reverse_iterator</link><emphasis role="keyword">&gt;</emphasis>(base_iterator::operator-(i));
12847 &#32;&#32;&#32;&#32;}
12848 
12850 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator_1a9ab55987c05ec6427ad36082e351cc45">difference_type</link>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator_1aaaa6c0b1d74e74e35e5f7b56dfd6c5d1">operator-</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator">json_reverse_iterator</link>&amp;&#32;other)<emphasis role="keyword">&#32;const</emphasis>
12851 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
12852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator_1a6b2ef1d632fe49bfcc22fbd1abd62395">base_iterator</link>(*<emphasis role="keyword">this</emphasis>)&#32;-&#32;<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator_1a6b2ef1d632fe49bfcc22fbd1abd62395">base_iterator</link>(other);
12853 &#32;&#32;&#32;&#32;}
12854 
12856 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator_1a42f51a69bac7b2aebb613b2164e457f1">reference</link>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator_1a8ed9e445e03c49c46612eb7f7d55bb61">operator[]</link>(<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator_1a9ab55987c05ec6427ad36082e351cc45">difference_type</link>&#32;n)<emphasis role="keyword">&#32;const</emphasis>
12857 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
12858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*(this-&gt;<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator_1aabf172b436988e2edde22f13f27caaed">operator+</link>(n));
12859 &#32;&#32;&#32;&#32;}
12860 
12862 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator_1adc648a641e8e9a1072c5abd56ad06401">key</link>()&#32;const&#32;-&gt;&#32;decltype(<link linkend="_namespacestd">std</link>::declval&lt;Base&gt;().<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator_1adc648a641e8e9a1072c5abd56ad06401">key</link>())
12863 &#32;&#32;&#32;&#32;{
12864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;--this-&gt;base();
12865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;it.key();
12866 &#32;&#32;&#32;&#32;}
12867 
12869 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator_1a42f51a69bac7b2aebb613b2164e457f1">reference</link>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator_1ae22803d442d483041d17239615f83b58">value</link>()<emphasis role="keyword">&#32;const</emphasis>
12870 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
12871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;--this-&gt;base();
12872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;it.operator&#32;*&#32;();
12873 &#32;&#32;&#32;&#32;}
12874 };
12875 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
12876 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann</emphasis>
12877 
12878 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/iterators/primitive_iterator.hpp&gt;</emphasis>
12879 
12880 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/json_pointer.hpp&gt;</emphasis>
12881 
12882 
12883 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>&#32;<emphasis role="comment">//&#32;all_of</emphasis>
12884 <emphasis role="preprocessor">#include&#32;&lt;cctype&gt;</emphasis>&#32;<emphasis role="comment">//&#32;isdigit</emphasis>
12885 <emphasis role="preprocessor">#include&#32;&lt;cerrno&gt;</emphasis>&#32;<emphasis role="comment">//&#32;errno,&#32;ERANGE</emphasis>
12886 <emphasis role="preprocessor">#include&#32;&lt;cstdlib&gt;</emphasis>&#32;<emphasis role="comment">//&#32;strtoull</emphasis>
12887 <emphasis role="preprocessor">#include&#32;&lt;limits&gt;</emphasis>&#32;<emphasis role="comment">//&#32;max</emphasis>
12888 <emphasis role="preprocessor">#include&#32;&lt;numeric&gt;</emphasis>&#32;<emphasis role="comment">//&#32;accumulate</emphasis>
12889 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>&#32;<emphasis role="comment">//&#32;string</emphasis>
12890 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>&#32;<emphasis role="comment">//&#32;move</emphasis>
12891 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>&#32;<emphasis role="comment">//&#32;vector</emphasis>
12892 
12893 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/exceptions.hpp&gt;</emphasis>
12894 
12895 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/macro_scope.hpp&gt;</emphasis>
12896 
12897 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/string_concat.hpp&gt;</emphasis>
12898 
12899 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/string_escape.hpp&gt;</emphasis>
12900 
12901 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/value_t.hpp&gt;</emphasis>
12902 
12903 
12904 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann">nlohmann</link>
12905 {
12906 
12909 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;RefStringType&gt;
12910 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>
12911 {
12912 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;allow&#32;basic_json&#32;to&#32;access&#32;private&#32;members</emphasis>
12913 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a0643bd74c2dc6f0e4e420b8190ea8f0f">NLOHMANN_BASIC_JSON_TPL_DECLARATION</link>
12914 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classnlohmann_1_1basic__json">basic_json</link>;
12915 
12916 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&gt;
12917 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>;
12918 
12919 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
12920 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>string_t_helper
12921 &#32;&#32;&#32;&#32;{
12922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;T;
12923 &#32;&#32;&#32;&#32;};
12924 
12925 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a0643bd74c2dc6f0e4e420b8190ea8f0f">NLOHMANN_BASIC_JSON_TPL_DECLARATION</link>
12926 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>string_t_helper&lt;<link linkend="_json_8hpp_1a80b7254e63f199a1f656f07ae551f632">NLOHMANN_BASIC_JSON_TPL</link>&gt;
12927 &#32;&#32;&#32;&#32;{
12928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;StringType;
12929 &#32;&#32;&#32;&#32;};
12930 
12931 &#32;&#32;<emphasis role="keyword">public</emphasis>:
12932 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;backwards&#32;compatibility&#32;accept&#32;BasicJsonType</emphasis>
12933 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1json__pointer_1a826c0f3ce730d635ad97de664fda6e30">string_t</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;string_t_helper&lt;RefStringType&gt;::type;
12934 
12937 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_classnlohmann_1_1json__pointer_1ae43313ad1469e4d47cc39ad52d1b82bd">json_pointer</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1json__pointer_1a826c0f3ce730d635ad97de664fda6e30">string_t</link>&amp;&#32;s&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>)
12938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;reference_tokens(split(s))
12939 &#32;&#32;&#32;&#32;{}
12940 
12943 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1json__pointer_1a826c0f3ce730d635ad97de664fda6e30">string_t</link>&#32;<link linkend="_classnlohmann_1_1json__pointer_1ab2c6132c50ff78bedc3d8ab6db6f23a1">to_string</link>()<emphasis role="keyword">&#32;const</emphasis>
12944 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
12945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::accumulate(reference_tokens.begin(),&#32;reference_tokens.end(),
12946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1json__pointer_1a826c0f3ce730d635ad97de664fda6e30">string_t</link>{},
12947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1json__pointer_1a826c0f3ce730d635ad97de664fda6e30">string_t</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1json__pointer_1a826c0f3ce730d635ad97de664fda6e30">string_t</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>)
12948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;detail::concat(a,&#32;<emphasis role="stringliteral">&apos;/&apos;</emphasis>,&#32;detail::escape(b));
12950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
12951 &#32;&#32;&#32;&#32;}
12952 
12955 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="_classnlohmann_1_1json__pointer_1a826c0f3ce730d635ad97de664fda6e30">string_t</link>()<emphasis role="keyword">&#32;const</emphasis>
12956 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
12957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1json__pointer_1ab2c6132c50ff78bedc3d8ab6db6f23a1">to_string</link>();
12958 &#32;&#32;&#32;&#32;}
12959 
12962 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&amp;&#32;<link linkend="_classnlohmann_1_1json__pointer_1a8f02bdad016c1272ef8e2ef3ec28136e">operator/=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&amp;&#32;ptr)
12963 &#32;&#32;&#32;&#32;{
12964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference_tokens.insert(reference_tokens.end(),
12965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ptr.reference_tokens.begin(),
12966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ptr.reference_tokens.end());
12967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
12968 &#32;&#32;&#32;&#32;}
12969 
12972 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&amp;&#32;<link linkend="_classnlohmann_1_1json__pointer_1adf64bf6e57ffed9e3bb4d90f3e9549da">operator/=</link>(<link linkend="_classnlohmann_1_1json__pointer_1a826c0f3ce730d635ad97de664fda6e30">string_t</link>&#32;token)
12973 &#32;&#32;&#32;&#32;{
12974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1json__pointer_1a81331ad76bfafea2cb35c561443d66bc">push_back</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(token));
12975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
12976 &#32;&#32;&#32;&#32;}
12977 
12980 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&amp;&#32;<link linkend="_classnlohmann_1_1json__pointer_1a57646ebbf9b0cfd13b2a462db3cbd5df">operator/=</link>(std::size_t&#32;array_idx)
12981 &#32;&#32;&#32;&#32;{
12982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;/=&#32;std::to_string(array_idx);
12983 &#32;&#32;&#32;&#32;}
12984 
12987 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&#32;<link linkend="_classnlohmann_1_1json__pointer_1a90a11fe6c7f37b1746a3ff9cb24b0d53">operator/</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&amp;&#32;lhs,
12988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&amp;&#32;rhs)
12989 &#32;&#32;&#32;&#32;{
12990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1json__pointer_1ab0a623288bc1272870149ad50f799a73">json_pointer</link>(lhs)&#32;/=&#32;rhs;
12991 &#32;&#32;&#32;&#32;}
12992 
12995 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&#32;<link linkend="_classnlohmann_1_1json__pointer_1a116956f4487af44732dd685e970679b0">operator/</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&amp;&#32;lhs,&#32;<link linkend="_classnlohmann_1_1json__pointer_1a826c0f3ce730d635ad97de664fda6e30">string_t</link>&#32;token)&#32;<emphasis role="comment">//&#32;NOLINT(performance-unnecessary-value-param)</emphasis>
12996 &#32;&#32;&#32;&#32;{
12997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1json__pointer_1ab0a623288bc1272870149ad50f799a73">json_pointer</link>(lhs)&#32;/=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(token);
12998 &#32;&#32;&#32;&#32;}
12999 
13002 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&#32;<link linkend="_classnlohmann_1_1json__pointer_1a29f6d4b492e784b9d196b05a4048c289">operator/</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&amp;&#32;lhs,&#32;std::size_t&#32;array_idx)
13003 &#32;&#32;&#32;&#32;{
13004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1json__pointer_1ab0a623288bc1272870149ad50f799a73">json_pointer</link>(lhs)&#32;/=&#32;array_idx;
13005 &#32;&#32;&#32;&#32;}
13006 
13009 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&#32;<link linkend="_classnlohmann_1_1json__pointer_1a39505b2d151e4360460ad588d66c5640">parent_pointer</link>()<emphasis role="keyword">&#32;const</emphasis>
13010 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
13011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classnlohmann_1_1json__pointer_1a4c881fe3be1eecbeb3a5a27494d8c77b">empty</link>())
13012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
13014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13015 
13016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
13017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>.<link linkend="_classnlohmann_1_1json__pointer_1a23ec0f3f5d976a81cf387287375be57e">pop_back</link>();
13018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>;
13019 &#32;&#32;&#32;&#32;}
13020 
13023 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classnlohmann_1_1json__pointer_1a23ec0f3f5d976a81cf387287375be57e">pop_back</link>()
13024 &#32;&#32;&#32;&#32;{
13025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(<link linkend="_classnlohmann_1_1json__pointer_1a4c881fe3be1eecbeb3a5a27494d8c77b">empty</link>()))
13026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1out__of__range_1a4c0af7bdbf4f20e0812900639829028e">detail::out_of_range::create</link>(405,&#32;<emphasis role="stringliteral">&quot;JSON&#32;pointer&#32;has&#32;no&#32;parent&quot;</emphasis>,&#32;<emphasis role="keyword">nullptr</emphasis>));
13028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13029 
13030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference_tokens.pop_back();
13031 &#32;&#32;&#32;&#32;}
13032 
13035 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1json__pointer_1a826c0f3ce730d635ad97de664fda6e30">string_t</link>&amp;&#32;<link linkend="_classnlohmann_1_1json__pointer_1abbc006b3be9df020d85bd3c645080bca">back</link>()<emphasis role="keyword">&#32;const</emphasis>
13036 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
13037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(<link linkend="_classnlohmann_1_1json__pointer_1a4c881fe3be1eecbeb3a5a27494d8c77b">empty</link>()))
13038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1out__of__range_1a4c0af7bdbf4f20e0812900639829028e">detail::out_of_range::create</link>(405,&#32;<emphasis role="stringliteral">&quot;JSON&#32;pointer&#32;has&#32;no&#32;parent&quot;</emphasis>,&#32;<emphasis role="keyword">nullptr</emphasis>));
13040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13041 
13042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;reference_tokens.back();
13043 &#32;&#32;&#32;&#32;}
13044 
13047 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classnlohmann_1_1json__pointer_1a81331ad76bfafea2cb35c561443d66bc">push_back</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1json__pointer_1a826c0f3ce730d635ad97de664fda6e30">string_t</link>&amp;&#32;token)
13048 &#32;&#32;&#32;&#32;{
13049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference_tokens.push_back(token);
13050 &#32;&#32;&#32;&#32;}
13051 
13054 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classnlohmann_1_1json__pointer_1af10dea6483c3c8f743970c789ae01644">push_back</link>(<link linkend="_classnlohmann_1_1json__pointer_1a826c0f3ce730d635ad97de664fda6e30">string_t</link>&amp;&amp;&#32;token)
13055 &#32;&#32;&#32;&#32;{
13056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference_tokens.push_back(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(token));
13057 &#32;&#32;&#32;&#32;}
13058 
13061 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1json__pointer_1a4c881fe3be1eecbeb3a5a27494d8c77b">empty</link>()&#32;const&#32;noexcept
13062 &#32;&#32;&#32;&#32;{
13063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;reference_tokens.empty();
13064 &#32;&#32;&#32;&#32;}
13065 
13066 &#32;&#32;<emphasis role="keyword">private</emphasis>:
13077 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
13078 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::size_type&#32;array_index(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1json__pointer_1a826c0f3ce730d635ad97de664fda6e30">string_t</link>&amp;&#32;s)
13079 &#32;&#32;&#32;&#32;{
13080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>size_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::size_type;
13081 
13082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;error&#32;condition&#32;(cf.&#32;RFC&#32;6901,&#32;Sect.&#32;4)</emphasis>
13083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(s.size()&#32;&gt;&#32;1&#32;&amp;&amp;&#32;s[0]&#32;==&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>))
13084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">detail::parse_error::create</link>(106,&#32;0,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;array&#32;index&#32;&apos;&quot;</emphasis>,&#32;s,&#32;<emphasis role="stringliteral">&quot;&apos;&#32;must&#32;not&#32;begin&#32;with&#32;&apos;0&apos;&quot;</emphasis>),&#32;<emphasis role="keyword">nullptr</emphasis>));
13086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13087 
13088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;error&#32;condition&#32;(cf.&#32;RFC&#32;6901,&#32;Sect.&#32;4)</emphasis>
13089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(s.size()&#32;&gt;&#32;1&#32;&amp;&amp;&#32;!(s[0]&#32;&gt;=&#32;<emphasis role="charliteral">&apos;1&apos;</emphasis>&#32;&amp;&amp;&#32;s[0]&#32;&lt;=&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>)))
13090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">detail::parse_error::create</link>(109,&#32;0,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;array&#32;index&#32;&apos;&quot;</emphasis>,&#32;s,&#32;<emphasis role="stringliteral">&quot;&apos;&#32;is&#32;not&#32;a&#32;number&quot;</emphasis>),&#32;<emphasis role="keyword">nullptr</emphasis>));
13092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13093 
13094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;p&#32;=&#32;s.c_str();
13095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>*&#32;p_end&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
13096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;errno&#32;=&#32;0;&#32;<emphasis role="comment">//&#32;strtoull&#32;doesn&apos;t&#32;reset&#32;errno</emphasis>
13097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;=&#32;std::strtoull(p,&#32;&amp;p_end,&#32;10);&#32;<emphasis role="comment">//&#32;NOLINT(runtime/int)</emphasis>
13098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p&#32;==&#32;p_end&#32;<emphasis role="comment">//&#32;invalid&#32;input&#32;or&#32;empty&#32;string</emphasis>
13099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;errno&#32;==&#32;ERANGE&#32;<emphasis role="comment">//&#32;out&#32;of&#32;range</emphasis>
13100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(p_end&#32;-&#32;p)&#32;!=&#32;s.size()))&#32;<emphasis role="comment">//&#32;incomplete&#32;read</emphasis>
13101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1out__of__range_1a4c0af7bdbf4f20e0812900639829028e">detail::out_of_range::create</link>(404,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;unresolved&#32;reference&#32;token&#32;&apos;&quot;</emphasis>,&#32;s,&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis>),&#32;<emphasis role="keyword">nullptr</emphasis>));
13103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13104 
13105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;only&#32;triggered&#32;on&#32;special&#32;platforms&#32;(like&#32;32bit),&#32;see&#32;also</emphasis>
13106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;https://github.com/nlohmann/json/pull/2203</emphasis>
13107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;&gt;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis><emphasis role="keyword">&gt;</emphasis>((std::numeric_limits&lt;size_type&gt;::max)()))&#32;&#32;<emphasis role="comment">//&#32;NOLINT(runtime/int)</emphasis>
13108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1out__of__range_1a4c0af7bdbf4f20e0812900639829028e">detail::out_of_range::create</link>(410,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;array&#32;index&#32;&quot;</emphasis>,&#32;s,&#32;<emphasis role="stringliteral">&quot;&#32;exceeds&#32;size_type&quot;</emphasis>),&#32;<emphasis role="keyword">nullptr</emphasis>));&#32;&#32;&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
13110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13111 
13112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>size_type<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>);
13113 &#32;&#32;&#32;&#32;}
13114 
13115 &#32;&#32;<link linkend="_json_8hpp_1a2cf645f34610e7f7d6e09ab88a2ab917">JSON_PRIVATE_UNLESS_TESTED</link>:
13116 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1json__pointer_1ab0a623288bc1272870149ad50f799a73">json_pointer</link>&#32;top()<emphasis role="keyword">&#32;const</emphasis>
13117 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
13118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(<link linkend="_classnlohmann_1_1json__pointer_1a4c881fe3be1eecbeb3a5a27494d8c77b">empty</link>()))
13119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1out__of__range_1a4c0af7bdbf4f20e0812900639829028e">detail::out_of_range::create</link>(405,&#32;<emphasis role="stringliteral">&quot;JSON&#32;pointer&#32;has&#32;no&#32;parent&quot;</emphasis>,&#32;<emphasis role="keyword">nullptr</emphasis>));
13121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13122 
13123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1json__pointer_1ab0a623288bc1272870149ad50f799a73">json_pointer</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
13124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.reference_tokens&#32;=&#32;{reference_tokens[0]};
13125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
13126 &#32;&#32;&#32;&#32;}
13127 
13128 &#32;&#32;<emphasis role="keyword">private</emphasis>:
13137 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
13138 &#32;&#32;&#32;&#32;BasicJsonType&amp;&#32;get_and_create(BasicJsonType&amp;&#32;j)<emphasis role="keyword">&#32;const</emphasis>
13139 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
13140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>*&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;&amp;j;
13141 
13142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;in&#32;case&#32;no&#32;reference&#32;tokens&#32;exist,&#32;return&#32;a&#32;reference&#32;to&#32;the&#32;JSON&#32;value</emphasis>
13143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;j&#32;which&#32;will&#32;be&#32;overwritten&#32;by&#32;a&#32;primitive&#32;value</emphasis>
13144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;reference_token&#32;:&#32;reference_tokens)
13145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;type())
13147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">detail::value_t::null</link>:
13149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(reference_token&#32;==&#32;<emphasis role="stringliteral">&quot;0&quot;</emphasis>)
13151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;start&#32;a&#32;new&#32;array&#32;if&#32;reference&#32;token&#32;is&#32;0</emphasis>
13153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;&amp;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;operator[](0);
13154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
13156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;start&#32;a&#32;new&#32;object&#32;otherwise</emphasis>
13158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;&amp;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;operator[](reference_token);
13159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
13161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13162 
13163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">detail::value_t::object</link>:
13164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;create&#32;an&#32;entry&#32;in&#32;the&#32;object</emphasis>
13166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;&amp;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;operator[](reference_token);
13167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
13168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13169 
13170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">detail::value_t::array</link>:
13171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;create&#32;an&#32;entry&#32;in&#32;the&#32;array</emphasis>
13173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;&amp;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;operator[](array_index&lt;BasicJsonType&gt;(reference_token));
13174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
13175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13176 
13177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
13178 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;The&#32;following&#32;code&#32;is&#32;only&#32;reached&#32;if&#32;there&#32;exists&#32;a&#32;reference</emphasis>
13179 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token&#32;_and_&#32;the&#32;current&#32;value&#32;is&#32;primitive.&#32;In&#32;this&#32;case,&#32;we&#32;have</emphasis>
13180 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;an&#32;error&#32;situation,&#32;because&#32;primitive&#32;values&#32;may&#32;only&#32;occur&#32;as</emphasis>
13181 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;single&#32;value;&#32;that&#32;is,&#32;with&#32;an&#32;empty&#32;list&#32;of&#32;reference&#32;tokens.</emphasis>
13182 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
13183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">detail::value_t::string</link>:
13184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">detail::value_t::boolean</link>:
13185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">detail::value_t::number_integer</link>:
13186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">detail::value_t::number_unsigned</link>:
13187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">detail::value_t::number_float</link>:
13188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">detail::value_t::binary</link>:
13189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">detail::value_t::discarded</link>:
13190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
13191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">detail::type_error::create</link>(313,&#32;<emphasis role="stringliteral">&quot;invalid&#32;value&#32;to&#32;unflatten&quot;</emphasis>,&#32;&amp;j));
13192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13194 
13195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
13196 &#32;&#32;&#32;&#32;}
13197 
13217 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
13218 &#32;&#32;&#32;&#32;BasicJsonType&amp;&#32;get_unchecked(BasicJsonType*&#32;ptr)<emphasis role="keyword">&#32;const</emphasis>
13219 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
13220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;reference_token&#32;:&#32;reference_tokens)
13221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;convert&#32;null&#32;values&#32;to&#32;arrays&#32;or&#32;objects&#32;before&#32;continuing</emphasis>
13223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ptr-&gt;is_null())
13224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;if&#32;reference&#32;token&#32;is&#32;a&#32;number</emphasis>
13226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;nums&#32;=
13227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1af69ea32ebd7865fb57714d6b5f12f26d">std::all_of</link>(reference_token.begin(),&#32;reference_token.end(),
13228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
13229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;std::isdigit(x);
13231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
13232 
13233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;change&#32;value&#32;to&#32;array&#32;for&#32;numbers&#32;or&#32;&quot;-&quot;&#32;or&#32;to&#32;object&#32;otherwise</emphasis>
13234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*ptr&#32;=&#32;(nums&#32;||&#32;reference_token&#32;==&#32;<emphasis role="stringliteral">&quot;-&quot;</emphasis>)
13235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">detail::value_t::array</link>
13236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;detail::<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link>::<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab49790263c78300fbf05719e38246198">object</link>;
13237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13238 
13239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(ptr-&gt;type())
13240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">detail::value_t::object</link>:
13242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;use&#32;unchecked&#32;object&#32;access</emphasis>
13244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ptr&#32;=&#32;&amp;ptr-&gt;operator[](reference_token);
13245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
13246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13247 
13248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">detail::value_t::array</link>:
13249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(reference_token&#32;==&#32;<emphasis role="stringliteral">&quot;-&quot;</emphasis>)
13251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;explicitly&#32;treat&#32;&quot;-&quot;&#32;as&#32;index&#32;beyond&#32;the&#32;end</emphasis>
13253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ptr&#32;=&#32;&amp;ptr-&gt;operator[](ptr-&gt;m_value.array-&gt;size());
13254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
13256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;convert&#32;array&#32;index&#32;to&#32;number;&#32;unchecked&#32;access</emphasis>
13258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ptr&#32;=&#32;&amp;ptr-&gt;operator[](array_index&lt;BasicJsonType&gt;(reference_token));
13259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
13261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13262 
13263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">detail::value_t::null</link>:
13264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">detail::value_t::string</link>:
13265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">detail::value_t::boolean</link>:
13266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">detail::value_t::number_integer</link>:
13267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">detail::value_t::number_unsigned</link>:
13268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">detail::value_t::number_float</link>:
13269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">detail::value_t::binary</link>:
13270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">detail::value_t::discarded</link>:
13271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
13272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1out__of__range_1a4c0af7bdbf4f20e0812900639829028e">detail::out_of_range::create</link>(404,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;unresolved&#32;reference&#32;token&#32;&apos;&quot;</emphasis>,&#32;reference_token,&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis>),&#32;ptr));
13273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13275 
13276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*ptr;
13277 &#32;&#32;&#32;&#32;}
13278 
13285 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
13286 &#32;&#32;&#32;&#32;BasicJsonType&amp;&#32;get_checked(BasicJsonType*&#32;ptr)<emphasis role="keyword">&#32;const</emphasis>
13287 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
13288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;reference_token&#32;:&#32;reference_tokens)
13289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(ptr-&gt;type())
13291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">detail::value_t::object</link>:
13293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;note:&#32;at&#32;performs&#32;range&#32;check</emphasis>
13295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ptr&#32;=&#32;&amp;ptr-&gt;at(reference_token);
13296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
13297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13298 
13299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">detail::value_t::array</link>:
13300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(reference_token&#32;==&#32;<emphasis role="stringliteral">&quot;-&quot;</emphasis>))
13302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;-&quot;&#32;always&#32;fails&#32;the&#32;range&#32;check</emphasis>
13304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1out__of__range_1a4c0af7bdbf4f20e0812900639829028e">detail::out_of_range::create</link>(402,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(
13305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;array&#32;index&#32;&apos;-&apos;&#32;(&quot;</emphasis>,&#32;std::to_string(ptr-&gt;m_value.array-&gt;size()),
13306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;)&#32;is&#32;out&#32;of&#32;range&quot;</emphasis>),&#32;ptr));
13307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13308 
13309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;note:&#32;at&#32;performs&#32;range&#32;check</emphasis>
13310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ptr&#32;=&#32;&amp;ptr-&gt;at(array_index&lt;BasicJsonType&gt;(reference_token));
13311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
13312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13313 
13314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">detail::value_t::null</link>:
13315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">detail::value_t::string</link>:
13316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">detail::value_t::boolean</link>:
13317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">detail::value_t::number_integer</link>:
13318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">detail::value_t::number_unsigned</link>:
13319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">detail::value_t::number_float</link>:
13320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">detail::value_t::binary</link>:
13321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">detail::value_t::discarded</link>:
13322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
13323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1out__of__range_1a4c0af7bdbf4f20e0812900639829028e">detail::out_of_range::create</link>(404,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;unresolved&#32;reference&#32;token&#32;&apos;&quot;</emphasis>,&#32;reference_token,&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis>),&#32;ptr));
13324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13326 
13327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*ptr;
13328 &#32;&#32;&#32;&#32;}
13329 
13343 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
13344 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;get_unchecked(<emphasis role="keyword">const</emphasis>&#32;BasicJsonType*&#32;ptr)<emphasis role="keyword">&#32;const</emphasis>
13345 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
13346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;reference_token&#32;:&#32;reference_tokens)
13347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(ptr-&gt;type())
13349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">detail::value_t::object</link>:
13351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;use&#32;unchecked&#32;object&#32;access</emphasis>
13353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ptr&#32;=&#32;&amp;ptr-&gt;operator[](reference_token);
13354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
13355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13356 
13357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">detail::value_t::array</link>:
13358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(reference_token&#32;==&#32;<emphasis role="stringliteral">&quot;-&quot;</emphasis>))
13360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;-&quot;&#32;cannot&#32;be&#32;used&#32;for&#32;const&#32;access</emphasis>
13362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1out__of__range_1a4c0af7bdbf4f20e0812900639829028e">detail::out_of_range::create</link>(402,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;array&#32;index&#32;&apos;-&apos;&#32;(&quot;</emphasis>,&#32;std::to_string(ptr-&gt;m_value.array-&gt;size()),&#32;<emphasis role="stringliteral">&quot;)&#32;is&#32;out&#32;of&#32;range&quot;</emphasis>),&#32;ptr));
13363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13364 
13365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;use&#32;unchecked&#32;array&#32;access</emphasis>
13366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ptr&#32;=&#32;&amp;ptr-&gt;operator[](array_index&lt;BasicJsonType&gt;(reference_token));
13367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
13368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13369 
13370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">detail::value_t::null</link>:
13371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">detail::value_t::string</link>:
13372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">detail::value_t::boolean</link>:
13373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">detail::value_t::number_integer</link>:
13374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">detail::value_t::number_unsigned</link>:
13375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">detail::value_t::number_float</link>:
13376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">detail::value_t::binary</link>:
13377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">detail::value_t::discarded</link>:
13378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
13379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1out__of__range_1a4c0af7bdbf4f20e0812900639829028e">detail::out_of_range::create</link>(404,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;unresolved&#32;reference&#32;token&#32;&apos;&quot;</emphasis>,&#32;reference_token,&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis>),&#32;ptr));
13380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13382 
13383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*ptr;
13384 &#32;&#32;&#32;&#32;}
13385 
13392 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
13393 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;get_checked(<emphasis role="keyword">const</emphasis>&#32;BasicJsonType*&#32;ptr)<emphasis role="keyword">&#32;const</emphasis>
13394 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
13395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;reference_token&#32;:&#32;reference_tokens)
13396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(ptr-&gt;type())
13398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">detail::value_t::object</link>:
13400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;note:&#32;at&#32;performs&#32;range&#32;check</emphasis>
13402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ptr&#32;=&#32;&amp;ptr-&gt;at(reference_token);
13403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
13404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13405 
13406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">detail::value_t::array</link>:
13407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(reference_token&#32;==&#32;<emphasis role="stringliteral">&quot;-&quot;</emphasis>))
13409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;-&quot;&#32;always&#32;fails&#32;the&#32;range&#32;check</emphasis>
13411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1out__of__range_1a4c0af7bdbf4f20e0812900639829028e">detail::out_of_range::create</link>(402,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(
13412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;array&#32;index&#32;&apos;-&apos;&#32;(&quot;</emphasis>,&#32;std::to_string(ptr-&gt;m_value.array-&gt;size()),
13413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;)&#32;is&#32;out&#32;of&#32;range&quot;</emphasis>),&#32;ptr));
13414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13415 
13416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;note:&#32;at&#32;performs&#32;range&#32;check</emphasis>
13417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ptr&#32;=&#32;&amp;ptr-&gt;at(array_index&lt;BasicJsonType&gt;(reference_token));
13418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
13419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13420 
13421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">detail::value_t::null</link>:
13422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">detail::value_t::string</link>:
13423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">detail::value_t::boolean</link>:
13424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">detail::value_t::number_integer</link>:
13425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">detail::value_t::number_unsigned</link>:
13426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">detail::value_t::number_float</link>:
13427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">detail::value_t::binary</link>:
13428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">detail::value_t::discarded</link>:
13429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
13430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1out__of__range_1a4c0af7bdbf4f20e0812900639829028e">detail::out_of_range::create</link>(404,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;unresolved&#32;reference&#32;token&#32;&apos;&quot;</emphasis>,&#32;reference_token,&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis>),&#32;ptr));
13431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13433 
13434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*ptr;
13435 &#32;&#32;&#32;&#32;}
13436 
13441 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
13442 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;contains(<emphasis role="keyword">const</emphasis>&#32;BasicJsonType*&#32;ptr)<emphasis role="keyword">&#32;const</emphasis>
13443 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
13444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;reference_token&#32;:&#32;reference_tokens)
13445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(ptr-&gt;type())
13447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">detail::value_t::object</link>:
13449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!ptr-&gt;contains(reference_token))
13451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&#32;did&#32;not&#32;find&#32;the&#32;key&#32;in&#32;the&#32;object</emphasis>
13453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
13454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13455 
13456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ptr&#32;=&#32;&amp;ptr-&gt;operator[](reference_token);
13457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
13458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13459 
13460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">detail::value_t::array</link>:
13461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(reference_token&#32;==&#32;<emphasis role="stringliteral">&quot;-&quot;</emphasis>))
13463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;-&quot;&#32;always&#32;fails&#32;the&#32;range&#32;check</emphasis>
13465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
13466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(reference_token.size()&#32;==&#32;1&#32;&amp;&amp;&#32;!(<emphasis role="stringliteral">&quot;0&quot;</emphasis>&#32;&lt;=&#32;reference_token&#32;&amp;&amp;&#32;reference_token&#32;&lt;=&#32;<emphasis role="stringliteral">&quot;9&quot;</emphasis>)))
13468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;invalid&#32;char</emphasis>
13470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
13471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(reference_token.size()&#32;&gt;&#32;1))
13473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!(<emphasis role="charliteral">&apos;1&apos;</emphasis>&#32;&lt;=&#32;reference_token[0]&#32;&amp;&amp;&#32;reference_token[0]&#32;&lt;=&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>)))
13475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;first&#32;char&#32;should&#32;be&#32;between&#32;&apos;1&apos;&#32;and&#32;&apos;9&apos;</emphasis>
13477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
13478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;reference_token.size();&#32;i++)
13480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!(<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;&lt;=&#32;reference_token[i]&#32;&amp;&amp;&#32;reference_token[i]&#32;&lt;=&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>)))
13482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;other&#32;char&#32;should&#32;be&#32;between&#32;&apos;0&apos;&#32;and&#32;&apos;9&apos;</emphasis>
13484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
13485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13488 
13489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;idx&#32;=&#32;array_index&lt;BasicJsonType&gt;(reference_token);
13490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(idx&#32;&gt;=&#32;ptr-&gt;size())
13491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;index&#32;out&#32;of&#32;range</emphasis>
13493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
13494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13495 
13496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ptr&#32;=&#32;&amp;ptr-&gt;operator[](idx);
13497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
13498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13499 
13500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">detail::value_t::null</link>:
13501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">detail::value_t::string</link>:
13502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">detail::value_t::boolean</link>:
13503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">detail::value_t::number_integer</link>:
13504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">detail::value_t::number_unsigned</link>:
13505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">detail::value_t::number_float</link>:
13506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">detail::value_t::binary</link>:
13507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">detail::value_t::discarded</link>:
13508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
13509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&#32;do&#32;not&#32;expect&#32;primitive&#32;values&#32;if&#32;there&#32;is&#32;still&#32;a</emphasis>
13511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;reference&#32;token&#32;to&#32;process</emphasis>
13512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
13513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13516 
13517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;no&#32;reference&#32;token&#32;left&#32;means&#32;we&#32;found&#32;a&#32;primitive&#32;value</emphasis>
13518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
13519 &#32;&#32;&#32;&#32;}
13520 
13530 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::vector&lt;string_t&gt;&#32;split(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1json__pointer_1a826c0f3ce730d635ad97de664fda6e30">string_t</link>&amp;&#32;reference_string)
13531 &#32;&#32;&#32;&#32;{
13532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;string_t&gt;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
13533 
13534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;special&#32;case:&#32;empty&#32;reference&#32;string&#32;-&gt;&#32;no&#32;reference&#32;tokens</emphasis>
13535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(reference_string.empty())
13536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
13538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13539 
13540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;if&#32;nonempty&#32;reference&#32;string&#32;begins&#32;with&#32;slash</emphasis>
13541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(reference_string[0]&#32;!=&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>))
13542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">detail::parse_error::create</link>(107,&#32;1,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;JSON&#32;pointer&#32;must&#32;be&#32;empty&#32;or&#32;begin&#32;with&#32;&apos;/&apos;&#32;-&#32;was:&#32;&apos;&quot;</emphasis>,&#32;reference_string,&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis>),&#32;<emphasis role="keyword">nullptr</emphasis>));
13544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13545 
13546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;extract&#32;the&#32;reference&#32;tokens:</emphasis>
13547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-&#32;slash:&#32;position&#32;of&#32;the&#32;last&#32;read&#32;slash&#32;(or&#32;end&#32;of&#32;string)</emphasis>
13548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-&#32;start:&#32;position&#32;after&#32;the&#32;previous&#32;slash</emphasis>
13549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(
13550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;search&#32;for&#32;the&#32;first&#32;slash&#32;after&#32;the&#32;first&#32;character</emphasis>
13551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;slash&#32;=&#32;reference_string.find_first_of(<emphasis role="charliteral">&apos;/&apos;</emphasis>,&#32;1),
13552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;set&#32;the&#32;beginning&#32;of&#32;the&#32;first&#32;reference&#32;token</emphasis>
13553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>&#32;=&#32;1;
13554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&#32;can&#32;stop&#32;if&#32;start&#32;==&#32;0&#32;(if&#32;slash&#32;==&#32;string_t::npos)</emphasis>
13555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>&#32;!=&#32;0;
13556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;set&#32;the&#32;beginning&#32;of&#32;the&#32;next&#32;reference&#32;token</emphasis>
13557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(will&#32;eventually&#32;be&#32;0&#32;if&#32;slash&#32;==&#32;string_t::npos)</emphasis>
13558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>&#32;=&#32;(slash&#32;==&#32;string_t::npos)&#32;?&#32;0&#32;:&#32;slash&#32;+&#32;1,
13559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;find&#32;next&#32;slash</emphasis>
13560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;slash&#32;=&#32;reference_string.<link linkend="_namespacestd_1af918ddff6ab7ea6140872b65660e9b16">find_first_of</link>(<emphasis role="stringliteral">&apos;/&apos;</emphasis>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>))
13561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;use&#32;the&#32;text&#32;between&#32;the&#32;beginning&#32;of&#32;the&#32;reference&#32;token</emphasis>
13563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(start)&#32;and&#32;the&#32;last&#32;slash&#32;(slash).</emphasis>
13564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;reference_token&#32;=&#32;reference_string.substr(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>,&#32;slash&#32;-&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>);
13565 
13566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;reference&#32;tokens&#32;are&#32;properly&#32;escaped</emphasis>
13567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;pos&#32;=&#32;reference_token.find_first_of(<emphasis role="charliteral">&apos;~&apos;</emphasis>);
13568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;!=&#32;string_t::npos;
13569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;=&#32;reference_token.find_first_of(<emphasis role="charliteral">&apos;~&apos;</emphasis>,&#32;pos&#32;+&#32;1))
13570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(reference_token[pos]&#32;==&#32;<emphasis role="charliteral">&apos;~&apos;</emphasis>);
13572 
13573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;~&#32;must&#32;be&#32;followed&#32;by&#32;0&#32;or&#32;1</emphasis>
13574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(pos&#32;==&#32;reference_token.size()&#32;-&#32;1&#32;||
13575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(reference_token[pos&#32;+&#32;1]&#32;!=&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;&amp;&amp;
13576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference_token[pos&#32;+&#32;1]&#32;!=&#32;<emphasis role="charliteral">&apos;1&apos;</emphasis>)))
13577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">detail::parse_error::create</link>(108,&#32;0,&#32;<emphasis role="stringliteral">&quot;escape&#32;character&#32;&apos;~&apos;&#32;must&#32;be&#32;followed&#32;with&#32;&apos;0&apos;&#32;or&#32;&apos;1&apos;&quot;</emphasis>,&#32;<emphasis role="keyword">nullptr</emphasis>));
13579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13581 
13582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;finally,&#32;store&#32;the&#32;reference&#32;token</emphasis>
13583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;detail::unescape(reference_token);
13584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.push_back(reference_token);
13585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13586 
13587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
13588 &#32;&#32;&#32;&#32;}
13589 
13590 &#32;&#32;<emphasis role="keyword">private</emphasis>:
13598 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
13599 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;flatten(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1json__pointer_1a826c0f3ce730d635ad97de664fda6e30">string_t</link>&amp;&#32;reference_string,
13600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;<link linkend="_classvalue">value</link>,
13601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BasicJsonType&amp;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>)
13602 &#32;&#32;&#32;&#32;{
13603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="_classvalue">value</link>.type())
13604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">detail::value_t::array</link>:
13606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classvalue">value</link>.m_value.array-&gt;empty())
13608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;flatten&#32;empty&#32;array&#32;as&#32;null</emphasis>
13610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>[reference_string]&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
13611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
13613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;iterate&#32;array&#32;and&#32;use&#32;index&#32;as&#32;reference&#32;string</emphasis>
13615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="_classvalue">value</link>.m_value.array-&gt;size();&#32;++i)
13616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flatten(<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(reference_string,&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>,&#32;std::to_string(i)),
13618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>.m_value.array-&gt;operator[](i),&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
13619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
13622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13623 
13624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">detail::value_t::object</link>:
13625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classvalue">value</link>.m_value.object-&gt;empty())
13627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;flatten&#32;empty&#32;object&#32;as&#32;null</emphasis>
13629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>[reference_string]&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
13630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
13632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;iterate&#32;object&#32;and&#32;use&#32;keys&#32;as&#32;reference&#32;string</emphasis>
13634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;element&#32;:&#32;*<link linkend="_classvalue">value</link>.m_value.<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab49790263c78300fbf05719e38246198">object</link>)
13635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flatten(<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(reference_string,&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>,&#32;<link linkend="_namespacenlohmann_1_1detail_1a6d49f8d1bdd1b5d9c574d13a9b3374f6">detail::escape</link>(element.first)),&#32;element.second,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
13637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
13640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13641 
13642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">detail::value_t::null</link>:
13643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">detail::value_t::string</link>:
13644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">detail::value_t::boolean</link>:
13645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">detail::value_t::number_integer</link>:
13646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">detail::value_t::number_unsigned</link>:
13647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">detail::value_t::number_float</link>:
13648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">detail::value_t::binary</link>:
13649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">detail::value_t::discarded</link>:
13650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
13651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;add&#32;primitive&#32;value&#32;with&#32;its&#32;reference&#32;string</emphasis>
13653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>[reference_string]&#32;=&#32;<link linkend="_classvalue">value</link>;
13654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
13655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13657 &#32;&#32;&#32;&#32;}
13658 
13669 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
13670 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;BasicJsonType
13671 &#32;&#32;&#32;&#32;unflatten(<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;<link linkend="_classvalue">value</link>)
13672 &#32;&#32;&#32;&#32;{
13673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!<link linkend="_classvalue">value</link>.is_object()))
13674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">detail::type_error::create</link>(314,&#32;<emphasis role="stringliteral">&quot;only&#32;objects&#32;can&#32;be&#32;unflattened&quot;</emphasis>,&#32;&amp;<link linkend="_classvalue">value</link>));
13676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13677 
13678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BasicJsonType&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
13679 
13680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;iterate&#32;the&#32;JSON&#32;object&#32;values</emphasis>
13681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;element&#32;:&#32;*<link linkend="_classvalue">value</link>.m_value.<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab49790263c78300fbf05719e38246198">object</link>)
13682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!element.second.is_primitive()))
13684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">detail::type_error::create</link>(315,&#32;<emphasis role="stringliteral">&quot;values&#32;in&#32;object&#32;must&#32;be&#32;primitive&quot;</emphasis>,&#32;&amp;element.second));
13686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13687 
13688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;assign&#32;value&#32;to&#32;reference&#32;pointed&#32;to&#32;by&#32;JSON&#32;pointer;&#32;Note&#32;that&#32;if</emphasis>
13689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;JSON&#32;pointer&#32;is&#32;&quot;&quot;&#32;(i.e.,&#32;points&#32;to&#32;the&#32;whole&#32;value),&#32;function</emphasis>
13690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;get_and_create&#32;returns&#32;a&#32;reference&#32;to&#32;result&#32;itself.&#32;An&#32;assignment</emphasis>
13691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;will&#32;then&#32;create&#32;a&#32;primitive&#32;value.</emphasis>
13692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1json__pointer_1ab0a623288bc1272870149ad50f799a73">json_pointer</link>(element.first).get_and_create(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>)&#32;=&#32;element.second;
13693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13694 
13695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
13696 &#32;&#32;&#32;&#32;}
13697 
13698 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;can&apos;t&#32;use&#32;conversion&#32;operator&#32;because&#32;of&#32;ambiguity</emphasis>
13699 &#32;&#32;&#32;&#32;json_pointer&lt;string_t&gt;&#32;convert()&#32;const&amp;
13700 &#32;&#32;&#32;&#32;{
13701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;json_pointer&lt;string_t&gt;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
13702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.reference_tokens&#32;=&#32;reference_tokens;
13703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
13704 &#32;&#32;&#32;&#32;}
13705 
13706 &#32;&#32;&#32;&#32;json_pointer&lt;string_t&gt;&#32;convert()&amp;&amp;
13707 &#32;&#32;&#32;&#32;{
13708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;json_pointer&lt;string_t&gt;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
13709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.reference_tokens&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(reference_tokens);
13710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
13711 &#32;&#32;&#32;&#32;}
13712 
13724 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;RefStringTypeLhs,&#32;<emphasis role="keyword">typename</emphasis>&#32;RefStringTypeRhs&gt;
13725 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOLINTNEXTLINE(readability-redundant-declaration)</emphasis>
13726 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1json__pointer_1ab8bab91a8ddca2e69ea824f72cd78c8b">operator==</link>(json_pointer&lt;RefStringTypeLhs&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;lhs,
13727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;json_pointer&lt;RefStringTypeRhs&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>;
13728 
13740 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;RefStringTypeLhs,&#32;<emphasis role="keyword">typename</emphasis>&#32;RefStringTypeRhs&gt;
13741 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOLINTNEXTLINE(readability-redundant-declaration)</emphasis>
13742 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1json__pointer_1ac79f820b128fa05762fc148cf890a7f5">operator!=</link>(json_pointer&lt;RefStringTypeLhs&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;lhs,
13743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;json_pointer&lt;RefStringTypeRhs&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>;
13744 
13746 &#32;&#32;&#32;&#32;std::vector&lt;string_t&gt;&#32;reference_tokens;
13747 };
13748 
13749 <emphasis role="comment">//&#32;functions&#32;cannot&#32;be&#32;defined&#32;inside&#32;class&#32;due&#32;to&#32;ODR&#32;violations</emphasis>
13750 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;RefStringTypeLhs,&#32;<emphasis role="keyword">typename</emphasis>&#32;RefStringTypeRhs&gt;
13751 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<link linkend="_classnlohmann_1_1json__pointer">json_pointer&lt;RefStringTypeLhs&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;lhs,
13752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1json__pointer">json_pointer&lt;RefStringTypeRhs&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
13753 {
13754 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.reference_tokens&#32;==&#32;rhs.reference_tokens;
13755 }
13756 
13757 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;RefStringTypeLhs,&#32;<emphasis role="keyword">typename</emphasis>&#32;RefStringTypeRhs&gt;
13758 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<link linkend="_classnlohmann_1_1json__pointer">json_pointer&lt;RefStringTypeLhs&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;lhs,
13759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1json__pointer">json_pointer&lt;RefStringTypeRhs&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
13760 {
13761 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(lhs&#32;==&#32;rhs);
13762 }
13763 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann</emphasis>
13764 
13765 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/json_ref.hpp&gt;</emphasis>
13766 
13767 
13768 <emphasis role="preprocessor">#include&#32;&lt;initializer_list&gt;</emphasis>
13769 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>
13770 
13771 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/meta/type_traits.hpp&gt;</emphasis>
13772 
13773 
13774 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann">nlohmann</link>
13775 {
13776 <emphasis role="keyword">namespace&#32;</emphasis>detail
13777 {
13778 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
13779 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1json__ref">json_ref</link>
13780 {
13781 &#32;&#32;<emphasis role="keyword">public</emphasis>:
13782 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1json__ref_1a78d76cf288141049568c0d670ed670ef">value_type</link>&#32;=&#32;BasicJsonType;
13783 
13784 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__ref_1ae1adf5bcee8b6fa0c358710604fb1938">json_ref</link>(<link linkend="_classnlohmann_1_1detail_1_1json__ref_1a78d76cf288141049568c0d670ed670ef">value_type</link>&amp;&amp;&#32;<link linkend="_classvalue">value</link>)
13785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;owned_value(<link linkend="_namespacestd">std</link>::move(<link linkend="_classvalue">value</link>))
13786 &#32;&#32;&#32;&#32;{}
13787 
13788 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__ref_1a8c3eb3c6e952ed0cd7eece586ab4047c">json_ref</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__ref_1a78d76cf288141049568c0d670ed670ef">value_type</link>&amp;&#32;<link linkend="_classvalue">value</link>)
13789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;value_ref(&amp;<link linkend="_classvalue">value</link>)
13790 &#32;&#32;&#32;&#32;{}
13791 
13792 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__ref_1adfba2db547283a7c6a5df9a32e72efc5">json_ref</link>(std::initializer_list&lt;json_ref&gt;&#32;init)
13793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;owned_value(init)
13794 &#32;&#32;&#32;&#32;{}
13795 
13796 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;
13797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class</emphasis>...&#32;Args,
13798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;std::is_constructible&lt;<link linkend="_classnlohmann_1_1detail_1_1json__ref_1a78d76cf288141049568c0d670ed670ef">value_type</link>,&#32;Args...&gt;<link linkend="_classvalue">::value</link>,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&#32;&gt;
13799 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__ref_1a8a31d6c588d6c3c06b62008fd5d36c6c">json_ref</link>(Args&#32;&amp;&amp;&#32;...&#32;args)
13800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;owned_value(<link linkend="_namespacestd">std</link>::forward&lt;Args&gt;(args)...)
13801 &#32;&#32;&#32;&#32;{}
13802 
13803 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;class&#32;should&#32;be&#32;movable&#32;only</emphasis>
13804 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__ref_1a4ec90f097b33e7ea8ea7473b6b6c4015">json_ref</link>(<link linkend="_classnlohmann_1_1detail_1_1json__ref">json_ref</link>&amp;&amp;)&#32;noexcept&#32;=&#32;default;
13805 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__ref">json_ref</link>(const&#32;<link linkend="_classnlohmann_1_1detail_1_1json__ref">json_ref</link>&amp;)&#32;=&#32;delete;
13806 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__ref">json_ref</link>&amp;&#32;operator=(const&#32;<link linkend="_classnlohmann_1_1detail_1_1json__ref">json_ref</link>&amp;)&#32;=&#32;delete;
13807 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__ref">json_ref</link>&amp;&#32;operator=(<link linkend="_classnlohmann_1_1detail_1_1json__ref">json_ref</link>&amp;&amp;)&#32;=&#32;delete;
13808 &#32;&#32;&#32;&#32;~<link linkend="_classnlohmann_1_1detail_1_1json__ref">json_ref</link>()&#32;=&#32;default;
13809 
13810 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__ref_1a78d76cf288141049568c0d670ed670ef">value_type</link>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__ref_1ae39e523218bf05cac3fb5b5b1cd5efb6">moved_or_copied</link>()<emphasis role="keyword">&#32;const</emphasis>
13811 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
13812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(value_ref&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>)
13813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(owned_value);
13815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*value_ref;
13817 &#32;&#32;&#32;&#32;}
13818 
13819 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__ref_1a78d76cf288141049568c0d670ed670ef">value_type</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__ref_1a660e373deab1b74e03952dce889cb33d">operator*</link>()<emphasis role="keyword">&#32;const</emphasis>
13820 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
13821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;value_ref&#32;?&#32;*value_ref&#32;:&#32;owned_value;
13822 &#32;&#32;&#32;&#32;}
13823 
13824 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__ref_1a78d76cf288141049568c0d670ed670ef">value_type</link>&#32;<emphasis role="keyword">const</emphasis>*&#32;<link linkend="_classnlohmann_1_1detail_1_1json__ref_1ab4991f0e0f33cb906267b8dccbf2406b">operator-&gt;</link>()<emphasis role="keyword">&#32;const</emphasis>
13825 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
13826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;**&#32;<emphasis role="keyword">this</emphasis>;
13827 &#32;&#32;&#32;&#32;}
13828 
13829 &#32;&#32;<emphasis role="keyword">private</emphasis>:
13830 &#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__ref_1a78d76cf288141049568c0d670ed670ef">value_type</link>&#32;owned_value&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
13831 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__ref_1a78d76cf288141049568c0d670ed670ef">value_type</link>&#32;<emphasis role="keyword">const</emphasis>*&#32;value_ref&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
13832 };
13833 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
13834 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann</emphasis>
13835 
13836 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/macro_scope.hpp&gt;</emphasis>
13837 
13838 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/string_concat.hpp&gt;</emphasis>
13839 
13840 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/string_escape.hpp&gt;</emphasis>
13841 
13842 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/meta/cpp_future.hpp&gt;</emphasis>
13843 
13844 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/meta/type_traits.hpp&gt;</emphasis>
13845 
13846 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/output/binary_writer.hpp&gt;</emphasis>
13847 
13848 
13849 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>&#32;<emphasis role="comment">//&#32;reverse</emphasis>
13850 <emphasis role="preprocessor">#include&#32;&lt;array&gt;</emphasis>&#32;<emphasis role="comment">//&#32;array</emphasis>
13851 <emphasis role="preprocessor">#include&#32;&lt;map&gt;</emphasis>&#32;<emphasis role="comment">//&#32;map</emphasis>
13852 <emphasis role="preprocessor">#include&#32;&lt;cmath&gt;</emphasis>&#32;<emphasis role="comment">//&#32;isnan,&#32;isinf</emphasis>
13853 <emphasis role="preprocessor">#include&#32;&lt;cstdint&gt;</emphasis>&#32;<emphasis role="comment">//&#32;uint8_t,&#32;uint16_t,&#32;uint32_t,&#32;uint64_t</emphasis>
13854 <emphasis role="preprocessor">#include&#32;&lt;cstring&gt;</emphasis>&#32;<emphasis role="comment">//&#32;memcpy</emphasis>
13855 <emphasis role="preprocessor">#include&#32;&lt;limits&gt;</emphasis>&#32;<emphasis role="comment">//&#32;numeric_limits</emphasis>
13856 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>&#32;<emphasis role="comment">//&#32;string</emphasis>
13857 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>&#32;<emphasis role="comment">//&#32;move</emphasis>
13858 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>&#32;<emphasis role="comment">//&#32;vector</emphasis>
13859 
13860 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/input/binary_reader.hpp&gt;</emphasis>
13861 
13862 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/macro_scope.hpp&gt;</emphasis>
13863 
13864 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/output/output_adapters.hpp&gt;</emphasis>
13865 
13866 
13867 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>&#32;<emphasis role="comment">//&#32;copy</emphasis>
13868 <emphasis role="preprocessor">#include&#32;&lt;cstddef&gt;</emphasis>&#32;<emphasis role="comment">//&#32;size_t</emphasis>
13869 <emphasis role="preprocessor">#include&#32;&lt;iterator&gt;</emphasis>&#32;<emphasis role="comment">//&#32;back_inserter</emphasis>
13870 <emphasis role="preprocessor">#include&#32;&lt;memory&gt;</emphasis>&#32;<emphasis role="comment">//&#32;shared_ptr,&#32;make_shared</emphasis>
13871 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>&#32;<emphasis role="comment">//&#32;basic_string</emphasis>
13872 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>&#32;<emphasis role="comment">//&#32;vector</emphasis>
13873 
13874 <emphasis role="preprocessor">#ifndef&#32;JSON_NO_IO</emphasis>
13875 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;ios&gt;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;streamsize</emphasis>
13876 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;ostream&gt;</emphasis>&#32;&#32;<emphasis role="comment">//&#32;basic_ostream</emphasis>
13877 <emphasis role="preprocessor">#endif&#32;&#32;</emphasis><emphasis role="comment">//&#32;JSON_NO_IO</emphasis>
13878 
13879 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/macro_scope.hpp&gt;</emphasis>
13880 
13881 
13882 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann">nlohmann</link>
13883 {
13884 <emphasis role="keyword">namespace&#32;</emphasis>detail
13885 {
13887 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;CharType&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>output_adapter_protocol
13888 {
13889 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;write_character(CharType&#32;c)&#32;=&#32;0;
13890 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;write_characters(<emphasis role="keyword">const</emphasis>&#32;CharType*&#32;s,&#32;std::size_t&#32;<link linkend="_namespacelength">length</link>)&#32;=&#32;0;
13891 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;~output_adapter_protocol()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
13892 
13893 &#32;&#32;&#32;&#32;output_adapter_protocol()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
13894 &#32;&#32;&#32;&#32;output_adapter_protocol(<emphasis role="keyword">const</emphasis>&#32;output_adapter_protocol&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
13895 &#32;&#32;&#32;&#32;output_adapter_protocol(output_adapter_protocol&amp;&amp;)&#32;noexcept&#32;=&#32;default;
13896 &#32;&#32;&#32;&#32;output_adapter_protocol&amp;&#32;operator=(const&#32;output_adapter_protocol&amp;)&#32;=&#32;default;
13897 &#32;&#32;&#32;&#32;output_adapter_protocol&amp;&#32;operator=(output_adapter_protocol&amp;&amp;)&#32;noexcept&#32;=&#32;default;
13898 };
13899 
13901 template&lt;typename&#32;CharType&gt;
13902 using&#32;output_adapter_t&#32;=&#32;<link linkend="_namespacestd">std</link>::shared_ptr&lt;output_adapter_protocol&lt;CharType&gt;&gt;;
13903 
13905 template&lt;typename&#32;CharType,&#32;typename&#32;AllocatorType&#32;=&#32;<link linkend="_namespacestd">std</link>::allocator&lt;CharType&gt;&gt;
13906 class&#32;output_vector_adapter&#32;:&#32;public&#32;output_adapter_protocol&lt;CharType&gt;
13907 {
13908 &#32;&#32;<emphasis role="keyword">public</emphasis>:
13909 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;output_vector_adapter(std::vector&lt;CharType,&#32;AllocatorType&gt;&amp;&#32;vec)&#32;noexcept
13910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>(vec)
13911 &#32;&#32;&#32;&#32;{}
13912 
13913 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;write_character(CharType&#32;c)<emphasis role="keyword">&#32;override</emphasis>
13914 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
13915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>.push_back(c);
13916 &#32;&#32;&#32;&#32;}
13917 
13918 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a5338981b5ad9027c9e54b1c5597f4344">JSON_HEDLEY_NON_NULL</link>(2)
13919 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&#32;write_characters(const&#32;CharType*&#32;s,&#32;<link linkend="_namespacestd">std</link>::<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_namespacelength">length</link>)<emphasis role="keyword">&#32;override</emphasis>
13920 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
13921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link>(s,&#32;s&#32;+&#32;<link linkend="_namespacelength">length</link>,&#32;std::back_inserter(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>));
13922 &#32;&#32;&#32;&#32;}
13923 
13924 &#32;&#32;<emphasis role="keyword">private</emphasis>:
13925 &#32;&#32;&#32;&#32;std::vector&lt;CharType,&#32;AllocatorType&gt;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>;
13926 };
13927 
13928 <emphasis role="preprocessor">#ifndef&#32;JSON_NO_IO</emphasis>
13930 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;CharType&gt;
13931 <emphasis role="keyword">class&#32;</emphasis>output_stream_adapter&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;output_adapter_protocol&lt;CharType&gt;
13932 {
13933 &#32;&#32;<emphasis role="keyword">public</emphasis>:
13934 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;output_stream_adapter(std::basic_ostream&lt;CharType&gt;&amp;&#32;s)&#32;noexcept
13935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>(s)
13936 &#32;&#32;&#32;&#32;{}
13937 
13938 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;write_character(CharType&#32;c)<emphasis role="keyword">&#32;override</emphasis>
13939 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
13940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>.put(c);
13941 &#32;&#32;&#32;&#32;}
13942 
13943 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a5338981b5ad9027c9e54b1c5597f4344">JSON_HEDLEY_NON_NULL</link>(2)
13944 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&#32;write_characters(const&#32;CharType*&#32;s,&#32;<link linkend="_namespacestd">std</link>::<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_namespacelength">length</link>)<emphasis role="keyword">&#32;override</emphasis>
13945 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
13946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>.write(s,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::streamsize<emphasis role="keyword">&gt;</emphasis>(<link linkend="_namespacelength">length</link>));
13947 &#32;&#32;&#32;&#32;}
13948 
13949 &#32;&#32;<emphasis role="keyword">private</emphasis>:
13950 &#32;&#32;&#32;&#32;std::basic_ostream&lt;CharType&gt;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>;
13951 };
13952 <emphasis role="preprocessor">#endif&#32;&#32;</emphasis><emphasis role="comment">//&#32;JSON_NO_IO</emphasis>
13953 
13955 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;CharType,&#32;<emphasis role="keyword">typename</emphasis>&#32;StringType&#32;=&#32;std::basic_<emphasis role="keywordtype">string</emphasis>&lt;CharType&gt;&gt;
13956 <emphasis role="keyword">class&#32;</emphasis>output_string_adapter&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;output_adapter_protocol&lt;CharType&gt;
13957 {
13958 &#32;&#32;<emphasis role="keyword">public</emphasis>:
13959 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;output_string_adapter(StringType&amp;&#32;s)&#32;noexcept
13960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;str(s)
13961 &#32;&#32;&#32;&#32;{}
13962 
13963 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;write_character(CharType&#32;c)<emphasis role="keyword">&#32;override</emphasis>
13964 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
13965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.push_back(c);
13966 &#32;&#32;&#32;&#32;}
13967 
13968 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a5338981b5ad9027c9e54b1c5597f4344">JSON_HEDLEY_NON_NULL</link>(2)
13969 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&#32;write_characters(const&#32;CharType*&#32;s,&#32;<link linkend="_namespacestd">std</link>::<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_namespacelength">length</link>)<emphasis role="keyword">&#32;override</emphasis>
13970 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
13971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.append(s,&#32;<link linkend="_namespacelength">length</link>);
13972 &#32;&#32;&#32;&#32;}
13973 
13974 &#32;&#32;<emphasis role="keyword">private</emphasis>:
13975 &#32;&#32;&#32;&#32;StringType&amp;&#32;str;
13976 };
13977 
13978 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;CharType,&#32;<emphasis role="keyword">typename</emphasis>&#32;StringType&#32;=&#32;std::basic_<emphasis role="keywordtype">string</emphasis>&lt;CharType&gt;&gt;
13979 <emphasis role="keyword">class&#32;</emphasis>output_adapter
13980 {
13981 &#32;&#32;<emphasis role="keyword">public</emphasis>:
13982 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;AllocatorType&#32;=&#32;std::allocator&lt;CharType&gt;&gt;
13983 &#32;&#32;&#32;&#32;output_adapter(std::vector&lt;CharType,&#32;AllocatorType&gt;&amp;&#32;vec)
13984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;oa(<link linkend="_namespacestd">std</link>::make_shared&lt;output_vector_adapter&lt;CharType,&#32;AllocatorType&gt;&gt;(vec))&#32;{}
13985 
13986 <emphasis role="preprocessor">#ifndef&#32;JSON_NO_IO</emphasis>
13987 &#32;&#32;&#32;&#32;output_adapter(std::basic_ostream&lt;CharType&gt;&amp;&#32;s)
13988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;oa(<link linkend="_namespacestd">std</link>::make_shared&lt;output_stream_adapter&lt;CharType&gt;&gt;(s))&#32;{}
13989 <emphasis role="preprocessor">#endif&#32;&#32;</emphasis><emphasis role="comment">//&#32;JSON_NO_IO</emphasis>
13990 
13991 &#32;&#32;&#32;&#32;output_adapter(StringType&amp;&#32;s)
13992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;oa(<link linkend="_namespacestd">std</link>::make_shared&lt;output_string_adapter&lt;CharType,&#32;StringType&gt;&gt;(s))&#32;{}
13993 
13994 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;output_adapter_t&lt;CharType&gt;()
13995 &#32;&#32;&#32;&#32;{
13996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;oa;
13997 &#32;&#32;&#32;&#32;}
13998 
13999 &#32;&#32;<emphasis role="keyword">private</emphasis>:
14000 &#32;&#32;&#32;&#32;output_adapter_t&lt;CharType&gt;&#32;oa&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
14001 };
14002 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
14003 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann</emphasis>
14004 
14005 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/string_concat.hpp&gt;</emphasis>
14006 
14007 
14008 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann">nlohmann</link>
14009 {
14010 <emphasis role="keyword">namespace&#32;</emphasis>detail
14011 {
14013 <emphasis role="comment">//&#32;binary&#32;writer&#32;//</emphasis>
14015 
14019 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;CharType&gt;
14020 <emphasis role="keyword">class&#32;</emphasis>binary_writer
14021 {
14022 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>string_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::string_t;
14023 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>binary_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::binary_t;
14024 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>number_float_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_float_t;
14025 
14026 &#32;&#32;<emphasis role="keyword">public</emphasis>:
14032 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;binary_writer(output_adapter_t&lt;CharType&gt;&#32;adapter)&#32;:&#32;oa(<link linkend="_namespacestd">std</link>::<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(adapter))
14033 &#32;&#32;&#32;&#32;{
14034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(oa);
14035 &#32;&#32;&#32;&#32;}
14036 
14041 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;write_bson(<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;j)
14042 &#32;&#32;&#32;&#32;{
14043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(j.type())
14044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::object:
14046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_bson_object(*j.m_value.object);
14048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14050 
14051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::null:
14052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::array:
14053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::string:
14054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::boolean:
14055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_integer:
14056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_unsigned:
14057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_float:
14058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::binary:
14059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::discarded:
14060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
14061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(type_error::create(317,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;to&#32;serialize&#32;to&#32;BSON,&#32;top-level&#32;type&#32;must&#32;be&#32;object,&#32;but&#32;is&#32;&quot;</emphasis>,&#32;j.type_name()),&#32;&amp;j));
14063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14065 &#32;&#32;&#32;&#32;}
14066 
14070 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;write_cbor(<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;j)
14071 &#32;&#32;&#32;&#32;{
14072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(j.type())
14073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::null:
14075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0xF6));
14077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14079 
14080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::boolean:
14081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(j.m_value.boolean
14083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;to_char_type(0xF5)
14084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;to_char_type(0xF4));
14085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14087 
14088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_integer:
14089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j.m_value.number_integer&#32;&gt;=&#32;0)
14091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;CBOR&#32;does&#32;not&#32;differentiate&#32;between&#32;positive&#32;signed</emphasis>
14093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;integers&#32;and&#32;unsigned&#32;integers.&#32;Therefore,&#32;we&#32;used&#32;the</emphasis>
14094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;code&#32;from&#32;the&#32;value_t::number_unsigned&#32;case&#32;here.</emphasis>
14095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j.m_value.number_integer&#32;&lt;=&#32;0x17)
14096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(j.m_value.number_integer));
14098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j.m_value.number_integer&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint8_t&gt;::max)())
14100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0x18));
14102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(j.m_value.number_integer));
14103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j.m_value.number_integer&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint16_t&gt;::max)())
14105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0x19));
14107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint16_t<emphasis role="keyword">&gt;</emphasis>(j.m_value.number_integer));
14108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j.m_value.number_integer&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint32_t&gt;::max)())
14110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0x1A));
14112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint32_t<emphasis role="keyword">&gt;</emphasis>(j.m_value.number_integer));
14113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
14115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0x1B));
14117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint64_t<emphasis role="keyword">&gt;</emphasis>(j.m_value.number_integer));
14118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
14121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;conversions&#32;below&#32;encode&#32;the&#32;sign&#32;in&#32;the&#32;first</emphasis>
14123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;byte,&#32;and&#32;the&#32;value&#32;is&#32;converted&#32;to&#32;a&#32;positive&#32;number.</emphasis>
14124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;positive_number&#32;=&#32;-1&#32;-&#32;j.m_value.number_integer;
14125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j.m_value.number_integer&#32;&gt;=&#32;-24)
14126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(0x20&#32;+&#32;positive_number));
14128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(positive_number&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint8_t&gt;::max)())
14130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0x38));
14132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(positive_number));
14133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(positive_number&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint16_t&gt;::max)())
14135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0x39));
14137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint16_t<emphasis role="keyword">&gt;</emphasis>(positive_number));
14138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(positive_number&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint32_t&gt;::max)())
14140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0x3A));
14142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint32_t<emphasis role="keyword">&gt;</emphasis>(positive_number));
14143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
14145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0x3B));
14147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint64_t<emphasis role="keyword">&gt;</emphasis>(positive_number));
14148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14152 
14153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_unsigned:
14154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j.m_value.number_unsigned&#32;&lt;=&#32;0x17)
14156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(j.m_value.number_unsigned));
14158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j.m_value.number_unsigned&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint8_t&gt;::max)())
14160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0x18));
14162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(j.m_value.number_unsigned));
14163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j.m_value.number_unsigned&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint16_t&gt;::max)())
14165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0x19));
14167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint16_t<emphasis role="keyword">&gt;</emphasis>(j.m_value.number_unsigned));
14168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j.m_value.number_unsigned&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint32_t&gt;::max)())
14170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0x1A));
14172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint32_t<emphasis role="keyword">&gt;</emphasis>(j.m_value.number_unsigned));
14173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
14175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0x1B));
14177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint64_t<emphasis role="keyword">&gt;</emphasis>(j.m_value.number_unsigned));
14178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14181 
14182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_float:
14183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::isnan(j.m_value.number_float))
14185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NaN&#32;is&#32;0xf97e00&#32;in&#32;CBOR</emphasis>
14187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0xF9));
14188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0x7E));
14189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0x00));
14190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::isinf(j.m_value.number_float))
14192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Infinity&#32;is&#32;0xf97c00,&#32;-Infinity&#32;is&#32;0xf9fc00</emphasis>
14194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0xf9));
14195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(j.m_value.number_float&#32;&gt;&#32;0&#32;?&#32;to_char_type(0x7C)&#32;:&#32;to_char_type(0xFC));
14196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0x00));
14197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
14199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_compact_float(j.m_value.number_float,&#32;detail::input_format_t::cbor);
14201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14204 
14205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::string:
14206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;step&#32;1:&#32;write&#32;control&#32;byte&#32;and&#32;the&#32;string&#32;length</emphasis>
14208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;N&#32;=&#32;j.m_value.string-&gt;size();
14209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(N&#32;&lt;=&#32;0x17)
14210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(0x60&#32;+&#32;N));
14212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(N&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint8_t&gt;::max)())
14214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0x78));
14216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(N));
14217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(N&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint16_t&gt;::max)())
14219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0x79));
14221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint16_t<emphasis role="keyword">&gt;</emphasis>(N));
14222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(N&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint32_t&gt;::max)())
14224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0x7A));
14226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint32_t<emphasis role="keyword">&gt;</emphasis>(N));
14227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LCOV_EXCL_START</emphasis>
14229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(N&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint64_t&gt;::max)())
14230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0x7B));
14232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint64_t<emphasis role="keyword">&gt;</emphasis>(N));
14233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LCOV_EXCL_STOP</emphasis>
14235 
14236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;step&#32;2:&#32;write&#32;the&#32;string</emphasis>
14237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_characters(
14238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>CharType*<emphasis role="keyword">&gt;</emphasis>(j.m_value.string-&gt;c_str()),
14239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value.string-&gt;size());
14240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14242 
14243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::array:
14244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;step&#32;1:&#32;write&#32;control&#32;byte&#32;and&#32;the&#32;array&#32;size</emphasis>
14246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;N&#32;=&#32;j.m_value.array-&gt;size();
14247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(N&#32;&lt;=&#32;0x17)
14248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(0x80&#32;+&#32;N));
14250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(N&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint8_t&gt;::max)())
14252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0x98));
14254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(N));
14255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(N&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint16_t&gt;::max)())
14257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0x99));
14259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint16_t<emphasis role="keyword">&gt;</emphasis>(N));
14260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(N&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint32_t&gt;::max)())
14262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0x9A));
14264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint32_t<emphasis role="keyword">&gt;</emphasis>(N));
14265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LCOV_EXCL_START</emphasis>
14267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(N&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint64_t&gt;::max)())
14268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0x9B));
14270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint64_t<emphasis role="keyword">&gt;</emphasis>(N));
14271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LCOV_EXCL_STOP</emphasis>
14273 
14274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;step&#32;2:&#32;write&#32;each&#32;element</emphasis>
14275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;el&#32;:&#32;*j.m_value.<link linkend="_classarray">array</link>)
14276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_cbor(el);
14278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14281 
14282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::binary:
14283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j.m_value.binary-&gt;has_subtype())
14285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j.m_value.binary-&gt;subtype()&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint8_t&gt;::max)())
14287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(0xd8));
14289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(j.m_value.binary-&gt;subtype()));
14290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j.m_value.binary-&gt;subtype()&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint16_t&gt;::max)())
14292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(0xd9));
14294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint16_t<emphasis role="keyword">&gt;</emphasis>(j.m_value.binary-&gt;subtype()));
14295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j.m_value.binary-&gt;subtype()&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint32_t&gt;::max)())
14297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(0xda));
14299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint32_t<emphasis role="keyword">&gt;</emphasis>(j.m_value.binary-&gt;subtype()));
14300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j.m_value.binary-&gt;subtype()&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint64_t&gt;::max)())
14302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(0xdb));
14304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint64_t<emphasis role="keyword">&gt;</emphasis>(j.m_value.binary-&gt;subtype()));
14305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14307 
14308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;step&#32;1:&#32;write&#32;control&#32;byte&#32;and&#32;the&#32;binary&#32;array&#32;size</emphasis>
14309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;N&#32;=&#32;j.m_value.binary-&gt;size();
14310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(N&#32;&lt;=&#32;0x17)
14311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(0x40&#32;+&#32;N));
14313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(N&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint8_t&gt;::max)())
14315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0x58));
14317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(N));
14318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(N&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint16_t&gt;::max)())
14320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0x59));
14322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint16_t<emphasis role="keyword">&gt;</emphasis>(N));
14323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(N&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint32_t&gt;::max)())
14325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0x5A));
14327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint32_t<emphasis role="keyword">&gt;</emphasis>(N));
14328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LCOV_EXCL_START</emphasis>
14330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(N&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint64_t&gt;::max)())
14331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0x5B));
14333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint64_t<emphasis role="keyword">&gt;</emphasis>(N));
14334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LCOV_EXCL_STOP</emphasis>
14336 
14337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;step&#32;2:&#32;write&#32;each&#32;element</emphasis>
14338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_characters(
14339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>CharType*<emphasis role="keyword">&gt;</emphasis>(j.m_value.binary-&gt;data()),
14340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;N);
14341 
14342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14344 
14345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::object:
14346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;step&#32;1:&#32;write&#32;control&#32;byte&#32;and&#32;the&#32;object&#32;size</emphasis>
14348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;N&#32;=&#32;j.m_value.object-&gt;size();
14349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(N&#32;&lt;=&#32;0x17)
14350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(0xA0&#32;+&#32;N));
14352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(N&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint8_t&gt;::max)())
14354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0xB8));
14356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(N));
14357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(N&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint16_t&gt;::max)())
14359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0xB9));
14361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint16_t<emphasis role="keyword">&gt;</emphasis>(N));
14362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(N&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint32_t&gt;::max)())
14364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0xBA));
14366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint32_t<emphasis role="keyword">&gt;</emphasis>(N));
14367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LCOV_EXCL_START</emphasis>
14369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(N&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint64_t&gt;::max)())
14370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0xBB));
14372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint64_t<emphasis role="keyword">&gt;</emphasis>(N));
14373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LCOV_EXCL_STOP</emphasis>
14375 
14376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;step&#32;2:&#32;write&#32;each&#32;element</emphasis>
14377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;el&#32;:&#32;*j.m_value.<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab49790263c78300fbf05719e38246198">object</link>)
14378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_cbor(el.first);
14380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_cbor(el.second);
14381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14384 
14385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::discarded:
14386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
14387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14389 &#32;&#32;&#32;&#32;}
14390 
14394 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;write_msgpack(<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;j)
14395 &#32;&#32;&#32;&#32;{
14396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(j.type())
14397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::null:&#32;<emphasis role="comment">//&#32;nil</emphasis>
14399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0xC0));
14401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14403 
14404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::boolean:&#32;<emphasis role="comment">//&#32;true&#32;and&#32;false</emphasis>
14405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(j.m_value.boolean
14407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;to_char_type(0xC3)
14408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;to_char_type(0xC2));
14409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14411 
14412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_integer:
14413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j.m_value.number_integer&#32;&gt;=&#32;0)
14415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;MessagePack&#32;does&#32;not&#32;differentiate&#32;between&#32;positive</emphasis>
14417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;signed&#32;integers&#32;and&#32;unsigned&#32;integers.&#32;Therefore,&#32;we&#32;used</emphasis>
14418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;code&#32;from&#32;the&#32;value_t::number_unsigned&#32;case&#32;here.</emphasis>
14419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j.m_value.number_unsigned&#32;&lt;&#32;128)
14420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;positive&#32;fixnum</emphasis>
14422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(j.m_value.number_integer));
14423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j.m_value.number_unsigned&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint8_t&gt;::max)())
14425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;uint&#32;8</emphasis>
14427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0xCC));
14428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(j.m_value.number_integer));
14429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j.m_value.number_unsigned&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint16_t&gt;::max)())
14431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;uint&#32;16</emphasis>
14433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0xCD));
14434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint16_t<emphasis role="keyword">&gt;</emphasis>(j.m_value.number_integer));
14435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j.m_value.number_unsigned&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint32_t&gt;::max)())
14437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;uint&#32;32</emphasis>
14439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0xCE));
14440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint32_t<emphasis role="keyword">&gt;</emphasis>(j.m_value.number_integer));
14441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j.m_value.number_unsigned&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint64_t&gt;::max)())
14443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;uint&#32;64</emphasis>
14445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0xCF));
14446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint64_t<emphasis role="keyword">&gt;</emphasis>(j.m_value.number_integer));
14447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
14450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j.m_value.number_integer&#32;&gt;=&#32;-32)
14452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;negative&#32;fixnum</emphasis>
14454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::int8_t<emphasis role="keyword">&gt;</emphasis>(j.m_value.number_integer));
14455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j.m_value.number_integer&#32;&gt;=&#32;(std::numeric_limits&lt;std::int8_t&gt;::min)()&#32;&amp;&amp;
14457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value.number_integer&#32;&lt;=&#32;(std::numeric_limits&lt;std::int8_t&gt;::max)())
14458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;int&#32;8</emphasis>
14460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0xD0));
14461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::int8_t<emphasis role="keyword">&gt;</emphasis>(j.m_value.number_integer));
14462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j.m_value.number_integer&#32;&gt;=&#32;(std::numeric_limits&lt;std::int16_t&gt;::min)()&#32;&amp;&amp;
14464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value.number_integer&#32;&lt;=&#32;(std::numeric_limits&lt;std::int16_t&gt;::max)())
14465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;int&#32;16</emphasis>
14467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0xD1));
14468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::int16_t<emphasis role="keyword">&gt;</emphasis>(j.m_value.number_integer));
14469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j.m_value.number_integer&#32;&gt;=&#32;(std::numeric_limits&lt;std::int32_t&gt;::min)()&#32;&amp;&amp;
14471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value.number_integer&#32;&lt;=&#32;(std::numeric_limits&lt;std::int32_t&gt;::max)())
14472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;int&#32;32</emphasis>
14474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0xD2));
14475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::int32_t<emphasis role="keyword">&gt;</emphasis>(j.m_value.number_integer));
14476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j.m_value.number_integer&#32;&gt;=&#32;(std::numeric_limits&lt;std::int64_t&gt;::min)()&#32;&amp;&amp;
14478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value.number_integer&#32;&lt;=&#32;(std::numeric_limits&lt;std::int64_t&gt;::max)())
14479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;int&#32;64</emphasis>
14481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0xD3));
14482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::int64_t<emphasis role="keyword">&gt;</emphasis>(j.m_value.number_integer));
14483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14487 
14488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_unsigned:
14489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j.m_value.number_unsigned&#32;&lt;&#32;128)
14491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;positive&#32;fixnum</emphasis>
14493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(j.m_value.number_integer));
14494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j.m_value.number_unsigned&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint8_t&gt;::max)())
14496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;uint&#32;8</emphasis>
14498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0xCC));
14499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(j.m_value.number_integer));
14500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j.m_value.number_unsigned&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint16_t&gt;::max)())
14502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;uint&#32;16</emphasis>
14504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0xCD));
14505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint16_t<emphasis role="keyword">&gt;</emphasis>(j.m_value.number_integer));
14506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j.m_value.number_unsigned&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint32_t&gt;::max)())
14508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;uint&#32;32</emphasis>
14510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0xCE));
14511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint32_t<emphasis role="keyword">&gt;</emphasis>(j.m_value.number_integer));
14512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j.m_value.number_unsigned&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint64_t&gt;::max)())
14514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;uint&#32;64</emphasis>
14516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0xCF));
14517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint64_t<emphasis role="keyword">&gt;</emphasis>(j.m_value.number_integer));
14518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14521 
14522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_float:
14523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_compact_float(j.m_value.number_float,&#32;detail::input_format_t::msgpack);
14525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14527 
14528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::string:
14529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;step&#32;1:&#32;write&#32;control&#32;byte&#32;and&#32;the&#32;string&#32;length</emphasis>
14531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;N&#32;=&#32;j.m_value.string-&gt;size();
14532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(N&#32;&lt;=&#32;31)
14533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;fixstr</emphasis>
14535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(0xA0&#32;|&#32;N));
14536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(N&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint8_t&gt;::max)())
14538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;str&#32;8</emphasis>
14540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0xD9));
14541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(N));
14542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(N&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint16_t&gt;::max)())
14544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;str&#32;16</emphasis>
14546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0xDA));
14547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint16_t<emphasis role="keyword">&gt;</emphasis>(N));
14548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(N&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint32_t&gt;::max)())
14550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;str&#32;32</emphasis>
14552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0xDB));
14553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint32_t<emphasis role="keyword">&gt;</emphasis>(N));
14554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14555 
14556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;step&#32;2:&#32;write&#32;the&#32;string</emphasis>
14557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_characters(
14558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>CharType*<emphasis role="keyword">&gt;</emphasis>(j.m_value.string-&gt;c_str()),
14559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value.string-&gt;size());
14560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14562 
14563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::array:
14564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;step&#32;1:&#32;write&#32;control&#32;byte&#32;and&#32;the&#32;array&#32;size</emphasis>
14566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;N&#32;=&#32;j.m_value.array-&gt;size();
14567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(N&#32;&lt;=&#32;15)
14568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;fixarray</emphasis>
14570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(0x90&#32;|&#32;N));
14571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(N&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint16_t&gt;::max)())
14573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;array&#32;16</emphasis>
14575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0xDC));
14576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint16_t<emphasis role="keyword">&gt;</emphasis>(N));
14577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(N&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint32_t&gt;::max)())
14579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;array&#32;32</emphasis>
14581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0xDD));
14582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint32_t<emphasis role="keyword">&gt;</emphasis>(N));
14583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14584 
14585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;step&#32;2:&#32;write&#32;each&#32;element</emphasis>
14586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;el&#32;:&#32;*j.m_value.<link linkend="_classarray">array</link>)
14587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_msgpack(el);
14589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14592 
14593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::binary:
14594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;step&#32;0:&#32;determine&#32;if&#32;the&#32;binary&#32;type&#32;has&#32;a&#32;set&#32;subtype&#32;to</emphasis>
14596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;determine&#32;whether&#32;or&#32;not&#32;to&#32;use&#32;the&#32;ext&#32;or&#32;fixext&#32;types</emphasis>
14597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;use_ext&#32;=&#32;j.m_value.binary-&gt;has_subtype();
14598 
14599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;step&#32;1:&#32;write&#32;control&#32;byte&#32;and&#32;the&#32;byte&#32;string&#32;length</emphasis>
14600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;N&#32;=&#32;j.m_value.binary-&gt;size();
14601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(N&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint8_t&gt;::max)())
14602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint8_t&#32;output_type{};
14604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;fixed&#32;=&#32;<emphasis role="keyword">true</emphasis>;
14605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(use_ext)
14606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(N)
14608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;1:
14610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_type&#32;=&#32;0xD4;&#32;<emphasis role="comment">//&#32;fixext&#32;1</emphasis>
14611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;2:
14613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_type&#32;=&#32;0xD5;&#32;<emphasis role="comment">//&#32;fixext&#32;2</emphasis>
14614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;4:
14616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_type&#32;=&#32;0xD6;&#32;<emphasis role="comment">//&#32;fixext&#32;4</emphasis>
14617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;8:
14619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_type&#32;=&#32;0xD7;&#32;<emphasis role="comment">//&#32;fixext&#32;8</emphasis>
14620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;16:
14622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_type&#32;=&#32;0xD8;&#32;<emphasis role="comment">//&#32;fixext&#32;16</emphasis>
14623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
14625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_type&#32;=&#32;0xC7;&#32;<emphasis role="comment">//&#32;ext&#32;8</emphasis>
14626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed&#32;=&#32;<emphasis role="keyword">false</emphasis>;
14627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14629 
14630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
14632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_type&#32;=&#32;0xC4;&#32;<emphasis role="comment">//&#32;bin&#32;8</emphasis>
14634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed&#32;=&#32;<emphasis role="keyword">false</emphasis>;
14635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14636 
14637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(output_type));
14638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!fixed)
14639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(N));
14641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(N&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint16_t&gt;::max)())
14644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint8_t&#32;output_type&#32;=&#32;use_ext
14646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;0xC8&#32;<emphasis role="comment">//&#32;ext&#32;16</emphasis>
14647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;0xC5;&#32;<emphasis role="comment">//&#32;bin&#32;16</emphasis>
14648 
14649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(output_type));
14650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint16_t<emphasis role="keyword">&gt;</emphasis>(N));
14651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(N&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint32_t&gt;::max)())
14653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint8_t&#32;output_type&#32;=&#32;use_ext
14655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;0xC9&#32;<emphasis role="comment">//&#32;ext&#32;32</emphasis>
14656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;0xC6;&#32;<emphasis role="comment">//&#32;bin&#32;32</emphasis>
14657 
14658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(output_type));
14659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint32_t<emphasis role="keyword">&gt;</emphasis>(N));
14660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14661 
14662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;step&#32;1.5:&#32;if&#32;this&#32;is&#32;an&#32;ext&#32;type,&#32;write&#32;the&#32;subtype</emphasis>
14663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(use_ext)
14664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::int8_t<emphasis role="keyword">&gt;</emphasis>(j.m_value.binary-&gt;subtype()));
14666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14667 
14668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;step&#32;2:&#32;write&#32;the&#32;byte&#32;string</emphasis>
14669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_characters(
14670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>CharType*<emphasis role="keyword">&gt;</emphasis>(j.m_value.binary-&gt;data()),
14671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;N);
14672 
14673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14675 
14676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::object:
14677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;step&#32;1:&#32;write&#32;control&#32;byte&#32;and&#32;the&#32;object&#32;size</emphasis>
14679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;N&#32;=&#32;j.m_value.object-&gt;size();
14680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(N&#32;&lt;=&#32;15)
14681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;fixmap</emphasis>
14683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(0x80&#32;|&#32;(N&#32;&amp;&#32;0xF)));
14684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(N&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint16_t&gt;::max)())
14686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;map&#32;16</emphasis>
14688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0xDE));
14689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint16_t<emphasis role="keyword">&gt;</emphasis>(N));
14690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(N&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint32_t&gt;::max)())
14692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;map&#32;32</emphasis>
14694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0xDF));
14695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint32_t<emphasis role="keyword">&gt;</emphasis>(N));
14696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14697 
14698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;step&#32;2:&#32;write&#32;each&#32;element</emphasis>
14699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;el&#32;:&#32;*j.m_value.<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab49790263c78300fbf05719e38246198">object</link>)
14700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_msgpack(el.first);
14702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_msgpack(el.second);
14703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14706 
14707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::discarded:
14708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
14709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14711 &#32;&#32;&#32;&#32;}
14712 
14720 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;write_ubjson(<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;use_count,
14721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;use_type,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;add_prefix&#32;=&#32;<emphasis role="keyword">true</emphasis>,
14722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;use_bjdata&#32;=&#32;<emphasis role="keyword">false</emphasis>)
14723 &#32;&#32;&#32;&#32;{
14724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(j.type())
14725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::null:
14727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(add_prefix)
14729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(<emphasis role="charliteral">&apos;Z&apos;</emphasis>));
14731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14734 
14735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::boolean:
14736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(add_prefix)
14738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(j.m_value.boolean
14740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;to_char_type(<emphasis role="charliteral">&apos;T&apos;</emphasis>)
14741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;to_char_type(<emphasis role="stringliteral">&apos;F&apos;</emphasis>));
14742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14745 
14746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_integer:
14747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number_with_ubjson_prefix(j.m_value.number_integer,&#32;add_prefix,&#32;use_bjdata);
14749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14751 
14752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_unsigned:
14753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number_with_ubjson_prefix(j.m_value.number_unsigned,&#32;add_prefix,&#32;use_bjdata);
14755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14757 
14758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_float:
14759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number_with_ubjson_prefix(j.m_value.number_float,&#32;add_prefix,&#32;use_bjdata);
14761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14763 
14764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::string:
14765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(add_prefix)
14767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(<emphasis role="charliteral">&apos;S&apos;</emphasis>));
14769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number_with_ubjson_prefix(j.m_value.string-&gt;size(),&#32;<emphasis role="keyword">true</emphasis>,&#32;use_bjdata);
14771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_characters(
14772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>CharType*<emphasis role="keyword">&gt;</emphasis>(j.m_value.string-&gt;c_str()),
14773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value.string-&gt;size());
14774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14776 
14777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::array:
14778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(add_prefix)
14780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(<emphasis role="charliteral">&apos;[&apos;</emphasis>));
14782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14783 
14784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;prefix_required&#32;=&#32;<emphasis role="keyword">true</emphasis>;
14785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(use_type&#32;&amp;&amp;&#32;!j.m_value.array-&gt;empty())
14786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(use_count);
14788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CharType&#32;first_prefix&#32;=&#32;ubjson_prefix(j.front(),&#32;use_bjdata);
14789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;same_prefix&#32;=&#32;<link linkend="_namespacestd_1af69ea32ebd7865fb57714d6b5f12f26d">std::all_of</link>(j.begin()&#32;+&#32;1,&#32;j.end(),
14790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[<emphasis role="keyword">this</emphasis>,&#32;first_prefix,&#32;use_bjdata](<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)
14791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;ubjson_prefix(v,&#32;use_bjdata)&#32;==&#32;first_prefix;
14793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
14794 
14795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;CharType&gt;&#32;bjdx&#32;=&#32;{<emphasis role="charliteral">&apos;[&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;{&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;S&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;H&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;T&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;F&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;N&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;Z&apos;</emphasis>};&#32;<emphasis role="comment">//&#32;excluded&#32;markers&#32;in&#32;bjdata&#32;optimized&#32;type</emphasis>
14796 
14797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(same_prefix&#32;&amp;&amp;&#32;!(use_bjdata&#32;&amp;&amp;&#32;<link linkend="_namespacestd_1ae3e398a3f38b0182e770944d57402701">std::find</link>(bjdx.begin(),&#32;bjdx.end(),&#32;first_prefix)&#32;!=&#32;bjdx.end()))
14798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prefix_required&#32;=&#32;<emphasis role="keyword">false</emphasis>;
14800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(<emphasis role="charliteral">&apos;$&apos;</emphasis>));
14801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(first_prefix);
14802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14804 
14805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(use_count)
14806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(<emphasis role="charliteral">&apos;#&apos;</emphasis>));
14808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number_with_ubjson_prefix(j.m_value.array-&gt;size(),&#32;<emphasis role="keyword">true</emphasis>,&#32;use_bjdata);
14809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14810 
14811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;el&#32;:&#32;*j.m_value.<link linkend="_classarray">array</link>)
14812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_ubjson(el,&#32;use_count,&#32;use_type,&#32;prefix_required,&#32;use_bjdata);
14814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14815 
14816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!use_count)
14817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(<emphasis role="charliteral">&apos;]&apos;</emphasis>));
14819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14820 
14821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14823 
14824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::binary:
14825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(add_prefix)
14827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(<emphasis role="charliteral">&apos;[&apos;</emphasis>));
14829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14830 
14831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(use_type&#32;&amp;&amp;&#32;!j.m_value.binary-&gt;empty())
14832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(use_count);
14834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(<emphasis role="charliteral">&apos;$&apos;</emphasis>));
14835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(<emphasis role="charliteral">&apos;U&apos;</emphasis>);
14836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14837 
14838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(use_count)
14839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(<emphasis role="charliteral">&apos;#&apos;</emphasis>));
14841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number_with_ubjson_prefix(j.m_value.binary-&gt;size(),&#32;<emphasis role="keyword">true</emphasis>,&#32;use_bjdata);
14842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14843 
14844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(use_type)
14845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_characters(
14847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>CharType*<emphasis role="keyword">&gt;</emphasis>(j.m_value.binary-&gt;data()),
14848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_value.binary-&gt;size());
14849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
14851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;j.m_value.binary-&gt;size();&#32;++i)
14853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(<emphasis role="charliteral">&apos;U&apos;</emphasis>));
14855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(j.m_value.binary-&gt;data()[i]);
14856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14858 
14859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!use_count)
14860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(<emphasis role="charliteral">&apos;]&apos;</emphasis>));
14862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14863 
14864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14866 
14867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::object:
14868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(use_bjdata&#32;&amp;&amp;&#32;j.m_value.object-&gt;size()&#32;==&#32;3&#32;&amp;&amp;&#32;j.m_value.object-&gt;find(<emphasis role="stringliteral">&quot;_ArrayType_&quot;</emphasis>)&#32;!=&#32;j.m_value.object-&gt;end()&#32;&amp;&amp;&#32;j.m_value.object-&gt;find(<emphasis role="stringliteral">&quot;_ArraySize_&quot;</emphasis>)&#32;!=&#32;j.m_value.object-&gt;end()&#32;&amp;&amp;&#32;j.m_value.object-&gt;find(<emphasis role="stringliteral">&quot;_ArrayData_&quot;</emphasis>)&#32;!=&#32;j.m_value.object-&gt;end())
14870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!write_bjdata_ndarray(*j.m_value.object,&#32;use_count,&#32;use_type))&#32;&#32;<emphasis role="comment">//&#32;decode&#32;bjdata&#32;ndarray&#32;in&#32;the&#32;JData&#32;format&#32;(https://github.com/NeuroJSON/jdata)</emphasis>
14872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14876 
14877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(add_prefix)
14878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(<emphasis role="charliteral">&apos;{&apos;</emphasis>));
14880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14881 
14882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;prefix_required&#32;=&#32;<emphasis role="keyword">true</emphasis>;
14883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(use_type&#32;&amp;&amp;&#32;!j.m_value.object-&gt;empty())
14884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(use_count);
14886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CharType&#32;first_prefix&#32;=&#32;ubjson_prefix(j.front(),&#32;use_bjdata);
14887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;same_prefix&#32;=&#32;<link linkend="_namespacestd_1af69ea32ebd7865fb57714d6b5f12f26d">std::all_of</link>(j.begin(),&#32;j.end(),
14888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[<emphasis role="keyword">this</emphasis>,&#32;first_prefix,&#32;use_bjdata](<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)
14889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;ubjson_prefix(v,&#32;use_bjdata)&#32;==&#32;first_prefix;
14891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
14892 
14893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;CharType&gt;&#32;bjdx&#32;=&#32;{<emphasis role="charliteral">&apos;[&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;{&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;S&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;H&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;T&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;F&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;N&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;Z&apos;</emphasis>};&#32;<emphasis role="comment">//&#32;excluded&#32;markers&#32;in&#32;bjdata&#32;optimized&#32;type</emphasis>
14894 
14895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(same_prefix&#32;&amp;&amp;&#32;!(use_bjdata&#32;&amp;&amp;&#32;<link linkend="_namespacestd_1ae3e398a3f38b0182e770944d57402701">std::find</link>(bjdx.begin(),&#32;bjdx.end(),&#32;first_prefix)&#32;!=&#32;bjdx.end()))
14896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prefix_required&#32;=&#32;<emphasis role="keyword">false</emphasis>;
14898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(<emphasis role="charliteral">&apos;$&apos;</emphasis>));
14899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(first_prefix);
14900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14902 
14903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(use_count)
14904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(<emphasis role="charliteral">&apos;#&apos;</emphasis>));
14906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number_with_ubjson_prefix(j.m_value.object-&gt;size(),&#32;<emphasis role="keyword">true</emphasis>,&#32;use_bjdata);
14907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14908 
14909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;el&#32;:&#32;*j.m_value.<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab49790263c78300fbf05719e38246198">object</link>)
14910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number_with_ubjson_prefix(el.first.size(),&#32;<emphasis role="keyword">true</emphasis>,&#32;use_bjdata);
14912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_characters(
14913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>CharType*<emphasis role="keyword">&gt;</emphasis>(el.first.c_str()),
14914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;el.first.size());
14915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_ubjson(el.second,&#32;use_count,&#32;use_type,&#32;prefix_required,&#32;use_bjdata);
14916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14917 
14918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!use_count)
14919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(<emphasis role="charliteral">&apos;}&apos;</emphasis>));
14921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14922 
14923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14925 
14926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::discarded:
14927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
14928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14930 &#32;&#32;&#32;&#32;}
14931 
14932 &#32;&#32;<emphasis role="keyword">private</emphasis>:
14934 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;BSON&#32;//</emphasis>
14936 
14941 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::size_t&#32;calc_bson_entry_header_size(<emphasis role="keyword">const</emphasis>&#32;string_t&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;j)
14942 &#32;&#32;&#32;&#32;{
14943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>.find(<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;string_t::value_type<emphasis role="keyword">&gt;</emphasis>(0));
14944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(it&#32;!=&#32;BasicJsonType::string_t::npos))
14945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(out_of_range::create(409,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;BSON&#32;key&#32;cannot&#32;contain&#32;code&#32;point&#32;U+0000&#32;(at&#32;byte&#32;&quot;</emphasis>,&#32;std::to_string(it),&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>),&#32;&amp;j));
14947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis><emphasis role="keyword">&gt;</emphasis>(j);
14948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14949 
14950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="comment">/*id*/</emphasis>&#32;1ul&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>.size()&#32;+&#32;<emphasis role="comment">/*zero-terminator*/</emphasis>1u;
14951 &#32;&#32;&#32;&#32;}
14952 
14956 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;write_bson_entry_header(<emphasis role="keyword">const</emphasis>&#32;string_t&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>,
14957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::uint8_t&#32;element_type)
14958 &#32;&#32;&#32;&#32;{
14959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(element_type));&#32;<emphasis role="comment">//&#32;boolean</emphasis>
14960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_characters(
14961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>CharType*<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>.c_str()),
14962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>.size()&#32;+&#32;1u);
14963 &#32;&#32;&#32;&#32;}
14964 
14968 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;write_bson_boolean(<emphasis role="keyword">const</emphasis>&#32;string_t&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>,
14969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classvalue">value</link>)
14970 &#32;&#32;&#32;&#32;{
14971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_bson_entry_header(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>,&#32;0x08);
14972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(<link linkend="_classvalue">value</link>&#32;?&#32;to_char_type(0x01)&#32;:&#32;to_char_type(0x00));
14973 &#32;&#32;&#32;&#32;}
14974 
14978 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;write_bson_double(<emphasis role="keyword">const</emphasis>&#32;string_t&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>,
14979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classvalue">value</link>)
14980 &#32;&#32;&#32;&#32;{
14981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_bson_entry_header(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>,&#32;0x01);
14982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number&lt;double&gt;(<link linkend="_classvalue">value</link>,&#32;<emphasis role="keyword">true</emphasis>);
14983 &#32;&#32;&#32;&#32;}
14984 
14988 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::size_t&#32;calc_bson_string_size(<emphasis role="keyword">const</emphasis>&#32;string_t&amp;&#32;<link linkend="_classvalue">value</link>)
14989 &#32;&#32;&#32;&#32;{
14990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">sizeof</emphasis>(std::int32_t)&#32;+&#32;<link linkend="_classvalue">value</link>.size()&#32;+&#32;1ul;
14991 &#32;&#32;&#32;&#32;}
14992 
14996 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;write_bson_string(<emphasis role="keyword">const</emphasis>&#32;string_t&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>,
14997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;string_t&amp;&#32;<link linkend="_classvalue">value</link>)
14998 &#32;&#32;&#32;&#32;{
14999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_bson_entry_header(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>,&#32;0x02);
15000 
15001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number&lt;std::int32_t&gt;(<emphasis role="keyword">static_cast&lt;</emphasis>std::int32_t<emphasis role="keyword">&gt;</emphasis>(<link linkend="_classvalue">value</link>.size()&#32;+&#32;1ul),&#32;<emphasis role="keyword">true</emphasis>);
15002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_characters(
15003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>CharType*<emphasis role="keyword">&gt;</emphasis>(<link linkend="_classvalue">value</link>.c_str()),
15004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>.size()&#32;+&#32;1);
15005 &#32;&#32;&#32;&#32;}
15006 
15010 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;write_bson_null(<emphasis role="keyword">const</emphasis>&#32;string_t&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>)
15011 &#32;&#32;&#32;&#32;{
15012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_bson_entry_header(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>,&#32;0x0A);
15013 &#32;&#32;&#32;&#32;}
15014 
15018 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::size_t&#32;calc_bson_integer_size(<emphasis role="keyword">const</emphasis>&#32;std::int64_t&#32;<link linkend="_classvalue">value</link>)
15019 &#32;&#32;&#32;&#32;{
15020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(std::numeric_limits&lt;std::int32_t&gt;::min)()&#32;&lt;=&#32;<link linkend="_classvalue">value</link>&#32;&amp;&amp;&#32;<link linkend="_classvalue">value</link>&#32;&lt;=&#32;(std::numeric_limits&lt;std::int32_t&gt;::max)()
15021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;<emphasis role="keyword">sizeof</emphasis>(std::int32_t)
15022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">sizeof</emphasis>(std::int64_t);
15023 &#32;&#32;&#32;&#32;}
15024 
15028 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;write_bson_integer(<emphasis role="keyword">const</emphasis>&#32;string_t&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>,
15029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::int64_t&#32;<link linkend="_classvalue">value</link>)
15030 &#32;&#32;&#32;&#32;{
15031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((std::numeric_limits&lt;std::int32_t&gt;::min)()&#32;&lt;=&#32;<link linkend="_classvalue">value</link>&#32;&amp;&amp;&#32;<link linkend="_classvalue">value</link>&#32;&lt;=&#32;(std::numeric_limits&lt;std::int32_t&gt;::max)())
15032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_bson_entry_header(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>,&#32;0x10);&#32;<emphasis role="comment">//&#32;int32</emphasis>
15034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number&lt;std::int32_t&gt;(<emphasis role="keyword">static_cast&lt;</emphasis>std::int32_t<emphasis role="keyword">&gt;</emphasis>(<link linkend="_classvalue">value</link>),&#32;<emphasis role="keyword">true</emphasis>);
15035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
15037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_bson_entry_header(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>,&#32;0x12);&#32;<emphasis role="comment">//&#32;int64</emphasis>
15039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number&lt;std::int64_t&gt;(<emphasis role="keyword">static_cast&lt;</emphasis>std::int64_t<emphasis role="keyword">&gt;</emphasis>(<link linkend="_classvalue">value</link>),&#32;<emphasis role="keyword">true</emphasis>);
15040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15041 &#32;&#32;&#32;&#32;}
15042 
15046 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;std::size_t&#32;calc_bson_unsigned_size(<emphasis role="keyword">const</emphasis>&#32;std::uint64_t&#32;<link linkend="_classvalue">value</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
15047 &#32;&#32;&#32;&#32;{
15048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_classvalue">value</link>&#32;&lt;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::uint64_t<emphasis role="keyword">&gt;</emphasis>((std::numeric_limits&lt;std::int32_t&gt;::max)()))
15049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;<emphasis role="keyword">sizeof</emphasis>(std::int32_t)
15050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;sizeof(<link linkend="_namespacestd">std</link>::<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>);
15051 &#32;&#32;&#32;&#32;}
15052 
15056 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;write_bson_unsigned(<emphasis role="keyword">const</emphasis>&#32;string_t&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>,
15057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;j)
15058 &#32;&#32;&#32;&#32;{
15059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j.m_value.number_unsigned&#32;&lt;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::uint64_t<emphasis role="keyword">&gt;</emphasis>((std::numeric_limits&lt;std::int32_t&gt;::max)()))
15060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_bson_entry_header(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>,&#32;0x10&#32;<emphasis role="comment">/*&#32;int32&#32;*/</emphasis>);
15062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number&lt;std::int32_t&gt;(<emphasis role="keyword">static_cast&lt;</emphasis>std::int32_t<emphasis role="keyword">&gt;</emphasis>(j.m_value.number_unsigned),&#32;<emphasis role="keyword">true</emphasis>);
15063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j.m_value.number_unsigned&#32;&lt;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::uint64_t<emphasis role="keyword">&gt;</emphasis>((std::numeric_limits&lt;std::int64_t&gt;::max)()))
15065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_bson_entry_header(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>,&#32;0x12&#32;<emphasis role="comment">/*&#32;int64&#32;*/</emphasis>);
15067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number&lt;std::int64_t&gt;(<emphasis role="keyword">static_cast&lt;</emphasis>std::int64_t<emphasis role="keyword">&gt;</emphasis>(j.m_value.number_unsigned),&#32;<emphasis role="keyword">true</emphasis>);
15068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
15070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(out_of_range::create(407,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;integer&#32;number&#32;&quot;</emphasis>,&#32;std::to_string(j.m_value.number_unsigned),&#32;<emphasis role="stringliteral">&quot;&#32;cannot&#32;be&#32;represented&#32;by&#32;BSON&#32;as&#32;it&#32;does&#32;not&#32;fit&#32;int64&quot;</emphasis>),&#32;&amp;j));
15072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15073 &#32;&#32;&#32;&#32;}
15074 
15078 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;write_bson_object_entry(<emphasis role="keyword">const</emphasis>&#32;string_t&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>,
15079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::object_t&amp;&#32;<link linkend="_classvalue">value</link>)
15080 &#32;&#32;&#32;&#32;{
15081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_bson_entry_header(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>,&#32;0x03);&#32;<emphasis role="comment">//&#32;object</emphasis>
15082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_bson_object(<link linkend="_classvalue">value</link>);
15083 &#32;&#32;&#32;&#32;}
15084 
15088 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::size_t&#32;calc_bson_array_size(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::array_t&amp;&#32;<link linkend="_classvalue">value</link>)
15089 &#32;&#32;&#32;&#32;{
15090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;array_index&#32;=&#32;0ul;
15091 
15092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::size_t&#32;embedded_document_size&#32;=&#32;std::accumulate(std::begin(<link linkend="_classvalue">value</link>),&#32;std::end(<link linkend="_classvalue">value</link>),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(0),&#32;[&amp;array_index](std::size_t&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::array_t::value_type&#32;&amp;&#32;el)
15093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;+&#32;calc_bson_element_size(std::to_string(array_index++),&#32;el);
15095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
15096 
15097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">sizeof</emphasis>(std::int32_t)&#32;+&#32;embedded_document_size&#32;+&#32;1ul;
15098 &#32;&#32;&#32;&#32;}
15099 
15103 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::size_t&#32;calc_bson_binary_size(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::binary_t&amp;&#32;<link linkend="_classvalue">value</link>)
15104 &#32;&#32;&#32;&#32;{
15105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">sizeof</emphasis>(std::int32_t)&#32;+&#32;<link linkend="_classvalue">value</link>.size()&#32;+&#32;1ul;
15106 &#32;&#32;&#32;&#32;}
15107 
15111 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;write_bson_array(<emphasis role="keyword">const</emphasis>&#32;string_t&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>,
15112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::array_t&amp;&#32;<link linkend="_classvalue">value</link>)
15113 &#32;&#32;&#32;&#32;{
15114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_bson_entry_header(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>,&#32;0x04);&#32;<emphasis role="comment">//&#32;array</emphasis>
15115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number&lt;std::int32_t&gt;(<emphasis role="keyword">static_cast&lt;</emphasis>std::int32_t<emphasis role="keyword">&gt;</emphasis>(calc_bson_array_size(<link linkend="_classvalue">value</link>)),&#32;<emphasis role="keyword">true</emphasis>);
15116 
15117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;array_index&#32;=&#32;0ul;
15118 
15119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;el&#32;:&#32;<link linkend="_classvalue">value</link>)
15120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_bson_element(std::to_string(array_index++),&#32;el);
15122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15123 
15124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0x00));
15125 &#32;&#32;&#32;&#32;}
15126 
15130 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;write_bson_binary(<emphasis role="keyword">const</emphasis>&#32;string_t&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>,
15131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;binary_t&amp;&#32;<link linkend="_classvalue">value</link>)
15132 &#32;&#32;&#32;&#32;{
15133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_bson_entry_header(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>,&#32;0x05);
15134 
15135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number&lt;std::int32_t&gt;(<emphasis role="keyword">static_cast&lt;</emphasis>std::int32_t<emphasis role="keyword">&gt;</emphasis>(<link linkend="_classvalue">value</link>.size()),&#32;<emphasis role="keyword">true</emphasis>);
15136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<link linkend="_classvalue">value</link>.has_subtype()&#32;?&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(<link linkend="_classvalue">value</link>.subtype())&#32;:&#32;static_cast&lt;<link linkend="_namespacestd">std</link>::<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&gt;(0x00));
15137 
15138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_characters(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>CharType*<emphasis role="keyword">&gt;</emphasis>(<link linkend="_classvalue">value</link>.data()),&#32;<link linkend="_classvalue">value</link>.size());
15139 &#32;&#32;&#32;&#32;}
15140 
15145 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::size_t&#32;calc_bson_element_size(<emphasis role="keyword">const</emphasis>&#32;string_t&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>,
15146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;j)
15147 &#32;&#32;&#32;&#32;{
15148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;header_size&#32;=&#32;calc_bson_entry_header_size(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>,&#32;j);
15149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(j.type())
15150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::object:
15152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;header_size&#32;+&#32;calc_bson_object_size(*j.m_value.object);
15153 
15154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::array:
15155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;header_size&#32;+&#32;calc_bson_array_size(*j.m_value.array);
15156 
15157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::binary:
15158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;header_size&#32;+&#32;calc_bson_binary_size(*j.m_value.binary);
15159 
15160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::boolean:
15161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;header_size&#32;+&#32;1ul;
15162 
15163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_float:
15164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;header_size&#32;+&#32;8ul;
15165 
15166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_integer:
15167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;header_size&#32;+&#32;calc_bson_integer_size(j.m_value.number_integer);
15168 
15169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_unsigned:
15170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;header_size&#32;+&#32;calc_bson_unsigned_size(j.m_value.number_unsigned);
15171 
15172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::string:
15173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;header_size&#32;+&#32;calc_bson_string_size(*j.m_value.string);
15174 
15175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::null:
15176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;header_size&#32;+&#32;0ul;
15177 
15178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LCOV_EXCL_START</emphasis>
15179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::discarded:
15180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
15181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(<emphasis role="keyword">false</emphasis>);&#32;<emphasis role="comment">//&#32;NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)</emphasis>
15182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0ul;
15183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LCOV_EXCL_STOP</emphasis>
15184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15185 &#32;&#32;&#32;&#32;}
15186 
15193 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;write_bson_element(<emphasis role="keyword">const</emphasis>&#32;string_t&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>,
15194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;j)
15195 &#32;&#32;&#32;&#32;{
15196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(j.type())
15197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::object:
15199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;write_bson_object_entry(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>,&#32;*j.m_value.object);
15200 
15201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::array:
15202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;write_bson_array(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>,&#32;*j.m_value.array);
15203 
15204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::binary:
15205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;write_bson_binary(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>,&#32;*j.m_value.binary);
15206 
15207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::boolean:
15208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;write_bson_boolean(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>,&#32;j.m_value.boolean);
15209 
15210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_float:
15211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;write_bson_double(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>,&#32;j.m_value.number_float);
15212 
15213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_integer:
15214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;write_bson_integer(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>,&#32;j.m_value.number_integer);
15215 
15216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_unsigned:
15217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;write_bson_unsigned(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>,&#32;j);
15218 
15219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::string:
15220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;write_bson_string(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>,&#32;*j.m_value.string);
15221 
15222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::null:
15223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;write_bson_null(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>);
15224 
15225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LCOV_EXCL_START</emphasis>
15226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::discarded:
15227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
15228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(<emphasis role="keyword">false</emphasis>);&#32;<emphasis role="comment">//&#32;NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)</emphasis>
15229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
15230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LCOV_EXCL_STOP</emphasis>
15231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15232 &#32;&#32;&#32;&#32;}
15233 
15240 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::size_t&#32;calc_bson_object_size(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::object_t&amp;&#32;<link linkend="_classvalue">value</link>)
15241 &#32;&#32;&#32;&#32;{
15242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;document_size&#32;=&#32;std::accumulate(<link linkend="_classvalue">value</link>.begin(),&#32;<link linkend="_classvalue">value</link>.end(),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(0),
15243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::object_t::value_type&#32;&amp;&#32;el)
15244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;result&#32;+=&#32;calc_bson_element_size(el.first,&#32;el.second);
15246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
15247 
15248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">sizeof</emphasis>(std::int32_t)&#32;+&#32;document_size&#32;+&#32;1ul;
15249 &#32;&#32;&#32;&#32;}
15250 
15255 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;write_bson_object(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::object_t&amp;&#32;<link linkend="_classvalue">value</link>)
15256 &#32;&#32;&#32;&#32;{
15257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number&lt;std::int32_t&gt;(<emphasis role="keyword">static_cast&lt;</emphasis>std::int32_t<emphasis role="keyword">&gt;</emphasis>(calc_bson_object_size(<link linkend="_classvalue">value</link>)),&#32;<emphasis role="keyword">true</emphasis>);
15258 
15259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;el&#32;:&#32;<link linkend="_classvalue">value</link>)
15260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_bson_element(el.first,&#32;el.second);
15262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15263 
15264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(0x00));
15265 &#32;&#32;&#32;&#32;}
15266 
15268 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;CBOR&#32;//</emphasis>
15270 
15271 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;CharType&#32;get_cbor_float_prefix(<emphasis role="keywordtype">float</emphasis>&#32;<emphasis role="comment">/*unused*/</emphasis>)
15272 &#32;&#32;&#32;&#32;{
15273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;to_char_type(0xFA);&#32;&#32;<emphasis role="comment">//&#32;Single-Precision&#32;Float</emphasis>
15274 &#32;&#32;&#32;&#32;}
15275 
15276 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;CharType&#32;get_cbor_float_prefix(<emphasis role="keywordtype">double</emphasis>&#32;<emphasis role="comment">/*unused*/</emphasis>)
15277 &#32;&#32;&#32;&#32;{
15278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;to_char_type(0xFB);&#32;&#32;<emphasis role="comment">//&#32;Double-Precision&#32;Float</emphasis>
15279 &#32;&#32;&#32;&#32;}
15280 
15282 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;MsgPack&#32;//</emphasis>
15284 
15285 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;CharType&#32;get_msgpack_float_prefix(<emphasis role="keywordtype">float</emphasis>&#32;<emphasis role="comment">/*unused*/</emphasis>)
15286 &#32;&#32;&#32;&#32;{
15287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;to_char_type(0xCA);&#32;&#32;<emphasis role="comment">//&#32;float&#32;32</emphasis>
15288 &#32;&#32;&#32;&#32;}
15289 
15290 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;CharType&#32;get_msgpack_float_prefix(<emphasis role="keywordtype">double</emphasis>&#32;<emphasis role="comment">/*unused*/</emphasis>)
15291 &#32;&#32;&#32;&#32;{
15292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;to_char_type(0xCB);&#32;&#32;<emphasis role="comment">//&#32;float&#32;64</emphasis>
15293 &#32;&#32;&#32;&#32;}
15294 
15296 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;UBJSON&#32;//</emphasis>
15298 
15299 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;UBJSON:&#32;write&#32;number&#32;(floating&#32;point)</emphasis>
15300 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;NumberType,&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;
15301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_floating_point&lt;NumberType&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&#32;=&#32;0&gt;
15302 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;write_number_with_ubjson_prefix(<emphasis role="keyword">const</emphasis>&#32;NumberType&#32;n,
15303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;add_prefix,
15304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;use_bjdata)
15305 &#32;&#32;&#32;&#32;{
15306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(add_prefix)
15307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(get_ubjson_float_prefix(n));
15309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(n,&#32;use_bjdata);
15311 &#32;&#32;&#32;&#32;}
15312 
15313 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;UBJSON:&#32;write&#32;number&#32;(unsigned&#32;integer)</emphasis>
15314 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;NumberType,&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;
15315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_unsigned&lt;NumberType&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&#32;=&#32;0&gt;
15316 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;write_number_with_ubjson_prefix(<emphasis role="keyword">const</emphasis>&#32;NumberType&#32;n,
15317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;add_prefix,
15318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;use_bjdata)
15319 &#32;&#32;&#32;&#32;{
15320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;&lt;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::uint64_t<emphasis role="keyword">&gt;</emphasis>((std::numeric_limits&lt;std::int8_t&gt;::max)()))
15321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(add_prefix)
15323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(<emphasis role="charliteral">&apos;i&apos;</emphasis>));&#32;&#32;<emphasis role="comment">//&#32;int8</emphasis>
15325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(n),&#32;use_bjdata);
15327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint8_t&gt;::max)())
15329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(add_prefix)
15331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(<emphasis role="charliteral">&apos;U&apos;</emphasis>));&#32;&#32;<emphasis role="comment">//&#32;uint8</emphasis>
15333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(n),&#32;use_bjdata);
15335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;&lt;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::uint64_t<emphasis role="keyword">&gt;</emphasis>((std::numeric_limits&lt;std::int16_t&gt;::max)()))
15337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(add_prefix)
15339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(<emphasis role="charliteral">&apos;I&apos;</emphasis>));&#32;&#32;<emphasis role="comment">//&#32;int16</emphasis>
15341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::int16_t<emphasis role="keyword">&gt;</emphasis>(n),&#32;use_bjdata);
15343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(use_bjdata&#32;&amp;&amp;&#32;n&#32;&lt;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link><emphasis role="keyword">&gt;</emphasis>((std::numeric_limits&lt;uint16_t&gt;::max)()))
15345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(add_prefix)
15347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(<emphasis role="charliteral">&apos;u&apos;</emphasis>));&#32;&#32;<emphasis role="comment">//&#32;uint16&#32;-&#32;bjdata&#32;only</emphasis>
15349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint16_t<emphasis role="keyword">&gt;</emphasis>(n),&#32;use_bjdata);
15351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;&lt;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::uint64_t<emphasis role="keyword">&gt;</emphasis>((std::numeric_limits&lt;std::int32_t&gt;::max)()))
15353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(add_prefix)
15355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(<emphasis role="charliteral">&apos;l&apos;</emphasis>));&#32;&#32;<emphasis role="comment">//&#32;int32</emphasis>
15357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::int32_t<emphasis role="keyword">&gt;</emphasis>(n),&#32;use_bjdata);
15359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(use_bjdata&#32;&amp;&amp;&#32;n&#32;&lt;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link><emphasis role="keyword">&gt;</emphasis>((std::numeric_limits&lt;uint32_t&gt;::max)()))
15361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(add_prefix)
15363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(<emphasis role="charliteral">&apos;m&apos;</emphasis>));&#32;&#32;<emphasis role="comment">//&#32;uint32&#32;-&#32;bjdata&#32;only</emphasis>
15365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint32_t<emphasis role="keyword">&gt;</emphasis>(n),&#32;use_bjdata);
15367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;&lt;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::uint64_t<emphasis role="keyword">&gt;</emphasis>((std::numeric_limits&lt;std::int64_t&gt;::max)()))
15369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(add_prefix)
15371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(<emphasis role="charliteral">&apos;L&apos;</emphasis>));&#32;&#32;<emphasis role="comment">//&#32;int64</emphasis>
15373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::int64_t<emphasis role="keyword">&gt;</emphasis>(n),&#32;use_bjdata);
15375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(use_bjdata&#32;&amp;&amp;&#32;n&#32;&lt;=&#32;(std::numeric_limits&lt;uint64_t&gt;::max)())
15377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(add_prefix)
15379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(<emphasis role="charliteral">&apos;M&apos;</emphasis>));&#32;&#32;<emphasis role="comment">//&#32;uint64&#32;-&#32;bjdata&#32;only</emphasis>
15381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint64_t<emphasis role="keyword">&gt;</emphasis>(n),&#32;use_bjdata);
15383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
15385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(add_prefix)
15387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(<emphasis role="charliteral">&apos;H&apos;</emphasis>));&#32;&#32;<emphasis role="comment">//&#32;high-precision&#32;number</emphasis>
15389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15390 
15391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;number&#32;=&#32;BasicJsonType(n).dump();
15392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number_with_ubjson_prefix(number.size(),&#32;<emphasis role="keyword">true</emphasis>,&#32;use_bjdata);
15393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;number.size();&#32;++i)
15394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(number[i])));
15396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15398 &#32;&#32;&#32;&#32;}
15399 
15400 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;UBJSON:&#32;write&#32;number&#32;(signed&#32;integer)</emphasis>
15401 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;NumberType,&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&#32;&lt;
15402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_signed&lt;NumberType&gt;::value&amp;&amp;
15403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!std::is_floating_point&lt;NumberType&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&#32;=&#32;0&#32;&gt;
15404 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;write_number_with_ubjson_prefix(<emphasis role="keyword">const</emphasis>&#32;NumberType&#32;n,
15405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;add_prefix,
15406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;use_bjdata)
15407 &#32;&#32;&#32;&#32;{
15408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((std::numeric_limits&lt;std::int8_t&gt;::min)()&#32;&lt;=&#32;n&#32;&amp;&amp;&#32;n&#32;&lt;=&#32;(std::numeric_limits&lt;std::int8_t&gt;::max)())
15409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(add_prefix)
15411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(<emphasis role="charliteral">&apos;i&apos;</emphasis>));&#32;&#32;<emphasis role="comment">//&#32;int8</emphasis>
15413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::int8_t<emphasis role="keyword">&gt;</emphasis>(n),&#32;use_bjdata);
15415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">static_cast&lt;</emphasis>std::int64_t<emphasis role="keyword">&gt;</emphasis>((std::numeric_limits&lt;std::uint8_t&gt;::min)())&#32;&lt;=&#32;n&#32;&amp;&amp;&#32;n&#32;&lt;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::int64_t<emphasis role="keyword">&gt;</emphasis>((std::numeric_limits&lt;std::uint8_t&gt;::max)()))
15417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(add_prefix)
15419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(<emphasis role="charliteral">&apos;U&apos;</emphasis>));&#32;&#32;<emphasis role="comment">//&#32;uint8</emphasis>
15421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(n),&#32;use_bjdata);
15423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;((std::numeric_limits&lt;std::int16_t&gt;::min)()&#32;&lt;=&#32;n&#32;&amp;&amp;&#32;n&#32;&lt;=&#32;(std::numeric_limits&lt;std::int16_t&gt;::max)())
15425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(add_prefix)
15427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(<emphasis role="charliteral">&apos;I&apos;</emphasis>));&#32;&#32;<emphasis role="comment">//&#32;int16</emphasis>
15429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::int16_t<emphasis role="keyword">&gt;</emphasis>(n),&#32;use_bjdata);
15431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(use_bjdata&#32;&amp;&amp;&#32;(<emphasis role="keyword">static_cast&lt;</emphasis>std::int64_t<emphasis role="keyword">&gt;</emphasis>((std::numeric_limits&lt;std::uint16_t&gt;::min)())&#32;&lt;=&#32;n&#32;&amp;&amp;&#32;n&#32;&lt;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::int64_t<emphasis role="keyword">&gt;</emphasis>((std::numeric_limits&lt;std::uint16_t&gt;::max)())))
15433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(add_prefix)
15435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(<emphasis role="charliteral">&apos;u&apos;</emphasis>));&#32;&#32;<emphasis role="comment">//&#32;uint16&#32;-&#32;bjdata&#32;only</emphasis>
15437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a273cf69d639a59973b6019625df33e30">uint16_t</link><emphasis role="keyword">&gt;</emphasis>(n),&#32;use_bjdata);
15439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;((std::numeric_limits&lt;std::int32_t&gt;::min)()&#32;&lt;=&#32;n&#32;&amp;&amp;&#32;n&#32;&lt;=&#32;(std::numeric_limits&lt;std::int32_t&gt;::max)())
15441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(add_prefix)
15443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(<emphasis role="charliteral">&apos;l&apos;</emphasis>));&#32;&#32;<emphasis role="comment">//&#32;int32</emphasis>
15445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::int32_t<emphasis role="keyword">&gt;</emphasis>(n),&#32;use_bjdata);
15447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(use_bjdata&#32;&amp;&amp;&#32;(<emphasis role="keyword">static_cast&lt;</emphasis>std::int64_t<emphasis role="keyword">&gt;</emphasis>((std::numeric_limits&lt;std::uint32_t&gt;::min)())&#32;&lt;=&#32;n&#32;&amp;&amp;&#32;n&#32;&lt;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::int64_t<emphasis role="keyword">&gt;</emphasis>((std::numeric_limits&lt;std::uint32_t&gt;::max)())))
15449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(add_prefix)
15451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(<emphasis role="charliteral">&apos;m&apos;</emphasis>));&#32;&#32;<emphasis role="comment">//&#32;uint32&#32;-&#32;bjdata&#32;only</emphasis>
15453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link><emphasis role="keyword">&gt;</emphasis>(n),&#32;use_bjdata);
15455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;((std::numeric_limits&lt;std::int64_t&gt;::min)()&#32;&lt;=&#32;n&#32;&amp;&amp;&#32;n&#32;&lt;=&#32;(std::numeric_limits&lt;std::int64_t&gt;::max)())
15457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(add_prefix)
15459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(<emphasis role="charliteral">&apos;L&apos;</emphasis>));&#32;&#32;<emphasis role="comment">//&#32;int64</emphasis>
15461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::int64_t<emphasis role="keyword">&gt;</emphasis>(n),&#32;use_bjdata);
15463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LCOV_EXCL_START</emphasis>
15465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
15466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(add_prefix)
15468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(<emphasis role="charliteral">&apos;H&apos;</emphasis>));&#32;&#32;<emphasis role="comment">//&#32;high-precision&#32;number</emphasis>
15470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15471 
15472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;number&#32;=&#32;BasicJsonType(n).dump();
15473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number_with_ubjson_prefix(number.size(),&#32;<emphasis role="keyword">true</emphasis>,&#32;use_bjdata);
15474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;number.size();&#32;++i)
15475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(to_char_type(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(number[i])));
15477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LCOV_EXCL_STOP</emphasis>
15480 &#32;&#32;&#32;&#32;}
15481 
15485 &#32;&#32;&#32;&#32;CharType&#32;ubjson_prefix(<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;j,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;use_bjdata)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
15486 &#32;&#32;&#32;&#32;{
15487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(j.type())
15488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::null:
15490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;Z&apos;</emphasis>;
15491 
15492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::boolean:
15493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;j.m_value.boolean&#32;?&#32;<emphasis role="charliteral">&apos;T&apos;</emphasis>&#32;:&#32;<emphasis role="charliteral">&apos;F&apos;</emphasis>;
15494 
15495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_integer:
15496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((std::numeric_limits&lt;std::int8_t&gt;::min)()&#32;&lt;=&#32;j.m_value.number_integer&#32;&amp;&amp;&#32;j.m_value.number_integer&#32;&lt;=&#32;(std::numeric_limits&lt;std::int8_t&gt;::max)())
15498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;i&apos;</emphasis>;
15500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((std::numeric_limits&lt;std::uint8_t&gt;::min)()&#32;&lt;=&#32;j.m_value.number_integer&#32;&amp;&amp;&#32;j.m_value.number_integer&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint8_t&gt;::max)())
15502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;U&apos;</emphasis>;
15504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((std::numeric_limits&lt;std::int16_t&gt;::min)()&#32;&lt;=&#32;j.m_value.number_integer&#32;&amp;&amp;&#32;j.m_value.number_integer&#32;&lt;=&#32;(std::numeric_limits&lt;std::int16_t&gt;::max)())
15506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;I&apos;</emphasis>;
15508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(use_bjdata&#32;&amp;&amp;&#32;((std::numeric_limits&lt;std::uint16_t&gt;::min)()&#32;&lt;=&#32;j.m_value.number_integer&#32;&amp;&amp;&#32;j.m_value.number_integer&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint16_t&gt;::max)()))
15510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;u&apos;</emphasis>;
15512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((std::numeric_limits&lt;std::int32_t&gt;::min)()&#32;&lt;=&#32;j.m_value.number_integer&#32;&amp;&amp;&#32;j.m_value.number_integer&#32;&lt;=&#32;(std::numeric_limits&lt;std::int32_t&gt;::max)())
15514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;l&apos;</emphasis>;
15516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(use_bjdata&#32;&amp;&amp;&#32;((std::numeric_limits&lt;std::uint32_t&gt;::min)()&#32;&lt;=&#32;j.m_value.number_integer&#32;&amp;&amp;&#32;j.m_value.number_integer&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint32_t&gt;::max)()))
15518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;m&apos;</emphasis>;
15520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((std::numeric_limits&lt;std::int64_t&gt;::min)()&#32;&lt;=&#32;j.m_value.number_integer&#32;&amp;&amp;&#32;j.m_value.number_integer&#32;&lt;=&#32;(std::numeric_limits&lt;std::int64_t&gt;::max)())
15522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;L&apos;</emphasis>;
15524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;anything&#32;else&#32;is&#32;treated&#32;as&#32;high-precision&#32;number</emphasis>
15526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;H&apos;</emphasis>;&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
15527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15528 
15529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_unsigned:
15530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j.m_value.number_unsigned&#32;&lt;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::uint64_t<emphasis role="keyword">&gt;</emphasis>((std::numeric_limits&lt;std::int8_t&gt;::max)()))
15532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;i&apos;</emphasis>;
15534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j.m_value.number_unsigned&#32;&lt;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::uint64_t<emphasis role="keyword">&gt;</emphasis>((std::numeric_limits&lt;std::uint8_t&gt;::max)()))
15536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;U&apos;</emphasis>;
15538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j.m_value.number_unsigned&#32;&lt;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::uint64_t<emphasis role="keyword">&gt;</emphasis>((std::numeric_limits&lt;std::int16_t&gt;::max)()))
15540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;I&apos;</emphasis>;
15542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(use_bjdata&#32;&amp;&amp;&#32;j.m_value.number_unsigned&#32;&lt;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::uint64_t<emphasis role="keyword">&gt;</emphasis>((std::numeric_limits&lt;std::uint16_t&gt;::max)()))
15544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;u&apos;</emphasis>;
15546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j.m_value.number_unsigned&#32;&lt;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::uint64_t<emphasis role="keyword">&gt;</emphasis>((std::numeric_limits&lt;std::int32_t&gt;::max)()))
15548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;l&apos;</emphasis>;
15550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(use_bjdata&#32;&amp;&amp;&#32;j.m_value.number_unsigned&#32;&lt;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::uint64_t<emphasis role="keyword">&gt;</emphasis>((std::numeric_limits&lt;std::uint32_t&gt;::max)()))
15552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;m&apos;</emphasis>;
15554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j.m_value.number_unsigned&#32;&lt;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::uint64_t<emphasis role="keyword">&gt;</emphasis>((std::numeric_limits&lt;std::int64_t&gt;::max)()))
15556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;L&apos;</emphasis>;
15558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(use_bjdata&#32;&amp;&amp;&#32;j.m_value.number_unsigned&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint64_t&gt;::max)())
15560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;M&apos;</emphasis>;
15562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;anything&#32;else&#32;is&#32;treated&#32;as&#32;high-precision&#32;number</emphasis>
15564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;H&apos;</emphasis>;&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
15565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15566 
15567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_float:
15568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_ubjson_float_prefix(j.m_value.number_float);
15569 
15570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::string:
15571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;S&apos;</emphasis>;
15572 
15573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::array:&#32;<emphasis role="comment">//&#32;fallthrough</emphasis>
15574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::binary:
15575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;[&apos;</emphasis>;
15576 
15577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::object:
15578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;{&apos;</emphasis>;
15579 
15580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::discarded:
15581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;&#32;<emphasis role="comment">//&#32;discarded&#32;values</emphasis>
15582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;N&apos;</emphasis>;
15583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15584 &#32;&#32;&#32;&#32;}
15585 
15586 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;CharType&#32;get_ubjson_float_prefix(<emphasis role="keywordtype">float</emphasis>&#32;<emphasis role="comment">/*unused*/</emphasis>)
15587 &#32;&#32;&#32;&#32;{
15588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;d&apos;</emphasis>;&#32;&#32;<emphasis role="comment">//&#32;float&#32;32</emphasis>
15589 &#32;&#32;&#32;&#32;}
15590 
15591 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;CharType&#32;get_ubjson_float_prefix(<emphasis role="keywordtype">double</emphasis>&#32;<emphasis role="comment">/*unused*/</emphasis>)
15592 &#32;&#32;&#32;&#32;{
15593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;D&apos;</emphasis>;&#32;&#32;<emphasis role="comment">//&#32;float&#32;64</emphasis>
15594 &#32;&#32;&#32;&#32;}
15595 
15599 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;write_bjdata_ndarray(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::object_t&amp;&#32;<link linkend="_classvalue">value</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;use_count,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;use_type)
15600 &#32;&#32;&#32;&#32;{
15601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::map&lt;string_t,&#32;CharType&gt;&#32;bjdtype&#32;=&#32;{{<emphasis role="stringliteral">&quot;uint8&quot;</emphasis>,&#32;<emphasis role="charliteral">&apos;U&apos;</emphasis>},&#32;&#32;{<emphasis role="stringliteral">&quot;int8&quot;</emphasis>,&#32;<emphasis role="charliteral">&apos;i&apos;</emphasis>},&#32;&#32;{<emphasis role="stringliteral">&quot;uint16&quot;</emphasis>,&#32;<emphasis role="charliteral">&apos;u&apos;</emphasis>},&#32;{<emphasis role="stringliteral">&quot;int16&quot;</emphasis>,&#32;<emphasis role="charliteral">&apos;I&apos;</emphasis>},
15602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;uint32&quot;</emphasis>,&#32;<emphasis role="charliteral">&apos;m&apos;</emphasis>},&#32;{<emphasis role="stringliteral">&quot;int32&quot;</emphasis>,&#32;<emphasis role="charliteral">&apos;l&apos;</emphasis>},&#32;{<emphasis role="stringliteral">&quot;uint64&quot;</emphasis>,&#32;<emphasis role="charliteral">&apos;M&apos;</emphasis>},&#32;{<emphasis role="stringliteral">&quot;int64&quot;</emphasis>,&#32;<emphasis role="charliteral">&apos;L&apos;</emphasis>},&#32;{<emphasis role="stringliteral">&quot;single&quot;</emphasis>,&#32;<emphasis role="charliteral">&apos;d&apos;</emphasis>},&#32;{<emphasis role="stringliteral">&quot;double&quot;</emphasis>,&#32;<emphasis role="charliteral">&apos;D&apos;</emphasis>},&#32;{<emphasis role="stringliteral">&quot;char&quot;</emphasis>,&#32;<emphasis role="charliteral">&apos;C&apos;</emphasis>}
15603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
15604 
15605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;string_t&#32;key&#32;=&#32;<emphasis role="stringliteral">&quot;_ArrayType_&quot;</emphasis>;
15606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;bjdtype.find(<emphasis role="keyword">static_cast&lt;</emphasis>string_t<emphasis role="keyword">&gt;</emphasis>(<link linkend="_classvalue">value</link>.at(key)));
15607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(it&#32;==&#32;bjdtype.end())
15608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
15610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CharType&#32;dtype&#32;=&#32;it-&gt;second;
15612 
15613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key&#32;=&#32;<emphasis role="stringliteral">&quot;_ArraySize_&quot;</emphasis>;
15614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;=&#32;(<link linkend="_classvalue">value</link>.at(key).empty()&#32;?&#32;0&#32;:&#32;1);
15615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;el&#32;:&#32;<link linkend="_classvalue">value</link>.at(key))
15616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;*=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(el.m_value.number_unsigned);
15618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15619 
15620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key&#32;=&#32;<emphasis role="stringliteral">&quot;_ArrayData_&quot;</emphasis>;
15621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classvalue">value</link>.at(key).size()&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)
15622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
15624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15625 
15626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(<emphasis role="charliteral">&apos;[&apos;</emphasis>);
15627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(<emphasis role="charliteral">&apos;$&apos;</emphasis>);
15628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(dtype);
15629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(<emphasis role="charliteral">&apos;#&apos;</emphasis>);
15630 
15631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key&#32;=&#32;<emphasis role="stringliteral">&quot;_ArraySize_&quot;</emphasis>;
15632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_ubjson(<link linkend="_classvalue">value</link>.at(key),&#32;use_count,&#32;use_type,&#32;<emphasis role="keyword">true</emphasis>,&#32;&#32;<emphasis role="keyword">true</emphasis>);
15633 
15634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key&#32;=&#32;<emphasis role="stringliteral">&quot;_ArrayData_&quot;</emphasis>;
15635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(dtype&#32;==&#32;<emphasis role="charliteral">&apos;U&apos;</emphasis>&#32;||&#32;dtype&#32;==&#32;<emphasis role="charliteral">&apos;C&apos;</emphasis>)
15636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;el&#32;:&#32;<link linkend="_classvalue">value</link>.at(key))
15638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(el.m_value.number_unsigned),&#32;<emphasis role="keyword">true</emphasis>);
15640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(dtype&#32;==&#32;<emphasis role="charliteral">&apos;i&apos;</emphasis>)
15643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;el&#32;:&#32;<link linkend="_classvalue">value</link>.at(key))
15645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::int8_t<emphasis role="keyword">&gt;</emphasis>(el.m_value.number_integer),&#32;<emphasis role="keyword">true</emphasis>);
15647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(dtype&#32;==&#32;<emphasis role="charliteral">&apos;u&apos;</emphasis>)
15650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;el&#32;:&#32;<link linkend="_classvalue">value</link>.at(key))
15652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint16_t<emphasis role="keyword">&gt;</emphasis>(el.m_value.number_unsigned),&#32;<emphasis role="keyword">true</emphasis>);
15654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(dtype&#32;==&#32;<emphasis role="charliteral">&apos;I&apos;</emphasis>)
15657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;el&#32;:&#32;<link linkend="_classvalue">value</link>.at(key))
15659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::int16_t<emphasis role="keyword">&gt;</emphasis>(el.m_value.number_integer),&#32;<emphasis role="keyword">true</emphasis>);
15661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(dtype&#32;==&#32;<emphasis role="charliteral">&apos;m&apos;</emphasis>)
15664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;el&#32;:&#32;<link linkend="_classvalue">value</link>.at(key))
15666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint32_t<emphasis role="keyword">&gt;</emphasis>(el.m_value.number_unsigned),&#32;<emphasis role="keyword">true</emphasis>);
15668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(dtype&#32;==&#32;<emphasis role="charliteral">&apos;l&apos;</emphasis>)
15671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;el&#32;:&#32;<link linkend="_classvalue">value</link>.at(key))
15673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::int32_t<emphasis role="keyword">&gt;</emphasis>(el.m_value.number_integer),&#32;<emphasis role="keyword">true</emphasis>);
15675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(dtype&#32;==&#32;<emphasis role="charliteral">&apos;M&apos;</emphasis>)
15678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;el&#32;:&#32;<link linkend="_classvalue">value</link>.at(key))
15680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint64_t<emphasis role="keyword">&gt;</emphasis>(el.m_value.number_unsigned),&#32;<emphasis role="keyword">true</emphasis>);
15682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(dtype&#32;==&#32;<emphasis role="charliteral">&apos;L&apos;</emphasis>)
15685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;el&#32;:&#32;<link linkend="_classvalue">value</link>.at(key))
15687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis>std::int64_t<emphasis role="keyword">&gt;</emphasis>(el.m_value.number_integer),&#32;<emphasis role="keyword">true</emphasis>);
15689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(dtype&#32;==&#32;<emphasis role="charliteral">&apos;d&apos;</emphasis>)
15692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;el&#32;:&#32;<link linkend="_classvalue">value</link>.at(key))
15694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(el.m_value.number_float),&#32;<emphasis role="keyword">true</emphasis>);
15696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(dtype&#32;==&#32;<emphasis role="charliteral">&apos;D&apos;</emphasis>)
15699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;el&#32;:&#32;<link linkend="_classvalue">value</link>.at(key))
15701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(el.m_value.number_float),&#32;<emphasis role="keyword">true</emphasis>);
15703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
15706 &#32;&#32;&#32;&#32;}
15707 
15709 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Utility&#32;functions&#32;//</emphasis>
15711 
15712 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
15713 <emphasis role="comment">&#32;&#32;&#32;&#32;@brief&#32;write&#32;a&#32;number&#32;to&#32;output&#32;input</emphasis>
15714 <emphasis role="comment">&#32;&#32;&#32;&#32;@param[in]&#32;n&#32;number&#32;of&#32;type&#32;@a&#32;NumberType</emphasis>
15715 <emphasis role="comment">&#32;&#32;&#32;&#32;@param[in]&#32;OutputIsLittleEndian&#32;Set&#32;to&#32;true&#32;if&#32;output&#32;data&#32;is</emphasis>
15716 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;required&#32;to&#32;be&#32;little&#32;endian</emphasis>
15717 <emphasis role="comment">&#32;&#32;&#32;&#32;@tparam&#32;NumberType&#32;the&#32;type&#32;of&#32;the&#32;number</emphasis>
15718 <emphasis role="comment"></emphasis>
15719 <emphasis role="comment">&#32;&#32;&#32;&#32;@note&#32;This&#32;function&#32;needs&#32;to&#32;respect&#32;the&#32;system&apos;s&#32;endianness,&#32;because&#32;bytes</emphasis>
15720 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in&#32;CBOR,&#32;MessagePack,&#32;and&#32;UBJSON&#32;are&#32;stored&#32;in&#32;network&#32;order&#32;(big</emphasis>
15721 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;endian)&#32;and&#32;therefore&#32;need&#32;reordering&#32;on&#32;little&#32;endian&#32;systems.</emphasis>
15722 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;On&#32;the&#32;other&#32;hand,&#32;BSON&#32;and&#32;BJData&#32;use&#32;little&#32;endian&#32;and&#32;should&#32;reorder</emphasis>
15723 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;on&#32;big&#32;endian&#32;systems.</emphasis>
15724 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
15725 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;NumberType&gt;
15726 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;write_number(<emphasis role="keyword">const</emphasis>&#32;NumberType&#32;n,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;OutputIsLittleEndian&#32;=&#32;<emphasis role="keyword">false</emphasis>)
15727 &#32;&#32;&#32;&#32;{
15728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;step&#32;1:&#32;write&#32;number&#32;to&#32;array&#32;of&#32;length&#32;NumberType</emphasis>
15729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::array&lt;CharType,&#32;<emphasis role="keyword">sizeof</emphasis>(NumberType)&gt;&#32;vec{};
15730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memcpy(vec.data(),&#32;&amp;n,&#32;<emphasis role="keyword">sizeof</emphasis>(NumberType));
15731 
15732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;step&#32;2:&#32;write&#32;array&#32;to&#32;output&#32;(with&#32;possible&#32;reordering)</emphasis>
15733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is_little_endian&#32;!=&#32;OutputIsLittleEndian)
15734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;reverse&#32;byte&#32;order&#32;prior&#32;to&#32;conversion&#32;if&#32;necessary</emphasis>
15736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a66cd7f2a58b728c4a8f98ca025941719">std::reverse</link>(vec.begin(),&#32;vec.end());
15737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15738 
15739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_characters(vec.data(),&#32;<emphasis role="keyword">sizeof</emphasis>(NumberType));
15740 &#32;&#32;&#32;&#32;}
15741 
15742 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;write_compact_float(<emphasis role="keyword">const</emphasis>&#32;number_float_t&#32;n,&#32;detail::input_format_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>)
15743 &#32;&#32;&#32;&#32;{
15744 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
15745 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
15746 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wfloat-equal&quot;</emphasis>
15747 <emphasis role="preprocessor">#endif</emphasis>
15748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(n)&#32;&gt;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(std::numeric_limits&lt;float&gt;::lowest())&#32;&amp;&amp;
15749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(n)&#32;&lt;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>((std::numeric_limits&lt;float&gt;::max)())&#32;&amp;&amp;
15750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(n))&#32;==&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(n))
15751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>&#32;==&#32;detail::input_format_t::cbor
15753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;get_cbor_float_prefix(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(n))
15754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;get_msgpack_float_prefix(static_cast&lt;float&gt;(n)));
15755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(n));
15756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
15758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;write_character(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>&#32;==&#32;detail::input_format_t::cbor
15760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;get_cbor_float_prefix(n)
15761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;get_msgpack_float_prefix(n));
15762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_number(n);
15763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15764 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
15765 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
15766 <emphasis role="preprocessor">#endif</emphasis>
15767 &#32;&#32;&#32;&#32;}
15768 
15769 &#32;&#32;<emphasis role="keyword">public</emphasis>:
15770 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;following&#32;to_char_type&#32;functions&#32;are&#32;implement&#32;the&#32;conversion</emphasis>
15771 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;between&#32;uint8_t&#32;and&#32;CharType.&#32;In&#32;case&#32;CharType&#32;is&#32;not&#32;unsigned,</emphasis>
15772 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;such&#32;a&#32;conversion&#32;is&#32;required&#32;to&#32;allow&#32;values&#32;greater&#32;than&#32;128.</emphasis>
15773 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;See&#32;&lt;https://github.com/nlohmann/json/issues/1286&gt;&#32;for&#32;a&#32;discussion.</emphasis>
15774 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link>&#32;=&#32;CharType,
15775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enable_if_t&#32;&lt;&#32;std::is_signed&lt;C&gt;::value&#32;&amp;&amp;&#32;std::is_signed&lt;char&gt;::value&#32;&gt;&#32;*&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>&#32;&gt;
15776 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;CharType&#32;to_char_type(std::uint8_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
15777 &#32;&#32;&#32;&#32;{
15778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>);
15779 &#32;&#32;&#32;&#32;}
15780 
15781 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link>&#32;=&#32;CharType,
15782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enable_if_t&#32;&lt;&#32;std::is_signed&lt;C&gt;::value&#32;&amp;&amp;&#32;std::is_unsigned&lt;char&gt;::value&#32;&gt;&#32;*&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>&#32;&gt;
15783 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;CharType&#32;to_char_type(std::uint8_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
15784 &#32;&#32;&#32;&#32;{
15785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(std::uint8_t)&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(CharType),&#32;<emphasis role="stringliteral">&quot;size&#32;of&#32;CharType&#32;must&#32;be&#32;equal&#32;to&#32;std::uint8_t&quot;</emphasis>);
15786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_trivial&lt;CharType&gt;::value,&#32;<emphasis role="stringliteral">&quot;CharType&#32;must&#32;be&#32;trivial&quot;</emphasis>);
15787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CharType&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
15788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memcpy(&amp;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>,&#32;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>));
15789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
15790 &#32;&#32;&#32;&#32;}
15791 
15792 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link>&#32;=&#32;CharType,
15793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enable_if_t&lt;std::is_unsigned&lt;C&gt;::value&gt;*&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>&gt;
15794 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;CharType&#32;to_char_type(std::uint8_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
15795 &#32;&#32;&#32;&#32;{
15796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>;
15797 &#32;&#32;&#32;&#32;}
15798 
15799 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;InputCharType,&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link>&#32;=&#32;CharType,
15800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&#32;&lt;
15801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_signed&lt;C&gt;::value&#32;&amp;&amp;
15802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_signed&lt;char&gt;::value&#32;&amp;&amp;
15803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_same&lt;char,&#32;typename&#32;std::remove_cv&lt;InputCharType&gt;::type&gt;<link linkend="_classvalue">::value</link>
15804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;&#32;*&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>&#32;&gt;
15805 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;CharType&#32;to_char_type(InputCharType&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
15806 &#32;&#32;&#32;&#32;{
15807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>;
15808 &#32;&#32;&#32;&#32;}
15809 
15810 &#32;&#32;<emphasis role="keyword">private</emphasis>:
15812 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_little_endian&#32;=&#32;little_endianness();
15813 
15815 &#32;&#32;&#32;&#32;output_adapter_t&lt;CharType&gt;&#32;oa&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
15816 };
15817 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
15818 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann</emphasis>
15819 
15820 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/output/output_adapters.hpp&gt;</emphasis>
15821 
15822 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/output/serializer.hpp&gt;</emphasis>
15823 
15824 
15825 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>&#32;<emphasis role="comment">//&#32;reverse,&#32;remove,&#32;fill,&#32;find,&#32;none_of</emphasis>
15826 <emphasis role="preprocessor">#include&#32;&lt;array&gt;</emphasis>&#32;<emphasis role="comment">//&#32;array</emphasis>
15827 <emphasis role="preprocessor">#include&#32;&lt;clocale&gt;</emphasis>&#32;<emphasis role="comment">//&#32;localeconv,&#32;lconv</emphasis>
15828 <emphasis role="preprocessor">#include&#32;&lt;cmath&gt;</emphasis>&#32;<emphasis role="comment">//&#32;labs,&#32;isfinite,&#32;isnan,&#32;signbit</emphasis>
15829 <emphasis role="preprocessor">#include&#32;&lt;cstddef&gt;</emphasis>&#32;<emphasis role="comment">//&#32;size_t,&#32;ptrdiff_t</emphasis>
15830 <emphasis role="preprocessor">#include&#32;&lt;cstdint&gt;</emphasis>&#32;<emphasis role="comment">//&#32;uint8_t</emphasis>
15831 <emphasis role="preprocessor">#include&#32;&lt;cstdio&gt;</emphasis>&#32;<emphasis role="comment">//&#32;snprintf</emphasis>
15832 <emphasis role="preprocessor">#include&#32;&lt;limits&gt;</emphasis>&#32;<emphasis role="comment">//&#32;numeric_limits</emphasis>
15833 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>&#32;<emphasis role="comment">//&#32;string,&#32;char_traits</emphasis>
15834 <emphasis role="preprocessor">#include&#32;&lt;iomanip&gt;</emphasis>&#32;<emphasis role="comment">//&#32;setfill,&#32;setw</emphasis>
15835 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>&#32;<emphasis role="comment">//&#32;is_same</emphasis>
15836 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>&#32;<emphasis role="comment">//&#32;move</emphasis>
15837 
15838 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/conversions/to_chars.hpp&gt;</emphasis>
15839 
15840 
15841 <emphasis role="preprocessor">#include&#32;&lt;array&gt;</emphasis>&#32;<emphasis role="comment">//&#32;array</emphasis>
15842 <emphasis role="preprocessor">#include&#32;&lt;cmath&gt;</emphasis>&#32;&#32;&#32;<emphasis role="comment">//&#32;signbit,&#32;isfinite</emphasis>
15843 <emphasis role="preprocessor">#include&#32;&lt;cstdint&gt;</emphasis>&#32;<emphasis role="comment">//&#32;intN_t,&#32;uintN_t</emphasis>
15844 <emphasis role="preprocessor">#include&#32;&lt;cstring&gt;</emphasis>&#32;<emphasis role="comment">//&#32;memcpy,&#32;memmove</emphasis>
15845 <emphasis role="preprocessor">#include&#32;&lt;limits&gt;</emphasis>&#32;<emphasis role="comment">//&#32;numeric_limits</emphasis>
15846 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>&#32;<emphasis role="comment">//&#32;conditional</emphasis>
15847 
15848 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/macro_scope.hpp&gt;</emphasis>
15849 
15850 
15851 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann">nlohmann</link>
15852 {
15853 <emphasis role="keyword">namespace&#32;</emphasis>detail
15854 {
15855 
15875 <emphasis role="keyword">namespace&#32;</emphasis>dtoa_impl
15876 {
15877 
15878 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Target,&#32;<emphasis role="keyword">typename</emphasis>&#32;Source&gt;
15879 Target&#32;reinterpret_bits(<emphasis role="keyword">const</emphasis>&#32;Source&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>)
15880 {
15881 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(Target)&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(Source),&#32;<emphasis role="stringliteral">&quot;size&#32;mismatch&quot;</emphasis>);
15882 
15883 &#32;&#32;&#32;&#32;Target&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1af9d0cbbbeb7414e786c41899e5a856d7">target</link>;
15884 &#32;&#32;&#32;&#32;std::memcpy(&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1af9d0cbbbeb7414e786c41899e5a856d7">target</link>,&#32;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>,&#32;<emphasis role="keyword">sizeof</emphasis>(Source));
15885 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1af9d0cbbbeb7414e786c41899e5a856d7">target</link>;
15886 }
15887 
15888 <emphasis role="keyword">struct&#32;</emphasis>diyfp&#32;<emphasis role="comment">//&#32;f&#32;*&#32;2^e</emphasis>
15889 {
15890 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;kPrecision&#32;=&#32;64;&#32;<emphasis role="comment">//&#32;=&#32;q</emphasis>
15891 
15892 &#32;&#32;&#32;&#32;std::uint64_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>&#32;=&#32;0;
15893 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;e&#32;=&#32;0;
15894 
15895 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;diyfp(std::uint64_t&#32;f_,&#32;<emphasis role="keywordtype">int</emphasis>&#32;e_)&#32;noexcept&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>(f_),&#32;e(e_)&#32;{}
15896 
15901 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;diyfp&#32;sub(<emphasis role="keyword">const</emphasis>&#32;diyfp&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;diyfp&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
15902 &#32;&#32;&#32;&#32;{
15903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.e&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>.e);
15904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.f&#32;&gt;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>.f);
15905 
15906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.f&#32;-&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>.f,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.e};
15907 &#32;&#32;&#32;&#32;}
15908 
15913 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;diyfp&#32;mul(<emphasis role="keyword">const</emphasis>&#32;diyfp&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;diyfp&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
15914 &#32;&#32;&#32;&#32;{
15915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(kPrecision&#32;==&#32;64,&#32;<emphasis role="stringliteral">&quot;internal&#32;error&quot;</emphasis>);
15916 
15917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Computes:</emphasis>
15918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;f&#32;=&#32;round((x.f&#32;*&#32;y.f)&#32;/&#32;2^q)</emphasis>
15919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;e&#32;=&#32;x.e&#32;+&#32;y.e&#32;+&#32;q</emphasis>
15920 
15921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Emulate&#32;the&#32;64-bit&#32;*&#32;64-bit&#32;multiplication:</emphasis>
15922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
15923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;p&#32;=&#32;u&#32;*&#32;v</emphasis>
15924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;=&#32;(u_lo&#32;+&#32;2^32&#32;u_hi)&#32;(v_lo&#32;+&#32;2^32&#32;v_hi)</emphasis>
15925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;=&#32;(u_lo&#32;v_lo&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;+&#32;2^32&#32;((u_lo&#32;v_hi&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;+&#32;(u_hi&#32;v_lo&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;))&#32;+&#32;2^64&#32;(u_hi&#32;v_hi&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)</emphasis>
15926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;=&#32;(p0&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;+&#32;2^32&#32;((p1&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;+&#32;(p2&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;))&#32;+&#32;2^64&#32;(p3&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)</emphasis>
15927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;=&#32;(p0_lo&#32;+&#32;2^32&#32;p0_hi)&#32;+&#32;2^32&#32;((p1_lo&#32;+&#32;2^32&#32;p1_hi)&#32;+&#32;(p2_lo&#32;+&#32;2^32&#32;p2_hi))&#32;+&#32;2^64&#32;(p3&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)</emphasis>
15928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;=&#32;(p0_lo&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;+&#32;2^32&#32;(p0_hi&#32;+&#32;p1_lo&#32;+&#32;p2_lo&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;+&#32;2^64&#32;(p1_hi&#32;+&#32;p2_hi&#32;+&#32;p3)</emphasis>
15929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;=&#32;(p0_lo&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;+&#32;2^32&#32;(Q&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;+&#32;2^64&#32;(H&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)</emphasis>
15930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;=&#32;(p0_lo&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;+&#32;2^32&#32;(Q_lo&#32;+&#32;2^32&#32;Q_hi&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;+&#32;2^64&#32;(H&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)</emphasis>
15931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
15932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(Since&#32;Q&#32;might&#32;be&#32;larger&#32;than&#32;2^32&#32;-&#32;1)</emphasis>
15933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
15934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;=&#32;(p0_lo&#32;+&#32;2^32&#32;Q_lo)&#32;+&#32;2^64&#32;(Q_hi&#32;+&#32;H)</emphasis>
15935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
15936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(Q_hi&#32;+&#32;H&#32;does&#32;not&#32;overflow&#32;a&#32;64-bit&#32;int)</emphasis>
15937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
15938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;=&#32;p_lo&#32;+&#32;2^64&#32;p_hi</emphasis>
15939 
15940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::uint64_t&#32;u_lo&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.f&#32;&amp;&#32;0xFFFFFFFFu;
15941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::uint64_t&#32;u_hi&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.f&#32;&gt;&gt;&#32;32u;
15942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::uint64_t&#32;v_lo&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>.f&#32;&amp;&#32;0xFFFFFFFFu;
15943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::uint64_t&#32;v_hi&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>.f&#32;&gt;&gt;&#32;32u;
15944 
15945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::uint64_t&#32;p0&#32;=&#32;u_lo&#32;*&#32;v_lo;
15946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::uint64_t&#32;p1&#32;=&#32;u_lo&#32;*&#32;v_hi;
15947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::uint64_t&#32;p2&#32;=&#32;u_hi&#32;*&#32;v_lo;
15948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::uint64_t&#32;p3&#32;=&#32;u_hi&#32;*&#32;v_hi;
15949 
15950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::uint64_t&#32;p0_hi&#32;=&#32;p0&#32;&gt;&gt;&#32;32u;
15951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::uint64_t&#32;p1_lo&#32;=&#32;p1&#32;&amp;&#32;0xFFFFFFFFu;
15952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::uint64_t&#32;p1_hi&#32;=&#32;p1&#32;&gt;&gt;&#32;32u;
15953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::uint64_t&#32;p2_lo&#32;=&#32;p2&#32;&amp;&#32;0xFFFFFFFFu;
15954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::uint64_t&#32;p2_hi&#32;=&#32;p2&#32;&gt;&gt;&#32;32u;
15955 
15956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint64_t&#32;Q&#32;=&#32;p0_hi&#32;+&#32;p1_lo&#32;+&#32;p2_lo;
15957 
15958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;full&#32;product&#32;might&#32;now&#32;be&#32;computed&#32;as</emphasis>
15959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
15960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;p_hi&#32;=&#32;p3&#32;+&#32;p2_hi&#32;+&#32;p1_hi&#32;+&#32;(Q&#32;&gt;&gt;&#32;32)</emphasis>
15961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;p_lo&#32;=&#32;p0_lo&#32;+&#32;(Q&#32;&lt;&lt;&#32;32)</emphasis>
15962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
15963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;But&#32;in&#32;this&#32;particular&#32;case&#32;here,&#32;the&#32;full&#32;p_lo&#32;is&#32;not&#32;required.</emphasis>
15964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Effectively&#32;we&#32;only&#32;need&#32;to&#32;add&#32;the&#32;highest&#32;bit&#32;in&#32;p_lo&#32;to&#32;p_hi&#32;(and</emphasis>
15965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Q_hi&#32;+&#32;1&#32;does&#32;not&#32;overflow).</emphasis>
15966 
15967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Q&#32;+=&#32;std::uint64_t{1}&#32;&lt;&lt;&#32;(64u&#32;-&#32;32u&#32;-&#32;1u);&#32;<emphasis role="comment">//&#32;round,&#32;ties&#32;up</emphasis>
15968 
15969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::uint64_t&#32;h&#32;=&#32;p3&#32;+&#32;p2_hi&#32;+&#32;p1_hi&#32;+&#32;(Q&#32;&gt;&gt;&#32;32u);
15970 
15971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{h,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.e&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>.e&#32;+&#32;64};
15972 &#32;&#32;&#32;&#32;}
15973 
15978 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;diyfp&#32;<link linkend="_namespacenormalize">normalize</link>(diyfp&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
15979 &#32;&#32;&#32;&#32;{
15980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.f&#32;!=&#32;0);
15981 
15982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;((<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.f&#32;&gt;&gt;&#32;63u)&#32;==&#32;0)
15983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.f&#32;&lt;&lt;=&#32;1u;
15985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.e--;
15986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15987 
15988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>;
15989 &#32;&#32;&#32;&#32;}
15990 
15995 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;diyfp&#32;normalize_to(<emphasis role="keyword">const</emphasis>&#32;diyfp&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;target_exponent)&#32;<emphasis role="keyword">noexcept</emphasis>
15996 &#32;&#32;&#32;&#32;{
15997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;delta&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.e&#32;-&#32;target_exponent;
15998 
15999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(delta&#32;&gt;=&#32;0);
16000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(((<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.f&#32;&lt;&lt;&#32;delta)&#32;&gt;&gt;&#32;delta)&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.f);
16001 
16002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.f&#32;&lt;&lt;&#32;delta,&#32;target_exponent};
16003 &#32;&#32;&#32;&#32;}
16004 };
16005 
16006 <emphasis role="keyword">struct&#32;</emphasis>boundaries
16007 {
16008 &#32;&#32;&#32;&#32;diyfp&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a1ad83f255afd4038129297b57ef91603">w</link>;
16009 &#32;&#32;&#32;&#32;diyfp&#32;minus;
16010 &#32;&#32;&#32;&#32;diyfp&#32;plus;
16011 };
16012 
16019 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;FloatType&gt;
16020 boundaries&#32;compute_boundaries(FloatType&#32;<link linkend="_classvalue">value</link>)
16021 {
16022 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(std::isfinite(<link linkend="_classvalue">value</link>));
16023 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(<link linkend="_classvalue">value</link>&#32;&gt;&#32;0);
16024 
16025 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Convert&#32;the&#32;IEEE&#32;representation&#32;into&#32;a&#32;diyfp.</emphasis>
16026 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16027 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;v&#32;is&#32;denormal:</emphasis>
16028 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;value&#32;=&#32;0.F&#32;*&#32;2^(1&#32;-&#32;bias)&#32;=&#32;(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;F)&#32;*&#32;2^(1&#32;-&#32;bias&#32;-&#32;(p-1))</emphasis>
16029 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;v&#32;is&#32;normalized:</emphasis>
16030 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;value&#32;=&#32;1.F&#32;*&#32;2^(E&#32;-&#32;bias)&#32;=&#32;(2^(p-1)&#32;+&#32;F)&#32;*&#32;2^(E&#32;-&#32;bias&#32;-&#32;(p-1))</emphasis>
16031 
16032 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::numeric_limits&lt;FloatType&gt;::is_iec559,
16033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;internal&#32;error:&#32;dtoa_short&#32;requires&#32;an&#32;IEEE-754&#32;floating-point&#32;implementation&quot;</emphasis>);
16034 
16035 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;kPrecision&#32;=&#32;std::numeric_limits&lt;FloatType&gt;::digits;&#32;<emphasis role="comment">//&#32;=&#32;p&#32;(includes&#32;the&#32;hidden&#32;bit)</emphasis>
16036 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;kBias&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::numeric_limits&lt;FloatType&gt;::max_exponent&#32;-&#32;1&#32;+&#32;(kPrecision&#32;-&#32;1);
16037 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;kMinExp&#32;&#32;&#32;&#32;=&#32;1&#32;-&#32;kBias;
16038 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;std::uint64_t&#32;kHiddenBit&#32;=&#32;std::uint64_t{1}&#32;&lt;&lt;&#32;(kPrecision&#32;-&#32;1);&#32;<emphasis role="comment">//&#32;=&#32;2^(p-1)</emphasis>
16039 
16040 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>bits_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::conditional&lt;kPrecision&#32;==&#32;24,&#32;std::uint32_t,&#32;std::uint64_t&#32;&gt;::type;
16041 
16042 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;bits&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::uint64_t<emphasis role="keyword">&gt;</emphasis>(reinterpret_bits&lt;bits_type&gt;(<link linkend="_classvalue">value</link>));
16043 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::uint64_t&#32;E&#32;=&#32;bits&#32;&gt;&gt;&#32;(kPrecision&#32;-&#32;1);
16044 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::uint64_t&#32;F&#32;=&#32;bits&#32;&amp;&#32;(kHiddenBit&#32;-&#32;1);
16045 
16046 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_denormal&#32;=&#32;E&#32;==&#32;0;
16047 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;diyfp&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>&#32;=&#32;is_denormal
16048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;diyfp(F,&#32;kMinExp)
16049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;diyfp(F&#32;+&#32;kHiddenBit,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(E)&#32;-&#32;kBias);
16050 
16051 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Compute&#32;the&#32;boundaries&#32;m-&#32;and&#32;m+&#32;of&#32;the&#32;floating-point&#32;value</emphasis>
16052 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;v&#32;=&#32;f&#32;*&#32;2^e.</emphasis>
16053 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16054 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Determine&#32;v-&#32;and&#32;v+,&#32;the&#32;floating-point&#32;predecessor&#32;and&#32;successor&#32;if&#32;v,</emphasis>
16055 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;respectively.</emphasis>
16056 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16057 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;v-&#32;=&#32;v&#32;-&#32;2^e&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;f&#32;!=&#32;2^(p-1)&#32;or&#32;e&#32;==&#32;e_min&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(A)</emphasis>
16058 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;v&#32;-&#32;2^(e-1)&#32;&#32;&#32;&#32;if&#32;f&#32;==&#32;2^(p-1)&#32;and&#32;e&#32;&gt;&#32;e_min&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(B)</emphasis>
16059 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16060 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;v+&#32;=&#32;v&#32;+&#32;2^e</emphasis>
16061 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16062 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Let&#32;m-&#32;=&#32;(v-&#32;+&#32;v)&#32;/&#32;2&#32;and&#32;m+&#32;=&#32;(v&#32;+&#32;v+)&#32;/&#32;2.&#32;All&#32;real&#32;numbers&#32;_strictly_</emphasis>
16063 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;between&#32;m-&#32;and&#32;m+&#32;round&#32;to&#32;v,&#32;regardless&#32;of&#32;how&#32;the&#32;input&#32;rounding</emphasis>
16064 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;algorithm&#32;breaks&#32;ties.</emphasis>
16065 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16066 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;---+-------------+-------------+-------------+-------------+---&#32;&#32;(A)</emphasis>
16067 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v-&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m-&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m+&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v+</emphasis>
16068 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16069 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;-----------------+------+------+-------------+-------------+---&#32;&#32;(B)</emphasis>
16070 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v-&#32;&#32;&#32;&#32;&#32;m-&#32;&#32;&#32;&#32;&#32;v&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m+&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v+</emphasis>
16071 
16072 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;lower_boundary_is_closer&#32;=&#32;F&#32;==&#32;0&#32;&amp;&amp;&#32;E&#32;&gt;&#32;1;
16073 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;diyfp&#32;m_plus&#32;=&#32;diyfp(2&#32;*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>.f&#32;+&#32;1,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>.e&#32;-&#32;1);
16074 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;diyfp&#32;m_minus&#32;=&#32;lower_boundary_is_closer
16075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;diyfp(4&#32;*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>.f&#32;-&#32;1,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>.e&#32;-&#32;2)&#32;&#32;<emphasis role="comment">//&#32;(B)</emphasis>
16076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;diyfp(2&#32;*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>.f&#32;-&#32;1,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>.e&#32;-&#32;1);&#32;<emphasis role="comment">//&#32;(A)</emphasis>
16077 
16078 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Determine&#32;the&#32;normalized&#32;w+&#32;=&#32;m+.</emphasis>
16079 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;diyfp&#32;w_plus&#32;=&#32;diyfp::normalize(m_plus);
16080 
16081 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Determine&#32;w-&#32;=&#32;m-&#32;such&#32;that&#32;e_(w-)&#32;=&#32;e_(w+).</emphasis>
16082 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;diyfp&#32;w_minus&#32;=&#32;diyfp::normalize_to(m_minus,&#32;w_plus.e);
16083 
16084 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{diyfp::normalize(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>),&#32;w_minus,&#32;w_plus};
16085 }
16086 
16087 <emphasis role="comment">//&#32;Given&#32;normalized&#32;diyfp&#32;w,&#32;Grisu&#32;needs&#32;to&#32;find&#32;a&#32;(normalized)&#32;cached</emphasis>
16088 <emphasis role="comment">//&#32;power-of-ten&#32;c,&#32;such&#32;that&#32;the&#32;exponent&#32;of&#32;the&#32;product&#32;c&#32;*&#32;w&#32;=&#32;f&#32;*&#32;2^e&#32;lies</emphasis>
16089 <emphasis role="comment">//&#32;within&#32;a&#32;certain&#32;range&#32;[alpha,&#32;gamma]&#32;(Definition&#32;3.2&#32;from&#32;[1])</emphasis>
16090 <emphasis role="comment">//</emphasis>
16091 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;alpha&#32;&lt;=&#32;e&#32;=&#32;e_c&#32;+&#32;e_w&#32;+&#32;q&#32;&lt;=&#32;gamma</emphasis>
16092 <emphasis role="comment">//</emphasis>
16093 <emphasis role="comment">//&#32;or</emphasis>
16094 <emphasis role="comment">//</emphasis>
16095 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;f_c&#32;*&#32;f_w&#32;*&#32;2^alpha&#32;&lt;=&#32;f_c&#32;2^(e_c)&#32;*&#32;f_w&#32;2^(e_w)&#32;*&#32;2^q</emphasis>
16096 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;=&#32;f_c&#32;*&#32;f_w&#32;*&#32;2^gamma</emphasis>
16097 <emphasis role="comment">//</emphasis>
16098 <emphasis role="comment">//&#32;Since&#32;c&#32;and&#32;w&#32;are&#32;normalized,&#32;i.e.&#32;2^(q-1)&#32;&lt;=&#32;f&#32;&lt;&#32;2^q,&#32;this&#32;implies</emphasis>
16099 <emphasis role="comment">//</emphasis>
16100 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;2^(q-1)&#32;*&#32;2^(q-1)&#32;*&#32;2^alpha&#32;&lt;=&#32;c&#32;*&#32;w&#32;*&#32;2^q&#32;&lt;&#32;2^q&#32;*&#32;2^q&#32;*&#32;2^gamma</emphasis>
16101 <emphasis role="comment">//</emphasis>
16102 <emphasis role="comment">//&#32;or</emphasis>
16103 <emphasis role="comment">//</emphasis>
16104 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;2^(q&#32;-&#32;2&#32;+&#32;alpha)&#32;&lt;=&#32;c&#32;*&#32;w&#32;&lt;&#32;2^(q&#32;+&#32;gamma)</emphasis>
16105 <emphasis role="comment">//</emphasis>
16106 <emphasis role="comment">//&#32;The&#32;choice&#32;of&#32;(alpha,gamma)&#32;determines&#32;the&#32;size&#32;of&#32;the&#32;table&#32;and&#32;the&#32;form&#32;of</emphasis>
16107 <emphasis role="comment">//&#32;the&#32;digit&#32;generation&#32;procedure.&#32;Using&#32;(alpha,gamma)=(-60,-32)&#32;works&#32;out&#32;well</emphasis>
16108 <emphasis role="comment">//&#32;in&#32;practice:</emphasis>
16109 <emphasis role="comment">//</emphasis>
16110 <emphasis role="comment">//&#32;The&#32;idea&#32;is&#32;to&#32;cut&#32;the&#32;number&#32;c&#32;*&#32;w&#32;=&#32;f&#32;*&#32;2^e&#32;into&#32;two&#32;parts,&#32;which&#32;can&#32;be</emphasis>
16111 <emphasis role="comment">//&#32;processed&#32;independently:&#32;An&#32;integral&#32;part&#32;p1,&#32;and&#32;a&#32;fractional&#32;part&#32;p2:</emphasis>
16112 <emphasis role="comment">//</emphasis>
16113 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;f&#32;*&#32;2^e&#32;=&#32;(&#32;(f&#32;div&#32;2^-e)&#32;*&#32;2^-e&#32;+&#32;(f&#32;mod&#32;2^-e)&#32;)&#32;*&#32;2^e</emphasis>
16114 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;(f&#32;div&#32;2^-e)&#32;+&#32;(f&#32;mod&#32;2^-e)&#32;*&#32;2^e</emphasis>
16115 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;p1&#32;+&#32;p2&#32;*&#32;2^e</emphasis>
16116 <emphasis role="comment">//</emphasis>
16117 <emphasis role="comment">//&#32;The&#32;conversion&#32;of&#32;p1&#32;into&#32;decimal&#32;form&#32;requires&#32;a&#32;series&#32;of&#32;divisions&#32;and</emphasis>
16118 <emphasis role="comment">//&#32;modulos&#32;by&#32;(a&#32;power&#32;of)&#32;10.&#32;These&#32;operations&#32;are&#32;faster&#32;for&#32;32-bit&#32;than&#32;for</emphasis>
16119 <emphasis role="comment">//&#32;64-bit&#32;integers,&#32;so&#32;p1&#32;should&#32;ideally&#32;fit&#32;into&#32;a&#32;32-bit&#32;integer.&#32;This&#32;can&#32;be</emphasis>
16120 <emphasis role="comment">//&#32;achieved&#32;by&#32;choosing</emphasis>
16121 <emphasis role="comment">//</emphasis>
16122 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;-e&#32;&gt;=&#32;32&#32;&#32;&#32;or&#32;&#32;&#32;e&#32;&lt;=&#32;-32&#32;:=&#32;gamma</emphasis>
16123 <emphasis role="comment">//</emphasis>
16124 <emphasis role="comment">//&#32;In&#32;order&#32;to&#32;convert&#32;the&#32;fractional&#32;part</emphasis>
16125 <emphasis role="comment">//</emphasis>
16126 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;p2&#32;*&#32;2^e&#32;=&#32;p2&#32;/&#32;2^-e&#32;=&#32;d[-1]&#32;/&#32;10^1&#32;+&#32;d[-2]&#32;/&#32;10^2&#32;+&#32;...</emphasis>
16127 <emphasis role="comment">//</emphasis>
16128 <emphasis role="comment">//&#32;into&#32;decimal&#32;form,&#32;the&#32;fraction&#32;is&#32;repeatedly&#32;multiplied&#32;by&#32;10&#32;and&#32;the&#32;digits</emphasis>
16129 <emphasis role="comment">//&#32;d[-i]&#32;are&#32;extracted&#32;in&#32;order:</emphasis>
16130 <emphasis role="comment">//</emphasis>
16131 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;(10&#32;*&#32;p2)&#32;div&#32;2^-e&#32;=&#32;d[-1]</emphasis>
16132 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;(10&#32;*&#32;p2)&#32;mod&#32;2^-e&#32;=&#32;d[-2]&#32;/&#32;10^1&#32;+&#32;...</emphasis>
16133 <emphasis role="comment">//</emphasis>
16134 <emphasis role="comment">//&#32;The&#32;multiplication&#32;by&#32;10&#32;must&#32;not&#32;overflow.&#32;It&#32;is&#32;sufficient&#32;to&#32;choose</emphasis>
16135 <emphasis role="comment">//</emphasis>
16136 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;10&#32;*&#32;p2&#32;&lt;&#32;16&#32;*&#32;p2&#32;=&#32;2^4&#32;*&#32;p2&#32;&lt;=&#32;2^64.</emphasis>
16137 <emphasis role="comment">//</emphasis>
16138 <emphasis role="comment">//&#32;Since&#32;p2&#32;=&#32;f&#32;mod&#32;2^-e&#32;&lt;&#32;2^-e,</emphasis>
16139 <emphasis role="comment">//</emphasis>
16140 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;-e&#32;&lt;=&#32;60&#32;&#32;&#32;or&#32;&#32;&#32;e&#32;&gt;=&#32;-60&#32;:=&#32;alpha</emphasis>
16141 
16142 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;kAlpha&#32;=&#32;-60;
16143 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;kGamma&#32;=&#32;-32;
16144 
16145 <emphasis role="keyword">struct&#32;</emphasis>cached_power&#32;<emphasis role="comment">//&#32;c&#32;=&#32;f&#32;*&#32;2^e&#32;~=&#32;10^k</emphasis>
16146 {
16147 &#32;&#32;&#32;&#32;std::uint64_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>;
16148 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;e;
16149 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;k;
16150 };
16151 
16159 <emphasis role="keyword">inline</emphasis>&#32;cached_power&#32;get_cached_power_for_binary_exponent(<emphasis role="keywordtype">int</emphasis>&#32;e)
16160 {
16161 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Now</emphasis>
16162 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16163 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;alpha&#32;&lt;=&#32;e_c&#32;+&#32;e&#32;+&#32;q&#32;&lt;=&#32;gamma&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(1)</emphasis>
16164 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;==&gt;&#32;f_c&#32;*&#32;2^alpha&#32;&lt;=&#32;c&#32;*&#32;2^e&#32;*&#32;2^q</emphasis>
16165 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16166 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;and&#32;since&#32;the&#32;c&apos;s&#32;are&#32;normalized,&#32;2^(q-1)&#32;&lt;=&#32;f_c,</emphasis>
16167 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16168 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;==&gt;&#32;2^(q&#32;-&#32;1&#32;+&#32;alpha)&#32;&lt;=&#32;c&#32;*&#32;2^(e&#32;+&#32;q)</emphasis>
16169 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;==&gt;&#32;2^(alpha&#32;-&#32;e&#32;-&#32;1)&#32;&lt;=&#32;c</emphasis>
16170 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16171 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;c&#32;were&#32;an&#32;exact&#32;power&#32;of&#32;ten,&#32;i.e.&#32;c&#32;=&#32;10^k,&#32;one&#32;may&#32;determine&#32;k&#32;as</emphasis>
16172 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16173 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;k&#32;=&#32;ceil(&#32;log_10(&#32;2^(alpha&#32;-&#32;e&#32;-&#32;1)&#32;)&#32;)</emphasis>
16174 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;ceil(&#32;(alpha&#32;-&#32;e&#32;-&#32;1)&#32;*&#32;log_10(2)&#32;)</emphasis>
16175 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16176 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;From&#32;the&#32;paper:</emphasis>
16177 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;In&#32;theory&#32;the&#32;result&#32;of&#32;the&#32;procedure&#32;could&#32;be&#32;wrong&#32;since&#32;c&#32;is&#32;rounded,</emphasis>
16178 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;and&#32;the&#32;computation&#32;itself&#32;is&#32;approximated&#32;[...].&#32;In&#32;practice,&#32;however,</emphasis>
16179 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;this&#32;simple&#32;function&#32;is&#32;sufficient.&quot;</emphasis>
16180 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16181 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;IEEE&#32;double&#32;precision&#32;floating-point&#32;numbers&#32;converted&#32;into</emphasis>
16182 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;normalized&#32;diyfp&apos;s&#32;w&#32;=&#32;f&#32;*&#32;2^e,&#32;with&#32;q&#32;=&#32;64,</emphasis>
16183 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16184 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;e&#32;&gt;=&#32;-1022&#32;&#32;&#32;&#32;&#32;&#32;(min&#32;IEEE&#32;exponent)</emphasis>
16185 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-52&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(p&#32;-&#32;1)</emphasis>
16186 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-52&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(p&#32;-&#32;1,&#32;possibly&#32;normalize&#32;denormal&#32;IEEE&#32;numbers)</emphasis>
16187 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-11&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(normalize&#32;the&#32;diyfp)</emphasis>
16188 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;-1137</emphasis>
16189 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16190 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;and</emphasis>
16191 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16192 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;e&#32;&lt;=&#32;+1023&#32;&#32;&#32;&#32;&#32;&#32;(max&#32;IEEE&#32;exponent)</emphasis>
16193 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-52&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(p&#32;-&#32;1)</emphasis>
16194 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-11&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(normalize&#32;the&#32;diyfp)</emphasis>
16195 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;960</emphasis>
16196 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16197 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;binary&#32;exponent&#32;range&#32;[-1137,960]&#32;results&#32;in&#32;a&#32;decimal&#32;exponent</emphasis>
16198 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;range&#32;[-307,324].&#32;One&#32;does&#32;not&#32;need&#32;to&#32;store&#32;a&#32;cached&#32;power&#32;for&#32;each</emphasis>
16199 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;k&#32;in&#32;this&#32;range.&#32;For&#32;each&#32;such&#32;k&#32;it&#32;suffices&#32;to&#32;find&#32;a&#32;cached&#32;power</emphasis>
16200 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;such&#32;that&#32;the&#32;exponent&#32;of&#32;the&#32;product&#32;lies&#32;in&#32;[alpha,gamma].</emphasis>
16201 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;implies&#32;that&#32;the&#32;difference&#32;of&#32;the&#32;decimal&#32;exponents&#32;of&#32;adjacent</emphasis>
16202 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;table&#32;entries&#32;must&#32;be&#32;less&#32;than&#32;or&#32;equal&#32;to</emphasis>
16203 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16204 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;floor(&#32;(gamma&#32;-&#32;alpha)&#32;*&#32;log_10(2)&#32;)&#32;=&#32;8.</emphasis>
16205 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16206 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(A&#32;smaller&#32;distance&#32;gamma-alpha&#32;would&#32;require&#32;a&#32;larger&#32;table.)</emphasis>
16207 
16208 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NB:</emphasis>
16209 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Actually&#32;this&#32;function&#32;returns&#32;c,&#32;such&#32;that&#32;-60&#32;&lt;=&#32;e_c&#32;+&#32;e&#32;+&#32;64&#32;&lt;=&#32;-34.</emphasis>
16210 
16211 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;kCachedPowersMinDecExp&#32;=&#32;-300;
16212 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;kCachedPowersDecStep&#32;=&#32;8;
16213 
16214 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;std::array&lt;cached_power,&#32;79&gt;&#32;kCachedPowers&#32;=
16215 &#32;&#32;&#32;&#32;{
16216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xAB70FE17C79AC6CA,&#32;-1060,&#32;-300&#32;},
16218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xFF77B1FCBEBCDC4F,&#32;-1034,&#32;-292&#32;},
16219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xBE5691EF416BD60C,&#32;-1007,&#32;-284&#32;},
16220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0x8DD01FAD907FFC3C,&#32;&#32;-980,&#32;-276&#32;},
16221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xD3515C2831559A83,&#32;&#32;-954,&#32;-268&#32;},
16222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0x9D71AC8FADA6C9B5,&#32;&#32;-927,&#32;-260&#32;},
16223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xEA9C227723EE8BCB,&#32;&#32;-901,&#32;-252&#32;},
16224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xAECC49914078536D,&#32;&#32;-874,&#32;-244&#32;},
16225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0x823C12795DB6CE57,&#32;&#32;-847,&#32;-236&#32;},
16226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xC21094364DFB5637,&#32;&#32;-821,&#32;-228&#32;},
16227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0x9096EA6F3848984F,&#32;&#32;-794,&#32;-220&#32;},
16228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xD77485CB25823AC7,&#32;&#32;-768,&#32;-212&#32;},
16229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xA086CFCD97BF97F4,&#32;&#32;-741,&#32;-204&#32;},
16230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xEF340A98172AACE5,&#32;&#32;-715,&#32;-196&#32;},
16231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xB23867FB2A35B28E,&#32;&#32;-688,&#32;-188&#32;},
16232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0x84C8D4DFD2C63F3B,&#32;&#32;-661,&#32;-180&#32;},
16233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xC5DD44271AD3CDBA,&#32;&#32;-635,&#32;-172&#32;},
16234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0x936B9FCEBB25C996,&#32;&#32;-608,&#32;-164&#32;},
16235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xDBAC6C247D62A584,&#32;&#32;-582,&#32;-156&#32;},
16236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xA3AB66580D5FDAF6,&#32;&#32;-555,&#32;-148&#32;},
16237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xF3E2F893DEC3F126,&#32;&#32;-529,&#32;-140&#32;},
16238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xB5B5ADA8AAFF80B8,&#32;&#32;-502,&#32;-132&#32;},
16239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0x87625F056C7C4A8B,&#32;&#32;-475,&#32;-124&#32;},
16240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xC9BCFF6034C13053,&#32;&#32;-449,&#32;-116&#32;},
16241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0x964E858C91BA2655,&#32;&#32;-422,&#32;-108&#32;},
16242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xDFF9772470297EBD,&#32;&#32;-396,&#32;-100&#32;},
16243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xA6DFBD9FB8E5B88F,&#32;&#32;-369,&#32;&#32;-92&#32;},
16244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xF8A95FCF88747D94,&#32;&#32;-343,&#32;&#32;-84&#32;},
16245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xB94470938FA89BCF,&#32;&#32;-316,&#32;&#32;-76&#32;},
16246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0x8A08F0F8BF0F156B,&#32;&#32;-289,&#32;&#32;-68&#32;},
16247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xCDB02555653131B6,&#32;&#32;-263,&#32;&#32;-60&#32;},
16248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0x993FE2C6D07B7FAC,&#32;&#32;-236,&#32;&#32;-52&#32;},
16249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xE45C10C42A2B3B06,&#32;&#32;-210,&#32;&#32;-44&#32;},
16250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xAA242499697392D3,&#32;&#32;-183,&#32;&#32;-36&#32;},
16251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xFD87B5F28300CA0E,&#32;&#32;-157,&#32;&#32;-28&#32;},
16252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xBCE5086492111AEB,&#32;&#32;-130,&#32;&#32;-20&#32;},
16253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0x8CBCCC096F5088CC,&#32;&#32;-103,&#32;&#32;-12&#32;},
16254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xD1B71758E219652C,&#32;&#32;&#32;-77,&#32;&#32;&#32;-4&#32;},
16255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0x9C40000000000000,&#32;&#32;&#32;-50,&#32;&#32;&#32;&#32;4&#32;},
16256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xE8D4A51000000000,&#32;&#32;&#32;-24,&#32;&#32;&#32;12&#32;},
16257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xAD78EBC5AC620000,&#32;&#32;&#32;&#32;&#32;3,&#32;&#32;&#32;20&#32;},
16258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0x813F3978F8940984,&#32;&#32;&#32;&#32;30,&#32;&#32;&#32;28&#32;},
16259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xC097CE7BC90715B3,&#32;&#32;&#32;&#32;56,&#32;&#32;&#32;36&#32;},
16260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0x8F7E32CE7BEA5C70,&#32;&#32;&#32;&#32;83,&#32;&#32;&#32;44&#32;},
16261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xD5D238A4ABE98068,&#32;&#32;&#32;109,&#32;&#32;&#32;52&#32;},
16262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0x9F4F2726179A2245,&#32;&#32;&#32;136,&#32;&#32;&#32;60&#32;},
16263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xED63A231D4C4FB27,&#32;&#32;&#32;162,&#32;&#32;&#32;68&#32;},
16264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xB0DE65388CC8ADA8,&#32;&#32;&#32;189,&#32;&#32;&#32;76&#32;},
16265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0x83C7088E1AAB65DB,&#32;&#32;&#32;216,&#32;&#32;&#32;84&#32;},
16266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xC45D1DF942711D9A,&#32;&#32;&#32;242,&#32;&#32;&#32;92&#32;},
16267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0x924D692CA61BE758,&#32;&#32;&#32;269,&#32;&#32;100&#32;},
16268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xDA01EE641A708DEA,&#32;&#32;&#32;295,&#32;&#32;108&#32;},
16269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xA26DA3999AEF774A,&#32;&#32;&#32;322,&#32;&#32;116&#32;},
16270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xF209787BB47D6B85,&#32;&#32;&#32;348,&#32;&#32;124&#32;},
16271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xB454E4A179DD1877,&#32;&#32;&#32;375,&#32;&#32;132&#32;},
16272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0x865B86925B9BC5C2,&#32;&#32;&#32;402,&#32;&#32;140&#32;},
16273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xC83553C5C8965D3D,&#32;&#32;&#32;428,&#32;&#32;148&#32;},
16274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0x952AB45CFA97A0B3,&#32;&#32;&#32;455,&#32;&#32;156&#32;},
16275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xDE469FBD99A05FE3,&#32;&#32;&#32;481,&#32;&#32;164&#32;},
16276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xA59BC234DB398C25,&#32;&#32;&#32;508,&#32;&#32;172&#32;},
16277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xF6C69A72A3989F5C,&#32;&#32;&#32;534,&#32;&#32;180&#32;},
16278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xB7DCBF5354E9BECE,&#32;&#32;&#32;561,&#32;&#32;188&#32;},
16279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0x88FCF317F22241E2,&#32;&#32;&#32;588,&#32;&#32;196&#32;},
16280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xCC20CE9BD35C78A5,&#32;&#32;&#32;614,&#32;&#32;204&#32;},
16281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0x98165AF37B2153DF,&#32;&#32;&#32;641,&#32;&#32;212&#32;},
16282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xE2A0B5DC971F303A,&#32;&#32;&#32;667,&#32;&#32;220&#32;},
16283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xA8D9D1535CE3B396,&#32;&#32;&#32;694,&#32;&#32;228&#32;},
16284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xFB9B7CD9A4A7443C,&#32;&#32;&#32;720,&#32;&#32;236&#32;},
16285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xBB764C4CA7A44410,&#32;&#32;&#32;747,&#32;&#32;244&#32;},
16286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0x8BAB8EEFB6409C1A,&#32;&#32;&#32;774,&#32;&#32;252&#32;},
16287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xD01FEF10A657842C,&#32;&#32;&#32;800,&#32;&#32;260&#32;},
16288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0x9B10A4E5E9913129,&#32;&#32;&#32;827,&#32;&#32;268&#32;},
16289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xE7109BFBA19C0C9D,&#32;&#32;&#32;853,&#32;&#32;276&#32;},
16290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xAC2820D9623BF429,&#32;&#32;&#32;880,&#32;&#32;284&#32;},
16291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0x80444B5E7AA7CF85,&#32;&#32;&#32;907,&#32;&#32;292&#32;},
16292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xBF21E44003ACDD2D,&#32;&#32;&#32;933,&#32;&#32;300&#32;},
16293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0x8E679C2F5E44FF8F,&#32;&#32;&#32;960,&#32;&#32;308&#32;},
16294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0xD433179D9C8CB841,&#32;&#32;&#32;986,&#32;&#32;316&#32;},
16295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0x9E19DB92B4E31BA9,&#32;&#32;1013,&#32;&#32;324&#32;},
16296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16297 &#32;&#32;&#32;&#32;};
16298 
16299 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;computation&#32;gives&#32;exactly&#32;the&#32;same&#32;results&#32;for&#32;k&#32;as</emphasis>
16300 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;k&#32;=&#32;ceil((kAlpha&#32;-&#32;e&#32;-&#32;1)&#32;*&#32;0.30102999566398114)</emphasis>
16301 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;|e|&#32;&lt;=&#32;1500,&#32;but&#32;doesn&apos;t&#32;require&#32;floating-point&#32;operations.</emphasis>
16302 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NB:&#32;log_10(2)&#32;~=&#32;78913&#32;/&#32;2^18</emphasis>
16303 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(e&#32;&gt;=&#32;-1500);
16304 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(e&#32;&lt;=&#32;&#32;1500);
16305 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>&#32;=&#32;kAlpha&#32;-&#32;e&#32;-&#32;1;
16306 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;k&#32;=&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>&#32;*&#32;78913)&#32;/&#32;(1&#32;&lt;&lt;&#32;18)&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>&#32;&gt;&#32;0);
16307 
16308 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>&#32;=&#32;(-kCachedPowersMinDecExp&#32;+&#32;k&#32;+&#32;(kCachedPowersDecStep&#32;-&#32;1))&#32;/&#32;kCachedPowersDecStep;
16309 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>&#32;&gt;=&#32;0);
16310 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>)&#32;&lt;&#32;kCachedPowers.size());
16311 
16312 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;cached_power&#32;cached&#32;=&#32;kCachedPowers[<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>)];
16313 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(kAlpha&#32;&lt;=&#32;cached.e&#32;+&#32;e&#32;+&#32;64);
16314 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(kGamma&#32;&gt;=&#32;cached.e&#32;+&#32;e&#32;+&#32;64);
16315 
16316 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cached;
16317 }
16318 
16323 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;find_largest_pow10(<emphasis role="keyword">const</emphasis>&#32;std::uint32_t&#32;n,&#32;std::uint32_t&amp;&#32;pow10)
16324 {
16325 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LCOV_EXCL_START</emphasis>
16326 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;&gt;=&#32;1000000000)
16327 &#32;&#32;&#32;&#32;{
16328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pow10&#32;=&#32;1000000000;
16329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;10;
16330 &#32;&#32;&#32;&#32;}
16331 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LCOV_EXCL_STOP</emphasis>
16332 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;&gt;=&#32;100000000)
16333 &#32;&#32;&#32;&#32;{
16334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pow10&#32;=&#32;100000000;
16335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&#32;9;
16336 &#32;&#32;&#32;&#32;}
16337 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;&gt;=&#32;10000000)
16338 &#32;&#32;&#32;&#32;{
16339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pow10&#32;=&#32;10000000;
16340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&#32;8;
16341 &#32;&#32;&#32;&#32;}
16342 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;&gt;=&#32;1000000)
16343 &#32;&#32;&#32;&#32;{
16344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pow10&#32;=&#32;1000000;
16345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&#32;7;
16346 &#32;&#32;&#32;&#32;}
16347 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;&gt;=&#32;100000)
16348 &#32;&#32;&#32;&#32;{
16349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pow10&#32;=&#32;100000;
16350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&#32;6;
16351 &#32;&#32;&#32;&#32;}
16352 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;&gt;=&#32;10000)
16353 &#32;&#32;&#32;&#32;{
16354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pow10&#32;=&#32;10000;
16355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&#32;5;
16356 &#32;&#32;&#32;&#32;}
16357 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;&gt;=&#32;1000)
16358 &#32;&#32;&#32;&#32;{
16359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pow10&#32;=&#32;1000;
16360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&#32;4;
16361 &#32;&#32;&#32;&#32;}
16362 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;&gt;=&#32;100)
16363 &#32;&#32;&#32;&#32;{
16364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pow10&#32;=&#32;100;
16365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&#32;3;
16366 &#32;&#32;&#32;&#32;}
16367 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;&gt;=&#32;10)
16368 &#32;&#32;&#32;&#32;{
16369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pow10&#32;=&#32;10;
16370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&#32;2;
16371 &#32;&#32;&#32;&#32;}
16372 
16373 &#32;&#32;&#32;&#32;pow10&#32;=&#32;1;
16374 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
16375 }
16376 
16377 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;grisu2_round(<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;std::uint64_t&#32;dist,&#32;std::uint64_t&#32;delta,
16378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint64_t&#32;rest,&#32;std::uint64_t&#32;ten_k)
16379 {
16380 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;&gt;=&#32;1);
16381 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(dist&#32;&lt;=&#32;delta);
16382 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(rest&#32;&lt;=&#32;delta);
16383 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(ten_k&#32;&gt;&#32;0);
16384 
16385 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;---------------------------&#32;delta&#32;----&gt;</emphasis>
16386 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;----&#32;dist&#32;---------&gt;</emphasis>
16387 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;--------------[------------------+-------------------]--------------</emphasis>
16388 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;M-&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;w&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;M+</emphasis>
16389 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16390 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ten_k</emphasis>
16391 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;------&gt;</emphasis>
16392 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;----&#32;rest&#32;----&gt;</emphasis>
16393 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;--------------[------------------+----+--------------]--------------</emphasis>
16394 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;w&#32;&#32;&#32;&#32;V</emphasis>
16395 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;buf&#32;*&#32;10^k</emphasis>
16396 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16397 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ten_k&#32;represents&#32;a&#32;unit-in-the-last-place&#32;in&#32;the&#32;decimal&#32;representation</emphasis>
16398 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;stored&#32;in&#32;buf.</emphasis>
16399 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Decrement&#32;buf&#32;by&#32;ten_k&#32;while&#32;this&#32;takes&#32;buf&#32;closer&#32;to&#32;w.</emphasis>
16400 
16401 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;tests&#32;are&#32;written&#32;in&#32;this&#32;order&#32;to&#32;avoid&#32;overflow&#32;in&#32;unsigned</emphasis>
16402 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;integer&#32;arithmetic.</emphasis>
16403 
16404 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(rest&#32;&lt;&#32;dist
16405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;delta&#32;-&#32;rest&#32;&gt;=&#32;ten_k
16406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(rest&#32;+&#32;ten_k&#32;&lt;&#32;dist&#32;||&#32;dist&#32;-&#32;rest&#32;&gt;&#32;rest&#32;+&#32;ten_k&#32;-&#32;dist))
16407 &#32;&#32;&#32;&#32;{
16408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>[<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;-&#32;1]&#32;!=&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>);
16409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>[<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;-&#32;1]--;
16410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rest&#32;+=&#32;ten_k;
16411 &#32;&#32;&#32;&#32;}
16412 }
16413 
16418 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;grisu2_digit_gen(<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a7bd7b5e409950ac3449c78baf3205f4b">buffer</link>,&#32;<emphasis role="keywordtype">int</emphasis>&amp;&#32;<link linkend="_namespacelength">length</link>,&#32;<emphasis role="keywordtype">int</emphasis>&amp;&#32;decimal_exponent,
16419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;diyfp&#32;M_minus,&#32;diyfp&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a1ad83f255afd4038129297b57ef91603">w</link>,&#32;diyfp&#32;M_plus)
16420 {
16421 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(kAlpha&#32;&gt;=&#32;-60,&#32;<emphasis role="stringliteral">&quot;internal&#32;error&quot;</emphasis>);
16422 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(kGamma&#32;&lt;=&#32;-32,&#32;<emphasis role="stringliteral">&quot;internal&#32;error&quot;</emphasis>);
16423 
16424 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Generates&#32;the&#32;digits&#32;(and&#32;the&#32;exponent)&#32;of&#32;a&#32;decimal&#32;floating-point</emphasis>
16425 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;number&#32;V&#32;=&#32;buffer&#32;*&#32;10^decimal_exponent&#32;in&#32;the&#32;range&#32;[M-,&#32;M+].&#32;The&#32;diyfp&apos;s</emphasis>
16426 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;w,&#32;M-&#32;and&#32;M+&#32;share&#32;the&#32;same&#32;exponent&#32;e,&#32;which&#32;satisfies&#32;alpha&#32;&lt;=&#32;e&#32;&lt;=&#32;gamma.</emphasis>
16427 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16428 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;---------------------------&#32;delta&#32;----&gt;</emphasis>
16429 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;----&#32;dist&#32;---------&gt;</emphasis>
16430 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;--------------[------------------+-------------------]--------------</emphasis>
16431 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;M-&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;w&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;M+</emphasis>
16432 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16433 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Grisu2&#32;generates&#32;the&#32;digits&#32;of&#32;M+&#32;from&#32;left&#32;to&#32;right&#32;and&#32;stops&#32;as&#32;soon&#32;as</emphasis>
16434 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;V&#32;is&#32;in&#32;[M-,M+].</emphasis>
16435 
16436 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(M_plus.e&#32;&gt;=&#32;kAlpha);
16437 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(M_plus.e&#32;&lt;=&#32;kGamma);
16438 
16439 &#32;&#32;&#32;&#32;std::uint64_t&#32;delta&#32;=&#32;diyfp::sub(M_plus,&#32;M_minus).f;&#32;<emphasis role="comment">//&#32;(significand&#32;of&#32;(M+&#32;-&#32;M-),&#32;implicit&#32;exponent&#32;is&#32;e)</emphasis>
16440 &#32;&#32;&#32;&#32;std::uint64_t&#32;dist&#32;&#32;=&#32;diyfp::sub(M_plus,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a1ad83f255afd4038129297b57ef91603">w</link>&#32;&#32;&#32;&#32;&#32;&#32;).f;&#32;<emphasis role="comment">//&#32;(significand&#32;of&#32;(M+&#32;-&#32;w&#32;),&#32;implicit&#32;exponent&#32;is&#32;e)</emphasis>
16441 
16442 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Split&#32;M+&#32;=&#32;f&#32;*&#32;2^e&#32;into&#32;two&#32;parts&#32;p1&#32;and&#32;p2&#32;(note:&#32;e&#32;&lt;&#32;0):</emphasis>
16443 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16444 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;M+&#32;=&#32;f&#32;*&#32;2^e</emphasis>
16445 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;((f&#32;div&#32;2^-e)&#32;*&#32;2^-e&#32;+&#32;(f&#32;mod&#32;2^-e))&#32;*&#32;2^e</emphasis>
16446 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;((p1&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;*&#32;2^-e&#32;+&#32;(p2&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;))&#32;*&#32;2^e</emphasis>
16447 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;p1&#32;+&#32;p2&#32;*&#32;2^e</emphasis>
16448 
16449 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;diyfp&#32;one(std::uint64_t{1}&#32;&lt;&lt;&#32;-M_plus.e,&#32;M_plus.e);
16450 
16451 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;p1&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::uint32_t<emphasis role="keyword">&gt;</emphasis>(M_plus.f&#32;&gt;&gt;&#32;-one.e);&#32;<emphasis role="comment">//&#32;p1&#32;=&#32;f&#32;div&#32;2^-e&#32;(Since&#32;-e&#32;&gt;=&#32;32,&#32;p1&#32;fits&#32;into&#32;a&#32;32-bit&#32;int.)</emphasis>
16452 &#32;&#32;&#32;&#32;std::uint64_t&#32;p2&#32;=&#32;M_plus.f&#32;&amp;&#32;(one.f&#32;-&#32;1);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;p2&#32;=&#32;f&#32;mod&#32;2^-e</emphasis>
16453 
16454 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;1)</emphasis>
16455 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16456 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Generate&#32;the&#32;digits&#32;of&#32;the&#32;integral&#32;part&#32;p1&#32;=&#32;d[n-1]...d[1]d[0]</emphasis>
16457 
16458 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(p1&#32;&gt;&#32;0);
16459 
16460 &#32;&#32;&#32;&#32;std::uint32_t&#32;pow10{};
16461 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;k&#32;=&#32;find_largest_pow10(p1,&#32;pow10);
16462 
16463 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;10^(k-1)&#32;&lt;=&#32;p1&#32;&lt;&#32;10^k,&#32;pow10&#32;=&#32;10^(k-1)</emphasis>
16464 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16465 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;p1&#32;=&#32;(p1&#32;div&#32;10^(k-1))&#32;*&#32;10^(k-1)&#32;+&#32;(p1&#32;mod&#32;10^(k-1))</emphasis>
16466 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;(d[k-1]&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;*&#32;10^(k-1)&#32;+&#32;(p1&#32;mod&#32;10^(k-1))</emphasis>
16467 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16468 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;M+&#32;=&#32;p1&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;p2&#32;*&#32;2^e</emphasis>
16469 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;d[k-1]&#32;*&#32;10^(k-1)&#32;+&#32;(p1&#32;mod&#32;10^(k-1))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;p2&#32;*&#32;2^e</emphasis>
16470 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;d[k-1]&#32;*&#32;10^(k-1)&#32;+&#32;((p1&#32;mod&#32;10^(k-1))&#32;*&#32;2^-e&#32;+&#32;p2)&#32;*&#32;2^e</emphasis>
16471 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;d[k-1]&#32;*&#32;10^(k-1)&#32;+&#32;(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rest)&#32;*&#32;2^e</emphasis>
16472 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16473 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Now&#32;generate&#32;the&#32;digits&#32;d[n]&#32;of&#32;p1&#32;from&#32;left&#32;to&#32;right&#32;(n&#32;=&#32;k-1,...,0)</emphasis>
16474 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16475 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;p1&#32;=&#32;d[k-1]...d[n]&#32;*&#32;10^n&#32;+&#32;d[n-1]...d[0]</emphasis>
16476 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16477 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;but&#32;stop&#32;as&#32;soon&#32;as</emphasis>
16478 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16479 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;rest&#32;*&#32;2^e&#32;=&#32;(d[n-1]...d[0]&#32;*&#32;2^-e&#32;+&#32;p2)&#32;*&#32;2^e&#32;&lt;=&#32;delta&#32;*&#32;2^e</emphasis>
16480 
16481 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n&#32;=&#32;k;
16482 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(n&#32;&gt;&#32;0)
16483 &#32;&#32;&#32;&#32;{
16484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Invariants:</emphasis>
16485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;M+&#32;=&#32;buffer&#32;*&#32;10^n&#32;+&#32;(p1&#32;+&#32;p2&#32;*&#32;2^e)&#32;&#32;&#32;&#32;(buffer&#32;=&#32;0&#32;for&#32;n&#32;=&#32;k)</emphasis>
16486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;pow10&#32;=&#32;10^(n-1)&#32;&lt;=&#32;p1&#32;&lt;&#32;10^n</emphasis>
16487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::uint32_t&#32;d&#32;=&#32;p1&#32;/&#32;pow10;&#32;&#32;<emphasis role="comment">//&#32;d&#32;=&#32;p1&#32;div&#32;10^(n-1)</emphasis>
16489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::uint32_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abe08814c2f72843fde4d8df41440d5a0">r</link>&#32;=&#32;p1&#32;%&#32;pow10;&#32;&#32;<emphasis role="comment">//&#32;r&#32;=&#32;p1&#32;mod&#32;10^(n-1)</emphasis>
16490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;M+&#32;=&#32;buffer&#32;*&#32;10^n&#32;+&#32;(d&#32;*&#32;10^(n-1)&#32;+&#32;r)&#32;+&#32;p2&#32;*&#32;2^e</emphasis>
16492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;(buffer&#32;*&#32;10&#32;+&#32;d)&#32;*&#32;10^(n-1)&#32;+&#32;(r&#32;+&#32;p2&#32;*&#32;2^e)</emphasis>
16493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(d&#32;&lt;=&#32;9);
16495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a7bd7b5e409950ac3449c78baf3205f4b">buffer</link>[<link linkend="_namespacelength">length</link>++]&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;+&#32;d);&#32;<emphasis role="comment">//&#32;buffer&#32;:=&#32;buffer&#32;*&#32;10&#32;+&#32;d</emphasis>
16496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;M+&#32;=&#32;buffer&#32;*&#32;10^(n-1)&#32;+&#32;(r&#32;+&#32;p2&#32;*&#32;2^e)</emphasis>
16498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p1&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abe08814c2f72843fde4d8df41440d5a0">r</link>;
16500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n--;
16501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;M+&#32;=&#32;buffer&#32;*&#32;10^n&#32;+&#32;(p1&#32;+&#32;p2&#32;*&#32;2^e)</emphasis>
16503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;pow10&#32;=&#32;10^n</emphasis>
16504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16505 
16506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Now&#32;check&#32;if&#32;enough&#32;digits&#32;have&#32;been&#32;generated.</emphasis>
16507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Compute</emphasis>
16508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;p1&#32;+&#32;p2&#32;*&#32;2^e&#32;=&#32;(p1&#32;*&#32;2^-e&#32;+&#32;p2)&#32;*&#32;2^e&#32;=&#32;rest&#32;*&#32;2^e</emphasis>
16510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note:</emphasis>
16512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Since&#32;rest&#32;and&#32;delta&#32;share&#32;the&#32;same&#32;exponent&#32;e,&#32;it&#32;suffices&#32;to</emphasis>
16513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;compare&#32;the&#32;significands.</emphasis>
16514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::uint64_t&#32;rest&#32;=&#32;(std::uint64_t{p1}&#32;&lt;&lt;&#32;-one.e)&#32;+&#32;p2;
16515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rest&#32;&lt;=&#32;delta)
16516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;V&#32;=&#32;buffer&#32;*&#32;10^n,&#32;with&#32;M-&#32;&lt;=&#32;V&#32;&lt;=&#32;M+.</emphasis>
16518 
16519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decimal_exponent&#32;+=&#32;n;
16520 
16521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;may&#32;now&#32;just&#32;stop.&#32;But&#32;instead&#32;look&#32;if&#32;the&#32;buffer&#32;could&#32;be</emphasis>
16522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;decremented&#32;to&#32;bring&#32;V&#32;closer&#32;to&#32;w.</emphasis>
16523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;pow10&#32;=&#32;10^n&#32;is&#32;now&#32;1&#32;ulp&#32;in&#32;the&#32;decimal&#32;representation&#32;V.</emphasis>
16525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;rounding&#32;procedure&#32;works&#32;with&#32;diyfp&apos;s&#32;with&#32;an&#32;implicit</emphasis>
16526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;exponent&#32;of&#32;e.</emphasis>
16527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;10^n&#32;=&#32;(10^n&#32;*&#32;2^-e)&#32;*&#32;2^e&#32;=&#32;ulp&#32;*&#32;2^e</emphasis>
16529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::uint64_t&#32;ten_n&#32;=&#32;std::uint64_t{pow10}&#32;&lt;&lt;&#32;-one.e;
16531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;grisu2_round(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a7bd7b5e409950ac3449c78baf3205f4b">buffer</link>,&#32;<link linkend="_namespacelength">length</link>,&#32;dist,&#32;delta,&#32;rest,&#32;ten_n);
16532 
16533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
16534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16535 
16536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pow10&#32;/=&#32;10;
16537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;pow10&#32;=&#32;10^(n-1)&#32;&lt;=&#32;p1&#32;&lt;&#32;10^n</emphasis>
16539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Invariants&#32;restored.</emphasis>
16540 &#32;&#32;&#32;&#32;}
16541 
16542 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2)</emphasis>
16543 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16544 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;digits&#32;of&#32;the&#32;integral&#32;part&#32;have&#32;been&#32;generated:</emphasis>
16545 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16546 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;M+&#32;=&#32;d[k-1]...d[1]d[0]&#32;+&#32;p2&#32;*&#32;2^e</emphasis>
16547 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;buffer&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;p2&#32;*&#32;2^e</emphasis>
16548 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16549 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Now&#32;generate&#32;the&#32;digits&#32;of&#32;the&#32;fractional&#32;part&#32;p2&#32;*&#32;2^e.</emphasis>
16550 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16551 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note:</emphasis>
16552 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;decimal&#32;point&#32;is&#32;generated:&#32;the&#32;exponent&#32;is&#32;adjusted&#32;instead.</emphasis>
16553 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16554 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;p2&#32;actually&#32;represents&#32;the&#32;fraction</emphasis>
16555 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16556 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;p2&#32;*&#32;2^e</emphasis>
16557 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;p2&#32;/&#32;2^-e</emphasis>
16558 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;d[-1]&#32;/&#32;10^1&#32;+&#32;d[-2]&#32;/&#32;10^2&#32;+&#32;...</emphasis>
16559 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16560 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Now&#32;generate&#32;the&#32;digits&#32;d[-m]&#32;of&#32;p1&#32;from&#32;left&#32;to&#32;right&#32;(m&#32;=&#32;1,2,...)</emphasis>
16561 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16562 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;p2&#32;*&#32;2^e&#32;=&#32;d[-1]d[-2]...d[-m]&#32;*&#32;10^-m</emphasis>
16563 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;10^-m&#32;*&#32;(d[-m-1]&#32;/&#32;10^1&#32;+&#32;d[-m-2]&#32;/&#32;10^2&#32;+&#32;...)</emphasis>
16564 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16565 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;using</emphasis>
16566 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16567 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;10^m&#32;*&#32;p2&#32;=&#32;((10^m&#32;*&#32;p2)&#32;div&#32;2^-e)&#32;*&#32;2^-e&#32;+&#32;((10^m&#32;*&#32;p2)&#32;mod&#32;2^-e)</emphasis>
16568 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;d)&#32;*&#32;2^-e&#32;+&#32;(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r)</emphasis>
16569 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16570 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;or</emphasis>
16571 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;10^m&#32;*&#32;p2&#32;*&#32;2^e&#32;=&#32;d&#32;+&#32;r&#32;*&#32;2^e</emphasis>
16572 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16573 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;i.e.</emphasis>
16574 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16575 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;M+&#32;=&#32;buffer&#32;+&#32;p2&#32;*&#32;2^e</emphasis>
16576 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;buffer&#32;+&#32;10^-m&#32;*&#32;(d&#32;+&#32;r&#32;*&#32;2^e)</emphasis>
16577 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;(buffer&#32;*&#32;10^m&#32;+&#32;d)&#32;*&#32;10^-m&#32;+&#32;10^-m&#32;*&#32;r&#32;*&#32;2^e</emphasis>
16578 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16579 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;and&#32;stop&#32;as&#32;soon&#32;as&#32;10^-m&#32;*&#32;r&#32;*&#32;2^e&#32;&lt;=&#32;delta&#32;*&#32;2^e</emphasis>
16580 
16581 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(p2&#32;&gt;&#32;delta);
16582 
16583 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;m&#32;=&#32;0;
16584 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;)
16585 &#32;&#32;&#32;&#32;{
16586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Invariant:</emphasis>
16587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;M+&#32;=&#32;buffer&#32;*&#32;10^-m&#32;+&#32;10^-m&#32;*&#32;(d[-m-1]&#32;/&#32;10&#32;+&#32;d[-m-2]&#32;/&#32;10^2&#32;+&#32;...)&#32;*&#32;2^e</emphasis>
16588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;buffer&#32;*&#32;10^-m&#32;+&#32;10^-m&#32;*&#32;(p2&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;*&#32;2^e</emphasis>
16589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;buffer&#32;*&#32;10^-m&#32;+&#32;10^-m&#32;*&#32;(1/10&#32;*&#32;(10&#32;*&#32;p2)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;*&#32;2^e</emphasis>
16590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;buffer&#32;*&#32;10^-m&#32;+&#32;10^-m&#32;*&#32;(1/10&#32;*&#32;((10*p2&#32;div&#32;2^-e)&#32;*&#32;2^-e&#32;+&#32;(10*p2&#32;mod&#32;2^-e))&#32;*&#32;2^e</emphasis>
16591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(p2&#32;&lt;=&#32;(std::numeric_limits&lt;std::uint64_t&gt;::max)()&#32;/&#32;10);
16593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p2&#32;*=&#32;10;
16594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::uint64_t&#32;d&#32;=&#32;p2&#32;&gt;&gt;&#32;-one.e;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;d&#32;=&#32;(10&#32;*&#32;p2)&#32;div&#32;2^-e</emphasis>
16595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::uint64_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abe08814c2f72843fde4d8df41440d5a0">r</link>&#32;=&#32;p2&#32;&amp;&#32;(one.f&#32;-&#32;1);&#32;<emphasis role="comment">//&#32;r&#32;=&#32;(10&#32;*&#32;p2)&#32;mod&#32;2^-e</emphasis>
16596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;M+&#32;=&#32;buffer&#32;*&#32;10^-m&#32;+&#32;10^-m&#32;*&#32;(1/10&#32;*&#32;(d&#32;*&#32;2^-e&#32;+&#32;r)&#32;*&#32;2^e</emphasis>
16598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;buffer&#32;*&#32;10^-m&#32;+&#32;10^-m&#32;*&#32;(1/10&#32;*&#32;(d&#32;+&#32;r&#32;*&#32;2^e))</emphasis>
16599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;(buffer&#32;*&#32;10&#32;+&#32;d)&#32;*&#32;10^(-m-1)&#32;+&#32;10^(-m-1)&#32;*&#32;r&#32;*&#32;2^e</emphasis>
16600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(d&#32;&lt;=&#32;9);
16602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a7bd7b5e409950ac3449c78baf3205f4b">buffer</link>[<link linkend="_namespacelength">length</link>++]&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;+&#32;d);&#32;<emphasis role="comment">//&#32;buffer&#32;:=&#32;buffer&#32;*&#32;10&#32;+&#32;d</emphasis>
16603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;M+&#32;=&#32;buffer&#32;*&#32;10^(-m-1)&#32;+&#32;10^(-m-1)&#32;*&#32;r&#32;*&#32;2^e</emphasis>
16605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p2&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abe08814c2f72843fde4d8df41440d5a0">r</link>;
16607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m++;
16608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;M+&#32;=&#32;buffer&#32;*&#32;10^-m&#32;+&#32;10^-m&#32;*&#32;p2&#32;*&#32;2^e</emphasis>
16610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Invariant&#32;restored.</emphasis>
16611 
16612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;if&#32;enough&#32;digits&#32;have&#32;been&#32;generated.</emphasis>
16613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;10^-m&#32;*&#32;p2&#32;*&#32;2^e&#32;&lt;=&#32;delta&#32;*&#32;2^e</emphasis>
16615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p2&#32;*&#32;2^e&#32;&lt;=&#32;10^m&#32;*&#32;delta&#32;*&#32;2^e</emphasis>
16616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p2&#32;&lt;=&#32;10^m&#32;*&#32;delta</emphasis>
16617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;delta&#32;*=&#32;10;
16618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dist&#32;&#32;*=&#32;10;
16619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p2&#32;&lt;=&#32;delta)
16620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
16622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16623 &#32;&#32;&#32;&#32;}
16624 
16625 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;V&#32;=&#32;buffer&#32;*&#32;10^-m,&#32;with&#32;M-&#32;&lt;=&#32;V&#32;&lt;=&#32;M+.</emphasis>
16626 
16627 &#32;&#32;&#32;&#32;decimal_exponent&#32;-=&#32;m;
16628 
16629 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;1&#32;ulp&#32;in&#32;the&#32;decimal&#32;representation&#32;is&#32;now&#32;10^-m.</emphasis>
16630 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Since&#32;delta&#32;and&#32;dist&#32;are&#32;now&#32;scaled&#32;by&#32;10^m,&#32;we&#32;need&#32;to&#32;do&#32;the</emphasis>
16631 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;same&#32;with&#32;ulp&#32;in&#32;order&#32;to&#32;keep&#32;the&#32;units&#32;in&#32;sync.</emphasis>
16632 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16633 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;10^m&#32;*&#32;10^-m&#32;=&#32;1&#32;=&#32;2^-e&#32;*&#32;2^e&#32;=&#32;ten_m&#32;*&#32;2^e</emphasis>
16634 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16635 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::uint64_t&#32;ten_m&#32;=&#32;one.f;
16636 &#32;&#32;&#32;&#32;grisu2_round(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a7bd7b5e409950ac3449c78baf3205f4b">buffer</link>,&#32;<link linkend="_namespacelength">length</link>,&#32;dist,&#32;delta,&#32;p2,&#32;ten_m);
16637 
16638 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;By&#32;construction&#32;this&#32;algorithm&#32;generates&#32;the&#32;shortest&#32;possible&#32;decimal</emphasis>
16639 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;number&#32;(Loitsch,&#32;Theorem&#32;6.2)&#32;which&#32;rounds&#32;back&#32;to&#32;w.</emphasis>
16640 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;an&#32;input&#32;number&#32;of&#32;precision&#32;p,&#32;at&#32;least</emphasis>
16641 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16642 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;N&#32;=&#32;1&#32;+&#32;ceil(p&#32;*&#32;log_10(2))</emphasis>
16643 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16644 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;decimal&#32;digits&#32;are&#32;sufficient&#32;to&#32;identify&#32;all&#32;binary&#32;floating-point</emphasis>
16645 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;numbers&#32;(Matula,&#32;&quot;In-and-Out&#32;conversions&quot;).</emphasis>
16646 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;implies&#32;that&#32;the&#32;algorithm&#32;does&#32;not&#32;produce&#32;more&#32;than&#32;N&#32;decimal</emphasis>
16647 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;digits.</emphasis>
16648 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16649 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;N&#32;=&#32;17&#32;for&#32;p&#32;=&#32;53&#32;(IEEE&#32;double&#32;precision)</emphasis>
16650 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;N&#32;=&#32;9&#32;&#32;for&#32;p&#32;=&#32;24&#32;(IEEE&#32;single&#32;precision)</emphasis>
16651 }
16652 
16658 <link linkend="_json_8hpp_1a5338981b5ad9027c9e54b1c5597f4344">JSON_HEDLEY_NON_NULL</link>(1)
16659 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;grisu2(<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>,&#32;<emphasis role="keywordtype">int</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;<emphasis role="keywordtype">int</emphasis>&amp;&#32;decimal_exponent,
16660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;diyfp&#32;m_minus,&#32;diyfp&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>,&#32;diyfp&#32;m_plus)
16661 {
16662 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(m_plus.e&#32;==&#32;m_minus.e);
16663 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(m_plus.e&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>.e);
16664 
16665 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;--------(-----------------------+-----------------------)--------&#32;&#32;&#32;&#32;(A)</emphasis>
16666 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m-&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m+</emphasis>
16667 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16668 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;--------------------(-----------+-----------------------)--------&#32;&#32;&#32;&#32;(B)</emphasis>
16669 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m-&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m+</emphasis>
16670 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16671 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;First&#32;scale&#32;v&#32;(and&#32;m-&#32;and&#32;m+)&#32;such&#32;that&#32;the&#32;exponent&#32;is&#32;in&#32;the&#32;range</emphasis>
16672 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[alpha,&#32;gamma].</emphasis>
16673 
16674 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;cached_power&#32;cached&#32;=&#32;get_cached_power_for_binary_exponent(m_plus.e);
16675 
16676 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;diyfp&#32;c_minus_k(cached.f,&#32;cached.e);&#32;<emphasis role="comment">//&#32;=&#32;c&#32;~=&#32;10^-k</emphasis>
16677 
16678 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;exponent&#32;of&#32;the&#32;products&#32;is&#32;=&#32;v.e&#32;+&#32;c_minus_k.e&#32;+&#32;q&#32;and&#32;is&#32;in&#32;the&#32;range&#32;[alpha,gamma]</emphasis>
16679 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;diyfp&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a1ad83f255afd4038129297b57ef91603">w</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;diyfp::mul(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;c_minus_k);
16680 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;diyfp&#32;w_minus&#32;=&#32;diyfp::mul(m_minus,&#32;c_minus_k);
16681 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;diyfp&#32;w_plus&#32;&#32;=&#32;diyfp::mul(m_plus,&#32;&#32;c_minus_k);
16682 
16683 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;----(---+---)---------------(---+---)---------------(---+---)----</emphasis>
16684 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;w-&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;w&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;w+</emphasis>
16685 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;c*m-&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;c*v&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;c*m+</emphasis>
16686 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16687 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;diyfp::mul&#32;rounds&#32;its&#32;result&#32;and&#32;c_minus_k&#32;is&#32;approximated&#32;too.&#32;w,&#32;w-&#32;and</emphasis>
16688 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;w+&#32;are&#32;now&#32;off&#32;by&#32;a&#32;small&#32;amount.</emphasis>
16689 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;In&#32;fact:</emphasis>
16690 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16691 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;w&#32;-&#32;v&#32;*&#32;10^k&#32;&lt;&#32;1&#32;ulp</emphasis>
16692 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16693 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;To&#32;account&#32;for&#32;this&#32;inaccuracy,&#32;add&#32;resp.&#32;subtract&#32;1&#32;ulp.</emphasis>
16694 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16695 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;--------+---[---------------(---+---)---------------]---+--------</emphasis>
16696 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;w-&#32;&#32;M-&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;w&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;M+&#32;&#32;w+</emphasis>
16697 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16698 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Now&#32;any&#32;number&#32;in&#32;[M-,&#32;M+]&#32;(bounds&#32;included)&#32;will&#32;round&#32;to&#32;w&#32;when&#32;input,</emphasis>
16699 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;regardless&#32;of&#32;how&#32;the&#32;input&#32;rounding&#32;algorithm&#32;breaks&#32;ties.</emphasis>
16700 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16701 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;And&#32;digit_gen&#32;generates&#32;the&#32;shortest&#32;possible&#32;such&#32;number&#32;in&#32;[M-,&#32;M+].</emphasis>
16702 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note&#32;that&#32;this&#32;does&#32;not&#32;mean&#32;that&#32;Grisu2&#32;always&#32;generates&#32;the&#32;shortest</emphasis>
16703 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;possible&#32;number&#32;in&#32;the&#32;interval&#32;(m-,&#32;m+).</emphasis>
16704 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;diyfp&#32;M_minus(w_minus.f&#32;+&#32;1,&#32;w_minus.e);
16705 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;diyfp&#32;M_plus&#32;(w_plus.f&#32;&#32;-&#32;1,&#32;w_plus.e&#32;);
16706 
16707 &#32;&#32;&#32;&#32;decimal_exponent&#32;=&#32;-cached.k;&#32;<emphasis role="comment">//&#32;=&#32;-(-k)&#32;=&#32;k</emphasis>
16708 
16709 &#32;&#32;&#32;&#32;grisu2_digit_gen(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;decimal_exponent,&#32;M_minus,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a1ad83f255afd4038129297b57ef91603">w</link>,&#32;M_plus);
16710 }
16711 
16717 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;FloatType&gt;
16718 <link linkend="_json_8hpp_1a5338981b5ad9027c9e54b1c5597f4344">JSON_HEDLEY_NON_NULL</link>(1)
16719 <emphasis role="keywordtype">void</emphasis>&#32;grisu2(<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>,&#32;<emphasis role="keywordtype">int</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;<emphasis role="keywordtype">int</emphasis>&amp;&#32;decimal_exponent,&#32;FloatType&#32;<link linkend="_classvalue">value</link>)
16720 {
16721 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(diyfp::kPrecision&#32;&gt;=&#32;std::numeric_limits&lt;FloatType&gt;::digits&#32;+&#32;3,
16722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;internal&#32;error:&#32;not&#32;enough&#32;precision&quot;</emphasis>);
16723 
16724 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(std::isfinite(<link linkend="_classvalue">value</link>));
16725 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(<link linkend="_classvalue">value</link>&#32;&gt;&#32;0);
16726 
16727 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;the&#32;neighbors&#32;(and&#32;boundaries)&#32;of&#32;&apos;value&apos;&#32;are&#32;always&#32;computed&#32;for&#32;double-precision</emphasis>
16728 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;numbers,&#32;all&#32;float&apos;s&#32;can&#32;be&#32;recovered&#32;using&#32;strtod&#32;(and&#32;strtof).&#32;However,&#32;the&#32;resulting</emphasis>
16729 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;decimal&#32;representations&#32;are&#32;not&#32;exactly&#32;&quot;short&quot;.</emphasis>
16730 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16731 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;documentation&#32;for&#32;&apos;std::to_chars&apos;&#32;(https://en.cppreference.com/w/cpp/utility/to_chars)</emphasis>
16732 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;says&#32;&quot;value&#32;is&#32;converted&#32;to&#32;a&#32;string&#32;as&#32;if&#32;by&#32;std::sprintf&#32;in&#32;the&#32;default&#32;(&quot;C&quot;)&#32;locale&quot;</emphasis>
16733 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;and&#32;since&#32;sprintf&#32;promotes&#32;floats&#32;to&#32;doubles,&#32;I&#32;think&#32;this&#32;is&#32;exactly&#32;what&#32;&apos;std::to_chars&apos;</emphasis>
16734 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;does.</emphasis>
16735 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;On&#32;the&#32;other&#32;hand,&#32;the&#32;documentation&#32;for&#32;&apos;std::to_chars&apos;&#32;requires&#32;that&#32;&quot;parsing&#32;the</emphasis>
16736 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;representation&#32;using&#32;the&#32;corresponding&#32;std::from_chars&#32;function&#32;recovers&#32;value&#32;exactly&quot;.&#32;That</emphasis>
16737 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;indicates&#32;that&#32;single&#32;precision&#32;floating-point&#32;numbers&#32;should&#32;be&#32;recovered&#32;using</emphasis>
16738 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&apos;std::strtof&apos;.</emphasis>
16739 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16740 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NB:&#32;If&#32;the&#32;neighbors&#32;are&#32;computed&#32;for&#32;single-precision&#32;numbers,&#32;there&#32;is&#32;a&#32;single&#32;float</emphasis>
16741 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;(7.0385307e-26f)&#32;which&#32;can&apos;t&#32;be&#32;recovered&#32;using&#32;strtod.&#32;The&#32;resulting&#32;double&#32;precision</emphasis>
16742 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;value&#32;is&#32;off&#32;by&#32;1&#32;ulp.</emphasis>
16743 <emphasis role="preprocessor">#if&#32;0</emphasis>
16744 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;boundaries&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a1ad83f255afd4038129297b57ef91603">w</link>&#32;=&#32;compute_boundaries(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="_classvalue">value</link>));
16745 <emphasis role="preprocessor">#else</emphasis>
16746 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;boundaries&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a1ad83f255afd4038129297b57ef91603">w</link>&#32;=&#32;compute_boundaries(<link linkend="_classvalue">value</link>);
16747 <emphasis role="preprocessor">#endif</emphasis>
16748 
16749 &#32;&#32;&#32;&#32;grisu2(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;decimal_exponent,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a1ad83f255afd4038129297b57ef91603">w</link>.minus,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a1ad83f255afd4038129297b57ef91603">w</link>.w,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a1ad83f255afd4038129297b57ef91603">w</link>.plus);
16750 }
16751 
16757 <link linkend="_json_8hpp_1a5338981b5ad9027c9e54b1c5597f4344">JSON_HEDLEY_NON_NULL</link>(1)
16758 <link linkend="_json_8hpp_1a5f2aaec3b681d0a72f7d6e90b70cdcd1">JSON_HEDLEY_RETURNS_NON_NULL</link>
16759 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;append_exponent(<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;e)
16760 {
16761 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(e&#32;&gt;&#32;-1000);
16762 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(e&#32;&lt;&#32;&#32;1000);
16763 
16764 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(e&#32;&lt;&#32;0)
16765 &#32;&#32;&#32;&#32;{
16766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;e&#32;=&#32;-e;
16767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>++&#32;=&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>;
16768 &#32;&#32;&#32;&#32;}
16769 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
16770 &#32;&#32;&#32;&#32;{
16771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>++&#32;=&#32;<emphasis role="charliteral">&apos;+&apos;</emphasis>;
16772 &#32;&#32;&#32;&#32;}
16773 
16774 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;k&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::uint32_t<emphasis role="keyword">&gt;</emphasis>(e);
16775 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(k&#32;&lt;&#32;10)
16776 &#32;&#32;&#32;&#32;{
16777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Always&#32;print&#32;at&#32;least&#32;two&#32;digits&#32;in&#32;the&#32;exponent.</emphasis>
16778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;is&#32;for&#32;compatibility&#32;with&#32;printf(&quot;%g&quot;).</emphasis>
16779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>++&#32;=&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>;
16780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>++&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;+&#32;k);
16781 &#32;&#32;&#32;&#32;}
16782 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(k&#32;&lt;&#32;100)
16783 &#32;&#32;&#32;&#32;{
16784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>++&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;+&#32;k&#32;/&#32;10);
16785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;k&#32;%=&#32;10;
16786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>++&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;+&#32;k);
16787 &#32;&#32;&#32;&#32;}
16788 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
16789 &#32;&#32;&#32;&#32;{
16790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>++&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;+&#32;k&#32;/&#32;100);
16791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;k&#32;%=&#32;100;
16792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>++&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;+&#32;k&#32;/&#32;10);
16793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;k&#32;%=&#32;10;
16794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>++&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;+&#32;k);
16795 &#32;&#32;&#32;&#32;}
16796 
16797 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>;
16798 }
16799 
16809 <link linkend="_json_8hpp_1a5338981b5ad9027c9e54b1c5597f4344">JSON_HEDLEY_NON_NULL</link>(1)
16810 <link linkend="_json_8hpp_1a5f2aaec3b681d0a72f7d6e90b70cdcd1">JSON_HEDLEY_RETURNS_NON_NULL</link>
16811 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;format_buffer(<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;decimal_exponent,
16812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;min_exp,&#32;<emphasis role="keywordtype">int</emphasis>&#32;max_exp)
16813 {
16814 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(min_exp&#32;&lt;&#32;0);
16815 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(max_exp&#32;&gt;&#32;0);
16816 
16817 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;k&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>;
16818 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;n&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;+&#32;decimal_exponent;
16819 
16820 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;v&#32;=&#32;buf&#32;*&#32;10^(n-k)</emphasis>
16821 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;k&#32;is&#32;the&#32;length&#32;of&#32;the&#32;buffer&#32;(number&#32;of&#32;decimal&#32;digits)</emphasis>
16822 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;n&#32;is&#32;the&#32;position&#32;of&#32;the&#32;decimal&#32;point&#32;relative&#32;to&#32;the&#32;start&#32;of&#32;the&#32;buffer.</emphasis>
16823 
16824 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(k&#32;&lt;=&#32;n&#32;&amp;&amp;&#32;n&#32;&lt;=&#32;max_exp)
16825 &#32;&#32;&#32;&#32;{
16826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;digits[000]</emphasis>
16827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;len&#32;&lt;=&#32;max_exp&#32;+&#32;2</emphasis>
16828 
16829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memset(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>&#32;+&#32;k,&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(n)&#32;-&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(k));
16830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Make&#32;it&#32;look&#32;like&#32;a&#32;floating-point&#32;number&#32;(#362,&#32;#378)</emphasis>
16831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>[n&#32;+&#32;0]&#32;=&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>;
16832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>[n&#32;+&#32;1]&#32;=&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>;
16833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>&#32;+&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(n)&#32;+&#32;2);
16834 &#32;&#32;&#32;&#32;}
16835 
16836 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(0&#32;&lt;&#32;n&#32;&amp;&amp;&#32;n&#32;&lt;=&#32;max_exp)
16837 &#32;&#32;&#32;&#32;{
16838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;dig.its</emphasis>
16839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;len&#32;&lt;=&#32;max_digits10&#32;+&#32;1</emphasis>
16840 
16841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(k&#32;&gt;&#32;n);
16842 
16843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memmove(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>&#32;+&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(n)&#32;+&#32;1),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>&#32;+&#32;n,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(k)&#32;-&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(n));
16844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>[n]&#32;=&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>;
16845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>&#32;+&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(k)&#32;+&#32;1U);
16846 &#32;&#32;&#32;&#32;}
16847 
16848 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(min_exp&#32;&lt;&#32;n&#32;&amp;&amp;&#32;n&#32;&lt;=&#32;0)
16849 &#32;&#32;&#32;&#32;{
16850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0.[000]digits</emphasis>
16851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;len&#32;&lt;=&#32;2&#32;+&#32;(-min_exp&#32;-&#32;1)&#32;+&#32;max_digits10</emphasis>
16852 
16853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memmove(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>&#32;+&#32;(2&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(-n)),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(k));
16854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>[0]&#32;=&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>;
16855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>[1]&#32;=&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>;
16856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memset(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>&#32;+&#32;2,&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(-n));
16857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>&#32;+&#32;(2U&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(-n)&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(k));
16858 &#32;&#32;&#32;&#32;}
16859 
16860 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(k&#32;==&#32;1)
16861 &#32;&#32;&#32;&#32;{
16862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;dE+123</emphasis>
16863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;len&#32;&lt;=&#32;1&#32;+&#32;5</emphasis>
16864 
16865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>&#32;+=&#32;1;
16866 &#32;&#32;&#32;&#32;}
16867 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
16868 &#32;&#32;&#32;&#32;{
16869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;d.igitsE+123</emphasis>
16870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;len&#32;&lt;=&#32;max_digits10&#32;+&#32;1&#32;+&#32;5</emphasis>
16871 
16872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memmove(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>&#32;+&#32;2,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>&#32;+&#32;1,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(k)&#32;-&#32;1);
16873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>[1]&#32;=&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>;
16874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>&#32;+=&#32;1&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(k);
16875 &#32;&#32;&#32;&#32;}
16876 
16877 &#32;&#32;&#32;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>++&#32;=&#32;<emphasis role="charliteral">&apos;e&apos;</emphasis>;
16878 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;append_exponent(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>,&#32;n&#32;-&#32;1);
16879 }
16880 
16881 }&#32;<emphasis role="comment">//&#32;namespace&#32;dtoa_impl</emphasis>
16882 
16893 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;FloatType&gt;
16894 <link linkend="_json_8hpp_1a5338981b5ad9027c9e54b1c5597f4344">JSON_HEDLEY_NON_NULL</link>(1,&#32;2)
16895 <link linkend="_json_8hpp_1a5f2aaec3b681d0a72f7d6e90b70cdcd1">JSON_HEDLEY_RETURNS_NON_NULL</link>
16896 <emphasis role="keywordtype">char</emphasis>*&#32;to_chars(<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;const&#32;<emphasis role="keywordtype">char</emphasis>*&#32;last,&#32;FloatType&#32;<link linkend="_classvalue">value</link>)
16897 {
16898 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis><emphasis role="keyword">&gt;</emphasis>(last);&#32;<emphasis role="comment">//&#32;maybe&#32;unused&#32;-&#32;fix&#32;warning</emphasis>
16899 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(std::isfinite(<link linkend="_classvalue">value</link>));
16900 
16901 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Use&#32;signbit(value)&#32;instead&#32;of&#32;(value&#32;&lt;&#32;0)&#32;since&#32;signbit&#32;works&#32;for&#32;-0.</emphasis>
16902 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::signbit(<link linkend="_classvalue">value</link>))
16903 &#32;&#32;&#32;&#32;{
16904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>&#32;=&#32;-<link linkend="_classvalue">value</link>;
16905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>++&#32;=&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>;
16906 &#32;&#32;&#32;&#32;}
16907 
16908 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
16909 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
16910 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wfloat-equal&quot;</emphasis>
16911 <emphasis role="preprocessor">#endif</emphasis>
16912 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classvalue">value</link>&#32;==&#32;0)&#32;<emphasis role="comment">//&#32;+-0</emphasis>
16913 &#32;&#32;&#32;&#32;{
16914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>++&#32;=&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>;
16915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Make&#32;it&#32;look&#32;like&#32;a&#32;floating-point&#32;number&#32;(#362,&#32;#378)</emphasis>
16916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>++&#32;=&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>;
16917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>++&#32;=&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>;
16918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>;
16919 &#32;&#32;&#32;&#32;}
16920 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
16921 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
16922 <emphasis role="preprocessor">#endif</emphasis>
16923 
16924 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(last&#32;-&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>&#32;&gt;=&#32;std::numeric_limits&lt;FloatType&gt;::max_digits10);
16925 
16926 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Compute&#32;v&#32;=&#32;buffer&#32;*&#32;10^decimal_exponent.</emphasis>
16927 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;decimal&#32;digits&#32;are&#32;stored&#32;in&#32;the&#32;buffer,&#32;which&#32;needs&#32;to&#32;be&#32;interpreted</emphasis>
16928 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;as&#32;an&#32;unsigned&#32;decimal&#32;integer.</emphasis>
16929 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;len&#32;is&#32;the&#32;length&#32;of&#32;the&#32;buffer,&#32;i.e.&#32;the&#32;number&#32;of&#32;decimal&#32;digits.</emphasis>
16930 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;=&#32;0;
16931 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;decimal_exponent&#32;=&#32;0;
16932 &#32;&#32;&#32;&#32;dtoa_impl::grisu2(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;decimal_exponent,&#32;<link linkend="_classvalue">value</link>);
16933 
16934 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;&lt;=&#32;std::numeric_limits&lt;FloatType&gt;::max_digits10);
16935 
16936 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Format&#32;the&#32;buffer&#32;like&#32;printf(&quot;%.*g&quot;,&#32;prec,&#32;value)</emphasis>
16937 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;kMinExp&#32;=&#32;-4;
16938 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Use&#32;digits10&#32;here&#32;to&#32;increase&#32;compatibility&#32;with&#32;version&#32;2.</emphasis>
16939 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;kMaxExp&#32;=&#32;std::numeric_limits&lt;FloatType&gt;::digits10;
16940 
16941 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(last&#32;-&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>&#32;&gt;=&#32;kMaxExp&#32;+&#32;2);
16942 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(last&#32;-&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>&#32;&gt;=&#32;2&#32;+&#32;(-kMinExp&#32;-&#32;1)&#32;+&#32;std::numeric_limits&lt;FloatType&gt;::max_digits10);
16943 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(last&#32;-&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>&#32;&gt;=&#32;std::numeric_limits&lt;FloatType&gt;::max_digits10&#32;+&#32;6);
16944 
16945 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;dtoa_impl::format_buffer(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;decimal_exponent,&#32;kMinExp,&#32;kMaxExp);
16946 }
16947 
16948 }&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
16949 }&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann</emphasis>
16950 
16951 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/exceptions.hpp&gt;</emphasis>
16952 
16953 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/macro_scope.hpp&gt;</emphasis>
16954 
16955 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/meta/cpp_future.hpp&gt;</emphasis>
16956 
16957 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/output/binary_writer.hpp&gt;</emphasis>
16958 
16959 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/output/output_adapters.hpp&gt;</emphasis>
16960 
16961 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/string_concat.hpp&gt;</emphasis>
16962 
16963 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/value_t.hpp&gt;</emphasis>
16964 
16965 
16966 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann">nlohmann</link>
16967 {
16968 <emphasis role="keyword">namespace&#32;</emphasis>detail
16969 {
16971 <emphasis role="comment">//&#32;serialization&#32;//</emphasis>
16973 
16975 <emphasis role="keyword">enum&#32;class</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967df">error_handler_t</link>
16976 {
16977 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa2133fd717402a7966ee88d06f9e0b792">strict</link>,&#32;&#32;
16978 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa9dde360102c103867bd2f45872f1129c">replace</link>,&#32;
16979 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9aca567bc1d268f135496de3d5b946b691f3">ignore</link>&#32;&#32;&#32;
16980 };
16981 
16982 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
16983 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1serializer">serializer</link>
16984 {
16985 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>string_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::string_t;
16986 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>number_float_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_float_t;
16987 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>number_integer_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_integer_t;
16988 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>number_unsigned_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_unsigned_t;
16989 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>binary_char_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::binary_t::value_type;
16990 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;std::uint8_t&#32;UTF8_ACCEPT&#32;=&#32;0;
16991 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;std::uint8_t&#32;UTF8_REJECT&#32;=&#32;1;
16992 
16993 &#32;&#32;<emphasis role="keyword">public</emphasis>:
16999 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1ac010525281d97867ee842da37294fe83">serializer</link>(output_adapter_t&lt;char&gt;&#32;s,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;ichar,
17000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967df">error_handler_t</link>&#32;error_handler_&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa2133fd717402a7966ee88d06f9e0b792">error_handler_t::strict</link>)
17001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;o(<link linkend="_namespacestd">std</link>::move(s))
17002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a1952945b7652afb59d3903cc8457a589">loc</link>(<link linkend="_namespacestd">std</link>::localeconv())
17003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a78a6ae833bb6cf7f00cb0d51db114b14">thousands_sep</link>(<link linkend="_classnlohmann_1_1detail_1_1serializer_1a1952945b7652afb59d3903cc8457a589">loc</link>-&gt;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a78a6ae833bb6cf7f00cb0d51db114b14">thousands_sep</link>&#32;==&#32;nullptr&#32;?&#32;<emphasis role="stringliteral">&apos;\0&apos;</emphasis>&#32;:&#32;<link linkend="_namespacestd">std</link>::char_traits&lt;char&gt;::to_char_type(*&#32;(<link linkend="_classnlohmann_1_1detail_1_1serializer_1a1952945b7652afb59d3903cc8457a589">loc</link>-&gt;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a78a6ae833bb6cf7f00cb0d51db114b14">thousands_sep</link>)))
17004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a311e5d6f4b31d5be0eb3c0cb20b6965a">decimal_point</link>(<link linkend="_classnlohmann_1_1detail_1_1serializer_1a1952945b7652afb59d3903cc8457a589">loc</link>-&gt;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a311e5d6f4b31d5be0eb3c0cb20b6965a">decimal_point</link>&#32;==&#32;nullptr&#32;?&#32;<emphasis role="stringliteral">&apos;\0&apos;</emphasis>&#32;:&#32;<link linkend="_namespacestd">std</link>::char_traits&lt;char&gt;::to_char_type(*&#32;(<link linkend="_classnlohmann_1_1detail_1_1serializer_1a1952945b7652afb59d3903cc8457a589">loc</link>-&gt;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a311e5d6f4b31d5be0eb3c0cb20b6965a">decimal_point</link>)))
17005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9a55e6b028d09676fe35aefa0c72ea5b">indent_char</link>(ichar)
17006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1ae9268a10d88a5526e32735a55a132fc6">indent_string</link>(512,&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9a55e6b028d09676fe35aefa0c72ea5b">indent_char</link>)
17007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a09d5a046fb0f7cb61977d6e5fbe8b3a1">error_handler</link>(error_handler_)
17008 &#32;&#32;&#32;&#32;{}
17009 
17010 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;delete&#32;because&#32;of&#32;pointer&#32;members</emphasis>
17011 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1ae3771351ec4cb892bec707edeb56dc31">serializer</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer">serializer</link>&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
17012 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer">serializer</link>&amp;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a80d865009268108161afe318a30aff5e">operator=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer">serializer</link>&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
17013 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a28081304e70cca6b3042c101ee5c498c">serializer</link>(<link linkend="_classnlohmann_1_1detail_1_1serializer">serializer</link>&amp;&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
17014 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer">serializer</link>&amp;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a2fb91f0b3479c5603b45e8a4c1f6673e">operator=</link>(<link linkend="_classnlohmann_1_1detail_1_1serializer">serializer</link>&amp;&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
17015 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1aa6c62b51cbebb185307df851dc0167f0">~serializer</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
17016 
17039 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a95460ebd1a535a543e5a0ec52e00f48b">dump</link>(<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,
17040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;pretty_print,
17041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1ab4c340f2a5230f766a833366603a0049">ensure_ascii</link>,
17042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;indent_step,
17043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;current_indent&#32;=&#32;0)
17044 &#32;&#32;&#32;&#32;{
17045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.m_type)
17046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">value_t::object</link>:
17048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.m_value.object-&gt;empty())
17050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<emphasis role="stringliteral">&quot;{}&quot;</emphasis>,&#32;2);
17052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
17053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17054 
17055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pretty_print)
17056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<emphasis role="stringliteral">&quot;{\n&quot;</emphasis>,&#32;2);
17058 
17059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;variable&#32;to&#32;hold&#32;indentation&#32;for&#32;recursive&#32;calls</emphasis>
17060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;new_indent&#32;=&#32;current_indent&#32;+&#32;indent_step;
17061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(<link linkend="_classnlohmann_1_1detail_1_1serializer_1ae9268a10d88a5526e32735a55a132fc6">indent_string</link>.size()&#32;&lt;&#32;new_indent))
17062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1ae9268a10d88a5526e32735a55a132fc6">indent_string</link>.resize(<link linkend="_classnlohmann_1_1detail_1_1serializer_1ae9268a10d88a5526e32735a55a132fc6">indent_string</link>.size()&#32;*&#32;2,&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>);
17064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17065 
17066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;first&#32;n-1&#32;elements</emphasis>
17067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;i&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.m_value.object-&gt;cbegin();
17068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;cnt&#32;=&#32;0;&#32;cnt&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.m_value.object-&gt;size()&#32;-&#32;1;&#32;++cnt,&#32;++i)
17069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<link linkend="_classnlohmann_1_1detail_1_1serializer_1ae9268a10d88a5526e32735a55a132fc6">indent_string</link>.c_str(),&#32;new_indent);
17071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_character(<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>);
17072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dump_escaped(i-&gt;first,&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1ab4c340f2a5230f766a833366603a0049">ensure_ascii</link>);
17073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<emphasis role="stringliteral">&quot;\&quot;:&#32;&quot;</emphasis>,&#32;3);
17074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a95460ebd1a535a543e5a0ec52e00f48b">dump</link>(i-&gt;second,&#32;<emphasis role="keyword">true</emphasis>,&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1ab4c340f2a5230f766a833366603a0049">ensure_ascii</link>,&#32;indent_step,&#32;new_indent);
17075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<emphasis role="stringliteral">&quot;,\n&quot;</emphasis>,&#32;2);
17076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17077 
17078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;last&#32;element</emphasis>
17079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(i&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.m_value.object-&gt;cend());
17080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(std::next(i)&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.m_value.object-&gt;cend());
17081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<link linkend="_classnlohmann_1_1detail_1_1serializer_1ae9268a10d88a5526e32735a55a132fc6">indent_string</link>.c_str(),&#32;new_indent);
17082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_character(<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>);
17083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dump_escaped(i-&gt;first,&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1ab4c340f2a5230f766a833366603a0049">ensure_ascii</link>);
17084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<emphasis role="stringliteral">&quot;\&quot;:&#32;&quot;</emphasis>,&#32;3);
17085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a95460ebd1a535a543e5a0ec52e00f48b">dump</link>(i-&gt;second,&#32;<emphasis role="keyword">true</emphasis>,&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1ab4c340f2a5230f766a833366603a0049">ensure_ascii</link>,&#32;indent_step,&#32;new_indent);
17086 
17087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_character(<emphasis role="charliteral">&apos;\n&apos;</emphasis>);
17088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<link linkend="_classnlohmann_1_1detail_1_1serializer_1ae9268a10d88a5526e32735a55a132fc6">indent_string</link>.c_str(),&#32;current_indent);
17089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_character(<emphasis role="charliteral">&apos;}&apos;</emphasis>);
17090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
17092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_character(<emphasis role="charliteral">&apos;{&apos;</emphasis>);
17094 
17095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;first&#32;n-1&#32;elements</emphasis>
17096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;i&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.m_value.object-&gt;cbegin();
17097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;cnt&#32;=&#32;0;&#32;cnt&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.m_value.object-&gt;size()&#32;-&#32;1;&#32;++cnt,&#32;++i)
17098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_character(<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>);
17100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dump_escaped(i-&gt;first,&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1ab4c340f2a5230f766a833366603a0049">ensure_ascii</link>);
17101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<emphasis role="stringliteral">&quot;\&quot;:&quot;</emphasis>,&#32;2);
17102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a95460ebd1a535a543e5a0ec52e00f48b">dump</link>(i-&gt;second,&#32;<emphasis role="keyword">false</emphasis>,&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1ab4c340f2a5230f766a833366603a0049">ensure_ascii</link>,&#32;indent_step,&#32;current_indent);
17103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_character(<emphasis role="charliteral">&apos;,&apos;</emphasis>);
17104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17105 
17106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;last&#32;element</emphasis>
17107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(i&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.m_value.object-&gt;cend());
17108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(std::next(i)&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.m_value.object-&gt;cend());
17109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_character(<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>);
17110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dump_escaped(i-&gt;first,&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1ab4c340f2a5230f766a833366603a0049">ensure_ascii</link>);
17111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<emphasis role="stringliteral">&quot;\&quot;:&quot;</emphasis>,&#32;2);
17112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a95460ebd1a535a543e5a0ec52e00f48b">dump</link>(i-&gt;second,&#32;<emphasis role="keyword">false</emphasis>,&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1ab4c340f2a5230f766a833366603a0049">ensure_ascii</link>,&#32;indent_step,&#32;current_indent);
17113 
17114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_character(<emphasis role="charliteral">&apos;}&apos;</emphasis>);
17115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17116 
17117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
17118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17119 
17120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">value_t::array</link>:
17121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.m_value.array-&gt;empty())
17123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<emphasis role="stringliteral">&quot;[]&quot;</emphasis>,&#32;2);
17125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
17126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17127 
17128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pretty_print)
17129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<emphasis role="stringliteral">&quot;[\n&quot;</emphasis>,&#32;2);
17131 
17132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;variable&#32;to&#32;hold&#32;indentation&#32;for&#32;recursive&#32;calls</emphasis>
17133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;new_indent&#32;=&#32;current_indent&#32;+&#32;indent_step;
17134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(<link linkend="_classnlohmann_1_1detail_1_1serializer_1ae9268a10d88a5526e32735a55a132fc6">indent_string</link>.size()&#32;&lt;&#32;new_indent))
17135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1ae9268a10d88a5526e32735a55a132fc6">indent_string</link>.resize(<link linkend="_classnlohmann_1_1detail_1_1serializer_1ae9268a10d88a5526e32735a55a132fc6">indent_string</link>.size()&#32;*&#32;2,&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>);
17137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17138 
17139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;first&#32;n-1&#32;elements</emphasis>
17140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;i&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.m_value.array-&gt;cbegin();
17141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.m_value.array-&gt;cend()&#32;-&#32;1;&#32;++i)
17142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<link linkend="_classnlohmann_1_1detail_1_1serializer_1ae9268a10d88a5526e32735a55a132fc6">indent_string</link>.c_str(),&#32;new_indent);
17144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a95460ebd1a535a543e5a0ec52e00f48b">dump</link>(*i,&#32;<emphasis role="keyword">true</emphasis>,&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1ab4c340f2a5230f766a833366603a0049">ensure_ascii</link>,&#32;indent_step,&#32;new_indent);
17145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<emphasis role="stringliteral">&quot;,\n&quot;</emphasis>,&#32;2);
17146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17147 
17148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;last&#32;element</emphasis>
17149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(!<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.m_value.array-&gt;empty());
17150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<link linkend="_classnlohmann_1_1detail_1_1serializer_1ae9268a10d88a5526e32735a55a132fc6">indent_string</link>.c_str(),&#32;new_indent);
17151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a95460ebd1a535a543e5a0ec52e00f48b">dump</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.m_value.array-&gt;back(),&#32;<emphasis role="keyword">true</emphasis>,&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1ab4c340f2a5230f766a833366603a0049">ensure_ascii</link>,&#32;indent_step,&#32;new_indent);
17152 
17153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_character(<emphasis role="charliteral">&apos;\n&apos;</emphasis>);
17154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<link linkend="_classnlohmann_1_1detail_1_1serializer_1ae9268a10d88a5526e32735a55a132fc6">indent_string</link>.c_str(),&#32;current_indent);
17155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_character(<emphasis role="charliteral">&apos;]&apos;</emphasis>);
17156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
17158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_character(<emphasis role="charliteral">&apos;[&apos;</emphasis>);
17160 
17161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;first&#32;n-1&#32;elements</emphasis>
17162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;i&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.m_value.array-&gt;cbegin();
17163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.m_value.array-&gt;cend()&#32;-&#32;1;&#32;++i)
17164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a95460ebd1a535a543e5a0ec52e00f48b">dump</link>(*i,&#32;<emphasis role="keyword">false</emphasis>,&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1ab4c340f2a5230f766a833366603a0049">ensure_ascii</link>,&#32;indent_step,&#32;current_indent);
17166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_character(<emphasis role="charliteral">&apos;,&apos;</emphasis>);
17167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17168 
17169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;last&#32;element</emphasis>
17170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(!<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.m_value.array-&gt;empty());
17171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a95460ebd1a535a543e5a0ec52e00f48b">dump</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.m_value.array-&gt;back(),&#32;<emphasis role="keyword">false</emphasis>,&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1ab4c340f2a5230f766a833366603a0049">ensure_ascii</link>,&#32;indent_step,&#32;current_indent);
17172 
17173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_character(<emphasis role="charliteral">&apos;]&apos;</emphasis>);
17174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17175 
17176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
17177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17178 
17179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">value_t::string</link>:
17180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_character(<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>);
17182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dump_escaped(*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.m_value.string,&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1ab4c340f2a5230f766a833366603a0049">ensure_ascii</link>);
17183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_character(<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>);
17184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
17185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17186 
17187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">value_t::binary</link>:
17188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pretty_print)
17190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<emphasis role="stringliteral">&quot;{\n&quot;</emphasis>,&#32;2);
17192 
17193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;variable&#32;to&#32;hold&#32;indentation&#32;for&#32;recursive&#32;calls</emphasis>
17194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;new_indent&#32;=&#32;current_indent&#32;+&#32;indent_step;
17195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(<link linkend="_classnlohmann_1_1detail_1_1serializer_1ae9268a10d88a5526e32735a55a132fc6">indent_string</link>.size()&#32;&lt;&#32;new_indent))
17196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1ae9268a10d88a5526e32735a55a132fc6">indent_string</link>.resize(<link linkend="_classnlohmann_1_1detail_1_1serializer_1ae9268a10d88a5526e32735a55a132fc6">indent_string</link>.size()&#32;*&#32;2,&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>);
17198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17199 
17200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<link linkend="_classnlohmann_1_1detail_1_1serializer_1ae9268a10d88a5526e32735a55a132fc6">indent_string</link>.c_str(),&#32;new_indent);
17201 
17202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<emphasis role="stringliteral">&quot;\&quot;bytes\&quot;:&#32;[&quot;</emphasis>,&#32;10);
17203 
17204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.m_value.binary-&gt;empty())
17205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;i&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.m_value.binary-&gt;cbegin();
17207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.m_value.binary-&gt;cend()&#32;-&#32;1;&#32;++i)
17208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dump_integer(*i);
17210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>,&#32;2);
17211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dump_integer(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.m_value.binary-&gt;back());
17213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17214 
17215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<emphasis role="stringliteral">&quot;],\n&quot;</emphasis>,&#32;3);
17216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<link linkend="_classnlohmann_1_1detail_1_1serializer_1ae9268a10d88a5526e32735a55a132fc6">indent_string</link>.c_str(),&#32;new_indent);
17217 
17218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<emphasis role="stringliteral">&quot;\&quot;subtype\&quot;:&#32;&quot;</emphasis>,&#32;11);
17219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.m_value.binary-&gt;has_subtype())
17220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dump_integer(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.m_value.binary-&gt;subtype());
17222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
17224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<emphasis role="stringliteral">&quot;null&quot;</emphasis>,&#32;4);
17226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_character(<emphasis role="charliteral">&apos;\n&apos;</emphasis>);
17228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<link linkend="_classnlohmann_1_1detail_1_1serializer_1ae9268a10d88a5526e32735a55a132fc6">indent_string</link>.c_str(),&#32;current_indent);
17229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_character(<emphasis role="charliteral">&apos;}&apos;</emphasis>);
17230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
17232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<emphasis role="stringliteral">&quot;{\&quot;bytes\&quot;:[&quot;</emphasis>,&#32;10);
17234 
17235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.m_value.binary-&gt;empty())
17236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;i&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.m_value.binary-&gt;cbegin();
17238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.m_value.binary-&gt;cend()&#32;-&#32;1;&#32;++i)
17239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dump_integer(*i);
17241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_character(<emphasis role="charliteral">&apos;,&apos;</emphasis>);
17242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dump_integer(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.m_value.binary-&gt;back());
17244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17245 
17246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<emphasis role="stringliteral">&quot;],\&quot;subtype\&quot;:&quot;</emphasis>,&#32;12);
17247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.m_value.binary-&gt;has_subtype())
17248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dump_integer(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.m_value.binary-&gt;subtype());
17250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_character(<emphasis role="charliteral">&apos;}&apos;</emphasis>);
17251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
17253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<emphasis role="stringliteral">&quot;null}&quot;</emphasis>,&#32;5);
17255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
17258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17259 
17260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">value_t::boolean</link>:
17261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.m_value.boolean)
17263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<emphasis role="stringliteral">&quot;true&quot;</emphasis>,&#32;4);
17265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
17267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<emphasis role="stringliteral">&quot;false&quot;</emphasis>,&#32;5);
17269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
17271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17272 
17273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">value_t::number_integer</link>:
17274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dump_integer(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.m_value.number_integer);
17276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
17277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17278 
17279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">value_t::number_unsigned</link>:
17280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dump_integer(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.m_value.number_unsigned);
17282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
17283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17284 
17285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">value_t::number_float</link>:
17286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dump_float(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.m_value.number_float);
17288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
17289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17290 
17291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">value_t::discarded</link>:
17292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<emphasis role="stringliteral">&quot;&lt;discarded&gt;&quot;</emphasis>,&#32;11);
17294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
17295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17296 
17297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">value_t::null</link>:
17298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<emphasis role="stringliteral">&quot;null&quot;</emphasis>,&#32;4);
17300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
17301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17302 
17303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
17304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(<emphasis role="keyword">false</emphasis>);&#32;<emphasis role="comment">//&#32;NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)&#32;LCOV_EXCL_LINE</emphasis>
17305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17306 &#32;&#32;&#32;&#32;}
17307 
17308 &#32;&#32;<link linkend="_json_8hpp_1a2cf645f34610e7f7d6e09ab88a2ab917">JSON_PRIVATE_UNLESS_TESTED</link>:
17323 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;dump_escaped(<emphasis role="keyword">const</emphasis>&#32;string_t&amp;&#32;s,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1ab4c340f2a5230f766a833366603a0049">ensure_ascii</link>)
17324 &#32;&#32;&#32;&#32;{
17325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint32_t&#32;codepoint{};
17326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint8_t&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a39b0975f219b542d7ca633652e925b4c">state</link>&#32;=&#32;UTF8_ACCEPT;
17327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>&#32;=&#32;0;&#32;&#32;<emphasis role="comment">//&#32;number&#32;of&#32;bytes&#32;written&#32;to&#32;string_buffer</emphasis>
17328 
17329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;number&#32;of&#32;bytes&#32;written&#32;at&#32;the&#32;point&#32;of&#32;the&#32;last&#32;valid&#32;byte</emphasis>
17330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9ae3daaea1941fd02d4c3c1b0f5fbe68">bytes_after_last_accept</link>&#32;=&#32;0;
17331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a814f27bba20f0e109d0dbcaa4a399415">undumped_chars</link>&#32;=&#32;0;
17332 
17333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;s.size();&#32;++i)
17334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keywordtype">byte</emphasis>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(s[i]);
17336 
17337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(decode(<link linkend="_classnlohmann_1_1detail_1_1serializer_1a39b0975f219b542d7ca633652e925b4c">state</link>,&#32;codepoint,&#32;<emphasis role="keywordtype">byte</emphasis>))
17338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;UTF8_ACCEPT:&#32;&#32;<emphasis role="comment">//&#32;decode&#32;found&#32;a&#32;new&#32;code&#32;point</emphasis>
17340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(codepoint)
17342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x08:&#32;<emphasis role="comment">//&#32;backspace</emphasis>
17344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9c9b7ca63a66e59e5e7ffe8a2acf5c8f">string_buffer</link>[<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>++]&#32;=&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>;
17346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9c9b7ca63a66e59e5e7ffe8a2acf5c8f">string_buffer</link>[<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>++]&#32;=&#32;<emphasis role="charliteral">&apos;b&apos;</emphasis>;
17347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
17348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17349 
17350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x09:&#32;<emphasis role="comment">//&#32;horizontal&#32;tab</emphasis>
17351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9c9b7ca63a66e59e5e7ffe8a2acf5c8f">string_buffer</link>[<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>++]&#32;=&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>;
17353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9c9b7ca63a66e59e5e7ffe8a2acf5c8f">string_buffer</link>[<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>++]&#32;=&#32;<emphasis role="charliteral">&apos;t&apos;</emphasis>;
17354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
17355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17356 
17357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x0A:&#32;<emphasis role="comment">//&#32;newline</emphasis>
17358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9c9b7ca63a66e59e5e7ffe8a2acf5c8f">string_buffer</link>[<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>++]&#32;=&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>;
17360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9c9b7ca63a66e59e5e7ffe8a2acf5c8f">string_buffer</link>[<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>++]&#32;=&#32;<emphasis role="charliteral">&apos;n&apos;</emphasis>;
17361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
17362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17363 
17364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x0C:&#32;<emphasis role="comment">//&#32;formfeed</emphasis>
17365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9c9b7ca63a66e59e5e7ffe8a2acf5c8f">string_buffer</link>[<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>++]&#32;=&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>;
17367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9c9b7ca63a66e59e5e7ffe8a2acf5c8f">string_buffer</link>[<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>++]&#32;=&#32;<emphasis role="charliteral">&apos;f&apos;</emphasis>;
17368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
17369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17370 
17371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x0D:&#32;<emphasis role="comment">//&#32;carriage&#32;return</emphasis>
17372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9c9b7ca63a66e59e5e7ffe8a2acf5c8f">string_buffer</link>[<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>++]&#32;=&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>;
17374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9c9b7ca63a66e59e5e7ffe8a2acf5c8f">string_buffer</link>[<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>++]&#32;=&#32;<emphasis role="charliteral">&apos;r&apos;</emphasis>;
17375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
17376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17377 
17378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x22:&#32;<emphasis role="comment">//&#32;quotation&#32;mark</emphasis>
17379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9c9b7ca63a66e59e5e7ffe8a2acf5c8f">string_buffer</link>[<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>++]&#32;=&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>;
17381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9c9b7ca63a66e59e5e7ffe8a2acf5c8f">string_buffer</link>[<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>++]&#32;=&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>;
17382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
17383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17384 
17385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x5C:&#32;<emphasis role="comment">//&#32;reverse&#32;solidus</emphasis>
17386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9c9b7ca63a66e59e5e7ffe8a2acf5c8f">string_buffer</link>[<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>++]&#32;=&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>;
17388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9c9b7ca63a66e59e5e7ffe8a2acf5c8f">string_buffer</link>[<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>++]&#32;=&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>;
17389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
17390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17391 
17392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
17393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;escape&#32;control&#32;characters&#32;(0x00..0x1F)&#32;or,&#32;if</emphasis>
17395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ensure_ascii&#32;parameter&#32;is&#32;used,&#32;non-ASCII&#32;characters</emphasis>
17396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((codepoint&#32;&lt;=&#32;0x1F)&#32;||&#32;(<link linkend="_classnlohmann_1_1detail_1_1serializer_1ab4c340f2a5230f766a833366603a0049">ensure_ascii</link>&#32;&amp;&amp;&#32;(codepoint&#32;&gt;=&#32;0x7F)))
17397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(codepoint&#32;&lt;=&#32;0xFFFF)
17399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg,hicpp-vararg)</emphasis>
17401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis><emphasis role="keyword">&gt;</emphasis>((std::snprintf)(<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9c9b7ca63a66e59e5e7ffe8a2acf5c8f">string_buffer</link>.data()&#32;+&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>,&#32;7,&#32;<emphasis role="stringliteral">&quot;\\u%04x&quot;</emphasis>,
17402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::uint16_t<emphasis role="keyword">&gt;</emphasis>(codepoint)));
17403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>&#32;+=&#32;6;
17404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
17406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg,hicpp-vararg)</emphasis>
17408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis><emphasis role="keyword">&gt;</emphasis>((std::snprintf)(<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9c9b7ca63a66e59e5e7ffe8a2acf5c8f">string_buffer</link>.data()&#32;+&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>,&#32;13,&#32;<emphasis role="stringliteral">&quot;\\u%04x\\u%04x&quot;</emphasis>,
17409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::uint16_t<emphasis role="keyword">&gt;</emphasis>(0xD7C0u&#32;+&#32;(codepoint&#32;&gt;&gt;&#32;10u)),
17410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::uint16_t<emphasis role="keyword">&gt;</emphasis>(0xDC00u&#32;+&#32;(codepoint&#32;&amp;&#32;0x3FFu))));
17411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>&#32;+=&#32;12;
17412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
17415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;copy&#32;byte&#32;to&#32;buffer&#32;(all&#32;previous&#32;bytes</emphasis>
17417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;been&#32;copied&#32;have&#32;in&#32;default&#32;case&#32;above)</emphasis>
17418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9c9b7ca63a66e59e5e7ffe8a2acf5c8f">string_buffer</link>[<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>++]&#32;=&#32;s[i];
17419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
17421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17423 
17424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;write&#32;buffer&#32;and&#32;reset&#32;index;&#32;there&#32;must&#32;be&#32;13&#32;bytes</emphasis>
17425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;left,&#32;as&#32;this&#32;is&#32;the&#32;maximal&#32;number&#32;of&#32;bytes&#32;to&#32;be</emphasis>
17426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;written&#32;(&quot;\uxxxx\uxxxx\0&quot;)&#32;for&#32;one&#32;code&#32;point</emphasis>
17427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9c9b7ca63a66e59e5e7ffe8a2acf5c8f">string_buffer</link>.size()&#32;-&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>&#32;&lt;&#32;13)
17428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9c9b7ca63a66e59e5e7ffe8a2acf5c8f">string_buffer</link>.data(),&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>);
17430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>&#32;=&#32;0;
17431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17432 
17433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;remember&#32;the&#32;byte&#32;position&#32;of&#32;this&#32;accept</emphasis>
17434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9ae3daaea1941fd02d4c3c1b0f5fbe68">bytes_after_last_accept</link>&#32;=&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>;
17435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a814f27bba20f0e109d0dbcaa4a399415">undumped_chars</link>&#32;=&#32;0;
17436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
17437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17438 
17439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;UTF8_REJECT:&#32;&#32;<emphasis role="comment">//&#32;decode&#32;found&#32;invalid&#32;UTF-8&#32;byte</emphasis>
17440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="_classnlohmann_1_1detail_1_1serializer_1a09d5a046fb0f7cb61977d6e5fbe8b3a1">error_handler</link>)
17442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa2133fd717402a7966ee88d06f9e0b792">error_handler_t::strict</link>:
17444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(316,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;invalid&#32;UTF-8&#32;byte&#32;at&#32;index&#32;&quot;</emphasis>,&#32;std::to_string(i),&#32;<emphasis role="stringliteral">&quot;:&#32;0x&quot;</emphasis>,&#32;hex_bytes(<emphasis role="keywordtype">byte</emphasis>&#32;|&#32;0)),&#32;<emphasis role="keyword">nullptr</emphasis>));
17446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17447 
17448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa567bc1d268f135496de3d5b946b691f3">error_handler_t::ignore</link>:
17449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa9dde360102c103867bd2f45872f1129c">error_handler_t::replace</link>:
17450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;in&#32;case&#32;we&#32;saw&#32;this&#32;character&#32;the&#32;first&#32;time,&#32;we</emphasis>
17452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;would&#32;like&#32;to&#32;read&#32;it&#32;again,&#32;because&#32;the&#32;byte</emphasis>
17453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;may&#32;be&#32;OK&#32;for&#32;itself,&#32;but&#32;just&#32;not&#32;OK&#32;for&#32;the</emphasis>
17454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;previous&#32;sequence</emphasis>
17455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classnlohmann_1_1detail_1_1serializer_1a814f27bba20f0e109d0dbcaa4a399415">undumped_chars</link>&#32;&gt;&#32;0)
17456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--i;
17458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17459 
17460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;reset&#32;length&#32;buffer&#32;to&#32;the&#32;last&#32;accepted&#32;index;</emphasis>
17461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;thus&#32;removing/ignoring&#32;the&#32;invalid&#32;characters</emphasis>
17462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>&#32;=&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9ae3daaea1941fd02d4c3c1b0f5fbe68">bytes_after_last_accept</link>;
17463 
17464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classnlohmann_1_1detail_1_1serializer_1a09d5a046fb0f7cb61977d6e5fbe8b3a1">error_handler</link>&#32;==&#32;<link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa9dde360102c103867bd2f45872f1129c">error_handler_t::replace</link>)
17465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;add&#32;a&#32;replacement&#32;character</emphasis>
17467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classnlohmann_1_1detail_1_1serializer_1ab4c340f2a5230f766a833366603a0049">ensure_ascii</link>)
17468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9c9b7ca63a66e59e5e7ffe8a2acf5c8f">string_buffer</link>[<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>++]&#32;=&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>;
17470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9c9b7ca63a66e59e5e7ffe8a2acf5c8f">string_buffer</link>[<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>++]&#32;=&#32;<emphasis role="charliteral">&apos;u&apos;</emphasis>;
17471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9c9b7ca63a66e59e5e7ffe8a2acf5c8f">string_buffer</link>[<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>++]&#32;=&#32;<emphasis role="charliteral">&apos;f&apos;</emphasis>;
17472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9c9b7ca63a66e59e5e7ffe8a2acf5c8f">string_buffer</link>[<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>++]&#32;=&#32;<emphasis role="charliteral">&apos;f&apos;</emphasis>;
17473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9c9b7ca63a66e59e5e7ffe8a2acf5c8f">string_buffer</link>[<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>++]&#32;=&#32;<emphasis role="charliteral">&apos;f&apos;</emphasis>;
17474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9c9b7ca63a66e59e5e7ffe8a2acf5c8f">string_buffer</link>[<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>++]&#32;=&#32;<emphasis role="charliteral">&apos;d&apos;</emphasis>;
17475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
17477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9c9b7ca63a66e59e5e7ffe8a2acf5c8f">string_buffer</link>[<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>++]&#32;=&#32;detail::binary_writer&lt;BasicJsonType,&#32;char&gt;::to_char_type(<emphasis role="stringliteral">&apos;\xEF&apos;</emphasis>);
17479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9c9b7ca63a66e59e5e7ffe8a2acf5c8f">string_buffer</link>[<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>++]&#32;=&#32;detail::binary_writer&lt;BasicJsonType,&#32;char&gt;::to_char_type(<emphasis role="stringliteral">&apos;\xBF&apos;</emphasis>);
17480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9c9b7ca63a66e59e5e7ffe8a2acf5c8f">string_buffer</link>[<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>++]&#32;=&#32;detail::binary_writer&lt;BasicJsonType,&#32;char&gt;::to_char_type(<emphasis role="stringliteral">&apos;\xBD&apos;</emphasis>);
17481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17482 
17483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;write&#32;buffer&#32;and&#32;reset&#32;index;&#32;there&#32;must&#32;be&#32;13&#32;bytes</emphasis>
17484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;left,&#32;as&#32;this&#32;is&#32;the&#32;maximal&#32;number&#32;of&#32;bytes&#32;to&#32;be</emphasis>
17485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;written&#32;(&quot;\uxxxx\uxxxx\0&quot;)&#32;for&#32;one&#32;code&#32;point</emphasis>
17486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9c9b7ca63a66e59e5e7ffe8a2acf5c8f">string_buffer</link>.size()&#32;-&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>&#32;&lt;&#32;13)
17487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9c9b7ca63a66e59e5e7ffe8a2acf5c8f">string_buffer</link>.data(),&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>);
17489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>&#32;=&#32;0;
17490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17491 
17492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9ae3daaea1941fd02d4c3c1b0f5fbe68">bytes_after_last_accept</link>&#32;=&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>;
17493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17494 
17495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a814f27bba20f0e109d0dbcaa4a399415">undumped_chars</link>&#32;=&#32;0;
17496 
17497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;continue&#32;processing&#32;the&#32;string</emphasis>
17498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a39b0975f219b542d7ca633652e925b4c">state</link>&#32;=&#32;UTF8_ACCEPT;
17499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
17500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17501 
17502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
17503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(<emphasis role="keyword">false</emphasis>);&#32;<emphasis role="comment">//&#32;NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)&#32;LCOV_EXCL_LINE</emphasis>
17504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
17506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17507 
17508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;&#32;<emphasis role="comment">//&#32;decode&#32;found&#32;yet&#32;incomplete&#32;multi-byte&#32;code&#32;point</emphasis>
17509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_classnlohmann_1_1detail_1_1serializer_1ab4c340f2a5230f766a833366603a0049">ensure_ascii</link>)
17511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;code&#32;point&#32;will&#32;not&#32;be&#32;escaped&#32;-&#32;copy&#32;byte&#32;to&#32;buffer</emphasis>
17513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9c9b7ca63a66e59e5e7ffe8a2acf5c8f">string_buffer</link>[<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>++]&#32;=&#32;s[i];
17514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++<link linkend="_classnlohmann_1_1detail_1_1serializer_1a814f27bba20f0e109d0dbcaa4a399415">undumped_chars</link>;
17516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
17517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17520 
17521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&#32;finished&#32;processing&#32;the&#32;string</emphasis>
17522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0">JSON_HEDLEY_LIKELY</link>(<link linkend="_classnlohmann_1_1detail_1_1serializer_1a39b0975f219b542d7ca633652e925b4c">state</link>&#32;==&#32;UTF8_ACCEPT))
17523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;write&#32;buffer</emphasis>
17525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>&#32;&gt;&#32;0)
17526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9c9b7ca63a66e59e5e7ffe8a2acf5c8f">string_buffer</link>.data(),&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link>);
17528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
17531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&#32;finish&#32;reading,&#32;but&#32;do&#32;not&#32;accept:&#32;string&#32;was&#32;incomplete</emphasis>
17533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="_classnlohmann_1_1detail_1_1serializer_1a09d5a046fb0f7cb61977d6e5fbe8b3a1">error_handler</link>)
17534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa2133fd717402a7966ee88d06f9e0b792">error_handler_t::strict</link>:
17536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(316,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="stringliteral">&quot;incomplete&#32;UTF-8&#32;string;&#32;last&#32;byte:&#32;0x&quot;</emphasis>,&#32;hex_bytes(<emphasis role="keyword">static_cast&lt;</emphasis>std::uint8_t<emphasis role="keyword">&gt;</emphasis>(s.back()&#32;|&#32;0))),&#32;<emphasis role="keyword">nullptr</emphasis>));
17538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17539 
17540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa567bc1d268f135496de3d5b946b691f3">error_handler_t::ignore</link>:
17541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;write&#32;all&#32;accepted&#32;bytes</emphasis>
17543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9c9b7ca63a66e59e5e7ffe8a2acf5c8f">string_buffer</link>.data(),&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9ae3daaea1941fd02d4c3c1b0f5fbe68">bytes_after_last_accept</link>);
17544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
17545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17546 
17547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa9dde360102c103867bd2f45872f1129c">error_handler_t::replace</link>:
17548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;write&#32;all&#32;accepted&#32;bytes</emphasis>
17550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9c9b7ca63a66e59e5e7ffe8a2acf5c8f">string_buffer</link>.data(),&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9ae3daaea1941fd02d4c3c1b0f5fbe68">bytes_after_last_accept</link>);
17551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;add&#32;a&#32;replacement&#32;character</emphasis>
17552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classnlohmann_1_1detail_1_1serializer_1ab4c340f2a5230f766a833366603a0049">ensure_ascii</link>)
17553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<emphasis role="stringliteral">&quot;\\ufffd&quot;</emphasis>,&#32;6);
17555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
17557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<emphasis role="stringliteral">&quot;\xEF\xBF\xBD&quot;</emphasis>,&#32;3);
17559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
17561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17562 
17563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
17564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(<emphasis role="keyword">false</emphasis>);&#32;<emphasis role="comment">//&#32;NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)&#32;LCOV_EXCL_LINE</emphasis>
17565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17567 &#32;&#32;&#32;&#32;}
17568 
17569 &#32;&#32;<emphasis role="keyword">private</emphasis>:
17578 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;count_digits(number_unsigned_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
17579 &#32;&#32;&#32;&#32;{
17580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;n_digits&#32;=&#32;1;
17581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;)
17582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;10)
17584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;n_digits;
17586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;100)
17588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;n_digits&#32;+&#32;1;
17590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;1000)
17592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;n_digits&#32;+&#32;2;
17594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;10000)
17596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;n_digits&#32;+&#32;3;
17598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;/&#32;10000u;
17600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n_digits&#32;+=&#32;4;
17601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17602 &#32;&#32;&#32;&#32;}
17603 
17609 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;hex_bytes(std::uint8_t&#32;<emphasis role="keywordtype">byte</emphasis>)
17610 &#32;&#32;&#32;&#32;{
17611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;<emphasis role="stringliteral">&quot;FF&quot;</emphasis>;
17612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;nibble_to_hex&#32;=&#32;<emphasis role="stringliteral">&quot;0123456789ABCDEF&quot;</emphasis>;
17613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>[0]&#32;=&#32;nibble_to_hex[<emphasis role="keywordtype">byte</emphasis>&#32;/&#32;16];
17614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>[1]&#32;=&#32;nibble_to_hex[<emphasis role="keywordtype">byte</emphasis>&#32;%&#32;16];
17615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
17616 &#32;&#32;&#32;&#32;}
17617 
17618 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;templates&#32;to&#32;avoid&#32;warnings&#32;about&#32;useless&#32;casts</emphasis>
17619 &#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;NumberType,&#32;enable_if_t&lt;std::is_signed&lt;NumberType&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&gt;
17620 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_negative_number(NumberType&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
17621 &#32;&#32;&#32;&#32;{
17622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;0;
17623 &#32;&#32;&#32;&#32;}
17624 
17625 &#32;&#32;&#32;&#32;template&#32;&lt;&#32;typename&#32;NumberType,&#32;enable_if_t&#32;&lt;std::is_unsigned&lt;NumberType&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;&#32;=&#32;0&#32;&gt;
17626 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_negative_number(NumberType&#32;<emphasis role="comment">/*unused*/</emphasis>)
17627 &#32;&#32;&#32;&#32;{
17628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
17629 &#32;&#32;&#32;&#32;}
17630 
17640 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;NumberType,&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&#32;&lt;
17641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_integral&lt;NumberType&gt;::value&#32;||
17642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_same&lt;NumberType,&#32;number_unsigned_t&gt;::value&#32;||
17643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_same&lt;NumberType,&#32;number_integer_t&gt;::value&#32;||
17644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_same&lt;NumberType,&#32;binary_char_t&gt;::value,
17645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;&#32;=&#32;0&#32;&gt;
17646 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;dump_integer(NumberType&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
17647 &#32;&#32;&#32;&#32;{
17648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;std::array&lt;std::array&lt;char,&#32;2&gt;,&#32;100&gt;&#32;digits_to_99
17649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{{<emphasis role="charliteral">&apos;0&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;0&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;1&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;0&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;2&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;0&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;3&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;0&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;4&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;0&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;5&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;0&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;6&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;0&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;7&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;0&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;8&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;0&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>}},
17652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{{<emphasis role="charliteral">&apos;1&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;1&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;1&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;1&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;2&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;1&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;3&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;1&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;4&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;1&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;5&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;1&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;6&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;1&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;7&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;1&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;8&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;1&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>}},
17653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{{<emphasis role="charliteral">&apos;2&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;2&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;1&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;2&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;2&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;2&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;3&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;2&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;4&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;2&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;5&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;2&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;6&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;2&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;7&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;2&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;8&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;2&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>}},
17654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{{<emphasis role="charliteral">&apos;3&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;3&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;1&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;3&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;2&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;3&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;3&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;3&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;4&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;3&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;5&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;3&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;6&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;3&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;7&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;3&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;8&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;3&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>}},
17655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{{<emphasis role="charliteral">&apos;4&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;4&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;1&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;4&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;2&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;4&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;3&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;4&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;4&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;4&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;5&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;4&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;6&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;4&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;7&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;4&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;8&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;4&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>}},
17656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{{<emphasis role="charliteral">&apos;5&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;5&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;1&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;5&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;2&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;5&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;3&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;5&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;4&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;5&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;5&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;5&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;6&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;5&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;7&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;5&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;8&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;5&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>}},
17657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{{<emphasis role="charliteral">&apos;6&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;6&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;1&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;6&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;2&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;6&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;3&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;6&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;4&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;6&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;5&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;6&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;6&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;6&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;7&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;6&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;8&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;6&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>}},
17658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{{<emphasis role="charliteral">&apos;7&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;7&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;1&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;7&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;2&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;7&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;3&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;7&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;4&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;7&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;5&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;7&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;6&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;7&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;7&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;7&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;8&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;7&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>}},
17659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{{<emphasis role="charliteral">&apos;8&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;8&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;1&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;8&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;2&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;8&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;3&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;8&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;4&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;8&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;5&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;8&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;6&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;8&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;7&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;8&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;8&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;8&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>}},
17660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{{<emphasis role="charliteral">&apos;9&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;9&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;1&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;9&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;2&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;9&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;3&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;9&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;4&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;9&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;5&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;9&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;6&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;9&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;7&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;9&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;8&apos;</emphasis>}},&#32;{{<emphasis role="charliteral">&apos;9&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>}},
17661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
17663 
17664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;special&#32;case&#32;for&#32;&quot;0&quot;</emphasis>
17665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;==&#32;0)
17666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_character(<emphasis role="charliteral">&apos;0&apos;</emphasis>);
17668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
17669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17670 
17671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;use&#32;a&#32;pointer&#32;to&#32;fill&#32;the&#32;buffer</emphasis>
17672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;buffer_ptr&#32;=&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a1a9d8b344a6cb47728a3519693ec03d1">number_buffer</link>.begin();&#32;<emphasis role="comment">//&#32;NOLINT(llvm-qualified-auto,readability-qualified-auto,cppcoreguidelines-pro-type-vararg,hicpp-vararg)</emphasis>
17673 
17674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;number_unsigned_t&#32;abs_value;
17675 
17676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;n_chars{};
17677 
17678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is_negative_number(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>))
17679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*buffer_ptr&#32;=&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>;
17681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;abs_value&#32;=&#32;remove_sign(<emphasis role="keyword">static_cast&lt;</emphasis>number_integer_t<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>));
17682 
17683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;account&#32;one&#32;more&#32;byte&#32;for&#32;the&#32;minus&#32;sign</emphasis>
17684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n_chars&#32;=&#32;1&#32;+&#32;count_digits(abs_value);
17685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
17687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;abs_value&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>number_unsigned_t<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>);
17689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n_chars&#32;=&#32;count_digits(abs_value);
17690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17691 
17692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;spare&#32;1&#32;byte&#32;for&#32;&apos;\0&apos;</emphasis>
17693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(n_chars&#32;&lt;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a1a9d8b344a6cb47728a3519693ec03d1">number_buffer</link>.size()&#32;-&#32;1);
17694 
17695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;jump&#32;to&#32;the&#32;end&#32;to&#32;generate&#32;the&#32;string&#32;from&#32;backward,</emphasis>
17696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;so&#32;we&#32;later&#32;avoid&#32;reversing&#32;the&#32;result</emphasis>
17697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer_ptr&#32;+=&#32;n_chars;
17698 
17699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Fast&#32;int2ascii&#32;implementation&#32;inspired&#32;by&#32;&quot;Fastware&quot;&#32;talk&#32;by&#32;Andrei&#32;Alexandrescu</emphasis>
17700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;See:&#32;https://www.youtube.com/watch?v=o4-CwDo2zpg</emphasis>
17701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(abs_value&#32;&gt;=&#32;100)
17702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;digits_index&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis><emphasis role="keyword">&gt;</emphasis>((abs_value&#32;%&#32;100));
17704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;abs_value&#32;/=&#32;100;
17705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*(--buffer_ptr)&#32;=&#32;digits_to_99[digits_index][1];
17706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*(--buffer_ptr)&#32;=&#32;digits_to_99[digits_index][0];
17707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17708 
17709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(abs_value&#32;&gt;=&#32;10)
17710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;digits_index&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis><emphasis role="keyword">&gt;</emphasis>(abs_value);
17712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*(--buffer_ptr)&#32;=&#32;digits_to_99[digits_index][1];
17713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*(--buffer_ptr)&#32;=&#32;digits_to_99[digits_index][0];
17714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
17716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*(--buffer_ptr)&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;+&#32;abs_value);
17718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17719 
17720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<link linkend="_classnlohmann_1_1detail_1_1serializer_1a1a9d8b344a6cb47728a3519693ec03d1">number_buffer</link>.data(),&#32;n_chars);
17721 &#32;&#32;&#32;&#32;}
17722 
17731 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;dump_float(number_float_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
17732 &#32;&#32;&#32;&#32;{
17733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NaN&#32;/&#32;inf</emphasis>
17734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!std::isfinite(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>))
17735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<emphasis role="stringliteral">&quot;null&quot;</emphasis>,&#32;4);
17737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
17738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17739 
17740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;number_float_t&#32;is&#32;an&#32;IEEE-754&#32;single&#32;or&#32;double&#32;precision&#32;number,</emphasis>
17741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;use&#32;the&#32;Grisu2&#32;algorithm&#32;to&#32;produce&#32;short&#32;numbers&#32;which&#32;are</emphasis>
17742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;guaranteed&#32;to&#32;round-trip,&#32;using&#32;strtof&#32;and&#32;strtod,&#32;resp.</emphasis>
17743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
17744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NB:&#32;The&#32;test&#32;below&#32;works&#32;if&#32;&lt;long&#32;double&gt;&#32;==&#32;&lt;double&gt;.</emphasis>
17745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_ieee_single_or_double
17746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;(std::numeric_limits&lt;number_float_t&gt;::is_iec559&#32;&amp;&amp;&#32;std::numeric_limits&lt;number_float_t&gt;::digits&#32;==&#32;24&#32;&amp;&amp;&#32;std::numeric_limits&lt;number_float_t&gt;::max_exponent&#32;==&#32;128)&#32;||
17747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(std::numeric_limits&lt;number_float_t&gt;::is_iec559&#32;&amp;&amp;&#32;std::numeric_limits&lt;number_float_t&gt;::digits&#32;==&#32;53&#32;&amp;&amp;&#32;std::numeric_limits&lt;number_float_t&gt;::max_exponent&#32;==&#32;1024);
17748 
17749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dump_float(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;std::integral_constant&lt;bool,&#32;is_ieee_single_or_double&gt;());
17750 &#32;&#32;&#32;&#32;}
17751 
17752 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;dump_float(number_float_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;std::true_type&#32;<emphasis role="comment">/*is_ieee_single_or_double*/</emphasis>)
17753 &#32;&#32;&#32;&#32;{
17754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>*&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>&#32;=&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a1a9d8b344a6cb47728a3519693ec03d1">number_buffer</link>.data();
17755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>&#32;=&#32;::nlohmann::detail::to_chars(begin,&#32;begin&#32;+&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a1a9d8b344a6cb47728a3519693ec03d1">number_buffer</link>.size(),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>);
17756 
17757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(begin,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>&#32;-&#32;begin));
17758 &#32;&#32;&#32;&#32;}
17759 
17760 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;dump_float(number_float_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;std::false_type&#32;<emphasis role="comment">/*is_ieee_single_or_double*/</emphasis>)
17761 &#32;&#32;&#32;&#32;{
17762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;get&#32;number&#32;of&#32;digits&#32;for&#32;a&#32;float&#32;-&gt;&#32;text&#32;-&gt;&#32;float&#32;round-trip</emphasis>
17763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;d&#32;=&#32;std::numeric_limits&lt;number_float_t&gt;::max_digits10;
17764 
17765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;actual&#32;conversion</emphasis>
17766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg,hicpp-vararg)</emphasis>
17767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ptrdiff_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;=&#32;(std::snprintf)(<link linkend="_classnlohmann_1_1detail_1_1serializer_1a1a9d8b344a6cb47728a3519693ec03d1">number_buffer</link>.data(),&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a1a9d8b344a6cb47728a3519693ec03d1">number_buffer</link>.size(),&#32;<emphasis role="stringliteral">&quot;%.*g&quot;</emphasis>,&#32;d,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>);
17768 
17769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;negative&#32;value&#32;indicates&#32;an&#32;error</emphasis>
17770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;&gt;&#32;0);
17771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;if&#32;buffer&#32;was&#32;large&#32;enough</emphasis>
17772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;&lt;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a1a9d8b344a6cb47728a3519693ec03d1">number_buffer</link>.size());
17773 
17774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;erase&#32;thousands&#32;separator</emphasis>
17775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classnlohmann_1_1detail_1_1serializer_1a78a6ae833bb6cf7f00cb0d51db114b14">thousands_sep</link>&#32;!=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>)
17776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOLINTNEXTLINE(readability-qualified-auto,llvm-qualified-auto):&#32;std::remove&#32;returns&#32;an&#32;iterator,&#32;see&#32;https://github.com/nlohmann/json/issues/3081</emphasis>
17778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>&#32;=&#32;<link linkend="_namespacestd_1a4e25a1e93784cb07fd8a6e9a00be03a7">std::remove</link>(<link linkend="_classnlohmann_1_1detail_1_1serializer_1a1a9d8b344a6cb47728a3519693ec03d1">number_buffer</link>.begin(),&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a1a9d8b344a6cb47728a3519693ec03d1">number_buffer</link>.begin()&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a78a6ae833bb6cf7f00cb0d51db114b14">thousands_sep</link>);
17779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a9042ae744521b1770e868813f939b4b7">std::fill</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>,&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a1a9d8b344a6cb47728a3519693ec03d1">number_buffer</link>.end(),&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>);
17780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>((<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>&#32;-&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a1a9d8b344a6cb47728a3519693ec03d1">number_buffer</link>.begin())&#32;&lt;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>);
17781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;=&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>&#32;-&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a1a9d8b344a6cb47728a3519693ec03d1">number_buffer</link>.begin());
17782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17783 
17784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;convert&#32;decimal&#32;point&#32;to&#32;&apos;.&apos;</emphasis>
17785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classnlohmann_1_1detail_1_1serializer_1a311e5d6f4b31d5be0eb3c0cb20b6965a">decimal_point</link>&#32;!=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>&#32;&amp;&amp;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a311e5d6f4b31d5be0eb3c0cb20b6965a">decimal_point</link>&#32;!=&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>)
17786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOLINTNEXTLINE(readability-qualified-auto,llvm-qualified-auto):&#32;std::find&#32;returns&#32;an&#32;iterator,&#32;see&#32;https://github.com/nlohmann/json/issues/3081</emphasis>
17788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;dec_pos&#32;=&#32;<link linkend="_namespacestd_1ae3e398a3f38b0182e770944d57402701">std::find</link>(<link linkend="_classnlohmann_1_1detail_1_1serializer_1a1a9d8b344a6cb47728a3519693ec03d1">number_buffer</link>.begin(),&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a1a9d8b344a6cb47728a3519693ec03d1">number_buffer</link>.end(),&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a311e5d6f4b31d5be0eb3c0cb20b6965a">decimal_point</link>);
17789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(dec_pos&#32;!=&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a1a9d8b344a6cb47728a3519693ec03d1">number_buffer</link>.end())
17790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*dec_pos&#32;=&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>;
17792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17794 
17795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<link linkend="_classnlohmann_1_1detail_1_1serializer_1a1a9d8b344a6cb47728a3519693ec03d1">number_buffer</link>.data(),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>));
17796 
17797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;determine&#32;if&#32;we&#32;need&#32;to&#32;append&#32;&quot;.0&quot;</emphasis>
17798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;value_is_int_like&#32;=
17799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a9ed705e7dfee41b5d879e6e0450cbc6c">std::none_of</link>(<link linkend="_classnlohmann_1_1detail_1_1serializer_1a1a9d8b344a6cb47728a3519693ec03d1">number_buffer</link>.begin(),&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a1a9d8b344a6cb47728a3519693ec03d1">number_buffer</link>.begin()&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;+&#32;1,
17800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keywordtype">char</emphasis>&#32;c)
17801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;c&#32;==&#32;<emphasis role="stringliteral">&apos;.&apos;</emphasis>&#32;||&#32;c&#32;==&#32;<emphasis role="stringliteral">&apos;e&apos;</emphasis>;
17803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
17804 
17805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(value_is_int_like)
17806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;write_characters(<emphasis role="stringliteral">&quot;.0&quot;</emphasis>,&#32;2);
17808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17809 &#32;&#32;&#32;&#32;}
17810 
17832 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::uint8_t&#32;decode(std::uint8_t&amp;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a39b0975f219b542d7ca633652e925b4c">state</link>,&#32;std::uint32_t&amp;&#32;codep,&#32;<emphasis role="keyword">const</emphasis>&#32;std::uint8_t&#32;<emphasis role="keywordtype">byte</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>
17833 &#32;&#32;&#32;&#32;{
17834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;std::array&lt;std::uint8_t,&#32;400&gt;&#32;utf8d&#32;=
17835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;<emphasis role="comment">//&#32;00..1F</emphasis>
17838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;<emphasis role="comment">//&#32;20..3F</emphasis>
17839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;<emphasis role="comment">//&#32;40..5F</emphasis>
17840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;<emphasis role="comment">//&#32;60..7F</emphasis>
17841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;9,&#32;9,&#32;9,&#32;9,&#32;9,&#32;9,&#32;9,&#32;9,&#32;9,&#32;9,&#32;9,&#32;9,&#32;9,&#32;9,&#32;9,&#32;9,&#32;<emphasis role="comment">//&#32;80..9F</emphasis>
17842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;7,&#32;7,&#32;7,&#32;7,&#32;7,&#32;7,&#32;7,&#32;7,&#32;7,&#32;7,&#32;7,&#32;7,&#32;7,&#32;7,&#32;7,&#32;7,&#32;7,&#32;7,&#32;7,&#32;7,&#32;7,&#32;7,&#32;7,&#32;7,&#32;7,&#32;7,&#32;7,&#32;7,&#32;7,&#32;7,&#32;7,&#32;7,&#32;<emphasis role="comment">//&#32;A0..BF</emphasis>
17843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;8,&#32;8,&#32;2,&#32;2,&#32;2,&#32;2,&#32;2,&#32;2,&#32;2,&#32;2,&#32;2,&#32;2,&#32;2,&#32;2,&#32;2,&#32;2,&#32;2,&#32;2,&#32;2,&#32;2,&#32;2,&#32;2,&#32;2,&#32;2,&#32;2,&#32;2,&#32;2,&#32;2,&#32;2,&#32;2,&#32;2,&#32;2,&#32;<emphasis role="comment">//&#32;C0..DF</emphasis>
17844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xA,&#32;0x3,&#32;0x3,&#32;0x3,&#32;0x3,&#32;0x3,&#32;0x3,&#32;0x3,&#32;0x3,&#32;0x3,&#32;0x3,&#32;0x3,&#32;0x3,&#32;0x4,&#32;0x3,&#32;0x3,&#32;<emphasis role="comment">//&#32;E0..EF</emphasis>
17845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xB,&#32;0x6,&#32;0x6,&#32;0x6,&#32;0x5,&#32;0x8,&#32;0x8,&#32;0x8,&#32;0x8,&#32;0x8,&#32;0x8,&#32;0x8,&#32;0x8,&#32;0x8,&#32;0x8,&#32;0x8,&#32;<emphasis role="comment">//&#32;F0..FF</emphasis>
17846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x0,&#32;0x1,&#32;0x2,&#32;0x3,&#32;0x5,&#32;0x8,&#32;0x7,&#32;0x1,&#32;0x1,&#32;0x1,&#32;0x4,&#32;0x6,&#32;0x1,&#32;0x1,&#32;0x1,&#32;0x1,&#32;<emphasis role="comment">//&#32;s0..s0</emphasis>
17847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;0,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;0,&#32;1,&#32;0,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;<emphasis role="comment">//&#32;s1..s2</emphasis>
17848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1,&#32;2,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;2,&#32;1,&#32;2,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;2,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;<emphasis role="comment">//&#32;s3..s4</emphasis>
17849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1,&#32;2,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;2,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;3,&#32;1,&#32;3,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;<emphasis role="comment">//&#32;s5..s6</emphasis>
17850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1,&#32;3,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;3,&#32;1,&#32;3,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;3,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1&#32;<emphasis role="comment">//&#32;s7..s8</emphasis>
17851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
17853 
17854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(<emphasis role="keywordtype">byte</emphasis>&#32;&lt;&#32;utf8d.size());
17855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::uint8_t&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;utf8d[<link linkend="__classes_2lib_2raylib_2src_2rlgl_8h_1a0c8186d9b9b7880309c27230bbb5e69d">byte</link>];
17856 
17857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;codep&#32;=&#32;(<link linkend="_classnlohmann_1_1detail_1_1serializer_1a39b0975f219b542d7ca633652e925b4c">state</link>&#32;!=&#32;UTF8_ACCEPT)
17858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;(<emphasis role="keywordtype">byte</emphasis>&#32;&amp;&#32;0x3fu)&#32;|&#32;(codep&#32;&lt;&lt;&#32;6u)
17859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;(0xFFu&#32;&gt;&gt;&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>)&#32;&amp;&#32;(<link linkend="__classes_2lib_2raylib_2src_2rlgl_8h_1a0c8186d9b9b7880309c27230bbb5e69d">byte</link>);
17860 
17861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>&#32;=&#32;256u&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="_classnlohmann_1_1detail_1_1serializer_1a39b0975f219b542d7ca633652e925b4c">state</link>)&#32;*&#32;16u&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>);
17862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>&#32;&lt;&#32;400);
17863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a39b0975f219b542d7ca633652e925b4c">state</link>&#32;=&#32;utf8d[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>];
17864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a39b0975f219b542d7ca633652e925b4c">state</link>;
17865 &#32;&#32;&#32;&#32;}
17866 
17867 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
17868 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Overload&#32;to&#32;make&#32;the&#32;compiler&#32;happy&#32;while&#32;it&#32;is&#32;instantiating</emphasis>
17869 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;dump_integer&#32;for&#32;number_unsigned_t.</emphasis>
17870 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Must&#32;never&#32;be&#32;called.</emphasis>
17871 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
17872 &#32;&#32;&#32;&#32;number_unsigned_t&#32;remove_sign(number_unsigned_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
17873 &#32;&#32;&#32;&#32;{
17874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(<emphasis role="keyword">false</emphasis>);&#32;<emphasis role="comment">//&#32;NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)&#32;LCOV_EXCL_LINE</emphasis>
17875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>;&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
17876 &#32;&#32;&#32;&#32;}
17877 
17878 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
17879 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Helper&#32;function&#32;for&#32;dump_integer</emphasis>
17880 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*</emphasis>
17881 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;This&#32;function&#32;takes&#32;a&#32;negative&#32;signed&#32;integer&#32;and&#32;returns&#32;its&#32;absolute</emphasis>
17882 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;value&#32;as&#32;unsigned&#32;integer.&#32;The&#32;plus/minus&#32;shuffling&#32;is&#32;necessary&#32;as&#32;we&#32;can</emphasis>
17883 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;not&#32;directly&#32;remove&#32;the&#32;sign&#32;of&#32;an&#32;arbitrary&#32;signed&#32;integer&#32;as&#32;the</emphasis>
17884 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;absolute&#32;values&#32;of&#32;INT_MIN&#32;and&#32;INT_MAX&#32;are&#32;usually&#32;not&#32;the&#32;same.&#32;See</emphasis>
17885 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;#1708&#32;for&#32;details.</emphasis>
17886 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
17887 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;number_unsigned_t&#32;remove_sign(number_integer_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
17888 &#32;&#32;&#32;&#32;{
17889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;0&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;(std::numeric_limits&lt;number_integer_t&gt;::max)());&#32;<emphasis role="comment">//&#32;NOLINT(misc-redundant-expression)</emphasis>
17890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>number_unsigned_t<emphasis role="keyword">&gt;</emphasis>(-(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;+&#32;1))&#32;+&#32;1;
17891 &#32;&#32;&#32;&#32;}
17892 
17893 &#32;&#32;<emphasis role="keyword">private</emphasis>:
17895 &#32;&#32;&#32;&#32;output_adapter_t&lt;char&gt;&#32;o&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
17896 
17898 &#32;&#32;&#32;&#32;std::array&lt;char,&#32;64&gt;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a1a9d8b344a6cb47728a3519693ec03d1">number_buffer</link>{{}};
17899 
17901 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::lconv*&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a1952945b7652afb59d3903cc8457a589">loc</link>&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
17903 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a78a6ae833bb6cf7f00cb0d51db114b14">thousands_sep</link>&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
17905 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a311e5d6f4b31d5be0eb3c0cb20b6965a">decimal_point</link>&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
17906 
17908 &#32;&#32;&#32;&#32;std::array&lt;char,&#32;512&gt;&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9c9b7ca63a66e59e5e7ffe8a2acf5c8f">string_buffer</link>{{}};
17909 
17911 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a9a55e6b028d09676fe35aefa0c72ea5b">indent_char</link>;
17913 &#32;&#32;&#32;&#32;string_t&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1ae9268a10d88a5526e32735a55a132fc6">indent_string</link>;
17914 
17916 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967df">error_handler_t</link>&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer_1a09d5a046fb0f7cb61977d6e5fbe8b3a1">error_handler</link>;
17917 };
17918 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
17919 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann</emphasis>
17920 
17921 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/value_t.hpp&gt;</emphasis>
17922 
17923 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/json_fwd.hpp&gt;</emphasis>
17924 
17925 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/ordered_map.hpp&gt;</emphasis>
17926 
17927 
17928 <emphasis role="preprocessor">#include&#32;&lt;functional&gt;</emphasis>&#32;<emphasis role="comment">//&#32;equal_to,&#32;less</emphasis>
17929 <emphasis role="preprocessor">#include&#32;&lt;initializer_list&gt;</emphasis>&#32;<emphasis role="comment">//&#32;initializer_list</emphasis>
17930 <emphasis role="preprocessor">#include&#32;&lt;iterator&gt;</emphasis>&#32;<emphasis role="comment">//&#32;input_iterator_tag,&#32;iterator_traits</emphasis>
17931 <emphasis role="preprocessor">#include&#32;&lt;memory&gt;</emphasis>&#32;<emphasis role="comment">//&#32;allocator</emphasis>
17932 <emphasis role="preprocessor">#include&#32;&lt;stdexcept&gt;</emphasis>&#32;<emphasis role="comment">//&#32;for&#32;out_of_range</emphasis>
17933 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>&#32;<emphasis role="comment">//&#32;enable_if,&#32;is_convertible</emphasis>
17934 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>&#32;<emphasis role="comment">//&#32;pair</emphasis>
17935 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>&#32;<emphasis role="comment">//&#32;vector</emphasis>
17936 
17937 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/macro_scope.hpp&gt;</emphasis>
17938 
17939 
17940 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann">nlohmann</link>
17941 {
17942 
17945 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;Key,&#32;<emphasis role="keyword">class</emphasis>&#32;T,&#32;<emphasis role="keyword">class</emphasis>&#32;IgnoredLess&#32;=&#32;std::less&lt;Key&gt;,
17946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class</emphasis>&#32;Allocator&#32;=&#32;std::allocator&lt;std::pair&lt;const&#32;Key,&#32;T&gt;&gt;&gt;
17947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1ordered__map">ordered_map</link>&#32;:&#32;std::vector&lt;std::pair&lt;const&#32;Key,&#32;T&gt;,&#32;Allocator&gt;
17948 {
17949 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1ordered__map_1a57095c6ed403f02e1bc2c240a13c9ed8">key_type</link>&#32;=&#32;Key;
17950 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1ordered__map_1a1c9c1509ee714a9814b45a8030c84ec7">mapped_type</link>&#32;=&#32;T;
17951 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1ordered__map_1a0cabe346c38a4f1ab1b8a396fbd2bbe2">Container</link>&#32;=&#32;std::vector&lt;std::pair&lt;const&#32;Key,&#32;T&gt;,&#32;Allocator&gt;;
17952 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1ordered__map_1aef8bc179883da4194bc6b657b87eeb07">iterator</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;Container::iterator;
17953 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1ordered__map_1a8276ac13f6e6ad27594a7e287a5ea071">const_iterator</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;Container::const_iterator;
17954 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1ordered__map_1ab5044ef3fc07cf7aee67241c4d10ce9d">size_type</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;Container::size_type;
17955 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1ordered__map_1abe9b97ae84d9c40616913b50b2778150">value_type</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;Container::value_type;
17956 <emphasis role="preprocessor">#ifdef&#32;JSON_HAS_CPP_14</emphasis>
17957 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1ordered__map_1a9fd67c08c4ea14608f2b94f31576288e">key_compare</link>&#32;=&#32;std::equal_to&lt;&gt;;
17958 <emphasis role="preprocessor">#else</emphasis>
17959 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1ordered__map_1a9fd67c08c4ea14608f2b94f31576288e">key_compare</link>&#32;=&#32;std::equal_to&lt;Key&gt;;
17960 <emphasis role="preprocessor">#endif</emphasis>
17961 
17962 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Explicit&#32;constructors&#32;instead&#32;of&#32;`using&#32;Container::Container`</emphasis>
17963 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;otherwise&#32;older&#32;compilers&#32;choke&#32;on&#32;it&#32;(GCC&#32;&lt;=&#32;5.5,&#32;xcode&#32;&lt;=&#32;9.4)</emphasis>
17964 &#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1ordered__map_1adb0157d15173e8880842c0a66afc8b76">ordered_map</link>()&#32;noexcept(noexcept(<link linkend="_structnlohmann_1_1ordered__map_1a0cabe346c38a4f1ab1b8a396fbd2bbe2">Container</link>()))&#32;:&#32;<link linkend="_structnlohmann_1_1ordered__map_1a0cabe346c38a4f1ab1b8a396fbd2bbe2">Container</link>{}&#32;{}
17965 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_structnlohmann_1_1ordered__map_1aa94368baa7529eb45ad018156462a039">ordered_map</link>(<emphasis role="keyword">const</emphasis>&#32;Allocator&amp;&#32;alloc)&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(<link linkend="_structnlohmann_1_1ordered__map_1a0cabe346c38a4f1ab1b8a396fbd2bbe2">Container</link>(alloc)))&#32;:&#32;<link linkend="_structnlohmann_1_1ordered__map_1a0cabe346c38a4f1ab1b8a396fbd2bbe2">Container</link>{alloc}&#32;{}
17966 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;It&gt;
17967 &#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1ordered__map_1a9d25efb51325cc1be027b8ea00c1f8b8">ordered_map</link>(It&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;It&#32;last,&#32;<emphasis role="keyword">const</emphasis>&#32;Allocator&amp;&#32;alloc&#32;=&#32;Allocator())
17968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_structnlohmann_1_1ordered__map_1a0cabe346c38a4f1ab1b8a396fbd2bbe2">Container</link>{<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;last,&#32;alloc}&#32;{}
17969 &#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1ordered__map_1adafcb68bb38cdfee32e1e12423712150">ordered_map</link>(std::initializer_list&lt;value_type&gt;&#32;init,&#32;<emphasis role="keyword">const</emphasis>&#32;Allocator&amp;&#32;alloc&#32;=&#32;Allocator()&#32;)
17970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_structnlohmann_1_1ordered__map_1a0cabe346c38a4f1ab1b8a396fbd2bbe2">Container</link>{init,&#32;alloc}&#32;{}
17971 
17972 &#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;bool&gt;&#32;<link linkend="_structnlohmann_1_1ordered__map_1af0bcef59054b40d52707bc1bf984e482">emplace</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structnlohmann_1_1ordered__map_1a57095c6ed403f02e1bc2c240a13c9ed8">key_type</link>&amp;&#32;key,&#32;T&amp;&amp;&#32;t)
17973 &#32;&#32;&#32;&#32;{
17974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;this-&gt;begin();&#32;it&#32;!=&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();&#32;++it)
17975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_compare(it-&gt;first,&#32;key))
17977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{it,&#32;<emphasis role="keyword">false</emphasis>};
17979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Container::emplace_back(key,&#32;t);
17982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{--this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(),&#32;<emphasis role="keyword">true</emphasis>};
17983 &#32;&#32;&#32;&#32;}
17984 
17985 &#32;&#32;&#32;&#32;T&amp;&#32;<link linkend="_structnlohmann_1_1ordered__map_1a6b0fab5f824a32ddddfd423821e597c6">operator[]</link>(<emphasis role="keyword">const</emphasis>&#32;Key&amp;&#32;key)
17986 &#32;&#32;&#32;&#32;{
17987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structnlohmann_1_1ordered__map_1af0bcef59054b40d52707bc1bf984e482">emplace</link>(key,&#32;T{}).<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>-&gt;second;
17988 &#32;&#32;&#32;&#32;}
17989 
17990 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;<link linkend="_structnlohmann_1_1ordered__map_1af552370550cd51d72663c2ae72042f9a">operator[]</link>(<emphasis role="keyword">const</emphasis>&#32;Key&amp;&#32;key)<emphasis role="keyword">&#32;const</emphasis>
17991 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
17992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structnlohmann_1_1ordered__map_1a016027563c9a115a546bd046027c1a8e">at</link>(key);
17993 &#32;&#32;&#32;&#32;}
17994 
17995 &#32;&#32;&#32;&#32;T&amp;&#32;<link linkend="_structnlohmann_1_1ordered__map_1a016027563c9a115a546bd046027c1a8e">at</link>(<emphasis role="keyword">const</emphasis>&#32;Key&amp;&#32;key)
17996 &#32;&#32;&#32;&#32;{
17997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;this-&gt;begin();&#32;it&#32;!=&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();&#32;++it)
17998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_compare(it-&gt;first,&#32;key))
18000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;it-&gt;second;
18002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18004 
18005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(std::out_of_range(<emphasis role="stringliteral">&quot;key&#32;not&#32;found&quot;</emphasis>));
18006 &#32;&#32;&#32;&#32;}
18007 
18008 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;<link linkend="_structnlohmann_1_1ordered__map_1a20d0c541bd54ea70648bb5efd5a4aaa9">at</link>(<emphasis role="keyword">const</emphasis>&#32;Key&amp;&#32;key)<emphasis role="keyword">&#32;const</emphasis>
18009 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
18010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;this-&gt;begin();&#32;it&#32;!=&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();&#32;++it)
18011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_compare(it-&gt;first,&#32;key))
18013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;it-&gt;second;
18015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18017 
18018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(std::out_of_range(<emphasis role="stringliteral">&quot;key&#32;not&#32;found&quot;</emphasis>));
18019 &#32;&#32;&#32;&#32;}
18020 
18021 &#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1ordered__map_1ab5044ef3fc07cf7aee67241c4d10ce9d">size_type</link>&#32;<link linkend="_structnlohmann_1_1ordered__map_1a583c8976bbf0c137ff8e2439878f3058">erase</link>(<emphasis role="keyword">const</emphasis>&#32;Key&amp;&#32;key)
18022 &#32;&#32;&#32;&#32;{
18023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;this-&gt;begin();&#32;it&#32;!=&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();&#32;++it)
18024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_compare(it-&gt;first,&#32;key))
18026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Since&#32;we&#32;cannot&#32;move&#32;const&#32;Keys,&#32;re-construct&#32;them&#32;in&#32;place</emphasis>
18028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;next&#32;=&#32;it;&#32;++next&#32;!=&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();&#32;++it)
18029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;it-&gt;~value_type();&#32;<emphasis role="comment">//&#32;Destroy&#32;but&#32;keep&#32;allocation</emphasis>
18031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;(&amp;*it)&#32;<link linkend="_structnlohmann_1_1ordered__map_1abe9b97ae84d9c40616913b50b2778150">value_type</link>{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(*next)};
18032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Container::pop_back();
18034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
18035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
18038 &#32;&#32;&#32;&#32;}
18039 
18040 &#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1ordered__map_1aef8bc179883da4194bc6b657b87eeb07">iterator</link>&#32;<link linkend="_structnlohmann_1_1ordered__map_1a26053569acb0a858d87482b2fa3d5dc5">erase</link>(<link linkend="_structnlohmann_1_1ordered__map_1aef8bc179883da4194bc6b657b87eeb07">iterator</link>&#32;pos)
18041 &#32;&#32;&#32;&#32;{
18042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structnlohmann_1_1ordered__map_1a583c8976bbf0c137ff8e2439878f3058">erase</link>(pos,&#32;std::next(pos));
18043 &#32;&#32;&#32;&#32;}
18044 
18045 &#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1ordered__map_1aef8bc179883da4194bc6b657b87eeb07">iterator</link>&#32;<link linkend="_structnlohmann_1_1ordered__map_1a6f766b4df72c42ac14d55603c85f9e36">erase</link>(<link linkend="_structnlohmann_1_1ordered__map_1aef8bc179883da4194bc6b657b87eeb07">iterator</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;<link linkend="_structnlohmann_1_1ordered__map_1aef8bc179883da4194bc6b657b87eeb07">iterator</link>&#32;last)
18046 &#32;&#32;&#32;&#32;{
18047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;elements_affected&#32;=&#32;std::distance(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;last);
18048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ae60229696c2ec17c9e00af4899bf738e">offset</link>&#32;=&#32;std::distance(Container::begin(),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>);
18049 
18050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;is&#32;the&#32;start&#32;situation.&#32;We&#32;need&#32;to&#32;delete&#32;elements_affected</emphasis>
18051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;elements&#32;(3&#32;in&#32;this&#32;example:&#32;e,&#32;f,&#32;g),&#32;and&#32;need&#32;to&#32;return&#32;an</emphasis>
18052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;iterator&#32;past&#32;the&#32;last&#32;deleted&#32;element&#32;(h&#32;in&#32;this&#32;example).</emphasis>
18053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note&#32;that&#32;offset&#32;is&#32;the&#32;distance&#32;from&#32;the&#32;start&#32;of&#32;the&#32;vector</emphasis>
18054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;to&#32;first.&#32;We&#32;will&#32;need&#32;this&#32;later.</emphasis>
18055 
18056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[&#32;a,&#32;b,&#32;c,&#32;d,&#32;e,&#32;f,&#32;g,&#32;h,&#32;i,&#32;j&#32;]</emphasis>
18057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;^&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;^</emphasis>
18058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;first&#32;&#32;&#32;&#32;last</emphasis>
18059 
18060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Since&#32;we&#32;cannot&#32;move&#32;const&#32;Keys,&#32;we&#32;re-construct&#32;them&#32;in&#32;place.</emphasis>
18061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;start&#32;at&#32;first&#32;and&#32;re-construct&#32;(viz.&#32;copy)&#32;the&#32;elements&#32;from</emphasis>
18062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;back&#32;of&#32;the&#32;vector.&#32;Example&#32;for&#32;first&#32;iteration:</emphasis>
18063 
18064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,--------.</emphasis>
18065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;destroy&#32;e&#32;and&#32;re-construct&#32;with&#32;h</emphasis>
18066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[&#32;a,&#32;b,&#32;c,&#32;d,&#32;e,&#32;f,&#32;g,&#32;h,&#32;i,&#32;j&#32;]</emphasis>
18067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;^&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;^</emphasis>
18068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;it&#32;&#32;&#32;&#32;&#32;&#32;&#32;it&#32;+&#32;elements_affected</emphasis>
18069 
18070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>;&#32;std::next(it,&#32;elements_affected)&#32;!=&#32;Container::end();&#32;++it)
18071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;it-&gt;~value_type();&#32;<emphasis role="comment">//&#32;destroy&#32;but&#32;keep&#32;allocation</emphasis>
18073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;(&amp;*it)&#32;<link linkend="_structnlohmann_1_1ordered__map_1abe9b97ae84d9c40616913b50b2778150">value_type</link>{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(*std::next(it,&#32;elements_affected))};&#32;<emphasis role="comment">//&#32;&quot;move&quot;&#32;next&#32;element&#32;to&#32;it</emphasis>
18074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18075 
18076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[&#32;a,&#32;b,&#32;c,&#32;d,&#32;h,&#32;i,&#32;j,&#32;h,&#32;i,&#32;j&#32;]</emphasis>
18077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;^&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;^</emphasis>
18078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;first&#32;&#32;&#32;&#32;last</emphasis>
18079 
18080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;remove&#32;the&#32;unneeded&#32;elements&#32;at&#32;the&#32;end&#32;of&#32;the&#32;vector</emphasis>
18081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Container::resize(this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;-&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_structnlohmann_1_1ordered__map_1ab5044ef3fc07cf7aee67241c4d10ce9d">size_type</link><emphasis role="keyword">&gt;</emphasis>(elements_affected));
18082 
18083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[&#32;a,&#32;b,&#32;c,&#32;d,&#32;h,&#32;i,&#32;j&#32;]</emphasis>
18084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;^&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;^</emphasis>
18085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;first&#32;&#32;&#32;&#32;last</emphasis>
18086 
18087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;first&#32;is&#32;now&#32;pointing&#32;past&#32;the&#32;last&#32;deleted&#32;element,&#32;but&#32;we&#32;cannot</emphasis>
18088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;use&#32;this&#32;iterator,&#32;because&#32;it&#32;may&#32;have&#32;been&#32;invalidated&#32;by&#32;the</emphasis>
18089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;resize&#32;call.&#32;Instead,&#32;we&#32;can&#32;return&#32;begin()&#32;+&#32;offset.</emphasis>
18090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Container::begin()&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ae60229696c2ec17c9e00af4899bf738e">offset</link>;
18091 &#32;&#32;&#32;&#32;}
18092 
18093 &#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1ordered__map_1ab5044ef3fc07cf7aee67241c4d10ce9d">size_type</link>&#32;<link linkend="_structnlohmann_1_1ordered__map_1aee2c188dcc802d6b28910f707a5e637b">count</link>(<emphasis role="keyword">const</emphasis>&#32;Key&amp;&#32;key)<emphasis role="keyword">&#32;const</emphasis>
18094 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
18095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;this-&gt;begin();&#32;it&#32;!=&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();&#32;++it)
18096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_compare(it-&gt;first,&#32;key))
18098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
18100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
18103 &#32;&#32;&#32;&#32;}
18104 
18105 &#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1ordered__map_1aef8bc179883da4194bc6b657b87eeb07">iterator</link>&#32;<link linkend="_structnlohmann_1_1ordered__map_1a2486527ac56e07d58946ae9a93a46bc8">find</link>(<emphasis role="keyword">const</emphasis>&#32;Key&amp;&#32;key)
18106 &#32;&#32;&#32;&#32;{
18107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;this-&gt;begin();&#32;it&#32;!=&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();&#32;++it)
18108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_compare(it-&gt;first,&#32;key))
18110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;it;
18112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Container::end();
18115 &#32;&#32;&#32;&#32;}
18116 
18117 &#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1ordered__map_1a8276ac13f6e6ad27594a7e287a5ea071">const_iterator</link>&#32;<link linkend="_structnlohmann_1_1ordered__map_1a41e6e34fa8a90b96cbe5c71fec10d2ee">find</link>(<emphasis role="keyword">const</emphasis>&#32;Key&amp;&#32;key)<emphasis role="keyword">&#32;const</emphasis>
18118 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
18119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;this-&gt;begin();&#32;it&#32;!=&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();&#32;++it)
18120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_compare(it-&gt;first,&#32;key))
18122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;it;
18124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Container::end();
18127 &#32;&#32;&#32;&#32;}
18128 
18129 &#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;bool&gt;&#32;<link linkend="_structnlohmann_1_1ordered__map_1a2dafd3fdc7dbd3233bb8c85824ee7cb0">insert</link>(&#32;<link linkend="_structnlohmann_1_1ordered__map_1abe9b97ae84d9c40616913b50b2778150">value_type</link>&amp;&amp;&#32;<link linkend="_classvalue">value</link>&#32;)
18130 &#32;&#32;&#32;&#32;{
18131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structnlohmann_1_1ordered__map_1af0bcef59054b40d52707bc1bf984e482">emplace</link>(<link linkend="_classvalue">value</link>.first,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="_classvalue">value</link>.second));
18132 &#32;&#32;&#32;&#32;}
18133 
18134 &#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;bool&gt;&#32;<link linkend="_structnlohmann_1_1ordered__map_1aad604df2c242c3cf28f595e692aed753">insert</link>(&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structnlohmann_1_1ordered__map_1abe9b97ae84d9c40616913b50b2778150">value_type</link>&amp;&#32;<link linkend="_classvalue">value</link>&#32;)
18135 &#32;&#32;&#32;&#32;{
18136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;this-&gt;begin();&#32;it&#32;!=&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();&#32;++it)
18137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_compare(it-&gt;first,&#32;<link linkend="_classvalue">value</link>.first))
18139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{it,&#32;<emphasis role="keyword">false</emphasis>};
18141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Container::push_back(<link linkend="_classvalue">value</link>);
18144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{--this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(),&#32;<emphasis role="keyword">true</emphasis>};
18145 &#32;&#32;&#32;&#32;}
18146 
18147 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;InputIt&gt;
18148 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnlohmann_1_1ordered__map_1a89cc338e8466e74baaa138664c79ee98">require_input_iter</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;std::is_convertible&lt;typename&#32;std::iterator_traits&lt;InputIt&gt;::iterator_category,
18149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::input_iterator_tag&gt;<link linkend="_classvalue">::value</link>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
18150 
18151 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;InputIt,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;require_input_iter&lt;InputIt&gt;&gt;
18152 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structnlohmann_1_1ordered__map_1a2c8509f72bc33307661f1a0ed5763f9e">insert</link>(InputIt&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;InputIt&#32;last)
18153 &#32;&#32;&#32;&#32;{
18154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>;&#32;it&#32;!=&#32;last;&#32;++it)
18155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1ordered__map_1a2dafd3fdc7dbd3233bb8c85824ee7cb0">insert</link>(*it);
18157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18158 &#32;&#32;&#32;&#32;}
18159 
18160 <emphasis role="keyword">private</emphasis>:
18161 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a9daee0ea9922680180cf794c47fa0672">JSON_NO_UNIQUE_ADDRESS</link>&#32;<link linkend="_structnlohmann_1_1ordered__map_1a9fd67c08c4ea14608f2b94f31576288e">key_compare</link>&#32;m_compare&#32;=&#32;<link linkend="_structnlohmann_1_1ordered__map_1a9fd67c08c4ea14608f2b94f31576288e">key_compare</link>();
18162 };
18163 
18164 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann</emphasis>
18165 
18166 
18167 <emphasis role="preprocessor">#if&#32;defined(JSON_HAS_CPP_17)</emphasis>
18168 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;any&gt;</emphasis>
18169 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;string_view&gt;</emphasis>
18170 <emphasis role="preprocessor">#endif</emphasis>
18171 
18177 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacenlohmann">nlohmann</link>
18178 {
18179 
18198 <link linkend="_json_8hpp_1a0643bd74c2dc6f0e4e420b8190ea8f0f">NLOHMANN_BASIC_JSON_TPL_DECLARATION</link>
18199 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<emphasis role="comment">//&#32;NOLINT(cppcoreguidelines-special-member-functions,hicpp-special-member-functions)</emphasis>
18200 {
18201 &#32;&#32;<emphasis role="keyword">private</emphasis>:
18202 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;detail::value_t&gt;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnlohmann_1_1detail_1_1external__constructor">detail::external_constructor</link>;
18203 
18204 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&gt;
18205 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;class&#32;::nlohmann::json_pointer;
18206 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;can&#32;be&#32;restored&#32;when&#32;json_pointer&#32;backwards&#32;compatibility&#32;is&#32;removed</emphasis>
18207 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;friend&#32;::nlohmann::json_pointer&lt;StringType&gt;;</emphasis>
18208 
18209 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;InputType&gt;
18210 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;class&#32;::nlohmann::detail::parser;
18211 &#32;&#32;&#32;&#32;friend&#32;::nlohmann::detail::serializer&lt;basic_json&gt;;
18212 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
18213 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;class&#32;::nlohmann::detail::iter_impl;
18214 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;CharType&gt;
18215 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;class&#32;::nlohmann::detail::binary_writer;
18216 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;InputType,&#32;<emphasis role="keyword">typename</emphasis>&#32;SAX&gt;
18217 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;class&#32;::nlohmann::detail::binary_reader;
18218 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
18219 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;class&#32;::nlohmann::detail::json_sax_dom_parser;
18220 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
18221 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;class&#32;::nlohmann::detail::json_sax_dom_callback_parser;
18222 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;class&#32;::nlohmann::detail::exception;
18223 
18225 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>basic_json_t&#32;=&#32;<link linkend="_json_8hpp_1a80b7254e63f199a1f656f07ae551f632">NLOHMANN_BASIC_JSON_TPL</link>;
18226 
18227 &#32;&#32;<link linkend="_json_8hpp_1a2cf645f34610e7f7d6e09ab88a2ab917">JSON_PRIVATE_UNLESS_TESTED</link>:
18228 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;convenience&#32;aliases&#32;for&#32;types&#32;residing&#32;in&#32;namespace&#32;detail;</emphasis>
18229 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>lexer&#32;=&#32;<link linkend="_classnlohmann_1_1detail_1_1lexer__base">::nlohmann::detail::lexer_base&lt;basic_json&gt;</link>;
18230 
18231 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;InputAdapterType&gt;
18232 &#32;&#32;&#32;&#32;static&#32;::nlohmann::detail::parser&lt;basic_json,&#32;InputAdapterType&gt;&#32;<link linkend="_classnlohmann_1_1basic__json_1ac8f3125911eb018ef4ab00d879487baf">parser</link>(
18233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;InputAdapterType&#32;adapter,
18234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;detail::parser_callback_t&lt;basic_json&gt;cb&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>,
18235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;allow_exceptions&#32;=&#32;<emphasis role="keyword">true</emphasis>,
18236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ignore_comments&#32;=&#32;<emphasis role="keyword">false</emphasis>
18237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)
18238 &#32;&#32;&#32;&#32;{
18239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;::nlohmann::detail::parser&lt;basic_json,&#32;InputAdapterType&gt;(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(adapter),
18240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(cb),&#32;allow_exceptions,&#32;ignore_comments);
18241 &#32;&#32;&#32;&#32;}
18242 
18243 &#32;&#32;<emphasis role="keyword">private</emphasis>:
18244 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>primitive_iterator_t&#32;=&#32;::nlohmann::detail::primitive_iterator_t;
18245 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
18246 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>internal_iterator&#32;=&#32;<link linkend="_structnlohmann_1_1detail_1_1internal__iterator">::nlohmann::detail::internal_iterator&lt;BasicJsonType&gt;</link>;
18247 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
18248 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>iter_impl&#32;=&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">::nlohmann::detail::iter_impl&lt;BasicJsonType&gt;</link>;
18249 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Iterator&gt;
18250 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>iteration_proxy&#32;=&#32;::nlohmann::detail::iteration_proxy&lt;Iterator&gt;;
18251 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Base&gt;&#32;<emphasis role="keyword">using&#32;</emphasis>json_reverse_iterator&#32;=&#32;<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator">::nlohmann::detail::json_reverse_iterator&lt;Base&gt;</link>;
18252 
18253 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;CharType&gt;
18254 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>output_adapter_t&#32;=&#32;::nlohmann::detail::output_adapter_t&lt;CharType&gt;;
18255 
18256 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;InputType&gt;
18257 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>binary_reader&#32;=&#32;<link linkend="_classnlohmann_1_1detail_1_1binary__reader">::nlohmann::detail::binary_reader&lt;basic_json, InputType&gt;</link>;
18258 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;CharType&gt;&#32;<emphasis role="keyword">using&#32;</emphasis>binary_writer&#32;=&#32;::nlohmann::detail::binary_writer&lt;basic_json,&#32;CharType&gt;;
18259 
18260 &#32;&#32;<link linkend="_json_8hpp_1a2cf645f34610e7f7d6e09ab88a2ab917">JSON_PRIVATE_UNLESS_TESTED</link>:
18261 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>serializer&#32;=&#32;<link linkend="_classnlohmann_1_1detail_1_1serializer">::nlohmann::detail::serializer&lt;basic_json&gt;</link>;
18262 
18263 &#32;&#32;<emphasis role="keyword">public</emphasis>:
18264 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link>&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">detail::value_t</link>;
18266 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&#32;=&#32;<link linkend="_classnlohmann_1_1json__pointer">::nlohmann::json_pointer&lt;StringType&gt;</link>;
18267 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;SFINAE&gt;
18268 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1basic__json_1ad6ebc5da7ced975bb184133750e7d49f">json_serializer</link>&#32;=&#32;JSONSerializer&lt;T,&#32;SFINAE&gt;;
18270 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967df">error_handler_t</link>&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967df">detail::error_handler_t</link>;
18272 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9ac">cbor_tag_handler_t</link>&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9ac">detail::cbor_tag_handler_t</link>;
18274 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1basic__json_1ac569f292a070dfd2f6b69c16e746095a">initializer_list_t</link>&#32;=&#32;std::initializer_list&lt;detail::json_ref&lt;basic_json&gt;&gt;;
18275 
18276 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>input_format_t&#32;=&#32;detail::input_format_t;
18278 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1basic__json_1a164b1094a1a9feb54e400d8510bb0b12">json_sax_t</link>&#32;=&#32;json_sax&lt;basic_json&gt;;
18279 
18281 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;exceptions&#32;//</emphasis>
18283 
18287 
18288 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1exception">exception</link>&#32;=&#32;<link linkend="_classnlohmann_1_1detail_1_1exception">detail::exception</link>;
18289 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1parse__error">parse_error</link>&#32;=&#32;<link linkend="_classnlohmann_1_1detail_1_1parse__error">detail::parse_error</link>;
18290 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1invalid__iterator">invalid_iterator</link>&#32;=&#32;<link linkend="_classnlohmann_1_1detail_1_1invalid__iterator">detail::invalid_iterator</link>;
18291 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1type__error">type_error</link>&#32;=&#32;<link linkend="_classnlohmann_1_1detail_1_1type__error">detail::type_error</link>;
18292 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1out__of__range">out_of_range</link>&#32;=&#32;<link linkend="_classnlohmann_1_1detail_1_1out__of__range">detail::out_of_range</link>;
18293 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1other__error">other_error</link>&#32;=&#32;<link linkend="_classnlohmann_1_1detail_1_1other__error">detail::other_error</link>;
18294 
18296 
18297 
18299 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;container&#32;types&#32;//</emphasis>
18301 
18306 
18308 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1basic__json">value_type</link>&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>;
18309 
18311 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1basic__json">reference</link>&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json">value_type</link>&amp;;
18313 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;=&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">value_type</link>&amp;;
18314 
18316 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1basic__json_1a3d20d11e5dfe95084a76f62eca54fadd">difference_type</link>&#32;=&#32;std::ptrdiff_t;
18318 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link>&#32;=&#32;std::size_t;
18319 
18321 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1basic__json_1ad38ae80f1e99d4b1f33c99fea4611457">allocator_type</link>&#32;=&#32;AllocatorType&lt;basic_json&gt;;
18322 
18324 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1basic__json_1a42e5c23402f4c2e1df487e1d102bc5fa">pointer</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::allocator_traits&lt;allocator_type&gt;::pointer;
18326 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1basic__json_1a4108c5148f1d7cf13c2681e22f141a10">const_pointer</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::allocator_traits&lt;allocator_type&gt;::const_pointer;
18327 
18329 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iterator</link>&#32;=&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl&lt;basic_json&gt;</link>;
18331 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1iter__impl">const_iterator</link>&#32;=&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl&lt;const basic_json&gt;</link>;
18333 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator">reverse_iterator</link>&#32;=&#32;<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator">json_reverse_iterator&lt;typename basic_json::iterator&gt;</link>;
18335 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator">const_reverse_iterator</link>&#32;=&#32;<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator">json_reverse_iterator&lt;typename basic_json::const_iterator&gt;</link>;
18336 
18338 
18339 
18342 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1ad38ae80f1e99d4b1f33c99fea4611457">allocator_type</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1afc55e7dca1a243b0d5011564824c0267">get_allocator</link>()
18343 &#32;&#32;&#32;&#32;{
18344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1ad38ae80f1e99d4b1f33c99fea4611457">allocator_type</link>();
18345 &#32;&#32;&#32;&#32;}
18346 
18349 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link>
18350 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a351b4f65014f6c2b8b2832847d44bbd7">meta</link>()
18351 &#32;&#32;&#32;&#32;{
18352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
18353 
18354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>[<emphasis role="stringliteral">&quot;copyright&quot;</emphasis>]&#32;=&#32;<emphasis role="stringliteral">&quot;(C)&#32;2013-2022&#32;Niels&#32;Lohmann&quot;</emphasis>;
18355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>[<emphasis role="stringliteral">&quot;name&quot;</emphasis>]&#32;=&#32;<emphasis role="stringliteral">&quot;JSON&#32;for&#32;Modern&#32;C++&quot;</emphasis>;
18356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>[<emphasis role="stringliteral">&quot;url&quot;</emphasis>]&#32;=&#32;<emphasis role="stringliteral">&quot;https://github.com/nlohmann/json&quot;</emphasis>;
18357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>[<emphasis role="stringliteral">&quot;version&quot;</emphasis>][<emphasis role="stringliteral">&quot;string&quot;</emphasis>]&#32;=
18358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(std::to_string(<link linkend="_json_8hpp_1a7c94253db90041af11dd946a49f0f8a4">NLOHMANN_JSON_VERSION_MAJOR</link>),&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>,
18359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::to_string(<link linkend="_json_8hpp_1ab5ca1e164894d78d3276d2e5fe58c5e3">NLOHMANN_JSON_VERSION_MINOR</link>),&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>,
18360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::to_string(<link linkend="_json_8hpp_1a307e0238ebc35e99ea45c68823eb83eb">NLOHMANN_JSON_VERSION_PATCH</link>));
18361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>[<emphasis role="stringliteral">&quot;version&quot;</emphasis>][<emphasis role="stringliteral">&quot;major&quot;</emphasis>]&#32;=&#32;<link linkend="_json_8hpp_1a7c94253db90041af11dd946a49f0f8a4">NLOHMANN_JSON_VERSION_MAJOR</link>;
18362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>[<emphasis role="stringliteral">&quot;version&quot;</emphasis>][<emphasis role="stringliteral">&quot;minor&quot;</emphasis>]&#32;=&#32;<link linkend="_json_8hpp_1ab5ca1e164894d78d3276d2e5fe58c5e3">NLOHMANN_JSON_VERSION_MINOR</link>;
18363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>[<emphasis role="stringliteral">&quot;version&quot;</emphasis>][<emphasis role="stringliteral">&quot;patch&quot;</emphasis>]&#32;=&#32;<link linkend="_json_8hpp_1a307e0238ebc35e99ea45c68823eb83eb">NLOHMANN_JSON_VERSION_PATCH</link>;
18364 
18365 <emphasis role="preprocessor">#ifdef&#32;_WIN32</emphasis>
18366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>[<emphasis role="stringliteral">&quot;platform&quot;</emphasis>]&#32;=&#32;<emphasis role="stringliteral">&quot;win32&quot;</emphasis>;
18367 <emphasis role="preprocessor">#elif&#32;defined&#32;__linux__</emphasis>
18368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>[<emphasis role="stringliteral">&quot;platform&quot;</emphasis>]&#32;=&#32;<emphasis role="stringliteral">&quot;linux&quot;</emphasis>;
18369 <emphasis role="preprocessor">#elif&#32;defined&#32;__APPLE__</emphasis>
18370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>[<emphasis role="stringliteral">&quot;platform&quot;</emphasis>]&#32;=&#32;<emphasis role="stringliteral">&quot;apple&quot;</emphasis>;
18371 <emphasis role="preprocessor">#elif&#32;defined&#32;__unix__</emphasis>
18372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>[<emphasis role="stringliteral">&quot;platform&quot;</emphasis>]&#32;=&#32;<emphasis role="stringliteral">&quot;unix&quot;</emphasis>;
18373 <emphasis role="preprocessor">#else</emphasis>
18374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>[<emphasis role="stringliteral">&quot;platform&quot;</emphasis>]&#32;=&#32;<emphasis role="stringliteral">&quot;unknown&quot;</emphasis>;
18375 <emphasis role="preprocessor">#endif</emphasis>
18376 
18377 <emphasis role="preprocessor">#if&#32;defined(__ICC)&#32;||&#32;defined(__INTEL_COMPILER)</emphasis>
18378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>[<emphasis role="stringliteral">&quot;compiler&quot;</emphasis>]&#32;=&#32;{{<emphasis role="stringliteral">&quot;family&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;icc&quot;</emphasis>},&#32;{<emphasis role="stringliteral">&quot;version&quot;</emphasis>,&#32;__INTEL_COMPILER}};
18379 <emphasis role="preprocessor">#elif&#32;defined(__clang__)</emphasis>
18380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>[<emphasis role="stringliteral">&quot;compiler&quot;</emphasis>]&#32;=&#32;{{<emphasis role="stringliteral">&quot;family&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;clang&quot;</emphasis>},&#32;{<emphasis role="stringliteral">&quot;version&quot;</emphasis>,&#32;__clang_version__}};
18381 <emphasis role="preprocessor">#elif&#32;defined(__GNUC__)&#32;||&#32;defined(__GNUG__)</emphasis>
18382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>[<emphasis role="stringliteral">&quot;compiler&quot;</emphasis>]&#32;=&#32;{{<emphasis role="stringliteral">&quot;family&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;gcc&quot;</emphasis>},&#32;{<emphasis role="stringliteral">&quot;version&quot;</emphasis>,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(
18383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::to_string(__GNUC__),&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>,
18384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::to_string(__GNUC_MINOR__),&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>,
18385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::to_string(__GNUC_PATCHLEVEL__))
18386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
18388 <emphasis role="preprocessor">#elif&#32;defined(__HP_cc)&#32;||&#32;defined(__HP_aCC)</emphasis>
18389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>[<emphasis role="stringliteral">&quot;compiler&quot;</emphasis>]&#32;=&#32;<emphasis role="stringliteral">&quot;hp&quot;</emphasis>
18390 <emphasis role="preprocessor">#elif&#32;defined(__IBMCPP__)</emphasis>
18391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>[<emphasis role="stringliteral">&quot;compiler&quot;</emphasis>]&#32;=&#32;{{<emphasis role="stringliteral">&quot;family&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;ilecpp&quot;</emphasis>},&#32;{<emphasis role="stringliteral">&quot;version&quot;</emphasis>,&#32;__IBMCPP__}};
18392 <emphasis role="preprocessor">#elif&#32;defined(_MSC_VER)</emphasis>
18393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>[<emphasis role="stringliteral">&quot;compiler&quot;</emphasis>]&#32;=&#32;{{<emphasis role="stringliteral">&quot;family&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;msvc&quot;</emphasis>},&#32;{<emphasis role="stringliteral">&quot;version&quot;</emphasis>,&#32;_MSC_VER}};
18394 <emphasis role="preprocessor">#elif&#32;defined(__PGI)</emphasis>
18395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>[<emphasis role="stringliteral">&quot;compiler&quot;</emphasis>]&#32;=&#32;{{<emphasis role="stringliteral">&quot;family&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;pgcpp&quot;</emphasis>},&#32;{<emphasis role="stringliteral">&quot;version&quot;</emphasis>,&#32;__PGI}};
18396 <emphasis role="preprocessor">#elif&#32;defined(__SUNPRO_CC)</emphasis>
18397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>[<emphasis role="stringliteral">&quot;compiler&quot;</emphasis>]&#32;=&#32;{{<emphasis role="stringliteral">&quot;family&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;sunpro&quot;</emphasis>},&#32;{<emphasis role="stringliteral">&quot;version&quot;</emphasis>,&#32;__SUNPRO_CC}};
18398 <emphasis role="preprocessor">#else</emphasis>
18399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>[<emphasis role="stringliteral">&quot;compiler&quot;</emphasis>]&#32;=&#32;{{<emphasis role="stringliteral">&quot;family&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;unknown&quot;</emphasis>},&#32;{<emphasis role="stringliteral">&quot;version&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;unknown&quot;</emphasis>}};
18400 <emphasis role="preprocessor">#endif</emphasis>
18401 
18402 
18403 <emphasis role="preprocessor">#if&#32;defined(_MSVC_LANG)</emphasis>
18404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>[<emphasis role="stringliteral">&quot;compiler&quot;</emphasis>][<emphasis role="stringliteral">&quot;c++&quot;</emphasis>]&#32;=&#32;std::to_string(_MSVC_LANG);
18405 <emphasis role="preprocessor">#elif&#32;defined(__cplusplus)</emphasis>
18406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>[<emphasis role="stringliteral">&quot;compiler&quot;</emphasis>][<emphasis role="stringliteral">&quot;c++&quot;</emphasis>]&#32;=&#32;std::to_string(__cplusplus);
18407 <emphasis role="preprocessor">#else</emphasis>
18408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>[<emphasis role="stringliteral">&quot;compiler&quot;</emphasis>][<emphasis role="stringliteral">&quot;c++&quot;</emphasis>]&#32;=&#32;<emphasis role="stringliteral">&quot;unknown&quot;</emphasis>;
18409 <emphasis role="preprocessor">#endif</emphasis>
18410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
18411 &#32;&#32;&#32;&#32;}
18412 
18413 
18415 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;JSON&#32;value&#32;data&#32;types&#32;//</emphasis>
18417 
18422 
18427 <emphasis role="preprocessor">#if&#32;defined(JSON_HAS_CPP_14)</emphasis>
18428 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;use&#32;of&#32;transparent&#32;comparator&#32;avoids&#32;unnecessary&#32;repeated&#32;construction&#32;of&#32;temporaries</emphasis>
18429 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;in&#32;functions&#32;involving&#32;lookup&#32;by&#32;key&#32;with&#32;types&#32;other&#32;than&#32;object_t::key_type&#32;(aka.&#32;StringType)</emphasis>
18430 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1basic__json_1a7e0b728380ef6c1ec1fcf16ddf674c77">default_object_comparator_t</link>&#32;=&#32;std::less&lt;&gt;;
18431 <emphasis role="preprocessor">#else</emphasis>
18432 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1basic__json_1a7e0b728380ef6c1ec1fcf16ddf674c77">default_object_comparator_t</link>&#32;=&#32;std::less&lt;StringType&gt;;
18433 <emphasis role="preprocessor">#endif</emphasis>
18434 
18437 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1basic__json_1a38f0955a144fe9589bf68e8dc4cd5c56">object_t</link>&#32;=&#32;ObjectType&lt;StringType,
18438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>,
18439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a7e0b728380ef6c1ec1fcf16ddf674c77">default_object_comparator_t</link>,
18440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AllocatorType&lt;std::pair&lt;<emphasis role="keyword">const</emphasis>&#32;StringType,
18441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&gt;&gt;&gt;;
18442 
18445 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1basic__json_1a858c1cf8407bc06494e3a1114a3b73e7">array_t</link>&#32;=&#32;ArrayType&lt;basic_json,&#32;AllocatorType&lt;basic_json&gt;&gt;;
18446 
18449 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link>&#32;=&#32;StringType;
18450 
18453 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1basic__json_1a44fd1a12c9c54623c942b430e7a72937">boolean_t</link>&#32;=&#32;BooleanType;
18454 
18457 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1basic__json_1a11e390944da90db83089eb2426a749d3">number_integer_t</link>&#32;=&#32;NumberIntegerType;
18458 
18461 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1basic__json_1ae09af9c23351b7245d9be4d1b2035fef">number_unsigned_t</link>&#32;=&#32;NumberUnsignedType;
18462 
18465 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6">number_float_t</link>&#32;=&#32;NumberFloatType;
18466 
18469 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1byte__container__with__subtype">binary_t</link>&#32;=&#32;<link linkend="_classnlohmann_1_1byte__container__with__subtype">nlohmann::byte_container_with_subtype&lt;BinaryType&gt;</link>;
18470 
18473 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1basic__json_1acd2a6657a649c77be751228313311755">object_comparator_t</link>&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a0a41b6ed14eb953d0b6eee0e4d4bb5d4">detail::actual_object_comparator_t&lt;basic_json&gt;</link>;
18474 
18476 
18477 &#32;&#32;<emphasis role="keyword">private</emphasis>:
18478 
18480 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>...&#32;Args&gt;
18481 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a5f2aaec3b681d0a72f7d6e90b70cdcd1">JSON_HEDLEY_RETURNS_NON_NULL</link>
18482 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;T*&#32;create(Args&amp;&amp;&#32;...&#32;args)
18483 &#32;&#32;&#32;&#32;{
18484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AllocatorType&lt;T&gt;&#32;alloc;
18485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>AllocatorTraits&#32;=&#32;std::allocator_traits&lt;AllocatorType&lt;T&gt;&gt;;
18486 
18487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;deleter&#32;=&#32;[&amp;](T&#32;*&#32;obj)
18488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AllocatorTraits::deallocate(alloc,&#32;obj,&#32;1);
18490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
18491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::unique_ptr&lt;T,&#32;<emphasis role="keyword">decltype</emphasis>(deleter)&gt;&#32;obj(AllocatorTraits::allocate(alloc,&#32;1),&#32;deleter);
18492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AllocatorTraits::construct(alloc,&#32;obj.get(),&#32;std::forward&lt;Args&gt;(args)...);
18493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(obj&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
18494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;obj.release();
18495 &#32;&#32;&#32;&#32;}
18496 
18498 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;JSON&#32;value&#32;storage&#32;//</emphasis>
18500 
18501 &#32;&#32;<link linkend="_json_8hpp_1a2cf645f34610e7f7d6e09ab88a2ab917">JSON_PRIVATE_UNLESS_TESTED</link>:
18527 &#32;&#32;&#32;&#32;<emphasis role="keyword">union&#32;</emphasis>json_value
18528 &#32;&#32;&#32;&#32;{
18530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a38f0955a144fe9589bf68e8dc4cd5c56">object_t</link>*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab49790263c78300fbf05719e38246198">object</link>;
18532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a858c1cf8407bc06494e3a1114a3b73e7">array_t</link>*&#32;<link linkend="_classarray">array</link>;
18534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link>*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string</link>;
18536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1ad6c955145bebde84d93991ffed7cd389">binary_t</link>*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab49f49751b4640af1400b6a633535539">binary</link>;
18538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a44fd1a12c9c54623c942b430e7a72937">boolean_t</link>&#32;boolean;
18540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a11e390944da90db83089eb2426a749d3">number_integer_t</link>&#32;number_integer;
18542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1ae09af9c23351b7245d9be4d1b2035fef">number_unsigned_t</link>&#32;number_unsigned;
18544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6">number_float_t</link>&#32;number_float;
18545 
18547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;json_value()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
18549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;json_value(<link linkend="_classnlohmann_1_1basic__json_1a44fd1a12c9c54623c942b430e7a72937">boolean_t</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)&#32;noexcept&#32;:&#32;boolean(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)&#32;{}
18551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;json_value(<link linkend="_classnlohmann_1_1basic__json_1a11e390944da90db83089eb2426a749d3">number_integer_t</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)&#32;noexcept&#32;:&#32;number_integer(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)&#32;{}
18553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;json_value(<link linkend="_classnlohmann_1_1basic__json_1ae09af9c23351b7245d9be4d1b2035fef">number_unsigned_t</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)&#32;noexcept&#32;:&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">number_unsigned</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)&#32;{}
18555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;json_value(<link linkend="_classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6">number_float_t</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)&#32;noexcept&#32;:&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">number_float</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)&#32;{}
18557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;json_value(<link linkend="_classnlohmann_1_1basic__json_1ac68cb65a7f3517f0c5b1d3a4967406ad">value_t</link>&#32;t)
18558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(t)
18560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::object:
18562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">object</emphasis>&#32;=&#32;create&lt;object_t&gt;();
18564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
18565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18566 
18567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::array:
18568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>&#32;=&#32;create&lt;array_t&gt;();
18570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
18571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18572 
18573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::string:
18574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;=&#32;create&lt;string_t&gt;(<emphasis role="stringliteral">&quot;&quot;</emphasis>);
18576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
18577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18578 
18579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::binary:
18580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab49f49751b4640af1400b6a633535539">binary</link>&#32;=&#32;create&lt;binary_t&gt;();
18582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
18583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18584 
18585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::boolean:
18586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">boolean</emphasis>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classnlohmann_1_1basic__json_1a44fd1a12c9c54623c942b430e7a72937">boolean_t</link><emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">false</emphasis>);
18588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
18589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18590 
18591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_integer:
18592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">number_integer</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classnlohmann_1_1basic__json_1a11e390944da90db83089eb2426a749d3">number_integer_t</link><emphasis role="keyword">&gt;</emphasis>(0);
18594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
18595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18596 
18597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_unsigned:
18598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">number_unsigned</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classnlohmann_1_1basic__json_1ae09af9c23351b7245d9be4d1b2035fef">number_unsigned_t</link><emphasis role="keyword">&gt;</emphasis>(0);
18600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
18601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18602 
18603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_float:
18604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">number_float</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6">number_float_t</link><emphasis role="keyword">&gt;</emphasis>(0.0);
18606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
18607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18608 
18609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::null:
18610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">object</emphasis>&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;&#32;&#32;<emphasis role="comment">//&#32;silence&#32;warning,&#32;see&#32;#821</emphasis>
18612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
18613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18614 
18615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::discarded:
18616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
18617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">object</emphasis>&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;&#32;&#32;<emphasis role="comment">//&#32;silence&#32;warning,&#32;see&#32;#821</emphasis>
18619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(t&#32;==&#32;value_t::null))
18620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1other__error_1a4ea29b55f963ecc3ee7ddda7c731a9b1">other_error::create</link>(500,&#32;<emphasis role="stringliteral">&quot;961c151d2e87f2686a955a9be24d316f1362bf21&#32;3.10.5&quot;</emphasis>,&#32;<emphasis role="keyword">nullptr</emphasis>));&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
18622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
18624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18627 
18629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;json_value(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link>&amp;&#32;<link linkend="_classvalue">value</link>)&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string</link>(create&lt;<link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link>&gt;(<link linkend="_classvalue">value</link>))&#32;{}
18630 
18632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;json_value(<link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link>&amp;&amp;&#32;<link linkend="_classvalue">value</link>)&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string</link>(create&lt;<link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link>&gt;(<link linkend="_namespacestd">std</link>::<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(<link linkend="_classvalue">value</link>)))&#32;{}
18633 
18635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;json_value(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a38f0955a144fe9589bf68e8dc4cd5c56">object_t</link>&amp;&#32;<link linkend="_classvalue">value</link>)&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab49790263c78300fbf05719e38246198">object</link>(create&lt;<link linkend="_classnlohmann_1_1basic__json_1a38f0955a144fe9589bf68e8dc4cd5c56">object_t</link>&gt;(<link linkend="_classvalue">value</link>))&#32;{}
18636 
18638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;json_value(<link linkend="_classnlohmann_1_1basic__json_1a38f0955a144fe9589bf68e8dc4cd5c56">object_t</link>&amp;&amp;&#32;<link linkend="_classvalue">value</link>)&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab49790263c78300fbf05719e38246198">object</link>(create&lt;<link linkend="_classnlohmann_1_1basic__json_1a38f0955a144fe9589bf68e8dc4cd5c56">object_t</link>&gt;(<link linkend="_namespacestd">std</link>::<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(<link linkend="_classvalue">value</link>)))&#32;{}
18639 
18641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;json_value(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a858c1cf8407bc06494e3a1114a3b73e7">array_t</link>&amp;&#32;<link linkend="_classvalue">value</link>)&#32;:&#32;<link linkend="_classarray">array</link>(create&lt;<link linkend="_classnlohmann_1_1basic__json_1a858c1cf8407bc06494e3a1114a3b73e7">array_t</link>&gt;(<link linkend="_classvalue">value</link>))&#32;{}
18642 
18644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;json_value(<link linkend="_classnlohmann_1_1basic__json_1a858c1cf8407bc06494e3a1114a3b73e7">array_t</link>&amp;&amp;&#32;<link linkend="_classvalue">value</link>)&#32;:&#32;<link linkend="_classarray">array</link>(create&lt;<link linkend="_classnlohmann_1_1basic__json_1a858c1cf8407bc06494e3a1114a3b73e7">array_t</link>&gt;(<link linkend="_namespacestd">std</link>::<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(<link linkend="_classvalue">value</link>)))&#32;{}
18645 
18647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;json_value(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">binary_t::container_type</link>&amp;&#32;<link linkend="_classvalue">value</link>)&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab49f49751b4640af1400b6a633535539">binary</link>(create&lt;<link linkend="_classnlohmann_1_1basic__json_1ad6c955145bebde84d93991ffed7cd389">binary_t</link>&gt;(<link linkend="_classvalue">value</link>))&#32;{}
18648 
18650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;json_value(<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">binary_t::container_type</link>&amp;&amp;&#32;<link linkend="_classvalue">value</link>)&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab49f49751b4640af1400b6a633535539">binary</link>(create&lt;<link linkend="_classnlohmann_1_1basic__json_1ad6c955145bebde84d93991ffed7cd389">binary_t</link>&gt;(<link linkend="_namespacestd">std</link>::<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(<link linkend="_classvalue">value</link>)))&#32;{}
18651 
18653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;json_value(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1ad6c955145bebde84d93991ffed7cd389">binary_t</link>&amp;&#32;<link linkend="_classvalue">value</link>)&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab49f49751b4640af1400b6a633535539">binary</link>(create&lt;<link linkend="_classnlohmann_1_1basic__json_1ad6c955145bebde84d93991ffed7cd389">binary_t</link>&gt;(<link linkend="_classvalue">value</link>))&#32;{}
18654 
18656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;json_value(<link linkend="_classnlohmann_1_1basic__json_1ad6c955145bebde84d93991ffed7cd389">binary_t</link>&amp;&amp;&#32;<link linkend="_classvalue">value</link>)&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab49f49751b4640af1400b6a633535539">binary</link>(create&lt;<link linkend="_classnlohmann_1_1basic__json_1ad6c955145bebde84d93991ffed7cd389">binary_t</link>&gt;(<link linkend="_namespacestd">std</link>::<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(<link linkend="_classvalue">value</link>)))&#32;{}
18657 
18658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacestd_1a9d87212966db1577458d10be75ce7131">destroy</link>(<link linkend="_classnlohmann_1_1basic__json_1ac68cb65a7f3517f0c5b1d3a4967406ad">value_t</link>&#32;t)
18659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(t&#32;==&#32;value_t::array&#32;||&#32;t&#32;==&#32;value_t::object)
18661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;flatten&#32;the&#32;current&#32;json_value&#32;to&#32;a&#32;heap-allocated&#32;stack</emphasis>
18663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;basic_json&gt;&#32;stack;
18664 
18665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;move&#32;the&#32;top-level&#32;items&#32;to&#32;stack</emphasis>
18666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(t&#32;==&#32;value_t::array)
18667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stack.reserve(<link linkend="_classarray">array</link>-&gt;<link linkend="_classarray_1aeb9d2f12b9199641b8b340365a59174b">size</link>());
18669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="_classarray">array</link>-&gt;<link linkend="_classarray_1a0215ba81d7547fcd4e81fed83140b40a">begin</link>(),&#32;<link linkend="_classarray">array</link>-&gt;<link linkend="_classarray_1a2027254bbe0a3e797c461a0b2446f656">end</link>(),&#32;std::back_inserter(stack));
18670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
18672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stack.reserve(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab49790263c78300fbf05719e38246198">object</link>-&gt;size());
18674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;it&#32;:&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab49790263c78300fbf05719e38246198">object</link>)
18675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stack.push_back(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(it.second));
18677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18679 
18680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!stack.empty())
18681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;move&#32;the&#32;last&#32;item&#32;to&#32;local&#32;variable&#32;to&#32;be&#32;processed</emphasis>
18683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;basic_json&#32;current_item(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(stack.back()));
18684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stack.pop_back();
18685 
18686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;current_item&#32;is&#32;array/object,&#32;move</emphasis>
18687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;its&#32;children&#32;to&#32;the&#32;stack&#32;to&#32;be&#32;processed&#32;later</emphasis>
18688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(current_item.is_array())
18689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(current_item.m_value.array-&gt;begin(),&#32;current_item.m_value.array-&gt;end(),&#32;std::back_inserter(stack));
18691 
18692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;current_item.m_value.array-&gt;clear();
18693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(current_item.is_object())
18695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;it&#32;:&#32;*current_item.<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab49790263c78300fbf05719e38246198">object</link>)
18697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stack.push_back(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(it.second));
18699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18700 
18701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;current_item.m_value.object-&gt;clear();
18702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18703 
18704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;it&apos;s&#32;now&#32;safe&#32;that&#32;current_item&#32;get&#32;destructed</emphasis>
18705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;since&#32;it&#32;doesn&apos;t&#32;have&#32;any&#32;children</emphasis>
18706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18708 
18709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(t)
18710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::object:
18712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AllocatorType&lt;object_t&gt;&#32;alloc;
18714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::allocator_traits&lt;<emphasis role="keyword">decltype</emphasis>(alloc)&gt;::destroy(alloc,&#32;<emphasis role="keywordtype">object</emphasis>);
18715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::allocator_traits&lt;<emphasis role="keyword">decltype</emphasis>(alloc)&gt;::deallocate(alloc,&#32;<emphasis role="keywordtype">object</emphasis>,&#32;1);
18716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
18717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18718 
18719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::array:
18720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AllocatorType&lt;array_t&gt;&#32;alloc;
18722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::allocator_traits&lt;<emphasis role="keyword">decltype</emphasis>(alloc)&gt;::destroy(alloc,&#32;<link linkend="_classarray">array</link>);
18723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::allocator_traits&lt;<emphasis role="keyword">decltype</emphasis>(alloc)&gt;::deallocate(alloc,&#32;<link linkend="_classarray">array</link>,&#32;1);
18724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
18725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18726 
18727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::string:
18728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AllocatorType&lt;string_t&gt;&#32;alloc;
18730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::allocator_traits&lt;<emphasis role="keyword">decltype</emphasis>(alloc)&gt;::destroy(alloc,&#32;<emphasis role="keywordtype">string</emphasis>);
18731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::allocator_traits&lt;<emphasis role="keyword">decltype</emphasis>(alloc)&gt;::deallocate(alloc,&#32;<emphasis role="keywordtype">string</emphasis>,&#32;1);
18732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
18733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18734 
18735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::binary:
18736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AllocatorType&lt;binary_t&gt;&#32;alloc;
18738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::allocator_traits&lt;<emphasis role="keyword">decltype</emphasis>(alloc)&gt;::destroy(alloc,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab49f49751b4640af1400b6a633535539">binary</link>);
18739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::allocator_traits&lt;<emphasis role="keyword">decltype</emphasis>(alloc)&gt;::deallocate(alloc,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab49f49751b4640af1400b6a633535539">binary</link>,&#32;1);
18740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
18741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18742 
18743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::null:
18744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::boolean:
18745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_integer:
18746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_unsigned:
18747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_float:
18748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::discarded:
18749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
18750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
18752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18755 &#32;&#32;&#32;&#32;};
18756 
18757 &#32;&#32;<emphasis role="keyword">private</emphasis>:
18776 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;assert_invariant(<emphasis role="keywordtype">bool</emphasis>&#32;check_parents&#32;=&#32;<emphasis role="keyword">true</emphasis>)&#32;const&#32;noexcept
18777 &#32;&#32;&#32;&#32;{
18778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(m_type&#32;!=&#32;value_t::object&#32;||&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
18779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(m_type&#32;!=&#32;value_t::array&#32;||&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
18780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(m_type&#32;!=&#32;value_t::string&#32;||&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.string&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
18781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(m_type&#32;!=&#32;value_t::binary&#32;||&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.binary&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
18782 
18783 <emphasis role="preprocessor">#if&#32;JSON_DIAGNOSTICS</emphasis>
18784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a985d3b82445302c57257f6432f261fe9">JSON_TRY</link>
18785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;cppcheck-suppress&#32;assertWithSideEffect</emphasis>
18787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(!check_parents&#32;||&#32;!<link linkend="_classnlohmann_1_1basic__json_1a4e05a7d5deec758f1d830741b68b4249">is_structured</link>()&#32;||&#32;<link linkend="_namespacestd_1af69ea32ebd7865fb57714d6b5f12f26d">std::all_of</link>(<link linkend="_classnlohmann_1_1basic__json_1a23b495b4c282e4afacf382f5b49af7c7">begin</link>(),&#32;<link linkend="_classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc">end</link>(),&#32;[<emphasis role="keyword">this</emphasis>](<emphasis role="keyword">const</emphasis>&#32;basic_json&#32;&amp;&#32;j)
18788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;j.m_parent&#32;==&#32;<emphasis role="keyword">this</emphasis>;
18790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}));
18791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6954bec49ed2a2dfb938c1131c82740a">JSON_CATCH</link>(...)&#32;{}&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
18793 <emphasis role="preprocessor">#endif</emphasis>
18794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis><emphasis role="keyword">&gt;</emphasis>(check_parents);
18795 &#32;&#32;&#32;&#32;}
18796 
18797 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;set_parents()
18798 &#32;&#32;&#32;&#32;{
18799 <emphasis role="preprocessor">#if&#32;JSON_DIAGNOSTICS</emphasis>
18800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(m_type)
18801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::array:
18803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;element&#32;:&#32;*<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.<link linkend="_classarray">array</link>)
18805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;element.m_parent&#32;=&#32;<emphasis role="keyword">this</emphasis>;
18807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
18809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18810 
18811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::object:
18812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;element&#32;:&#32;*<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab49790263c78300fbf05719e38246198">object</link>)
18814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;element.second.m_parent&#32;=&#32;<emphasis role="keyword">this</emphasis>;
18816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
18818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18819 
18820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::null:
18821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::string:
18822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::boolean:
18823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_integer:
18824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_unsigned:
18825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_float:
18826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::binary:
18827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::discarded:
18828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
18829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
18830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18831 <emphasis role="preprocessor">#endif</emphasis>
18832 &#32;&#32;&#32;&#32;}
18833 
18834 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd">iterator</link>&#32;set_parents(<link linkend="_classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd">iterator</link>&#32;it,&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">iterator::difference_type</link>&#32;count_set_parents)
18835 &#32;&#32;&#32;&#32;{
18836 <emphasis role="preprocessor">#if&#32;JSON_DIAGNOSTICS</emphasis>
18837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">iterator::difference_type</link>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;count_set_parents;&#32;++i)
18838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(it&#32;+&#32;i)-&gt;m_parent&#32;=&#32;<emphasis role="keyword">this</emphasis>;
18840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18841 <emphasis role="preprocessor">#else</emphasis>
18842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis><emphasis role="keyword">&gt;</emphasis>(count_set_parents);
18843 <emphasis role="preprocessor">#endif</emphasis>
18844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;it;
18845 &#32;&#32;&#32;&#32;}
18846 
18847 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link>&#32;set_parent(<link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link>&#32;j,&#32;std::size_t&#32;old_capacity&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(-1))
18848 &#32;&#32;&#32;&#32;{
18849 <emphasis role="preprocessor">#if&#32;JSON_DIAGNOSTICS</emphasis>
18850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(old_capacity&#32;!=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(-1))
18851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;see&#32;https://github.com/nlohmann/json/issues/2838</emphasis>
18853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(<link linkend="_classnlohmann_1_1basic__json_1a5b7c4b35a0ad9f97474912a08965d7ad">type</link>()&#32;==&#32;value_t::array);
18854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array-&gt;capacity()&#32;!=&#32;old_capacity))
18855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;capacity&#32;has&#32;changed:&#32;update&#32;all&#32;parents</emphasis>
18857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_parents();
18858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;j;
18859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18861 
18862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ordered_json&#32;uses&#32;a&#32;vector&#32;internally,&#32;so&#32;pointers&#32;could&#32;have</emphasis>
18863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;been&#32;invalidated;&#32;see&#32;https://github.com/nlohmann/json/issues/2962</emphasis>
18864 <emphasis role="preprocessor">#ifdef&#32;JSON_HEDLEY_MSVC_VERSION</emphasis>
18865 <emphasis role="preprocessor">#pragma&#32;warning(push&#32;)</emphasis>
18866 <emphasis role="preprocessor">#pragma&#32;warning(disable&#32;:&#32;4127)&#32;</emphasis><emphasis role="comment">//&#32;ignore&#32;warning&#32;to&#32;replace&#32;if&#32;with&#32;if&#32;constexpr</emphasis>
18867 <emphasis role="preprocessor">#endif</emphasis>
18868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_structnlohmann_1_1detail_1_1is__ordered__map_1aa8a376f972b1655f8cecb7b6875f6d8ba6680a97e8a9b59a5bd3e039d6a8864fa">detail::is_ordered_map&lt;object_t&gt;::value</link>)
18869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_parents();
18871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;j;
18872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18873 <emphasis role="preprocessor">#ifdef&#32;JSON_HEDLEY_MSVC_VERSION</emphasis>
18874 <emphasis role="preprocessor">#pragma&#32;warning(&#32;pop&#32;)</emphasis>
18875 <emphasis role="preprocessor">#endif</emphasis>
18876 
18877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j.m_parent&#32;=&#32;<emphasis role="keyword">this</emphasis>;
18878 <emphasis role="preprocessor">#else</emphasis>
18879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis><emphasis role="keyword">&gt;</emphasis>(j);
18880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis><emphasis role="keyword">&gt;</emphasis>(old_capacity);
18881 <emphasis role="preprocessor">#endif</emphasis>
18882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;j;
18883 &#32;&#32;&#32;&#32;}
18884 
18885 &#32;&#32;<emphasis role="keyword">public</emphasis>:
18887 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;JSON&#32;parser&#32;callback&#32;//</emphasis>
18889 
18892 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>parse_event_t&#32;=&#32;detail::parse_event_t;
18893 
18896 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classnlohmann_1_1basic__json_1a0273d074462644e5d5a7ff313ad0d742">parser_callback_t</link>&#32;=&#32;detail::parser_callback_t&lt;basic_json&gt;;
18897 
18899 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;constructors&#32;//</emphasis>
18901 
18906 
18909 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a19734fbc9c97d536832892ddacd6b62a">basic_json</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)
18910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;m_type(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>),&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)
18911 &#32;&#32;&#32;&#32;{
18912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert_invariant();
18913 &#32;&#32;&#32;&#32;}
18914 
18917 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1ace6fbaf6c64f60b61922b5c9d3e61aa6">basic_json</link>(std::nullptr_t&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>)&#32;noexcept&#32;<emphasis role="comment">//&#32;NOLINT(bugprone-exception-escape)</emphasis>
18918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>(<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link>::null)
18919 &#32;&#32;&#32;&#32;{
18920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert_invariant();
18921 &#32;&#32;&#32;&#32;}
18922 
18925 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;CompatibleType,
18926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;U&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a53a082eedad9f4729fcd8fed552a21f7">detail::uncvref_t&lt;CompatibleType&gt;</link>,
18927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&#32;&lt;
18928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!<link linkend="_structnlohmann_1_1detail_1_1is__basic__json">detail::is_basic_json&lt;U&gt;::value</link>&#32;&amp;&amp;&#32;<link linkend="_structnlohmann_1_1detail_1_1is__compatible__type">detail::is_compatible_type&lt;basic_json_t, U&gt;::value</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;&#32;=&#32;0&#32;&gt;
18929 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1adda5ebaff0503f92c8b3d65cfb610ea5">basic_json</link>(CompatibleType&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(&#32;<emphasis role="comment">//&#32;NOLINT(bugprone-forwarding-reference-overload,bugprone-exception-escape)</emphasis>
18930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSONSerializer&lt;U&gt;::to_json(std::declval&lt;basic_json_t&amp;&gt;(),
18931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;CompatibleType&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>))))
18932 &#32;&#32;&#32;&#32;{
18933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSONSerializer&lt;U&gt;::to_json(*<emphasis role="keyword">this</emphasis>,&#32;std::forward&lt;CompatibleType&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>));
18934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_parents();
18935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert_invariant();
18936 &#32;&#32;&#32;&#32;}
18937 
18940 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,
18941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&#32;&lt;
18942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1is__basic__json">detail::is_basic_json&lt;BasicJsonType&gt;::value</link>&amp;&amp;&#32;!std::is_same&lt;basic_json,&#32;BasicJsonType&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;&#32;=&#32;0&#32;&gt;
18943 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a40738eb9cb8c5a9ca14ae4b697c29f8e">basic_json</link>(<emphasis role="keyword">const</emphasis>&#32;BasicJsonType&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
18944 &#32;&#32;&#32;&#32;{
18945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>other_boolean_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::boolean_t;
18946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>other_number_float_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_float_t;
18947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>other_number_integer_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_integer_t;
18948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>other_number_unsigned_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::number_unsigned_t;
18949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>other_string_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::string_t;
18950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>other_object_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::object_t;
18951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>other_array_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::array_t;
18952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>other_binary_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::binary_t;
18953 
18954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.type())
18955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::boolean:
18957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSONSerializer&lt;other_boolean_t&gt;::to_json(*<emphasis role="keyword">this</emphasis>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.template&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get&lt;other_boolean_t&gt;</link>());
18958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
18959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_float:
18960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSONSerializer&lt;other_number_float_t&gt;::to_json(*<emphasis role="keyword">this</emphasis>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.template&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get&lt;other_number_float_t&gt;</link>());
18961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
18962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_integer:
18963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSONSerializer&lt;other_number_integer_t&gt;::to_json(*<emphasis role="keyword">this</emphasis>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.template&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get&lt;other_number_integer_t&gt;</link>());
18964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
18965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_unsigned:
18966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSONSerializer&lt;other_number_unsigned_t&gt;::to_json(*<emphasis role="keyword">this</emphasis>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.template&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get&lt;other_number_unsigned_t&gt;</link>());
18967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
18968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::string:
18969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSONSerializer&lt;other_string_t&gt;::to_json(*<emphasis role="keyword">this</emphasis>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.template&#32;get_ref&lt;const&#32;other_string_t&amp;&gt;());
18970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
18971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::object:
18972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSONSerializer&lt;other_object_t&gt;::to_json(*<emphasis role="keyword">this</emphasis>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.template&#32;get_ref&lt;const&#32;other_object_t&amp;&gt;());
18973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
18974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::array:
18975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSONSerializer&lt;other_array_t&gt;::to_json(*<emphasis role="keyword">this</emphasis>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.template&#32;get_ref&lt;const&#32;other_array_t&amp;&gt;());
18976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
18977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::binary:
18978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSONSerializer&lt;other_binary_t&gt;::to_json(*<emphasis role="keyword">this</emphasis>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.template&#32;get_ref&lt;const&#32;other_binary_t&amp;&gt;());
18979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
18980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::null:
18981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
18982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
18983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::discarded:
18984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_type&#32;=&#32;value_t::discarded;
18985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
18986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
18987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(<emphasis role="keyword">false</emphasis>);&#32;<emphasis role="comment">//&#32;NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)&#32;LCOV_EXCL_LINE</emphasis>
18988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
18989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_parents();
18990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert_invariant();
18991 &#32;&#32;&#32;&#32;}
18992 
18995 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1aeac617faf3448d6d2cb33a020be01d37">basic_json</link>(<link linkend="_classnlohmann_1_1basic__json_1ac569f292a070dfd2f6b69c16e746095a">initializer_list_t</link>&#32;init,
18996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;type_deduction&#32;=&#32;<emphasis role="keyword">true</emphasis>,
18997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link>&#32;manual_type&#32;=&#32;value_t::array)
18998 &#32;&#32;&#32;&#32;{
18999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;if&#32;each&#32;element&#32;is&#32;an&#32;array&#32;with&#32;two&#32;elements&#32;whose&#32;first</emphasis>
19000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;element&#32;is&#32;a&#32;string</emphasis>
19001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_an_object&#32;=&#32;<link linkend="_namespacestd_1af69ea32ebd7865fb57714d6b5f12f26d">std::all_of</link>(init.begin(),&#32;init.end(),
19002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1detail_1_1json__ref">detail::json_ref&lt;basic_json&gt;</link>&amp;&#32;element_ref)
19003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
19004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;element_ref-&gt;is_array()&#32;&amp;&amp;&#32;element_ref-&gt;size()&#32;==&#32;2&#32;&amp;&amp;&#32;(*element_ref)[0].is_string();
19005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
19006 
19007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;adjust&#32;type&#32;if&#32;type&#32;deduction&#32;is&#32;not&#32;wanted</emphasis>
19008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!type_deduction)
19009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
19010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;array&#32;is&#32;wanted,&#32;do&#32;not&#32;create&#32;an&#32;object&#32;though&#32;possible</emphasis>
19011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(manual_type&#32;==&#32;value_t::array)
19012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
19013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_an_object&#32;=&#32;<emphasis role="keyword">false</emphasis>;
19014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
19015 
19016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;object&#32;is&#32;wanted&#32;but&#32;impossible,&#32;throw&#32;an&#32;exception</emphasis>
19017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(manual_type&#32;==&#32;value_t::object&#32;&amp;&amp;&#32;!is_an_object))
19018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
19019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(301,&#32;<emphasis role="stringliteral">&quot;cannot&#32;create&#32;object&#32;from&#32;initializer&#32;list&quot;</emphasis>,&#32;<emphasis role="keyword">nullptr</emphasis>));
19020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
19021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
19022 
19023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is_an_object)
19024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
19025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;initializer&#32;list&#32;is&#32;a&#32;list&#32;of&#32;pairs&#32;-&gt;&#32;create&#32;object</emphasis>
19026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_type&#32;=&#32;value_t::object;
19027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>&#32;=&#32;value_t::object;
19028 
19029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;element_ref&#32;:&#32;init)
19030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
19031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;element&#32;=&#32;element_ref.<link linkend="_classnlohmann_1_1detail_1_1json__ref_1ae39e523218bf05cac3fb5b5b1cd5efb6">moved_or_copied</link>();
19032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.<link linkend="_classnlohmann_1_1basic__json_1a9a4df356e05415438fadf8a15e583903">object</link>-&gt;<link linkend="_classnlohmann_1_1basic__json_1af244c096197a233edba4c83200ae66ac">emplace</link>(
19033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(*((*element.m_value.array)[0].m_value.string)),
19034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>((*element.m_value.array)[1]));
19035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
19036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
19037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
19038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
19039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;initializer&#32;list&#32;describes&#32;an&#32;array&#32;-&gt;&#32;create&#32;array</emphasis>
19040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_type&#32;=&#32;value_t::array;
19041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array&#32;=&#32;create&lt;array_t&gt;(init.begin(),&#32;init.end());
19042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
19043 
19044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_parents();
19045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert_invariant();
19046 &#32;&#32;&#32;&#32;}
19047 
19050 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link>
19051 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a3d255dbe024ce2d0fdfb1b4837629091">binary</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">binary_t::container_type</link>&amp;&#32;init)
19052 &#32;&#32;&#32;&#32;{
19053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>();
19054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>.m_type&#32;=&#32;value_t::binary;
19055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>.m_value&#32;=&#32;init;
19056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>;
19057 &#32;&#32;&#32;&#32;}
19058 
19061 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link>
19062 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a7ad4b5b7c96e77d3e105a71ce2147727">binary</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">binary_t::container_type</link>&amp;&#32;init,&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classnlohmann_1_1byte__container__with__subtype_1abf1e0e8ecd51472c25b0fe8aae786a70">binary_t::subtype_type</link>&#32;subtype)
19063 &#32;&#32;&#32;&#32;{
19064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>();
19065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>.m_type&#32;=&#32;value_t::binary;
19066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>.m_value&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1ad6c955145bebde84d93991ffed7cd389">binary_t</link>(init,&#32;subtype);
19067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>;
19068 &#32;&#32;&#32;&#32;}
19069 
19072 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link>
19073 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1ab085777bbfbfac5a472120b991ef5cf3">binary</link>(<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">binary_t::container_type</link>&amp;&amp;&#32;init)
19074 &#32;&#32;&#32;&#32;{
19075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>();
19076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>.m_type&#32;=&#32;value_t::binary;
19077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>.m_value&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(init);
19078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>;
19079 &#32;&#32;&#32;&#32;}
19080 
19083 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link>
19084 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a534d4793bcfa81a307b7f3f7eab2cff9">binary</link>(<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">binary_t::container_type</link>&amp;&amp;&#32;init,&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classnlohmann_1_1byte__container__with__subtype_1abf1e0e8ecd51472c25b0fe8aae786a70">binary_t::subtype_type</link>&#32;subtype)
19085 &#32;&#32;&#32;&#32;{
19086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>();
19087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>.m_type&#32;=&#32;value_t::binary;
19088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>.m_value&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1ad6c955145bebde84d93991ffed7cd389">binary_t</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(init),&#32;subtype);
19089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>;
19090 &#32;&#32;&#32;&#32;}
19091 
19094 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link>
19095 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a2c8d8f5741aedadac8f3bffd8f2ce13e">array</link>(<link linkend="_classnlohmann_1_1basic__json_1ac569f292a070dfd2f6b69c16e746095a">initializer_list_t</link>&#32;init&#32;=&#32;{})
19096 &#32;&#32;&#32;&#32;{
19097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>(init,&#32;<emphasis role="keyword">false</emphasis>,&#32;value_t::array);
19098 &#32;&#32;&#32;&#32;}
19099 
19102 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link>
19103 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a9a4df356e05415438fadf8a15e583903">object</link>(<link linkend="_classnlohmann_1_1basic__json_1ac569f292a070dfd2f6b69c16e746095a">initializer_list_t</link>&#32;init&#32;=&#32;{})
19104 &#32;&#32;&#32;&#32;{
19105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>(init,&#32;<emphasis role="keyword">false</emphasis>,&#32;value_t::object);
19106 &#32;&#32;&#32;&#32;}
19107 
19110 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1afbccea367512a87b5d76e2bd92c5cc85">basic_json</link>(<link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link>&#32;cnt,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
19111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;m_type(<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link>::<link linkend="_classarray">array</link>)
19112 &#32;&#32;&#32;&#32;{
19113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array&#32;=&#32;create&lt;array_t&gt;(cnt,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
19114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_parents();
19115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert_invariant();
19116 &#32;&#32;&#32;&#32;}
19117 
19120 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">class&#32;</emphasis>InputIT,&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&#32;&lt;
19121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_same&lt;InputIT,&#32;typename&#32;basic_json_t::iterator&gt;::value&#32;||
19122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_same&lt;InputIT,&#32;typename&#32;basic_json_t::const_iterator&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&#32;=&#32;0&#32;&gt;
19123 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a23e540f473d32f1cf5d3243ea3ad495e">basic_json</link>(InputIT&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;InputIT&#32;last)
19124 &#32;&#32;&#32;&#32;{
19125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>.m_object&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
19126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(last.m_object&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
19127 
19128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;make&#32;sure&#32;iterator&#32;fits&#32;the&#32;current&#32;value</emphasis>
19129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>.m_object&#32;!=&#32;last.m_object))
19130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
19131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1invalid__iterator_1af6e8410249ce3252f5e7294cd4ef0a28">invalid_iterator::create</link>(201,&#32;<emphasis role="stringliteral">&quot;iterators&#32;are&#32;not&#32;compatible&quot;</emphasis>,&#32;<emphasis role="keyword">nullptr</emphasis>));
19132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
19133 
19134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;copy&#32;type&#32;from&#32;first&#32;iterator</emphasis>
19135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_type&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>.m_object-&gt;m_type;
19136 
19137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;if&#32;iterator&#32;range&#32;is&#32;complete&#32;for&#32;primitive&#32;values</emphasis>
19138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(m_type)
19139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
19140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::boolean:
19141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_float:
19142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_integer:
19143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_unsigned:
19144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::string:
19145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
19146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>.m_it.primitive_iterator.is_begin()
19147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;!last.m_it.primitive_iterator.is_end()))
19148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
19149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1invalid__iterator_1af6e8410249ce3252f5e7294cd4ef0a28">invalid_iterator::create</link>(204,&#32;<emphasis role="stringliteral">&quot;iterators&#32;out&#32;of&#32;range&quot;</emphasis>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>.m_object));
19150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
19151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
19152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
19153 
19154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::null:
19155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::object:
19156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::array:
19157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::binary:
19158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::discarded:
19159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
19160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
19161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
19162 
19163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(m_type)
19164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
19165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_integer:
19166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
19167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.number_integer&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>.m_object-&gt;m_value.number_integer;
19168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
19169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
19170 
19171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_unsigned:
19172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
19173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.number_unsigned&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>.m_object-&gt;m_value.number_unsigned;
19174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
19175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
19176 
19177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_float:
19178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
19179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.number_float&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>.m_object-&gt;m_value.number_float;
19180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
19181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
19182 
19183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::boolean:
19184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
19185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.boolean&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>.m_object-&gt;m_value.boolean;
19186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
19187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
19188 
19189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::string:
19190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
19191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>&#32;=&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>.m_object-&gt;m_value.string;
19192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
19193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
19194 
19195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::object:
19196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
19197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object&#32;=&#32;create&lt;object_t&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>.m_it.object_iterator,
19198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;last.m_it.object_iterator);
19199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
19200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
19201 
19202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::array:
19203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
19204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array&#32;=&#32;create&lt;array_t&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>.m_it.array_iterator,
19205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;last.m_it.array_iterator);
19206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
19207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
19208 
19209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::binary:
19210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
19211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>&#32;=&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>.m_object-&gt;m_value.binary;
19212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
19213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
19214 
19215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::null:
19216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::discarded:
19217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
19218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1invalid__iterator_1af6e8410249ce3252f5e7294cd4ef0a28">invalid_iterator::create</link>(206,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;cannot&#32;construct&#32;with&#32;iterators&#32;from&#32;&quot;</emphasis>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>.m_object-&gt;type_name()),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>.m_object));
19219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
19220 
19221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_parents();
19222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert_invariant();
19223 &#32;&#32;&#32;&#32;}
19224 
19225 
19227 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;other&#32;constructors&#32;and&#32;destructor&#32;//</emphasis>
19229 
19230 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;JsonRef,
19231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t&lt;detail::conjunction&lt;detail::is_json_ref&lt;JsonRef&gt;</link>,
19232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_same&lt;typename&#32;JsonRef::value_type,&#32;basic_json&gt;&gt;<link linkend="_classvalue">::value</link>,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&#32;&gt;
19233 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a28524e9c443076ea6dccff8e391354ed">basic_json</link>(<emphasis role="keyword">const</emphasis>&#32;JsonRef&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref</link>)&#32;:&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref</link>.moved_or_copied())&#32;{}
19234 
19237 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a603be713183ad63dd8c9e1052c606004">basic_json</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&#32;other)
19238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;m_type(other.m_type)
19239 &#32;&#32;&#32;&#32;{
19240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;of&#32;passed&#32;value&#32;is&#32;valid</emphasis>
19241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;other.assert_invariant();
19242 
19243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(m_type)
19244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
19245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::object:
19246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
19247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>&#32;=&#32;*other.<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object;
19248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
19249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
19250 
19251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::array:
19252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
19253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>&#32;=&#32;*other.<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array;
19254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
19255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
19256 
19257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::string:
19258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
19259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>&#32;=&#32;*other.<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.string;
19260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
19261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
19262 
19263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::boolean:
19264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
19265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>&#32;=&#32;other.<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.boolean;
19266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
19267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
19268 
19269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_integer:
19270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
19271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>&#32;=&#32;other.<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.number_integer;
19272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
19273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
19274 
19275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_unsigned:
19276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
19277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>&#32;=&#32;other.<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.number_unsigned;
19278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
19279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
19280 
19281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_float:
19282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
19283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>&#32;=&#32;other.<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.number_float;
19284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
19285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
19286 
19287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::binary:
19288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
19289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>&#32;=&#32;*other.<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.binary;
19290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
19291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
19292 
19293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::null:
19294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::discarded:
19295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
19296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
19297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
19298 
19299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_parents();
19300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert_invariant();
19301 &#32;&#32;&#32;&#32;}
19302 
19305 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a642afd9d8886e0dedfc0d5cee2baf57f">basic_json</link>(<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&amp;&#32;other)&#32;noexcept
19306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;m_type(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(other.m_type)),
19307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(other.m_value))
19308 &#32;&#32;&#32;&#32;{
19309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;that&#32;passed&#32;value&#32;is&#32;valid</emphasis>
19310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;other.assert_invariant(<emphasis role="keyword">false</emphasis>);
19311 
19312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;invalidate&#32;payload</emphasis>
19313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;other.m_type&#32;=&#32;value_t::null;
19314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;other.m_value&#32;=&#32;{};
19315 
19316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_parents();
19317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert_invariant();
19318 &#32;&#32;&#32;&#32;}
19319 
19322 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&#32;<link linkend="_classnlohmann_1_1basic__json_1a28f87a769eda285eb4492ac1172d8812">operator=</link>(<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;other)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;(
19323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_nothrow_move_constructible&lt;value_t&gt;::value&amp;&amp;
19324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_nothrow_move_assignable&lt;value_t&gt;::value&amp;&amp;
19325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_nothrow_move_constructible&lt;json_value&gt;::value&amp;&amp;
19326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_nothrow_move_assignable&lt;json_value&gt;::value
19327 &#32;&#32;&#32;&#32;)
19328 &#32;&#32;&#32;&#32;{
19329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;that&#32;passed&#32;value&#32;is&#32;valid</emphasis>
19330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;other.assert_invariant();
19331 
19332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>;
19333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1aee0ae36cbfb0336832ebc0374c3c7679">swap</link>(m_type,&#32;other.m_type);
19334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1aee0ae36cbfb0336832ebc0374c3c7679">swap</link>(<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>,&#32;other.m_value);
19335 
19336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_parents();
19337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert_invariant();
19338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
19339 &#32;&#32;&#32;&#32;}
19340 
19343 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a60b643c02a19fa52f99db8215ff58e0f">~basic_json</link>()&#32;noexcept
19344 &#32;&#32;&#32;&#32;{
19345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert_invariant(<emphasis role="keyword">false</emphasis>);
19346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.destroy(m_type);
19347 &#32;&#32;&#32;&#32;}
19348 
19350 
19351 &#32;&#32;<emphasis role="keyword">public</emphasis>:
19353 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;object&#32;inspection&#32;//</emphasis>
19355 
19359 
19362 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a476756fb08e7f2416aad116d137977f4">dump</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;indent&#32;=&#32;-1,
19363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;indent_char&#32;=&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>,
19364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ensure_ascii&#32;=&#32;<emphasis role="keyword">false</emphasis>,
19365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967df">error_handler_t</link>&#32;error_handler&#32;=&#32;error_handler_t::strict)<emphasis role="keyword">&#32;const</emphasis>
19366 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
19367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
19368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;serializer&#32;s(detail::output_adapter&lt;char,&#32;string_t&gt;(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>),&#32;indent_char,&#32;error_handler);
19369 
19370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(indent&#32;&gt;=&#32;0)
19371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
19372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s.dump(*<emphasis role="keyword">this</emphasis>,&#32;<emphasis role="keyword">true</emphasis>,&#32;ensure_ascii,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(indent));
19373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
19374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
19375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
19376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s.dump(*<emphasis role="keyword">this</emphasis>,&#32;<emphasis role="keyword">false</emphasis>,&#32;ensure_ascii,&#32;0);
19377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
19378 
19379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
19380 &#32;&#32;&#32;&#32;}
19381 
19384 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a5b7c4b35a0ad9f97474912a08965d7ad">type</link>()&#32;const&#32;noexcept
19385 &#32;&#32;&#32;&#32;{
19386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_type;
19387 &#32;&#32;&#32;&#32;}
19388 
19391 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a548d2d4013da24e7d7510d90febc80c4">is_primitive</link>()&#32;const&#32;noexcept
19392 &#32;&#32;&#32;&#32;{
19393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1aedc7afad96292b5ab61a2e0ad3067f5f">is_null</link>()&#32;||&#32;<link linkend="_classnlohmann_1_1basic__json_1ab303d17366c26fca12242c7f8def1bb7">is_string</link>()&#32;||&#32;<link linkend="_classnlohmann_1_1basic__json_1a911b11e855e685fa59ea1d111490b36b">is_boolean</link>()&#32;||&#32;<link linkend="_classnlohmann_1_1basic__json_1abd47ac8eba63833152795280f75b5851">is_number</link>()&#32;||&#32;<link linkend="_classnlohmann_1_1basic__json_1a9576224f7b3ff812a308e7c1e784ea80">is_binary</link>();
19394 &#32;&#32;&#32;&#32;}
19395 
19398 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a4e05a7d5deec758f1d830741b68b4249">is_structured</link>()&#32;const&#32;noexcept
19399 &#32;&#32;&#32;&#32;{
19400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1ab5b70d60a636b9c5e10f6c8caac60b9e">is_array</link>()&#32;||&#32;<link linkend="_classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa">is_object</link>();
19401 &#32;&#32;&#32;&#32;}
19402 
19405 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1aedc7afad96292b5ab61a2e0ad3067f5f">is_null</link>()&#32;const&#32;noexcept
19406 &#32;&#32;&#32;&#32;{
19407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_type&#32;==&#32;value_t::null;
19408 &#32;&#32;&#32;&#32;}
19409 
19412 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a911b11e855e685fa59ea1d111490b36b">is_boolean</link>()&#32;const&#32;noexcept
19413 &#32;&#32;&#32;&#32;{
19414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_type&#32;==&#32;value_t::boolean;
19415 &#32;&#32;&#32;&#32;}
19416 
19419 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1abd47ac8eba63833152795280f75b5851">is_number</link>()&#32;const&#32;noexcept
19420 &#32;&#32;&#32;&#32;{
19421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1ac4b4acf2c0ad075c0dc125a65c102362">is_number_integer</link>()&#32;||&#32;<link linkend="_classnlohmann_1_1basic__json_1a116cdb9300b56519fc9cf756609296cb">is_number_float</link>();
19422 &#32;&#32;&#32;&#32;}
19423 
19426 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1ac4b4acf2c0ad075c0dc125a65c102362">is_number_integer</link>()&#32;const&#32;noexcept
19427 &#32;&#32;&#32;&#32;{
19428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_type&#32;==&#32;value_t::number_integer&#32;||&#32;m_type&#32;==&#32;value_t::number_unsigned;
19429 &#32;&#32;&#32;&#32;}
19430 
19433 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a5493f2ed1e07b0ece428bd5a47e2fb95">is_number_unsigned</link>()&#32;const&#32;noexcept
19434 &#32;&#32;&#32;&#32;{
19435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_type&#32;==&#32;value_t::number_unsigned;
19436 &#32;&#32;&#32;&#32;}
19437 
19440 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a116cdb9300b56519fc9cf756609296cb">is_number_float</link>()&#32;const&#32;noexcept
19441 &#32;&#32;&#32;&#32;{
19442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_type&#32;==&#32;value_t::number_float;
19443 &#32;&#32;&#32;&#32;}
19444 
19447 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa">is_object</link>()&#32;const&#32;noexcept
19448 &#32;&#32;&#32;&#32;{
19449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_type&#32;==&#32;value_t::object;
19450 &#32;&#32;&#32;&#32;}
19451 
19454 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1ab5b70d60a636b9c5e10f6c8caac60b9e">is_array</link>()&#32;const&#32;noexcept
19455 &#32;&#32;&#32;&#32;{
19456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_type&#32;==&#32;value_t::array;
19457 &#32;&#32;&#32;&#32;}
19458 
19461 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1ab303d17366c26fca12242c7f8def1bb7">is_string</link>()&#32;const&#32;noexcept
19462 &#32;&#32;&#32;&#32;{
19463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_type&#32;==&#32;value_t::string;
19464 &#32;&#32;&#32;&#32;}
19465 
19468 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a9576224f7b3ff812a308e7c1e784ea80">is_binary</link>()&#32;const&#32;noexcept
19469 &#32;&#32;&#32;&#32;{
19470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_type&#32;==&#32;value_t::binary;
19471 &#32;&#32;&#32;&#32;}
19472 
19475 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1aecaaa0613d3f3a5b49b34b02afc5f85d">is_discarded</link>()&#32;const&#32;noexcept
19476 &#32;&#32;&#32;&#32;{
19477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_type&#32;==&#32;value_t::discarded;
19478 &#32;&#32;&#32;&#32;}
19479 
19482 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1ac68cb65a7f3517f0c5b1d3a4967406ad">value_t</link>()&#32;const&#32;noexcept
19483 &#32;&#32;&#32;&#32;{
19484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_type;
19485 &#32;&#32;&#32;&#32;}
19486 
19488 
19489 &#32;&#32;<emphasis role="keyword">private</emphasis>:
19491 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;value&#32;access&#32;//</emphasis>
19493 
19495 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a44fd1a12c9c54623c942b430e7a72937">boolean_t</link>&#32;get_impl(<link linkend="_classnlohmann_1_1basic__json_1a44fd1a12c9c54623c942b430e7a72937">boolean_t</link>*&#32;<emphasis role="comment">/*unused*/</emphasis>)<emphasis role="keyword">&#32;const</emphasis>
19496 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
19497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0">JSON_HEDLEY_LIKELY</link>(<link linkend="_classnlohmann_1_1basic__json_1a911b11e855e685fa59ea1d111490b36b">is_boolean</link>()))
19498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
19499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.boolean;
19500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
19501 
19502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(302,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;type&#32;must&#32;be&#32;boolean,&#32;but&#32;is&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()),&#32;<emphasis role="keyword">this</emphasis>));
19503 &#32;&#32;&#32;&#32;}
19504 
19506 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a38f0955a144fe9589bf68e8dc4cd5c56">object_t</link>*&#32;get_impl_ptr(<link linkend="_classnlohmann_1_1basic__json_1a38f0955a144fe9589bf68e8dc4cd5c56">object_t</link>*&#32;<emphasis role="comment">/*unused*/</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>
19507 &#32;&#32;&#32;&#32;{
19508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa">is_object</link>()&#32;?&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object&#32;:&#32;<emphasis role="keyword">nullptr</emphasis>;
19509 &#32;&#32;&#32;&#32;}
19510 
19512 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a38f0955a144fe9589bf68e8dc4cd5c56">object_t</link>*&#32;get_impl_ptr(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a38f0955a144fe9589bf68e8dc4cd5c56">object_t</link>*&#32;<emphasis role="comment">/*unused*/</emphasis>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
19513 &#32;&#32;&#32;&#32;{
19514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa">is_object</link>()&#32;?&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object&#32;:&#32;<emphasis role="keyword">nullptr</emphasis>;
19515 &#32;&#32;&#32;&#32;}
19516 
19518 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a858c1cf8407bc06494e3a1114a3b73e7">array_t</link>*&#32;get_impl_ptr(<link linkend="_classnlohmann_1_1basic__json_1a858c1cf8407bc06494e3a1114a3b73e7">array_t</link>*&#32;<emphasis role="comment">/*unused*/</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>
19519 &#32;&#32;&#32;&#32;{
19520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1ab5b70d60a636b9c5e10f6c8caac60b9e">is_array</link>()&#32;?&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array&#32;:&#32;<emphasis role="keyword">nullptr</emphasis>;
19521 &#32;&#32;&#32;&#32;}
19522 
19524 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a858c1cf8407bc06494e3a1114a3b73e7">array_t</link>*&#32;get_impl_ptr(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a858c1cf8407bc06494e3a1114a3b73e7">array_t</link>*&#32;<emphasis role="comment">/*unused*/</emphasis>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
19525 &#32;&#32;&#32;&#32;{
19526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1ab5b70d60a636b9c5e10f6c8caac60b9e">is_array</link>()&#32;?&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array&#32;:&#32;<emphasis role="keyword">nullptr</emphasis>;
19527 &#32;&#32;&#32;&#32;}
19528 
19530 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link>*&#32;get_impl_ptr(<link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link>*&#32;<emphasis role="comment">/*unused*/</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>
19531 &#32;&#32;&#32;&#32;{
19532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1ab303d17366c26fca12242c7f8def1bb7">is_string</link>()&#32;?&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.string&#32;:&#32;<emphasis role="keyword">nullptr</emphasis>;
19533 &#32;&#32;&#32;&#32;}
19534 
19536 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link>*&#32;get_impl_ptr(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link>*&#32;<emphasis role="comment">/*unused*/</emphasis>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
19537 &#32;&#32;&#32;&#32;{
19538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1ab303d17366c26fca12242c7f8def1bb7">is_string</link>()&#32;?&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.string&#32;:&#32;<emphasis role="keyword">nullptr</emphasis>;
19539 &#32;&#32;&#32;&#32;}
19540 
19542 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a44fd1a12c9c54623c942b430e7a72937">boolean_t</link>*&#32;get_impl_ptr(<link linkend="_classnlohmann_1_1basic__json_1a44fd1a12c9c54623c942b430e7a72937">boolean_t</link>*&#32;<emphasis role="comment">/*unused*/</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>
19543 &#32;&#32;&#32;&#32;{
19544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a911b11e855e685fa59ea1d111490b36b">is_boolean</link>()&#32;?&#32;&amp;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.boolean&#32;:&#32;<emphasis role="keyword">nullptr</emphasis>;
19545 &#32;&#32;&#32;&#32;}
19546 
19548 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a44fd1a12c9c54623c942b430e7a72937">boolean_t</link>*&#32;get_impl_ptr(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a44fd1a12c9c54623c942b430e7a72937">boolean_t</link>*&#32;<emphasis role="comment">/*unused*/</emphasis>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
19549 &#32;&#32;&#32;&#32;{
19550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a911b11e855e685fa59ea1d111490b36b">is_boolean</link>()&#32;?&#32;&amp;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.boolean&#32;:&#32;<emphasis role="keyword">nullptr</emphasis>;
19551 &#32;&#32;&#32;&#32;}
19552 
19554 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a11e390944da90db83089eb2426a749d3">number_integer_t</link>*&#32;get_impl_ptr(<link linkend="_classnlohmann_1_1basic__json_1a11e390944da90db83089eb2426a749d3">number_integer_t</link>*&#32;<emphasis role="comment">/*unused*/</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>
19555 &#32;&#32;&#32;&#32;{
19556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1ac4b4acf2c0ad075c0dc125a65c102362">is_number_integer</link>()&#32;?&#32;&amp;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.number_integer&#32;:&#32;<emphasis role="keyword">nullptr</emphasis>;
19557 &#32;&#32;&#32;&#32;}
19558 
19560 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a11e390944da90db83089eb2426a749d3">number_integer_t</link>*&#32;get_impl_ptr(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a11e390944da90db83089eb2426a749d3">number_integer_t</link>*&#32;<emphasis role="comment">/*unused*/</emphasis>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
19561 &#32;&#32;&#32;&#32;{
19562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1ac4b4acf2c0ad075c0dc125a65c102362">is_number_integer</link>()&#32;?&#32;&amp;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.number_integer&#32;:&#32;<emphasis role="keyword">nullptr</emphasis>;
19563 &#32;&#32;&#32;&#32;}
19564 
19566 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1ae09af9c23351b7245d9be4d1b2035fef">number_unsigned_t</link>*&#32;get_impl_ptr(<link linkend="_classnlohmann_1_1basic__json_1ae09af9c23351b7245d9be4d1b2035fef">number_unsigned_t</link>*&#32;<emphasis role="comment">/*unused*/</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>
19567 &#32;&#32;&#32;&#32;{
19568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a5493f2ed1e07b0ece428bd5a47e2fb95">is_number_unsigned</link>()&#32;?&#32;&amp;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.number_unsigned&#32;:&#32;<emphasis role="keyword">nullptr</emphasis>;
19569 &#32;&#32;&#32;&#32;}
19570 
19572 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1ae09af9c23351b7245d9be4d1b2035fef">number_unsigned_t</link>*&#32;get_impl_ptr(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1ae09af9c23351b7245d9be4d1b2035fef">number_unsigned_t</link>*&#32;<emphasis role="comment">/*unused*/</emphasis>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
19573 &#32;&#32;&#32;&#32;{
19574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a5493f2ed1e07b0ece428bd5a47e2fb95">is_number_unsigned</link>()&#32;?&#32;&amp;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.number_unsigned&#32;:&#32;<emphasis role="keyword">nullptr</emphasis>;
19575 &#32;&#32;&#32;&#32;}
19576 
19578 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6">number_float_t</link>*&#32;get_impl_ptr(<link linkend="_classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6">number_float_t</link>*&#32;<emphasis role="comment">/*unused*/</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>
19579 &#32;&#32;&#32;&#32;{
19580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a116cdb9300b56519fc9cf756609296cb">is_number_float</link>()&#32;?&#32;&amp;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.number_float&#32;:&#32;<emphasis role="keyword">nullptr</emphasis>;
19581 &#32;&#32;&#32;&#32;}
19582 
19584 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6">number_float_t</link>*&#32;get_impl_ptr(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6">number_float_t</link>*&#32;<emphasis role="comment">/*unused*/</emphasis>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
19585 &#32;&#32;&#32;&#32;{
19586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a116cdb9300b56519fc9cf756609296cb">is_number_float</link>()&#32;?&#32;&amp;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.number_float&#32;:&#32;<emphasis role="keyword">nullptr</emphasis>;
19587 &#32;&#32;&#32;&#32;}
19588 
19590 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1ad6c955145bebde84d93991ffed7cd389">binary_t</link>*&#32;get_impl_ptr(<link linkend="_classnlohmann_1_1basic__json_1ad6c955145bebde84d93991ffed7cd389">binary_t</link>*&#32;<emphasis role="comment">/*unused*/</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>
19591 &#32;&#32;&#32;&#32;{
19592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a9576224f7b3ff812a308e7c1e784ea80">is_binary</link>()&#32;?&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.binary&#32;:&#32;<emphasis role="keyword">nullptr</emphasis>;
19593 &#32;&#32;&#32;&#32;}
19594 
19596 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1ad6c955145bebde84d93991ffed7cd389">binary_t</link>*&#32;get_impl_ptr(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1ad6c955145bebde84d93991ffed7cd389">binary_t</link>*&#32;<emphasis role="comment">/*unused*/</emphasis>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
19597 &#32;&#32;&#32;&#32;{
19598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a9576224f7b3ff812a308e7c1e784ea80">is_binary</link>()&#32;?&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.binary&#32;:&#32;<emphasis role="keyword">nullptr</emphasis>;
19599 &#32;&#32;&#32;&#32;}
19600 
19612 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;ReferenceType,&#32;<emphasis role="keyword">typename</emphasis>&#32;ThisType&gt;
19613 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;ReferenceType&#32;get_ref_impl(ThisType&amp;&#32;obj)
19614 &#32;&#32;&#32;&#32;{
19615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;delegate&#32;the&#32;call&#32;to&#32;get_ptr&lt;&gt;()</emphasis>
19616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>*&#32;ptr&#32;=&#32;obj.template&#32;get_ptr&lt;typename&#32;std::add_pointer&lt;ReferenceType&gt;::type&gt;();
19617 
19618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0">JSON_HEDLEY_LIKELY</link>(ptr&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>))
19619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
19620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*ptr;
19621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
19622 
19623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(303,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;incompatible&#32;ReferenceType&#32;for&#32;get_ref,&#32;actual&#32;type&#32;is&#32;&quot;</emphasis>,&#32;obj.type_name()),&#32;&amp;obj));
19624 &#32;&#32;&#32;&#32;}
19625 
19626 &#32;&#32;<emphasis role="keyword">public</emphasis>:
19630 
19633 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;PointerType,&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;
19634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_pointer&lt;PointerType&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&#32;=&#32;0&gt;
19635 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a85222410e03d8f5c8ff9c78cf9f6b1b6">get_ptr</link>()&#32;noexcept&#32;-&gt;&#32;decltype(<link linkend="_namespacestd">std</link>::declval&lt;basic_json_t&amp;&gt;().get_impl_ptr(<link linkend="_namespacestd">std</link>::declval&lt;PointerType&gt;()))
19636 &#32;&#32;&#32;&#32;{
19637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;delegate&#32;the&#32;call&#32;to&#32;get_impl_ptr&lt;&gt;()</emphasis>
19638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_impl_ptr(<emphasis role="keyword">static_cast&lt;</emphasis>PointerType<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">nullptr</emphasis>));
19639 &#32;&#32;&#32;&#32;}
19640 
19643 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;PointerType,&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&#32;&lt;
19644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_pointer&lt;PointerType&gt;::value&amp;&amp;
19645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_const&lt;typename&#32;std::remove_pointer&lt;PointerType&gt;::type&gt;<link linkend="_classvalue">::value</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&#32;=&#32;0&#32;&gt;
19646 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1afd99a3902a2bb09a306fb854540ae1dd">get_ptr</link>()&#32;const&#32;noexcept&#32;-&gt;&#32;decltype(<link linkend="_namespacestd">std</link>::declval&lt;const&#32;basic_json_t&amp;&gt;().get_impl_ptr(<link linkend="_namespacestd">std</link>::declval&lt;PointerType&gt;()))
19647 &#32;&#32;&#32;&#32;{
19648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;delegate&#32;the&#32;call&#32;to&#32;get_impl_ptr&lt;&gt;()&#32;const</emphasis>
19649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_impl_ptr(<emphasis role="keyword">static_cast&lt;</emphasis>PointerType<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">nullptr</emphasis>));
19650 &#32;&#32;&#32;&#32;}
19651 
19652 &#32;&#32;<emphasis role="keyword">private</emphasis>:
19691 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;ValueType,
19692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&#32;&lt;
19693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1is__default__constructible">detail::is_default_constructible&lt;ValueType&gt;::value</link>&amp;&amp;
19694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1has__from__json">detail::has_from_json&lt;basic_json_t, ValueType&gt;::value</link>,
19695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;&#32;=&#32;0&#32;&gt;
19696 &#32;&#32;&#32;&#32;ValueType&#32;get_impl(<link linkend="_structnlohmann_1_1detail_1_1priority__tag">detail::priority_tag&lt;0&gt;</link>&#32;<emphasis role="comment">/*unused*/</emphasis>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(
19697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSONSerializer&lt;ValueType&gt;::from_json(std::declval&lt;const&#32;basic_json_t&amp;&gt;(),&#32;std::declval&lt;ValueType&amp;&gt;())))
19698 &#32;&#32;&#32;&#32;{
19699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ret&#32;=&#32;ValueType();
19700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSONSerializer&lt;ValueType&gt;::from_json(*<emphasis role="keyword">this</emphasis>,&#32;ret);
19701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
19702 &#32;&#32;&#32;&#32;}
19703 
19734 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;ValueType,
19735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&#32;&lt;
19736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;detail::has_non_default_from_json&lt;basic_json_t,&#32;ValueType&gt;::value,
19737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;&#32;=&#32;0&#32;&gt;
19738 &#32;&#32;&#32;&#32;ValueType&#32;get_impl(detail::priority_tag&lt;1&gt;&#32;<emphasis role="comment">/*unused*/</emphasis>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(
19739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSONSerializer&lt;ValueType&gt;::from_json(std::declval&lt;const&#32;basic_json_t&amp;&gt;())))
19740 &#32;&#32;&#32;&#32;{
19741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;JSONSerializer&lt;ValueType&gt;::from_json(*<emphasis role="keyword">this</emphasis>);
19742 &#32;&#32;&#32;&#32;}
19743 
19759 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,
19760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&#32;&lt;
19761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;detail::is_basic_json&lt;BasicJsonType&gt;::value,
19762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;&#32;=&#32;0&#32;&gt;
19763 &#32;&#32;&#32;&#32;BasicJsonType&#32;get_impl(detail::priority_tag&lt;2&gt;&#32;<emphasis role="comment">/*unused*/</emphasis>)<emphasis role="keyword">&#32;const</emphasis>
19764 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
19765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
19766 &#32;&#32;&#32;&#32;}
19767 
19782 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType,
19783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt;
19784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_same&lt;BasicJsonType,&#32;basic_json_t&gt;::value,
19785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&gt;
19786 &#32;&#32;&#32;&#32;basic_json&#32;get_impl(detail::priority_tag&lt;3&gt;&#32;<emphasis role="comment">/*unused*/</emphasis>)<emphasis role="keyword">&#32;const</emphasis>
19787 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
19788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
19789 &#32;&#32;&#32;&#32;}
19790 
19795 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;PointerType,
19796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt;
19797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_pointer&lt;PointerType&gt;::value,
19798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&gt;
19799 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;get_impl(detail::priority_tag&lt;4&gt;&#32;<emphasis role="comment">/*unused*/</emphasis>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
19800 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(std::declval&lt;const&#32;basic_json_t&amp;&gt;().template&#32;get_ptr&lt;PointerType&gt;())
19801 &#32;&#32;&#32;&#32;{
19802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;delegate&#32;the&#32;call&#32;to&#32;get_ptr</emphasis>
19803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_ptr&lt;PointerType&gt;();
19804 &#32;&#32;&#32;&#32;}
19805 
19806 &#32;&#32;<emphasis role="keyword">public</emphasis>:
19830 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;ValueTypeCV,&#32;<emphasis role="keyword">typename</emphasis>&#32;ValueType&#32;=&#32;detail::uncvref_t&lt;ValueTypeCV&gt;&gt;
19831 <emphasis role="preprocessor">#if&#32;defined(JSON_HAS_CPP_14)</emphasis>
19832 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
19833 <emphasis role="preprocessor">#endif</emphasis>
19834 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1af1650e004db368459b3c0db041b32adc">get</link>()&#32;const&#32;noexcept(
19835 &#32;&#32;&#32;&#32;noexcept(<link linkend="_namespacestd">std</link>::declval&lt;const&#32;basic_json_t&amp;&gt;().template&#32;get_impl&lt;ValueType&gt;(detail::priority_tag&lt;4&gt;&#32;{})))
19836 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(std::declval&lt;const&#32;basic_json_t&amp;&gt;().template&#32;get_impl&lt;ValueType&gt;(<link linkend="_structnlohmann_1_1detail_1_1priority__tag">detail::priority_tag&lt;4&gt;</link>&#32;{}))
19837 &#32;&#32;&#32;&#32;{
19838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&#32;cannot&#32;static_assert&#32;on&#32;ValueTypeCV&#32;being&#32;non-const,&#32;because</emphasis>
19839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;there&#32;is&#32;support&#32;for&#32;get&lt;const&#32;basic_json_t&gt;(),&#32;which&#32;is&#32;why&#32;we</emphasis>
19840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;still&#32;need&#32;the&#32;uncvref</emphasis>
19841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!std::is_reference&lt;ValueTypeCV&gt;::value,
19842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;get()&#32;cannot&#32;be&#32;used&#32;with&#32;reference&#32;types,&#32;you&#32;might&#32;want&#32;to&#32;use&#32;get_ref()&quot;</emphasis>);
19843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_impl&lt;ValueType&gt;(detail::priority_tag&lt;4&gt;&#32;{});
19844 &#32;&#32;&#32;&#32;}
19845 
19873 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;PointerType,&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;
19874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_pointer&lt;PointerType&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&#32;=&#32;0&gt;
19875 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a826e180d2457d114ed4c51f4b0737df8">get</link>()&#32;noexcept&#32;-&gt;&#32;decltype(<link linkend="_namespacestd">std</link>::declval&lt;basic_json_t&amp;&gt;().template&#32;<link linkend="_classnlohmann_1_1basic__json_1a85222410e03d8f5c8ff9c78cf9f6b1b6">get_ptr</link>&lt;PointerType&gt;())
19876 &#32;&#32;&#32;&#32;{
19877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;delegate&#32;the&#32;call&#32;to&#32;get_ptr</emphasis>
19878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_ptr&lt;PointerType&gt;();
19879 &#32;&#32;&#32;&#32;}
19880 
19883 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;ValueType,
19884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&#32;&lt;
19885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!<link linkend="_structnlohmann_1_1detail_1_1is__basic__json">detail::is_basic_json&lt;ValueType&gt;::value</link>&amp;&amp;
19886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1has__from__json">detail::has_from_json&lt;basic_json_t, ValueType&gt;::value</link>,
19887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;&#32;=&#32;0&#32;&gt;
19888 &#32;&#32;&#32;&#32;ValueType&#32;&amp;&#32;<link linkend="_classnlohmann_1_1basic__json_1a3c3fef72afb412c0739d062d27af1c9a">get_to</link>(ValueType&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(
19889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSONSerializer&lt;ValueType&gt;::from_json(std::declval&lt;const&#32;basic_json_t&amp;&gt;(),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)))
19890 &#32;&#32;&#32;&#32;{
19891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSONSerializer&lt;ValueType&gt;::from_json(*<emphasis role="keyword">this</emphasis>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>);
19892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>;
19893 &#32;&#32;&#32;&#32;}
19894 
19895 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;specialization&#32;to&#32;allow&#32;calling&#32;get_to&#32;with&#32;a&#32;basic_json&#32;value</emphasis>
19896 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;see&#32;https://github.com/nlohmann/json/issues/2175</emphasis>
19897 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;ValueType,
19898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&#32;&lt;
19899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1is__basic__json">detail::is_basic_json&lt;ValueType&gt;::value</link>,
19900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&gt;
19901 &#32;&#32;&#32;&#32;ValueType&#32;&amp;&#32;<link linkend="_classnlohmann_1_1basic__json_1a00a17ee748e5d76b1f4bf7fd1d633ec3">get_to</link>(ValueType&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)<emphasis role="keyword">&#32;const</emphasis>
19902 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
19903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
19904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>;
19905 &#32;&#32;&#32;&#32;}
19906 
19907 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;
19908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;std::size_t&#32;N,
19909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;Array&#32;=&#32;T&#32;(&amp;)[N],&#32;<emphasis role="comment">//&#32;NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)</emphasis>
19910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&#32;&lt;
19911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1has__from__json">detail::has_from_json&lt;basic_json_t, Array&gt;::value</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;&#32;=&#32;0&#32;&gt;
19912 &#32;&#32;&#32;&#32;Array&#32;<link linkend="_classnlohmann_1_1basic__json_1a85dd41000e4e7751928fffb44ff4aed4">get_to</link>(T&#32;(&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)[N])&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="comment">//&#32;NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)</emphasis>
19913 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(JSONSerializer&lt;Array&gt;::from_json(
19914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::declval&lt;const&#32;basic_json_t&amp;&gt;(),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)))
19915 &#32;&#32;&#32;&#32;{
19916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSONSerializer&lt;Array&gt;::from_json(*<emphasis role="keyword">this</emphasis>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>);
19917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>;
19918 &#32;&#32;&#32;&#32;}
19919 
19922 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;ReferenceType,&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;
19923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_reference&lt;ReferenceType&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&#32;=&#32;0&gt;
19924 &#32;&#32;&#32;&#32;ReferenceType&#32;<link linkend="_classnlohmann_1_1basic__json_1a14ddc6e0f6d70296bc81f810254076c5">get_ref</link>()
19925 &#32;&#32;&#32;&#32;{
19926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;delegate&#32;call&#32;to&#32;get_ref_impl</emphasis>
19927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_ref_impl&lt;ReferenceType&gt;(*<emphasis role="keyword">this</emphasis>);
19928 &#32;&#32;&#32;&#32;}
19929 
19932 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;ReferenceType,&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&#32;&lt;
19933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_reference&lt;ReferenceType&gt;::value&amp;&amp;
19934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_const&lt;typename&#32;std::remove_reference&lt;ReferenceType&gt;::type&gt;<link linkend="_classvalue">::value</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&#32;=&#32;0&#32;&gt;
19935 &#32;&#32;&#32;&#32;ReferenceType&#32;<link linkend="_classnlohmann_1_1basic__json_1a7f0889072c54f1b899689ed6246238e7">get_ref</link>()<emphasis role="keyword">&#32;const</emphasis>
19936 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
19937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;delegate&#32;call&#32;to&#32;get_ref_impl</emphasis>
19938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_ref_impl&lt;ReferenceType&gt;(*<emphasis role="keyword">this</emphasis>);
19939 &#32;&#32;&#32;&#32;}
19940 
19970 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;ValueType,&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&#32;&lt;
19971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1conjunction">detail::conjunction</link>&#32;&lt;
19972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1negation">detail::negation&lt;std::is_pointer&lt;ValueType&gt;</link>&gt;,
19973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1negation">detail::negation&lt;std::is_same&lt;ValueType, std::nullptr_t&gt;</link>&gt;,
19974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1negation">detail::negation&lt;std::is_same&lt;ValueType, detail::json_ref&lt;basic_json&gt;</link>&gt;&gt;,
19975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1negation">detail::negation&lt;std::is_same&lt;ValueType, typename string_t::value_type&gt;</link>&gt;,
19976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1negation">detail::negation&lt;detail::is_basic_json&lt;ValueType&gt;</link>&gt;,
19977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1negation">detail::negation&lt;std::is_same&lt;ValueType, std::initializer_list&lt;typename string_t::value_type&gt;</link>&gt;&gt;,
19978 
19979 <emphasis role="preprocessor">#if&#32;defined(JSON_HAS_CPP_17)&#32;&amp;&amp;&#32;(defined(__GNUC__)&#32;||&#32;(defined(_MSC_VER)&#32;&amp;&amp;&#32;_MSC_VER&#32;&gt;=&#32;1910&#32;&amp;&amp;&#32;_MSC_VER&#32;&lt;=&#32;1914))</emphasis>
19980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1negation">detail::negation&lt;std::is_same&lt;ValueType, std::string_view&gt;</link>&gt;,
19981 <emphasis role="preprocessor">#endif</emphasis>
19982 <emphasis role="preprocessor">#if&#32;defined(JSON_HAS_CPP_17)</emphasis>
19983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1negation">detail::negation&lt;std::is_same&lt;ValueType, std::any&gt;</link>&gt;,
19984 <emphasis role="preprocessor">#endif</emphasis>
19985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1is__detected__lazy">detail::is_detected_lazy&lt;detail::get_template_function, const basic_json_t&amp;, ValueType&gt;</link>
19986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;<link linkend="_classvalue">::value</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&#32;=&#32;0&#32;&gt;
19987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1aefed8cf27cadeea45f12c6f3db3ce774">JSON_EXPLICIT</link>&#32;<emphasis role="keyword">operator</emphasis>&#32;ValueType()<emphasis role="keyword">&#32;const</emphasis>
19988 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
19989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;delegate&#32;the&#32;call&#32;to&#32;get&lt;&gt;()&#32;const</emphasis>
19990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get&lt;ValueType&gt;</link>();
19991 &#32;&#32;&#32;&#32;}
19992 
19995 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1byte__container__with__subtype">binary_t</link>&amp;&#32;<link linkend="_classnlohmann_1_1basic__json_1a23c2e02101cc62e1aec1d6ddaef0e340">get_binary</link>()
19996 &#32;&#32;&#32;&#32;{
19997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_classnlohmann_1_1basic__json_1a9576224f7b3ff812a308e7c1e784ea80">is_binary</link>())
19998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
19999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(302,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;type&#32;must&#32;be&#32;binary,&#32;but&#32;is&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()),&#32;<emphasis role="keyword">this</emphasis>));
20000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20001 
20002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*get_ptr&lt;binary_t*&gt;();
20003 &#32;&#32;&#32;&#32;}
20004 
20007 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1byte__container__with__subtype">binary_t</link>&amp;&#32;<link linkend="_classnlohmann_1_1basic__json_1a314434d513d15eb576707d4afae3dd64">get_binary</link>()<emphasis role="keyword">&#32;const</emphasis>
20008 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
20009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_classnlohmann_1_1basic__json_1a9576224f7b3ff812a308e7c1e784ea80">is_binary</link>())
20010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(302,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;type&#32;must&#32;be&#32;binary,&#32;but&#32;is&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()),&#32;<emphasis role="keyword">this</emphasis>));
20012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20013 
20014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*get_ptr&lt;const&#32;binary_t*&gt;();
20015 &#32;&#32;&#32;&#32;}
20016 
20018 
20019 
20021 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;element&#32;access&#32;//</emphasis>
20023 
20027 
20030 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">reference</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a52b18a5b7e68652c65b070900c438c6e">at</link>(<link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link>&#32;idx)
20031 &#32;&#32;&#32;&#32;{
20032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;at&#32;only&#32;works&#32;for&#32;arrays</emphasis>
20033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0">JSON_HEDLEY_LIKELY</link>(<link linkend="_classnlohmann_1_1basic__json_1ab5b70d60a636b9c5e10f6c8caac60b9e">is_array</link>()))
20034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a985d3b82445302c57257f6432f261fe9">JSON_TRY</link>
20036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;set_parent(<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array-&gt;at(idx));
20038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6954bec49ed2a2dfb938c1131c82740a">JSON_CATCH</link>&#32;(std::out_of_range&amp;)
20040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;create&#32;better&#32;exception&#32;explanation</emphasis>
20042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1out__of__range_1a4c0af7bdbf4f20e0812900639829028e">out_of_range::create</link>(401,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;array&#32;index&#32;&quot;</emphasis>,&#32;std::to_string(idx),&#32;<emphasis role="stringliteral">&quot;&#32;is&#32;out&#32;of&#32;range&quot;</emphasis>),&#32;<emphasis role="keyword">this</emphasis>));
20043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
20046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(304,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;cannot&#32;use&#32;at()&#32;with&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()),&#32;<emphasis role="keyword">this</emphasis>));
20048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20049 &#32;&#32;&#32;&#32;}
20050 
20053 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1aeb18fe2b8a5dbff4ccf2848de854c3ac">at</link>(<link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link>&#32;idx)<emphasis role="keyword">&#32;const</emphasis>
20054 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
20055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;at&#32;only&#32;works&#32;for&#32;arrays</emphasis>
20056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0">JSON_HEDLEY_LIKELY</link>(<link linkend="_classnlohmann_1_1basic__json_1ab5b70d60a636b9c5e10f6c8caac60b9e">is_array</link>()))
20057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a985d3b82445302c57257f6432f261fe9">JSON_TRY</link>
20059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array-&gt;at(idx);
20061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6954bec49ed2a2dfb938c1131c82740a">JSON_CATCH</link>&#32;(std::out_of_range&amp;)
20063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;create&#32;better&#32;exception&#32;explanation</emphasis>
20065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1out__of__range_1a4c0af7bdbf4f20e0812900639829028e">out_of_range::create</link>(401,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;array&#32;index&#32;&quot;</emphasis>,&#32;std::to_string(idx),&#32;<emphasis role="stringliteral">&quot;&#32;is&#32;out&#32;of&#32;range&quot;</emphasis>),&#32;<emphasis role="keyword">this</emphasis>));
20066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
20069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(304,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;cannot&#32;use&#32;at()&#32;with&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()),&#32;<emphasis role="keyword">this</emphasis>));
20071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20072 &#32;&#32;&#32;&#32;}
20073 
20076 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">reference</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a239e942da82f2597d0cf5ec806f5bc0d">at</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;object_t::key_type&amp;&#32;key)
20077 &#32;&#32;&#32;&#32;{
20078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;at&#32;only&#32;works&#32;for&#32;objects</emphasis>
20079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!<link linkend="_classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa">is_object</link>()))
20080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(304,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;cannot&#32;use&#32;at()&#32;with&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()),&#32;<emphasis role="keyword">this</emphasis>));
20082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20083 
20084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;find(key);
20085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(it&#32;==&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;end())
20086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1out__of__range_1a4c0af7bdbf4f20e0812900639829028e">out_of_range::create</link>(403,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;key&#32;&apos;&quot;</emphasis>,&#32;key,&#32;<emphasis role="stringliteral">&quot;&apos;&#32;not&#32;found&quot;</emphasis>),&#32;<emphasis role="keyword">this</emphasis>));
20088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;set_parent(it-&gt;second);
20090 &#32;&#32;&#32;&#32;}
20091 
20094 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>KeyType,&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt;
20095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a4e8fbfae87f964a99124c7e26c3095fb">detail::is_usable_as_key_type&lt;basic_json_t, KeyType&gt;::value</link>,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&gt;
20096 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">reference</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a34cae92c0d1091a52a246422b9be9a6d">at</link>(KeyType&#32;&amp;&amp;&#32;key)
20097 &#32;&#32;&#32;&#32;{
20098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;at&#32;only&#32;works&#32;for&#32;objects</emphasis>
20099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!<link linkend="_classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa">is_object</link>()))
20100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(304,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;cannot&#32;use&#32;at()&#32;with&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()),&#32;<emphasis role="keyword">this</emphasis>));
20102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20103 
20104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;find(std::forward&lt;KeyType&gt;(key));
20105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(it&#32;==&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;end())
20106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1out__of__range_1a4c0af7bdbf4f20e0812900639829028e">out_of_range::create</link>(403,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;key&#32;&apos;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link>(std::forward&lt;KeyType&gt;(key)),&#32;<emphasis role="stringliteral">&quot;&apos;&#32;not&#32;found&quot;</emphasis>),&#32;<emphasis role="keyword">this</emphasis>));
20108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;set_parent(it-&gt;second);
20110 &#32;&#32;&#32;&#32;}
20111 
20114 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a229964ee10c92ba89ae4fba786fe6b50">at</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;object_t::key_type&amp;&#32;key)<emphasis role="keyword">&#32;const</emphasis>
20115 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
20116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;at&#32;only&#32;works&#32;for&#32;objects</emphasis>
20117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!<link linkend="_classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa">is_object</link>()))
20118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(304,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;cannot&#32;use&#32;at()&#32;with&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()),&#32;<emphasis role="keyword">this</emphasis>));
20120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20121 
20122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;find(key);
20123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(it&#32;==&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;end())
20124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1out__of__range_1a4c0af7bdbf4f20e0812900639829028e">out_of_range::create</link>(403,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;key&#32;&apos;&quot;</emphasis>,&#32;key,&#32;<emphasis role="stringliteral">&quot;&apos;&#32;not&#32;found&quot;</emphasis>),&#32;<emphasis role="keyword">this</emphasis>));
20126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;it-&gt;second;
20128 &#32;&#32;&#32;&#32;}
20129 
20132 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>KeyType,&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt;
20133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a4e8fbfae87f964a99124c7e26c3095fb">detail::is_usable_as_key_type&lt;basic_json_t, KeyType&gt;::value</link>,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&gt;
20134 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a7f25d95cf19bd6b251ada98f4ecbe724">at</link>(KeyType&#32;&amp;&amp;&#32;key)<emphasis role="keyword">&#32;const</emphasis>
20135 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
20136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;at&#32;only&#32;works&#32;for&#32;objects</emphasis>
20137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!<link linkend="_classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa">is_object</link>()))
20138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(304,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;cannot&#32;use&#32;at()&#32;with&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()),&#32;<emphasis role="keyword">this</emphasis>));
20140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20141 
20142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;find(std::forward&lt;KeyType&gt;(key));
20143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(it&#32;==&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;end())
20144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1out__of__range_1a4c0af7bdbf4f20e0812900639829028e">out_of_range::create</link>(403,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;key&#32;&apos;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link>(std::forward&lt;KeyType&gt;(key)),&#32;<emphasis role="stringliteral">&quot;&apos;&#32;not&#32;found&quot;</emphasis>),&#32;<emphasis role="keyword">this</emphasis>));
20146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;it-&gt;second;
20148 &#32;&#32;&#32;&#32;}
20149 
20152 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">reference</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a9ea67fc1ef0ccc42e1d5388fe0416ae5">operator[]</link>(<link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link>&#32;idx)
20153 &#32;&#32;&#32;&#32;{
20154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;implicitly&#32;convert&#32;null&#32;value&#32;to&#32;an&#32;empty&#32;array</emphasis>
20155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classnlohmann_1_1basic__json_1aedc7afad96292b5ab61a2e0ad3067f5f">is_null</link>())
20156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_type&#32;=&#32;value_t::array;
20158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array&#32;=&#32;create&lt;array_t&gt;();
20159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert_invariant();
20160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20161 
20162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;operator[]&#32;only&#32;works&#32;for&#32;arrays</emphasis>
20163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0">JSON_HEDLEY_LIKELY</link>(<link linkend="_classnlohmann_1_1basic__json_1ab5b70d60a636b9c5e10f6c8caac60b9e">is_array</link>()))
20164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;fill&#32;up&#32;array&#32;with&#32;null&#32;values&#32;if&#32;given&#32;idx&#32;is&#32;outside&#32;range</emphasis>
20166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(idx&#32;&gt;=&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array-&gt;size())
20167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20168 <emphasis role="preprocessor">#if&#32;JSON_DIAGNOSTICS</emphasis>
20169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;remember&#32;array&#32;size&#32;&amp;&#32;capacity&#32;before&#32;resizing</emphasis>
20170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;old_size&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array-&gt;size();
20171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;old_capacity&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array-&gt;capacity();
20172 <emphasis role="preprocessor">#endif</emphasis>
20173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array-&gt;resize(idx&#32;+&#32;1);
20174 
20175 <emphasis role="preprocessor">#if&#32;JSON_DIAGNOSTICS</emphasis>
20176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array-&gt;capacity()&#32;!=&#32;old_capacity))
20177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;capacity&#32;has&#32;changed:&#32;update&#32;all&#32;parents</emphasis>
20179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_parents();
20180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
20182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;set&#32;parent&#32;for&#32;values&#32;added&#32;above</emphasis>
20184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_parents(<link linkend="_classnlohmann_1_1basic__json_1a23b495b4c282e4afacf382f5b49af7c7">begin</link>()&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">iterator::difference_type</link><emphasis role="keyword">&gt;</emphasis>(old_size),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">iterator::difference_type</link><emphasis role="keyword">&gt;</emphasis>(idx&#32;+&#32;1&#32;-&#32;old_size));
20185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20186 <emphasis role="preprocessor">#endif</emphasis>
20187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert_invariant();
20188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20189 
20190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array-&gt;operator[](idx);
20191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20192 
20193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(305,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;cannot&#32;use&#32;operator[]&#32;with&#32;a&#32;numeric&#32;argument&#32;with&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()),&#32;<emphasis role="keyword">this</emphasis>));
20194 &#32;&#32;&#32;&#32;}
20195 
20198 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1ad21d96f490fa1aa8605fba8dadcce319">operator[]</link>(<link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link>&#32;idx)<emphasis role="keyword">&#32;const</emphasis>
20199 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
20200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;const&#32;operator[]&#32;only&#32;works&#32;for&#32;arrays</emphasis>
20201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0">JSON_HEDLEY_LIKELY</link>(<link linkend="_classnlohmann_1_1basic__json_1ab5b70d60a636b9c5e10f6c8caac60b9e">is_array</link>()))
20202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array-&gt;operator[](idx);
20204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20205 
20206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(305,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;cannot&#32;use&#32;operator[]&#32;with&#32;a&#32;numeric&#32;argument&#32;with&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()),&#32;<emphasis role="keyword">this</emphasis>));
20207 &#32;&#32;&#32;&#32;}
20208 
20211 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">reference</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a47e4e6a77cf318f924d09d3777c760b7">operator[]</link>(<emphasis role="keyword">typename</emphasis>&#32;object_t::key_type&#32;key)
20212 &#32;&#32;&#32;&#32;{
20213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;implicitly&#32;convert&#32;null&#32;value&#32;to&#32;an&#32;empty&#32;object</emphasis>
20214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classnlohmann_1_1basic__json_1aedc7afad96292b5ab61a2e0ad3067f5f">is_null</link>())
20215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_type&#32;=&#32;value_t::object;
20217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.<link linkend="_classnlohmann_1_1basic__json_1a9a4df356e05415438fadf8a15e583903">object</link>&#32;=&#32;create&lt;object_t&gt;();
20218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert_invariant();
20219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20220 
20221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;operator[]&#32;only&#32;works&#32;for&#32;objects</emphasis>
20222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0">JSON_HEDLEY_LIKELY</link>(<link linkend="_classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa">is_object</link>()))
20223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;emplace(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(key),&#32;<emphasis role="keyword">nullptr</emphasis>);
20225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;set_parent(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.first-&gt;second);
20226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20227 
20228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(305,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;cannot&#32;use&#32;operator[]&#32;with&#32;a&#32;string&#32;argument&#32;with&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()),&#32;<emphasis role="keyword">this</emphasis>));
20229 &#32;&#32;&#32;&#32;}
20230 
20233 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1acb5b489310f4e0ce2d5fb29b73fb59d3">operator[]</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;object_t::key_type&amp;&#32;key)<emphasis role="keyword">&#32;const</emphasis>
20234 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
20235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;const&#32;operator[]&#32;only&#32;works&#32;for&#32;objects</emphasis>
20236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0">JSON_HEDLEY_LIKELY</link>(<link linkend="_classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa">is_object</link>()))
20237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.<link linkend="_classnlohmann_1_1basic__json_1a9a4df356e05415438fadf8a15e583903">object</link>-&gt;<link linkend="_classnlohmann_1_1basic__json_1ae26778239430743a6298b450eb427c65">find</link>(key);
20239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(it&#32;!=&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;end());
20240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;it-&gt;second;
20241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20242 
20243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(305,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;cannot&#32;use&#32;operator[]&#32;with&#32;a&#32;string&#32;argument&#32;with&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()),&#32;<emphasis role="keyword">this</emphasis>));
20244 &#32;&#32;&#32;&#32;}
20245 
20246 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;these&#32;two&#32;functions&#32;resolve&#32;a&#32;(const)&#32;char&#32;*&#32;ambiguity&#32;affecting&#32;Clang&#32;and&#32;MSVC</emphasis>
20247 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(they&#32;seemingly&#32;cannot&#32;be&#32;constrained&#32;to&#32;resolve&#32;the&#32;ambiguity)</emphasis>
20248 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
20249 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">reference</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1abc94831476f7b4d3efe6f2e9036c7188">operator[]</link>(T*&#32;key)
20250 &#32;&#32;&#32;&#32;{
20251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a9ea67fc1ef0ccc42e1d5388fe0416ae5">operator[]</link>(<emphasis role="keyword">typename</emphasis>&#32;object_t::key_type(key));
20252 &#32;&#32;&#32;&#32;}
20253 
20254 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
20255 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a11bbe874496eb7b29a5549e0637de59e">operator[]</link>(T*&#32;key)<emphasis role="keyword">&#32;const</emphasis>
20256 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
20257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a9ea67fc1ef0ccc42e1d5388fe0416ae5">operator[]</link>(<emphasis role="keyword">typename</emphasis>&#32;object_t::key_type(key));
20258 &#32;&#32;&#32;&#32;}
20259 
20262 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>KeyType,&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt;
20263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a4e8fbfae87f964a99124c7e26c3095fb">detail::is_usable_as_key_type&lt;basic_json_t, KeyType&gt;::value</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;&#32;=&#32;0&#32;&gt;
20264 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">reference</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a5975d14500cf07bcdbacce892ebdedef">operator[]</link>(KeyType&#32;&amp;&amp;&#32;key)
20265 &#32;&#32;&#32;&#32;{
20266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;implicitly&#32;convert&#32;null&#32;value&#32;to&#32;an&#32;empty&#32;object</emphasis>
20267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classnlohmann_1_1basic__json_1aedc7afad96292b5ab61a2e0ad3067f5f">is_null</link>())
20268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_type&#32;=&#32;value_t::object;
20270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.<link linkend="_classnlohmann_1_1basic__json_1a9a4df356e05415438fadf8a15e583903">object</link>&#32;=&#32;create&lt;object_t&gt;();
20271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert_invariant();
20272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20273 
20274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;operator[]&#32;only&#32;works&#32;for&#32;objects</emphasis>
20275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0">JSON_HEDLEY_LIKELY</link>(<link linkend="_classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa">is_object</link>()))
20276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;emplace(std::forward&lt;KeyType&gt;(key),&#32;<emphasis role="keyword">nullptr</emphasis>);
20278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;set_parent(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.first-&gt;second);
20279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20280 
20281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(305,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;cannot&#32;use&#32;operator[]&#32;with&#32;a&#32;string&#32;argument&#32;with&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()),&#32;<emphasis role="keyword">this</emphasis>));
20282 &#32;&#32;&#32;&#32;}
20283 
20286 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>KeyType,&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt;
20287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a4e8fbfae87f964a99124c7e26c3095fb">detail::is_usable_as_key_type&lt;basic_json_t, KeyType&gt;::value</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;&#32;=&#32;0&#32;&gt;
20288 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a88d228d3e95d5300bdca64aabc4169b6">operator[]</link>(KeyType&#32;&amp;&amp;&#32;key)<emphasis role="keyword">&#32;const</emphasis>
20289 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
20290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;const&#32;operator[]&#32;only&#32;works&#32;for&#32;objects</emphasis>
20291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0">JSON_HEDLEY_LIKELY</link>(<link linkend="_classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa">is_object</link>()))
20292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.<link linkend="_classnlohmann_1_1basic__json_1a9a4df356e05415438fadf8a15e583903">object</link>-&gt;<link linkend="_classnlohmann_1_1basic__json_1ae26778239430743a6298b450eb427c65">find</link>(std::forward&lt;KeyType&gt;(key));
20294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(it&#32;!=&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;end());
20295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;it-&gt;second;
20296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20297 
20298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(305,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;cannot&#32;use&#32;operator[]&#32;with&#32;a&#32;string&#32;argument&#32;with&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()),&#32;<emphasis role="keyword">this</emphasis>));
20299 &#32;&#32;&#32;&#32;}
20300 
20303 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;this&#32;is&#32;the&#32;value(const&#32;typename&#32;object_t::key_type&amp;)&#32;overload</emphasis>
20304 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">class&#32;</emphasis>KeyType,&#32;<emphasis role="keyword">class&#32;</emphasis>ValueType,&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&#32;&lt;
20305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_same&lt;KeyType,&#32;typename&#32;object_t::key_type&gt;::value
20306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="_structnlohmann_1_1detail_1_1is__getable">detail::is_getable&lt;basic_json_t, ValueType&gt;::value</link>
20307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!std::is_same&lt;value_t,&#32;ValueType&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;&#32;=&#32;0&#32;&gt;
20308 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::decay&lt;ValueType&gt;::type&#32;<link linkend="_classnlohmann_1_1basic__json_1ae7e99d4a3aab802d015f033b126ebef3">value</link>(<emphasis role="keyword">const</emphasis>&#32;KeyType&amp;&#32;key,&#32;ValueType&#32;&amp;&amp;&#32;default_value)<emphasis role="keyword">&#32;const</emphasis>
20309 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
20310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;value&#32;only&#32;works&#32;for&#32;objects</emphasis>
20311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0">JSON_HEDLEY_LIKELY</link>(<link linkend="_classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa">is_object</link>()))
20312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;key&#32;is&#32;found,&#32;return&#32;value&#32;and&#32;given&#32;default&#32;value&#32;otherwise</emphasis>
20314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1ae26778239430743a6298b450eb427c65">find</link>(key);
20315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(it&#32;!=&#32;<link linkend="_classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc">end</link>())
20316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;it-&gt;template&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get&lt;typename std::decay&lt;ValueType&gt;::type</link>&gt;();
20318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20319 
20320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::forward&lt;ValueType&gt;(default_value);
20321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20322 
20323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(306,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;cannot&#32;use&#32;value()&#32;with&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()),&#32;<emphasis role="keyword">this</emphasis>));
20324 &#32;&#32;&#32;&#32;}
20325 
20329 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1adcfdefe95d5c2471a5c97e911d46ee88">value</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;object_t::key_type&amp;&#32;key,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;default_value)<emphasis role="keyword">&#32;const</emphasis>
20330 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
20331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classvalue">value</link>(key,&#32;<link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link>(default_value));
20332 &#32;&#32;&#32;&#32;}
20333 
20334 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;these&#32;two&#32;functions,&#32;in&#32;conjunction&#32;with&#32;value(const&#32;KeyType&#32;&amp;,&#32;ValueType&#32;&amp;&amp;),</emphasis>
20335 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;resolve&#32;an&#32;ambiguity&#32;that&#32;would&#32;otherwise&#32;occur&#32;between&#32;the&#32;json_pointer&#32;and</emphasis>
20336 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;typename&#32;object_t::key_type&#32;&amp;&#32;overloads</emphasis>
20337 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">class&#32;</emphasis>ValueType,&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&#32;&lt;
20338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1is__getable">detail::is_getable&lt;basic_json_t, ValueType&gt;::value</link>
20339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!std::is_same&lt;value_t,&#32;ValueType&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;&#32;=&#32;0&#32;&gt;
20340 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::decay&lt;ValueType&gt;::type&#32;<link linkend="_classnlohmann_1_1basic__json_1a9fc5f71b2f3b22a0cd583f5db145d763">value</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;key,&#32;ValueType&#32;&amp;&amp;&#32;default_value)<emphasis role="keyword">&#32;const</emphasis>
20341 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
20342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classvalue">value</link>(<emphasis role="keyword">typename</emphasis>&#32;object_t::key_type(key),&#32;std::forward&lt;ValueType&gt;(default_value));
20343 &#32;&#32;&#32;&#32;}
20344 
20345 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1aab74fe06c086c9364971aa6425b257e4">value</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;key,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;default_value)<emphasis role="keyword">&#32;const</emphasis>
20346 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
20347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classvalue">value</link>(<emphasis role="keyword">typename</emphasis>&#32;object_t::key_type(key),&#32;<link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link>(default_value));
20348 &#32;&#32;&#32;&#32;}
20349 
20353 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">class&#32;</emphasis>KeyType,&#32;<emphasis role="keyword">class&#32;</emphasis>ValueType,&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&#32;&lt;
20354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1is__getable">detail::is_getable&lt;basic_json_t, ValueType&gt;::value</link>
20355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!std::is_same&lt;value_t,&#32;ValueType&gt;::value
20356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="_namespacenlohmann_1_1detail_1a4e8fbfae87f964a99124c7e26c3095fb">detail::is_usable_as_key_type&lt;basic_json_t, KeyType&gt;::value</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;&#32;=&#32;0&#32;&gt;
20357 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::decay&lt;ValueType&gt;::type&#32;<link linkend="_classnlohmann_1_1basic__json_1a488639de15cb296b94f86fc8e8de752d">value</link>(KeyType&#32;&amp;&amp;&#32;key,&#32;ValueType&#32;&amp;&amp;&#32;default_value)<emphasis role="keyword">&#32;const</emphasis>
20358 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
20359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;value&#32;only&#32;works&#32;for&#32;objects</emphasis>
20360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0">JSON_HEDLEY_LIKELY</link>(<link linkend="_classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa">is_object</link>()))
20361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;key&#32;is&#32;found,&#32;return&#32;value&#32;and&#32;given&#32;default&#32;value&#32;otherwise</emphasis>
20363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1ae26778239430743a6298b450eb427c65">find</link>(std::forward&lt;KeyType&gt;(key));
20364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(it&#32;!=&#32;<link linkend="_classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc">end</link>())
20365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;it-&gt;template&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get&lt;typename std::decay&lt;ValueType&gt;::type</link>&gt;();
20367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20368 
20369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::forward&lt;ValueType&gt;(default_value);
20370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20371 
20372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(306,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;cannot&#32;use&#32;value()&#32;with&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()),&#32;<emphasis role="keyword">this</emphasis>));
20373 &#32;&#32;&#32;&#32;}
20374 
20378 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">class&#32;</emphasis>KeyType,&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&#32;&lt;
20379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!<link linkend="_structnlohmann_1_1detail_1_1is__specialization__of">detail::is_json_pointer&lt;KeyType&gt;::value</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;&#32;=&#32;0&#32;&gt;
20380 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a9fec3e8d89e16c6eeb37d78bddc2469a">value</link>(KeyType&#32;&amp;&amp;&#32;key,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;default_value)<emphasis role="keyword">&#32;const</emphasis>
20381 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
20382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classvalue">value</link>(std::forward&lt;KeyType&gt;(key),&#32;<link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link>(default_value));
20383 &#32;&#32;&#32;&#32;}
20384 
20387 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">class&#32;</emphasis>ValueType,&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&#32;&lt;
20388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1is__getable">detail::is_getable&lt;basic_json_t, ValueType&gt;::value</link>,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&#32;&gt;
20389 &#32;&#32;&#32;&#32;ValueType&#32;<link linkend="_classnlohmann_1_1basic__json_1a36bd6765ccd8aeeeb4e49a766ba639df">value</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&amp;&#32;ptr,&#32;<emphasis role="keyword">const</emphasis>&#32;ValueType&amp;&#32;default_value)<emphasis role="keyword">&#32;const</emphasis>
20390 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
20391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;value&#32;only&#32;works&#32;for&#32;objects</emphasis>
20392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0">JSON_HEDLEY_LIKELY</link>(<link linkend="_classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa">is_object</link>()))
20393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;pointer&#32;resolves&#32;a&#32;value,&#32;return&#32;it&#32;or&#32;use&#32;default&#32;value</emphasis>
20395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a985d3b82445302c57257f6432f261fe9">JSON_TRY</link>
20396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ptr.get_checked(<emphasis role="keyword">this</emphasis>).template&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get&lt;ValueType&gt;</link>();
20398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a5478b7564e65634cc69432ed3cb6490e">JSON_INTERNAL_CATCH</link>&#32;(<link linkend="_classnlohmann_1_1detail_1_1out__of__range">out_of_range</link>&amp;)
20400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;default_value;
20402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20404 
20405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(306,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;cannot&#32;use&#32;value()&#32;with&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()),&#32;<emphasis role="keyword">this</emphasis>));
20406 &#32;&#32;&#32;&#32;}
20407 
20408 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">class&#32;</emphasis>ValueType,&#32;<emphasis role="keyword">class&#32;</emphasis>BasicJsonType,&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&#32;&lt;
20409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structnlohmann_1_1detail_1_1is__getable">detail::is_getable&lt;basic_json_t, ValueType&gt;::value</link>,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&#32;&gt;
20410 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1af0469b867b0ec3a1c4b229ce9d087620">JSON_HEDLEY_DEPRECATED_FOR</link>(3.11.0,&#32;<link linkend="_classnlohmann_1_1json__pointer">basic_json::json_pointer</link>&#32;<link linkend="__classes_2lib_2include_2iso646_8h_1a339a611d7f9dc3a59c359f0da7beaf3c">or</link>&#32;<link linkend="_classnlohmann_1_1json__pointer">nlohmann::json_pointer&lt;basic_json::string_t&gt;</link>)&#32;<emphasis role="comment">//&#32;NOLINT(readability/alt_tokens)</emphasis>
20411 &#32;&#32;&#32;&#32;ValueType&#32;<link linkend="_classvalue">value</link>(const&#32;::<link linkend="_namespacenlohmann">nlohmann</link>::<link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&lt;BasicJsonType&gt;&amp;&#32;ptr,&#32;const&#32;ValueType&amp;&#32;default_value)<emphasis role="keyword">&#32;const</emphasis>
20412 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
20413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classvalue">value</link>(ptr.convert(),&#32;default_value);
20414 &#32;&#32;&#32;&#32;}
20415 
20419 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a5338981b5ad9027c9e54b1c5597f4344">JSON_HEDLEY_NON_NULL</link>(3)
20420 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link>&#32;<link linkend="_classvalue">value</link>(const&#32;<link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&amp;&#32;ptr,&#32;const&#32;<emphasis role="keywordtype">char</emphasis>*&#32;default_value)<emphasis role="keyword">&#32;const</emphasis>
20421 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
20422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classvalue">value</link>(ptr,&#32;<link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link>(default_value));
20423 &#32;&#32;&#32;&#32;}
20424 
20425 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
20426 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1af0469b867b0ec3a1c4b229ce9d087620">JSON_HEDLEY_DEPRECATED_FOR</link>(3.11.0,&#32;<link linkend="_classnlohmann_1_1json__pointer">basic_json::json_pointer</link>&#32;<link linkend="__classes_2lib_2include_2iso646_8h_1a339a611d7f9dc3a59c359f0da7beaf3c">or</link>&#32;<link linkend="_classnlohmann_1_1json__pointer">nlohmann::json_pointer&lt;basic_json::string_t&gt;</link>)&#32;<emphasis role="comment">//&#32;NOLINT(readability/alt_tokens)</emphasis>
20427 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a5338981b5ad9027c9e54b1c5597f4344">JSON_HEDLEY_NON_NULL</link>(3)
20428 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link>&#32;<link linkend="_classvalue">value</link>(const&#32;typename&#32;::<link linkend="_namespacenlohmann">nlohmann</link>::<link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&lt;BasicJsonType&gt;&amp;&#32;ptr,&#32;const&#32;<emphasis role="keywordtype">char</emphasis>*&#32;default_value)<emphasis role="keyword">&#32;const</emphasis>
20429 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
20430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classvalue">value</link>(ptr.convert(),&#32;default_value);
20431 &#32;&#32;&#32;&#32;}
20432 
20435 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">reference</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a5417ca43ae5e7a3a2f82eee2d915c6ed">front</link>()
20436 &#32;&#32;&#32;&#32;{
20437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<link linkend="_classnlohmann_1_1basic__json_1a23b495b4c282e4afacf382f5b49af7c7">begin</link>();
20438 &#32;&#32;&#32;&#32;}
20439 
20442 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a5ac8f974c178cf9326b6765e22f50eb6">front</link>()<emphasis role="keyword">&#32;const</emphasis>
20443 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
20444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<link linkend="_classnlohmann_1_1basic__json_1ae508c13e3ad6ce445bcaf24a2bc7d039">cbegin</link>();
20445 &#32;&#32;&#32;&#32;}
20446 
20449 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">reference</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a30914ad0767ccdc3633f88a906ed7dfa">back</link>()
20450 &#32;&#32;&#32;&#32;{
20451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;tmp&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc">end</link>();
20452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--tmp;
20453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*tmp;
20454 &#32;&#32;&#32;&#32;}
20455 
20458 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1aac965b84ea43ccd8aef9caefef02794a">back</link>()<emphasis role="keyword">&#32;const</emphasis>
20459 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
20460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;tmp&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1a3017cf0f1a4673e904e34cfef62e7758">cend</link>();
20461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--tmp;
20462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*tmp;
20463 &#32;&#32;&#32;&#32;}
20464 
20467 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">class&#32;</emphasis>IteratorType,&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&#32;&lt;
20468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_same&lt;IteratorType,&#32;typename&#32;basic_json_t::iterator&gt;::value&#32;||
20469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_same&lt;IteratorType,&#32;typename&#32;basic_json_t::const_iterator&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;&#32;=&#32;0&#32;&gt;
20470 &#32;&#32;&#32;&#32;IteratorType&#32;<link linkend="_classnlohmann_1_1basic__json_1a494632b69bbe1d0153d3bedad0901b8e">erase</link>(IteratorType&#32;pos)
20471 &#32;&#32;&#32;&#32;{
20472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;make&#32;sure&#32;iterator&#32;fits&#32;the&#32;current&#32;value</emphasis>
20473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(<emphasis role="keyword">this</emphasis>&#32;!=&#32;pos.m_object))
20474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1invalid__iterator_1af6e8410249ce3252f5e7294cd4ef0a28">invalid_iterator::create</link>(202,&#32;<emphasis role="stringliteral">&quot;iterator&#32;does&#32;not&#32;fit&#32;current&#32;value&quot;</emphasis>,&#32;<emphasis role="keyword">this</emphasis>));
20476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20477 
20478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IteratorType&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc">end</link>();
20479 
20480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(m_type)
20481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::boolean:
20483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_float:
20484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_integer:
20485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_unsigned:
20486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::string:
20487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::binary:
20488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!pos.m_it.primitive_iterator.is_begin()))
20490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1invalid__iterator_1af6e8410249ce3252f5e7294cd4ef0a28">invalid_iterator::create</link>(205,&#32;<emphasis role="stringliteral">&quot;iterator&#32;out&#32;of&#32;range&quot;</emphasis>,&#32;<emphasis role="keyword">this</emphasis>));
20492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20493 
20494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classnlohmann_1_1basic__json_1ab303d17366c26fca12242c7f8def1bb7">is_string</link>())
20495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AllocatorType&lt;string_t&gt;&#32;alloc;
20497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::allocator_traits&lt;<emphasis role="keyword">decltype</emphasis>(alloc)&gt;::destroy(alloc,&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.string);
20498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::allocator_traits&lt;<emphasis role="keyword">decltype</emphasis>(alloc)&gt;::deallocate(alloc,&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.string,&#32;1);
20499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.string&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
20500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classnlohmann_1_1basic__json_1a9576224f7b3ff812a308e7c1e784ea80">is_binary</link>())
20502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AllocatorType&lt;binary_t&gt;&#32;alloc;
20504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::allocator_traits&lt;<emphasis role="keyword">decltype</emphasis>(alloc)&gt;::destroy(alloc,&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.binary);
20505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::allocator_traits&lt;<emphasis role="keyword">decltype</emphasis>(alloc)&gt;::deallocate(alloc,&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.binary,&#32;1);
20506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.binary&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
20507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20508 
20509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_type&#32;=&#32;value_t::null;
20510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert_invariant();
20511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
20512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20513 
20514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::object:
20515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.m_it.object_iterator&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;erase(pos.m_it.object_iterator);
20517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
20518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20519 
20520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::array:
20521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.m_it.array_iterator&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array-&gt;erase(pos.m_it.array_iterator);
20523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
20524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20525 
20526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::null:
20527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::discarded:
20528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
20529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(307,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;cannot&#32;use&#32;erase()&#32;with&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()),&#32;<emphasis role="keyword">this</emphasis>));
20530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20531 
20532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
20533 &#32;&#32;&#32;&#32;}
20534 
20537 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">class&#32;</emphasis>IteratorType,&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&#32;&lt;
20538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_same&lt;IteratorType,&#32;typename&#32;basic_json_t::iterator&gt;::value&#32;||
20539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_same&lt;IteratorType,&#32;typename&#32;basic_json_t::const_iterator&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;&#32;=&#32;0&#32;&gt;
20540 &#32;&#32;&#32;&#32;IteratorType&#32;<link linkend="_classnlohmann_1_1basic__json_1a8ac83750e267e37d5d47591eb44cce42">erase</link>(IteratorType&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;IteratorType&#32;last)
20541 &#32;&#32;&#32;&#32;{
20542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;make&#32;sure&#32;iterator&#32;fits&#32;the&#32;current&#32;value</emphasis>
20543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(<emphasis role="keyword">this</emphasis>&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>.m_object&#32;||&#32;<emphasis role="keyword">this</emphasis>&#32;!=&#32;last.m_object))
20544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1invalid__iterator_1af6e8410249ce3252f5e7294cd4ef0a28">invalid_iterator::create</link>(203,&#32;<emphasis role="stringliteral">&quot;iterators&#32;do&#32;not&#32;fit&#32;current&#32;value&quot;</emphasis>,&#32;<emphasis role="keyword">this</emphasis>));
20546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20547 
20548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IteratorType&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc">end</link>();
20549 
20550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(m_type)
20551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::boolean:
20553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_float:
20554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_integer:
20555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_unsigned:
20556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::string:
20557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::binary:
20558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0">JSON_HEDLEY_LIKELY</link>(!<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>.m_it.primitive_iterator.is_begin()
20560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;!last.m_it.primitive_iterator.is_end()))
20561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1invalid__iterator_1af6e8410249ce3252f5e7294cd4ef0a28">invalid_iterator::create</link>(204,&#32;<emphasis role="stringliteral">&quot;iterators&#32;out&#32;of&#32;range&quot;</emphasis>,&#32;<emphasis role="keyword">this</emphasis>));
20563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20564 
20565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classnlohmann_1_1basic__json_1ab303d17366c26fca12242c7f8def1bb7">is_string</link>())
20566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AllocatorType&lt;string_t&gt;&#32;alloc;
20568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::allocator_traits&lt;<emphasis role="keyword">decltype</emphasis>(alloc)&gt;::destroy(alloc,&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.string);
20569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::allocator_traits&lt;<emphasis role="keyword">decltype</emphasis>(alloc)&gt;::deallocate(alloc,&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.string,&#32;1);
20570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.string&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
20571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classnlohmann_1_1basic__json_1a9576224f7b3ff812a308e7c1e784ea80">is_binary</link>())
20573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AllocatorType&lt;binary_t&gt;&#32;alloc;
20575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::allocator_traits&lt;<emphasis role="keyword">decltype</emphasis>(alloc)&gt;::destroy(alloc,&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.binary);
20576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::allocator_traits&lt;<emphasis role="keyword">decltype</emphasis>(alloc)&gt;::deallocate(alloc,&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.binary,&#32;1);
20577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.binary&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
20578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20579 
20580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_type&#32;=&#32;value_t::null;
20581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert_invariant();
20582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
20583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20584 
20585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::object:
20586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.m_it.object_iterator&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;erase(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>.m_it.object_iterator,
20588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;last.m_it.object_iterator);
20589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
20590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20591 
20592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::array:
20593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.m_it.array_iterator&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array-&gt;erase(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>.m_it.array_iterator,
20595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;last.m_it.array_iterator);
20596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
20597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20598 
20599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::null:
20600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::discarded:
20601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
20602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(307,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;cannot&#32;use&#32;erase()&#32;with&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()),&#32;<emphasis role="keyword">this</emphasis>));
20603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20604 
20605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
20606 &#32;&#32;&#32;&#32;}
20607 
20608 &#32;&#32;<emphasis role="keyword">private</emphasis>:
20609 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;KeyType,&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&#32;&lt;
20610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a6512ad13626e93ed63e65817b5fa2abf">detail::has_erase_with_key_type&lt;basic_json_t, KeyType&gt;::value</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;&#32;=&#32;0&#32;&gt;
20611 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link>&#32;erase_internal(KeyType&#32;&amp;&amp;&#32;key)
20612 &#32;&#32;&#32;&#32;{
20613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;this&#32;erase&#32;only&#32;works&#32;for&#32;objects</emphasis>
20614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!<link linkend="_classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa">is_object</link>()))
20615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(307,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;cannot&#32;use&#32;erase()&#32;with&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()),&#32;<emphasis role="keyword">this</emphasis>));
20617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20618 
20619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;erase(std::forward&lt;KeyType&gt;(key));
20620 &#32;&#32;&#32;&#32;}
20621 
20622 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;KeyType,&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&#32;&lt;
20623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!detail::has_erase_with_key_type&lt;basic_json_t,&#32;KeyType&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&#32;&gt;&#32;=&#32;0&#32;&gt;
20624 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link>&#32;erase_internal(KeyType&#32;&amp;&amp;&#32;key)
20625 &#32;&#32;&#32;&#32;{
20626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;this&#32;erase&#32;only&#32;works&#32;for&#32;objects</emphasis>
20627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!<link linkend="_classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa">is_object</link>()))
20628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(307,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;cannot&#32;use&#32;erase()&#32;with&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()),&#32;<emphasis role="keyword">this</emphasis>));
20630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20631 
20632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;find(std::forward&lt;KeyType&gt;(key));
20633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(it&#32;!=&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;end())
20634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;erase(it);
20636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
20637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
20639 &#32;&#32;&#32;&#32;}
20640 
20641 &#32;&#32;<emphasis role="keyword">public</emphasis>:
20642 
20645 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1af72b1c9d1502b02a49a0cb9db9f980ea">erase</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;object_t::key_type&amp;&#32;key)
20646 &#32;&#32;&#32;&#32;{
20647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;indirection&#32;via&#32;erase_internal()&#32;is&#32;added&#32;to&#32;avoid&#32;making&#32;this</emphasis>
20648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;function&#32;a&#32;template&#32;and&#32;thus&#32;de-rank&#32;it&#32;during&#32;overload&#32;resolution</emphasis>
20649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;erase_internal(key);
20650 &#32;&#32;&#32;&#32;}
20651 
20654 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>KeyType,&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt;
20655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a4e8fbfae87f964a99124c7e26c3095fb">detail::is_usable_as_key_type&lt;basic_json_t, KeyType&gt;::value</link>,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&gt;
20656 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1ac7058093dd2ebb55352f996d8aafeda9">erase</link>(KeyType&#32;&amp;&amp;&#32;key)
20657 &#32;&#32;&#32;&#32;{
20658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;erase_internal(std::forward&lt;KeyType&gt;(key));
20659 &#32;&#32;&#32;&#32;}
20660 
20663 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a221b943d3228488c14225e55f726cc26">erase</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link>&#32;idx)
20664 &#32;&#32;&#32;&#32;{
20665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;this&#32;erase&#32;only&#32;works&#32;for&#32;arrays</emphasis>
20666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0">JSON_HEDLEY_LIKELY</link>(<link linkend="_classnlohmann_1_1basic__json_1ab5b70d60a636b9c5e10f6c8caac60b9e">is_array</link>()))
20667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(idx&#32;&gt;=&#32;<link linkend="_classnlohmann_1_1basic__json_1a33c7c8638bb0b12e6d1b69d8106dd2e0">size</link>()))
20669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1out__of__range_1a4c0af7bdbf4f20e0812900639829028e">out_of_range::create</link>(401,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;array&#32;index&#32;&quot;</emphasis>,&#32;std::to_string(idx),&#32;<emphasis role="stringliteral">&quot;&#32;is&#32;out&#32;of&#32;range&quot;</emphasis>),&#32;<emphasis role="keyword">this</emphasis>));
20671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20672 
20673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array-&gt;erase(<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array-&gt;begin()&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classnlohmann_1_1basic__json_1a3d20d11e5dfe95084a76f62eca54fadd">difference_type</link><emphasis role="keyword">&gt;</emphasis>(idx));
20674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
20676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(307,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;cannot&#32;use&#32;erase()&#32;with&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()),&#32;<emphasis role="keyword">this</emphasis>));
20678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20679 &#32;&#32;&#32;&#32;}
20680 
20682 
20683 
20685 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;lookup&#32;//</emphasis>
20687 
20690 
20693 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iterator</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1ae26778239430743a6298b450eb427c65">find</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;object_t::key_type&amp;&#32;key)
20694 &#32;&#32;&#32;&#32;{
20695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc">end</link>();
20696 
20697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa">is_object</link>())
20698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.m_it.object_iterator&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;find(key);
20700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20701 
20702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
20703 &#32;&#32;&#32;&#32;}
20704 
20707 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">const_iterator</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a4968ed582119ae2cd0e31f6983bc9fe2">find</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;object_t::key_type&amp;&#32;key)<emphasis role="keyword">&#32;const</emphasis>
20708 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
20709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1a3017cf0f1a4673e904e34cfef62e7758">cend</link>();
20710 
20711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa">is_object</link>())
20712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.m_it.object_iterator&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;find(key);
20714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20715 
20716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
20717 &#32;&#32;&#32;&#32;}
20718 
20721 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>KeyType,&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt;
20722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a4e8fbfae87f964a99124c7e26c3095fb">detail::is_usable_as_key_type&lt;basic_json_t, KeyType&gt;::value</link>,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&gt;
20723 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iterator</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a1cc27f7d3cc7ecb154dad11be623905b">find</link>(KeyType&#32;&amp;&amp;&#32;key)
20724 &#32;&#32;&#32;&#32;{
20725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc">end</link>();
20726 
20727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa">is_object</link>())
20728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.m_it.object_iterator&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;find(std::forward&lt;KeyType&gt;(key));
20730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20731 
20732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
20733 &#32;&#32;&#32;&#32;}
20734 
20737 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>KeyType,&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt;
20738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a4e8fbfae87f964a99124c7e26c3095fb">detail::is_usable_as_key_type&lt;basic_json_t, KeyType&gt;::value</link>,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&gt;
20739 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">const_iterator</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a6301007cfe3ea117b1279d40eb6257a1">find</link>(KeyType&#32;&amp;&amp;&#32;key)<emphasis role="keyword">&#32;const</emphasis>
20740 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
20741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1a3017cf0f1a4673e904e34cfef62e7758">cend</link>();
20742 
20743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa">is_object</link>())
20744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.m_it.object_iterator&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;find(std::forward&lt;KeyType&gt;(key));
20746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20747 
20748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
20749 &#32;&#32;&#32;&#32;}
20750 
20753 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a417ed5b34ef7f76df01c25183b08638c">count</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;object_t::key_type&amp;&#32;key)<emphasis role="keyword">&#32;const</emphasis>
20754 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
20755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;return&#32;0&#32;for&#32;all&#32;nonobject&#32;types</emphasis>
20756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa">is_object</link>()&#32;?&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;count(key)&#32;:&#32;0;
20757 &#32;&#32;&#32;&#32;}
20758 
20761 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>KeyType,&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt;
20762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a4e8fbfae87f964a99124c7e26c3095fb">detail::is_usable_as_key_type&lt;basic_json_t, KeyType&gt;::value</link>,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&gt;
20763 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1aac18eed2c42abbc8e5c3cf653e49e0df">count</link>(KeyType&#32;&amp;&amp;&#32;key)<emphasis role="keyword">&#32;const</emphasis>
20764 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
20765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;return&#32;0&#32;for&#32;all&#32;nonobject&#32;types</emphasis>
20766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa">is_object</link>()&#32;?&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;count(std::forward&lt;KeyType&gt;(key))&#32;:&#32;0;
20767 &#32;&#32;&#32;&#32;}
20768 
20771 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a6bc44e35c4504e4c78793e1eff5e9fd7">contains</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;object_t::key_type&amp;&#32;key)<emphasis role="keyword">&#32;const</emphasis>
20772 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
20773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa">is_object</link>()&#32;&amp;&amp;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;find(key)&#32;!=&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;end();
20774 &#32;&#32;&#32;&#32;}
20775 
20778 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>KeyType,&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt;
20779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a4e8fbfae87f964a99124c7e26c3095fb">detail::is_usable_as_key_type&lt;basic_json_t, KeyType&gt;::value</link>,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&gt;
20780 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a59461ff8b348aec0234bcd72381f549e">contains</link>(KeyType&#32;&amp;&amp;&#32;key)<emphasis role="keyword">&#32;const</emphasis>
20781 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
20782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa">is_object</link>()&#32;&amp;&amp;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;find(std::forward&lt;KeyType&gt;(key))&#32;!=&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;end();
20783 &#32;&#32;&#32;&#32;}
20784 
20787 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1adb82c1f34c73486e013da71ae369e597">contains</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&amp;&#32;ptr)<emphasis role="keyword">&#32;const</emphasis>
20788 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
20789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ptr.contains(<emphasis role="keyword">this</emphasis>);
20790 &#32;&#32;&#32;&#32;}
20791 
20792 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
20793 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1af0469b867b0ec3a1c4b229ce9d087620">JSON_HEDLEY_DEPRECATED_FOR</link>(3.11.0,&#32;<link linkend="_classnlohmann_1_1json__pointer">basic_json::json_pointer</link>&#32;<link linkend="__classes_2lib_2include_2iso646_8h_1a339a611d7f9dc3a59c359f0da7beaf3c">or</link>&#32;<link linkend="_classnlohmann_1_1json__pointer">nlohmann::json_pointer&lt;basic_json::string_t&gt;</link>)&#32;<emphasis role="comment">//&#32;NOLINT(readability/alt_tokens)</emphasis>
20794 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a6bc44e35c4504e4c78793e1eff5e9fd7">contains</link>(const&#32;typename&#32;::<link linkend="_namespacenlohmann">nlohmann</link>::<link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&lt;BasicJsonType&gt;&#32;ptr)<emphasis role="keyword">&#32;const</emphasis>
20795 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
20796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ptr.contains(<emphasis role="keyword">this</emphasis>);
20797 &#32;&#32;&#32;&#32;}
20798 
20800 
20801 
20803 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;iterators&#32;//</emphasis>
20805 
20808 
20811 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iterator</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a23b495b4c282e4afacf382f5b49af7c7">begin</link>()&#32;noexcept
20812 &#32;&#32;&#32;&#32;{
20813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iterator</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>(<emphasis role="keyword">this</emphasis>);
20814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.set_begin();
20815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
20816 &#32;&#32;&#32;&#32;}
20817 
20820 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">const_iterator</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a4f147be16fcde9f510c4aac89ab511c9">begin</link>()&#32;const&#32;noexcept
20821 &#32;&#32;&#32;&#32;{
20822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1ae508c13e3ad6ce445bcaf24a2bc7d039">cbegin</link>();
20823 &#32;&#32;&#32;&#32;}
20824 
20827 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">const_iterator</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1ae508c13e3ad6ce445bcaf24a2bc7d039">cbegin</link>()&#32;const&#32;noexcept
20828 &#32;&#32;&#32;&#32;{
20829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">const_iterator</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>(<emphasis role="keyword">this</emphasis>);
20830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.set_begin();
20831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
20832 &#32;&#32;&#32;&#32;}
20833 
20836 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iterator</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc">end</link>()&#32;noexcept
20837 &#32;&#32;&#32;&#32;{
20838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iterator</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>(<emphasis role="keyword">this</emphasis>);
20839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.set_end();
20840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
20841 &#32;&#32;&#32;&#32;}
20842 
20845 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">const_iterator</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a82b5b96f86879a3bac0c713d33178551">end</link>()&#32;const&#32;noexcept
20846 &#32;&#32;&#32;&#32;{
20847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a3017cf0f1a4673e904e34cfef62e7758">cend</link>();
20848 &#32;&#32;&#32;&#32;}
20849 
20852 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">const_iterator</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a3017cf0f1a4673e904e34cfef62e7758">cend</link>()&#32;const&#32;noexcept
20853 &#32;&#32;&#32;&#32;{
20854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">const_iterator</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>(<emphasis role="keyword">this</emphasis>);
20855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.set_end();
20856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
20857 &#32;&#32;&#32;&#32;}
20858 
20861 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator">reverse_iterator</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1aff8e38cd973bc94557fa8d36433c0e4c">rbegin</link>()&#32;noexcept
20862 &#32;&#32;&#32;&#32;{
20863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a5b8c0ebedd920b507f4f7ff4e19bf3c6">reverse_iterator</link>(<link linkend="_classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc">end</link>());
20864 &#32;&#32;&#32;&#32;}
20865 
20868 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator">const_reverse_iterator</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1aab1329f44c8301b7679962726a043549">rbegin</link>()&#32;const&#32;noexcept
20869 &#32;&#32;&#32;&#32;{
20870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a044298d189bdf7e4b36492de9811ddd6">crbegin</link>();
20871 &#32;&#32;&#32;&#32;}
20872 
20875 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator">reverse_iterator</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a7a328b29b290cc300345376c54f618cb">rend</link>()&#32;noexcept
20876 &#32;&#32;&#32;&#32;{
20877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a5b8c0ebedd920b507f4f7ff4e19bf3c6">reverse_iterator</link>(<link linkend="_classnlohmann_1_1basic__json_1a23b495b4c282e4afacf382f5b49af7c7">begin</link>());
20878 &#32;&#32;&#32;&#32;}
20879 
20882 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator">const_reverse_iterator</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a2e4cbf41d593d41847b90aea55e5e84d">rend</link>()&#32;const&#32;noexcept
20883 &#32;&#32;&#32;&#32;{
20884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a223480466a0922267d680ec8f0722d58">crend</link>();
20885 &#32;&#32;&#32;&#32;}
20886 
20889 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator">const_reverse_iterator</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a044298d189bdf7e4b36492de9811ddd6">crbegin</link>()&#32;const&#32;noexcept
20890 &#32;&#32;&#32;&#32;{
20891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1aa7dba16ed9ee97380aeb17a207dd919a">const_reverse_iterator</link>(<link linkend="_classnlohmann_1_1basic__json_1a3017cf0f1a4673e904e34cfef62e7758">cend</link>());
20892 &#32;&#32;&#32;&#32;}
20893 
20896 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator">const_reverse_iterator</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a223480466a0922267d680ec8f0722d58">crend</link>()&#32;const&#32;noexcept
20897 &#32;&#32;&#32;&#32;{
20898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1aa7dba16ed9ee97380aeb17a207dd919a">const_reverse_iterator</link>(<link linkend="_classnlohmann_1_1basic__json_1ae508c13e3ad6ce445bcaf24a2bc7d039">cbegin</link>());
20899 &#32;&#32;&#32;&#32;}
20900 
20901 &#32;&#32;<emphasis role="keyword">public</emphasis>:
20907 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1af0469b867b0ec3a1c4b229ce9d087620">JSON_HEDLEY_DEPRECATED_FOR</link>(3.1.0,&#32;<link linkend="_classnlohmann_1_1basic__json_1a02ed1d1f38310ccc2fbb02d2b75387a2">items</link>())
20908 &#32;&#32;&#32;&#32;static&#32;iteration_proxy&lt;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iterator</link>&gt;&#32;<link linkend="_classnlohmann_1_1basic__json_1a7cd832311e7c2f2cf5ca07c4bc4011cd">iterator_wrapper</link>(<link linkend="_classnlohmann_1_1basic__json">reference</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref</link>)&#32;noexcept
20909 &#32;&#32;&#32;&#32;{
20910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref</link>.items();
20911 &#32;&#32;&#32;&#32;}
20912 
20918 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1af0469b867b0ec3a1c4b229ce9d087620">JSON_HEDLEY_DEPRECATED_FOR</link>(3.1.0,&#32;<link linkend="_classnlohmann_1_1basic__json_1a02ed1d1f38310ccc2fbb02d2b75387a2">items</link>())
20919 &#32;&#32;&#32;&#32;static&#32;iteration_proxy&lt;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">const_iterator</link>&gt;&#32;<link linkend="_classnlohmann_1_1basic__json_1a7cd832311e7c2f2cf5ca07c4bc4011cd">iterator_wrapper</link>(<link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref</link>)&#32;noexcept
20920 &#32;&#32;&#32;&#32;{
20921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref</link>.items();
20922 &#32;&#32;&#32;&#32;}
20923 
20926 &#32;&#32;&#32;&#32;iteration_proxy&lt;iterator&gt;&#32;<link linkend="_classnlohmann_1_1basic__json_1a02ed1d1f38310ccc2fbb02d2b75387a2">items</link>()&#32;noexcept
20927 &#32;&#32;&#32;&#32;{
20928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iteration_proxy&lt;iterator&gt;(*<emphasis role="keyword">this</emphasis>);
20929 &#32;&#32;&#32;&#32;}
20930 
20933 &#32;&#32;&#32;&#32;iteration_proxy&lt;const_iterator&gt;&#32;<link linkend="_classnlohmann_1_1basic__json_1a8539f7ff4cfa06ce362484ef99c09604">items</link>()&#32;const&#32;noexcept
20934 &#32;&#32;&#32;&#32;{
20935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iteration_proxy&lt;const_iterator&gt;(*<emphasis role="keyword">this</emphasis>);
20936 &#32;&#32;&#32;&#32;}
20937 
20939 
20940 
20942 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;capacity&#32;//</emphasis>
20944 
20947 
20950 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a5c99855f3e35ff35558cb46139b785f8">empty</link>()&#32;const&#32;noexcept
20951 &#32;&#32;&#32;&#32;{
20952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(m_type)
20953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::null:
20955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;null&#32;values&#32;are&#32;empty</emphasis>
20957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
20958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20959 
20960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::array:
20961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;delegate&#32;call&#32;to&#32;array_t::empty()</emphasis>
20963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array-&gt;empty();
20964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20965 
20966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::object:
20967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;delegate&#32;call&#32;to&#32;object_t::empty()</emphasis>
20969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;empty();
20970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20971 
20972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::string:
20973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::boolean:
20974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_integer:
20975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_unsigned:
20976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_float:
20977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::binary:
20978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::discarded:
20979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
20980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;all&#32;other&#32;types&#32;are&#32;nonempty</emphasis>
20982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
20983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20985 &#32;&#32;&#32;&#32;}
20986 
20989 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a33c7c8638bb0b12e6d1b69d8106dd2e0">size</link>()&#32;const&#32;noexcept
20990 &#32;&#32;&#32;&#32;{
20991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(m_type)
20992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::null:
20994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
20995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;null&#32;values&#32;are&#32;empty</emphasis>
20996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
20997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
20998 
20999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::array:
21000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;delegate&#32;call&#32;to&#32;array_t::size()</emphasis>
21002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array-&gt;size();
21003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21004 
21005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::object:
21006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;delegate&#32;call&#32;to&#32;object_t::size()</emphasis>
21008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;size();
21009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21010 
21011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::string:
21012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::boolean:
21013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_integer:
21014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_unsigned:
21015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_float:
21016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::binary:
21017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::discarded:
21018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
21019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;all&#32;other&#32;types&#32;have&#32;size&#32;1</emphasis>
21021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
21022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21024 &#32;&#32;&#32;&#32;}
21025 
21028 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a1b46c6631e30b8394e89bd1546d69736">max_size</link>()&#32;const&#32;noexcept
21029 &#32;&#32;&#32;&#32;{
21030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(m_type)
21031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::array:
21033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;delegate&#32;call&#32;to&#32;array_t::max_size()</emphasis>
21035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array-&gt;max_size();
21036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21037 
21038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::object:
21039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;delegate&#32;call&#32;to&#32;object_t::max_size()</emphasis>
21041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;max_size();
21042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21043 
21044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::null:
21045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::string:
21046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::boolean:
21047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_integer:
21048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_unsigned:
21049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_float:
21050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::binary:
21051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::discarded:
21052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
21053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;all&#32;other&#32;types&#32;have&#32;max_size()&#32;==&#32;size()</emphasis>
21055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a33c7c8638bb0b12e6d1b69d8106dd2e0">size</link>();
21056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21058 &#32;&#32;&#32;&#32;}
21059 
21061 
21062 
21064 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;modifiers&#32;//</emphasis>
21066 
21069 
21072 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a946cc8f30d8b1d6609b57387b647fe53">clear</link>()&#32;noexcept
21073 &#32;&#32;&#32;&#32;{
21074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(m_type)
21075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_integer:
21077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.number_integer&#32;=&#32;0;
21079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
21080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21081 
21082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_unsigned:
21083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.number_unsigned&#32;=&#32;0;
21085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
21086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21087 
21088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_float:
21089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.number_float&#32;=&#32;0.0;
21091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
21092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21093 
21094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::boolean:
21095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.boolean&#32;=&#32;<emphasis role="keyword">false</emphasis>;
21097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
21098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21099 
21100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::string:
21101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.string-&gt;clear();
21103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
21104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21105 
21106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::binary:
21107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.binary-&gt;clear();
21109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
21110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21111 
21112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::array:
21113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array-&gt;clear();
21115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
21116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21117 
21118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::object:
21119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;clear();
21121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
21122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21123 
21124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::null:
21125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::discarded:
21126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
21127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
21128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21129 &#32;&#32;&#32;&#32;}
21130 
21133 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1ab9e0253c92736db021840105d374c4c4">push_back</link>(<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
21134 &#32;&#32;&#32;&#32;{
21135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;push_back&#32;only&#32;works&#32;for&#32;null&#32;objects&#32;or&#32;arrays</emphasis>
21136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!(<link linkend="_classnlohmann_1_1basic__json_1aedc7afad96292b5ab61a2e0ad3067f5f">is_null</link>()&#32;||&#32;<link linkend="_classnlohmann_1_1basic__json_1ab5b70d60a636b9c5e10f6c8caac60b9e">is_array</link>())))
21137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(308,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;cannot&#32;use&#32;push_back()&#32;with&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()),&#32;<emphasis role="keyword">this</emphasis>));
21139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21140 
21141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;transform&#32;null&#32;object&#32;into&#32;an&#32;array</emphasis>
21142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classnlohmann_1_1basic__json_1aedc7afad96292b5ab61a2e0ad3067f5f">is_null</link>())
21143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_type&#32;=&#32;value_t::array;
21145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>&#32;=&#32;value_t::array;
21146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert_invariant();
21147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21148 
21149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;add&#32;element&#32;to&#32;array&#32;(move&#32;semantics)</emphasis>
21150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;old_capacity&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array-&gt;capacity();
21151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array-&gt;push_back(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>));
21152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_parent(<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array-&gt;back(),&#32;old_capacity);
21153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;val&#32;is&#32;moved&#32;from,&#32;basic_json&#32;move&#32;constructor&#32;marks&#32;it&#32;null,&#32;so&#32;we&#32;do&#32;not&#32;call&#32;the&#32;destructor</emphasis>
21154 &#32;&#32;&#32;&#32;}
21155 
21158 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">reference</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a40226d9c84fcb9cb948ae0c27b842c57">operator+=</link>(<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
21159 &#32;&#32;&#32;&#32;{
21160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1ab9e0253c92736db021840105d374c4c4">push_back</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>));
21161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
21162 &#32;&#32;&#32;&#32;}
21163 
21166 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a3405d38087e13994a5a4556065b0be6d">push_back</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
21167 &#32;&#32;&#32;&#32;{
21168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;push_back&#32;only&#32;works&#32;for&#32;null&#32;objects&#32;or&#32;arrays</emphasis>
21169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!(<link linkend="_classnlohmann_1_1basic__json_1aedc7afad96292b5ab61a2e0ad3067f5f">is_null</link>()&#32;||&#32;<link linkend="_classnlohmann_1_1basic__json_1ab5b70d60a636b9c5e10f6c8caac60b9e">is_array</link>())))
21170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(308,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;cannot&#32;use&#32;push_back()&#32;with&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()),&#32;<emphasis role="keyword">this</emphasis>));
21172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21173 
21174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;transform&#32;null&#32;object&#32;into&#32;an&#32;array</emphasis>
21175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classnlohmann_1_1basic__json_1aedc7afad96292b5ab61a2e0ad3067f5f">is_null</link>())
21176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_type&#32;=&#32;value_t::array;
21178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>&#32;=&#32;value_t::array;
21179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert_invariant();
21180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21181 
21182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;add&#32;element&#32;to&#32;array</emphasis>
21183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;old_capacity&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array-&gt;capacity();
21184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array-&gt;push_back(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
21185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_parent(<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array-&gt;back(),&#32;old_capacity);
21186 &#32;&#32;&#32;&#32;}
21187 
21190 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">reference</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1af643a4baa91f484b11af0e4437183115">operator+=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
21191 &#32;&#32;&#32;&#32;{
21192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1ab9e0253c92736db021840105d374c4c4">push_back</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
21193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
21194 &#32;&#32;&#32;&#32;}
21195 
21198 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1ad704839e6a5195e3b76f22e2b9aa63ee">push_back</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;object_t::value_type&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
21199 &#32;&#32;&#32;&#32;{
21200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;push_back&#32;only&#32;works&#32;for&#32;null&#32;objects&#32;or&#32;objects</emphasis>
21201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!(<link linkend="_classnlohmann_1_1basic__json_1aedc7afad96292b5ab61a2e0ad3067f5f">is_null</link>()&#32;||&#32;<link linkend="_classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa">is_object</link>())))
21202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(308,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;cannot&#32;use&#32;push_back()&#32;with&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()),&#32;<emphasis role="keyword">this</emphasis>));
21204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21205 
21206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;transform&#32;null&#32;object&#32;into&#32;an&#32;object</emphasis>
21207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classnlohmann_1_1basic__json_1aedc7afad96292b5ab61a2e0ad3067f5f">is_null</link>())
21208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_type&#32;=&#32;value_t::object;
21210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>&#32;=&#32;value_t::object;
21211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert_invariant();
21212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21213 
21214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;add&#32;element&#32;to&#32;object</emphasis>
21215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;insert(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
21216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_parent(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>.first-&gt;second);
21217 &#32;&#32;&#32;&#32;}
21218 
21221 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">reference</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1ae300819781bce2193369609457f70f30">operator+=</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;object_t::value_type&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
21222 &#32;&#32;&#32;&#32;{
21223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1ab9e0253c92736db021840105d374c4c4">push_back</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
21224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
21225 &#32;&#32;&#32;&#32;}
21226 
21229 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a4567cf75f19b1efca090f75d7a8a350a">push_back</link>(<link linkend="_classnlohmann_1_1basic__json_1ac569f292a070dfd2f6b69c16e746095a">initializer_list_t</link>&#32;init)
21230 &#32;&#32;&#32;&#32;{
21231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa">is_object</link>()&#32;&amp;&amp;&#32;init.size()&#32;==&#32;2&#32;&amp;&amp;&#32;(*init.begin())-&gt;is_string())
21232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&amp;&#32;key&#32;=&#32;init.begin()-&gt;moved_or_copied();
21234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1ab9e0253c92736db021840105d374c4c4">push_back</link>(<emphasis role="keyword">typename</emphasis>&#32;object_t::value_type(
21235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(key.get_ref&lt;<link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link>&amp;&gt;()),&#32;(init.begin()&#32;+&#32;1)-&gt;moved_or_copied()));
21236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
21238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1ab9e0253c92736db021840105d374c4c4">push_back</link>(<link linkend="_classnlohmann_1_1basic__json">basic_json</link>(init));
21240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21241 &#32;&#32;&#32;&#32;}
21242 
21245 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">reference</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1ac48302a8b4f8c2a6e30c2a7bff6abc49">operator+=</link>(<link linkend="_classnlohmann_1_1basic__json_1ac569f292a070dfd2f6b69c16e746095a">initializer_list_t</link>&#32;init)
21246 &#32;&#32;&#32;&#32;{
21247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1ab9e0253c92736db021840105d374c4c4">push_back</link>(init);
21248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
21249 &#32;&#32;&#32;&#32;}
21250 
21253 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>...&#32;Args&gt;
21254 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">reference</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a15c0a5db4fb12d49433801bbe6436bfb">emplace_back</link>(Args&amp;&amp;&#32;...&#32;args)
21255 &#32;&#32;&#32;&#32;{
21256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;emplace_back&#32;only&#32;works&#32;for&#32;null&#32;objects&#32;or&#32;arrays</emphasis>
21257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!(<link linkend="_classnlohmann_1_1basic__json_1aedc7afad96292b5ab61a2e0ad3067f5f">is_null</link>()&#32;||&#32;<link linkend="_classnlohmann_1_1basic__json_1ab5b70d60a636b9c5e10f6c8caac60b9e">is_array</link>())))
21258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(311,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;cannot&#32;use&#32;emplace_back()&#32;with&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()),&#32;<emphasis role="keyword">this</emphasis>));
21260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21261 
21262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;transform&#32;null&#32;object&#32;into&#32;an&#32;array</emphasis>
21263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classnlohmann_1_1basic__json_1aedc7afad96292b5ab61a2e0ad3067f5f">is_null</link>())
21264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_type&#32;=&#32;value_t::array;
21266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>&#32;=&#32;value_t::array;
21267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert_invariant();
21268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21269 
21270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;add&#32;element&#32;to&#32;array&#32;(perfect&#32;forwarding)</emphasis>
21271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;old_capacity&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array-&gt;capacity();
21272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array-&gt;emplace_back(std::forward&lt;Args&gt;(args)...);
21273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;set_parent(<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array-&gt;back(),&#32;old_capacity);
21274 &#32;&#32;&#32;&#32;}
21275 
21278 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>...&#32;Args&gt;
21279 &#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;bool&gt;&#32;<link linkend="_classnlohmann_1_1basic__json_1af244c096197a233edba4c83200ae66ac">emplace</link>(Args&amp;&amp;&#32;...&#32;args)
21280 &#32;&#32;&#32;&#32;{
21281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;emplace&#32;only&#32;works&#32;for&#32;null&#32;objects&#32;or&#32;arrays</emphasis>
21282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!(<link linkend="_classnlohmann_1_1basic__json_1aedc7afad96292b5ab61a2e0ad3067f5f">is_null</link>()&#32;||&#32;<link linkend="_classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa">is_object</link>())))
21283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(311,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;cannot&#32;use&#32;emplace()&#32;with&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()),&#32;<emphasis role="keyword">this</emphasis>));
21285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21286 
21287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;transform&#32;null&#32;object&#32;into&#32;an&#32;object</emphasis>
21288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classnlohmann_1_1basic__json_1aedc7afad96292b5ab61a2e0ad3067f5f">is_null</link>())
21289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_type&#32;=&#32;value_t::object;
21291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>&#32;=&#32;value_t::object;
21292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert_invariant();
21293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21294 
21295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;add&#32;element&#32;to&#32;array&#32;(perfect&#32;forwarding)</emphasis>
21296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;emplace(std::forward&lt;Args&gt;(args)...);
21297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_parent(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>.first-&gt;second);
21298 
21299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;create&#32;result&#32;iterator&#32;and&#32;set&#32;iterator&#32;to&#32;the&#32;result&#32;of&#32;emplace</emphasis>
21300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1a23b495b4c282e4afacf382f5b49af7c7">begin</link>();
21301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;it.m_it.object_iterator&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>.first;
21302 
21303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;return&#32;pair&#32;of&#32;iterator&#32;and&#32;boolean</emphasis>
21304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{it,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>.second};
21305 &#32;&#32;&#32;&#32;}
21306 
21310 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;Args&gt;
21311 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iterator</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1ab5c8034e997c5b852b92bdc6a3f70994">insert_iterator</link>(<link linkend="_classnlohmann_1_1detail_1_1iter__impl">const_iterator</link>&#32;pos,&#32;Args&amp;&amp;&#32;...&#32;args)
21312 &#32;&#32;&#32;&#32;{
21313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iterator</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>(<emphasis role="keyword">this</emphasis>);
21314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
21315 
21316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;insert_pos&#32;=&#32;std::distance(<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array-&gt;begin(),&#32;pos.<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a8294a6e6f01b58e1cce8fbae66a50b5d">array_iterator</link>);
21317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array-&gt;insert(pos.<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a8294a6e6f01b58e1cce8fbae66a50b5d">array_iterator</link>,&#32;std::forward&lt;Args&gt;(args)...);
21318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.m_it.array_iterator&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array-&gt;begin()&#32;+&#32;insert_pos;
21319 
21320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;could&#32;have&#32;been&#32;written&#32;as:</emphasis>
21321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;result.m_it.array_iterator&#32;=&#32;m_value.array-&gt;insert(pos.m_it.array_iterator,&#32;cnt,&#32;val);</emphasis>
21322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;but&#32;the&#32;return&#32;value&#32;of&#32;insert&#32;is&#32;missing&#32;in&#32;GCC&#32;4.8,&#32;so&#32;it&#32;is&#32;written&#32;this&#32;way&#32;instead.</emphasis>
21323 
21324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_parents();
21325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
21326 &#32;&#32;&#32;&#32;}
21327 
21330 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iterator</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1aeb86e8478e20d95970a8b61ff01dce3b">insert</link>(<link linkend="_classnlohmann_1_1detail_1_1iter__impl">const_iterator</link>&#32;pos,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
21331 &#32;&#32;&#32;&#32;{
21332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;insert&#32;only&#32;works&#32;for&#32;arrays</emphasis>
21333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0">JSON_HEDLEY_LIKELY</link>(<link linkend="_classnlohmann_1_1basic__json_1ab5b70d60a636b9c5e10f6c8caac60b9e">is_array</link>()))
21334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;if&#32;iterator&#32;pos&#32;fits&#32;to&#32;this&#32;JSON&#32;value</emphasis>
21336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(pos.m_object&#32;!=&#32;<emphasis role="keyword">this</emphasis>))
21337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1invalid__iterator_1af6e8410249ce3252f5e7294cd4ef0a28">invalid_iterator::create</link>(202,&#32;<emphasis role="stringliteral">&quot;iterator&#32;does&#32;not&#32;fit&#32;current&#32;value&quot;</emphasis>,&#32;<emphasis role="keyword">this</emphasis>));
21339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21340 
21341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;insert&#32;to&#32;array&#32;and&#32;return&#32;iterator</emphasis>
21342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1ab5c8034e997c5b852b92bdc6a3f70994">insert_iterator</link>(pos,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
21343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21344 
21345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(309,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;cannot&#32;use&#32;insert()&#32;with&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()),&#32;<emphasis role="keyword">this</emphasis>));
21346 &#32;&#32;&#32;&#32;}
21347 
21350 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iterator</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a9c5b9de8a4a759861cb600b38a6c81b1">insert</link>(<link linkend="_classnlohmann_1_1detail_1_1iter__impl">const_iterator</link>&#32;pos,&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
21351 &#32;&#32;&#32;&#32;{
21352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1aeb86e8478e20d95970a8b61ff01dce3b">insert</link>(pos,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
21353 &#32;&#32;&#32;&#32;}
21354 
21357 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iterator</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a71e197e6cc78c3960011f68a75f8ef22">insert</link>(<link linkend="_classnlohmann_1_1detail_1_1iter__impl">const_iterator</link>&#32;pos,&#32;<link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link>&#32;cnt,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
21358 &#32;&#32;&#32;&#32;{
21359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;insert&#32;only&#32;works&#32;for&#32;arrays</emphasis>
21360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0">JSON_HEDLEY_LIKELY</link>(<link linkend="_classnlohmann_1_1basic__json_1ab5b70d60a636b9c5e10f6c8caac60b9e">is_array</link>()))
21361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;if&#32;iterator&#32;pos&#32;fits&#32;to&#32;this&#32;JSON&#32;value</emphasis>
21363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(pos.m_object&#32;!=&#32;<emphasis role="keyword">this</emphasis>))
21364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1invalid__iterator_1af6e8410249ce3252f5e7294cd4ef0a28">invalid_iterator::create</link>(202,&#32;<emphasis role="stringliteral">&quot;iterator&#32;does&#32;not&#32;fit&#32;current&#32;value&quot;</emphasis>,&#32;<emphasis role="keyword">this</emphasis>));
21366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21367 
21368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;insert&#32;to&#32;array&#32;and&#32;return&#32;iterator</emphasis>
21369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1ab5c8034e997c5b852b92bdc6a3f70994">insert_iterator</link>(pos,&#32;cnt,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
21370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21371 
21372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(309,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;cannot&#32;use&#32;insert()&#32;with&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()),&#32;<emphasis role="keyword">this</emphasis>));
21373 &#32;&#32;&#32;&#32;}
21374 
21377 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iterator</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a8137d5471edcd71606e42155ed9c23e2">insert</link>(<link linkend="_classnlohmann_1_1detail_1_1iter__impl">const_iterator</link>&#32;pos,&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">const_iterator</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">const_iterator</link>&#32;last)
21378 &#32;&#32;&#32;&#32;{
21379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;insert&#32;only&#32;works&#32;for&#32;arrays</emphasis>
21380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!<link linkend="_classnlohmann_1_1basic__json_1ab5b70d60a636b9c5e10f6c8caac60b9e">is_array</link>()))
21381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(309,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;cannot&#32;use&#32;insert()&#32;with&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()),&#32;<emphasis role="keyword">this</emphasis>));
21383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21384 
21385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;if&#32;iterator&#32;pos&#32;fits&#32;to&#32;this&#32;JSON&#32;value</emphasis>
21386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(pos.m_object&#32;!=&#32;<emphasis role="keyword">this</emphasis>))
21387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1invalid__iterator_1af6e8410249ce3252f5e7294cd4ef0a28">invalid_iterator::create</link>(202,&#32;<emphasis role="stringliteral">&quot;iterator&#32;does&#32;not&#32;fit&#32;current&#32;value&quot;</emphasis>,&#32;<emphasis role="keyword">this</emphasis>));
21389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21390 
21391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;if&#32;range&#32;iterators&#32;belong&#32;to&#32;the&#32;same&#32;JSON&#32;object</emphasis>
21392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>.m_object&#32;!=&#32;last.m_object))
21393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1invalid__iterator_1af6e8410249ce3252f5e7294cd4ef0a28">invalid_iterator::create</link>(210,&#32;<emphasis role="stringliteral">&quot;iterators&#32;do&#32;not&#32;fit&quot;</emphasis>,&#32;<emphasis role="keyword">this</emphasis>));
21395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21396 
21397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>.m_object&#32;==&#32;<emphasis role="keyword">this</emphasis>))
21398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1invalid__iterator_1af6e8410249ce3252f5e7294cd4ef0a28">invalid_iterator::create</link>(211,&#32;<emphasis role="stringliteral">&quot;passed&#32;iterators&#32;may&#32;not&#32;belong&#32;to&#32;container&quot;</emphasis>,&#32;<emphasis role="keyword">this</emphasis>));
21400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21401 
21402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;insert&#32;to&#32;array&#32;and&#32;return&#32;iterator</emphasis>
21403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1ab5c8034e997c5b852b92bdc6a3f70994">insert_iterator</link>(pos,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>.<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a8294a6e6f01b58e1cce8fbae66a50b5d">array_iterator</link>,&#32;last.<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a8294a6e6f01b58e1cce8fbae66a50b5d">array_iterator</link>);
21404 &#32;&#32;&#32;&#32;}
21405 
21408 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iterator</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a856b8764efd21dac4205a00fec82e09a">insert</link>(<link linkend="_classnlohmann_1_1detail_1_1iter__impl">const_iterator</link>&#32;pos,&#32;<link linkend="_classnlohmann_1_1basic__json_1ac569f292a070dfd2f6b69c16e746095a">initializer_list_t</link>&#32;ilist)
21409 &#32;&#32;&#32;&#32;{
21410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;insert&#32;only&#32;works&#32;for&#32;arrays</emphasis>
21411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!<link linkend="_classnlohmann_1_1basic__json_1ab5b70d60a636b9c5e10f6c8caac60b9e">is_array</link>()))
21412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(309,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;cannot&#32;use&#32;insert()&#32;with&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()),&#32;<emphasis role="keyword">this</emphasis>));
21414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21415 
21416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;if&#32;iterator&#32;pos&#32;fits&#32;to&#32;this&#32;JSON&#32;value</emphasis>
21417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(pos.m_object&#32;!=&#32;<emphasis role="keyword">this</emphasis>))
21418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1invalid__iterator_1af6e8410249ce3252f5e7294cd4ef0a28">invalid_iterator::create</link>(202,&#32;<emphasis role="stringliteral">&quot;iterator&#32;does&#32;not&#32;fit&#32;current&#32;value&quot;</emphasis>,&#32;<emphasis role="keyword">this</emphasis>));
21420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21421 
21422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;insert&#32;to&#32;array&#32;and&#32;return&#32;iterator</emphasis>
21423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1ab5c8034e997c5b852b92bdc6a3f70994">insert_iterator</link>(pos,&#32;ilist.begin(),&#32;ilist.end());
21424 &#32;&#32;&#32;&#32;}
21425 
21428 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a0181d03c6314bedcbad2e92d3676223c">insert</link>(<link linkend="_classnlohmann_1_1detail_1_1iter__impl">const_iterator</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">const_iterator</link>&#32;last)
21429 &#32;&#32;&#32;&#32;{
21430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;insert&#32;only&#32;works&#32;for&#32;objects</emphasis>
21431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!<link linkend="_classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa">is_object</link>()))
21432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(309,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;cannot&#32;use&#32;insert()&#32;with&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()),&#32;<emphasis role="keyword">this</emphasis>));
21434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21435 
21436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;if&#32;range&#32;iterators&#32;belong&#32;to&#32;the&#32;same&#32;JSON&#32;object</emphasis>
21437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>.m_object&#32;!=&#32;last.m_object))
21438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1invalid__iterator_1af6e8410249ce3252f5e7294cd4ef0a28">invalid_iterator::create</link>(210,&#32;<emphasis role="stringliteral">&quot;iterators&#32;do&#32;not&#32;fit&quot;</emphasis>,&#32;<emphasis role="keyword">this</emphasis>));
21440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21441 
21442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;passed&#32;iterators&#32;must&#32;belong&#32;to&#32;objects</emphasis>
21443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>.m_object-&gt;is_object()))
21444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1invalid__iterator_1af6e8410249ce3252f5e7294cd4ef0a28">invalid_iterator::create</link>(202,&#32;<emphasis role="stringliteral">&quot;iterators&#32;first&#32;and&#32;last&#32;must&#32;point&#32;to&#32;objects&quot;</emphasis>,&#32;<emphasis role="keyword">this</emphasis>));
21446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21447 
21448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;insert(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>.m_it.object_iterator,&#32;last.<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link>.<link linkend="_structnlohmann_1_1detail_1_1internal__iterator_1a8cb0af3498061426c1d0a65ad6220408">object_iterator</link>);
21449 &#32;&#32;&#32;&#32;}
21450 
21453 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a129a235796b3f95ec93d65c5e4e9fa41">update</link>(<link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;j,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;merge_objects&#32;=&#32;<emphasis role="keyword">false</emphasis>)
21454 &#32;&#32;&#32;&#32;{
21455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a129a235796b3f95ec93d65c5e4e9fa41">update</link>(j.<link linkend="_classnlohmann_1_1basic__json_1a23b495b4c282e4afacf382f5b49af7c7">begin</link>(),&#32;j.<link linkend="_classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc">end</link>(),&#32;merge_objects);
21456 &#32;&#32;&#32;&#32;}
21457 
21460 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a4fd9b1d17f9636dec1a33344a09d2651">update</link>(<link linkend="_classnlohmann_1_1detail_1_1iter__impl">const_iterator</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;<link linkend="_classnlohmann_1_1detail_1_1iter__impl">const_iterator</link>&#32;last,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;merge_objects&#32;=&#32;<emphasis role="keyword">false</emphasis>)
21461 &#32;&#32;&#32;&#32;{
21462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;implicitly&#32;convert&#32;null&#32;value&#32;to&#32;an&#32;empty&#32;object</emphasis>
21463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classnlohmann_1_1basic__json_1aedc7afad96292b5ab61a2e0ad3067f5f">is_null</link>())
21464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_type&#32;=&#32;value_t::object;
21466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object&#32;=&#32;create&lt;object_t&gt;();
21467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert_invariant();
21468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21469 
21470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!<link linkend="_classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa">is_object</link>()))
21471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(312,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;cannot&#32;use&#32;update()&#32;with&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()),&#32;<emphasis role="keyword">this</emphasis>));
21473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21474 
21475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;if&#32;range&#32;iterators&#32;belong&#32;to&#32;the&#32;same&#32;JSON&#32;object</emphasis>
21476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>.m_object&#32;!=&#32;last.m_object))
21477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1invalid__iterator_1af6e8410249ce3252f5e7294cd4ef0a28">invalid_iterator::create</link>(210,&#32;<emphasis role="stringliteral">&quot;iterators&#32;do&#32;not&#32;fit&quot;</emphasis>,&#32;<emphasis role="keyword">this</emphasis>));
21479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21480 
21481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;passed&#32;iterators&#32;must&#32;belong&#32;to&#32;objects</emphasis>
21482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>.m_object-&gt;is_object()))
21483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(312,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;cannot&#32;use&#32;update()&#32;with&#32;&quot;</emphasis>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>.m_object-&gt;type_name()),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>.m_object));
21485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21486 
21487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>;&#32;it&#32;!=&#32;last;&#32;++it)
21488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(merge_objects&#32;&amp;&amp;&#32;it.value().is_object())
21490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;it2&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;find(it.key());
21492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(it2&#32;!=&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;end())
21493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;it2-&gt;second.update(it.value(),&#32;<emphasis role="keyword">true</emphasis>);
21495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
21496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;operator[](it.key())&#32;=&#32;it.value();
21499 <emphasis role="preprocessor">#if&#32;JSON_DIAGNOSTICS</emphasis>
21500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;operator[](it.key()).m_parent&#32;=&#32;<emphasis role="keyword">this</emphasis>;
21501 <emphasis role="preprocessor">#endif</emphasis>
21502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21503 &#32;&#32;&#32;&#32;}
21504 
21507 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a94295a06e0e7b3867fe83afbee4cb202">swap</link>(<link linkend="_classnlohmann_1_1basic__json">reference</link>&#32;other)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;(
21508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_nothrow_move_constructible&lt;value_t&gt;::value&amp;&amp;
21509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_nothrow_move_assignable&lt;value_t&gt;::value&amp;&amp;
21510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_nothrow_move_constructible&lt;json_value&gt;::value&amp;&amp;
21511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_nothrow_move_assignable&lt;json_value&gt;::value
21512 &#32;&#32;&#32;&#32;)
21513 &#32;&#32;&#32;&#32;{
21514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(m_type,&#32;other.m_type);
21515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>,&#32;other.m_value);
21516 
21517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_parents();
21518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;other.set_parents();
21519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert_invariant();
21520 &#32;&#32;&#32;&#32;}
21521 
21524 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1aee0ae36cbfb0336832ebc0374c3c7679">swap</link>(<link linkend="_classnlohmann_1_1basic__json">reference</link>&#32;left,&#32;<link linkend="_classnlohmann_1_1basic__json">reference</link>&#32;right)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;(
21525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_nothrow_move_constructible&lt;value_t&gt;::value&amp;&amp;
21526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_nothrow_move_assignable&lt;value_t&gt;::value&amp;&amp;
21527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_nothrow_move_constructible&lt;json_value&gt;::value&amp;&amp;
21528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_nothrow_move_assignable&lt;json_value&gt;::value
21529 &#32;&#32;&#32;&#32;)
21530 &#32;&#32;&#32;&#32;{
21531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;left.swap(right);
21532 &#32;&#32;&#32;&#32;}
21533 
21536 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a76126242de262f6d38cadda19e0d13e1">swap</link>(<link linkend="_classnlohmann_1_1basic__json_1a858c1cf8407bc06494e3a1114a3b73e7">array_t</link>&amp;&#32;other)&#32;<emphasis role="comment">//&#32;NOLINT(bugprone-exception-escape)</emphasis>
21537 &#32;&#32;&#32;&#32;{
21538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;swap&#32;only&#32;works&#32;for&#32;arrays</emphasis>
21539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0">JSON_HEDLEY_LIKELY</link>(<link linkend="_classnlohmann_1_1basic__json_1ab5b70d60a636b9c5e10f6c8caac60b9e">is_array</link>()))
21540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(*(<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.array),&#32;other);
21542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
21544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(310,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;cannot&#32;use&#32;swap()&#32;with&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()),&#32;<emphasis role="keyword">this</emphasis>));
21546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21547 &#32;&#32;&#32;&#32;}
21548 
21551 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a57b86bdcfc55557dacc36969adb0417e">swap</link>(<link linkend="_classnlohmann_1_1basic__json_1a38f0955a144fe9589bf68e8dc4cd5c56">object_t</link>&amp;&#32;other)&#32;<emphasis role="comment">//&#32;NOLINT(bugprone-exception-escape)</emphasis>
21552 &#32;&#32;&#32;&#32;{
21553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;swap&#32;only&#32;works&#32;for&#32;objects</emphasis>
21554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0">JSON_HEDLEY_LIKELY</link>(<link linkend="_classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa">is_object</link>()))
21555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(*(<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object),&#32;other);
21557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
21559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(310,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;cannot&#32;use&#32;swap()&#32;with&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()),&#32;<emphasis role="keyword">this</emphasis>));
21561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21562 &#32;&#32;&#32;&#32;}
21563 
21566 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1aac916df9561daf4eaf2372119fe91899">swap</link>(<link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link>&amp;&#32;other)&#32;<emphasis role="comment">//&#32;NOLINT(bugprone-exception-escape)</emphasis>
21567 &#32;&#32;&#32;&#32;{
21568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;swap&#32;only&#32;works&#32;for&#32;strings</emphasis>
21569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0">JSON_HEDLEY_LIKELY</link>(<link linkend="_classnlohmann_1_1basic__json_1ab303d17366c26fca12242c7f8def1bb7">is_string</link>()))
21570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(*(<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.string),&#32;other);
21572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
21574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(310,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;cannot&#32;use&#32;swap()&#32;with&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()),&#32;<emphasis role="keyword">this</emphasis>));
21576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21577 &#32;&#32;&#32;&#32;}
21578 
21581 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1aa242e339ebc7583e114f2167a83f8c90">swap</link>(<link linkend="_classnlohmann_1_1byte__container__with__subtype">binary_t</link>&amp;&#32;other)&#32;<emphasis role="comment">//&#32;NOLINT(bugprone-exception-escape)</emphasis>
21582 &#32;&#32;&#32;&#32;{
21583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;swap&#32;only&#32;works&#32;for&#32;strings</emphasis>
21584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0">JSON_HEDLEY_LIKELY</link>(<link linkend="_classnlohmann_1_1basic__json_1a9576224f7b3ff812a308e7c1e784ea80">is_binary</link>()))
21585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(*(<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.binary),&#32;other);
21587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
21589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(310,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;cannot&#32;use&#32;swap()&#32;with&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()),&#32;<emphasis role="keyword">this</emphasis>));
21591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21592 &#32;&#32;&#32;&#32;}
21593 
21596 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a749a1f5091a5e63ccfe919e0aef986af">swap</link>(<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">binary_t::container_type</link>&amp;&#32;other)&#32;<emphasis role="comment">//&#32;NOLINT(bugprone-exception-escape)</emphasis>
21597 &#32;&#32;&#32;&#32;{
21598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;swap&#32;only&#32;works&#32;for&#32;strings</emphasis>
21599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0">JSON_HEDLEY_LIKELY</link>(<link linkend="_classnlohmann_1_1basic__json_1a9576224f7b3ff812a308e7c1e784ea80">is_binary</link>()))
21600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(*(<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.binary),&#32;other);
21602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
21604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1type__error_1a297461f501f827c740487a14e920a13d">type_error::create</link>(310,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;cannot&#32;use&#32;swap()&#32;with&#32;&quot;</emphasis>,&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()),&#32;<emphasis role="keyword">this</emphasis>));
21606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21607 &#32;&#32;&#32;&#32;}
21608 
21610 
21611 &#32;&#32;<emphasis role="keyword">public</emphasis>:
21613 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;lexicographical&#32;comparison&#32;operators&#32;//</emphasis>
21615 
21618 
21621 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a122640e7e2db1814fc7bbb3c122ec76e">operator==</link>(<link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;lhs,&#32;<link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
21622 &#32;&#32;&#32;&#32;{
21623 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
21624 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
21625 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wfloat-equal&quot;</emphasis>
21626 <emphasis role="preprocessor">#endif</emphasis>
21627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;lhs_type&#32;=&#32;lhs.type();
21628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;rhs_type&#32;=&#32;rhs.type();
21629 
21630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs_type&#32;==&#32;rhs_type)
21631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(lhs_type)
21633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::array:
21635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*lhs.m_value.array&#32;==&#32;*rhs.m_value.array;
21636 
21637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::object:
21638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*lhs.m_value.object&#32;==&#32;*rhs.m_value.object;
21639 
21640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::null:
21641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
21642 
21643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::string:
21644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*lhs.m_value.string&#32;==&#32;*rhs.m_value.string;
21645 
21646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::boolean:
21647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.m_value.boolean&#32;==&#32;rhs.m_value.boolean;
21648 
21649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_integer:
21650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.m_value.number_integer&#32;==&#32;rhs.m_value.number_integer;
21651 
21652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_unsigned:
21653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.m_value.number_unsigned&#32;==&#32;rhs.m_value.number_unsigned;
21654 
21655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_float:
21656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.m_value.number_float&#32;==&#32;rhs.m_value.number_float;
21657 
21658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::binary:
21659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*lhs.m_value.binary&#32;==&#32;*rhs.m_value.binary;
21660 
21661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::discarded:
21662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
21663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
21664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs_type&#32;==&#32;value_t::number_integer&#32;&amp;&amp;&#32;rhs_type&#32;==&#32;value_t::number_float)
21667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6">number_float_t</link><emphasis role="keyword">&gt;</emphasis>(lhs.m_value.number_integer)&#32;==&#32;rhs.m_value.number_float;
21669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs_type&#32;==&#32;value_t::number_float&#32;&amp;&amp;&#32;rhs_type&#32;==&#32;value_t::number_integer)
21671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.m_value.number_float&#32;==&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6">number_float_t</link><emphasis role="keyword">&gt;</emphasis>(rhs.m_value.number_integer);
21673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs_type&#32;==&#32;value_t::number_unsigned&#32;&amp;&amp;&#32;rhs_type&#32;==&#32;value_t::number_float)
21675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6">number_float_t</link><emphasis role="keyword">&gt;</emphasis>(lhs.m_value.number_unsigned)&#32;==&#32;rhs.m_value.number_float;
21677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs_type&#32;==&#32;value_t::number_float&#32;&amp;&amp;&#32;rhs_type&#32;==&#32;value_t::number_unsigned)
21679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.m_value.number_float&#32;==&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6">number_float_t</link><emphasis role="keyword">&gt;</emphasis>(rhs.m_value.number_unsigned);
21681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs_type&#32;==&#32;value_t::number_unsigned&#32;&amp;&amp;&#32;rhs_type&#32;==&#32;value_t::number_integer)
21683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classnlohmann_1_1basic__json_1a11e390944da90db83089eb2426a749d3">number_integer_t</link><emphasis role="keyword">&gt;</emphasis>(lhs.m_value.number_unsigned)&#32;==&#32;rhs.m_value.number_integer;
21685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs_type&#32;==&#32;value_t::number_integer&#32;&amp;&amp;&#32;rhs_type&#32;==&#32;value_t::number_unsigned)
21687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.m_value.number_integer&#32;==&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classnlohmann_1_1basic__json_1a11e390944da90db83089eb2426a749d3">number_integer_t</link><emphasis role="keyword">&gt;</emphasis>(rhs.m_value.number_unsigned);
21689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21690 
21691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
21692 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
21693 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
21694 <emphasis role="preprocessor">#endif</emphasis>
21695 &#32;&#32;&#32;&#32;}
21696 
21699 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;ScalarType,&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;
21700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_scalar&lt;ScalarType&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&#32;=&#32;0&gt;
21701 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a107a085c92ec4e062d1185b2d09c7978">operator==</link>(<link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;lhs,&#32;ScalarType&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
21702 &#32;&#32;&#32;&#32;{
21703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;==&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>(rhs);
21704 &#32;&#32;&#32;&#32;}
21705 
21708 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;ScalarType,&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;
21709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_scalar&lt;ScalarType&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&#32;=&#32;0&gt;
21710 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a24ae7acd5b06ae49cfe1c94633436b68">operator==</link>(ScalarType&#32;lhs,&#32;<link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
21711 &#32;&#32;&#32;&#32;{
21712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>(lhs)&#32;==&#32;rhs;
21713 &#32;&#32;&#32;&#32;}
21714 
21717 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a6e2e21da48f5d9471716cd868a068327">operator!=</link>(<link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;lhs,&#32;<link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
21718 &#32;&#32;&#32;&#32;{
21719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(lhs&#32;==&#32;rhs);
21720 &#32;&#32;&#32;&#32;}
21721 
21724 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;ScalarType,&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;
21725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_scalar&lt;ScalarType&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&#32;=&#32;0&gt;
21726 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a4d581dc2ab78091885f9af24d13749dc">operator!=</link>(<link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;lhs,&#32;ScalarType&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
21727 &#32;&#32;&#32;&#32;{
21728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;!=&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>(rhs);
21729 &#32;&#32;&#32;&#32;}
21730 
21733 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;ScalarType,&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;
21734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_scalar&lt;ScalarType&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&#32;=&#32;0&gt;
21735 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1aa9861979059799375c0fff68174610ba">operator!=</link>(ScalarType&#32;lhs,&#32;<link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
21736 &#32;&#32;&#32;&#32;{
21737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>(lhs)&#32;!=&#32;rhs;
21738 &#32;&#32;&#32;&#32;}
21739 
21742 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1aacd442b66140c764c594ac8ad7dfd5b3">operator&lt;</link>(<link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;lhs,&#32;<link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
21743 &#32;&#32;&#32;&#32;{
21744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;lhs_type&#32;=&#32;lhs.type();
21745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;rhs_type&#32;=&#32;rhs.type();
21746 
21747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs_type&#32;==&#32;rhs_type)
21748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(lhs_type)
21750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::array:
21752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;note&#32;parentheses&#32;are&#32;necessary,&#32;see</emphasis>
21753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;https://github.com/nlohmann/json/issues/1530</emphasis>
21754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*lhs.m_value.array)&#32;&lt;&#32;(*rhs.m_value.array);
21755 
21756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::object:
21757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*lhs.m_value.object)&#32;&lt;&#32;(*rhs.m_value.object);
21758 
21759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::null:
21760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
21761 
21762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::string:
21763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*lhs.m_value.string)&#32;&lt;&#32;(*rhs.m_value.string);
21764 
21765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::boolean:
21766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(lhs.m_value.boolean)&#32;&lt;&#32;(rhs.m_value.boolean);
21767 
21768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_integer:
21769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(lhs.m_value.number_integer)&#32;&lt;&#32;(rhs.m_value.number_integer);
21770 
21771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_unsigned:
21772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(lhs.m_value.number_unsigned)&#32;&lt;&#32;(rhs.m_value.number_unsigned);
21773 
21774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_float:
21775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(lhs.m_value.number_float)&#32;&lt;&#32;(rhs.m_value.number_float);
21776 
21777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::binary:
21778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*lhs.m_value.binary)&#32;&lt;&#32;(*rhs.m_value.binary);
21779 
21780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::discarded:
21781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
21782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
21783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs_type&#32;==&#32;value_t::number_integer&#32;&amp;&amp;&#32;rhs_type&#32;==&#32;value_t::number_float)
21786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6">number_float_t</link><emphasis role="keyword">&gt;</emphasis>(lhs.m_value.number_integer)&#32;&lt;&#32;rhs.m_value.number_float;
21788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs_type&#32;==&#32;value_t::number_float&#32;&amp;&amp;&#32;rhs_type&#32;==&#32;value_t::number_integer)
21790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.m_value.number_float&#32;&lt;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6">number_float_t</link><emphasis role="keyword">&gt;</emphasis>(rhs.m_value.number_integer);
21792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs_type&#32;==&#32;value_t::number_unsigned&#32;&amp;&amp;&#32;rhs_type&#32;==&#32;value_t::number_float)
21794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6">number_float_t</link><emphasis role="keyword">&gt;</emphasis>(lhs.m_value.number_unsigned)&#32;&lt;&#32;rhs.m_value.number_float;
21796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs_type&#32;==&#32;value_t::number_float&#32;&amp;&amp;&#32;rhs_type&#32;==&#32;value_t::number_unsigned)
21798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.m_value.number_float&#32;&lt;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6">number_float_t</link><emphasis role="keyword">&gt;</emphasis>(rhs.m_value.number_unsigned);
21800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs_type&#32;==&#32;value_t::number_integer&#32;&amp;&amp;&#32;rhs_type&#32;==&#32;value_t::number_unsigned)
21802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.m_value.number_integer&#32;&lt;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classnlohmann_1_1basic__json_1a11e390944da90db83089eb2426a749d3">number_integer_t</link><emphasis role="keyword">&gt;</emphasis>(rhs.m_value.number_unsigned);
21804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs_type&#32;==&#32;value_t::number_unsigned&#32;&amp;&amp;&#32;rhs_type&#32;==&#32;value_t::number_integer)
21806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classnlohmann_1_1basic__json_1a11e390944da90db83089eb2426a749d3">number_integer_t</link><emphasis role="keyword">&gt;</emphasis>(lhs.m_value.number_unsigned)&#32;&lt;&#32;rhs.m_value.number_integer;
21808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
21809 
21810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;only&#32;reach&#32;this&#32;line&#32;if&#32;we&#32;cannot&#32;compare&#32;values.&#32;In&#32;that&#32;case,</emphasis>
21811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&#32;compare&#32;types.&#32;Note&#32;we&#32;have&#32;to&#32;call&#32;the&#32;operator&#32;explicitly,</emphasis>
21812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;because&#32;MSVC&#32;has&#32;problems&#32;otherwise.</emphasis>
21813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1aacd442b66140c764c594ac8ad7dfd5b3">operator&lt;</link>(lhs_type,&#32;rhs_type);
21814 &#32;&#32;&#32;&#32;}
21815 
21818 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;ScalarType,&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;
21819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_scalar&lt;ScalarType&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&#32;=&#32;0&gt;
21820 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a52907b78829a55473f2548530cf2c1c7">operator&lt;</link>(<link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;lhs,&#32;ScalarType&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
21821 &#32;&#32;&#32;&#32;{
21822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;&lt;&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>(rhs);
21823 &#32;&#32;&#32;&#32;}
21824 
21827 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;ScalarType,&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;
21828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_scalar&lt;ScalarType&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&#32;=&#32;0&gt;
21829 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a71f65ff3abee4c140e27ca64fa327973">operator&lt;</link>(ScalarType&#32;lhs,&#32;<link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
21830 &#32;&#32;&#32;&#32;{
21831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>(lhs)&#32;&lt;&#32;rhs;
21832 &#32;&#32;&#32;&#32;}
21833 
21836 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a5c8bb5200f5eac10d31e26be46e5b1ac">operator&lt;=</link>(<link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;lhs,&#32;<link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
21837 &#32;&#32;&#32;&#32;{
21838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(rhs&#32;&lt;&#32;lhs);
21839 &#32;&#32;&#32;&#32;}
21840 
21843 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;ScalarType,&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;
21844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_scalar&lt;ScalarType&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&#32;=&#32;0&gt;
21845 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1ae7bce6989e2bf72aa0784ca6755e22a9">operator&lt;=</link>(<link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;lhs,&#32;ScalarType&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
21846 &#32;&#32;&#32;&#32;{
21847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;&lt;=&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>(rhs);
21848 &#32;&#32;&#32;&#32;}
21849 
21852 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;ScalarType,&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;
21853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_scalar&lt;ScalarType&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&#32;=&#32;0&gt;
21854 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a4e96b98c1f8dfccaaa94aa0d5e77427c">operator&lt;=</link>(ScalarType&#32;lhs,&#32;<link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
21855 &#32;&#32;&#32;&#32;{
21856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>(lhs)&#32;&lt;=&#32;rhs;
21857 &#32;&#32;&#32;&#32;}
21858 
21861 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a87db51b6b936fb2ea293cdbc8702dcb8">operator&gt;</link>(<link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;lhs,&#32;<link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
21862 &#32;&#32;&#32;&#32;{
21863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(lhs&#32;&lt;=&#32;rhs);
21864 &#32;&#32;&#32;&#32;}
21865 
21868 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;ScalarType,&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;
21869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_scalar&lt;ScalarType&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&#32;=&#32;0&gt;
21870 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a9ea8e0e86820fcb3ab0fc937d41226e7">operator&gt;</link>(<link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;lhs,&#32;ScalarType&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
21871 &#32;&#32;&#32;&#32;{
21872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;&gt;&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>(rhs);
21873 &#32;&#32;&#32;&#32;}
21874 
21877 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;ScalarType,&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;
21878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_scalar&lt;ScalarType&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&#32;=&#32;0&gt;
21879 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a67771044f08fd07105b34667615d9e0e">operator&gt;</link>(ScalarType&#32;lhs,&#32;<link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
21880 &#32;&#32;&#32;&#32;{
21881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>(lhs)&#32;&gt;&#32;rhs;
21882 &#32;&#32;&#32;&#32;}
21883 
21886 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a74a943800c7f103d0990d7eef82c6453">operator&gt;=</link>(<link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;lhs,&#32;<link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
21887 &#32;&#32;&#32;&#32;{
21888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(lhs&#32;&lt;&#32;rhs);
21889 &#32;&#32;&#32;&#32;}
21890 
21893 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;ScalarType,&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;
21894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_scalar&lt;ScalarType&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&#32;=&#32;0&gt;
21895 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1ab83d11de4db25633f93e067aa218cae9">operator&gt;=</link>(<link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;lhs,&#32;ScalarType&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
21896 &#32;&#32;&#32;&#32;{
21897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;&gt;=&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>(rhs);
21898 &#32;&#32;&#32;&#32;}
21899 
21902 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;ScalarType,&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;
21903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_scalar&lt;ScalarType&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&#32;=&#32;0&gt;
21904 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a94c61e0128f0794e7a34e1aecee5c445">operator&gt;=</link>(ScalarType&#32;lhs,&#32;<link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
21905 &#32;&#32;&#32;&#32;{
21906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>(lhs)&#32;&gt;=&#32;rhs;
21907 &#32;&#32;&#32;&#32;}
21908 
21910 
21912 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;serialization&#32;//</emphasis>
21914 
21917 <emphasis role="preprocessor">#ifndef&#32;JSON_NO_IO</emphasis>
21920 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_classnlohmann_1_1basic__json_1a5bbe57177fdb5833885dc1567ec13394">operator&lt;&lt;</link>(std::ostream&amp;&#32;o,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&#32;j)
21921 &#32;&#32;&#32;&#32;{
21922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;read&#32;width&#32;member&#32;and&#32;use&#32;it&#32;as&#32;indentation&#32;parameter&#32;if&#32;nonzero</emphasis>
21923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;pretty_print&#32;=&#32;o.width()&#32;&gt;&#32;0;
21924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_forward__declarations_8h_1aeff1bb793cb4a2cf6c9be1b90fa0ec7d">indentation</link>&#32;=&#32;pretty_print&#32;?&#32;o.width()&#32;:&#32;0;
21925 
21926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;reset&#32;width&#32;to&#32;0&#32;for&#32;subsequent&#32;calls&#32;to&#32;this&#32;stream</emphasis>
21927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o.width(0);
21928 
21929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;do&#32;the&#32;actual&#32;serialization</emphasis>
21930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;serializer&#32;s(detail::output_adapter&lt;char&gt;(o),&#32;o.fill());
21931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s.dump(j,&#32;pretty_print,&#32;<emphasis role="keyword">false</emphasis>,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="_forward__declarations_8h_1aeff1bb793cb4a2cf6c9be1b90fa0ec7d">indentation</link>));
21932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;o;
21933 &#32;&#32;&#32;&#32;}
21934 
21941 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1af0469b867b0ec3a1c4b229ce9d087620">JSON_HEDLEY_DEPRECATED_FOR</link>(3.0.0,&#32;<emphasis role="keyword">operator</emphasis>&lt;&lt;(std::ostream&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;))
21942 &#32;&#32;&#32;&#32;friend&#32;<link linkend="_namespacestd">std</link>::ostream&amp;&#32;operator&gt;&gt;(const&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&#32;j,&#32;<link linkend="_namespacestd">std</link>::ostream&amp;&#32;o)
21943 &#32;&#32;&#32;&#32;{
21944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;o&#32;&lt;&lt;&#32;j;
21945 &#32;&#32;&#32;&#32;}
21946 <emphasis role="preprocessor">#endif&#32;&#32;</emphasis><emphasis role="comment">//&#32;JSON_NO_IO</emphasis>
21948 
21949 
21951 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;deserialization&#32;//</emphasis>
21953 
21956 
21959 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;InputType&gt;
21960 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link>
21961 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a15018ade392a844ea32d5188d1a0b9c6">parse</link>(InputType&amp;&amp;&#32;i,
21962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a0273d074462644e5d5a7ff313ad0d742">parser_callback_t</link>&#32;cb&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>,
21963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;allow_exceptions&#32;=&#32;<emphasis role="keyword">true</emphasis>,
21964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ignore_comments&#32;=&#32;<emphasis role="keyword">false</emphasis>)
21965 &#32;&#32;&#32;&#32;{
21966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
21967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1ac8f3125911eb018ef4ab00d879487baf">parser</link>(detail::input_adapter(std::forward&lt;InputType&gt;(i)),&#32;cb,&#32;allow_exceptions,&#32;ignore_comments).<link linkend="_classnlohmann_1_1basic__json_1a15018ade392a844ea32d5188d1a0b9c6">parse</link>(<emphasis role="keyword">true</emphasis>,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
21968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
21969 &#32;&#32;&#32;&#32;}
21970 
21973 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;IteratorType&gt;
21974 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link>
21975 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1ad832c70af0989389a9a104c21d2d1c5c">parse</link>(IteratorType&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,
21976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IteratorType&#32;last,
21977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a0273d074462644e5d5a7ff313ad0d742">parser_callback_t</link>&#32;cb&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>,
21978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;allow_exceptions&#32;=&#32;<emphasis role="keyword">true</emphasis>,
21979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ignore_comments&#32;=&#32;<emphasis role="keyword">false</emphasis>)
21980 &#32;&#32;&#32;&#32;{
21981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
21982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1ac8f3125911eb018ef4ab00d879487baf">parser</link>(detail::input_adapter(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(last)),&#32;cb,&#32;allow_exceptions,&#32;ignore_comments).<link linkend="_classnlohmann_1_1basic__json_1a15018ade392a844ea32d5188d1a0b9c6">parse</link>(<emphasis role="keyword">true</emphasis>,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
21983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
21984 &#32;&#32;&#32;&#32;}
21985 
21986 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link>
21987 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1af0469b867b0ec3a1c4b229ce9d087620">JSON_HEDLEY_DEPRECATED_FOR</link>(3.8.0,&#32;<link linkend="_classnlohmann_1_1basic__json_1a15018ade392a844ea32d5188d1a0b9c6">parse</link>(ptr,&#32;ptr&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>))
21988 &#32;&#32;&#32;&#32;static&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a15018ade392a844ea32d5188d1a0b9c6">parse</link>(detail::span_input_adapter&amp;&amp;&#32;i,
21989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;<link linkend="_classnlohmann_1_1basic__json_1a0273d074462644e5d5a7ff313ad0d742">parser_callback_t</link>&#32;cb&#32;=&#32;<emphasis role="keywordtype">nullptr</emphasis>,
21990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;<emphasis role="keywordtype">bool</emphasis>&#32;allow_exceptions&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,
21991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ignore_comments&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)
21992 &#32;&#32;&#32;&#32;{
21993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
21994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1ac8f3125911eb018ef4ab00d879487baf">parser</link>(i.get(),&#32;cb,&#32;allow_exceptions,&#32;ignore_comments).<link linkend="_classnlohmann_1_1basic__json_1a15018ade392a844ea32d5188d1a0b9c6">parse</link>(<emphasis role="keyword">true</emphasis>,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
21995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
21996 &#32;&#32;&#32;&#32;}
21997 
22000 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;InputType&gt;
22001 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a32872afe5bfd040777e3e2bb85f0ca55">accept</link>(InputType&amp;&amp;&#32;i,
22002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ignore_comments&#32;=&#32;<emphasis role="keyword">false</emphasis>)
22003 &#32;&#32;&#32;&#32;{
22004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1ac8f3125911eb018ef4ab00d879487baf">parser</link>(detail::input_adapter(std::forward&lt;InputType&gt;(i)),&#32;<emphasis role="keyword">nullptr</emphasis>,&#32;<emphasis role="keyword">false</emphasis>,&#32;ignore_comments).accept(<emphasis role="keyword">true</emphasis>);
22005 &#32;&#32;&#32;&#32;}
22006 
22009 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;IteratorType&gt;
22010 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a47fb596473649332185aedb0a8a6ccc5">accept</link>(IteratorType&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;IteratorType&#32;last,
22011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ignore_comments&#32;=&#32;<emphasis role="keyword">false</emphasis>)
22012 &#32;&#32;&#32;&#32;{
22013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1ac8f3125911eb018ef4ab00d879487baf">parser</link>(detail::input_adapter(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(last)),&#32;<emphasis role="keyword">nullptr</emphasis>,&#32;<emphasis role="keyword">false</emphasis>,&#32;ignore_comments).accept(<emphasis role="keyword">true</emphasis>);
22014 &#32;&#32;&#32;&#32;}
22015 
22016 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link>
22017 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1af0469b867b0ec3a1c4b229ce9d087620">JSON_HEDLEY_DEPRECATED_FOR</link>(3.8.0,&#32;<link linkend="_classnlohmann_1_1basic__json_1a32872afe5bfd040777e3e2bb85f0ca55">accept</link>(ptr,&#32;ptr&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>))
22018 &#32;&#32;&#32;&#32;static&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a32872afe5bfd040777e3e2bb85f0ca55">accept</link>(detail::span_input_adapter&amp;&amp;&#32;i,
22019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ignore_comments&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)
22020 &#32;&#32;&#32;&#32;{
22021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1ac8f3125911eb018ef4ab00d879487baf">parser</link>(i.get(),&#32;<emphasis role="keyword">nullptr</emphasis>,&#32;<emphasis role="keyword">false</emphasis>,&#32;ignore_comments).accept(<emphasis role="keyword">true</emphasis>);
22022 &#32;&#32;&#32;&#32;}
22023 
22026 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;InputType,&#32;<emphasis role="keyword">typename</emphasis>&#32;SAX&gt;
22027 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a5338981b5ad9027c9e54b1c5597f4344">JSON_HEDLEY_NON_NULL</link>(2)
22028 &#32;&#32;&#32;&#32;static&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a12b382c6407da5543827ce4b24bb5008">sax_parse</link>(InputType&amp;&amp;&#32;i,&#32;SAX*&#32;sax,
22029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input_format_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>&#32;=&#32;input_format_t::<link linkend="_classnlohmann_1_1basic__json">json</link>,
22030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;<emphasis role="keywordtype">bool</emphasis>&#32;strict&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,
22031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ignore_comments&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)
22032 &#32;&#32;&#32;&#32;{
22033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ia&#32;=&#32;detail::input_adapter(std::forward&lt;InputType&gt;(i));
22034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>&#32;==&#32;input_format_t::json
22035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;<link linkend="_classnlohmann_1_1basic__json_1ac8f3125911eb018ef4ab00d879487baf">parser</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(ia),&#32;<emphasis role="keyword">nullptr</emphasis>,&#32;<emphasis role="keyword">true</emphasis>,&#32;ignore_comments).sax_parse(sax,&#32;strict)
22036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classnlohmann_1_1detail_1_1binary__reader">detail::binary_reader&lt;basic_json, decltype(ia), SAX&gt;</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(ia),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>).<link linkend="_classnlohmann_1_1detail_1_1binary__reader_1ab4afd9ee276bbb15a0f898061aad94dd">sax_parse</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>,&#32;sax,&#32;strict);
22037 &#32;&#32;&#32;&#32;}
22038 
22041 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;IteratorType,&#32;<emphasis role="keyword">class</emphasis>&#32;SAX&gt;
22042 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a5338981b5ad9027c9e54b1c5597f4344">JSON_HEDLEY_NON_NULL</link>(3)
22043 &#32;&#32;&#32;&#32;static&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a12b382c6407da5543827ce4b24bb5008">sax_parse</link>(IteratorType&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;IteratorType&#32;last,&#32;SAX*&#32;sax,
22044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input_format_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>&#32;=&#32;input_format_t::<link linkend="_classnlohmann_1_1basic__json">json</link>,
22045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;<emphasis role="keywordtype">bool</emphasis>&#32;strict&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,
22046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ignore_comments&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)
22047 &#32;&#32;&#32;&#32;{
22048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ia&#32;=&#32;detail::input_adapter(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(last));
22049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>&#32;==&#32;input_format_t::json
22050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;<link linkend="_classnlohmann_1_1basic__json_1ac8f3125911eb018ef4ab00d879487baf">parser</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(ia),&#32;<emphasis role="keyword">nullptr</emphasis>,&#32;<emphasis role="keyword">true</emphasis>,&#32;ignore_comments).sax_parse(sax,&#32;strict)
22051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classnlohmann_1_1detail_1_1binary__reader">detail::binary_reader&lt;basic_json, decltype(ia), SAX&gt;</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(ia),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>).<link linkend="_classnlohmann_1_1detail_1_1binary__reader_1ab4afd9ee276bbb15a0f898061aad94dd">sax_parse</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>,&#32;sax,&#32;strict);
22052 &#32;&#32;&#32;&#32;}
22053 
22059 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;SAX&gt;
22060 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1af0469b867b0ec3a1c4b229ce9d087620">JSON_HEDLEY_DEPRECATED_FOR</link>(3.8.0,&#32;<link linkend="_classnlohmann_1_1basic__json_1a12b382c6407da5543827ce4b24bb5008">sax_parse</link>(ptr,&#32;ptr&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;...))
22061 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a5338981b5ad9027c9e54b1c5597f4344">JSON_HEDLEY_NON_NULL</link>(2)
22062 &#32;&#32;&#32;&#32;static&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a12b382c6407da5543827ce4b24bb5008">sax_parse</link>(detail::span_input_adapter&amp;&amp;&#32;i,&#32;SAX*&#32;sax,
22063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input_format_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>&#32;=&#32;input_format_t::<link linkend="_classnlohmann_1_1basic__json">json</link>,
22064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;<emphasis role="keywordtype">bool</emphasis>&#32;strict&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,
22065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ignore_comments&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)
22066 &#32;&#32;&#32;&#32;{
22067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ia&#32;=&#32;i.get();
22068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>&#32;==&#32;input_format_t::json
22069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOLINTNEXTLINE(hicpp-move-const-arg,performance-move-const-arg)</emphasis>
22070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;<link linkend="_classnlohmann_1_1basic__json_1ac8f3125911eb018ef4ab00d879487baf">parser</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(ia),&#32;<emphasis role="keyword">nullptr</emphasis>,&#32;<emphasis role="keyword">true</emphasis>,&#32;ignore_comments).sax_parse(sax,&#32;strict)
22071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOLINTNEXTLINE(hicpp-move-const-arg,performance-move-const-arg)</emphasis>
22072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classnlohmann_1_1detail_1_1binary__reader">detail::binary_reader&lt;basic_json, decltype(ia), SAX&gt;</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(ia),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>).<link linkend="_classnlohmann_1_1detail_1_1binary__reader_1ab4afd9ee276bbb15a0f898061aad94dd">sax_parse</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>,&#32;sax,&#32;strict);
22073 &#32;&#32;&#32;&#32;}
22074 <emphasis role="preprocessor">#ifndef&#32;JSON_NO_IO</emphasis>
22081 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1af0469b867b0ec3a1c4b229ce9d087620">JSON_HEDLEY_DEPRECATED_FOR</link>(3.0.0,&#32;<emphasis role="keyword">operator</emphasis>&gt;&gt;(std::istream&amp;,&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;))
22082 &#32;&#32;&#32;&#32;friend&#32;<link linkend="_namespacestd">std</link>::istream&amp;&#32;operator&lt;&lt;(<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&#32;j,&#32;<link linkend="_namespacestd">std</link>::istream&amp;&#32;i)
22083 &#32;&#32;&#32;&#32;{
22084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1abfcb46247e0d5ec0a442c3193c5305be">operator&gt;&gt;</link>(i,&#32;j);
22085 &#32;&#32;&#32;&#32;}
22086 
22089 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::istream&amp;&#32;<link linkend="_classnlohmann_1_1basic__json_1aea0de29387d532e0bc5f2475cb83995d">operator&gt;&gt;</link>(std::istream&amp;&#32;i,&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&#32;j)
22090 &#32;&#32;&#32;&#32;{
22091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1ac8f3125911eb018ef4ab00d879487baf">parser</link>(detail::input_adapter(i)).parse(<emphasis role="keyword">false</emphasis>,&#32;j);
22092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;i;
22093 &#32;&#32;&#32;&#32;}
22094 <emphasis role="preprocessor">#endif&#32;&#32;</emphasis><emphasis role="comment">//&#32;JSON_NO_IO</emphasis>
22096 
22098 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;convenience&#32;functions&#32;//</emphasis>
22100 
22103 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a5f2aaec3b681d0a72f7d6e90b70cdcd1">JSON_HEDLEY_RETURNS_NON_NULL</link>
22104 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link>()&#32;const&#32;noexcept
22105 &#32;&#32;&#32;&#32;{
22106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(m_type)
22107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::null:
22109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;null&quot;</emphasis>;
22110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::object:
22111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;object&quot;</emphasis>;
22112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::array:
22113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;array&quot;</emphasis>;
22114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::string:
22115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;string&quot;</emphasis>;
22116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::boolean:
22117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;boolean&quot;</emphasis>;
22118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::binary:
22119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;binary&quot;</emphasis>;
22120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::discarded:
22121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;discarded&quot;</emphasis>;
22122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_integer:
22123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_unsigned:
22124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_float:
22125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
22126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;number&quot;</emphasis>;
22127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22128 &#32;&#32;&#32;&#32;}
22129 
22130 
22131 &#32;&#32;<link linkend="_json_8hpp_1a2cf645f34610e7f7d6e09ab88a2ab917">JSON_PRIVATE_UNLESS_TESTED</link>:
22133 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;member&#32;variables&#32;//</emphasis>
22135 
22137 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link>&#32;m_type&#32;=&#32;value_t::null;
22138 
22140 &#32;&#32;&#32;&#32;json_value&#32;<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>&#32;=&#32;{};
22141 
22142 <emphasis role="preprocessor">#if&#32;JSON_DIAGNOSTICS</emphasis>
22144 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>*&#32;m_parent&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
22145 <emphasis role="preprocessor">#endif</emphasis>
22146 
22148 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;binary&#32;serialization/deserialization&#32;//</emphasis>
22150 
22153 
22154 &#32;&#32;<emphasis role="keyword">public</emphasis>:
22157 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::vector&lt;std::uint8_t&gt;&#32;<link linkend="_classnlohmann_1_1basic__json_1a28c7743637b821189d9eb3c3dc7ab48f">to_cbor</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&#32;j)
22158 &#32;&#32;&#32;&#32;{
22159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::uint8_t&gt;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
22160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a28c7743637b821189d9eb3c3dc7ab48f">to_cbor</link>(j,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
22161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
22162 &#32;&#32;&#32;&#32;}
22163 
22166 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1ac59dfbee523c5340e41548764a8d26be">to_cbor</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&#32;j,&#32;detail::output_adapter&lt;std::uint8_t&gt;&#32;o)
22167 &#32;&#32;&#32;&#32;{
22168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;binary_writer&lt;std::uint8_t&gt;(o).write_cbor(j);
22169 &#32;&#32;&#32;&#32;}
22170 
22173 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a5689672954fd3bc38f2f17e5607064c6">to_cbor</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&#32;j,&#32;detail::output_adapter&lt;char&gt;&#32;o)
22174 &#32;&#32;&#32;&#32;{
22175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;binary_writer&lt;char&gt;(o).write_cbor(j);
22176 &#32;&#32;&#32;&#32;}
22177 
22180 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::vector&lt;std::uint8_t&gt;&#32;<link linkend="_classnlohmann_1_1basic__json_1a2443e8bb20dc6d136dcf5ea9691d46e0">to_msgpack</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&#32;j)
22181 &#32;&#32;&#32;&#32;{
22182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::uint8_t&gt;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
22183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a2443e8bb20dc6d136dcf5ea9691d46e0">to_msgpack</link>(j,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
22184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
22185 &#32;&#32;&#32;&#32;}
22186 
22189 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1af57f7877fbef9881289fe2c8b31e37e1">to_msgpack</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&#32;j,&#32;detail::output_adapter&lt;std::uint8_t&gt;&#32;o)
22190 &#32;&#32;&#32;&#32;{
22191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;binary_writer&lt;std::uint8_t&gt;(o).write_msgpack(j);
22192 &#32;&#32;&#32;&#32;}
22193 
22196 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1aca5dc0fca52131f3a634372120abfbe7">to_msgpack</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&#32;j,&#32;detail::output_adapter&lt;char&gt;&#32;o)
22197 &#32;&#32;&#32;&#32;{
22198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;binary_writer&lt;char&gt;(o).write_msgpack(j);
22199 &#32;&#32;&#32;&#32;}
22200 
22203 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::vector&lt;std::uint8_t&gt;&#32;<link linkend="_classnlohmann_1_1basic__json_1a63697142a7bd04d8d50f6446d0e98ee4">to_ubjson</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&#32;j,
22204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;use_size&#32;=&#32;<emphasis role="keyword">false</emphasis>,
22205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;use_type&#32;=&#32;<emphasis role="keyword">false</emphasis>)
22206 &#32;&#32;&#32;&#32;{
22207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::uint8_t&gt;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
22208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a63697142a7bd04d8d50f6446d0e98ee4">to_ubjson</link>(j,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>,&#32;use_size,&#32;use_type);
22209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
22210 &#32;&#32;&#32;&#32;}
22211 
22214 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1aa9fa5da521622c6c655581840da75090">to_ubjson</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&#32;j,&#32;detail::output_adapter&lt;std::uint8_t&gt;&#32;o,
22215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;use_size&#32;=&#32;<emphasis role="keyword">false</emphasis>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;use_type&#32;=&#32;<emphasis role="keyword">false</emphasis>)
22216 &#32;&#32;&#32;&#32;{
22217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;binary_writer&lt;std::uint8_t&gt;(o).write_ubjson(j,&#32;use_size,&#32;use_type);
22218 &#32;&#32;&#32;&#32;}
22219 
22222 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a6d133cf7b2e729e9e215edeba5726116">to_ubjson</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&#32;j,&#32;detail::output_adapter&lt;char&gt;&#32;o,
22223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;use_size&#32;=&#32;<emphasis role="keyword">false</emphasis>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;use_type&#32;=&#32;<emphasis role="keyword">false</emphasis>)
22224 &#32;&#32;&#32;&#32;{
22225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;binary_writer&lt;char&gt;(o).write_ubjson(j,&#32;use_size,&#32;use_type);
22226 &#32;&#32;&#32;&#32;}
22227 
22230 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::vector&lt;std::uint8_t&gt;&#32;<link linkend="_classnlohmann_1_1basic__json_1a1303c7c05a4023f8882110c5456d290c">to_bjdata</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&#32;j,
22231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;use_size&#32;=&#32;<emphasis role="keyword">false</emphasis>,
22232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;use_type&#32;=&#32;<emphasis role="keyword">false</emphasis>)
22233 &#32;&#32;&#32;&#32;{
22234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::uint8_t&gt;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
22235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a1303c7c05a4023f8882110c5456d290c">to_bjdata</link>(j,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>,&#32;use_size,&#32;use_type);
22236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
22237 &#32;&#32;&#32;&#32;}
22238 
22241 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1af04ef0749ed2a2d2a6f05e5b3bde9b5f">to_bjdata</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&#32;j,&#32;detail::output_adapter&lt;std::uint8_t&gt;&#32;o,
22242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;use_size&#32;=&#32;<emphasis role="keyword">false</emphasis>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;use_type&#32;=&#32;<emphasis role="keyword">false</emphasis>)
22243 &#32;&#32;&#32;&#32;{
22244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;binary_writer&lt;std::uint8_t&gt;(o).write_ubjson(j,&#32;use_size,&#32;use_type,&#32;<emphasis role="keyword">true</emphasis>,&#32;<emphasis role="keyword">true</emphasis>);
22245 &#32;&#32;&#32;&#32;}
22246 
22249 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a32a3c51ba007685b9365746e95351718">to_bjdata</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&#32;j,&#32;detail::output_adapter&lt;char&gt;&#32;o,
22250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;use_size&#32;=&#32;<emphasis role="keyword">false</emphasis>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;use_type&#32;=&#32;<emphasis role="keyword">false</emphasis>)
22251 &#32;&#32;&#32;&#32;{
22252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;binary_writer&lt;char&gt;(o).write_ubjson(j,&#32;use_size,&#32;use_type,&#32;<emphasis role="keyword">true</emphasis>,&#32;<emphasis role="keyword">true</emphasis>);
22253 &#32;&#32;&#32;&#32;}
22254 
22257 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::vector&lt;std::uint8_t&gt;&#32;<link linkend="_classnlohmann_1_1basic__json_1a21302d2c392af239d66df71098d69f73">to_bson</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&#32;j)
22258 &#32;&#32;&#32;&#32;{
22259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::uint8_t&gt;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
22260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a21302d2c392af239d66df71098d69f73">to_bson</link>(j,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
22261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
22262 &#32;&#32;&#32;&#32;}
22263 
22266 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a4a9babd6635e3f7d4af3dec0635073c5">to_bson</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&#32;j,&#32;detail::output_adapter&lt;std::uint8_t&gt;&#32;o)
22267 &#32;&#32;&#32;&#32;{
22268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;binary_writer&lt;std::uint8_t&gt;(o).write_bson(j);
22269 &#32;&#32;&#32;&#32;}
22270 
22273 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a9ebed178fb7dad1a574bcb7c361fb1b8">to_bson</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&#32;j,&#32;detail::output_adapter&lt;char&gt;&#32;o)
22274 &#32;&#32;&#32;&#32;{
22275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;binary_writer&lt;char&gt;(o).write_bson(j);
22276 &#32;&#32;&#32;&#32;}
22277 
22280 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;InputType&gt;
22281 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link>
22282 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a44dd5635fb2da4710f6cd6e42b72773f">from_cbor</link>(InputType&amp;&amp;&#32;i,
22283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;strict&#32;=&#32;<emphasis role="keyword">true</emphasis>,
22284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;allow_exceptions&#32;=&#32;<emphasis role="keyword">true</emphasis>,
22285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9ac">cbor_tag_handler_t</link>&#32;tag_handler&#32;=&#32;cbor_tag_handler_t::error)
22286 &#32;&#32;&#32;&#32;{
22287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
22288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser">detail::json_sax_dom_parser&lt;basic_json&gt;</link>&#32;sdp(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>,&#32;allow_exceptions);
22289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ia&#32;=&#32;detail::input_adapter(std::forward&lt;InputType&gt;(i));
22290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;=&#32;<link linkend="_classnlohmann_1_1detail_1_1binary__reader">binary_reader&lt;decltype(ia)&gt;</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(ia),&#32;input_format_t::cbor).<link linkend="_classnlohmann_1_1detail_1_1binary__reader_1ab4afd9ee276bbb15a0f898061aad94dd">sax_parse</link>(input_format_t::cbor,&#32;&amp;sdp,&#32;strict,&#32;tag_handler);
22291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;?&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;:&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>(value_t::discarded);
22292 &#32;&#32;&#32;&#32;}
22293 
22296 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;IteratorType&gt;
22297 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link>
22298 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1aba4f6fc79cc405fb212ea3d992334e71">from_cbor</link>(IteratorType&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;IteratorType&#32;last,
22299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;strict&#32;=&#32;<emphasis role="keyword">true</emphasis>,
22300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;allow_exceptions&#32;=&#32;<emphasis role="keyword">true</emphasis>,
22301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9ac">cbor_tag_handler_t</link>&#32;tag_handler&#32;=&#32;cbor_tag_handler_t::error)
22302 &#32;&#32;&#32;&#32;{
22303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
22304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser">detail::json_sax_dom_parser&lt;basic_json&gt;</link>&#32;sdp(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>,&#32;allow_exceptions);
22305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ia&#32;=&#32;detail::input_adapter(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(last));
22306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;=&#32;<link linkend="_classnlohmann_1_1detail_1_1binary__reader">binary_reader&lt;decltype(ia)&gt;</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(ia),&#32;input_format_t::cbor).<link linkend="_classnlohmann_1_1detail_1_1binary__reader_1ab4afd9ee276bbb15a0f898061aad94dd">sax_parse</link>(input_format_t::cbor,&#32;&amp;sdp,&#32;strict,&#32;tag_handler);
22307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;?&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;:&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>(value_t::discarded);
22308 &#32;&#32;&#32;&#32;}
22309 
22310 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
22311 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link>
22312 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1af0469b867b0ec3a1c4b229ce9d087620">JSON_HEDLEY_DEPRECATED_FOR</link>(3.8.0,&#32;<link linkend="_classnlohmann_1_1basic__json_1a44dd5635fb2da4710f6cd6e42b72773f">from_cbor</link>(ptr,&#32;ptr&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>))
22313 &#32;&#32;&#32;&#32;static&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a44dd5635fb2da4710f6cd6e42b72773f">from_cbor</link>(const&#32;T*&#32;ptr,&#32;<link linkend="_namespacestd">std</link>::<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,
22314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;<emphasis role="keywordtype">bool</emphasis>&#32;strict&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,
22315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;<emphasis role="keywordtype">bool</emphasis>&#32;allow_exceptions&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,
22316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;<link linkend="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9ac">cbor_tag_handler_t</link>&#32;tag_handler&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9ac">cbor_tag_handler_t</link>::error)
22317 &#32;&#32;&#32;&#32;{
22318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a44dd5635fb2da4710f6cd6e42b72773f">from_cbor</link>(ptr,&#32;ptr&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;strict,&#32;allow_exceptions,&#32;tag_handler);
22319 &#32;&#32;&#32;&#32;}
22320 
22321 
22322 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link>
22323 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1af0469b867b0ec3a1c4b229ce9d087620">JSON_HEDLEY_DEPRECATED_FOR</link>(3.8.0,&#32;<link linkend="_classnlohmann_1_1basic__json_1a44dd5635fb2da4710f6cd6e42b72773f">from_cbor</link>(ptr,&#32;ptr&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>))
22324 &#32;&#32;&#32;&#32;static&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a44dd5635fb2da4710f6cd6e42b72773f">from_cbor</link>(detail::span_input_adapter&amp;&amp;&#32;i,
22325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;<emphasis role="keywordtype">bool</emphasis>&#32;strict&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,
22326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;<emphasis role="keywordtype">bool</emphasis>&#32;allow_exceptions&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,
22327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;<link linkend="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9ac">cbor_tag_handler_t</link>&#32;tag_handler&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9ac">cbor_tag_handler_t</link>::error)
22328 &#32;&#32;&#32;&#32;{
22329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
22330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser">detail::json_sax_dom_parser&lt;basic_json&gt;</link>&#32;sdp(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>,&#32;allow_exceptions);
22331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ia&#32;=&#32;i.get();
22332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOLINTNEXTLINE(hicpp-move-const-arg,performance-move-const-arg)</emphasis>
22333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;=&#32;<link linkend="_classnlohmann_1_1detail_1_1binary__reader">binary_reader&lt;decltype(ia)&gt;</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(ia),&#32;input_format_t::cbor).<link linkend="_classnlohmann_1_1detail_1_1binary__reader_1ab4afd9ee276bbb15a0f898061aad94dd">sax_parse</link>(input_format_t::cbor,&#32;&amp;sdp,&#32;strict,&#32;tag_handler);
22334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;?&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;:&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>(value_t::discarded);
22335 &#32;&#32;&#32;&#32;}
22336 
22339 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;InputType&gt;
22340 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link>
22341 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1adbcab52fca1e25b3311ef14e71a57590">from_msgpack</link>(InputType&amp;&amp;&#32;i,
22342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;strict&#32;=&#32;<emphasis role="keyword">true</emphasis>,
22343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;allow_exceptions&#32;=&#32;<emphasis role="keyword">true</emphasis>)
22344 &#32;&#32;&#32;&#32;{
22345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
22346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser">detail::json_sax_dom_parser&lt;basic_json&gt;</link>&#32;sdp(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>,&#32;allow_exceptions);
22347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ia&#32;=&#32;detail::input_adapter(std::forward&lt;InputType&gt;(i));
22348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;=&#32;<link linkend="_classnlohmann_1_1detail_1_1binary__reader">binary_reader&lt;decltype(ia)&gt;</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(ia),&#32;input_format_t::msgpack).<link linkend="_classnlohmann_1_1detail_1_1binary__reader_1ab4afd9ee276bbb15a0f898061aad94dd">sax_parse</link>(input_format_t::msgpack,&#32;&amp;sdp,&#32;strict);
22349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;?&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;:&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>(value_t::discarded);
22350 &#32;&#32;&#32;&#32;}
22351 
22354 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;IteratorType&gt;
22355 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link>
22356 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a94dbeb08bcd13821512957dcbf3f00bd">from_msgpack</link>(IteratorType&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;IteratorType&#32;last,
22357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;strict&#32;=&#32;<emphasis role="keyword">true</emphasis>,
22358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;allow_exceptions&#32;=&#32;<emphasis role="keyword">true</emphasis>)
22359 &#32;&#32;&#32;&#32;{
22360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
22361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser">detail::json_sax_dom_parser&lt;basic_json&gt;</link>&#32;sdp(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>,&#32;allow_exceptions);
22362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ia&#32;=&#32;detail::input_adapter(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(last));
22363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;=&#32;<link linkend="_classnlohmann_1_1detail_1_1binary__reader">binary_reader&lt;decltype(ia)&gt;</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(ia),&#32;input_format_t::msgpack).<link linkend="_classnlohmann_1_1detail_1_1binary__reader_1ab4afd9ee276bbb15a0f898061aad94dd">sax_parse</link>(input_format_t::msgpack,&#32;&amp;sdp,&#32;strict);
22364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;?&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;:&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>(value_t::discarded);
22365 &#32;&#32;&#32;&#32;}
22366 
22367 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
22368 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link>
22369 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1af0469b867b0ec3a1c4b229ce9d087620">JSON_HEDLEY_DEPRECATED_FOR</link>(3.8.0,&#32;<link linkend="_classnlohmann_1_1basic__json_1adbcab52fca1e25b3311ef14e71a57590">from_msgpack</link>(ptr,&#32;ptr&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>))
22370 &#32;&#32;&#32;&#32;static&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1adbcab52fca1e25b3311ef14e71a57590">from_msgpack</link>(const&#32;T*&#32;ptr,&#32;<link linkend="_namespacestd">std</link>::<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,
22371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;<emphasis role="keywordtype">bool</emphasis>&#32;strict&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,
22372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;<emphasis role="keywordtype">bool</emphasis>&#32;allow_exceptions&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)
22373 &#32;&#32;&#32;&#32;{
22374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1adbcab52fca1e25b3311ef14e71a57590">from_msgpack</link>(ptr,&#32;ptr&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;strict,&#32;allow_exceptions);
22375 &#32;&#32;&#32;&#32;}
22376 
22377 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link>
22378 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1af0469b867b0ec3a1c4b229ce9d087620">JSON_HEDLEY_DEPRECATED_FOR</link>(3.8.0,&#32;<link linkend="_classnlohmann_1_1basic__json_1adbcab52fca1e25b3311ef14e71a57590">from_msgpack</link>(ptr,&#32;ptr&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>))
22379 &#32;&#32;&#32;&#32;static&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1adbcab52fca1e25b3311ef14e71a57590">from_msgpack</link>(detail::span_input_adapter&amp;&amp;&#32;i,
22380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;<emphasis role="keywordtype">bool</emphasis>&#32;strict&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,
22381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;<emphasis role="keywordtype">bool</emphasis>&#32;allow_exceptions&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)
22382 &#32;&#32;&#32;&#32;{
22383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
22384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser">detail::json_sax_dom_parser&lt;basic_json&gt;</link>&#32;sdp(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>,&#32;allow_exceptions);
22385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ia&#32;=&#32;i.get();
22386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOLINTNEXTLINE(hicpp-move-const-arg,performance-move-const-arg)</emphasis>
22387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;=&#32;<link linkend="_classnlohmann_1_1detail_1_1binary__reader">binary_reader&lt;decltype(ia)&gt;</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(ia),&#32;input_format_t::msgpack).<link linkend="_classnlohmann_1_1detail_1_1binary__reader_1ab4afd9ee276bbb15a0f898061aad94dd">sax_parse</link>(input_format_t::msgpack,&#32;&amp;sdp,&#32;strict);
22388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;?&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;:&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>(value_t::discarded);
22389 &#32;&#32;&#32;&#32;}
22390 
22393 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;InputType&gt;
22394 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link>
22395 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1aa81f62db69978b90ff701f05c72e03a7">from_ubjson</link>(InputType&amp;&amp;&#32;i,
22396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;strict&#32;=&#32;<emphasis role="keyword">true</emphasis>,
22397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;allow_exceptions&#32;=&#32;<emphasis role="keyword">true</emphasis>)
22398 &#32;&#32;&#32;&#32;{
22399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
22400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser">detail::json_sax_dom_parser&lt;basic_json&gt;</link>&#32;sdp(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>,&#32;allow_exceptions);
22401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ia&#32;=&#32;detail::input_adapter(std::forward&lt;InputType&gt;(i));
22402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;=&#32;<link linkend="_classnlohmann_1_1detail_1_1binary__reader">binary_reader&lt;decltype(ia)&gt;</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(ia),&#32;input_format_t::ubjson).<link linkend="_classnlohmann_1_1detail_1_1binary__reader_1ab4afd9ee276bbb15a0f898061aad94dd">sax_parse</link>(input_format_t::ubjson,&#32;&amp;sdp,&#32;strict);
22403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;?&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;:&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>(value_t::discarded);
22404 &#32;&#32;&#32;&#32;}
22405 
22408 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;IteratorType&gt;
22409 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link>
22410 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a9dbb422350fed520ce8c1ca8762c0251">from_ubjson</link>(IteratorType&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;IteratorType&#32;last,
22411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;strict&#32;=&#32;<emphasis role="keyword">true</emphasis>,
22412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;allow_exceptions&#32;=&#32;<emphasis role="keyword">true</emphasis>)
22413 &#32;&#32;&#32;&#32;{
22414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
22415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser">detail::json_sax_dom_parser&lt;basic_json&gt;</link>&#32;sdp(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>,&#32;allow_exceptions);
22416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ia&#32;=&#32;detail::input_adapter(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(last));
22417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;=&#32;<link linkend="_classnlohmann_1_1detail_1_1binary__reader">binary_reader&lt;decltype(ia)&gt;</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(ia),&#32;input_format_t::ubjson).<link linkend="_classnlohmann_1_1detail_1_1binary__reader_1ab4afd9ee276bbb15a0f898061aad94dd">sax_parse</link>(input_format_t::ubjson,&#32;&amp;sdp,&#32;strict);
22418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;?&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;:&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>(value_t::discarded);
22419 &#32;&#32;&#32;&#32;}
22420 
22421 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
22422 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link>
22423 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1af0469b867b0ec3a1c4b229ce9d087620">JSON_HEDLEY_DEPRECATED_FOR</link>(3.8.0,&#32;<link linkend="_classnlohmann_1_1basic__json_1aa81f62db69978b90ff701f05c72e03a7">from_ubjson</link>(ptr,&#32;ptr&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>))
22424 &#32;&#32;&#32;&#32;static&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1aa81f62db69978b90ff701f05c72e03a7">from_ubjson</link>(const&#32;T*&#32;ptr,&#32;<link linkend="_namespacestd">std</link>::<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,
22425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;<emphasis role="keywordtype">bool</emphasis>&#32;strict&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,
22426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;<emphasis role="keywordtype">bool</emphasis>&#32;allow_exceptions&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)
22427 &#32;&#32;&#32;&#32;{
22428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1aa81f62db69978b90ff701f05c72e03a7">from_ubjson</link>(ptr,&#32;ptr&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;strict,&#32;allow_exceptions);
22429 &#32;&#32;&#32;&#32;}
22430 
22431 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link>
22432 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1af0469b867b0ec3a1c4b229ce9d087620">JSON_HEDLEY_DEPRECATED_FOR</link>(3.8.0,&#32;<link linkend="_classnlohmann_1_1basic__json_1aa81f62db69978b90ff701f05c72e03a7">from_ubjson</link>(ptr,&#32;ptr&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>))
22433 &#32;&#32;&#32;&#32;static&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1aa81f62db69978b90ff701f05c72e03a7">from_ubjson</link>(detail::span_input_adapter&amp;&amp;&#32;i,
22434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;<emphasis role="keywordtype">bool</emphasis>&#32;strict&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,
22435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;<emphasis role="keywordtype">bool</emphasis>&#32;allow_exceptions&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)
22436 &#32;&#32;&#32;&#32;{
22437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
22438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser">detail::json_sax_dom_parser&lt;basic_json&gt;</link>&#32;sdp(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>,&#32;allow_exceptions);
22439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ia&#32;=&#32;i.get();
22440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOLINTNEXTLINE(hicpp-move-const-arg,performance-move-const-arg)</emphasis>
22441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;=&#32;<link linkend="_classnlohmann_1_1detail_1_1binary__reader">binary_reader&lt;decltype(ia)&gt;</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(ia),&#32;input_format_t::ubjson).<link linkend="_classnlohmann_1_1detail_1_1binary__reader_1ab4afd9ee276bbb15a0f898061aad94dd">sax_parse</link>(input_format_t::ubjson,&#32;&amp;sdp,&#32;strict);
22442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;?&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;:&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>(value_t::discarded);
22443 &#32;&#32;&#32;&#32;}
22444 
22445 
22448 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;InputType&gt;
22449 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link>
22450 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a42501aa335b8370a3ed12580c78ee45b">from_bjdata</link>(InputType&amp;&amp;&#32;i,
22451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;strict&#32;=&#32;<emphasis role="keyword">true</emphasis>,
22452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;allow_exceptions&#32;=&#32;<emphasis role="keyword">true</emphasis>)
22453 &#32;&#32;&#32;&#32;{
22454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
22455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser">detail::json_sax_dom_parser&lt;basic_json&gt;</link>&#32;sdp(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>,&#32;allow_exceptions);
22456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ia&#32;=&#32;detail::input_adapter(std::forward&lt;InputType&gt;(i));
22457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;=&#32;<link linkend="_classnlohmann_1_1detail_1_1binary__reader">binary_reader&lt;decltype(ia)&gt;</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(ia),&#32;input_format_t::bjdata).<link linkend="_classnlohmann_1_1detail_1_1binary__reader_1ab4afd9ee276bbb15a0f898061aad94dd">sax_parse</link>(input_format_t::bjdata,&#32;&amp;sdp,&#32;strict);
22458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;?&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;:&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>(value_t::discarded);
22459 &#32;&#32;&#32;&#32;}
22460 
22463 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;IteratorType&gt;
22464 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link>
22465 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1acef7ae1c76b5e6869f0a00f6a473d705">from_bjdata</link>(IteratorType&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;IteratorType&#32;last,
22466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;strict&#32;=&#32;<emphasis role="keyword">true</emphasis>,
22467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;allow_exceptions&#32;=&#32;<emphasis role="keyword">true</emphasis>)
22468 &#32;&#32;&#32;&#32;{
22469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
22470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser">detail::json_sax_dom_parser&lt;basic_json&gt;</link>&#32;sdp(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>,&#32;allow_exceptions);
22471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ia&#32;=&#32;detail::input_adapter(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(last));
22472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;=&#32;<link linkend="_classnlohmann_1_1detail_1_1binary__reader">binary_reader&lt;decltype(ia)&gt;</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(ia),&#32;input_format_t::bjdata).<link linkend="_classnlohmann_1_1detail_1_1binary__reader_1ab4afd9ee276bbb15a0f898061aad94dd">sax_parse</link>(input_format_t::bjdata,&#32;&amp;sdp,&#32;strict);
22473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;?&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;:&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>(value_t::discarded);
22474 &#32;&#32;&#32;&#32;}
22475 
22476 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
22477 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link>
22478 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a0a12b21c993c57c160936b2581b7a5d7">from_bjdata</link>(<emphasis role="keyword">const</emphasis>&#32;T*&#32;ptr,&#32;std::size_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,
22479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;strict&#32;=&#32;<emphasis role="keyword">true</emphasis>,
22480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;allow_exceptions&#32;=&#32;<emphasis role="keyword">true</emphasis>)
22481 &#32;&#32;&#32;&#32;{
22482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a42501aa335b8370a3ed12580c78ee45b">from_bjdata</link>(ptr,&#32;ptr&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;strict,&#32;allow_exceptions);
22483 &#32;&#32;&#32;&#32;}
22484 
22485 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link>
22486 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a20720fee5ec0f0674cefb5d9a24d0d90">from_bjdata</link>(detail::span_input_adapter&amp;&amp;&#32;i,
22487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;strict&#32;=&#32;<emphasis role="keyword">true</emphasis>,
22488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;allow_exceptions&#32;=&#32;<emphasis role="keyword">true</emphasis>)
22489 &#32;&#32;&#32;&#32;{
22490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
22491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser">detail::json_sax_dom_parser&lt;basic_json&gt;</link>&#32;sdp(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>,&#32;allow_exceptions);
22492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ia&#32;=&#32;i.get();
22493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOLINTNEXTLINE(hicpp-move-const-arg,performance-move-const-arg)</emphasis>
22494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;=&#32;<link linkend="_classnlohmann_1_1detail_1_1binary__reader">binary_reader&lt;decltype(ia)&gt;</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(ia),&#32;input_format_t::bjdata).<link linkend="_classnlohmann_1_1detail_1_1binary__reader_1ab4afd9ee276bbb15a0f898061aad94dd">sax_parse</link>(input_format_t::bjdata,&#32;&amp;sdp,&#32;strict);
22495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;?&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;:&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>(value_t::discarded);
22496 &#32;&#32;&#32;&#32;}
22497 
22498 
22501 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;InputType&gt;
22502 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link>
22503 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a4e02793f2691aa29ab7cb69fddafbf5c">from_bson</link>(InputType&amp;&amp;&#32;i,
22504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;strict&#32;=&#32;<emphasis role="keyword">true</emphasis>,
22505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;allow_exceptions&#32;=&#32;<emphasis role="keyword">true</emphasis>)
22506 &#32;&#32;&#32;&#32;{
22507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
22508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser">detail::json_sax_dom_parser&lt;basic_json&gt;</link>&#32;sdp(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>,&#32;allow_exceptions);
22509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ia&#32;=&#32;detail::input_adapter(std::forward&lt;InputType&gt;(i));
22510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;=&#32;<link linkend="_classnlohmann_1_1detail_1_1binary__reader">binary_reader&lt;decltype(ia)&gt;</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(ia),&#32;input_format_t::bson).<link linkend="_classnlohmann_1_1detail_1_1binary__reader_1ab4afd9ee276bbb15a0f898061aad94dd">sax_parse</link>(input_format_t::bson,&#32;&amp;sdp,&#32;strict);
22511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;?&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;:&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>(value_t::discarded);
22512 &#32;&#32;&#32;&#32;}
22513 
22516 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;IteratorType&gt;
22517 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link>
22518 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a4118d0ec23d9eeafc236b9524d220e94">from_bson</link>(IteratorType&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;IteratorType&#32;last,
22519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;strict&#32;=&#32;<emphasis role="keyword">true</emphasis>,
22520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;allow_exceptions&#32;=&#32;<emphasis role="keyword">true</emphasis>)
22521 &#32;&#32;&#32;&#32;{
22522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
22523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser">detail::json_sax_dom_parser&lt;basic_json&gt;</link>&#32;sdp(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>,&#32;allow_exceptions);
22524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ia&#32;=&#32;detail::input_adapter(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(last));
22525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;=&#32;<link linkend="_classnlohmann_1_1detail_1_1binary__reader">binary_reader&lt;decltype(ia)&gt;</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(ia),&#32;input_format_t::bson).<link linkend="_classnlohmann_1_1detail_1_1binary__reader_1ab4afd9ee276bbb15a0f898061aad94dd">sax_parse</link>(input_format_t::bson,&#32;&amp;sdp,&#32;strict);
22526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;?&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;:&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>(value_t::discarded);
22527 &#32;&#32;&#32;&#32;}
22528 
22529 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
22530 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link>
22531 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1af0469b867b0ec3a1c4b229ce9d087620">JSON_HEDLEY_DEPRECATED_FOR</link>(3.8.0,&#32;<link linkend="_classnlohmann_1_1basic__json_1a4e02793f2691aa29ab7cb69fddafbf5c">from_bson</link>(ptr,&#32;ptr&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>))
22532 &#32;&#32;&#32;&#32;static&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a4e02793f2691aa29ab7cb69fddafbf5c">from_bson</link>(const&#32;T*&#32;ptr,&#32;<link linkend="_namespacestd">std</link>::<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,
22533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;<emphasis role="keywordtype">bool</emphasis>&#32;strict&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,
22534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;<emphasis role="keywordtype">bool</emphasis>&#32;allow_exceptions&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)
22535 &#32;&#32;&#32;&#32;{
22536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a4e02793f2691aa29ab7cb69fddafbf5c">from_bson</link>(ptr,&#32;ptr&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;strict,&#32;allow_exceptions);
22537 &#32;&#32;&#32;&#32;}
22538 
22539 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link>
22540 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1af0469b867b0ec3a1c4b229ce9d087620">JSON_HEDLEY_DEPRECATED_FOR</link>(3.8.0,&#32;<link linkend="_classnlohmann_1_1basic__json_1a4e02793f2691aa29ab7cb69fddafbf5c">from_bson</link>(ptr,&#32;ptr&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>))
22541 &#32;&#32;&#32;&#32;static&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a4e02793f2691aa29ab7cb69fddafbf5c">from_bson</link>(detail::span_input_adapter&amp;&amp;&#32;i,
22542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;<emphasis role="keywordtype">bool</emphasis>&#32;strict&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,
22543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;<emphasis role="keywordtype">bool</emphasis>&#32;allow_exceptions&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)
22544 &#32;&#32;&#32;&#32;{
22545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
22546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser">detail::json_sax_dom_parser&lt;basic_json&gt;</link>&#32;sdp(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>,&#32;allow_exceptions);
22547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ia&#32;=&#32;i.get();
22548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOLINTNEXTLINE(hicpp-move-const-arg,performance-move-const-arg)</emphasis>
22549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;=&#32;<link linkend="_classnlohmann_1_1detail_1_1binary__reader">binary_reader&lt;decltype(ia)&gt;</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(ia),&#32;input_format_t::bson).<link linkend="_classnlohmann_1_1detail_1_1binary__reader_1ab4afd9ee276bbb15a0f898061aad94dd">sax_parse</link>(input_format_t::bson,&#32;&amp;sdp,&#32;strict);
22550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;?&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;:&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>(value_t::discarded);
22551 &#32;&#32;&#32;&#32;}
22553 
22555 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;JSON&#32;Pointer&#32;support&#32;//</emphasis>
22557 
22560 
22563 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">reference</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a0d3deaa73b3644b4da3f8ef3172cd8d2">operator[]</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&amp;&#32;ptr)
22564 &#32;&#32;&#32;&#32;{
22565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ptr.get_unchecked(<emphasis role="keyword">this</emphasis>);
22566 &#32;&#32;&#32;&#32;}
22567 
22568 &#32;&#32;&#32;&#32;template&lt;typename&#32;BasicJsonType,&#32;detail::enable_if_t&lt;detail::is_basic_json&lt;BasicJsonType&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&gt;
22569 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1af0469b867b0ec3a1c4b229ce9d087620">JSON_HEDLEY_DEPRECATED_FOR</link>(3.11.0,&#32;<link linkend="_classnlohmann_1_1json__pointer">basic_json::json_pointer</link>&#32;<link linkend="__classes_2lib_2include_2iso646_8h_1a339a611d7f9dc3a59c359f0da7beaf3c">or</link>&#32;<link linkend="_classnlohmann_1_1json__pointer">nlohmann::json_pointer&lt;basic_json::string_t&gt;</link>)&#32;<emphasis role="comment">//&#32;NOLINT(readability/alt_tokens)</emphasis>
22570 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">reference</link>&#32;operator[](const&#32;::<link linkend="_namespacenlohmann">nlohmann</link>::<link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&lt;BasicJsonType&gt;&amp;&#32;ptr)
22571 &#32;&#32;&#32;&#32;{
22572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ptr.get_unchecked(<emphasis role="keyword">this</emphasis>);
22573 &#32;&#32;&#32;&#32;}
22574 
22577 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a0a691c29eb7c4acd91ccb498a79cd3ee">operator[]</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&amp;&#32;ptr)<emphasis role="keyword">&#32;const</emphasis>
22578 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
22579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ptr.get_unchecked(<emphasis role="keyword">this</emphasis>);
22580 &#32;&#32;&#32;&#32;}
22581 
22582 &#32;&#32;&#32;&#32;template&lt;typename&#32;BasicJsonType,&#32;detail::enable_if_t&lt;detail::is_basic_json&lt;BasicJsonType&gt;::value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;=&#32;0&gt;
22583 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1af0469b867b0ec3a1c4b229ce9d087620">JSON_HEDLEY_DEPRECATED_FOR</link>(3.11.0,&#32;<link linkend="_classnlohmann_1_1json__pointer">basic_json::json_pointer</link>&#32;<link linkend="__classes_2lib_2include_2iso646_8h_1a339a611d7f9dc3a59c359f0da7beaf3c">or</link>&#32;<link linkend="_classnlohmann_1_1json__pointer">nlohmann::json_pointer&lt;basic_json::string_t&gt;</link>)&#32;<emphasis role="comment">//&#32;NOLINT(readability/alt_tokens)</emphasis>
22584 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;operator[](const&#32;::<link linkend="_namespacenlohmann">nlohmann</link>::<link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&lt;BasicJsonType&gt;&amp;&#32;ptr)<emphasis role="keyword">&#32;const</emphasis>
22585 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
22586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ptr.get_unchecked(<emphasis role="keyword">this</emphasis>);
22587 &#32;&#32;&#32;&#32;}
22588 
22591 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">reference</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1aa014a978f8b6c085db8825faa8dad320">at</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&amp;&#32;ptr)
22592 &#32;&#32;&#32;&#32;{
22593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ptr.get_checked(<emphasis role="keyword">this</emphasis>);
22594 &#32;&#32;&#32;&#32;}
22595 
22596 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
22597 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1af0469b867b0ec3a1c4b229ce9d087620">JSON_HEDLEY_DEPRECATED_FOR</link>(3.11.0,&#32;<link linkend="_classnlohmann_1_1json__pointer">basic_json::json_pointer</link>&#32;<link linkend="__classes_2lib_2include_2iso646_8h_1a339a611d7f9dc3a59c359f0da7beaf3c">or</link>&#32;<link linkend="_classnlohmann_1_1json__pointer">nlohmann::json_pointer&lt;basic_json::string_t&gt;</link>)&#32;<emphasis role="comment">//&#32;NOLINT(readability/alt_tokens)</emphasis>
22598 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">reference</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a52b18a5b7e68652c65b070900c438c6e">at</link>(const&#32;::<link linkend="_namespacenlohmann">nlohmann</link>::<link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&lt;BasicJsonType&gt;&amp;&#32;ptr)
22599 &#32;&#32;&#32;&#32;{
22600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ptr.get_checked(<emphasis role="keyword">this</emphasis>);
22601 &#32;&#32;&#32;&#32;}
22602 
22605 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a8284b9c1d4d0830151eaa000f907b2e6">at</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&amp;&#32;ptr)<emphasis role="keyword">&#32;const</emphasis>
22606 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
22607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ptr.get_checked(<emphasis role="keyword">this</emphasis>);
22608 &#32;&#32;&#32;&#32;}
22609 
22610 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType&gt;
22611 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1af0469b867b0ec3a1c4b229ce9d087620">JSON_HEDLEY_DEPRECATED_FOR</link>(3.11.0,&#32;<link linkend="_classnlohmann_1_1json__pointer">basic_json::json_pointer</link>&#32;<link linkend="__classes_2lib_2include_2iso646_8h_1a339a611d7f9dc3a59c359f0da7beaf3c">or</link>&#32;<link linkend="_classnlohmann_1_1json__pointer">nlohmann::json_pointer&lt;basic_json::string_t&gt;</link>)&#32;<emphasis role="comment">//&#32;NOLINT(readability/alt_tokens)</emphasis>
22612 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">const_reference</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a52b18a5b7e68652c65b070900c438c6e">at</link>(const&#32;::<link linkend="_namespacenlohmann">nlohmann</link>::<link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&lt;BasicJsonType&gt;&amp;&#32;ptr)<emphasis role="keyword">&#32;const</emphasis>
22613 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
22614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ptr.get_checked(<emphasis role="keyword">this</emphasis>);
22615 &#32;&#32;&#32;&#32;}
22616 
22619 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1ab7aa6e048e659481a036f2d872c7cba6">flatten</link>()<emphasis role="keyword">&#32;const</emphasis>
22620 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
22621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>(value_t::object);
22622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;json_pointer::flatten(<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;*<emphasis role="keyword">this</emphasis>,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
22623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
22624 &#32;&#32;&#32;&#32;}
22625 
22628 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1adea158bff8642202420898f6322da479">unflatten</link>()<emphasis role="keyword">&#32;const</emphasis>
22629 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
22630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;json_pointer::unflatten(*<emphasis role="keyword">this</emphasis>);
22631 &#32;&#32;&#32;&#32;}
22632 
22634 
22636 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;JSON&#32;Patch&#32;functions&#32;//</emphasis>
22638 
22641 
22644 &#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1adcc786998f220a5b3083ee8a37c4553e">patch</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&#32;json_patch)<emphasis role="keyword">&#32;const</emphasis>
22645 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
22646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;make&#32;a&#32;working&#32;copy&#32;to&#32;apply&#32;the&#32;patch&#32;to</emphasis>
22647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
22648 
22649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;valid&#32;JSON&#32;Patch&#32;operations</emphasis>
22650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;patch_operations&#32;{<link linkend="__classes_2lib_2glm_2test_2core_2core__setup__force__size__t__length_8cpp_1a125cf68de8b64e40ee4cede7e2b57ea2">add</link>,&#32;remove,&#32;replace,&#32;move,&#32;copy,&#32;test,&#32;invalid};
22651 
22652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;get_op&#32;=&#32;[](<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;&#32;op)
22653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(op&#32;==&#32;<emphasis role="stringliteral">&quot;add&quot;</emphasis>)
22655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;patch_operations::add;
22657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(op&#32;==&#32;<emphasis role="stringliteral">&quot;remove&quot;</emphasis>)
22659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;patch_operations::remove;
22661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(op&#32;==&#32;<emphasis role="stringliteral">&quot;replace&quot;</emphasis>)
22663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;patch_operations::replace;
22665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(op&#32;==&#32;<emphasis role="stringliteral">&quot;move&quot;</emphasis>)
22667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;patch_operations::move;
22669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(op&#32;==&#32;<emphasis role="stringliteral">&quot;copy&quot;</emphasis>)
22671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;patch_operations::copy;
22673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(op&#32;==&#32;<emphasis role="stringliteral">&quot;test&quot;</emphasis>)
22675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;patch_operations::test;
22677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22678 
22679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;patch_operations::invalid;
22680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
22681 
22682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;wrapper&#32;for&#32;&quot;add&quot;&#32;operation;&#32;add&#32;value&#32;at&#32;ptr</emphasis>
22683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;operation_add&#32;=&#32;[&amp;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>](<link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&#32;&amp;&#32;ptr,&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
22684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;adding&#32;to&#32;the&#32;root&#32;of&#32;the&#32;target&#32;document&#32;means&#32;replacing&#32;it</emphasis>
22686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ptr.<link linkend="_classnlohmann_1_1json__pointer_1a4c881fe3be1eecbeb3a5a27494d8c77b">empty</link>())
22687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>;
22689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
22690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22691 
22692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;make&#32;sure&#32;the&#32;top&#32;element&#32;of&#32;the&#32;pointer&#32;exists</emphasis>
22693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&#32;top_pointer&#32;=&#32;ptr.top();
22694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(top_pointer&#32;!=&#32;ptr)
22695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.at(top_pointer);
22697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22698 
22699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;get&#32;reference&#32;to&#32;parent&#32;of&#32;JSON&#32;pointer&#32;ptr</emphasis>
22700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;last_path&#32;=&#32;ptr.<link linkend="_classnlohmann_1_1json__pointer_1abbc006b3be9df020d85bd3c645080bca">back</link>();
22701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ptr.<link linkend="_classnlohmann_1_1json__pointer_1a23ec0f3f5d976a81cf387287375be57e">pop_back</link>();
22702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&#32;parent&#32;=&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>[ptr];
22703 
22704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(parent.m_type)
22705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::null:
22707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::object:
22708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;use&#32;operator[]&#32;to&#32;add&#32;value</emphasis>
22710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parent[last_path]&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>;
22711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
22712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22713 
22714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::array:
22715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(last_path&#32;==&#32;<emphasis role="stringliteral">&quot;-&quot;</emphasis>)
22717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;special&#32;case:&#32;append&#32;to&#32;back</emphasis>
22719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parent.<link linkend="_classnlohmann_1_1basic__json_1ab9e0253c92736db021840105d374c4c4">push_back</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
22720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
22722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;idx&#32;=&#32;json_pointer::template&#32;array_index&lt;basic_json_t&gt;(last_path);
22724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(idx&#32;&gt;&#32;parent.<link linkend="_classnlohmann_1_1basic__json_1a33c7c8638bb0b12e6d1b69d8106dd2e0">size</link>()))
22725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;avoid&#32;undefined&#32;behavior</emphasis>
22727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1out__of__range_1a4c0af7bdbf4f20e0812900639829028e">out_of_range::create</link>(401,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;array&#32;index&#32;&quot;</emphasis>,&#32;std::to_string(idx),&#32;<emphasis role="stringliteral">&quot;&#32;is&#32;out&#32;of&#32;range&quot;</emphasis>),&#32;&amp;parent));
22728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22729 
22730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;default&#32;case:&#32;insert&#32;add&#32;offset</emphasis>
22731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parent.<link linkend="_classnlohmann_1_1basic__json_1aeb86e8478e20d95970a8b61ff01dce3b">insert</link>(parent.<link linkend="_classnlohmann_1_1basic__json_1a23b495b4c282e4afacf382f5b49af7c7">begin</link>()&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classnlohmann_1_1basic__json_1a3d20d11e5dfe95084a76f62eca54fadd">difference_type</link><emphasis role="keyword">&gt;</emphasis>(idx),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
22732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
22734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22735 
22736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;there&#32;exists&#32;a&#32;parent&#32;it&#32;cannot&#32;be&#32;primitive</emphasis>
22737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::string:&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
22738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::boolean:&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
22739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_integer:&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
22740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_unsigned:&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
22741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_float:&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
22742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::binary:&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
22743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::discarded:&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
22744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LCOV_EXCL_LINE</emphasis>
22745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(<emphasis role="keyword">false</emphasis>);&#32;<emphasis role="comment">//&#32;NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)&#32;LCOV_EXCL_LINE</emphasis>
22746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
22748 
22749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;wrapper&#32;for&#32;&quot;remove&quot;&#32;operation;&#32;remove&#32;value&#32;at&#32;ptr</emphasis>
22750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;operation_remove&#32;=&#32;[<emphasis role="keyword">this</emphasis>,&#32;&amp;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>](<link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&#32;&amp;&#32;ptr)
22751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;get&#32;reference&#32;to&#32;parent&#32;of&#32;JSON&#32;pointer&#32;ptr</emphasis>
22753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;last_path&#32;=&#32;ptr.<link linkend="_classnlohmann_1_1json__pointer_1abbc006b3be9df020d85bd3c645080bca">back</link>();
22754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ptr.<link linkend="_classnlohmann_1_1json__pointer_1a23ec0f3f5d976a81cf387287375be57e">pop_back</link>();
22755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&#32;parent&#32;=&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.<link linkend="_classnlohmann_1_1basic__json_1a52b18a5b7e68652c65b070900c438c6e">at</link>(ptr);
22756 
22757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;remove&#32;child</emphasis>
22758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parent.<link linkend="_classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa">is_object</link>())
22759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;perform&#32;range&#32;check</emphasis>
22761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;parent.<link linkend="_classnlohmann_1_1basic__json_1ae26778239430743a6298b450eb427c65">find</link>(last_path);
22762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0">JSON_HEDLEY_LIKELY</link>(it&#32;!=&#32;parent.<link linkend="_classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc">end</link>()))
22763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parent.<link linkend="_classnlohmann_1_1basic__json_1a494632b69bbe1d0153d3bedad0901b8e">erase</link>(it);
22765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
22767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1out__of__range_1a4c0af7bdbf4f20e0812900639829028e">out_of_range::create</link>(403,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;key&#32;&apos;&quot;</emphasis>,&#32;last_path,&#32;<emphasis role="stringliteral">&quot;&apos;&#32;not&#32;found&quot;</emphasis>),&#32;<emphasis role="keyword">this</emphasis>));
22769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parent.<link linkend="_classnlohmann_1_1basic__json_1ab5b70d60a636b9c5e10f6c8caac60b9e">is_array</link>())
22772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;note&#32;erase&#32;performs&#32;range&#32;check</emphasis>
22774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parent.<link linkend="_classnlohmann_1_1basic__json_1a494632b69bbe1d0153d3bedad0901b8e">erase</link>(json_pointer::template&#32;array_index&lt;basic_json_t&gt;(last_path));
22775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
22777 
22778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;type&#32;check:&#32;top&#32;level&#32;value&#32;must&#32;be&#32;an&#32;array</emphasis>
22779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!json_patch.<link linkend="_classnlohmann_1_1basic__json_1ab5b70d60a636b9c5e10f6c8caac60b9e">is_array</link>()))
22780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">parse_error::create</link>(104,&#32;0,&#32;<emphasis role="stringliteral">&quot;JSON&#32;patch&#32;must&#32;be&#32;an&#32;array&#32;of&#32;objects&quot;</emphasis>,&#32;&amp;json_patch));
22782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22783 
22784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;iterate&#32;and&#32;apply&#32;the&#32;operations</emphasis>
22785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;:&#32;json_patch)
22786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;wrapper&#32;to&#32;get&#32;a&#32;value&#32;for&#32;an&#32;operation</emphasis>
22788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;get_value&#32;=&#32;[&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>](<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;&#32;op,
22789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;&#32;member,
22790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;string_type)&#32;-&gt;&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;&amp;
22791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;find&#32;value</emphasis>
22793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.<link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link>.object-&gt;find(member);
22794 
22795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;context-sensitive&#32;error&#32;message</emphasis>
22796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;error_msg&#32;=&#32;(op&#32;==&#32;<emphasis role="stringliteral">&quot;op&quot;</emphasis>)&#32;?&#32;<emphasis role="stringliteral">&quot;operation&quot;</emphasis>&#32;:&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;operation&#32;&apos;&quot;</emphasis>,&#32;op,&#32;<emphasis role="charliteral">&apos;\&apos;&apos;</emphasis>);
22797 
22798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;if&#32;desired&#32;value&#32;is&#32;present</emphasis>
22799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(it&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.m_value.object-&gt;end()))
22800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOLINTNEXTLINE(performance-inefficient-string-concatenation)</emphasis>
22802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">parse_error::create</link>(105,&#32;0,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(error_msg,&#32;<emphasis role="stringliteral">&quot;&#32;must&#32;have&#32;member&#32;&apos;&quot;</emphasis>,&#32;member,&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis>),&#32;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>));
22803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22804 
22805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;if&#32;result&#32;is&#32;of&#32;type&#32;string</emphasis>
22806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(string_type&#32;&amp;&amp;&#32;!it-&gt;second.is_string()))
22807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOLINTNEXTLINE(performance-inefficient-string-concatenation)</emphasis>
22809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">parse_error::create</link>(105,&#32;0,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(error_msg,&#32;<emphasis role="stringliteral">&quot;&#32;must&#32;have&#32;string&#32;member&#32;&apos;&quot;</emphasis>,&#32;member,&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis>),&#32;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>));
22810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22811 
22812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;no&#32;error:&#32;return&#32;value</emphasis>
22813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;it-&gt;second;
22814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
22815 
22816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;type&#32;check:&#32;every&#32;element&#32;of&#32;the&#32;array&#32;must&#32;be&#32;an&#32;object</emphasis>
22817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.is_object()))
22818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">parse_error::create</link>(104,&#32;0,&#32;<emphasis role="stringliteral">&quot;JSON&#32;patch&#32;must&#32;be&#32;an&#32;array&#32;of&#32;objects&quot;</emphasis>,&#32;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>));
22820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22821 
22822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;collect&#32;mandatory&#32;members</emphasis>
22823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;op&#32;=&#32;get_value(<emphasis role="stringliteral">&quot;op&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;op&quot;</emphasis>,&#32;<emphasis role="keyword">true</emphasis>).template&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get&lt;std::string&gt;</link>();
22824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_classpath">path</link>&#32;=&#32;get_value(op,&#32;<emphasis role="stringliteral">&quot;path&quot;</emphasis>,&#32;<emphasis role="keyword">true</emphasis>).template&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get&lt;std::string&gt;</link>();
22825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&#32;ptr(<link linkend="_classpath">path</link>);
22826 
22827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(get_op(op))
22828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;patch_operations::add:
22830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;operation_add(ptr,&#32;get_value(<emphasis role="stringliteral">&quot;add&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;value&quot;</emphasis>,&#32;<emphasis role="keyword">false</emphasis>));
22832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
22833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22834 
22835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;patch_operations::remove:
22836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;operation_remove(ptr);
22838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
22839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22840 
22841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;patch_operations::replace:
22842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;&quot;path&quot;&#32;location&#32;must&#32;exist&#32;-&#32;use&#32;at()</emphasis>
22844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.at(ptr)&#32;=&#32;get_value(<emphasis role="stringliteral">&quot;replace&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;value&quot;</emphasis>,&#32;<emphasis role="keyword">false</emphasis>);
22845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
22846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22847 
22848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;patch_operations::move:
22849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;from_path&#32;=&#32;get_value(<emphasis role="stringliteral">&quot;move&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;from&quot;</emphasis>,&#32;<emphasis role="keyword">true</emphasis>).template&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get&lt;std::string&gt;</link>();
22851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&#32;from_ptr(from_path);
22852 
22853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;&quot;from&quot;&#32;location&#32;must&#32;exist&#32;-&#32;use&#32;at()</emphasis>
22854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>&#32;=&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.<link linkend="_classnlohmann_1_1basic__json_1a52b18a5b7e68652c65b070900c438c6e">at</link>(from_ptr);
22855 
22856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;move&#32;operation&#32;is&#32;functionally&#32;identical&#32;to&#32;a</emphasis>
22857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;remove&quot;&#32;operation&#32;on&#32;the&#32;&quot;from&quot;&#32;location,&#32;followed</emphasis>
22858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;immediately&#32;by&#32;an&#32;&quot;add&quot;&#32;operation&#32;at&#32;the&#32;target</emphasis>
22859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;location&#32;with&#32;the&#32;value&#32;that&#32;was&#32;just&#32;removed.</emphasis>
22860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;operation_remove(from_ptr);
22861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;operation_add(ptr,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>);
22862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
22863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22864 
22865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;patch_operations::copy:
22866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;from_path&#32;=&#32;get_value(<emphasis role="stringliteral">&quot;copy&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;from&quot;</emphasis>,&#32;<emphasis role="keyword">true</emphasis>).template&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get&lt;std::string&gt;</link>();
22868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&#32;from_ptr(from_path);
22869 
22870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;&quot;from&quot;&#32;location&#32;must&#32;exist&#32;-&#32;use&#32;at()</emphasis>
22871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>&#32;=&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.<link linkend="_classnlohmann_1_1basic__json_1a52b18a5b7e68652c65b070900c438c6e">at</link>(from_ptr);
22872 
22873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;copy&#32;is&#32;functionally&#32;identical&#32;to&#32;an&#32;&quot;add&quot;</emphasis>
22874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;operation&#32;at&#32;the&#32;target&#32;location&#32;using&#32;the&#32;value</emphasis>
22875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;specified&#32;in&#32;the&#32;&quot;from&quot;&#32;member.</emphasis>
22876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;operation_add(ptr,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>);
22877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
22878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22879 
22880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;patch_operations::test:
22881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;success&#32;=&#32;<emphasis role="keyword">false</emphasis>;
22883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a985d3b82445302c57257f6432f261fe9">JSON_TRY</link>
22884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;if&#32;&quot;value&quot;&#32;matches&#32;the&#32;one&#32;at&#32;&quot;path&quot;</emphasis>
22886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;&quot;path&quot;&#32;location&#32;must&#32;exist&#32;-&#32;use&#32;at()</emphasis>
22887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;success&#32;=&#32;(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.at(ptr)&#32;==&#32;get_value(<emphasis role="stringliteral">&quot;test&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;value&quot;</emphasis>,&#32;<emphasis role="keyword">false</emphasis>));
22888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a5478b7564e65634cc69432ed3cb6490e">JSON_INTERNAL_CATCH</link>&#32;(<link linkend="_classnlohmann_1_1detail_1_1out__of__range">out_of_range</link>&amp;)
22890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ignore&#32;out&#32;of&#32;range&#32;errors:&#32;success&#32;remains&#32;false</emphasis>
22892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22893 
22894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;throw&#32;an&#32;exception&#32;if&#32;test&#32;fails</emphasis>
22895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd">JSON_HEDLEY_UNLIKELY</link>(!success))
22896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1other__error_1a4ea29b55f963ecc3ee7ddda7c731a9b1">other_error::create</link>(501,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;unsuccessful:&#32;&quot;</emphasis>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.dump()),&#32;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>));
22898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22899 
22900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
22901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22902 
22903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;patch_operations::invalid:
22904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
22905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;op&#32;must&#32;be&#32;&quot;add&quot;,&#32;&quot;remove&quot;,&#32;&quot;replace&quot;,&#32;&quot;move&quot;,&#32;&quot;copy&quot;,&#32;or</emphasis>
22907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;test&quot;</emphasis>
22908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f">JSON_THROW</link>(<link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">parse_error::create</link>(105,&#32;0,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<emphasis role="stringliteral">&quot;operation&#32;value&#32;&apos;&quot;</emphasis>,&#32;op,&#32;<emphasis role="stringliteral">&quot;&apos;&#32;is&#32;invalid&quot;</emphasis>),&#32;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>));
22909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22912 
22913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
22914 &#32;&#32;&#32;&#32;}
22915 
22918 &#32;&#32;&#32;&#32;<link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link>
22919 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="_classnlohmann_1_1basic__json_1a1c1f21327df91a4dd6c5f5a107240385">diff</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1af9d0cbbbeb7414e786c41899e5a856d7">target</link>,
22920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;<link linkend="_classpath">path</link>&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>)
22921 &#32;&#32;&#32;&#32;{
22922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;patch</emphasis>
22923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>(value_t::array);
22924 
22925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;the&#32;values&#32;are&#32;the&#32;same,&#32;return&#32;empty&#32;patch</emphasis>
22926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1af9d0cbbbeb7414e786c41899e5a856d7">target</link>)
22927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
22929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22930 
22931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>.type()&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1af9d0cbbbeb7414e786c41899e5a856d7">target</link>.type())
22932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;different&#32;types:&#32;replace&#32;value</emphasis>
22934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.push_back(
22935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;op&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;replace&quot;</emphasis>},&#32;{<emphasis role="stringliteral">&quot;path&quot;</emphasis>,&#32;<link linkend="_classpath">path</link>},&#32;{<emphasis role="stringliteral">&quot;value&quot;</emphasis>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1af9d0cbbbeb7414e786c41899e5a856d7">target</link>}
22937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
22938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
22939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22940 
22941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>.type())
22942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::array:
22944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;first&#32;pass:&#32;traverse&#32;common&#32;elements</emphasis>
22946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;i&#32;=&#32;0;
22947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(i&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>.size()&#32;&amp;&amp;&#32;i&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1af9d0cbbbeb7414e786c41899e5a856d7">target</link>.size())
22948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;recursive&#32;call&#32;to&#32;compare&#32;array&#32;values&#32;at&#32;index&#32;i</emphasis>
22950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;temp_diff&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1a1c1f21327df91a4dd6c5f5a107240385">diff</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>[i],&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1af9d0cbbbeb7414e786c41899e5a856d7">target</link>[i],&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<link linkend="_classpath">path</link>,&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>,&#32;std::to_string(i)));
22951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.insert(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.end(),&#32;temp_diff.begin(),&#32;temp_diff.end());
22952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++i;
22953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22954 
22955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;now&#32;reached&#32;the&#32;end&#32;of&#32;at&#32;least&#32;one&#32;array</emphasis>
22956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;in&#32;a&#32;second&#32;pass,&#32;traverse&#32;the&#32;remaining&#32;elements</emphasis>
22957 
22958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;remove&#32;my&#32;remaining&#32;elements</emphasis>
22959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;end_index&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classnlohmann_1_1basic__json_1a3d20d11e5dfe95084a76f62eca54fadd">difference_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.size());
22960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(i&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>.size())
22961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;add&#32;operations&#32;in&#32;reverse&#32;order&#32;to&#32;avoid&#32;invalid</emphasis>
22963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;indices</emphasis>
22964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.insert(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.begin()&#32;+&#32;end_index,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab49790263c78300fbf05719e38246198">object</link>(
22965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;op&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;remove&quot;</emphasis>},
22967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;path&quot;</emphasis>,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<link linkend="_classpath">path</link>,&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>,&#32;std::to_string(i))}
22968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}));
22969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++i;
22970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22971 
22972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;add&#32;other&#32;remaining&#32;elements</emphasis>
22973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(i&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1af9d0cbbbeb7414e786c41899e5a856d7">target</link>.size())
22974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.push_back(
22976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;op&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;add&quot;</emphasis>},
22978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;path&quot;</emphasis>,&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<link linkend="_classpath">path</link>,&#32;<emphasis role="stringliteral">&quot;/-&quot;</emphasis>)},
22979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;value&quot;</emphasis>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1af9d0cbbbeb7414e786c41899e5a856d7">target</link>[i]}
22980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
22981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++i;
22982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22983 
22984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
22985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
22986 
22987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::object:
22988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;first&#32;pass:&#32;traverse&#32;this&#32;object&apos;s&#32;elements</emphasis>
22990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>.cbegin();&#32;it&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>.cend();&#32;++it)
22991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;escape&#32;the&#32;key&#32;name&#32;to&#32;be&#32;used&#32;in&#32;a&#32;JSON&#32;patch</emphasis>
22993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;path_key&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<link linkend="_classpath">path</link>,&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>,&#32;<link linkend="_namespacenlohmann_1_1detail_1a6d49f8d1bdd1b5d9c574d13a9b3374f6">detail::escape</link>(it.key()));
22994 
22995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1af9d0cbbbeb7414e786c41899e5a856d7">target</link>.find(it.key())&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1af9d0cbbbeb7414e786c41899e5a856d7">target</link>.end())
22996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;recursive&#32;call&#32;to&#32;compare&#32;object&#32;values&#32;at&#32;key&#32;it</emphasis>
22998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;temp_diff&#32;=&#32;<link linkend="_classnlohmann_1_1basic__json_1a1c1f21327df91a4dd6c5f5a107240385">diff</link>(it.value(),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1af9d0cbbbeb7414e786c41899e5a856d7">target</link>[it.key()],&#32;path_key);
22999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.insert(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.end(),&#32;temp_diff.begin(),&#32;temp_diff.end());
23000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
23001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
23002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
23003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;found&#32;a&#32;key&#32;that&#32;is&#32;not&#32;in&#32;o&#32;-&gt;&#32;remove&#32;it</emphasis>
23004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.push_back(<emphasis role="keywordtype">object</emphasis>(
23005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
23006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;op&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;remove&quot;</emphasis>},&#32;{<emphasis role="stringliteral">&quot;path&quot;</emphasis>,&#32;path_key}
23007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}));
23008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
23009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
23010 
23011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;second&#32;pass:&#32;traverse&#32;other&#32;object&apos;s&#32;elements</emphasis>
23012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1af9d0cbbbeb7414e786c41899e5a856d7">target</link>.cbegin();&#32;it&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1af9d0cbbbeb7414e786c41899e5a856d7">target</link>.cend();&#32;++it)
23013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
23014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>.find(it.key())&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>.end())
23015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
23016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;found&#32;a&#32;key&#32;that&#32;is&#32;not&#32;in&#32;this&#32;-&gt;&#32;add&#32;it</emphasis>
23017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;path_key&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">detail::concat</link>(<link linkend="_classpath">path</link>,&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>,&#32;<link linkend="_namespacenlohmann_1_1detail_1a6d49f8d1bdd1b5d9c574d13a9b3374f6">detail::escape</link>(it.key()));
23018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.push_back(
23019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
23020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;op&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;add&quot;</emphasis>},&#32;{<emphasis role="stringliteral">&quot;path&quot;</emphasis>,&#32;path_key},
23021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;value&quot;</emphasis>,&#32;it.value()}
23022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
23023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
23024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
23025 
23026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
23027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
23028 
23029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::null:
23030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::string:
23031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::boolean:
23032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_integer:
23033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_unsigned:
23034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::number_float:
23035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::binary:
23036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_t::discarded:
23037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
23038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
23039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;both&#32;primitive&#32;type:&#32;replace&#32;value</emphasis>
23040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.push_back(
23041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
23042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;op&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;replace&quot;</emphasis>},&#32;{<emphasis role="stringliteral">&quot;path&quot;</emphasis>,&#32;<link linkend="_classpath">path</link>},&#32;{<emphasis role="stringliteral">&quot;value&quot;</emphasis>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1af9d0cbbbeb7414e786c41899e5a856d7">target</link>}
23043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
23044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
23045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
23046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
23047 
23048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
23049 &#32;&#32;&#32;&#32;}
23050 
23052 
23054 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;JSON&#32;Merge&#32;Patch&#32;functions&#32;//</emphasis>
23056 
23059 
23062 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a844a77cb154752d12118f10af26d54cb">merge_patch</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&#32;apply_patch)
23063 &#32;&#32;&#32;&#32;{
23064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(apply_patch.<link linkend="_classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa">is_object</link>())
23065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
23066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa">is_object</link>())
23067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
23068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab49790263c78300fbf05719e38246198">object</link>();
23069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
23070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;apply_patch.<link linkend="_classnlohmann_1_1basic__json_1a23b495b4c282e4afacf382f5b49af7c7">begin</link>();&#32;it&#32;!=&#32;apply_patch.<link linkend="_classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc">end</link>();&#32;++it)
23071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
23072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(it.value().is_null())
23073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
23074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a494632b69bbe1d0153d3bedad0901b8e">erase</link>(it.key());
23075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
23076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
23077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
23078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnlohmann_1_1basic__json_1a9ea67fc1ef0ccc42e1d5388fe0416ae5">operator[]</link>(it.key()).<link linkend="_classnlohmann_1_1basic__json_1a844a77cb154752d12118f10af26d54cb">merge_patch</link>(it.value());
23079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
23080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
23081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
23082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
23083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
23084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;apply_patch;
23085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
23086 &#32;&#32;&#32;&#32;}
23087 
23089 };
23090 
23093 <link linkend="_json_8hpp_1a0643bd74c2dc6f0e4e420b8190ea8f0f">NLOHMANN_BASIC_JSON_TPL_DECLARATION</link>
23094 std::string&#32;to_string(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_json_8hpp_1a80b7254e63f199a1f656f07ae551f632">NLOHMANN_BASIC_JSON_TPL</link>&amp;&#32;j)
23095 {
23096 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;j.dump();
23097 }
23098 
23099 }&#32;<emphasis role="comment">//&#32;namespace&#32;nlohmann</emphasis>
23100 
23102 <emphasis role="comment">//&#32;nonmember&#32;support&#32;//</emphasis>
23104 
23105 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<emphasis role="comment">//&#32;NOLINT(cert-dcl58-cpp)</emphasis>
23106 {
23107 
23110 <link linkend="_json_8hpp_1a0643bd74c2dc6f0e4e420b8190ea8f0f">NLOHMANN_BASIC_JSON_TPL_DECLARATION</link>
23111 <emphasis role="keyword">struct&#32;</emphasis>hash&lt;<link linkend="_namespacenlohmann">nlohmann</link>::<link linkend="_json_8hpp_1a80b7254e63f199a1f656f07ae551f632">NLOHMANN_BASIC_JSON_TPL</link>&gt;
23112 {
23113 &#32;&#32;&#32;&#32;std::size_t&#32;<link linkend="_structstd_1_1hash_3_01nlohmann_1_1_n_l_o_h_m_a_n_n___b_a_s_i_c___j_s_o_n___t_p_l_01_4_1aeadbcf51ae3e58f8daa2025aa7737dd8">operator()</link>(<emphasis role="keyword">const</emphasis>&#32;nlohmann::NLOHMANN_BASIC_JSON_TPL&amp;&#32;j)<emphasis role="keyword">&#32;const</emphasis>
23114 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
23115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;nlohmann::detail::hash(j);
23116 &#32;&#32;&#32;&#32;}
23117 };
23118 
23119 <emphasis role="comment">//&#32;specialization&#32;for&#32;std::less&lt;value_t&gt;</emphasis>
23120 <emphasis role="keyword">template</emphasis>&lt;&gt;
23121 <emphasis role="keyword">struct&#32;</emphasis>less&lt;&#32;::<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">nlohmann::detail::value_t</link>&gt;&#32;<emphasis role="comment">//&#32;do&#32;not&#32;remove&#32;the&#32;space&#32;after&#32;&apos;&lt;&apos;,&#32;see&#32;https://github.com/nlohmann/json/pull/679</emphasis>
23122 {
23127 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structstd_1_1less_3_01_1_1nlohmann_1_1detail_1_1value__t_01_4_1a76d2a6c170cfd74f3b1882be1b5a6671">operator()</link>(<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">nlohmann::detail::value_t</link>&#32;lhs,
23128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">nlohmann::detail::value_t</link>&#32;rhs)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
23129 &#32;&#32;&#32;&#32;{
23130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">nlohmann::detail::operator&lt;</link>(lhs,&#32;rhs);
23131 &#32;&#32;&#32;&#32;}
23132 };
23133 
23134 <emphasis role="comment">//&#32;C++20&#32;prohibit&#32;function&#32;specialization&#32;in&#32;the&#32;std&#32;namespace.</emphasis>
23135 <emphasis role="preprocessor">#ifndef&#32;JSON_HAS_CPP_20</emphasis>
23136 
23139 <link linkend="_json_8hpp_1a0643bd74c2dc6f0e4e420b8190ea8f0f">NLOHMANN_BASIC_JSON_TPL_DECLARATION</link>
23140 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(nlohmann::NLOHMANN_BASIC_JSON_TPL&amp;&#32;j1,&#32;nlohmann::NLOHMANN_BASIC_JSON_TPL&amp;&#32;j2)&#32;<emphasis role="keyword">noexcept</emphasis>(&#32;&#32;<emphasis role="comment">//&#32;NOLINT(readability-inconsistent-declaration-parameter-name)</emphasis>
23141 &#32;&#32;&#32;&#32;is_nothrow_move_constructible&lt;nlohmann::NLOHMANN_BASIC_JSON_TPL&gt;::value&amp;&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOLINT(misc-redundant-expression)</emphasis>
23142 &#32;&#32;&#32;&#32;is_nothrow_move_assignable&lt;nlohmann::NLOHMANN_BASIC_JSON_TPL&gt;::value)
23143 {
23144 &#32;&#32;&#32;&#32;j1.swap(j2);
23145 }
23146 
23147 <emphasis role="preprocessor">#endif</emphasis>
23148 
23149 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
23150 
23153 <link linkend="_json_8hpp_1a5338981b5ad9027c9e54b1c5597f4344">JSON_HEDLEY_NON_NULL</link>(1)
23154 inline&#32;<link linkend="_namespacenlohmann">nlohmann</link>::json&#32;operator&#32;&quot;&quot;&#32;_json(const&#32;<emphasis role="keywordtype">char</emphasis>*&#32;s,&#32;<link linkend="_namespacestd">std</link>::<emphasis role="keywordtype">size_t</emphasis>&#32;n)
23155 {
23156 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a15018ade392a844ea32d5188d1a0b9c6">nlohmann::json::parse</link>(s,&#32;s&#32;+&#32;n);
23157 }
23158 
23161 <link linkend="_json_8hpp_1a5338981b5ad9027c9e54b1c5597f4344">JSON_HEDLEY_NON_NULL</link>(1)
23162 inline&#32;<link linkend="_namespacenlohmann">nlohmann</link>::json::json_pointer&#32;operator&#32;&quot;&quot;&#32;_json_pointer(const&#32;<emphasis role="keywordtype">char</emphasis>*&#32;s,&#32;<link linkend="_namespacestd">std</link>::<emphasis role="keywordtype">size_t</emphasis>&#32;n)
23163 {
23164 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnlohmann_1_1basic__json_1a14d9215d51300ac68de8fd5129621703">nlohmann::json::json_pointer</link>(std::string(s,&#32;n));
23165 }
23166 
23167 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/detail/macro_unscope.hpp&gt;</emphasis>
23168 
23169 
23170 <emphasis role="comment">//&#32;restore&#32;clang&#32;diagnostic&#32;settings</emphasis>
23171 <emphasis role="preprocessor">#if&#32;defined(__clang__)</emphasis>
23172 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#pragma&#32;clang&#32;diagnostic&#32;pop</emphasis>
23173 <emphasis role="preprocessor">#endif</emphasis>
23174 
23175 <emphasis role="comment">//&#32;clean&#32;up</emphasis>
23176 <emphasis role="preprocessor">#undef&#32;JSON_ASSERT</emphasis>
23177 <emphasis role="preprocessor">#undef&#32;JSON_INTERNAL_CATCH</emphasis>
23178 <emphasis role="preprocessor">#undef&#32;JSON_THROW</emphasis>
23179 <emphasis role="preprocessor">#undef&#32;JSON_PRIVATE_UNLESS_TESTED</emphasis>
23180 <emphasis role="preprocessor">#undef&#32;NLOHMANN_BASIC_JSON_TPL_DECLARATION</emphasis>
23181 <emphasis role="preprocessor">#undef&#32;NLOHMANN_BASIC_JSON_TPL</emphasis>
23182 <emphasis role="preprocessor">#undef&#32;JSON_EXPLICIT</emphasis>
23183 <emphasis role="preprocessor">#undef&#32;NLOHMANN_CAN_CALL_STD_FUNC_IMPL</emphasis>
23184 <emphasis role="preprocessor">#undef&#32;JSON_NO_UNIQUE_ADDRESS</emphasis>
23185 
23186 <emphasis role="preprocessor">#ifndef&#32;JSON_TEST_KEEP_MACROS</emphasis>
23187 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_CATCH</emphasis>
23188 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_TRY</emphasis>
23189 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HAS_CPP_11</emphasis>
23190 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HAS_CPP_14</emphasis>
23191 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HAS_CPP_17</emphasis>
23192 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HAS_CPP_20</emphasis>
23193 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HAS_FILESYSTEM</emphasis>
23194 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HAS_EXPERIMENTAL_FILESYSTEM</emphasis>
23195 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;JSON_HAS_THREE_WAY_COMPARISON</emphasis>
23196 <emphasis role="preprocessor">#endif</emphasis>
23197 
23198 <emphasis role="comment">//&#32;#include&#32;&lt;nlohmann/thirdparty/hedley/hedley_undef.hpp&gt;</emphasis>
23199 
23200 
23201 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_ALWAYS_INLINE</emphasis>
23202 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_ARM_VERSION</emphasis>
23203 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_ARM_VERSION_CHECK</emphasis>
23204 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_ARRAY_PARAM</emphasis>
23205 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_ASSUME</emphasis>
23206 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_BEGIN_C_DECLS</emphasis>
23207 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_CLANG_HAS_ATTRIBUTE</emphasis>
23208 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_CLANG_HAS_BUILTIN</emphasis>
23209 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_CLANG_HAS_CPP_ATTRIBUTE</emphasis>
23210 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_CLANG_HAS_DECLSPEC_DECLSPEC_ATTRIBUTE</emphasis>
23211 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_CLANG_HAS_EXTENSION</emphasis>
23212 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_CLANG_HAS_FEATURE</emphasis>
23213 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_CLANG_HAS_WARNING</emphasis>
23214 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_COMPCERT_VERSION</emphasis>
23215 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_COMPCERT_VERSION_CHECK</emphasis>
23216 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_CONCAT</emphasis>
23217 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_CONCAT3</emphasis>
23218 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_CONCAT3_EX</emphasis>
23219 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_CONCAT_EX</emphasis>
23220 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_CONST</emphasis>
23221 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_CONSTEXPR</emphasis>
23222 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_CONST_CAST</emphasis>
23223 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_CPP_CAST</emphasis>
23224 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_CRAY_VERSION</emphasis>
23225 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_CRAY_VERSION_CHECK</emphasis>
23226 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_C_DECL</emphasis>
23227 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_DEPRECATED</emphasis>
23228 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_DEPRECATED_FOR</emphasis>
23229 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL</emphasis>
23230 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_</emphasis>
23231 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED</emphasis>
23232 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES</emphasis>
23233 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS</emphasis>
23234 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNUSED_FUNCTION</emphasis>
23235 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_DIAGNOSTIC_POP</emphasis>
23236 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_DIAGNOSTIC_PUSH</emphasis>
23237 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_DMC_VERSION</emphasis>
23238 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_DMC_VERSION_CHECK</emphasis>
23239 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_EMPTY_BASES</emphasis>
23240 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_EMSCRIPTEN_VERSION</emphasis>
23241 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_EMSCRIPTEN_VERSION_CHECK</emphasis>
23242 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_END_C_DECLS</emphasis>
23243 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_FLAGS</emphasis>
23244 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_FLAGS_CAST</emphasis>
23245 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_GCC_HAS_ATTRIBUTE</emphasis>
23246 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_GCC_HAS_BUILTIN</emphasis>
23247 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_GCC_HAS_CPP_ATTRIBUTE</emphasis>
23248 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_GCC_HAS_DECLSPEC_ATTRIBUTE</emphasis>
23249 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_GCC_HAS_EXTENSION</emphasis>
23250 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_GCC_HAS_FEATURE</emphasis>
23251 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_GCC_HAS_WARNING</emphasis>
23252 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_GCC_NOT_CLANG_VERSION_CHECK</emphasis>
23253 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_GCC_VERSION</emphasis>
23254 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_GCC_VERSION_CHECK</emphasis>
23255 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_GNUC_HAS_ATTRIBUTE</emphasis>
23256 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_GNUC_HAS_BUILTIN</emphasis>
23257 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_GNUC_HAS_CPP_ATTRIBUTE</emphasis>
23258 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_GNUC_HAS_DECLSPEC_ATTRIBUTE</emphasis>
23259 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_GNUC_HAS_EXTENSION</emphasis>
23260 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_GNUC_HAS_FEATURE</emphasis>
23261 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_GNUC_HAS_WARNING</emphasis>
23262 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_GNUC_VERSION</emphasis>
23263 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_GNUC_VERSION_CHECK</emphasis>
23264 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_HAS_ATTRIBUTE</emphasis>
23265 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_HAS_BUILTIN</emphasis>
23266 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_HAS_CPP_ATTRIBUTE</emphasis>
23267 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_HAS_CPP_ATTRIBUTE_NS</emphasis>
23268 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_HAS_DECLSPEC_ATTRIBUTE</emphasis>
23269 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_HAS_EXTENSION</emphasis>
23270 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_HAS_FEATURE</emphasis>
23271 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_HAS_WARNING</emphasis>
23272 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_IAR_VERSION</emphasis>
23273 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_IAR_VERSION_CHECK</emphasis>
23274 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_IBM_VERSION</emphasis>
23275 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_IBM_VERSION_CHECK</emphasis>
23276 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_IMPORT</emphasis>
23277 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_INLINE</emphasis>
23278 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_INTEL_CL_VERSION</emphasis>
23279 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_INTEL_CL_VERSION_CHECK</emphasis>
23280 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_INTEL_VERSION</emphasis>
23281 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_INTEL_VERSION_CHECK</emphasis>
23282 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_IS_CONSTANT</emphasis>
23283 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_IS_CONSTEXPR_</emphasis>
23284 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_LIKELY</emphasis>
23285 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_MALLOC</emphasis>
23286 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_MCST_LCC_VERSION</emphasis>
23287 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_MCST_LCC_VERSION_CHECK</emphasis>
23288 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_MESSAGE</emphasis>
23289 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_MSVC_VERSION</emphasis>
23290 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_MSVC_VERSION_CHECK</emphasis>
23291 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_NEVER_INLINE</emphasis>
23292 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_NON_NULL</emphasis>
23293 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_NO_ESCAPE</emphasis>
23294 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_NO_RETURN</emphasis>
23295 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_NO_THROW</emphasis>
23296 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_NULL</emphasis>
23297 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_PELLES_VERSION</emphasis>
23298 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_PELLES_VERSION_CHECK</emphasis>
23299 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_PGI_VERSION</emphasis>
23300 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_PGI_VERSION_CHECK</emphasis>
23301 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_PREDICT</emphasis>
23302 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_PRINTF_FORMAT</emphasis>
23303 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_PRIVATE</emphasis>
23304 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_PUBLIC</emphasis>
23305 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_PURE</emphasis>
23306 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_REINTERPRET_CAST</emphasis>
23307 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_REQUIRE</emphasis>
23308 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_REQUIRE_CONSTEXPR</emphasis>
23309 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_REQUIRE_MSG</emphasis>
23310 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_RESTRICT</emphasis>
23311 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_RETURNS_NON_NULL</emphasis>
23312 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_SENTINEL</emphasis>
23313 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_STATIC_ASSERT</emphasis>
23314 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_STATIC_CAST</emphasis>
23315 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_STRINGIFY</emphasis>
23316 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_STRINGIFY_EX</emphasis>
23317 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_SUNPRO_VERSION</emphasis>
23318 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_SUNPRO_VERSION_CHECK</emphasis>
23319 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_TINYC_VERSION</emphasis>
23320 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_TINYC_VERSION_CHECK</emphasis>
23321 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_TI_ARMCL_VERSION</emphasis>
23322 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_TI_ARMCL_VERSION_CHECK</emphasis>
23323 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_TI_CL2000_VERSION</emphasis>
23324 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_TI_CL2000_VERSION_CHECK</emphasis>
23325 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_TI_CL430_VERSION</emphasis>
23326 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_TI_CL430_VERSION_CHECK</emphasis>
23327 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_TI_CL6X_VERSION</emphasis>
23328 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_TI_CL6X_VERSION_CHECK</emphasis>
23329 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_TI_CL7X_VERSION</emphasis>
23330 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_TI_CL7X_VERSION_CHECK</emphasis>
23331 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_TI_CLPRU_VERSION</emphasis>
23332 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_TI_CLPRU_VERSION_CHECK</emphasis>
23333 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_TI_VERSION</emphasis>
23334 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_TI_VERSION_CHECK</emphasis>
23335 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_UNAVAILABLE</emphasis>
23336 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_UNLIKELY</emphasis>
23337 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_UNPREDICTABLE</emphasis>
23338 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_UNREACHABLE</emphasis>
23339 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_UNREACHABLE_RETURN</emphasis>
23340 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_VERSION</emphasis>
23341 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_VERSION_DECODE_MAJOR</emphasis>
23342 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_VERSION_DECODE_MINOR</emphasis>
23343 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_VERSION_DECODE_REVISION</emphasis>
23344 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_VERSION_ENCODE</emphasis>
23345 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_WARNING</emphasis>
23346 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_WARN_UNUSED_RESULT</emphasis>
23347 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_WARN_UNUSED_RESULT_MSG</emphasis>
23348 <emphasis role="preprocessor">#undef&#32;JSON_HEDLEY_FALL_THROUGH</emphasis>
23349 
23350 
23351 
23352 <emphasis role="preprocessor">#endif&#32;&#32;</emphasis><emphasis role="comment">//&#32;INCLUDE_NLOHMANN_JSON_HPP_</emphasis>
</programlisting></section>
