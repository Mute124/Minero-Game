<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2parallel_2workstealing_8h_source" xml:lang="en-US">
<title>workstealing.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/parallel/workstealing.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2007-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
38 <emphasis role="comment">//&#32;Written&#32;by&#32;Felix&#32;Putze.</emphasis>
39 
40 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_PARALLEL_WORKSTEALING_H</emphasis>
41 <emphasis role="preprocessor">#define&#32;_GLIBCXX_PARALLEL_WORKSTEALING_H&#32;1</emphasis>
42 
43 <emphasis role="preprocessor">#include&#32;&lt;parallel/parallel.h&gt;</emphasis>
44 <emphasis role="preprocessor">#include&#32;&lt;parallel/random_number.h&gt;</emphasis>
45 <emphasis role="preprocessor">#include&#32;&lt;parallel/compatibility.h&gt;</emphasis>
46 
47 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__parallel">__gnu_parallel</link>
48 {
49 
50 <emphasis role="preprocessor">#define&#32;_GLIBCXX_JOB_VOLATILE&#32;volatile</emphasis>
51 
53 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_DifferenceTp&gt;
54 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct____gnu__parallel_1_1___job">_Job</link>
55 &#32;&#32;&#32;&#32;{
56 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_DifferenceTp&#32;<link linkend="_struct____gnu__parallel_1_1___job_1a662f68c794b02808d18fb3bce67654a3">_DifferenceType</link>;
57 
62 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2workstealing_8h_1ae0a7e9b4ffa5ebc25140207d4e834163">_GLIBCXX_JOB_VOLATILE</link>&#32;<link linkend="_struct____gnu__parallel_1_1___job_1a662f68c794b02808d18fb3bce67654a3">_DifferenceType</link>&#32;<link linkend="_struct____gnu__parallel_1_1___job_1ab3a1c06370c2356852a910e62b5dfd00">_M_first</link>;
63 
67 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2workstealing_8h_1ae0a7e9b4ffa5ebc25140207d4e834163">_GLIBCXX_JOB_VOLATILE</link>&#32;<link linkend="_struct____gnu__parallel_1_1___job_1a662f68c794b02808d18fb3bce67654a3">_DifferenceType</link>&#32;<link linkend="_struct____gnu__parallel_1_1___job_1acd5e5d80560ee4ce8f1ed5155c39a126">_M_last</link>;
68 
72 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2workstealing_8h_1ae0a7e9b4ffa5ebc25140207d4e834163">_GLIBCXX_JOB_VOLATILE</link>&#32;<link linkend="_struct____gnu__parallel_1_1___job_1a662f68c794b02808d18fb3bce67654a3">_DifferenceType</link>&#32;<link linkend="_struct____gnu__parallel_1_1___job_1adadd345e0a44b035649b394f48f5033c">_M_load</link>;
73 &#32;&#32;&#32;&#32;};
74 
93 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Op,
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Fu,
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Red,
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Result&gt;
98 &#32;&#32;&#32;&#32;_Op
99 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a14bdca2e9c62cde7dd8478d972f60272">__for_each_template_random_access_workstealing</link>(_RAIter&#32;__begin,
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter&#32;__end,&#32;_Op&#32;__op,
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Fu&amp;&#32;__f,&#32;_Red&#32;__r,
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Result&#32;__base,
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Result&amp;&#32;__output,
104 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_RAIter&gt;::difference_type&#32;__bound)
105 &#32;&#32;&#32;&#32;{
106 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2compiletime__settings_8h_1a77fb93c9cecec331ccee755972695128">_GLIBCXX_CALL</link>(__end&#32;-&#32;__begin)
107 
108 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::iterator_traits&lt;_RAIter&gt;&#32;_TraitsType;
109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::difference_type&#32;_DifferenceType;
110 
111 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct____gnu__parallel_1_1___settings">_Settings</link>&amp;&#32;__s&#32;=&#32;<link linkend="_struct____gnu__parallel_1_1___settings_1adf11d9453707f1145a9e221ab7630bd3">_Settings::get</link>();
112 
113 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__chunk_size&#32;=
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_DifferenceType<emphasis role="keyword">&gt;</emphasis>(__s.<link linkend="_struct____gnu__parallel_1_1___settings_1a70491956e0a9c14181cc0fbf4a242d6c">workstealing_chunk_size</link>);
115 
116 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;How&#32;many&#32;jobs?</emphasis>
117 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__length&#32;=&#32;(__bound&#32;&lt;&#32;0)&#32;?&#32;(__end&#32;-&#32;__begin)&#32;:&#32;__bound;
118 
119 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;To&#32;avoid&#32;false&#32;sharing&#32;in&#32;a&#32;cache&#32;line.</emphasis>
120 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__stride&#32;=&#32;(__s.<link linkend="_struct____gnu__parallel_1_1___settings_1a2918b2f3f97a4fbbcfe990e73ace805b">cache_line_size</link>&#32;*&#32;10
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_struct____gnu__parallel_1_1___job">_Job&lt;_DifferenceType&gt;</link>)&#32;+&#32;1);
122 
123 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Total&#32;number&#32;of&#32;threads&#32;currently&#32;working.</emphasis>
124 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__busy&#32;=&#32;0;
125 
126 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___job">_Job&lt;_DifferenceType&gt;</link>&#32;*__job;
127 
128 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structomp__lock__t">omp_lock_t</link>&#32;__output_lock;
129 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2omp_8h_1ab9c82451011f65593480a3ba21ce46bc">omp_init_lock</link>(&amp;__output_lock);
130 
131 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Write&#32;base&#32;value&#32;to&#32;output.</emphasis>
132 &#32;&#32;&#32;&#32;&#32;&#32;__output&#32;=&#32;__base;
133 
134 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;more&#32;threads&#32;than&#32;jobs,&#32;at&#32;least&#32;one&#32;thread.</emphasis>
135 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__num_threads&#32;=&#32;__gnu_parallel::max&lt;_ThreadIndex&gt;
136 &#32;&#32;&#32;&#32;(1,&#32;__gnu_parallel::min&lt;_DifferenceType&gt;(__length,
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1aa72851b809c2b314bc09580c3512f281">__get_max_threads</link>()));
138 
139 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;parallel&#32;shared(__busy)&#32;num_threads(__num_threads)</emphasis>
140 &#32;&#32;&#32;&#32;&#32;&#32;{
141 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;single</emphasis>
142 &#32;&#32;&#32;&#32;{
143 &#32;&#32;&#32;&#32;&#32;&#32;__num_threads&#32;=&#32;<link linkend="__classes_2lib_2include_2omp_8h_1ac42ead04531fd33507e3d3a6f648b200">omp_get_num_threads</link>();
144 
145 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;job&#32;description&#32;array.</emphasis>
146 &#32;&#32;&#32;&#32;&#32;&#32;__job&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct____gnu__parallel_1_1___job">_Job&lt;_DifferenceType&gt;</link>[__num_threads&#32;*&#32;__stride];
147 &#32;&#32;&#32;&#32;}
148 
149 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Initialization&#32;phase.</emphasis>
150 
151 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Flags&#32;for&#32;every&#32;thread&#32;if&#32;it&#32;is&#32;doing&#32;productive&#32;work.</emphasis>
152 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__iam_working&#32;=&#32;<emphasis role="keyword">false</emphasis>;
153 
154 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Thread&#32;id.</emphasis>
155 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__iam&#32;=&#32;<link linkend="__classes_2lib_2include_2omp_8h_1aa03cf372d8266eef024262a68d304e1b">omp_get_thread_num</link>();
156 
157 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;job.</emphasis>
158 &#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___job">_Job&lt;_DifferenceType&gt;</link>&amp;&#32;__my_job&#32;=&#32;__job[__iam&#32;*&#32;__stride];
159 
160 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Random&#32;number&#32;(for&#32;work&#32;stealing).</emphasis>
161 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__victim;
162 
163 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Local&#32;value&#32;for&#32;reduction.</emphasis>
164 &#32;&#32;&#32;&#32;_Result&#32;__result&#32;=&#32;_Result();
165 
166 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Number&#32;of&#32;elements&#32;to&#32;steal&#32;in&#32;one&#32;attempt.</emphasis>
167 &#32;&#32;&#32;&#32;_DifferenceType&#32;__steal;
168 
169 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Every&#32;thread&#32;has&#32;its&#32;own&#32;random&#32;number&#32;generator</emphasis>
170 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(modulo&#32;__num_threads).</emphasis>
171 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1___random_number">_RandomNumber</link>&#32;__rand_gen(__iam,&#32;__num_threads);
172 
173 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;thread&#32;is&#32;currently&#32;working.</emphasis>
174 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;atomic</emphasis>
175 &#32;&#32;&#32;&#32;++__busy;
176 
177 &#32;&#32;&#32;&#32;__iam_working&#32;=&#32;<emphasis role="keyword">true</emphasis>;
178 
179 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;How&#32;many&#32;jobs&#32;per&#32;thread?&#32;last&#32;thread&#32;gets&#32;the&#32;rest.</emphasis>
180 &#32;&#32;&#32;&#32;__my_job.<link linkend="_struct____gnu__parallel_1_1___job_1ab3a1c06370c2356852a910e62b5dfd00">_M_first</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_DifferenceType<emphasis role="keyword">&gt;</emphasis>
181 &#32;&#32;&#32;&#32;&#32;&#32;(__iam&#32;*&#32;(__length&#32;/&#32;__num_threads));
182 
183 &#32;&#32;&#32;&#32;__my_job.<link linkend="_struct____gnu__parallel_1_1___job_1acd5e5d80560ee4ce8f1ed5155c39a126">_M_last</link>&#32;=&#32;(__iam&#32;==&#32;(__num_threads&#32;-&#32;1)
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;(__length&#32;-&#32;1)
185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;((__iam&#32;+&#32;1)&#32;*&#32;(__length&#32;/&#32;__num_threads)&#32;-&#32;1));
186 &#32;&#32;&#32;&#32;__my_job.<link linkend="_struct____gnu__parallel_1_1___job_1adadd345e0a44b035649b394f48f5033c">_M_load</link>&#32;=&#32;__my_job.<link linkend="_struct____gnu__parallel_1_1___job_1acd5e5d80560ee4ce8f1ed5155c39a126">_M_last</link>&#32;-&#32;__my_job.<link linkend="_struct____gnu__parallel_1_1___job_1ab3a1c06370c2356852a910e62b5dfd00">_M_first</link>&#32;+&#32;1;
187 
188 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Init&#32;result&#32;with&#32;_M_first&#32;value&#32;(to&#32;have&#32;a&#32;base&#32;value&#32;for&#32;reduction)</emphasis>
189 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__my_job.<link linkend="_struct____gnu__parallel_1_1___job_1ab3a1c06370c2356852a910e62b5dfd00">_M_first</link>&#32;&lt;=&#32;__my_job.<link linkend="_struct____gnu__parallel_1_1___job_1acd5e5d80560ee4ce8f1ed5155c39a126">_M_last</link>)
190 &#32;&#32;&#32;&#32;&#32;&#32;{
191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Cannot&#32;use&#32;volatile&#32;variable&#32;directly.</emphasis>
192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__my_first&#32;=&#32;__my_job.<link linkend="_struct____gnu__parallel_1_1___job_1ab3a1c06370c2356852a910e62b5dfd00">_M_first</link>;
193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result&#32;=&#32;__f(__op,&#32;__begin&#32;+&#32;__my_first);
194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__my_job.<link linkend="_struct____gnu__parallel_1_1___job_1ab3a1c06370c2356852a910e62b5dfd00">_M_first</link>;
195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__my_job.<link linkend="_struct____gnu__parallel_1_1___job_1adadd345e0a44b035649b394f48f5033c">_M_load</link>;
196 &#32;&#32;&#32;&#32;&#32;&#32;}
197 
198 &#32;&#32;&#32;&#32;_RAIter&#32;__current;
199 
200 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;barrier</emphasis>
201 
202 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Actual&#32;work&#32;phase</emphasis>
203 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Work&#32;on&#32;own&#32;or&#32;stolen&#32;current&#32;start</emphasis>
204 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__busy&#32;&gt;&#32;0)
205 &#32;&#32;&#32;&#32;&#32;&#32;{
206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Work&#32;until&#32;no&#32;productive&#32;thread&#32;left.</emphasis>
207 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;flush(__busy)</emphasis>
208 
209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Thread&#32;has&#32;own&#32;work&#32;to&#32;do</emphasis>
210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__my_job.<link linkend="_struct____gnu__parallel_1_1___job_1ab3a1c06370c2356852a910e62b5dfd00">_M_first</link>&#32;&lt;=&#32;__my_job.<link linkend="_struct____gnu__parallel_1_1___job_1acd5e5d80560ee4ce8f1ed5155c39a126">_M_last</link>)
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;fetch-and-add&#32;call</emphasis>
213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Reserve&#32;current&#32;job&#32;block&#32;(size&#32;__chunk_size)&#32;in&#32;my&#32;queue.</emphasis>
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__current_job&#32;=
215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__fetch_and_add&lt;_DifferenceType&gt;(&amp;(__my_job.<link linkend="_struct____gnu__parallel_1_1___job_1ab3a1c06370c2356852a910e62b5dfd00">_M_first</link>),
216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__chunk_size);
217 
218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Update&#32;_M_load,&#32;to&#32;make&#32;the&#32;three&#32;values&#32;consistent,</emphasis>
219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_M_first&#32;might&#32;have&#32;been&#32;changed&#32;in&#32;the&#32;meantime</emphasis>
220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__my_job.<link linkend="_struct____gnu__parallel_1_1___job_1adadd345e0a44b035649b394f48f5033c">_M_load</link>&#32;=&#32;__my_job.<link linkend="_struct____gnu__parallel_1_1___job_1acd5e5d80560ee4ce8f1ed5155c39a126">_M_last</link>&#32;-&#32;__my_job.<link linkend="_struct____gnu__parallel_1_1___job_1ab3a1c06370c2356852a910e62b5dfd00">_M_first</link>&#32;+&#32;1;
221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_DifferenceType&#32;__job_counter&#32;=&#32;0;
222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__job_counter&#32;&lt;&#32;__chunk_size
223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__current_job&#32;&lt;=&#32;__my_job.<link linkend="_struct____gnu__parallel_1_1___job_1acd5e5d80560ee4ce8f1ed5155c39a126">_M_last</link>;
224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__job_counter)
225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Yes:&#32;process&#32;it!</emphasis>
227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__current&#32;=&#32;__begin&#32;+&#32;__current_job;
228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__current_job;
229 
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Do&#32;actual&#32;work.</emphasis>
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result&#32;=&#32;__r(__result,&#32;__f(__op,&#32;__current));
232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
233 
234 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;flush(__busy)</emphasis>
235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
236 
237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;After&#32;reaching&#32;this&#32;point,&#32;a&#32;thread&apos;s&#32;__job&#32;list&#32;is&#32;empty.</emphasis>
238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__iam_working)
239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;thread&#32;no&#32;longer&#32;has&#32;work.</emphasis>
241 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;atomic</emphasis>
242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__busy;
243 
244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__iam_working&#32;=&#32;<emphasis role="keyword">false</emphasis>;
245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
246 
247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__supposed_first,&#32;__supposed_last,
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__supposed_load;
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>
250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Find&#32;random&#32;nonempty&#32;deque&#32;(not&#32;own),&#32;do&#32;consistency&#32;check.</emphasis>
252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1aaa76236af73146ae89f726921bc3f2cb">__yield</link>();
253 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;flush(__busy)</emphasis>
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__victim&#32;=&#32;__rand_gen();
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__supposed_first&#32;=&#32;__job[__victim&#32;*&#32;__stride].<link linkend="_struct____gnu__parallel_1_1___job_1ab3a1c06370c2356852a910e62b5dfd00">_M_first</link>;
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__supposed_last&#32;=&#32;__job[__victim&#32;*&#32;__stride].<link linkend="_struct____gnu__parallel_1_1___job_1acd5e5d80560ee4ce8f1ed5155c39a126">_M_last</link>;
257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__supposed_load&#32;=&#32;__job[__victim&#32;*&#32;__stride].<link linkend="_struct____gnu__parallel_1_1___job_1adadd345e0a44b035649b394f48f5033c">_M_load</link>;
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__busy&#32;&gt;&#32;0
260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;((__supposed_load&#32;&lt;=&#32;0)
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;((__supposed_first&#32;+&#32;__supposed_load&#32;-&#32;1)
262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!=&#32;__supposed_last)));
263 
264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__busy&#32;==&#32;0)
265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
266 
267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__supposed_load&#32;&gt;&#32;0)
268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Has&#32;work&#32;and&#32;work&#32;to&#32;do.</emphasis>
270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Number&#32;of&#32;elements&#32;to&#32;steal&#32;(at&#32;least&#32;one).</emphasis>
271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__steal&#32;=&#32;(__supposed_load&#32;&lt;&#32;2)&#32;?&#32;1&#32;:&#32;__supposed_load&#32;/&#32;2;
272 
273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Push&#32;__victim&apos;s&#32;current&#32;start&#32;forward.</emphasis>
274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__stolen_first&#32;=
275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__fetch_and_add&lt;_DifferenceType&gt;
276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&amp;(__job[__victim&#32;*&#32;__stride]._M_first),&#32;__steal);
277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__stolen_try&#32;=&#32;(__stolen_first&#32;+&#32;__steal
278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;_DifferenceType(1));
279 
280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__my_job.<link linkend="_struct____gnu__parallel_1_1___job_1ab3a1c06370c2356852a910e62b5dfd00">_M_first</link>&#32;=&#32;__stolen_first;
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__my_job.<link linkend="_struct____gnu__parallel_1_1___job_1acd5e5d80560ee4ce8f1ed5155c39a126">_M_last</link>&#32;=&#32;<link linkend="_namespace____gnu__parallel_1a417ee6b935946ea05ce7c45fd067541a">__gnu_parallel::min</link>(__stolen_try,
282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__supposed_last);
283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__my_job.<link linkend="_struct____gnu__parallel_1_1___job_1adadd345e0a44b035649b394f48f5033c">_M_load</link>&#32;=&#32;__my_job.<link linkend="_struct____gnu__parallel_1_1___job_1acd5e5d80560ee4ce8f1ed5155c39a126">_M_last</link>&#32;-&#32;__my_job.<link linkend="_struct____gnu__parallel_1_1___job_1ab3a1c06370c2356852a910e62b5dfd00">_M_first</link>&#32;+&#32;1;
284 
285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Has&#32;potential&#32;work&#32;again.</emphasis>
286 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;atomic</emphasis>
287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__busy;
288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__iam_working&#32;=&#32;<emphasis role="keyword">true</emphasis>;
289 
290 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;flush(__busy)</emphasis>
291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
292 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;flush(__busy)</emphasis>
293 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;end&#32;while&#32;__busy&#32;&gt;&#32;0</emphasis>
294 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Add&#32;accumulated&#32;result&#32;to&#32;output.</emphasis>
295 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2omp_8h_1ab7a6a9f1b9a08b10b4770c3389cb8d3c">omp_set_lock</link>(&amp;__output_lock);
296 &#32;&#32;&#32;&#32;__output&#32;=&#32;__r(__output,&#32;__result);
297 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2omp_8h_1a9671d710d3c51bdc9940b81a3e23dcf6">omp_unset_lock</link>(&amp;__output_lock);
298 &#32;&#32;&#32;&#32;&#32;&#32;}
299 
300 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;__job;
301 
302 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Points&#32;to&#32;last&#32;element&#32;processed&#32;(needed&#32;as&#32;return&#32;value&#32;for</emphasis>
303 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;some&#32;algorithms&#32;like&#32;transform)</emphasis>
304 &#32;&#32;&#32;&#32;&#32;&#32;__f._M_finish_iterator&#32;=&#32;__begin&#32;+&#32;__length;
305 
306 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2omp_8h_1a7f838ad86590395c9aaaf7eabf80665e">omp_destroy_lock</link>(&amp;__output_lock);
307 
308 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__op;
309 &#32;&#32;&#32;&#32;}
310 }&#32;<emphasis role="comment">//&#32;end&#32;namespace</emphasis>
311 
312 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_GLIBCXX_PARALLEL_WORKSTEALING_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
