<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2find__fn__imps_8hpp_source" xml:lang="en-US">
<title>find_fn_imps.hpp</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/ext/pb_ds/detail/pat_trie_/find_fn_imps.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2005-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2004&#32;Ami&#32;Tavory&#32;and&#32;Vladimir&#32;Dreizin,&#32;IBM-HRL.</emphasis>
26 
27 <emphasis role="comment">//&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;sell,&#32;and&#32;distribute&#32;this&#32;software</emphasis>
28 <emphasis role="comment">//&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,&#32;provided&#32;that&#32;the&#32;above&#32;copyright</emphasis>
29 <emphasis role="comment">//&#32;notice&#32;appears&#32;in&#32;all&#32;copies,&#32;and&#32;that&#32;both&#32;that&#32;copyright&#32;notice</emphasis>
30 <emphasis role="comment">//&#32;and&#32;this&#32;permission&#32;notice&#32;appear&#32;in&#32;supporting&#32;documentation.&#32;None</emphasis>
31 <emphasis role="comment">//&#32;of&#32;the&#32;above&#32;authors,&#32;nor&#32;IBM&#32;Haifa&#32;Research&#32;Laboratories,&#32;make&#32;any</emphasis>
32 <emphasis role="comment">//&#32;representation&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
33 <emphasis role="comment">//&#32;purpose.&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied</emphasis>
34 <emphasis role="comment">//&#32;warranty.</emphasis>
35 
41 <emphasis role="preprocessor">#ifdef&#32;PB_DS_CLASS_C_DEC</emphasis>
42 
43 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
44 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::point_iterator
45 PB_DS_CLASS_C_DEC::
46 find(key_const_reference&#32;r_key)
47 {
48 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
49 &#32;&#32;node_pointer&#32;p_nd&#32;=&#32;find_imp(r_key);
50 
51 &#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(p_nd&#32;==&#32;0&#32;||&#32;p_nd-&gt;m_type&#32;!=&#32;leaf_node)
52 &#32;&#32;&#32;&#32;{
53 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1aabe976c8ae811576bfa1b0786dcfe377">PB_DS_CHECK_KEY_DOES_NOT_EXIST</link>(r_key)
54 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();
55 &#32;&#32;&#32;&#32;}
56 
57 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(synth_access_traits::equal_keys(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(<emphasis role="keyword">static_cast&lt;</emphasis>leaf_pointer<emphasis role="keyword">&gt;</emphasis>(p_nd)-&gt;<link linkend="_classvalue">value</link>()),&#32;r_key))
58 &#32;&#32;&#32;&#32;{
59 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1acfae3994df576dbc37edc392d027c7ef">PB_DS_CHECK_KEY_EXISTS</link>(r_key)
60 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(p_nd);
61 &#32;&#32;&#32;&#32;}
62 
63 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1aabe976c8ae811576bfa1b0786dcfe377">PB_DS_CHECK_KEY_DOES_NOT_EXIST</link>(r_key)
64 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();
65 }
66 
67 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
68 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::point_const_iterator
69 PB_DS_CLASS_C_DEC::
70 find(key_const_reference&#32;r_key)<emphasis role="keyword">&#32;const</emphasis>
71 <emphasis role="keyword"></emphasis>{
72 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
73 
74 &#32;&#32;node_const_pointer&#32;p_nd&#32;=&#32;const_cast&lt;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>*&#32;&gt;(this)-&gt;find_imp(r_key);
75 
76 &#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(p_nd&#32;==&#32;0&#32;||&#32;p_nd-&gt;m_type&#32;!=&#32;leaf_node)
77 &#32;&#32;&#32;&#32;{
78 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1aabe976c8ae811576bfa1b0786dcfe377">PB_DS_CHECK_KEY_DOES_NOT_EXIST</link>(r_key)
79 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();
80 &#32;&#32;&#32;&#32;}
81 
82 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(synth_access_traits::equal_keys(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(<emphasis role="keyword">static_cast&lt;</emphasis>leaf_const_pointer<emphasis role="keyword">&gt;</emphasis>(p_nd)-&gt;<link linkend="_classvalue">value</link>()),&#32;r_key))
83 &#32;&#32;&#32;&#32;{
84 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1acfae3994df576dbc37edc392d027c7ef">PB_DS_CHECK_KEY_EXISTS</link>(r_key)
85 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(<emphasis role="keyword">const_cast&lt;</emphasis>node_pointer<emphasis role="keyword">&gt;</emphasis>(p_nd));
86 &#32;&#32;&#32;&#32;}
87 
88 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1aabe976c8ae811576bfa1b0786dcfe377">PB_DS_CHECK_KEY_DOES_NOT_EXIST</link>(r_key)
89 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();
90 }
91 
92 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
93 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::node_pointer
94 PB_DS_CLASS_C_DEC::
95 find_imp(key_const_reference&#32;r_key)
96 {
97 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(empty())
98 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
99 
100 &#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;synth_access_traits::const_iterator&#32;b_it&#32;=
101 &#32;&#32;&#32;&#32;synth_access_traits::begin(r_key);
102 &#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;synth_access_traits::const_iterator&#32;e_it&#32;=
103 &#32;&#32;&#32;&#32;synth_access_traits::end(r_key);
104 
105 &#32;&#32;node_pointer&#32;p_nd&#32;=&#32;m_p_head-&gt;m_p_parent;
106 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_nd&#32;!=&#32;0);
107 
108 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(p_nd-&gt;m_type&#32;!=&#32;leaf_node)
109 &#32;&#32;&#32;&#32;{
110 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_nd-&gt;m_type&#32;==&#32;i_node);
111 &#32;&#32;&#32;&#32;&#32;&#32;node_pointer&#32;p_next_nd&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>inode_pointer<emphasis role="keyword">&gt;</emphasis>(p_nd)-&gt;get_child_node(b_it,&#32;&#32;e_it,&#32;&#32;<emphasis role="keyword">this</emphasis>);
112 
113 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_next_nd&#32;==&#32;0)
114 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p_nd;
115 &#32;&#32;&#32;&#32;&#32;&#32;p_nd&#32;=&#32;p_next_nd;
116 &#32;&#32;&#32;&#32;}
117 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p_nd;
118 }
119 
120 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
121 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::node_pointer
122 PB_DS_CLASS_C_DEC::
123 lower_bound_imp(key_const_reference&#32;r_key)
124 {
125 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(empty())
126 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_p_head);
127 
128 &#32;&#32;node_pointer&#32;p_nd&#32;=&#32;m_p_head-&gt;m_p_parent;
129 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_nd&#32;!=&#32;0);
130 
131 &#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::a_const_iterator&#32;b_it&#32;=
132 &#32;&#32;&#32;&#32;synth_access_traits::begin(r_key);
133 
134 &#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::a_const_iterator&#32;e_it&#32;=
135 &#32;&#32;&#32;&#32;synth_access_traits::end(r_key);
136 
137 &#32;&#32;size_type&#32;checked_ind&#32;=&#32;0;
138 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)
139 &#32;&#32;&#32;&#32;{
140 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_nd-&gt;m_type&#32;==&#32;leaf_node)
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
142 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!synth_access_traits::cmp_keys(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(<emphasis role="keyword">static_cast&lt;</emphasis>leaf_const_pointer<emphasis role="keyword">&gt;</emphasis>(p_nd)-&gt;<link linkend="_classvalue">value</link>()),&#32;r_key))
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p_nd;
144 &#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;it(p_nd);
145 &#32;&#32;&#32;&#32;&#32;&#32;++it;
146 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;it.m_p_nd;
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
148 
149 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_nd-&gt;m_type&#32;==&#32;i_node);
150 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;new_checked_ind&#32;=
151 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>inode_pointer<emphasis role="keyword">&gt;</emphasis>(p_nd)-&gt;get_e_ind();
152 
153 &#32;&#32;&#32;&#32;&#32;&#32;p_nd&#32;=
154 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>inode_pointer<emphasis role="keyword">&gt;</emphasis>(p_nd)-&gt;get_lower_bound_child_node(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;b_it,&#32;e_it,&#32;checked_ind,&#32;<emphasis role="keyword">this</emphasis>);
155 &#32;&#32;&#32;&#32;&#32;&#32;checked_ind&#32;=&#32;new_checked_ind;
156 &#32;&#32;&#32;&#32;}
157 }
158 
159 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
160 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::point_iterator
161 PB_DS_CLASS_C_DEC::
162 lower_bound(key_const_reference&#32;r_key)
163 {&#32;<emphasis role="keywordflow">return</emphasis>&#32;point_iterator(lower_bound_imp(r_key));&#32;}
164 
165 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
166 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::point_const_iterator
167 PB_DS_CLASS_C_DEC::
168 lower_bound(key_const_reference&#32;r_key)<emphasis role="keyword">&#32;const</emphasis>
169 <emphasis role="keyword"></emphasis>{
170 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;point_const_iterator(<emphasis role="keyword">const_cast&lt;</emphasis><link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>*&#32;<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>)-&gt;lower_bound_imp(r_key));
171 }
172 
173 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
174 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::point_iterator
175 PB_DS_CLASS_C_DEC::
176 upper_bound(key_const_reference&#32;r_key)
177 {
178 &#32;&#32;point_iterator&#32;l_bound_it&#32;=&#32;lower_bound(r_key);
179 
180 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(l_bound_it&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;||
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!synth_access_traits::cmp_keys(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(*l_bound_it),
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r_key));
183 
184 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(l_bound_it&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;||
185 &#32;&#32;&#32;&#32;&#32;&#32;synth_access_traits::cmp_keys(r_key,&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(*l_bound_it)))
186 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;l_bound_it;
187 
188 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;++l_bound_it;
189 }
190 
191 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
192 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::point_const_iterator
193 PB_DS_CLASS_C_DEC::
194 upper_bound(key_const_reference&#32;r_key)<emphasis role="keyword">&#32;const</emphasis>
195 <emphasis role="keyword"></emphasis>{
196 &#32;&#32;point_const_iterator&#32;l_bound_it&#32;=&#32;lower_bound(r_key);
197 
198 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(l_bound_it&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;||
199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!synth_access_traits::cmp_keys(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(*l_bound_it),
200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r_key));
201 
202 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(l_bound_it&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;||
203 &#32;&#32;&#32;&#32;&#32;&#32;synth_access_traits::cmp_keys(r_key,&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(*l_bound_it)))
204 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;l_bound_it;
205 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;++l_bound_it;
206 }
207 
208 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
209 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::a_const_iterator
210 PB_DS_CLASS_C_DEC::
211 pref_begin(node_const_pointer&#32;p_nd)
212 {
213 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_nd-&gt;m_type&#32;==&#32;leaf_node)
214 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(synth_access_traits::begin(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(<emphasis role="keyword">static_cast&lt;</emphasis>leaf_const_pointer<emphasis role="keyword">&gt;</emphasis>(p_nd)-&gt;<link linkend="_classvalue">value</link>())));
215 
216 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_nd-&gt;m_type&#32;==&#32;i_node);
217 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>inode_const_pointer<emphasis role="keyword">&gt;</emphasis>(p_nd)-&gt;pref_b_it();
218 }
219 
220 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
221 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::a_const_iterator
222 PB_DS_CLASS_C_DEC::
223 pref_end(node_const_pointer&#32;p_nd)
224 {
225 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_nd-&gt;m_type&#32;==&#32;leaf_node)
226 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(synth_access_traits::end(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(<emphasis role="keyword">static_cast&lt;</emphasis>leaf_const_pointer<emphasis role="keyword">&gt;</emphasis>(p_nd)-&gt;<link linkend="_classvalue">value</link>())));
227 
228 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_nd-&gt;m_type&#32;==&#32;i_node);
229 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>inode_const_pointer<emphasis role="keyword">&gt;</emphasis>(p_nd)-&gt;pref_e_it();
230 }
231 
232 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
233 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::leaf_const_pointer
234 PB_DS_CLASS_C_DEC::
235 leftmost_descendant(node_const_pointer&#32;p_nd)
236 {
237 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_nd-&gt;m_type&#32;==&#32;leaf_node)
238 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>leaf_const_pointer<emphasis role="keyword">&gt;</emphasis>(p_nd);
239 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>inode_const_pointer<emphasis role="keyword">&gt;</emphasis>(p_nd)-&gt;leftmost_descendant();
240 }
241 
242 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
243 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::leaf_pointer
244 PB_DS_CLASS_C_DEC::
245 leftmost_descendant(node_pointer&#32;p_nd)
246 {
247 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_nd-&gt;m_type&#32;==&#32;leaf_node)
248 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>leaf_pointer<emphasis role="keyword">&gt;</emphasis>(p_nd);
249 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>inode_pointer<emphasis role="keyword">&gt;</emphasis>(p_nd)-&gt;leftmost_descendant();
250 }
251 
252 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
253 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::leaf_const_pointer
254 PB_DS_CLASS_C_DEC::
255 rightmost_descendant(node_const_pointer&#32;p_nd)
256 {
257 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_nd-&gt;m_type&#32;==&#32;leaf_node)
258 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>leaf_const_pointer<emphasis role="keyword">&gt;</emphasis>(p_nd);
259 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>inode_const_pointer<emphasis role="keyword">&gt;</emphasis>(p_nd)-&gt;rightmost_descendant();
260 }
261 
262 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
263 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::leaf_pointer
264 PB_DS_CLASS_C_DEC::
265 rightmost_descendant(node_pointer&#32;p_nd)
266 {
267 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_nd-&gt;m_type&#32;==&#32;leaf_node)
268 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>leaf_pointer<emphasis role="keyword">&gt;</emphasis>(p_nd);
269 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>inode_pointer<emphasis role="keyword">&gt;</emphasis>(p_nd)-&gt;rightmost_descendant();
270 }
271 
272 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
