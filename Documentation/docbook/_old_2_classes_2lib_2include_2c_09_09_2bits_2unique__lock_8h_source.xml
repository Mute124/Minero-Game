<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2bits_2unique__lock_8h_source" xml:lang="en-US">
<title>unique_lock.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/bits/unique_lock.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;std::unique_lock&#32;implementation&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2008-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_UNIQUE_LOCK_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_GLIBCXX_UNIQUE_LOCK_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
34 
35 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
36 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/c++0x_warning.h&gt;</emphasis>
37 <emphasis role="preprocessor">#else</emphasis>
38 
39 <emphasis role="preprocessor">#include&#32;&lt;bits/chrono.h&gt;</emphasis>
40 <emphasis role="preprocessor">#include&#32;&lt;bits/move.h&gt;</emphasis>&#32;<emphasis role="comment">//&#32;for&#32;std::swap</emphasis>
41 <emphasis role="preprocessor">#include&#32;&lt;bits/std_mutex.h&gt;</emphasis>&#32;<emphasis role="comment">//&#32;for&#32;std::defer_lock_t</emphasis>
42 
43 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
44 {
45 _GLIBCXX_BEGIN_NAMESPACE_VERSION
46 
56 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Mutex&gt;
57 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>unique_lock
58 &#32;&#32;&#32;&#32;{
59 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
60 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Mutex&#32;mutex_type;
61 
62 &#32;&#32;&#32;&#32;&#32;&#32;unique_lock()&#32;noexcept
63 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_device(0),&#32;_M_owns(<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)
64 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
65 
66 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;unique_lock(mutex_type&amp;&#32;__m)
67 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_device(<link linkend="_namespacestd">std</link>::__addressof(__m)),&#32;_M_owns(<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)
68 &#32;&#32;&#32;&#32;&#32;&#32;{
69 &#32;&#32;&#32;&#32;lock();
70 &#32;&#32;&#32;&#32;_M_owns&#32;=&#32;<emphasis role="keyword">true</emphasis>;
71 &#32;&#32;&#32;&#32;&#32;&#32;}
72 
73 &#32;&#32;&#32;&#32;&#32;&#32;unique_lock(mutex_type&amp;&#32;__m,&#32;defer_lock_t)&#32;noexcept
74 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_device(std::__addressof(__m)),&#32;_M_owns(<emphasis role="keyword">false</emphasis>)
75 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
76 
77 &#32;&#32;&#32;&#32;&#32;&#32;unique_lock(mutex_type&amp;&#32;__m,&#32;try_to_lock_t)
78 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_device(<link linkend="_namespacestd">std</link>::__addressof(__m)),&#32;_M_owns(_M_device-&gt;try_lock())
79 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
80 
81 &#32;&#32;&#32;&#32;&#32;&#32;unique_lock(mutex_type&amp;&#32;__m,&#32;adopt_lock_t)&#32;noexcept
82 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_device(std::__addressof(__m)),&#32;_M_owns(<emphasis role="keyword">true</emphasis>)
83 &#32;&#32;&#32;&#32;&#32;&#32;{
84 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;XXX&#32;calling&#32;thread&#32;owns&#32;mutex</emphasis>
85 &#32;&#32;&#32;&#32;&#32;&#32;}
86 
87 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Duration&gt;
88 &#32;&#32;&#32;&#32;unique_lock(mutex_type&amp;&#32;__m,
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;chrono::time_point&lt;_Clock,&#32;_Duration&gt;&amp;&#32;__atime)
90 &#32;&#32;&#32;&#32;:&#32;_M_device(<link linkend="_namespacestd">std</link>::__addressof(__m)),
91 &#32;&#32;&#32;&#32;&#32;&#32;_M_owns(_M_device-&gt;try_lock_until(__atime))
92 &#32;&#32;&#32;&#32;{&#32;}
93 
94 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period&gt;
95 &#32;&#32;&#32;&#32;unique_lock(mutex_type&amp;&#32;__m,
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;chrono::duration&lt;_Rep,&#32;_Period&gt;&amp;&#32;__rtime)
97 &#32;&#32;&#32;&#32;:&#32;_M_device(<link linkend="_namespacestd">std</link>::__addressof(__m)),
98 &#32;&#32;&#32;&#32;&#32;&#32;_M_owns(_M_device-&gt;try_lock_for(__rtime))
99 &#32;&#32;&#32;&#32;{&#32;}
100 
101 &#32;&#32;&#32;&#32;&#32;&#32;~unique_lock()
102 &#32;&#32;&#32;&#32;&#32;&#32;{
103 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_owns)
104 &#32;&#32;&#32;&#32;&#32;&#32;unlock();
105 &#32;&#32;&#32;&#32;&#32;&#32;}
106 
107 &#32;&#32;&#32;&#32;&#32;&#32;unique_lock(<emphasis role="keyword">const</emphasis>&#32;unique_lock&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
108 &#32;&#32;&#32;&#32;&#32;&#32;unique_lock&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;unique_lock&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
109 
110 &#32;&#32;&#32;&#32;&#32;&#32;unique_lock(unique_lock&amp;&amp;&#32;__u)&#32;noexcept
111 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_device(__u._M_device),&#32;_M_owns(__u._M_owns)
112 &#32;&#32;&#32;&#32;&#32;&#32;{
113 &#32;&#32;&#32;&#32;__u._M_device&#32;=&#32;0;
114 &#32;&#32;&#32;&#32;__u._M_owns&#32;=&#32;<emphasis role="keyword">false</emphasis>;
115 &#32;&#32;&#32;&#32;&#32;&#32;}
116 
117 &#32;&#32;&#32;&#32;&#32;&#32;unique_lock&amp;&#32;operator=(unique_lock&amp;&amp;&#32;__u)&#32;<emphasis role="keyword">noexcept</emphasis>
118 &#32;&#32;&#32;&#32;&#32;&#32;{
119 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(_M_owns)
120 &#32;&#32;&#32;&#32;&#32;&#32;unlock();
121 
122 &#32;&#32;&#32;&#32;unique_lock(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__u)).swap(*<emphasis role="keyword">this</emphasis>);
123 
124 &#32;&#32;&#32;&#32;__u._M_device&#32;=&#32;0;
125 &#32;&#32;&#32;&#32;__u._M_owns&#32;=&#32;<emphasis role="keyword">false</emphasis>;
126 
127 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
128 &#32;&#32;&#32;&#32;&#32;&#32;}
129 
130 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
131 &#32;&#32;&#32;&#32;&#32;&#32;lock()
132 &#32;&#32;&#32;&#32;&#32;&#32;{
133 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_device)
134 &#32;&#32;&#32;&#32;&#32;&#32;__throw_system_error(<emphasis role="keywordtype">int</emphasis>(errc::operation_not_permitted));
135 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_owns)
136 &#32;&#32;&#32;&#32;&#32;&#32;__throw_system_error(<emphasis role="keywordtype">int</emphasis>(errc::resource_deadlock_would_occur));
137 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
138 &#32;&#32;&#32;&#32;&#32;&#32;{
139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_device-&gt;lock();
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_owns&#32;=&#32;<emphasis role="keyword">true</emphasis>;
141 &#32;&#32;&#32;&#32;&#32;&#32;}
142 &#32;&#32;&#32;&#32;&#32;&#32;}
143 
144 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
145 &#32;&#32;&#32;&#32;&#32;&#32;try_lock()
146 &#32;&#32;&#32;&#32;&#32;&#32;{
147 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_device)
148 &#32;&#32;&#32;&#32;&#32;&#32;__throw_system_error(<emphasis role="keywordtype">int</emphasis>(errc::operation_not_permitted));
149 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_owns)
150 &#32;&#32;&#32;&#32;&#32;&#32;__throw_system_error(<emphasis role="keywordtype">int</emphasis>(errc::resource_deadlock_would_occur));
151 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
152 &#32;&#32;&#32;&#32;&#32;&#32;{
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_owns&#32;=&#32;_M_device-&gt;try_lock();
154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_owns;
155 &#32;&#32;&#32;&#32;&#32;&#32;}
156 &#32;&#32;&#32;&#32;&#32;&#32;}
157 
158 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Duration&gt;
159 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
160 &#32;&#32;&#32;&#32;try_lock_until(<emphasis role="keyword">const</emphasis>&#32;chrono::time_point&lt;_Clock,&#32;_Duration&gt;&amp;&#32;__atime)
161 &#32;&#32;&#32;&#32;{
162 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_device)
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__throw_system_error(<emphasis role="keywordtype">int</emphasis>(errc::operation_not_permitted));
164 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_owns)
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__throw_system_error(<emphasis role="keywordtype">int</emphasis>(errc::resource_deadlock_would_occur));
166 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_owns&#32;=&#32;_M_device-&gt;try_lock_until(__atime);
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_owns;
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
171 &#32;&#32;&#32;&#32;}
172 
173 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period&gt;
174 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
175 &#32;&#32;&#32;&#32;try_lock_for(<emphasis role="keyword">const</emphasis>&#32;chrono::duration&lt;_Rep,&#32;_Period&gt;&amp;&#32;__rtime)
176 &#32;&#32;&#32;&#32;{
177 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_device)
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__throw_system_error(<emphasis role="keywordtype">int</emphasis>(errc::operation_not_permitted));
179 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_owns)
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__throw_system_error(<emphasis role="keywordtype">int</emphasis>(errc::resource_deadlock_would_occur));
181 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_owns&#32;=&#32;_M_device-&gt;try_lock_for(__rtime);
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_owns;
185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
186 &#32;&#32;&#32;&#32;&#32;}
187 
188 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
189 &#32;&#32;&#32;&#32;&#32;&#32;unlock()
190 &#32;&#32;&#32;&#32;&#32;&#32;{
191 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_owns)
192 &#32;&#32;&#32;&#32;&#32;&#32;__throw_system_error(<emphasis role="keywordtype">int</emphasis>(errc::operation_not_permitted));
193 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_device)
194 &#32;&#32;&#32;&#32;&#32;&#32;{
195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_device-&gt;unlock();
196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_owns&#32;=&#32;<emphasis role="keyword">false</emphasis>;
197 &#32;&#32;&#32;&#32;&#32;&#32;}
198 &#32;&#32;&#32;&#32;&#32;&#32;}
199 
200 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
201 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(unique_lock&amp;&#32;__u)&#32;<emphasis role="keyword">noexcept</emphasis>
202 &#32;&#32;&#32;&#32;&#32;&#32;{
203 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(_M_device,&#32;__u._M_device);
204 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(_M_owns,&#32;__u._M_owns);
205 &#32;&#32;&#32;&#32;&#32;&#32;}
206 
207 &#32;&#32;&#32;&#32;&#32;&#32;mutex_type*
208 &#32;&#32;&#32;&#32;&#32;&#32;release()&#32;noexcept
209 &#32;&#32;&#32;&#32;&#32;&#32;{
210 &#32;&#32;&#32;&#32;mutex_type*&#32;__ret&#32;=&#32;_M_device;
211 &#32;&#32;&#32;&#32;_M_device&#32;=&#32;0;
212 &#32;&#32;&#32;&#32;_M_owns&#32;=&#32;<emphasis role="keyword">false</emphasis>;
213 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
214 &#32;&#32;&#32;&#32;&#32;&#32;}
215 
216 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
217 &#32;&#32;&#32;&#32;&#32;&#32;owns_lock()&#32;const&#32;noexcept
218 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_owns;&#32;}
219 
220 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>()&#32;const&#32;noexcept
221 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;owns_lock();&#32;}
222 
223 &#32;&#32;&#32;&#32;&#32;&#32;mutex_type*
224 &#32;&#32;&#32;&#32;&#32;&#32;mutex()&#32;const&#32;noexcept
225 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_device;&#32;}
226 
227 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
228 &#32;&#32;&#32;&#32;&#32;&#32;mutex_type*&#32;&#32;&#32;_M_device;
229 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;_M_owns;
230 &#32;&#32;&#32;&#32;};
231 
234 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Mutex&gt;
235 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
236 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(unique_lock&lt;_Mutex&gt;&amp;&#32;__x,&#32;unique_lock&lt;_Mutex&gt;&amp;&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
237 &#32;&#32;&#32;&#32;{&#32;__x.swap(__y);&#32;}
238 
239 _GLIBCXX_END_NAMESPACE_VERSION
240 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
241 
242 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
243 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_UNIQUE_LOCK_H</emphasis>
</programlisting></section>
