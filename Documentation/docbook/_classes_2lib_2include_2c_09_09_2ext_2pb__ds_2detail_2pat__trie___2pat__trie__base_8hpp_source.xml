<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie__base_8hpp_source" xml:lang="en-US">
<title>pat_trie_base.hpp</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/ext/pb_ds/detail/pat_trie_/pat_trie_base.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2005-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2004&#32;Ami&#32;Tavory&#32;and&#32;Vladimir&#32;Dreizin,&#32;IBM-HRL.</emphasis>
26 
27 <emphasis role="comment">//&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;sell,&#32;and&#32;distribute&#32;this&#32;software</emphasis>
28 <emphasis role="comment">//&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,&#32;provided&#32;that&#32;the&#32;above&#32;copyright</emphasis>
29 <emphasis role="comment">//&#32;notice&#32;appears&#32;in&#32;all&#32;copies,&#32;and&#32;that&#32;both&#32;that&#32;copyright&#32;notice</emphasis>
30 <emphasis role="comment">//&#32;and&#32;this&#32;permission&#32;notice&#32;appear&#32;in&#32;supporting&#32;documentation.&#32;None</emphasis>
31 <emphasis role="comment">//&#32;of&#32;the&#32;above&#32;authors,&#32;nor&#32;IBM&#32;Haifa&#32;Research&#32;Laboratories,&#32;make&#32;any</emphasis>
32 <emphasis role="comment">//&#32;representation&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
33 <emphasis role="comment">//&#32;purpose.&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied</emphasis>
34 <emphasis role="comment">//&#32;warranty.</emphasis>
35 
41 <emphasis role="preprocessor">#ifndef&#32;PB_DS_PAT_TRIE_BASE</emphasis>
42 <emphasis role="preprocessor">#define&#32;PB_DS_PAT_TRIE_BASE</emphasis>
43 
44 <emphasis role="preprocessor">#include&#32;&lt;debug/debug.h&gt;</emphasis>
45 
46 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__pbds">__gnu_pbds</link>
47 {
48 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>detail
49 &#32;&#32;{
51 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base">pat_trie_base</link>
52 &#32;&#32;&#32;&#32;{
58 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1a3df5e43907830910e3ce34d411088940">node_type</link>
59 &#32;&#32;&#32;&#32;{
60 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1a3df5e43907830910e3ce34d411088940af82e3e28a410ab34155ddc878c883a1b">i_node</link>,
61 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1a3df5e43907830910e3ce34d411088940a3a7d0001edbe6bd810da7f7efce03de8">leaf_node</link>,
62 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1a3df5e43907830910e3ce34d411088940af58c34c0552739a8fba258dd2900691d">head_node</link>
63 &#32;&#32;&#32;&#32;};
64 
66 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Metadata,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
67 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___metadata">_Metadata</link>
68 &#32;&#32;&#32;&#32;{
69 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;Metadata&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___metadata_1a96c4a59a4595160c5caf22cb6e52e525">metadata_type</link>;
70 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Alloc&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___metadata_1aec9b2075ba5477a69a1054438f2b9ec3">allocator_type</link>;
71 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">detail::rebind_traits&lt;_Alloc, Metadata&gt;::const_reference</link>
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___metadata_1abe31df5d9f1b9ef309ce1bf680fbed40">const_reference</link>;
73 
74 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___metadata_1abe31df5d9f1b9ef309ce1bf680fbed40">const_reference</link>
75 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___metadata_1a52025dd429b35324ef42ac71573a579c">get_metadata</link>()<emphasis role="keyword">&#32;const</emphasis>
76 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___metadata_1a89caf1052f558da24d5de8ef78f2b579">m_metadata</link>;&#32;}
77 
78 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___metadata_1a96c4a59a4595160c5caf22cb6e52e525">metadata_type</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___metadata_1a89caf1052f558da24d5de8ef78f2b579">m_metadata</link>;
79 &#32;&#32;&#32;&#32;};
80 
82 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
83 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___metadata">_Metadata</link>&lt;<link linkend="_struct____gnu__pbds_1_1null__type">null_type</link>,&#32;_Alloc&gt;
84 &#32;&#32;&#32;&#32;{
85 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1null__type">null_type</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___metadata_3_01null__type_00_01___alloc_01_4_1ab50cec0ee58c8101c962357ca48dcff5">metadata_type</link>;
86 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Alloc&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___metadata_3_01null__type_00_01___alloc_01_4_1ad2317c121e60028ebd67ff5373f8155a">allocator_type</link>;
87 &#32;&#32;&#32;&#32;};
88 
89 
91 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ATraits,&#32;<emphasis role="keyword">typename</emphasis>&#32;Metadata&gt;
92 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__base">_Node_base</link>
93 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;Metadata
94 &#32;&#32;&#32;&#32;&#32;&#32;{
95 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
96 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;Metadata::allocator_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Alloc;
97 
98 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
99 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Alloc&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__base_1a4e76bfdf26bd5e338d7677125bad6865">allocator_type</link>;
100 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_ATraits&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__base_1a7d6b51da4a4715934997e7c1790279f6">access_traits</link>;
101 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_ATraits::type_traits&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__base_1aadea16772636d50fd674207e7183e05d">type_traits</link>;
102 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">detail::rebind_traits&lt;_Alloc, _Node_base&gt;::pointer</link>
103 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__base_1aab5687cde850a73227b391e60ee02093">node_pointer</link>;
104 
105 &#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__base_1aab5687cde850a73227b391e60ee02093">node_pointer</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__base_1aa7993833def1d9ad84b41a3b03f13d88">m_p_parent</link>;
106 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1a3df5e43907830910e3ce34d411088940">node_type</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__base_1a94f41bc5d690ca9e0b8c648a95f0c3a0">m_type</link>;
107 
108 &#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__base_1ac92582deb1db4589df544477c0bfe1f4">_Node_base</link>(<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1a3df5e43907830910e3ce34d411088940">node_type</link>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>)&#32;:&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__base_1a94f41bc5d690ca9e0b8c648a95f0c3a0">m_type</link>(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>)
109 &#32;&#32;&#32;&#32;{&#32;}
110 
111 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">detail::rebind_traits&lt;_Alloc, _ATraits&gt;::const_pointer</link>
112 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__base_1ae16ef51eeb21a47234a3a907dc007fa7">a_const_pointer</link>;
113 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_ATraits::const_iterator&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__base_1a60caab963645e169d243f31b76c47f6e">a_const_iterator</link>;
114 
115 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_DEBUG</emphasis>
116 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::pair&lt;a_const_iterator,&#32;a_const_iterator&gt;&#32;node_debug_info;
117 
118 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
119 &#32;&#32;&#32;&#32;assert_valid(<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__base_1ae16ef51eeb21a47234a3a907dc007fa7">a_const_pointer</link>&#32;p_traits,
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__file,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__line)<emphasis role="keyword">&#32;const</emphasis>
121 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;assert_valid_imp(p_traits,&#32;__file,&#32;__line);&#32;}
122 
123 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;node_debug_info
124 &#32;&#32;&#32;&#32;assert_valid_imp(<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__base_1ae16ef51eeb21a47234a3a907dc007fa7">a_const_pointer</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*,&#32;<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
125 <emphasis role="preprocessor">#endif</emphasis>
126 &#32;&#32;&#32;&#32;&#32;&#32;};
127 
128 
130 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ATraits,&#32;<emphasis role="keyword">typename</emphasis>&#32;Metadata&gt;
131 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___head">_Head</link>
132 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__base">_Node_base</link>&lt;_ATraits,&#32;Metadata&gt;
133 &#32;&#32;&#32;&#32;{
134 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__base">_Node_base&lt;_ATraits, Metadata&gt;</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___head_1a2cc846041bd66b204c5ece34789d6288">base_type</link>;
135 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__base_1aadea16772636d50fd674207e7183e05d">base_type::type_traits</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___head_1ad0734e84a343615d1dd28637b75e7cdf">type_traits</link>;
136 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__base_1aab5687cde850a73227b391e60ee02093">base_type::node_pointer</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___head_1ac1ab2e121acc40ef384b1bb2f0bc0468">node_pointer</link>;
137 
138 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___head_1ac1ab2e121acc40ef384b1bb2f0bc0468">node_pointer</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___head_1a770d923ab9e8456dbd6aa5625117ef67">m_p_min</link>;
139 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___head_1ac1ab2e121acc40ef384b1bb2f0bc0468">node_pointer</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___head_1a729bd374cf69db7446c8ebf28a23cc08">m_p_max</link>;
140 
141 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___head_1a900c7c0f3333d2717ecc890a070ca05e">_Head</link>()&#32;:&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__base">base_type</link>(<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1a3df5e43907830910e3ce34d411088940af58c34c0552739a8fba258dd2900691d">head_node</link>)&#32;{&#32;}
142 
143 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_DEBUG</emphasis>
144 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;base_type::node_debug_info&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node_debug_info;
145 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__base_1ae16ef51eeb21a47234a3a907dc007fa7">base_type::a_const_pointer</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__base_1ae16ef51eeb21a47234a3a907dc007fa7">a_const_pointer</link>;
146 
147 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;node_debug_info
148 &#32;&#32;&#32;&#32;&#32;&#32;assert_valid_imp(<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__base_1ae16ef51eeb21a47234a3a907dc007fa7">a_const_pointer</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__file,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__line)<emphasis role="keyword">&#32;const</emphasis>
149 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
150 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1a259b851136e587d5e47cc695d6fb4bea">_GLIBCXX_DEBUG_VERIFY_AT</link>(<emphasis role="keyword">false</emphasis>,
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_message(<emphasis role="stringliteral">&quot;Assertion&#32;from&#32;%1;:%2;&quot;</emphasis>)
152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_string(__FILE__)._M_integer(__LINE__),
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__file,&#32;__line);
154 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_debug_info();
155 &#32;&#32;&#32;&#32;&#32;&#32;}
156 <emphasis role="preprocessor">#endif</emphasis>
157 &#32;&#32;&#32;&#32;};
158 
159 
161 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ATraits,&#32;<emphasis role="keyword">typename</emphasis>&#32;Metadata&gt;
162 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___leaf">_Leaf</link>
163 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__base">_Node_base</link>&lt;_ATraits,&#32;Metadata&gt;
164 &#32;&#32;&#32;&#32;{
165 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__base">_Node_base&lt;_ATraits, Metadata&gt;</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___leaf_1a557c7845da6cde7bf040d20426c6addf">base_type</link>;
166 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__base_1aadea16772636d50fd674207e7183e05d">base_type::type_traits</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___leaf_1a8a9c07179b11b6ea8154f0ebdbb9dadf">type_traits</link>;
167 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;type_traits::value_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___leaf_1a262da08004a13045cc2f6b7dd0b11412">value_type</link>;
168 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;type_traits::reference&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___leaf_1a8f27c754c9e3e22b534b46d1386c8222">reference</link>;
169 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;type_traits::const_reference&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___leaf_1aef09356b1660eefd6cbce04cd1b06a5e">const_reference</link>;
170 
171 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
172 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___leaf_1a262da08004a13045cc2f6b7dd0b11412">value_type</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_value;
173 
174 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___leaf">_Leaf</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___leaf">_Leaf</link>&amp;);
175 
176 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
177 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___leaf_1abcf907e7195f2029bc0fa2cdf20dce63">_Leaf</link>(<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___leaf_1aef09356b1660eefd6cbce04cd1b06a5e">const_reference</link>&#32;other)
178 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__base">base_type</link>(<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1a3df5e43907830910e3ce34d411088940a3a7d0001edbe6bd810da7f7efce03de8">leaf_node</link>),&#32;m_value(other)&#32;{&#32;}
179 
180 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___leaf_1a8f27c754c9e3e22b534b46d1386c8222">reference</link>
181 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___leaf_1aaf3c6c8e4016dbeb4a7fd030abe1b957">value</link>()
182 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_value;&#32;}
183 
184 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___leaf_1aef09356b1660eefd6cbce04cd1b06a5e">const_reference</link>
185 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___leaf_1a571e7ffc644171350fc575549b49c979">value</link>()<emphasis role="keyword">&#32;const</emphasis>
186 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_value;&#32;}
187 
188 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_DEBUG</emphasis>
189 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;base_type::node_debug_info&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node_debug_info;
190 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__base_1ae16ef51eeb21a47234a3a907dc007fa7">base_type::a_const_pointer</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__base_1ae16ef51eeb21a47234a3a907dc007fa7">a_const_pointer</link>;
191 
192 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;node_debug_info
193 &#32;&#32;&#32;&#32;&#32;&#32;assert_valid_imp(<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__base_1ae16ef51eeb21a47234a3a907dc007fa7">a_const_pointer</link>&#32;p_traits,
194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__file,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__line)<emphasis role="keyword">&#32;const</emphasis>
195 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
196 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1a60a4cde43600043cf4bcfa1ecd9f5e44">PB_DS_DEBUG_VERIFY</link>(<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__base_1a94f41bc5d690ca9e0b8c648a95f0c3a0">base_type::m_type</link>&#32;==&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1a3df5e43907830910e3ce34d411088940a3a7d0001edbe6bd810da7f7efce03de8">leaf_node</link>);
197 &#32;&#32;&#32;&#32;node_debug_info&#32;ret;
198 &#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___leaf_1aef09356b1660eefd6cbce04cd1b06a5e">const_reference</link>&#32;r_val&#32;=&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___leaf_1aaf3c6c8e4016dbeb4a7fd030abe1b957">value</link>();
199 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(p_traits-&gt;begin(p_traits-&gt;extract_key(r_val)),
200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_traits-&gt;end(p_traits-&gt;extract_key(r_val)));
201 &#32;&#32;&#32;&#32;&#32;&#32;}
202 
203 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
204 &#32;&#32;&#32;&#32;&#32;&#32;~_Leaf()&#32;{&#32;}
205 <emphasis role="preprocessor">#endif</emphasis>
206 &#32;&#32;&#32;&#32;};
207 
208 
210 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ATraits,&#32;<emphasis role="keyword">typename</emphasis>&#32;Metadata&gt;
211 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode">_Inode</link>
212 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__base">_Node_base</link>&lt;_ATraits,&#32;Metadata&gt;
213 &#32;&#32;&#32;&#32;{
214 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__base">_Node_base&lt;_ATraits, Metadata&gt;</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1ac3d05ceadb87824e3f561d2669e73e01">base_type</link>;
215 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__base_1aadea16772636d50fd674207e7183e05d">base_type::type_traits</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1afac420532913afa106e38d35a9175457">type_traits</link>;
216 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__base_1a7d6b51da4a4715934997e7c1790279f6">base_type::access_traits</link>&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1a4474e50c03159baec7919da692c2d0ab">access_traits</link>;
217 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;type_traits::value_type&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1abd3b3dd27a91c2045865be5992f472e9">value_type</link>;
218 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__base_1a4e76bfdf26bd5e338d7677125bad6865">base_type::allocator_type</link>&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1a03662677ecd72b1db1766a1a49bb6bb8">_Alloc</link>;
219 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1a03662677ecd72b1db1766a1a49bb6bb8">_Alloc</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1a0133439074d4bb502815f35f32ca7451">allocator_type</link>;
220 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc::size_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1a0c875f74d64ee4c5b28a6548f19d30a7">size_type</link>;
221 
222 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
223 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__base_1ae16ef51eeb21a47234a3a907dc007fa7">base_type::a_const_pointer</link>&#32;&#32;&#32;a_const_pointer;
224 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__base_1a60caab963645e169d243f31b76c47f6e">base_type::a_const_iterator</link>&#32;&#32;a_const_iterator;
225 
226 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__base_1aab5687cde850a73227b391e60ee02093">base_type::node_pointer</link>&#32;&#32;&#32;&#32;&#32;&#32;node_pointer;
227 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">detail::rebind_traits&lt;_Alloc, base_type&gt;::const_pointer</link>
228 &#32;&#32;&#32;&#32;node_const_pointer;
229 
230 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___leaf">_Leaf&lt;_ATraits, Metadata&gt;</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___leaf">leaf</link>;
231 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">detail::rebind_traits&lt;_Alloc, leaf&gt;</link>&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">__rebind_l</link>;
232 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__rebind_l::pointer&#32;&#32;&#32;&#32;&#32;&#32;leaf_pointer;
233 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__rebind_l::const_pointer&#32;&#32;&#32;&#32;leaf_const_pointer;
234 
235 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">detail::rebind_traits&lt;_Alloc, _Inode&gt;</link>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">__rebind_in</link>;
236 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__rebind_in::pointer&#32;&#32;&#32;&#32;&#32;inode_pointer;
237 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__rebind_in::const_pointer&#32;&#32;&#32;inode_const_pointer;
238 
239 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1a0c875f74d64ee4c5b28a6548f19d30a7">size_type</link>
240 &#32;&#32;&#32;&#32;&#32;&#32;get_pref_pos(a_const_iterator,&#32;a_const_iterator,&#32;a_const_pointer)&#32;<emphasis role="keyword">const</emphasis>;
241 
242 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
243 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">detail::rebind_traits&lt;_Alloc, node_pointer&gt;</link>&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1aae754319c0bdbafabbe11f5f0a192b2f">__rebind_np</link>;
244 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__rebind_np::pointer&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1aefe834a985fa1ba580577993350355c0">node_pointer_pointer</link>;
245 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__rebind_np::reference&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1afb9cf4c8cf902066b162baa841767479">node_pointer_reference</link>;
246 
247 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>
248 &#32;&#32;&#32;&#32;{
249 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1af1d52234fab29b3d2324c0027d300e65ac745705402d69ebd0219751685a18bdb">arr_size</link>&#32;=&#32;_ATraits::max_size&#32;+&#32;1
250 &#32;&#32;&#32;&#32;};
251 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1a1b00cebceab1188a67e390357359d121">PB_DS_STATIC_ASSERT</link>(min_arr_size,&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1af1d52234fab29b3d2324c0027d300e65ac745705402d69ebd0219751685a18bdb">arr_size</link>&#32;&gt;=&#32;2);
252 
253 
255 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator">const_iterator</link>
256 &#32;&#32;&#32;&#32;&#32;&#32;{
257 &#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1aefe834a985fa1ba580577993350355c0">node_pointer_pointer</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator_1a5c3cfbaefe359c24d7dd979c3431d9d9">m_p_p_cur</link>;
258 &#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1aefe834a985fa1ba580577993350355c0">node_pointer_pointer</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator_1a7bea1d3e4d249c572f0114455a5b654a">m_p_p_end</link>;
259 
260 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::forward_iterator_tag&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator_1aee0ed4f483c185d5b0c85deea45ce659">iterator_category</link>;
261 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc::difference_type&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator_1a7bf5a342b14e9f2df95154f95a96d19c">difference_type</link>;
262 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;node_pointer&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator_1a1c109a0fd4e01a45e303aa2e7e7f20c1">value_type</link>;
263 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1aefe834a985fa1ba580577993350355c0">node_pointer_pointer</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator_1af8c5fd10d400be3db021bdd9f46ff282">pointer</link>;
264 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1afb9cf4c8cf902066b162baa841767479">node_pointer_reference</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator_1a2d00a1e6daa1254d7c0ee57ad7dbff6c">reference</link>;
265 
266 &#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator_1ab243d4093e1f6e6b3c94157fe41491ba">const_iterator</link>(<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1aefe834a985fa1ba580577993350355c0">node_pointer_pointer</link>&#32;p_p_cur&#32;=&#32;0,
267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1aefe834a985fa1ba580577993350355c0">node_pointer_pointer</link>&#32;p_p_end&#32;=&#32;0)
268 &#32;&#32;&#32;&#32;:&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator_1a5c3cfbaefe359c24d7dd979c3431d9d9">m_p_p_cur</link>(p_p_cur),&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator_1a7bea1d3e4d249c572f0114455a5b654a">m_p_p_end</link>(p_p_end)
269 &#32;&#32;&#32;&#32;{&#32;}
270 
271 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
272 &#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator_1a60f997f195b00f0eb170abb4c17f8fe7">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator">const_iterator</link>&amp;&#32;other)<emphasis role="keyword">&#32;const</emphasis>
273 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator_1a5c3cfbaefe359c24d7dd979c3431d9d9">m_p_p_cur</link>&#32;==&#32;other.<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator_1a5c3cfbaefe359c24d7dd979c3431d9d9">m_p_p_cur</link>;&#32;}
274 
275 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
276 &#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator_1aa475ac2905a3cdc6ddbf60485c463dc2">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator">const_iterator</link>&amp;&#32;other)<emphasis role="keyword">&#32;const</emphasis>
277 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator_1a5c3cfbaefe359c24d7dd979c3431d9d9">m_p_p_cur</link>&#32;!=&#32;other.<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator_1a5c3cfbaefe359c24d7dd979c3431d9d9">m_p_p_cur</link>;&#32;}
278 
279 &#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator">const_iterator</link>&amp;
280 &#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator_1a489e9b5056dbeba43dbe0e8e8e845dae">operator++</link>()
281 &#32;&#32;&#32;&#32;{
282 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>
283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator_1a5c3cfbaefe359c24d7dd979c3431d9d9">m_p_p_cur</link>;
284 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator_1a5c3cfbaefe359c24d7dd979c3431d9d9">m_p_p_cur</link>&#32;!=&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator_1a7bea1d3e4d249c572f0114455a5b654a">m_p_p_end</link>&#32;&amp;&amp;&#32;*<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator_1a5c3cfbaefe359c24d7dd979c3431d9d9">m_p_p_cur</link>&#32;==&#32;0);
285 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
286 &#32;&#32;&#32;&#32;}
287 
288 &#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator">const_iterator</link>
289 &#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator_1a9cded2d228269f7063b58a3feabba2a7">operator++</link>(<emphasis role="keywordtype">int</emphasis>)
290 &#32;&#32;&#32;&#32;{
291 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator">const_iterator</link>&#32;ret_it(*<emphasis role="keyword">this</emphasis>);
292 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator_1a489e9b5056dbeba43dbe0e8e8e845dae">operator++</link>();
293 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret_it;
294 &#32;&#32;&#32;&#32;}
295 
296 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1aefe834a985fa1ba580577993350355c0">node_pointer_pointer</link>
297 &#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator_1ad777d868e1e7e55e5128cc8cac18f9ab">operator-&gt;</link>()<emphasis role="keyword">&#32;const</emphasis>
298 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
299 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a784d392bfeacfb0e3e6e0d2719489fb6">_GLIBCXX_DEBUG_ONLY</link>(assert_referencible();)
300 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator_1a5c3cfbaefe359c24d7dd979c3431d9d9">m_p_p_cur</link>;
301 &#32;&#32;&#32;&#32;}
302 
303 &#32;&#32;&#32;&#32;node_const_pointer
304 &#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator_1a9719cc4206d169956459620cc7a238a9">operator*</link>()<emphasis role="keyword">&#32;const</emphasis>
305 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
306 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a784d392bfeacfb0e3e6e0d2719489fb6">_GLIBCXX_DEBUG_ONLY</link>(assert_referencible();)
307 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator_1a5c3cfbaefe359c24d7dd979c3431d9d9">m_p_p_cur</link>;
308 &#32;&#32;&#32;&#32;}
309 
310 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
311 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_DEBUG</emphasis>
312 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
313 &#32;&#32;&#32;&#32;assert_referencible()<emphasis role="keyword">&#32;const</emphasis>
314 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator_1a5c3cfbaefe359c24d7dd979c3431d9d9">m_p_p_cur</link>&#32;!=&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator_1a7bea1d3e4d249c572f0114455a5b654a">m_p_p_end</link>&#32;&amp;&amp;&#32;*<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator_1a5c3cfbaefe359c24d7dd979c3431d9d9">m_p_p_cur</link>&#32;!=&#32;0);&#32;}
315 <emphasis role="preprocessor">#endif</emphasis>
316 &#32;&#32;&#32;&#32;&#32;&#32;};
317 
318 
320 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1iterator">iterator</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator">const_iterator</link>
321 &#32;&#32;&#32;&#32;&#32;&#32;{
322 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
323 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::forward_iterator_tag&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1iterator_1aa1edb469dde192d101fed2ee9831e690">iterator_category</link>;
324 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc::difference_type&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1iterator_1aa533b5b2617d111866658a52c8a13215">difference_type</link>;
325 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;node_pointer&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1iterator_1a0a728e0c29622d2585f9d83b5909dfc8">value_type</link>;
326 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1aefe834a985fa1ba580577993350355c0">node_pointer_pointer</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1iterator_1af9b5c31acabf9e77102d50ff811fe969">pointer</link>;
327 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1afb9cf4c8cf902066b162baa841767479">node_pointer_reference</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1iterator_1aaef3127e048feb6713b9c6082e8817a2">reference</link>;
328 
329 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>
330 &#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1iterator_1a290f1ecdc59f4c7a416cf5512fefad14">iterator</link>(<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1aefe834a985fa1ba580577993350355c0">node_pointer_pointer</link>&#32;p_p_cur&#32;=&#32;0,
331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1aefe834a985fa1ba580577993350355c0">node_pointer_pointer</link>&#32;p_p_end&#32;=&#32;0)
332 &#32;&#32;&#32;&#32;:&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator">const_iterator</link>(p_p_cur,&#32;p_p_end)&#32;{&#32;}
333 
334 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
335 &#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1iterator_1acb6342d3a2aa2e457448fd43c11e55c6">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1iterator">iterator</link>&amp;&#32;other)<emphasis role="keyword">&#32;const</emphasis>
336 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator_1a5c3cfbaefe359c24d7dd979c3431d9d9">const_iterator::m_p_p_cur</link>&#32;==&#32;other.<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator_1a5c3cfbaefe359c24d7dd979c3431d9d9">m_p_p_cur</link>;&#32;}
337 
338 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
339 &#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1iterator_1a6eb9314a735d0604cf72103411d197fa">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1iterator">iterator</link>&amp;&#32;other)<emphasis role="keyword">&#32;const</emphasis>
340 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator_1a5c3cfbaefe359c24d7dd979c3431d9d9">const_iterator::m_p_p_cur</link>&#32;!=&#32;other.<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator_1a5c3cfbaefe359c24d7dd979c3431d9d9">m_p_p_cur</link>;&#32;}
341 
342 &#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1iterator">iterator</link>&amp;
343 &#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1iterator_1a340f568b0efbc14bdf0f4e0f976e46f0">operator++</link>()
344 &#32;&#32;&#32;&#32;{
345 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator_1a489e9b5056dbeba43dbe0e8e8e845dae">const_iterator::operator++</link>();
346 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
347 &#32;&#32;&#32;&#32;}
348 
349 &#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1iterator">iterator</link>
350 &#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1iterator_1aaf8c94bdf70dbc8c66b7a822c16a0b58">operator++</link>(<emphasis role="keywordtype">int</emphasis>)
351 &#32;&#32;&#32;&#32;{
352 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1iterator">iterator</link>&#32;ret_it(*<emphasis role="keyword">this</emphasis>);
353 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1iterator_1a340f568b0efbc14bdf0f4e0f976e46f0">operator++</link>();
354 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret_it;
355 &#32;&#32;&#32;&#32;}
356 
357 &#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1aefe834a985fa1ba580577993350355c0">node_pointer_pointer</link>
358 &#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1iterator_1afba06764aae5d7fe16500489bdef80f3">operator-&gt;</link>()
359 &#32;&#32;&#32;&#32;{
360 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a784d392bfeacfb0e3e6e0d2719489fb6">_GLIBCXX_DEBUG_ONLY</link>(const_iterator::assert_referencible();)
361 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator_1a5c3cfbaefe359c24d7dd979c3431d9d9">const_iterator::m_p_p_cur</link>;
362 &#32;&#32;&#32;&#32;}
363 
364 &#32;&#32;&#32;&#32;node_pointer
365 &#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1iterator_1a3f8137bce7d6f62618112b565501f943">operator*</link>()
366 &#32;&#32;&#32;&#32;{
367 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a784d392bfeacfb0e3e6e0d2719489fb6">_GLIBCXX_DEBUG_ONLY</link>(const_iterator::assert_referencible();)
368 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator_1a5c3cfbaefe359c24d7dd979c3431d9d9">const_iterator::m_p_p_cur</link>;
369 &#32;&#32;&#32;&#32;}
370 &#32;&#32;&#32;&#32;&#32;&#32;};
371 
372 
373 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1ab731fc4160adb7f67f99940e3df4e00c">_Inode</link>(<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1a0c875f74d64ee4c5b28a6548f19d30a7">size_type</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;a_const_iterator);
374 
375 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
376 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1a662efe188a198a00696efd541cc1e6d8">update_prefixes</link>(a_const_pointer);
377 
378 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator">const_iterator</link>
379 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1a975b38a0ebb01b87a04864f80d687bdd">begin</link>()&#32;<emphasis role="keyword">const</emphasis>;
380 
381 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1iterator">iterator</link>
382 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1a082b241b818da5f10729621b549defac">begin</link>();
383 
384 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1const__iterator">const_iterator</link>
385 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1ad7367f77a0410b83f87dcc95f1cc6a6a">end</link>()&#32;<emphasis role="keyword">const</emphasis>;
386 
387 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1iterator">iterator</link>
388 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1ad601f3fee0fda16d153acf3f0ebc5b57">end</link>();
389 
390 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;node_pointer
391 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1a70149aa11dc58ccaecdc39e791073c46">get_child_node</link>(a_const_iterator,&#32;a_const_iterator,&#32;a_const_pointer);
392 
393 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;node_const_pointer
394 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1a568d19e0b05c5611635ce97fa63ffddc">get_child_node</link>(a_const_iterator,&#32;a_const_iterator,&#32;a_const_pointer)&#32;<emphasis role="keyword">const</emphasis>;
395 
396 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1iterator">iterator</link>
397 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1af337111968d8d27dc79e37185eadcb3e">get_child_it</link>(a_const_iterator,&#32;a_const_iterator,&#32;a_const_pointer);
398 
399 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;node_pointer
400 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1a358eba821cf6ac2c66b7422869a45b89">get_lower_bound_child_node</link>(a_const_iterator,&#32;a_const_iterator,
401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1a0c875f74d64ee4c5b28a6548f19d30a7">size_type</link>,&#32;a_const_pointer);
402 
403 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;node_pointer
404 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1ab7617d02e11b17689d6e5f9cbea5f07f">add_child</link>(node_pointer,&#32;a_const_iterator,&#32;a_const_iterator,
405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;a_const_pointer);
406 
407 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;node_const_pointer
408 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1a631d3f1741af8c8bc6e99821e5145510">get_join_child</link>(node_const_pointer,&#32;a_const_pointer)&#32;<emphasis role="keyword">const</emphasis>;
409 
410 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;node_pointer
411 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1a28ab1b9393470eb13b2d2f70144d89ab">get_join_child</link>(node_pointer,&#32;a_const_pointer);
412 
413 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
414 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1abb971d3541e2e07307fd3f406ca4d3ab">remove_child</link>(node_pointer);
415 
416 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
417 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1a9c801805adb45c0af564677c0a53e689">remove_child</link>(<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1_1iterator">iterator</link>);
418 
419 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
420 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1a3d5a4925674f8bf07550aa24769e0266">replace_child</link>(node_pointer,&#32;a_const_iterator,&#32;a_const_iterator,
421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;a_const_pointer);
422 
423 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;a_const_iterator
424 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1aa1cfc6a2f469cf3589c2a7cb88df6101">pref_b_it</link>()&#32;<emphasis role="keyword">const</emphasis>;
425 
426 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;a_const_iterator
427 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1aad95a7f1c2b79a94077831adfcda693d">pref_e_it</link>()&#32;<emphasis role="keyword">const</emphasis>;
428 
429 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
430 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1ab0c21815f7acf8363371994c00a9f8df">should_be_mine</link>(a_const_iterator,&#32;a_const_iterator,&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1a0c875f74d64ee4c5b28a6548f19d30a7">size_type</link>,
431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;a_const_pointer)&#32;<emphasis role="keyword">const</emphasis>;
432 
433 &#32;&#32;&#32;&#32;&#32;&#32;leaf_pointer
434 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1aad51291b67d12538f220d51aaaec9aaf">leftmost_descendant</link>();
435 
436 &#32;&#32;&#32;&#32;&#32;&#32;leaf_const_pointer
437 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1a658e5b153a0acbe5c3cb41b8e545a691">leftmost_descendant</link>()&#32;<emphasis role="keyword">const</emphasis>;
438 
439 &#32;&#32;&#32;&#32;&#32;&#32;leaf_pointer
440 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1ab4bd1231f22409522fd9d0de87d10e79">rightmost_descendant</link>();
441 
442 &#32;&#32;&#32;&#32;&#32;&#32;leaf_const_pointer
443 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1a15aa2909fef8ce28a86e3651c2cc23aa">rightmost_descendant</link>()&#32;<emphasis role="keyword">const</emphasis>;
444 
445 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_DEBUG</emphasis>
446 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;base_type::node_debug_info&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node_debug_info;
447 
448 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;node_debug_info
449 &#32;&#32;&#32;&#32;&#32;&#32;assert_valid_imp(a_const_pointer,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*,&#32;<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">const</emphasis>;
450 <emphasis role="preprocessor">#endif</emphasis>
451 
452 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1a0c875f74d64ee4c5b28a6548f19d30a7">size_type</link>
453 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1a484c878757f4c375ddfbd111c9006e35">get_e_ind</link>()<emphasis role="keyword">&#32;const</emphasis>
454 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_e_ind;&#32;}
455 
456 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
457 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode">_Inode</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode">_Inode</link>&amp;);
458 
459 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1a0c875f74d64ee4c5b28a6548f19d30a7">size_type</link>
460 &#32;&#32;&#32;&#32;&#32;&#32;get_begin_pos()&#32;<emphasis role="keyword">const</emphasis>;
461 
462 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;__rebind_l&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s_leaf_alloc;
463 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;__rebind_in&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s_inode_alloc;
464 
465 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1a0c875f74d64ee4c5b28a6548f19d30a7">size_type</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_e_ind;
466 &#32;&#32;&#32;&#32;&#32;&#32;a_const_iterator&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_pref_b_it;
467 &#32;&#32;&#32;&#32;&#32;&#32;a_const_iterator&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_pref_e_it;
468 &#32;&#32;&#32;&#32;&#32;&#32;node_pointer&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_a_p_children[<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___inode_1af1d52234fab29b3d2324c0027d300e65ac745705402d69ebd0219751685a18bdb">arr_size</link>];
469 &#32;&#32;&#32;&#32;};
470 
471 <emphasis role="preprocessor">#define&#32;PB_DS_CONST_IT_C_DEC&#32;\</emphasis>
472 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_CIter&lt;Node,&#32;Leaf,&#32;Head,&#32;Inode,&#32;Is_Forward_Iterator&gt;</emphasis>
473 
474 <emphasis role="preprocessor">#define&#32;PB_DS_CONST_ODIR_IT_C_DEC&#32;\</emphasis>
475 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_CIter&lt;Node,&#32;Leaf,&#32;Head,&#32;Inode,&#32;!Is_Forward_Iterator&gt;</emphasis>
476 
477 <emphasis role="preprocessor">#define&#32;PB_DS_IT_C_DEC&#32;\</emphasis>
478 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_Iter&lt;Node,&#32;Leaf,&#32;Head,&#32;Inode,&#32;Is_Forward_Iterator&gt;</emphasis>
479 
480 <emphasis role="preprocessor">#define&#32;PB_DS_ODIR_IT_C_DEC&#32;\</emphasis>
481 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_Iter&lt;Node,&#32;Leaf,&#32;Head,&#32;Inode,&#32;!Is_Forward_Iterator&gt;</emphasis>
482 
483 
485 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Node,&#32;<emphasis role="keyword">typename</emphasis>&#32;Leaf,&#32;<emphasis role="keyword">typename</emphasis>&#32;Head,&#32;<emphasis role="keyword">typename</emphasis>&#32;Inode,
486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Is_Forward_Iterator&gt;
487 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter">_CIter</link>
488 &#32;&#32;&#32;&#32;{
489 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
490 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;These&#32;types&#32;are&#32;all&#32;the&#32;same&#32;for&#32;the&#32;first&#32;four&#32;template&#32;arguments.</emphasis>
491 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;Node::allocator_type&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a6e0e1d832a7e56026a8a4e7ace04666c">allocator_type</link>;
492 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;Node::type_traits&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1aa9afaf0fea43231d675d5b80d83911d9">type_traits</link>;
493 
494 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::bidirectional_iterator_tag&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1ac375a29fde23b788bc8f03686ce2f1d9">iterator_category</link>;
495 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;allocator_type::difference_type&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1ab9ef93101f767b7aa265f56fde0b7066">difference_type</link>;
496 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;type_traits::value_type&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a77b3ec1f3a06b2e3e1fd5ce7ac674442">value_type</link>;
497 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;type_traits::pointer&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1aab9b3003d6228e5964c8f285fc2fa0dd">pointer</link>;
498 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;type_traits::reference&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1ac1e1d271463015511ac1394e260ff999">reference</link>;
499 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;type_traits::const_pointer&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a825b35882c47577367c128581ce0a3ce">const_pointer</link>;
500 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;type_traits::const_reference&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1acda96d06fe1a3f4fc5b34e08693b8608">const_reference</link>;
501 
502 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a6e0e1d832a7e56026a8a4e7ace04666c">allocator_type</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a0a621450b4e9ed6ac6338b93001082b1">_Alloc</link>;
503 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits&lt;_Alloc, Node&gt;::pointer</link>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a6ff98b8534596f079c622085c2bc88a8">node_pointer</link>;
504 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits&lt;_Alloc, Leaf&gt;::pointer</link>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1ac5e4a0801789d6c49989c7386ce4d6dd">leaf_pointer</link>;
505 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits&lt;_Alloc, Leaf&gt;::const_pointer</link>&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a8b7429204cdff8269b5d76bffdee6ae6">leaf_const_pointer</link>;
506 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits&lt;_Alloc, Head&gt;::pointer</link>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a168a9142435e88444e2f00a2cfbc32be">head_pointer</link>;
507 
508 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits&lt;_Alloc, Inode&gt;::pointer</link>&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1ad04df9912234e575abe0d69c3d43501f">inode_pointer</link>;
509 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;Inode::iterator&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1aabd05d3de62678dc6f42fcf4b74bfef8">inode_iterator</link>;
510 
511 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a6ff98b8534596f079c622085c2bc88a8">node_pointer</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>;
512 
513 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1ab6d53ff1f8f0715f9c472d1ed915bae1">_CIter</link>(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a6ff98b8534596f079c622085c2bc88a8">node_pointer</link>&#32;p_nd&#32;=&#32;0)&#32;:&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>(p_nd)
514 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
515 
516 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a92e911446d2ad5e32aee9a5bffb684da">_CIter</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie__base_8hpp_1af382c2d1decc31b3836e0b2b34c57982">PB_DS_CONST_ODIR_IT_C_DEC</link>&amp;&#32;other)
517 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>(other.<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>)
518 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
519 
520 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter">_CIter</link>&amp;
521 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1ae00c0143f17f6655a37f69cd966db701">operator=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter">_CIter</link>&amp;&#32;other)
522 &#32;&#32;&#32;&#32;&#32;&#32;{
523 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>&#32;=&#32;other.<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>;
524 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
525 &#32;&#32;&#32;&#32;&#32;&#32;}
526 
527 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter">_CIter</link>&amp;
528 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1abc161d005c92a56458aee10311dae3fc">operator=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie__base_8hpp_1af382c2d1decc31b3836e0b2b34c57982">PB_DS_CONST_ODIR_IT_C_DEC</link>&amp;&#32;other)
529 &#32;&#32;&#32;&#32;&#32;&#32;{
530 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>&#32;=&#32;other.<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>;
531 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
532 &#32;&#32;&#32;&#32;&#32;&#32;}
533 
534 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a825b35882c47577367c128581ce0a3ce">const_pointer</link>
535 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a1628438090fdaa1a32cd87ae9134cddf">operator-&gt;</link>()<emphasis role="keyword">&#32;const</emphasis>
536 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
537 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>-&gt;m_type&#32;==&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1a3df5e43907830910e3ce34d411088940a3a7d0001edbe6bd810da7f7efce03de8">leaf_node</link>);
538 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1ac5e4a0801789d6c49989c7386ce4d6dd">leaf_pointer</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>)-&gt;<link linkend="_classvalue">value</link>();
539 &#32;&#32;&#32;&#32;&#32;&#32;}
540 
541 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1acda96d06fe1a3f4fc5b34e08693b8608">const_reference</link>
542 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a61885bade0615a4d77414e6b7c7f8e05">operator*</link>()<emphasis role="keyword">&#32;const</emphasis>
543 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
544 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>-&gt;m_type&#32;==&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1a3df5e43907830910e3ce34d411088940a3a7d0001edbe6bd810da7f7efce03de8">leaf_node</link>);
545 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1ac5e4a0801789d6c49989c7386ce4d6dd">leaf_pointer</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>)-&gt;<link linkend="_classvalue">value</link>();
546 &#32;&#32;&#32;&#32;&#32;&#32;}
547 
548 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
549 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a7de25e5ee88de9b777a92fdb3062095c">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter">_CIter</link>&amp;&#32;other)<emphasis role="keyword">&#32;const</emphasis>
550 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>&#32;==&#32;other.<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>;&#32;}
551 
552 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
553 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a3ae47252c89d3c92d4b0110db586f6ba">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie__base_8hpp_1af382c2d1decc31b3836e0b2b34c57982">PB_DS_CONST_ODIR_IT_C_DEC</link>&amp;&#32;other)<emphasis role="keyword">&#32;const</emphasis>
554 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>&#32;==&#32;other.m_p_nd;&#32;}
555 
556 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
557 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a436e33dbdfc237495797566f385c713b">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter">_CIter</link>&amp;&#32;other)<emphasis role="keyword">&#32;const</emphasis>
558 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>&#32;!=&#32;other.<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>;&#32;}
559 
560 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
561 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1af15d62a5815eaac36ba507ec68660700">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie__base_8hpp_1af382c2d1decc31b3836e0b2b34c57982">PB_DS_CONST_ODIR_IT_C_DEC</link>&amp;&#32;other)<emphasis role="keyword">&#32;const</emphasis>
562 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>&#32;!=&#32;other.m_p_nd;&#32;}
563 
564 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter">_CIter</link>&amp;
565 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1af0276b9b5a0f9892ee8d342db30f61f9">operator++</link>()
566 &#32;&#32;&#32;&#32;&#32;&#32;{
567 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a91d7717e4d234180deae64d342c7febe">inc</link>(integral_constant&lt;int,&#32;Is_Forward_Iterator&gt;());
568 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
569 &#32;&#32;&#32;&#32;&#32;&#32;}
570 
571 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter">_CIter</link>
572 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a28db0169799a30eef465dcf244a4fa1f">operator++</link>(<emphasis role="keywordtype">int</emphasis>)
573 &#32;&#32;&#32;&#32;&#32;&#32;{
574 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter">_CIter</link>&#32;ret_it(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>);
575 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1af0276b9b5a0f9892ee8d342db30f61f9">operator++</link>();
576 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret_it;
577 &#32;&#32;&#32;&#32;&#32;&#32;}
578 
579 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter">_CIter</link>&amp;
580 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1abbebfe8ec2b6f97727d7043e6c160baf">operator--</link>()
581 &#32;&#32;&#32;&#32;&#32;&#32;{
582 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1adae72f5d4a74a94579c6ab2f8b2d073c">dec</link>(integral_constant&lt;int,&#32;Is_Forward_Iterator&gt;());
583 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
584 &#32;&#32;&#32;&#32;&#32;&#32;}
585 
586 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter">_CIter</link>
587 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a95dabe56646e7948efacc9c4d8fd567b">operator--</link>(<emphasis role="keywordtype">int</emphasis>)
588 &#32;&#32;&#32;&#32;&#32;&#32;{
589 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter">_CIter</link>&#32;ret_it(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>);
590 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1abbebfe8ec2b6f97727d7043e6c160baf">operator--</link>();
591 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret_it;
592 &#32;&#32;&#32;&#32;&#32;&#32;}
593 
594 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
595 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
596 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a91d7717e4d234180deae64d342c7febe">inc</link>(<link linkend="_namespace____gnu__pbds_1_1detail_1a05db727ae5396f8d8518969cd59fff55">false_type</link>)
597 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1adae72f5d4a74a94579c6ab2f8b2d073c">dec</link>(<link linkend="_namespace____gnu__pbds_1_1detail_1a6bd7131856cf31c3caa443a674400ab1">true_type</link>());&#32;}
598 
599 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
600 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a7176d2c272f2de10757aa58a93a3ba68">inc</link>(<link linkend="_namespace____gnu__pbds_1_1detail_1a6bd7131856cf31c3caa443a674400ab1">true_type</link>)
601 &#32;&#32;&#32;&#32;&#32;&#32;{
602 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>-&gt;m_type&#32;==&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1a3df5e43907830910e3ce34d411088940af58c34c0552739a8fba258dd2900691d">head_node</link>)
603 &#32;&#32;&#32;&#32;&#32;&#32;{
604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a168a9142435e88444e2f00a2cfbc32be">head_pointer</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>)-&gt;m_p_min;
605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
606 &#32;&#32;&#32;&#32;&#32;&#32;}
607 
608 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a6ff98b8534596f079c622085c2bc88a8">node_pointer</link>&#32;p_y&#32;=&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>-&gt;m_p_parent;
609 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(p_y-&gt;m_type&#32;!=&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1a3df5e43907830910e3ce34d411088940af58c34c0552739a8fba258dd2900691d">head_node</link>&#32;&amp;&amp;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a18e287a9b4b2f80dd07e4aae13c79e12">get_larger_sibling</link>(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>)&#32;==&#32;0)
610 &#32;&#32;&#32;&#32;&#32;&#32;{
611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>&#32;=&#32;p_y;
612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_y&#32;=&#32;p_y-&gt;m_p_parent;
613 &#32;&#32;&#32;&#32;&#32;&#32;}
614 
615 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_y-&gt;m_type&#32;==&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1a3df5e43907830910e3ce34d411088940af58c34c0552739a8fba258dd2900691d">head_node</link>)
616 &#32;&#32;&#32;&#32;&#32;&#32;{
617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>&#32;=&#32;p_y;
618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
619 &#32;&#32;&#32;&#32;&#32;&#32;}
620 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>&#32;=&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1aa257c415d10160f5e739fe97eb854eaf">leftmost_descendant</link>(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a18e287a9b4b2f80dd07e4aae13c79e12">get_larger_sibling</link>(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>));
621 &#32;&#32;&#32;&#32;&#32;&#32;}
622 
623 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
624 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1adae72f5d4a74a94579c6ab2f8b2d073c">dec</link>(<link linkend="_namespace____gnu__pbds_1_1detail_1a05db727ae5396f8d8518969cd59fff55">false_type</link>)
625 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a91d7717e4d234180deae64d342c7febe">inc</link>(<link linkend="_namespace____gnu__pbds_1_1detail_1a6bd7131856cf31c3caa443a674400ab1">true_type</link>());&#32;}
626 
627 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
628 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a64d1a1ffb3459ac2032ba2c6d7ba7a1e">dec</link>(<link linkend="_namespace____gnu__pbds_1_1detail_1a6bd7131856cf31c3caa443a674400ab1">true_type</link>)
629 &#32;&#32;&#32;&#32;&#32;&#32;{
630 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>-&gt;m_type&#32;==&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1a3df5e43907830910e3ce34d411088940af58c34c0552739a8fba258dd2900691d">head_node</link>)
631 &#32;&#32;&#32;&#32;&#32;&#32;{
632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a168a9142435e88444e2f00a2cfbc32be">head_pointer</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>)-&gt;m_p_max;
633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
634 &#32;&#32;&#32;&#32;&#32;&#32;}
635 
636 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a6ff98b8534596f079c622085c2bc88a8">node_pointer</link>&#32;p_y&#32;=&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>-&gt;m_p_parent;
637 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(p_y-&gt;m_type&#32;!=&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1a3df5e43907830910e3ce34d411088940af58c34c0552739a8fba258dd2900691d">head_node</link>&#32;&amp;&amp;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a1c8fa591bd26018d57cc8c810baeeb64">get_smaller_sibling</link>(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>)&#32;==&#32;0)
638 &#32;&#32;&#32;&#32;&#32;&#32;{
639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>&#32;=&#32;p_y;
640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_y&#32;=&#32;p_y-&gt;m_p_parent;
641 &#32;&#32;&#32;&#32;&#32;&#32;}
642 
643 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_y-&gt;m_type&#32;==&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1a3df5e43907830910e3ce34d411088940af58c34c0552739a8fba258dd2900691d">head_node</link>)
644 &#32;&#32;&#32;&#32;&#32;&#32;{
645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>&#32;=&#32;p_y;
646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
647 &#32;&#32;&#32;&#32;&#32;&#32;}
648 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>&#32;=&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1ac1beb35e1420d4e70c4db7716d923782">rightmost_descendant</link>(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a1c8fa591bd26018d57cc8c810baeeb64">get_smaller_sibling</link>(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>));
649 &#32;&#32;&#32;&#32;&#32;&#32;}
650 
651 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a6ff98b8534596f079c622085c2bc88a8">node_pointer</link>
652 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a18e287a9b4b2f80dd07e4aae13c79e12">get_larger_sibling</link>(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a6ff98b8534596f079c622085c2bc88a8">node_pointer</link>&#32;p_nd)
653 &#32;&#32;&#32;&#32;&#32;&#32;{
654 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1ad04df9912234e575abe0d69c3d43501f">inode_pointer</link>&#32;p_parent&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1ad04df9912234e575abe0d69c3d43501f">inode_pointer</link><emphasis role="keyword">&gt;</emphasis>(p_nd-&gt;m_p_parent);
655 
656 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1aabd05d3de62678dc6f42fcf4b74bfef8">inode_iterator</link>&#32;it&#32;=&#32;p_parent-&gt;begin();
657 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(*it&#32;!=&#32;p_nd)
658 &#32;&#32;&#32;&#32;&#32;&#32;++it;
659 
660 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1aabd05d3de62678dc6f42fcf4b74bfef8">inode_iterator</link>&#32;next_it&#32;=&#32;it;
661 &#32;&#32;&#32;&#32;++next_it;
662 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(next_it&#32;==&#32;p_parent-&gt;end())?&#32;0&#32;:&#32;*next_it;
663 &#32;&#32;&#32;&#32;&#32;&#32;}
664 
665 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a6ff98b8534596f079c622085c2bc88a8">node_pointer</link>
666 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a1c8fa591bd26018d57cc8c810baeeb64">get_smaller_sibling</link>(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a6ff98b8534596f079c622085c2bc88a8">node_pointer</link>&#32;p_nd)
667 &#32;&#32;&#32;&#32;&#32;&#32;{
668 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1ad04df9912234e575abe0d69c3d43501f">inode_pointer</link>&#32;p_parent&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1ad04df9912234e575abe0d69c3d43501f">inode_pointer</link><emphasis role="keyword">&gt;</emphasis>(p_nd-&gt;m_p_parent);
669 
670 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1aabd05d3de62678dc6f42fcf4b74bfef8">inode_iterator</link>&#32;it&#32;=&#32;p_parent-&gt;begin();
671 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*it&#32;==&#32;p_nd)
672 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
673 
674 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1aabd05d3de62678dc6f42fcf4b74bfef8">inode_iterator</link>&#32;prev_it;
675 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>
676 &#32;&#32;&#32;&#32;&#32;&#32;{
677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prev_it&#32;=&#32;it;
678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++it;
679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*it&#32;==&#32;p_nd)
680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*prev_it;
681 &#32;&#32;&#32;&#32;&#32;&#32;}
682 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>);
683 
684 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(<emphasis role="keyword">false</emphasis>);
685 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
686 &#32;&#32;&#32;&#32;&#32;&#32;}
687 
688 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1ac5e4a0801789d6c49989c7386ce4d6dd">leaf_pointer</link>
689 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1aa257c415d10160f5e739fe97eb854eaf">leftmost_descendant</link>(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a6ff98b8534596f079c622085c2bc88a8">node_pointer</link>&#32;p_nd)
690 &#32;&#32;&#32;&#32;&#32;&#32;{
691 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_nd-&gt;m_type&#32;==&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1a3df5e43907830910e3ce34d411088940a3a7d0001edbe6bd810da7f7efce03de8">leaf_node</link>)
692 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1ac5e4a0801789d6c49989c7386ce4d6dd">leaf_pointer</link><emphasis role="keyword">&gt;</emphasis>(p_nd);
693 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1ad04df9912234e575abe0d69c3d43501f">inode_pointer</link><emphasis role="keyword">&gt;</emphasis>(p_nd)-&gt;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1aa257c415d10160f5e739fe97eb854eaf">leftmost_descendant</link>();
694 &#32;&#32;&#32;&#32;&#32;&#32;}
695 
696 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1ac5e4a0801789d6c49989c7386ce4d6dd">leaf_pointer</link>
697 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1ac1beb35e1420d4e70c4db7716d923782">rightmost_descendant</link>(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a6ff98b8534596f079c622085c2bc88a8">node_pointer</link>&#32;p_nd)
698 &#32;&#32;&#32;&#32;&#32;&#32;{
699 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_nd-&gt;m_type&#32;==&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1a3df5e43907830910e3ce34d411088940a3a7d0001edbe6bd810da7f7efce03de8">leaf_node</link>)
700 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1ac5e4a0801789d6c49989c7386ce4d6dd">leaf_pointer</link><emphasis role="keyword">&gt;</emphasis>(p_nd);
701 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1ad04df9912234e575abe0d69c3d43501f">inode_pointer</link><emphasis role="keyword">&gt;</emphasis>(p_nd)-&gt;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1ac1beb35e1420d4e70c4db7716d923782">rightmost_descendant</link>();
702 &#32;&#32;&#32;&#32;&#32;&#32;}
703 &#32;&#32;&#32;&#32;};
704 
705 
707 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Node,&#32;<emphasis role="keyword">typename</emphasis>&#32;Leaf,&#32;<emphasis role="keyword">typename</emphasis>&#32;Head,&#32;<emphasis role="keyword">typename</emphasis>&#32;Inode,
708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Is_Forward_Iterator&gt;
709 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___iter">_Iter</link>
710 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter">_CIter</link>&lt;Node,&#32;Leaf,&#32;Head,&#32;Inode,&#32;Is_Forward_Iterator&gt;
711 &#32;&#32;&#32;&#32;{
712 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
713 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter">_CIter&lt;Node, Leaf, Head, Inode, Is_Forward_Iterator&gt;</link>
714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___iter_1ae1490ed283da147fcbed93add87a01c3">base_type</link>;
715 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a6e0e1d832a7e56026a8a4e7ace04666c">base_type::allocator_type</link>&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___iter_1a23b9999d1cf74a459b8066e5bce8faad">allocator_type</link>;
716 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1aa9afaf0fea43231d675d5b80d83911d9">base_type::type_traits</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___iter_1adab52b97ee1986a12a500ffa20ceaa66">type_traits</link>;
717 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;type_traits::value_type&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___iter_1a5177f19c1484d3fcd6d394fd33c1654b">value_type</link>;
718 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;type_traits::pointer&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___iter_1a77f139497afcbd78d2d66908a9e3aabc">pointer</link>;
719 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;type_traits::reference&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___iter_1a790d6e19e10f63a16ca6966c1b12f501">reference</link>;
720 
721 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a6ff98b8534596f079c622085c2bc88a8">base_type::node_pointer</link>&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___iter_1aaa9da730057db1e323bd11a4be1f58ad">node_pointer</link>;
722 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1ac5e4a0801789d6c49989c7386ce4d6dd">base_type::leaf_pointer</link>&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___iter_1a48f1e5f56842e2e32bc9c6304b075413">leaf_pointer</link>;
723 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a8b7429204cdff8269b5d76bffdee6ae6">base_type::leaf_const_pointer</link>&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___iter_1ae4e4d56c3adb25a3036f17cbef48dbf9">leaf_const_pointer</link>;
724 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a168a9142435e88444e2f00a2cfbc32be">base_type::head_pointer</link>&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___iter_1a77c4dcce7db18ff48add3cc5cd22582d">head_pointer</link>;
725 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1ad04df9912234e575abe0d69c3d43501f">base_type::inode_pointer</link>&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___iter_1a309b943f601127f24564de4d17316192">inode_pointer</link>;
726 
727 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___iter_1ada4d83409769d2b6912afd76ce843fc9">_Iter</link>(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___iter_1aaa9da730057db1e323bd11a4be1f58ad">node_pointer</link>&#32;p_nd&#32;=&#32;0)
728 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter">base_type</link>(p_nd)&#32;{&#32;}
729 
730 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___iter_1ad356d69c35d321ebfc63d247ed2cc450">_Iter</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie__base_8hpp_1ab895bcd56d5abacc59c2785bf242079b">PB_DS_ODIR_IT_C_DEC</link>&amp;&#32;other)
731 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter">base_type</link>(other.<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>)&#32;{&#32;}
732 
733 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___iter">_Iter</link>&amp;
734 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___iter_1a66cb25d97d226b1c206ac0c9c9d4edef">operator=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___iter">_Iter</link>&amp;&#32;other)
735 &#32;&#32;&#32;&#32;&#32;&#32;{
736 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">base_type::m_p_nd</link>&#32;=&#32;other.<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>;
737 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
738 &#32;&#32;&#32;&#32;&#32;&#32;}
739 
740 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___iter">_Iter</link>&amp;
741 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___iter_1a3367904d98decb781faef38150c49ca6">operator=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie__base_8hpp_1ab895bcd56d5abacc59c2785bf242079b">PB_DS_ODIR_IT_C_DEC</link>&amp;&#32;other)
742 &#32;&#32;&#32;&#32;&#32;&#32;{
743 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">base_type::m_p_nd</link>&#32;=&#32;other.<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">m_p_nd</link>;
744 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
745 &#32;&#32;&#32;&#32;&#32;&#32;}
746 
747 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
748 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___iter_1aefb44ebc640d4f666e0e2c1bd349b295">operator-&gt;</link>()<emphasis role="keyword">&#32;const</emphasis>
749 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
750 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">base_type::m_p_nd</link>-&gt;m_type&#32;==&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1a3df5e43907830910e3ce34d411088940a3a7d0001edbe6bd810da7f7efce03de8">leaf_node</link>);
751 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___iter_1a48f1e5f56842e2e32bc9c6304b075413">leaf_pointer</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">base_type::m_p_nd</link>)-&gt;<link linkend="_classvalue">value</link>();
752 &#32;&#32;&#32;&#32;&#32;&#32;}
753 
754 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___iter_1a790d6e19e10f63a16ca6966c1b12f501">reference</link>
755 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___iter_1a7abdc5f95994f287b2dbb5d17cb74c25">operator*</link>()<emphasis role="keyword">&#32;const</emphasis>
756 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
757 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">base_type::m_p_nd</link>-&gt;m_type&#32;==&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1a3df5e43907830910e3ce34d411088940a3a7d0001edbe6bd810da7f7efce03de8">leaf_node</link>);
758 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___iter_1a48f1e5f56842e2e32bc9c6304b075413">leaf_pointer</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">base_type::m_p_nd</link>)-&gt;<link linkend="_classvalue">value</link>();
759 &#32;&#32;&#32;&#32;&#32;&#32;}
760 
761 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___iter">_Iter</link>&amp;
762 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___iter_1af02c2e9fcb204db322ae248cad1ba730">operator++</link>()
763 &#32;&#32;&#32;&#32;&#32;&#32;{
764 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1af0276b9b5a0f9892ee8d342db30f61f9">base_type::operator++</link>();
765 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
766 &#32;&#32;&#32;&#32;&#32;&#32;}
767 
768 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___iter">_Iter</link>
769 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___iter_1a5e0c6f7ba942350849d47d9c4a2dafce">operator++</link>(<emphasis role="keywordtype">int</emphasis>)
770 &#32;&#32;&#32;&#32;&#32;&#32;{
771 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___iter">_Iter</link>&#32;ret(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">base_type::m_p_nd</link>);
772 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___iter_1af02c2e9fcb204db322ae248cad1ba730">operator++</link>();
773 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
774 &#32;&#32;&#32;&#32;&#32;&#32;}
775 
776 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___iter">_Iter</link>&amp;
777 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___iter_1af1513250b28b0f6f0bfdd0473719e49c">operator--</link>()
778 &#32;&#32;&#32;&#32;&#32;&#32;{
779 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1abbebfe8ec2b6f97727d7043e6c160baf">base_type::operator--</link>();
780 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
781 &#32;&#32;&#32;&#32;&#32;&#32;}
782 
783 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___iter">_Iter</link>
784 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___iter_1ab36fcac10446785c24fb4234950e893f">operator--</link>(<emphasis role="keywordtype">int</emphasis>)
785 &#32;&#32;&#32;&#32;&#32;&#32;{
786 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___iter">_Iter</link>&#32;ret(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___c_iter_1a054eba43f11628a1b551e46b5a6ff428">base_type::m_p_nd</link>);
787 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___iter_1af1513250b28b0f6f0bfdd0473719e49c">operator--</link>();
788 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
789 &#32;&#32;&#32;&#32;&#32;&#32;}
790 &#32;&#32;&#32;&#32;};
791 
792 <emphasis role="preprocessor">#undef&#32;PB_DS_CONST_ODIR_IT_C_DEC</emphasis>
793 <emphasis role="preprocessor">#undef&#32;PB_DS_ODIR_IT_C_DEC</emphasis>
794 
795 
796 <emphasis role="preprocessor">#define&#32;PB_DS_PAT_TRIE_NODE_CONST_ITERATOR_C_DEC&#32;\</emphasis>
797 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_Node_citer&lt;Node,&#32;Leaf,&#32;Head,&#32;Inode,&#32;_CIterator,&#32;Iterator,&#32;_ATraits,&#32;_Alloc&gt;</emphasis>
798 
799 <emphasis role="preprocessor">#define&#32;PB_DS_PAT_TRIE_NODE_ITERATOR_C_DEC&#32;\</emphasis>
800 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_Node_iter&lt;Node,&#32;Leaf,&#32;Head,&#32;Inode,&#32;_CIterator,&#32;Iterator,&#32;_ATraits,&#32;_Alloc&gt;</emphasis>
801 
803 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Node,
804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;Leaf,
805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;Head,
806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;Inode,
807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_CIterator,
808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;Iterator,
809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
810 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">_Node_citer</link>
811 &#32;&#32;&#32;&#32;{
812 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
813 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits&lt;_Alloc, Node&gt;::pointer</link>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a07fa8c9cfab310b702c5d535bf49c909">node_pointer</link>;
814 
815 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits&lt;_Alloc, Leaf&gt;::pointer</link>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a98184f8da6c26c31336562a27c1744f7">leaf_pointer</link>;
816 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits&lt;_Alloc, Leaf&gt;::const_pointer</link>&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a7be84a9688dec11544b8aece0132980c">leaf_const_pointer</link>;
817 
818 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits&lt;_Alloc, Inode&gt;::pointer</link>&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a485cd0f42c29dc873e29962bbd86ef9b">inode_pointer</link>;
819 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits&lt;_Alloc, Inode&gt;::const_pointer</link>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a60caf56ad0e0e4ffac3d56533589f201">inode_const_pointer</link>;
820 
821 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;Node::a_const_pointer&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a4ffd09efd496131956829457cdfda570">a_const_pointer</link>;
822 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;Node::a_const_iterator&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a62391d405ef8e727753a73dba3a9aa9a">a_const_iterator</link>;
823 
824 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
825 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a62391d405ef8e727753a73dba3a9aa9a">a_const_iterator</link>
826 &#32;&#32;&#32;&#32;&#32;&#32;pref_begin()<emphasis role="keyword">&#32;const</emphasis>
827 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
828 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a1e2565b7a9141ab9b2d782f343e92b4a">m_p_nd</link>-&gt;m_type&#32;==&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1a3df5e43907830910e3ce34d411088940a3a7d0001edbe6bd810da7f7efce03de8">leaf_node</link>)
829 &#32;&#32;&#32;&#32;&#32;&#32;{
830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a7be84a9688dec11544b8aece0132980c">leaf_const_pointer</link>&#32;lcp&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a7be84a9688dec11544b8aece0132980c">leaf_const_pointer</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a1e2565b7a9141ab9b2d782f343e92b4a">m_p_nd</link>);
831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1aed70db3de953a06f7c8fd45bd5610ab6">m_p_traits</link>-&gt;begin(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1aed70db3de953a06f7c8fd45bd5610ab6">m_p_traits</link>-&gt;extract_key(lcp-&gt;value()));
832 &#32;&#32;&#32;&#32;&#32;&#32;}
833 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a1e2565b7a9141ab9b2d782f343e92b4a">m_p_nd</link>-&gt;m_type&#32;==&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1a3df5e43907830910e3ce34d411088940af82e3e28a410ab34155ddc878c883a1b">i_node</link>);
834 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a60caf56ad0e0e4ffac3d56533589f201">inode_const_pointer</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a1e2565b7a9141ab9b2d782f343e92b4a">m_p_nd</link>)-&gt;pref_b_it();
835 &#32;&#32;&#32;&#32;&#32;&#32;}
836 
837 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a62391d405ef8e727753a73dba3a9aa9a">a_const_iterator</link>
838 &#32;&#32;&#32;&#32;&#32;&#32;pref_end()<emphasis role="keyword">&#32;const</emphasis>
839 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
840 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a1e2565b7a9141ab9b2d782f343e92b4a">m_p_nd</link>-&gt;m_type&#32;==&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1a3df5e43907830910e3ce34d411088940a3a7d0001edbe6bd810da7f7efce03de8">leaf_node</link>)
841 &#32;&#32;&#32;&#32;&#32;&#32;{
842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a7be84a9688dec11544b8aece0132980c">leaf_const_pointer</link>&#32;lcp&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a7be84a9688dec11544b8aece0132980c">leaf_const_pointer</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a1e2565b7a9141ab9b2d782f343e92b4a">m_p_nd</link>);
843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1aed70db3de953a06f7c8fd45bd5610ab6">m_p_traits</link>-&gt;end(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1aed70db3de953a06f7c8fd45bd5610ab6">m_p_traits</link>-&gt;extract_key(lcp-&gt;value()));
844 &#32;&#32;&#32;&#32;&#32;&#32;}
845 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a1e2565b7a9141ab9b2d782f343e92b4a">m_p_nd</link>-&gt;m_type&#32;==&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1a3df5e43907830910e3ce34d411088940af82e3e28a410ab34155ddc878c883a1b">i_node</link>);
846 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a60caf56ad0e0e4ffac3d56533589f201">inode_const_pointer</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a1e2565b7a9141ab9b2d782f343e92b4a">m_p_nd</link>)-&gt;pref_e_it();
847 &#32;&#32;&#32;&#32;&#32;&#32;}
848 
849 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
850 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1trivial__iterator__tag">trivial_iterator_tag</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a95a47eaf0a9290bfcbae20ceee854be6">iterator_category</link>;
851 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_group__tags_1ga3a45dab56a44f762c97eb0eaee17f6f2">trivial_iterator_difference_type</link>&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a2ca51cfbd9ab80b548ae2bf8ea8b61b0">difference_type</link>;
852 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc::size_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1aa7d481b2bac4b9bebe66eb4c6ce56acd">size_type</link>;
853 
854 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_CIterator&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a155439e0d177e4103f58897774f36248">value_type</link>;
855 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a155439e0d177e4103f58897774f36248">value_type</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1ac0eb4fcafd374ac1f3adb74dfe7cad1e">reference</link>;
856 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a155439e0d177e4103f58897774f36248">value_type</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a7aa43bda4e69f401744fc15147291ee1">const_reference</link>;
857 
859 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;Node::metadata_type&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a28fd8a987e41c1d2f3d413b8018f7957">metadata_type</link>;
860 
862 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits&lt;_Alloc, metadata_type&gt;::const_reference</link>&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a89aa8504f45cf7aecfcd22549afb6737">metadata_const_reference</link>;
863 
864 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>
865 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a2ae944066f88dc12614dc9f81692ed89">_Node_citer</link>(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a07fa8c9cfab310b702c5d535bf49c909">node_pointer</link>&#32;p_nd&#32;=&#32;0,&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a4ffd09efd496131956829457cdfda570">a_const_pointer</link>&#32;p_traits&#32;=&#32;0)
866 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a1e2565b7a9141ab9b2d782f343e92b4a">m_p_nd</link>(const_cast&lt;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a07fa8c9cfab310b702c5d535bf49c909">node_pointer</link>&gt;(p_nd)),&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1aed70db3de953a06f7c8fd45bd5610ab6">m_p_traits</link>(p_traits)
867 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
868 
870 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;a_const_iterator,&#32;a_const_iterator&gt;
871 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a1c46c259b96d315785777fea38c548f8">valid_prefix</link>()<emphasis role="keyword">&#32;const</emphasis>
872 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(pref_begin(),&#32;pref_end());&#32;}
873 
876 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a7aa43bda4e69f401744fc15147291ee1">const_reference</link>
877 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a951a43bd97e277ad638e8cf8229d0af3">operator*</link>()<emphasis role="keyword">&#32;const</emphasis>
878 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
879 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a78db74c5de3cfff1de97561e5d530147">num_children</link>()&#32;==&#32;0);
880 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_CIterator(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a1e2565b7a9141ab9b2d782f343e92b4a">m_p_nd</link>);
881 &#32;&#32;&#32;&#32;&#32;&#32;}
882 
884 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a89aa8504f45cf7aecfcd22549afb6737">metadata_const_reference</link>
885 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1aa1d2c39c7f6e4ab52440a40836f030b7">get_metadata</link>()<emphasis role="keyword">&#32;const</emphasis>
886 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a1e2565b7a9141ab9b2d782f343e92b4a">m_p_nd</link>-&gt;get_metadata();&#32;}
887 
889 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1aa7d481b2bac4b9bebe66eb4c6ce56acd">size_type</link>
890 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a78db74c5de3cfff1de97561e5d530147">num_children</link>()<emphasis role="keyword">&#32;const</emphasis>
891 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
892 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a1e2565b7a9141ab9b2d782f343e92b4a">m_p_nd</link>-&gt;m_type&#32;==&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1a3df5e43907830910e3ce34d411088940a3a7d0001edbe6bd810da7f7efce03de8">leaf_node</link>)
893 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
894 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a1e2565b7a9141ab9b2d782f343e92b4a">m_p_nd</link>-&gt;m_type&#32;==&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1a3df5e43907830910e3ce34d411088940af82e3e28a410ab34155ddc878c883a1b">i_node</link>);
895 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a485cd0f42c29dc873e29962bbd86ef9b">inode_pointer</link>&#32;inp&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a485cd0f42c29dc873e29962bbd86ef9b">inode_pointer</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a1e2565b7a9141ab9b2d782f343e92b4a">m_p_nd</link>);
896 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::distance(inp-&gt;begin(),&#32;inp-&gt;end());
897 &#32;&#32;&#32;&#32;&#32;&#32;}
898 
901 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">_Node_citer</link>
902 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a5059988db056938bffdb07f2256e9702">get_child</link>(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1aa7d481b2bac4b9bebe66eb4c6ce56acd">size_type</link>&#32;i)<emphasis role="keyword">&#32;const</emphasis>
903 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
904 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a1e2565b7a9141ab9b2d782f343e92b4a">m_p_nd</link>-&gt;m_type&#32;==&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1a3df5e43907830910e3ce34d411088940af82e3e28a410ab34155ddc878c883a1b">i_node</link>);
905 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a485cd0f42c29dc873e29962bbd86ef9b">inode_pointer</link>&#32;inp&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a485cd0f42c29dc873e29962bbd86ef9b">inode_pointer</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a1e2565b7a9141ab9b2d782f343e92b4a">m_p_nd</link>);
906 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;Inode::iterator&#32;it&#32;=&#32;inp-&gt;begin();
907 &#32;&#32;&#32;&#32;std::advance(it,&#32;i);
908 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">_Node_citer</link>(*it,&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1aed70db3de953a06f7c8fd45bd5610ab6">m_p_traits</link>);
909 &#32;&#32;&#32;&#32;&#32;&#32;}
910 
912 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
913 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a46409e64d8adbfd9be6a641313d150da">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">_Node_citer</link>&amp;&#32;other)<emphasis role="keyword">&#32;const</emphasis>
914 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a1e2565b7a9141ab9b2d782f343e92b4a">m_p_nd</link>&#32;==&#32;other.<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a1e2565b7a9141ab9b2d782f343e92b4a">m_p_nd</link>;&#32;}
915 
917 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
918 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a210f5b96aa65b4a025d3f4998378862f">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">_Node_citer</link>&amp;&#32;other)<emphasis role="keyword">&#32;const</emphasis>
919 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a1e2565b7a9141ab9b2d782f343e92b4a">m_p_nd</link>&#32;!=&#32;other.<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a1e2565b7a9141ab9b2d782f343e92b4a">m_p_nd</link>;&#32;}
920 
921 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a07fa8c9cfab310b702c5d535bf49c909">node_pointer</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a1e2565b7a9141ab9b2d782f343e92b4a">m_p_nd</link>;
922 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a4ffd09efd496131956829457cdfda570">a_const_pointer</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1aed70db3de953a06f7c8fd45bd5610ab6">m_p_traits</link>;
923 &#32;&#32;&#32;&#32;};
924 
925 
927 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Node,
928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;Leaf,
929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;Head,
930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;Inode,
931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_CIterator,
932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;Iterator,
933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
934 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__iter">_Node_iter</link>
935 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">_Node_citer</link>&lt;Node,&#32;Leaf,&#32;Head,&#32;Inode,&#32;_CIterator,&#32;Iterator,&#32;_Alloc&gt;
936 &#32;&#32;&#32;&#32;{
937 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
938 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">_Node_citer</link>&lt;Node,&#32;Leaf,&#32;Head,&#32;Inode,
939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CIterator,&#32;Iterator,&#32;_Alloc&gt;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">base_type</link>;
940 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits&lt;_Alloc, Node&gt;::pointer</link>&#32;node_pointer;
941 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a485cd0f42c29dc873e29962bbd86ef9b">base_type::inode_pointer</link>&#32;&#32;&#32;&#32;&#32;inode_pointer;
942 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a4ffd09efd496131956829457cdfda570">base_type::a_const_pointer</link>&#32;&#32;&#32;a_const_pointer;
943 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;Iterator&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator;
944 
945 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
946 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1aa7d481b2bac4b9bebe66eb4c6ce56acd">base_type::size_type</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__iter_1af8f984af078fd7a7066f26760a890d0e">size_type</link>;
947 
948 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;Iterator&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__iter_1abe7bc4462b0b75a4f5d9d94dea61e1ab">value_type</link>;
949 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__iter_1abe7bc4462b0b75a4f5d9d94dea61e1ab">value_type</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__iter_1ad5692d361068225ccdc656ff7dec0136">reference</link>;
950 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__iter_1abe7bc4462b0b75a4f5d9d94dea61e1ab">value_type</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__iter_1aab31cac89ecb83fed647cc228250f260">const_reference</link>;
951 
952 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__iter_1a8bc377e7651c32a64f60868ed43d91e5">_Node_iter</link>(node_pointer&#32;p_nd&#32;=&#32;0,&#32;a_const_pointer&#32;p_traits&#32;=&#32;0)
953 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">base_type</link>(p_nd,&#32;p_traits)
954 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
955 
957 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__iter_1ad5692d361068225ccdc656ff7dec0136">reference</link>
958 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__iter_1a575ff0f4d10725779405d8e83dc27463">operator*</link>()<emphasis role="keyword">&#32;const</emphasis>
959 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
960 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a78db74c5de3cfff1de97561e5d530147">base_type::num_children</link>()&#32;==&#32;0);
961 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a1e2565b7a9141ab9b2d782f343e92b4a">base_type::m_p_nd</link>);
962 &#32;&#32;&#32;&#32;&#32;&#32;}
963 
965 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__iter">_Node_iter</link>
966 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__iter_1ae5f9f072a56d4c9319d79bd6efb2cdcb">get_child</link>(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__iter_1af8f984af078fd7a7066f26760a890d0e">size_type</link>&#32;i)<emphasis role="keyword">&#32;const</emphasis>
967 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
968 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a1e2565b7a9141ab9b2d782f343e92b4a">base_type::m_p_nd</link>-&gt;m_type&#32;==&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1pat__trie__base_1a3df5e43907830910e3ce34d411088940af82e3e28a410ab34155ddc878c883a1b">i_node</link>);
969 
970 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;Inode::iterator&#32;it&#32;=
971 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>inode_pointer<emphasis role="keyword">&gt;</emphasis>(<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a1e2565b7a9141ab9b2d782f343e92b4a">base_type::m_p_nd</link>)-&gt;begin();
972 
973 &#32;&#32;&#32;&#32;std::advance(it,&#32;i);
974 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__iter">_Node_iter</link>(*it,&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1aed70db3de953a06f7c8fd45bd5610ab6">base_type::m_p_traits</link>);
975 &#32;&#32;&#32;&#32;&#32;&#32;}
976 &#32;&#32;&#32;&#32;};
977 &#32;&#32;&#32;&#32;};
978 
979 
980 <emphasis role="preprocessor">#define&#32;PB_DS_CLASS_T_DEC&#32;\</emphasis>
981 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;typename&#32;_ATraits,&#32;typename&#32;Metadata&gt;</emphasis>
982 
983 <emphasis role="preprocessor">#define&#32;PB_DS_CLASS_C_DEC&#32;\</emphasis>
984 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;pat_trie_base::_Inode&lt;_ATraits,&#32;Metadata&gt;</emphasis>
985 
986 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
987 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::__rebind_l
988 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::s_leaf_alloc;
989 
990 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
991 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::__rebind_in
992 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::s_inode_alloc;
993 
994 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
995 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::size_type
996 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
997 &#32;&#32;&#32;&#32;get_pref_pos(a_const_iterator&#32;b_it,&#32;a_const_iterator&#32;e_it,
998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;a_const_pointer&#32;p_traits)<emphasis role="keyword">&#32;const</emphasis>
999 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
1000 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(std::distance(b_it,&#32;e_it))&#32;&lt;=&#32;m_e_ind)
1001 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
1002 &#32;&#32;&#32;&#32;&#32;&#32;std::advance(b_it,&#32;m_e_ind);
1003 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1&#32;+&#32;p_traits-&gt;e_pos(*b_it);
1004 &#32;&#32;&#32;&#32;}
1005 
1006 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
1007 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
1008 &#32;&#32;&#32;&#32;_Inode(size_type&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;a_const_iterator&#32;it)
1009 &#32;&#32;&#32;&#32;:&#32;base_type(i_node),&#32;m_e_ind(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>),&#32;m_pref_b_it(it),&#32;m_pref_e_it(it)
1010 &#32;&#32;&#32;&#32;{
1011 &#32;&#32;&#32;&#32;&#32;&#32;std::advance(m_pref_e_it,&#32;m_e_ind);
1012 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a9042ae744521b1770e868813f939b4b7">std::fill</link>(m_a_p_children,&#32;m_a_p_children&#32;+&#32;arr_size,
1013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>node_pointer<emphasis role="keyword">&gt;</emphasis>(0));
1014 &#32;&#32;&#32;&#32;}
1015 
1016 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie__base_8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
1017 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1018 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
1019 &#32;&#32;&#32;&#32;update_prefixes(a_const_pointer&#32;p_traits)
1020 &#32;&#32;&#32;&#32;{
1021 &#32;&#32;&#32;&#32;&#32;&#32;node_pointer&#32;p_first&#32;=&#32;*<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>();
1022 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_first-&gt;m_type&#32;==&#32;leaf_node)
1023 &#32;&#32;&#32;&#32;{
1024 &#32;&#32;&#32;&#32;&#32;&#32;leaf_const_pointer&#32;p&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>leaf_const_pointer<emphasis role="keyword">&gt;</emphasis>(p_first);
1025 &#32;&#32;&#32;&#32;&#32;&#32;m_pref_b_it&#32;=&#32;p_traits-&gt;begin(access_traits::extract_key(p-&gt;value()));
1026 &#32;&#32;&#32;&#32;}
1027 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1028 &#32;&#32;&#32;&#32;{
1029 &#32;&#32;&#32;&#32;&#32;&#32;inode_pointer&#32;p&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>inode_pointer<emphasis role="keyword">&gt;</emphasis>(p_first);
1030 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_first-&gt;m_type&#32;==&#32;i_node);
1031 &#32;&#32;&#32;&#32;&#32;&#32;m_pref_b_it&#32;=&#32;p-&gt;pref_b_it();
1032 &#32;&#32;&#32;&#32;}
1033 &#32;&#32;&#32;&#32;&#32;&#32;m_pref_e_it&#32;=&#32;m_pref_b_it;
1034 &#32;&#32;&#32;&#32;&#32;&#32;std::advance(m_pref_e_it,&#32;m_e_ind);
1035 &#32;&#32;&#32;&#32;}
1036 
1037 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie__base_8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
1038 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::const_iterator
1039 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
1040 &#32;&#32;&#32;&#32;begin()<emphasis role="keyword">&#32;const</emphasis>
1041 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
1042 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;node_pointer_pointer&#32;pointer_type;
1043 &#32;&#32;&#32;&#32;&#32;&#32;pointer_type&#32;p&#32;=&#32;<emphasis role="keyword">const_cast&lt;</emphasis>pointer_type<emphasis role="keyword">&gt;</emphasis>(m_a_p_children);
1044 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(p&#32;+&#32;get_begin_pos(),&#32;p&#32;+&#32;arr_size);
1045 &#32;&#32;&#32;&#32;}
1046 
1047 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie__base_8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
1048 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::iterator
1049 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
1050 &#32;&#32;&#32;&#32;begin()
1051 &#32;&#32;&#32;&#32;{
1052 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(m_a_p_children&#32;+&#32;get_begin_pos(),
1053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_a_p_children&#32;+&#32;arr_size);
1054 &#32;&#32;&#32;&#32;}
1055 
1056 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie__base_8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
1057 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::const_iterator
1058 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
1059 &#32;&#32;&#32;&#32;end()<emphasis role="keyword">&#32;const</emphasis>
1060 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
1061 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;node_pointer_pointer&#32;pointer_type;
1062 &#32;&#32;&#32;&#32;&#32;&#32;pointer_type&#32;p&#32;=&#32;<emphasis role="keyword">const_cast&lt;</emphasis>pointer_type<emphasis role="keyword">&gt;</emphasis>(m_a_p_children)&#32;+&#32;arr_size;
1063 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(p,&#32;p);
1064 &#32;&#32;&#32;&#32;}
1065 
1066 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie__base_8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
1067 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::iterator
1068 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
1069 &#32;&#32;&#32;&#32;end()
1070 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(m_a_p_children&#32;+&#32;arr_size,&#32;m_a_p_children&#32;+&#32;arr_size);&#32;}
1071 
1072 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie__base_8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
1073 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::node_pointer
1074 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
1075 &#32;&#32;&#32;&#32;get_child_node(a_const_iterator&#32;b_it,&#32;a_const_iterator&#32;e_it,
1076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;a_const_pointer&#32;p_traits)
1077 &#32;&#32;&#32;&#32;{
1078 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;i&#32;=&#32;get_pref_pos(b_it,&#32;e_it,&#32;p_traits);
1079 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(i&#32;&lt;&#32;arr_size);
1080 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_a_p_children[i];
1081 &#32;&#32;&#32;&#32;}
1082 
1083 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie__base_8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
1084 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::iterator
1085 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
1086 &#32;&#32;&#32;&#32;get_child_it(a_const_iterator&#32;b_it,&#32;a_const_iterator&#32;e_it,
1087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;a_const_pointer&#32;p_traits)
1088 &#32;&#32;&#32;&#32;{
1089 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;i&#32;=&#32;get_pref_pos(b_it,&#32;e_it,&#32;p_traits);
1090 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(i&#32;&lt;&#32;arr_size);
1091 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(m_a_p_children[i]&#32;!=&#32;0);
1092 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(m_a_p_children&#32;+&#32;i,&#32;m_a_p_children&#32;+&#32;i);
1093 &#32;&#32;&#32;&#32;}
1094 
1095 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie__base_8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
1096 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::node_const_pointer
1097 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
1098 &#32;&#32;&#32;&#32;get_child_node(a_const_iterator&#32;b_it,&#32;a_const_iterator&#32;e_it,
1099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;a_const_pointer&#32;p_traits)<emphasis role="keyword">&#32;const</emphasis>
1100 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">const_cast&lt;</emphasis>node_pointer<emphasis role="keyword">&gt;</emphasis>(get_child_node(b_it,&#32;e_it,&#32;p_traits));&#32;}
1101 
1102 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie__base_8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
1103 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::node_pointer
1104 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
1105 &#32;&#32;&#32;&#32;get_lower_bound_child_node(a_const_iterator&#32;b_it,&#32;a_const_iterator&#32;e_it,
1106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;checked_ind,
1107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;a_const_pointer&#32;p_traits)
1108 &#32;&#32;&#32;&#32;{
1109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!should_be_mine(b_it,&#32;e_it,&#32;checked_ind,&#32;p_traits))
1110 &#32;&#32;&#32;&#32;{
1111 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_traits-&gt;cmp_prefixes(b_it,&#32;e_it,&#32;m_pref_b_it,
1112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_pref_e_it,&#32;<emphasis role="keyword">true</emphasis>))
1113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;leftmost_descendant();
1114 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;rightmost_descendant();
1115 &#32;&#32;&#32;&#32;}
1116 
1117 &#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;i&#32;=&#32;get_pref_pos(b_it,&#32;e_it,&#32;p_traits);
1118 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(i&#32;&lt;&#32;arr_size);
1119 
1120 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_a_p_children[i]&#32;!=&#32;0)
1121 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_a_p_children[i];
1122 
1123 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(++i&#32;&lt;&#32;arr_size)
1124 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_a_p_children[i]&#32;!=&#32;0)
1125 &#32;&#32;&#32;&#32;&#32;&#32;{
1126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;node_type&amp;&#32;__nt&#32;=&#32;m_a_p_children[i]-&gt;m_type;
1127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node_pointer&#32;ret&#32;=&#32;m_a_p_children[i];
1128 
1129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__nt&#32;==&#32;leaf_node)
1130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
1131 
1132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(__nt&#32;==&#32;i_node);
1133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inode_pointer&#32;inp&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>inode_pointer<emphasis role="keyword">&gt;</emphasis>(ret);
1134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;inp-&gt;leftmost_descendant();
1135 &#32;&#32;&#32;&#32;&#32;&#32;}
1136 
1137 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;rightmost_descendant();
1138 &#32;&#32;&#32;&#32;}
1139 
1140 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie__base_8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
1141 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::node_pointer
1142 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
1143 &#32;&#32;&#32;&#32;add_child(node_pointer&#32;p_nd,&#32;a_const_iterator&#32;b_it,&#32;a_const_iterator&#32;e_it,
1144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;a_const_pointer&#32;p_traits)
1145 &#32;&#32;&#32;&#32;{
1146 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;i&#32;=&#32;get_pref_pos(b_it,&#32;e_it,&#32;p_traits);
1147 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(i&#32;&lt;&#32;arr_size);
1148 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_a_p_children[i]&#32;==&#32;0)
1149 &#32;&#32;&#32;&#32;{
1150 &#32;&#32;&#32;&#32;&#32;&#32;m_a_p_children[i]&#32;=&#32;p_nd;
1151 &#32;&#32;&#32;&#32;&#32;&#32;p_nd-&gt;m_p_parent&#32;=&#32;<emphasis role="keyword">this</emphasis>;
1152 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p_nd;
1153 &#32;&#32;&#32;&#32;}
1154 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_a_p_children[i];
1155 &#32;&#32;&#32;&#32;}
1156 
1157 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie__base_8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
1158 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::node_const_pointer
1159 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
1160 &#32;&#32;&#32;&#32;get_join_child(node_const_pointer&#32;p_nd,
1161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;a_const_pointer&#32;p_tr)<emphasis role="keyword">&#32;const</emphasis>
1162 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
1163 &#32;&#32;&#32;&#32;&#32;&#32;node_pointer&#32;p&#32;=&#32;<emphasis role="keyword">const_cast&lt;</emphasis>node_pointer<emphasis role="keyword">&gt;</emphasis>(p_nd);
1164 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">const_cast&lt;</emphasis>inode_pointer<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>)-&gt;get_join_child(p,&#32;p_tr);
1165 &#32;&#32;&#32;&#32;}
1166 
1167 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie__base_8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
1168 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::node_pointer
1169 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
1170 &#32;&#32;&#32;&#32;get_join_child(node_pointer&#32;p_nd,&#32;a_const_pointer&#32;p_traits)
1171 &#32;&#32;&#32;&#32;{
1172 &#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;i;
1173 &#32;&#32;&#32;&#32;&#32;&#32;a_const_iterator&#32;b_it;
1174 &#32;&#32;&#32;&#32;&#32;&#32;a_const_iterator&#32;e_it;
1175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_nd-&gt;m_type&#32;==&#32;leaf_node)
1176 &#32;&#32;&#32;&#32;{
1177 &#32;&#32;&#32;&#32;&#32;&#32;leaf_const_pointer&#32;p&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>leaf_const_pointer<emphasis role="keyword">&gt;</emphasis>(p_nd);
1178 
1179 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;type_traits::key_const_reference&#32;kcr;
1180 &#32;&#32;&#32;&#32;&#32;&#32;kcr&#32;r_key&#32;=&#32;access_traits::extract_key(p-&gt;value());
1181 &#32;&#32;&#32;&#32;&#32;&#32;b_it&#32;=&#32;p_traits-&gt;begin(r_key);
1182 &#32;&#32;&#32;&#32;&#32;&#32;e_it&#32;=&#32;p_traits-&gt;end(r_key);
1183 &#32;&#32;&#32;&#32;}
1184 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1185 &#32;&#32;&#32;&#32;{
1186 &#32;&#32;&#32;&#32;&#32;&#32;b_it&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>inode_pointer<emphasis role="keyword">&gt;</emphasis>(p_nd)-&gt;pref_b_it();
1187 &#32;&#32;&#32;&#32;&#32;&#32;e_it&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>inode_pointer<emphasis role="keyword">&gt;</emphasis>(p_nd)-&gt;pref_e_it();
1188 &#32;&#32;&#32;&#32;}
1189 &#32;&#32;&#32;&#32;&#32;&#32;i&#32;=&#32;get_pref_pos(b_it,&#32;e_it,&#32;p_traits);
1190 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(i&#32;&lt;&#32;arr_size);
1191 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_a_p_children[i];
1192 &#32;&#32;&#32;&#32;}
1193 
1194 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie__base_8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
1195 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1196 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
1197 &#32;&#32;&#32;&#32;remove_child(node_pointer&#32;p_nd)
1198 &#32;&#32;&#32;&#32;{
1199 &#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;i&#32;=&#32;0;
1200 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;i&#32;&lt;&#32;arr_size;&#32;++i)
1201 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_a_p_children[i]&#32;==&#32;p_nd)
1202 &#32;&#32;&#32;&#32;&#32;&#32;{
1203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_a_p_children[i]&#32;=&#32;0;
1204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
1205 &#32;&#32;&#32;&#32;&#32;&#32;}
1206 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(i&#32;!=&#32;arr_size);
1207 &#32;&#32;&#32;&#32;}
1208 
1209 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie__base_8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
1210 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1211 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
1212 &#32;&#32;&#32;&#32;remove_child(iterator&#32;it)
1213 &#32;&#32;&#32;&#32;{&#32;*it.m_p_p_cur&#32;=&#32;0;&#32;}
1214 
1215 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie__base_8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
1216 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1217 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
1218 &#32;&#32;&#32;&#32;replace_child(node_pointer&#32;p_nd,&#32;a_const_iterator&#32;b_it,
1219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;a_const_iterator&#32;e_it,
1220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;a_const_pointer&#32;p_traits)
1221 &#32;&#32;&#32;&#32;{
1222 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;i&#32;=&#32;get_pref_pos(b_it,&#32;e_it,&#32;p_traits);
1223 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(i&#32;&lt;&#32;arr_size);
1224 &#32;&#32;&#32;&#32;&#32;&#32;m_a_p_children[i]&#32;=&#32;p_nd;
1225 &#32;&#32;&#32;&#32;&#32;&#32;p_nd-&gt;m_p_parent&#32;=&#32;<emphasis role="keyword">this</emphasis>;
1226 &#32;&#32;&#32;&#32;}
1227 
1228 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie__base_8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
1229 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::a_const_iterator
1230 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
1231 &#32;&#32;&#32;&#32;pref_b_it()<emphasis role="keyword">&#32;const</emphasis>
1232 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_pref_b_it;&#32;}
1233 
1234 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie__base_8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
1235 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::a_const_iterator
1236 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
1237 &#32;&#32;&#32;&#32;pref_e_it()<emphasis role="keyword">&#32;const</emphasis>
1238 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_pref_e_it;&#32;}
1239 
1240 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie__base_8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
1241 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1242 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
1243 &#32;&#32;&#32;&#32;should_be_mine(a_const_iterator&#32;b_it,&#32;a_const_iterator&#32;e_it,
1244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;checked_ind,
1245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;a_const_pointer&#32;p_traits)<emphasis role="keyword">&#32;const</emphasis>
1246 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
1247 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_e_ind&#32;==&#32;0)
1248 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
1249 
1250 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;num_es&#32;=&#32;std::distance(b_it,&#32;e_it);
1251 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(num_es&#32;&lt;&#32;m_e_ind)
1252 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1253 
1254 &#32;&#32;&#32;&#32;&#32;&#32;a_const_iterator&#32;key_b_it&#32;=&#32;b_it;
1255 &#32;&#32;&#32;&#32;&#32;&#32;std::advance(key_b_it,&#32;checked_ind);
1256 &#32;&#32;&#32;&#32;&#32;&#32;a_const_iterator&#32;key_e_it&#32;=&#32;b_it;
1257 &#32;&#32;&#32;&#32;&#32;&#32;std::advance(key_e_it,&#32;m_e_ind);
1258 
1259 &#32;&#32;&#32;&#32;&#32;&#32;a_const_iterator&#32;value_b_it&#32;=&#32;m_pref_b_it;
1260 &#32;&#32;&#32;&#32;&#32;&#32;std::advance(value_b_it,&#32;checked_ind);
1261 &#32;&#32;&#32;&#32;&#32;&#32;a_const_iterator&#32;value_e_it&#32;=&#32;m_pref_b_it;
1262 &#32;&#32;&#32;&#32;&#32;&#32;std::advance(value_e_it,&#32;m_e_ind);
1263 
1264 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p_traits-&gt;equal_prefixes(key_b_it,&#32;key_e_it,&#32;value_b_it,
1265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_e_it);
1266 &#32;&#32;&#32;&#32;}
1267 
1268 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie__base_8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
1269 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::leaf_pointer
1270 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
1271 &#32;&#32;&#32;&#32;leftmost_descendant()
1272 &#32;&#32;&#32;&#32;{
1273 &#32;&#32;&#32;&#32;&#32;&#32;node_pointer&#32;p_pot&#32;=&#32;*<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>();
1274 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_pot-&gt;m_type&#32;==&#32;leaf_node)
1275 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keyword">static_cast&lt;</emphasis>leaf_pointer<emphasis role="keyword">&gt;</emphasis>(p_pot));
1276 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_pot-&gt;m_type&#32;==&#32;i_node);
1277 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>inode_pointer<emphasis role="keyword">&gt;</emphasis>(p_pot)-&gt;leftmost_descendant();
1278 &#32;&#32;&#32;&#32;}
1279 
1280 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie__base_8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
1281 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::leaf_const_pointer
1282 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
1283 &#32;&#32;&#32;&#32;leftmost_descendant()<emphasis role="keyword">&#32;const</emphasis>
1284 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">const_cast&lt;</emphasis>inode_pointer<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>)-&gt;leftmost_descendant();&#32;}
1285 
1286 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie__base_8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
1287 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::leaf_pointer
1288 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
1289 &#32;&#32;&#32;&#32;rightmost_descendant()
1290 &#32;&#32;&#32;&#32;{
1291 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;num_children&#32;=&#32;std::distance(<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>(),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());
1292 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(num_children&#32;&gt;=&#32;2);
1293 
1294 &#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;it&#32;=&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>();
1295 &#32;&#32;&#32;&#32;&#32;&#32;std::advance(it,&#32;num_children&#32;-&#32;1);
1296 &#32;&#32;&#32;&#32;&#32;&#32;node_pointer&#32;p_pot&#32;=*&#32;it;
1297 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_pot-&gt;m_type&#32;==&#32;leaf_node)
1298 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>leaf_pointer<emphasis role="keyword">&gt;</emphasis>(p_pot);
1299 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_pot-&gt;m_type&#32;==&#32;i_node);
1300 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>inode_pointer<emphasis role="keyword">&gt;</emphasis>(p_pot)-&gt;rightmost_descendant();
1301 &#32;&#32;&#32;&#32;}
1302 
1303 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie__base_8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
1304 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::leaf_const_pointer
1305 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
1306 &#32;&#32;&#32;&#32;rightmost_descendant()<emphasis role="keyword">&#32;const</emphasis>
1307 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">const_cast&lt;</emphasis>inode_pointer<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>)-&gt;rightmost_descendant();&#32;}
1308 
1309 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie__base_8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
1310 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::size_type
1311 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
1312 &#32;&#32;&#32;&#32;get_begin_pos()<emphasis role="keyword">&#32;const</emphasis>
1313 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
1314 &#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;i&#32;=&#32;0;
1315 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;i&#32;&lt;&#32;arr_size&#32;&amp;&amp;&#32;m_a_p_children[i]&#32;==&#32;0;&#32;++i)
1316 &#32;&#32;&#32;&#32;;
1317 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;i;
1318 &#32;&#32;&#32;&#32;}
1319 
1320 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_DEBUG</emphasis>
1321 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie__base_8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
1322 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::node_debug_info
1323 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
1324 &#32;&#32;&#32;&#32;assert_valid_imp(a_const_pointer&#32;p_traits,
1325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__file,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__line)<emphasis role="keyword">&#32;const</emphasis>
1326 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
1327 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1a60a4cde43600043cf4bcfa1ecd9f5e44">PB_DS_DEBUG_VERIFY</link>(base_type::m_type&#32;==&#32;i_node);
1328 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1a60a4cde43600043cf4bcfa1ecd9f5e44">PB_DS_DEBUG_VERIFY</link>(<emphasis role="keyword">static_cast&lt;</emphasis>size_type<emphasis role="keyword">&gt;</emphasis>(std::distance(pref_b_it(),&#32;pref_e_it()))&#32;==&#32;m_e_ind);
1329 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1a60a4cde43600043cf4bcfa1ecd9f5e44">PB_DS_DEBUG_VERIFY</link>(std::distance(<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>(),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>())&#32;&gt;=&#32;2);
1330 
1331 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">typename</emphasis>&#32;_Inode::const_iterator&#32;it&#32;=&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>();&#32;it&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();&#32;++it)
1332 &#32;&#32;&#32;&#32;{
1333 &#32;&#32;&#32;&#32;&#32;&#32;node_const_pointer&#32;p_nd&#32;=&#32;*it;
1334 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1a60a4cde43600043cf4bcfa1ecd9f5e44">PB_DS_DEBUG_VERIFY</link>(p_nd-&gt;m_p_parent&#32;==&#32;<emphasis role="keyword">this</emphasis>);
1335 &#32;&#32;&#32;&#32;&#32;&#32;node_debug_info&#32;child_ret&#32;=&#32;p_nd-&gt;assert_valid_imp(p_traits,
1336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__file,&#32;__line);
1337 
1338 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1a60a4cde43600043cf4bcfa1ecd9f5e44">PB_DS_DEBUG_VERIFY</link>(<emphasis role="keyword">static_cast&lt;</emphasis>size_type<emphasis role="keyword">&gt;</emphasis>(std::distance(child_ret.first,&#32;child_ret.second))&#32;&gt;=&#32;m_e_ind);
1339 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1a60a4cde43600043cf4bcfa1ecd9f5e44">PB_DS_DEBUG_VERIFY</link>(should_be_mine(child_ret.first,&#32;child_ret.second,&#32;0,&#32;p_traits));
1340 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1a60a4cde43600043cf4bcfa1ecd9f5e44">PB_DS_DEBUG_VERIFY</link>(get_pref_pos(child_ret.first,&#32;child_ret.second,&#32;p_traits)&#32;==&#32;<emphasis role="keyword">static_cast&lt;</emphasis>size_type<emphasis role="keyword">&gt;</emphasis>(it.m_p_p_cur&#32;-&#32;m_a_p_children));
1341 &#32;&#32;&#32;&#32;}
1342 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(pref_b_it(),&#32;pref_e_it());
1343 &#32;&#32;&#32;&#32;}
1344 <emphasis role="preprocessor">#endif</emphasis>
1345 
1346 <emphasis role="preprocessor">#undef&#32;PB_DS_CLASS_T_DEC</emphasis>
1347 <emphasis role="preprocessor">#undef&#32;PB_DS_CLASS_C_DEC</emphasis>
1348 &#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
1349 }&#32;<emphasis role="comment">//&#32;namespace&#32;__gnu_pbds</emphasis>
1350 
1351 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
