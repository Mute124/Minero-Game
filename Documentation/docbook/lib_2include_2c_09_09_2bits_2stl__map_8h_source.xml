<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2bits_2stl__map_8h_source" xml:lang="en-US">
<title>stl_map.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/bits/stl_map.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Map&#32;implementation&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2001-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">/*</emphasis>
26 <emphasis role="comment">&#32;*</emphasis>
27 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1994</emphasis>
28 <emphasis role="comment">&#32;*&#32;Hewlett-Packard&#32;Company</emphasis>
29 <emphasis role="comment">&#32;*</emphasis>
30 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
31 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
32 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
33 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
34 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Hewlett-Packard&#32;Company&#32;makes&#32;no</emphasis>
35 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
36 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
37 <emphasis role="comment">&#32;*</emphasis>
38 <emphasis role="comment">&#32;*</emphasis>
39 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1996,1997</emphasis>
40 <emphasis role="comment">&#32;*&#32;Silicon&#32;Graphics&#32;Computer&#32;Systems,&#32;Inc.</emphasis>
41 <emphasis role="comment">&#32;*</emphasis>
42 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
43 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
44 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
45 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
46 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Silicon&#32;Graphics&#32;makes&#32;no</emphasis>
47 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
48 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
49 <emphasis role="comment">&#32;*/</emphasis>
50 
56 <emphasis role="preprocessor">#ifndef&#32;_STL_MAP_H</emphasis>
57 <emphasis role="preprocessor">#define&#32;_STL_MAP_H&#32;1</emphasis>
58 
59 <emphasis role="preprocessor">#include&#32;&lt;bits/functexcept.h&gt;</emphasis>
60 <emphasis role="preprocessor">#include&#32;&lt;bits/concept_check.h&gt;</emphasis>
61 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
62 <emphasis role="preprocessor">#include&#32;&lt;initializer_list&gt;</emphasis>
63 <emphasis role="preprocessor">#include&#32;&lt;tuple&gt;</emphasis>
64 <emphasis role="preprocessor">#endif</emphasis>
65 
66 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
67 {
68 _GLIBCXX_BEGIN_NAMESPACE_VERSION
69 _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
70 
71 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
72 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>multimap;
73 
98 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&#32;=&#32;std::less&lt;_Key&gt;,
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&#32;=&#32;std::allocator&lt;std::pair&lt;const&#32;_Key,&#32;_Tp&gt;&#32;&gt;&#32;&gt;
100 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>map
101 &#32;&#32;&#32;&#32;{
102 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Key&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_type;
104 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mapped_type;
105 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::pair&lt;const&#32;_Key,&#32;_Tp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
106 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Compare&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_compare;
107 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Alloc&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator_type;
108 
109 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
110 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_CONCEPT_CHECKS</emphasis>
111 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
112 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc::value_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Alloc_value_type;
113 <emphasis role="preprocessor">#&#32;if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
114 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ae4dc1beb74b88e6b1215e05c397fc7a2">__glibcxx_class_requires</link>(_Tp,&#32;_SGIAssignableConcept)
115 <emphasis role="preprocessor">#&#32;endif</emphasis>
116 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1a0efeda71d183434752b2df77dde3e72c">__glibcxx_class_requires4</link>(_Compare,&#32;<emphasis role="keywordtype">bool</emphasis>,&#32;_Key,&#32;_Key,
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryFunctionConcept)
118 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ae97aa7f8b95f5fdb311dc98ff0c31c72">__glibcxx_class_requires2</link>(value_type,&#32;_Alloc_value_type,&#32;_SameTypeConcept)
119 <emphasis role="preprocessor">#endif</emphasis>
120 
121 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
122 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L&#32;||&#32;defined&#32;__STRICT_ANSI__</emphasis>
123 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same&lt;typename&#32;_Alloc::value_type,&#32;value_type&gt;::value,
124 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;std::map&#32;must&#32;have&#32;the&#32;same&#32;value_type&#32;as&#32;its&#32;allocator&quot;</emphasis>);
125 <emphasis role="preprocessor">#endif</emphasis>
126 <emphasis role="preprocessor">#endif</emphasis>
127 
128 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
129 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
130 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wdeprecated-declarations&quot;</emphasis>
131 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>value_compare
132 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;std::binary_function&lt;value_type,&#32;value_type,&#32;bool&gt;
133 &#32;&#32;&#32;&#32;&#32;&#32;{
134 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>map&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Alloc&gt;;
135 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
136 &#32;&#32;&#32;&#32;_Compare&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>;
137 
138 &#32;&#32;&#32;&#32;value_compare(_Compare&#32;__c)
139 &#32;&#32;&#32;&#32;:&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>(__c)&#32;{&#32;}
140 
141 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
142 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
143 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>(__x.first,&#32;__y.first);&#32;}
144 &#32;&#32;&#32;&#32;&#32;&#32;};
145 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
146 
147 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
149 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Alloc&gt;::template
150 &#32;&#32;&#32;&#32;rebind&lt;value_type&gt;::other&#32;_Pair_alloc_type;
151 
152 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Rb_tree&lt;key_type,&#32;value_type,&#32;_Select1st&lt;value_type&gt;,
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_compare,&#32;_Pair_alloc_type&gt;&#32;_Rep_type;
154 
156 &#32;&#32;&#32;&#32;&#32;&#32;_Rep_type&#32;_M_t;
157 
158 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Pair_alloc_type&gt;&#32;_Alloc_traits;
159 
160 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
161 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Vp&#32;=&#32;remove_reference_t&lt;_Up&gt;&gt;
162 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__usable_key
163 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__or_v&lt;is_same&lt;const&#32;_Vp,&#32;const&#32;_Key&gt;,
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__and_&lt;is_scalar&lt;_Vp&gt;,&#32;is_scalar&lt;_Key&gt;&gt;&gt;;
165 <emphasis role="preprocessor">#endif</emphasis>
166 
167 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
168 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;many&#32;of&#32;these&#32;are&#32;specified&#32;differently&#32;in&#32;ISO,&#32;but&#32;the&#32;following&#32;are</emphasis>
169 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;functionally&#32;equivalent&quot;</emphasis>
170 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::pointer&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
171 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::const_pointer&#32;&#32;const_pointer;
172 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::reference&#32;&#32;&#32;&#32;&#32;&#32;reference;
173 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::const_reference&#32;&#32;&#32;&#32;const_reference;
174 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep_type::iterator&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator;
175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep_type::const_iterator&#32;&#32;&#32;&#32;&#32;const_iterator;
176 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep_type::size_type&#32;&#32;&#32;&#32;&#32;&#32;size_type;
177 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep_type::difference_type&#32;&#32;&#32;&#32;difference_type;
178 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep_type::reverse_iterator&#32;&#32;&#32;reverse_iterator;
179 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep_type::const_reverse_iterator&#32;const_reverse_iterator;
180 
181 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
182 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>node_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep_type::node_type;
183 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>insert_return_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep_type::insert_return_type;
184 <emphasis role="preprocessor">#endif</emphasis>
185 
186 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[23.3.1.1]&#32;construct/copy/destroy</emphasis>
187 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(get_allocator()&#32;is&#32;also&#32;listed&#32;in&#32;this&#32;section)</emphasis>
188 
192 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
193 &#32;&#32;&#32;&#32;&#32;&#32;map()&#32;:&#32;_M_t()&#32;{&#32;}
194 <emphasis role="preprocessor">#else</emphasis>
195 &#32;&#32;&#32;&#32;&#32;&#32;map()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
196 <emphasis role="preprocessor">#endif</emphasis>
197 
203 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
204 &#32;&#32;&#32;&#32;&#32;&#32;map(<emphasis role="keyword">const</emphasis>&#32;_Compare&amp;&#32;__comp,
205 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
206 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_t(__comp,&#32;_Pair_alloc_type(__a))&#32;{&#32;}
207 
213 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
214 &#32;&#32;&#32;&#32;&#32;&#32;map(<emphasis role="keyword">const</emphasis>&#32;map&amp;&#32;__x)
215 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_t(__x._M_t)&#32;{&#32;}
216 <emphasis role="preprocessor">#else</emphasis>
217 &#32;&#32;&#32;&#32;&#32;&#32;map(<emphasis role="keyword">const</emphasis>&#32;map&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
218 
225 &#32;&#32;&#32;&#32;&#32;&#32;map(map&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
226 
238 &#32;&#32;&#32;&#32;&#32;&#32;map(initializer_list&lt;value_type&gt;&#32;__l,
239 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Compare&amp;&#32;__comp&#32;=&#32;_Compare(),
240 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
241 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_t(__comp,&#32;_Pair_alloc_type(__a))
242 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_t._M_insert_range_unique(__l.begin(),&#32;__l.end());&#32;}
243 
245 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
246 &#32;&#32;&#32;&#32;&#32;&#32;map(<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
247 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_t(_Pair_alloc_type(__a))&#32;{&#32;}
248 
250 &#32;&#32;&#32;&#32;&#32;&#32;map(<emphasis role="keyword">const</emphasis>&#32;map&amp;&#32;__m,&#32;<emphasis role="keyword">const</emphasis>&#32;__type_identity_t&lt;allocator_type&gt;&amp;&#32;__a)
251 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_t(__m._M_t,&#32;_Pair_alloc_type(__a))&#32;{&#32;}
252 
254 &#32;&#32;&#32;&#32;&#32;&#32;map(map&amp;&amp;&#32;__m,&#32;<emphasis role="keyword">const</emphasis>&#32;__type_identity_t&lt;allocator_type&gt;&amp;&#32;__a)
255 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(is_nothrow_copy_constructible&lt;_Compare&gt;::value
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;_Alloc_traits::_S_always_equal())
257 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_t(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__m._M_t),&#32;_Pair_alloc_type(__a))&#32;{&#32;}
258 
260 &#32;&#32;&#32;&#32;&#32;&#32;map(initializer_list&lt;value_type&gt;&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
261 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_t(_Pair_alloc_type(__a))
262 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_t._M_insert_range_unique(__l.begin(),&#32;__l.end());&#32;}
263 
265 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
266 &#32;&#32;&#32;&#32;map(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
268 &#32;&#32;&#32;&#32;:&#32;_M_t(_Pair_alloc_type(__a))
269 &#32;&#32;&#32;&#32;{&#32;_M_t._M_insert_range_unique(__first,&#32;__last);&#32;}
270 <emphasis role="preprocessor">#endif</emphasis>
271 
282 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
283 &#32;&#32;&#32;&#32;map(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
284 &#32;&#32;&#32;&#32;:&#32;_M_t()
285 &#32;&#32;&#32;&#32;{&#32;_M_t._M_insert_range_unique(__first,&#32;__last);&#32;}
286 
299 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
300 &#32;&#32;&#32;&#32;map(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Compare&amp;&#32;__comp,
302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
303 &#32;&#32;&#32;&#32;:&#32;_M_t(__comp,&#32;_Pair_alloc_type(__a))
304 &#32;&#32;&#32;&#32;{&#32;_M_t._M_insert_range_unique(__first,&#32;__last);&#32;}
305 
306 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
312 &#32;&#32;&#32;&#32;&#32;&#32;~map()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
313 <emphasis role="preprocessor">#endif</emphasis>
314 
320 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
321 &#32;&#32;&#32;&#32;&#32;&#32;map&amp;
322 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;map&amp;&#32;__x)
323 &#32;&#32;&#32;&#32;&#32;&#32;{
324 &#32;&#32;&#32;&#32;_M_t&#32;=&#32;__x._M_t;
325 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
326 &#32;&#32;&#32;&#32;&#32;&#32;}
327 <emphasis role="preprocessor">#else</emphasis>
328 &#32;&#32;&#32;&#32;&#32;&#32;map&amp;
329 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;map&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
330 
332 &#32;&#32;&#32;&#32;&#32;&#32;map&amp;
333 &#32;&#32;&#32;&#32;&#32;&#32;operator=(map&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
334 
346 &#32;&#32;&#32;&#32;&#32;&#32;map&amp;
347 &#32;&#32;&#32;&#32;&#32;&#32;operator=(initializer_list&lt;value_type&gt;&#32;__l)
348 &#32;&#32;&#32;&#32;&#32;&#32;{
349 &#32;&#32;&#32;&#32;_M_t._M_assign_unique(__l.begin(),&#32;__l.end());
350 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
351 &#32;&#32;&#32;&#32;&#32;&#32;}
352 <emphasis role="preprocessor">#endif</emphasis>
353 
355 &#32;&#32;&#32;&#32;&#32;&#32;allocator_type
356 &#32;&#32;&#32;&#32;&#32;&#32;get_allocator()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
357 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;allocator_type(_M_t.get_allocator());&#32;}
358 
359 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;iterators</emphasis>
365 &#32;&#32;&#32;&#32;&#32;&#32;iterator
366 &#32;&#32;&#32;&#32;&#32;&#32;begin()&#32;_GLIBCXX_NOEXCEPT
367 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.begin();&#32;}
368 
374 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
375 &#32;&#32;&#32;&#32;&#32;&#32;begin()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
376 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.begin();&#32;}
377 
383 &#32;&#32;&#32;&#32;&#32;&#32;iterator
384 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;_GLIBCXX_NOEXCEPT
385 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.end();&#32;}
386 
392 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
393 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
394 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.end();&#32;}
395 
401 &#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator
402 &#32;&#32;&#32;&#32;&#32;&#32;rbegin()&#32;_GLIBCXX_NOEXCEPT
403 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.rbegin();&#32;}
404 
410 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
411 &#32;&#32;&#32;&#32;&#32;&#32;rbegin()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
412 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.rbegin();&#32;}
413 
419 &#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator
420 &#32;&#32;&#32;&#32;&#32;&#32;rend()&#32;_GLIBCXX_NOEXCEPT
421 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.rend();&#32;}
422 
428 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
429 &#32;&#32;&#32;&#32;&#32;&#32;rend()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
430 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.rend();&#32;}
431 
432 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
438 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
439 &#32;&#32;&#32;&#32;&#32;&#32;cbegin()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
440 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.begin();&#32;}
441 
447 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
448 &#32;&#32;&#32;&#32;&#32;&#32;cend()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
449 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.end();&#32;}
450 
456 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
457 &#32;&#32;&#32;&#32;&#32;&#32;crbegin()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
458 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.rbegin();&#32;}
459 
465 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
466 &#32;&#32;&#32;&#32;&#32;&#32;crend()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
467 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.rend();&#32;}
468 <emphasis role="preprocessor">#endif</emphasis>
469 
470 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;capacity</emphasis>
474 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;<emphasis role="keywordtype">bool</emphasis>
475 &#32;&#32;&#32;&#32;&#32;&#32;empty()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
476 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.empty();&#32;}
477 
479 &#32;&#32;&#32;&#32;&#32;&#32;size_type
480 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
481 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.size();&#32;}
482 
484 &#32;&#32;&#32;&#32;&#32;&#32;size_type
485 &#32;&#32;&#32;&#32;&#32;&#32;max_size()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
486 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.max_size();&#32;}
487 
488 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[23.3.1.2]&#32;element&#32;access</emphasis>
501 &#32;&#32;&#32;&#32;&#32;&#32;mapped_type&amp;
502 &#32;&#32;&#32;&#32;&#32;&#32;operator[](<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__k)
503 &#32;&#32;&#32;&#32;&#32;&#32;{
504 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
505 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_DefaultConstructibleConcept&lt;mapped_type&gt;)
506 
507 &#32;&#32;&#32;&#32;iterator&#32;__i&#32;=&#32;lower_bound(__k);
508 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__i-&gt;first&#32;is&#32;greater&#32;than&#32;or&#32;equivalent&#32;to&#32;__k.</emphasis>
509 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__i&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;||&#32;key_comp()(__k,&#32;(*__i).first))
510 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
511 &#32;&#32;&#32;&#32;&#32;&#32;__i&#32;=&#32;_M_t._M_emplace_hint_unique(__i,&#32;std::piecewise_construct,
512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::tuple&lt;const&#32;key_type&amp;&gt;(__k),
513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::tuple&lt;&gt;());
514 <emphasis role="preprocessor">#else</emphasis>
515 &#32;&#32;&#32;&#32;&#32;&#32;__i&#32;=&#32;insert(__i,&#32;value_type(__k,&#32;mapped_type()));
516 <emphasis role="preprocessor">#endif</emphasis>
517 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*__i).second;
518 &#32;&#32;&#32;&#32;&#32;&#32;}
519 
520 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
521 &#32;&#32;&#32;&#32;&#32;&#32;mapped_type&amp;
522 &#32;&#32;&#32;&#32;&#32;&#32;operator[](key_type&amp;&amp;&#32;__k)
523 &#32;&#32;&#32;&#32;&#32;&#32;{
524 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
525 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_DefaultConstructibleConcept&lt;mapped_type&gt;)
526 
527 &#32;&#32;&#32;&#32;iterator&#32;__i&#32;=&#32;lower_bound(__k);
528 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__i-&gt;first&#32;is&#32;greater&#32;than&#32;or&#32;equivalent&#32;to&#32;__k.</emphasis>
529 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__i&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;||&#32;key_comp()(__k,&#32;(*__i).first))
530 &#32;&#32;&#32;&#32;&#32;&#32;__i&#32;=&#32;_M_t._M_emplace_hint_unique(__i,&#32;std::piecewise_construct,
531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward_as_tuple(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__k)),
532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::tuple&lt;&gt;());
533 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*__i).second;
534 &#32;&#32;&#32;&#32;&#32;&#32;}
535 <emphasis role="preprocessor">#endif</emphasis>
536 
537 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
538 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;DR&#32;464.&#32;Suggestion&#32;for&#32;new&#32;member&#32;functions&#32;in&#32;standard&#32;containers.</emphasis>
546 &#32;&#32;&#32;&#32;&#32;&#32;mapped_type&amp;
547 &#32;&#32;&#32;&#32;&#32;&#32;at(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__k)
548 &#32;&#32;&#32;&#32;&#32;&#32;{
549 &#32;&#32;&#32;&#32;iterator&#32;__i&#32;=&#32;lower_bound(__k);
550 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__i&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;||&#32;key_comp()(__k,&#32;(*__i).first))
551 &#32;&#32;&#32;&#32;&#32;&#32;__throw_out_of_range(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ad90b1fa000da1666f104c4dd9c0d7f9b">__N</link>(<emphasis role="stringliteral">&quot;map::at&quot;</emphasis>));
552 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*__i).second;
553 &#32;&#32;&#32;&#32;&#32;&#32;}
554 
555 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;mapped_type&amp;
556 &#32;&#32;&#32;&#32;&#32;&#32;at(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__k)<emphasis role="keyword">&#32;const</emphasis>
557 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
558 &#32;&#32;&#32;&#32;const_iterator&#32;__i&#32;=&#32;lower_bound(__k);
559 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__i&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;||&#32;key_comp()(__k,&#32;(*__i).first))
560 &#32;&#32;&#32;&#32;&#32;&#32;__throw_out_of_range(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ad90b1fa000da1666f104c4dd9c0d7f9b">__N</link>(<emphasis role="stringliteral">&quot;map::at&quot;</emphasis>));
561 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*__i).second;
562 &#32;&#32;&#32;&#32;&#32;&#32;}
563 
564 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;modifiers</emphasis>
565 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
584 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
585 &#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;bool&gt;
586 &#32;&#32;&#32;&#32;emplace(_Args&amp;&amp;...&#32;__args)
587 &#32;&#32;&#32;&#32;{
588 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
589 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>...(_Args)&#32;==&#32;2)
590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;allocator_type,&#32;allocator&lt;value_type&gt;&gt;)
591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;[__a,&#32;__v]&#32;=&#32;pair&lt;_Args&amp;...&gt;(__args...);
593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__usable_key&lt;<emphasis role="keyword">decltype</emphasis>(__a)&gt;)
594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__k&#32;=&#32;__a;
596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;__i&#32;=&#32;lower_bound(__k);
597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__i&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;||&#32;key_comp()(__k,&#32;(*__i).first))
598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__i&#32;=&#32;emplace_hint(__i,&#32;std::forward&lt;_Args&gt;(__args)...);
600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__i,&#32;<emphasis role="keyword">true</emphasis>};
601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__i,&#32;<emphasis role="keyword">false</emphasis>};
603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
605 <emphasis role="preprocessor">#endif</emphasis>
606 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_emplace_unique(std::forward&lt;_Args&gt;(__args)...);
607 &#32;&#32;&#32;&#32;}
608 
634 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
635 &#32;&#32;&#32;&#32;iterator
636 &#32;&#32;&#32;&#32;emplace_hint(const_iterator&#32;__pos,&#32;_Args&amp;&amp;...&#32;__args)
637 &#32;&#32;&#32;&#32;{
638 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_emplace_hint_unique(__pos,
639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Args&gt;(__args)...);
640 &#32;&#32;&#32;&#32;}
641 <emphasis role="preprocessor">#endif</emphasis>
642 
643 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
645 &#32;&#32;&#32;&#32;&#32;&#32;node_type
646 &#32;&#32;&#32;&#32;&#32;&#32;extract(const_iterator&#32;__pos)
647 &#32;&#32;&#32;&#32;&#32;&#32;{
648 &#32;&#32;&#32;&#32;__glibcxx_assert(__pos&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());
649 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.extract(__pos);
650 &#32;&#32;&#32;&#32;&#32;&#32;}
651 
653 &#32;&#32;&#32;&#32;&#32;&#32;node_type
654 &#32;&#32;&#32;&#32;&#32;&#32;extract(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
655 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.extract(__x);&#32;}
656 
658 &#32;&#32;&#32;&#32;&#32;&#32;insert_return_type
659 &#32;&#32;&#32;&#32;&#32;&#32;insert(node_type&amp;&amp;&#32;__nh)
660 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_reinsert_node_unique(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__nh));&#32;}
661 
663 &#32;&#32;&#32;&#32;&#32;&#32;iterator
664 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__hint,&#32;node_type&amp;&amp;&#32;__nh)
665 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_reinsert_node_hint_unique(__hint,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__nh));&#32;}
666 
667 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>&gt;
668 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>std::_Rb_tree_merge_helper;
669 
670 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Cmp2&gt;
671 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
672 &#32;&#32;&#32;&#32;merge(map&lt;_Key,&#32;_Tp,&#32;_Cmp2,&#32;_Alloc&gt;&amp;&#32;__source)
673 &#32;&#32;&#32;&#32;{
674 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Merge_helper&#32;=&#32;_Rb_tree_merge_helper&lt;map,&#32;_Cmp2&gt;;
675 &#32;&#32;&#32;&#32;&#32;&#32;_M_t._M_merge_unique(_Merge_helper::_S_get_tree(__source));
676 &#32;&#32;&#32;&#32;}
677 
678 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Cmp2&gt;
679 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
680 &#32;&#32;&#32;&#32;merge(map&lt;_Key,&#32;_Tp,&#32;_Cmp2,&#32;_Alloc&gt;&amp;&amp;&#32;__source)
681 &#32;&#32;&#32;&#32;{&#32;merge(__source);&#32;}
682 
683 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Cmp2&gt;
684 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
685 &#32;&#32;&#32;&#32;merge(multimap&lt;_Key,&#32;_Tp,&#32;_Cmp2,&#32;_Alloc&gt;&amp;&#32;__source)
686 &#32;&#32;&#32;&#32;{
687 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Merge_helper&#32;=&#32;_Rb_tree_merge_helper&lt;map,&#32;_Cmp2&gt;;
688 &#32;&#32;&#32;&#32;&#32;&#32;_M_t._M_merge_unique(_Merge_helper::_S_get_tree(__source));
689 &#32;&#32;&#32;&#32;}
690 
691 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Cmp2&gt;
692 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
693 &#32;&#32;&#32;&#32;merge(multimap&lt;_Key,&#32;_Tp,&#32;_Cmp2,&#32;_Alloc&gt;&amp;&amp;&#32;__source)
694 &#32;&#32;&#32;&#32;{&#32;merge(__source);&#32;}
695 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
696 
697 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
698 <emphasis role="preprocessor">#define&#32;__cpp_lib_map_try_emplace&#32;201411L</emphasis>
719 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
720 &#32;&#32;&#32;&#32;pair&lt;iterator,&#32;bool&gt;
721 &#32;&#32;&#32;&#32;try_emplace(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__k,&#32;_Args&amp;&amp;...&#32;__args)
722 &#32;&#32;&#32;&#32;{
723 &#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;__i&#32;=&#32;lower_bound(__k);
724 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__i&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;||&#32;key_comp()(__k,&#32;(*__i).first))
725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__i&#32;=&#32;emplace_hint(__i,&#32;std::piecewise_construct,
727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward_as_tuple(__k),
728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward_as_tuple(
729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Args&gt;(__args)...));
730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__i,&#32;<emphasis role="keyword">true</emphasis>};
731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
732 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__i,&#32;<emphasis role="keyword">false</emphasis>};
733 &#32;&#32;&#32;&#32;}
734 
735 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;move-capable&#32;overload</emphasis>
736 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
737 &#32;&#32;&#32;&#32;pair&lt;iterator,&#32;bool&gt;
738 &#32;&#32;&#32;&#32;try_emplace(key_type&amp;&amp;&#32;__k,&#32;_Args&amp;&amp;...&#32;__args)
739 &#32;&#32;&#32;&#32;{
740 &#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;__i&#32;=&#32;lower_bound(__k);
741 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__i&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;||&#32;key_comp()(__k,&#32;(*__i).first))
742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__i&#32;=&#32;emplace_hint(__i,&#32;std::piecewise_construct,
744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward_as_tuple(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__k)),
745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward_as_tuple(
746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Args&gt;(__args)...));
747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__i,&#32;<emphasis role="keyword">true</emphasis>};
748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
749 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__i,&#32;<emphasis role="keyword">false</emphasis>};
750 &#32;&#32;&#32;&#32;}
751 
779 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
780 &#32;&#32;&#32;&#32;iterator
781 &#32;&#32;&#32;&#32;try_emplace(const_iterator&#32;__hint,&#32;<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__k,
782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Args&amp;&amp;...&#32;__args)
783 &#32;&#32;&#32;&#32;{
784 &#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;__i;
785 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__true_hint&#32;=&#32;_M_t._M_get_insert_hint_unique_pos(__hint,&#32;__k);
786 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__true_hint.second)
787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__i&#32;=&#32;emplace_hint(iterator(__true_hint.second),
788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::piecewise_construct,
789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward_as_tuple(__k),
790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward_as_tuple(
791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Args&gt;(__args)...));
792 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__i&#32;=&#32;iterator(__true_hint.first);
794 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__i;
795 &#32;&#32;&#32;&#32;}
796 
797 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;move-capable&#32;overload</emphasis>
798 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
799 &#32;&#32;&#32;&#32;iterator
800 &#32;&#32;&#32;&#32;try_emplace(const_iterator&#32;__hint,&#32;key_type&amp;&amp;&#32;__k,&#32;_Args&amp;&amp;...&#32;__args)
801 &#32;&#32;&#32;&#32;{
802 &#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;__i;
803 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__true_hint&#32;=&#32;_M_t._M_get_insert_hint_unique_pos(__hint,&#32;__k);
804 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__true_hint.second)
805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__i&#32;=&#32;emplace_hint(iterator(__true_hint.second),
806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::piecewise_construct,
807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward_as_tuple(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__k)),
808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward_as_tuple(
809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Args&gt;(__args)...));
810 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__i&#32;=&#32;iterator(__true_hint.first);
812 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__i;
813 &#32;&#32;&#32;&#32;}
814 <emphasis role="preprocessor">#endif</emphasis>
815 
832 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;bool&gt;
833 &#32;&#32;&#32;&#32;&#32;&#32;insert(<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
834 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_insert_unique(__x);&#32;}
835 
836 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
837 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
838 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2354.&#32;Unnecessary&#32;copying&#32;when&#32;inserting&#32;into&#32;maps&#32;with&#32;braced-init</emphasis>
839 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;bool&gt;
840 &#32;&#32;&#32;&#32;&#32;&#32;insert(value_type&amp;&amp;&#32;__x)
841 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_insert_unique(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x));&#32;}
842 
843 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Pair&gt;
844 &#32;&#32;&#32;&#32;__enable_if_t&lt;is_constructible&lt;value_type,&#32;_Pair&gt;::value,
845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pair&lt;iterator,&#32;bool&gt;&gt;
846 &#32;&#32;&#32;&#32;insert(_Pair&amp;&amp;&#32;__x)
847 &#32;&#32;&#32;&#32;{
848 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
849 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_P2&#32;=&#32;remove_reference_t&lt;_Pair&gt;;
850 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_pair&lt;_P2&gt;)
851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;allocator_type,&#32;allocator&lt;value_type&gt;&gt;)
852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__usable_key&lt;typename&#32;_P2::first_type&gt;)
853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__k&#32;=&#32;__x.first;
855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;__i&#32;=&#32;lower_bound(__k);
856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__i&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;||&#32;key_comp()(__k,&#32;(*__i).first))
857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__i&#32;=&#32;emplace_hint(__i,&#32;std::forward&lt;_Pair&gt;(__x));
859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__i,&#32;<emphasis role="keyword">true</emphasis>};
860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__i,&#32;<emphasis role="keyword">false</emphasis>};
862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
863 <emphasis role="preprocessor">#endif</emphasis>
864 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_emplace_unique(std::forward&lt;_Pair&gt;(__x));
865 &#32;&#32;&#32;&#32;}
866 <emphasis role="preprocessor">#endif</emphasis>
868 
869 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
877 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
878 &#32;&#32;&#32;&#32;&#32;&#32;insert(std::initializer_list&lt;value_type&gt;&#32;__list)
879 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;insert(__list.begin(),&#32;__list.end());&#32;}
880 <emphasis role="preprocessor">#endif</emphasis>
881 
906 &#32;&#32;&#32;&#32;&#32;&#32;iterator
907 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
908 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__position,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
909 <emphasis role="preprocessor">#else</emphasis>
910 &#32;&#32;&#32;&#32;&#32;&#32;insert(iterator&#32;__position,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
911 <emphasis role="preprocessor">#endif</emphasis>
912 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_insert_unique_(__position,&#32;__x);&#32;}
913 
914 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
915 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
916 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2354.&#32;Unnecessary&#32;copying&#32;when&#32;inserting&#32;into&#32;maps&#32;with&#32;braced-init</emphasis>
917 &#32;&#32;&#32;&#32;&#32;&#32;iterator
918 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__position,&#32;value_type&amp;&amp;&#32;__x)
919 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_insert_unique_(__position,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x));&#32;}
920 
921 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Pair&gt;
922 &#32;&#32;&#32;&#32;__enable_if_t&lt;is_constructible&lt;value_type,&#32;_Pair&gt;::value,&#32;iterator&gt;
923 &#32;&#32;&#32;&#32;insert(const_iterator&#32;__position,&#32;_Pair&amp;&amp;&#32;__x)
924 &#32;&#32;&#32;&#32;{
925 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_emplace_hint_unique(__position,
926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Pair&gt;(__x));
927 &#32;&#32;&#32;&#32;}
928 <emphasis role="preprocessor">#endif</emphasis>
930 
939 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
940 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
941 &#32;&#32;&#32;&#32;insert(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
942 &#32;&#32;&#32;&#32;{&#32;_M_t._M_insert_range_unique(__first,&#32;__last);&#32;}
943 
944 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
964 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Obj&gt;
965 &#32;&#32;&#32;&#32;pair&lt;iterator,&#32;bool&gt;
966 &#32;&#32;&#32;&#32;insert_or_assign(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__k,&#32;_Obj&amp;&amp;&#32;__obj)
967 &#32;&#32;&#32;&#32;{
968 &#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;__i&#32;=&#32;lower_bound(__k);
969 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__i&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;||&#32;key_comp()(__k,&#32;(*__i).first))
970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__i&#32;=&#32;emplace_hint(__i,&#32;std::piecewise_construct,
972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward_as_tuple(__k),
973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward_as_tuple(
974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Obj&gt;(__obj)));
975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__i,&#32;<emphasis role="keyword">true</emphasis>};
976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
977 &#32;&#32;&#32;&#32;&#32;&#32;(*__i).second&#32;=&#32;std::forward&lt;_Obj&gt;(__obj);
978 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__i,&#32;<emphasis role="keyword">false</emphasis>};
979 &#32;&#32;&#32;&#32;}
980 
981 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;move-capable&#32;overload</emphasis>
982 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Obj&gt;
983 &#32;&#32;&#32;&#32;pair&lt;iterator,&#32;bool&gt;
984 &#32;&#32;&#32;&#32;insert_or_assign(key_type&amp;&amp;&#32;__k,&#32;_Obj&amp;&amp;&#32;__obj)
985 &#32;&#32;&#32;&#32;{
986 &#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;__i&#32;=&#32;lower_bound(__k);
987 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__i&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;||&#32;key_comp()(__k,&#32;(*__i).first))
988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__i&#32;=&#32;emplace_hint(__i,&#32;std::piecewise_construct,
990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward_as_tuple(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__k)),
991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward_as_tuple(
992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Obj&gt;(__obj)));
993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__i,&#32;<emphasis role="keyword">true</emphasis>};
994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
995 &#32;&#32;&#32;&#32;&#32;&#32;(*__i).second&#32;=&#32;std::forward&lt;_Obj&gt;(__obj);
996 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__i,&#32;<emphasis role="keyword">false</emphasis>};
997 &#32;&#32;&#32;&#32;}
998 
1019 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Obj&gt;
1020 &#32;&#32;&#32;&#32;iterator
1021 &#32;&#32;&#32;&#32;insert_or_assign(const_iterator&#32;__hint,
1022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__k,&#32;_Obj&amp;&amp;&#32;__obj)
1023 &#32;&#32;&#32;&#32;{
1024 &#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;__i;
1025 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__true_hint&#32;=&#32;_M_t._M_get_insert_hint_unique_pos(__hint,&#32;__k);
1026 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__true_hint.second)
1027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;emplace_hint(iterator(__true_hint.second),
1029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::piecewise_construct,
1030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward_as_tuple(__k),
1031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward_as_tuple(
1032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Obj&gt;(__obj)));
1033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1034 &#32;&#32;&#32;&#32;&#32;&#32;__i&#32;=&#32;iterator(__true_hint.first);
1035 &#32;&#32;&#32;&#32;&#32;&#32;(*__i).second&#32;=&#32;std::forward&lt;_Obj&gt;(__obj);
1036 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__i;
1037 &#32;&#32;&#32;&#32;}
1038 
1039 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;move-capable&#32;overload</emphasis>
1040 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Obj&gt;
1041 &#32;&#32;&#32;&#32;iterator
1042 &#32;&#32;&#32;&#32;insert_or_assign(const_iterator&#32;__hint,&#32;key_type&amp;&amp;&#32;__k,&#32;_Obj&amp;&amp;&#32;__obj)
1043 &#32;&#32;&#32;&#32;{
1044 &#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;__i;
1045 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__true_hint&#32;=&#32;_M_t._M_get_insert_hint_unique_pos(__hint,&#32;__k);
1046 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__true_hint.second)
1047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;emplace_hint(iterator(__true_hint.second),
1049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::piecewise_construct,
1050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward_as_tuple(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__k)),
1051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward_as_tuple(
1052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Obj&gt;(__obj)));
1053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1054 &#32;&#32;&#32;&#32;&#32;&#32;__i&#32;=&#32;iterator(__true_hint.first);
1055 &#32;&#32;&#32;&#32;&#32;&#32;(*__i).second&#32;=&#32;std::forward&lt;_Obj&gt;(__obj);
1056 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__i;
1057 &#32;&#32;&#32;&#32;}
1058 <emphasis role="preprocessor">#endif</emphasis>
1059 
1060 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1061 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
1062 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;DR&#32;130.&#32;Associative&#32;erase&#32;should&#32;return&#32;an&#32;iterator.</emphasis>
1078 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1079 &#32;&#32;&#32;&#32;&#32;&#32;erase(const_iterator&#32;__position)
1080 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.erase(__position);&#32;}
1081 
1082 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LWG&#32;2059</emphasis>
1083 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ad7d29ac44393cedd1b17fc5dc40186a8">_GLIBCXX_ABI_TAG_CXX11</link>
1084 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1085 &#32;&#32;&#32;&#32;&#32;&#32;erase(iterator&#32;__position)
1086 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.erase(__position);&#32;}
1088 <emphasis role="preprocessor">#else</emphasis>
1099 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1100 &#32;&#32;&#32;&#32;&#32;&#32;erase(iterator&#32;__position)
1101 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_t.erase(__position);&#32;}
1102 <emphasis role="preprocessor">#endif</emphasis>
1103 
1115 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1116 &#32;&#32;&#32;&#32;&#32;&#32;erase(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
1117 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.erase(__x);&#32;}
1118 
1119 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1120 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
1121 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;DR&#32;130.&#32;Associative&#32;erase&#32;should&#32;return&#32;an&#32;iterator.</emphasis>
1135 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1136 &#32;&#32;&#32;&#32;&#32;&#32;erase(const_iterator&#32;__first,&#32;const_iterator&#32;__last)
1137 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.erase(__first,&#32;__last);&#32;}
1138 <emphasis role="preprocessor">#else</emphasis>
1151 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1152 &#32;&#32;&#32;&#32;&#32;&#32;erase(iterator&#32;__first,&#32;iterator&#32;__last)
1153 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_t.erase(__first,&#32;__last);&#32;}
1154 <emphasis role="preprocessor">#endif</emphasis>
1155 
1169 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1170 &#32;&#32;&#32;&#32;&#32;&#32;swap(map&amp;&#32;__x)
1171 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT_IF(__is_nothrow_swappable&lt;_Compare&gt;::value)
1172 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_t.swap(__x._M_t);&#32;}
1173 
1180 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1181 &#32;&#32;&#32;&#32;&#32;&#32;clear()&#32;_GLIBCXX_NOEXCEPT
1182 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_t.clear();&#32;}
1183 
1184 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;observers</emphasis>
1189 &#32;&#32;&#32;&#32;&#32;&#32;key_compare
1190 &#32;&#32;&#32;&#32;&#32;&#32;key_comp()<emphasis role="keyword">&#32;const</emphasis>
1191 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.key_comp();&#32;}
1192 
1197 &#32;&#32;&#32;&#32;&#32;&#32;value_compare
1198 &#32;&#32;&#32;&#32;&#32;&#32;value_comp()<emphasis role="keyword">&#32;const</emphasis>
1199 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;value_compare(_M_t.key_comp());&#32;}
1200 
1201 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[23.3.1.3]&#32;map&#32;operations</emphasis>
1202 
1204 
1216 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1217 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
1218 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.find(__x);&#32;}
1219 
1220 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
1221 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
1222 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
1223 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(_M_t._M_find_tr(__x))
1224 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_find_tr(__x);&#32;}
1225 <emphasis role="preprocessor">#endif</emphasis>
1227 
1229 
1241 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
1242 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
1243 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.find(__x);&#32;}
1244 
1245 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
1246 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
1247 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
1248 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(_M_t._M_find_tr(__x))
1249 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_find_tr(__x);&#32;}
1250 <emphasis role="preprocessor">#endif</emphasis>
1252 
1254 
1262 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1263 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
1264 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.find(__x)&#32;==&#32;_M_t.end()&#32;?&#32;0&#32;:&#32;1;&#32;}
1265 
1266 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
1267 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
1268 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
1269 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(_M_t._M_count_tr(__x))
1270 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_count_tr(__x);&#32;}
1271 <emphasis role="preprocessor">#endif</emphasis>
1273 
1274 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
1276 
1281 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1282 &#32;&#32;&#32;&#32;&#32;&#32;contains(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
1283 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.find(__x)&#32;!=&#32;_M_t.end();&#32;}
1284 
1285 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
1286 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
1287 &#32;&#32;&#32;&#32;contains(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>
1288 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(_M_t._M_find_tr(__x),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>(),&#32;<emphasis role="keyword">true</emphasis>)
1289 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_find_tr(__x)&#32;!=&#32;_M_t.end();&#32;}
1291 <emphasis role="preprocessor">#endif</emphasis>
1292 
1294 
1305 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1306 &#32;&#32;&#32;&#32;&#32;&#32;lower_bound(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
1307 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.lower_bound(__x);&#32;}
1308 
1309 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
1310 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
1311 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
1312 &#32;&#32;&#32;&#32;lower_bound(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)
1313 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(iterator(_M_t._M_lower_bound_tr(__x)))
1314 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(_M_t._M_lower_bound_tr(__x));&#32;}
1315 <emphasis role="preprocessor">#endif</emphasis>
1317 
1319 
1330 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
1331 &#32;&#32;&#32;&#32;&#32;&#32;lower_bound(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
1332 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.lower_bound(__x);&#32;}
1333 
1334 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
1335 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
1336 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
1337 &#32;&#32;&#32;&#32;lower_bound(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>
1338 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(const_iterator(_M_t._M_lower_bound_tr(__x)))
1339 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(_M_t._M_lower_bound_tr(__x));&#32;}
1340 <emphasis role="preprocessor">#endif</emphasis>
1342 
1344 
1350 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1351 &#32;&#32;&#32;&#32;&#32;&#32;upper_bound(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
1352 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.upper_bound(__x);&#32;}
1353 
1354 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
1355 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
1356 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
1357 &#32;&#32;&#32;&#32;upper_bound(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)
1358 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(iterator(_M_t._M_upper_bound_tr(__x)))
1359 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(_M_t._M_upper_bound_tr(__x));&#32;}
1360 <emphasis role="preprocessor">#endif</emphasis>
1362 
1364 
1370 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
1371 &#32;&#32;&#32;&#32;&#32;&#32;upper_bound(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
1372 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.upper_bound(__x);&#32;}
1373 
1374 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
1375 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
1376 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
1377 &#32;&#32;&#32;&#32;upper_bound(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>
1378 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(const_iterator(_M_t._M_upper_bound_tr(__x)))
1379 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(_M_t._M_upper_bound_tr(__x));&#32;}
1380 <emphasis role="preprocessor">#endif</emphasis>
1382 
1384 
1399 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;iterator&gt;
1400 &#32;&#32;&#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
1401 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.equal_range(__x);&#32;}
1402 
1403 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
1404 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
1405 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
1406 &#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)
1407 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(pair&lt;iterator,&#32;iterator&gt;(_M_t._M_equal_range_tr(__x)))
1408 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;pair&lt;iterator,&#32;iterator&gt;(_M_t._M_equal_range_tr(__x));&#32;}
1409 <emphasis role="preprocessor">#endif</emphasis>
1411 
1413 
1428 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;const_iterator,&#32;const_iterator&gt;
1429 &#32;&#32;&#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
1430 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.equal_range(__x);&#32;}
1431 
1432 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
1433 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
1434 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
1435 &#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>
1436 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(pair&lt;const_iterator,&#32;const_iterator&gt;(
1437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_t._M_equal_range_tr(__x)))
1438 &#32;&#32;&#32;&#32;{
1439 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pair&lt;const_iterator,&#32;const_iterator&gt;(
1440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_t._M_equal_range_tr(__x));
1441 &#32;&#32;&#32;&#32;}
1442 <emphasis role="preprocessor">#endif</emphasis>
1444 
1445 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_K1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_C1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A1&gt;
1446 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1447 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;map&lt;_K1,&#32;_T1,&#32;_C1,&#32;_A1&gt;&amp;,
1448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;map&lt;_K1,&#32;_T1,&#32;_C1,&#32;_A1&gt;&amp;);
1449 
1450 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
1451 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_K1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_C1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A1&gt;
1452 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;__detail::__synth3way_t&lt;pair&lt;const&#32;_K1,&#32;_T1&gt;&gt;
1453 &#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;map&lt;_K1,&#32;_T1,&#32;_C1,&#32;_A1&gt;&amp;,
1454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;map&lt;_K1,&#32;_T1,&#32;_C1,&#32;_A1&gt;&amp;);
1455 <emphasis role="preprocessor">#else</emphasis>
1456 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_K1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_C1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A1&gt;
1457 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1458 &#32;&#32;&#32;&#32;operator&lt;(<emphasis role="keyword">const</emphasis>&#32;map&lt;_K1,&#32;_T1,&#32;_C1,&#32;_A1&gt;&amp;,
1459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;map&lt;_K1,&#32;_T1,&#32;_C1,&#32;_A1&gt;&amp;);
1460 <emphasis role="preprocessor">#endif</emphasis>
1461 &#32;&#32;&#32;&#32;};
1462 
1463 
1464 <emphasis role="preprocessor">#if&#32;__cpp_deduction_guides&#32;&gt;=&#32;201606</emphasis>
1465 
1466 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
1467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&#32;=&#32;less&lt;__iter_key_t&lt;_InputIterator&gt;&gt;,
1468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&#32;=&#32;allocator&lt;__iter_to_alloc_t&lt;_InputIterator&gt;&gt;,
1469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;,
1470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocator&lt;_Compare&gt;,
1471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
1472 &#32;&#32;&#32;&#32;map(_InputIterator,&#32;_InputIterator,
1473 &#32;&#32;&#32;&#32;_Compare&#32;=&#32;_Compare(),&#32;_Allocator&#32;=&#32;_Allocator())
1474 &#32;&#32;&#32;&#32;-&gt;&#32;map&lt;__iter_key_t&lt;_InputIterator&gt;,&#32;__iter_val_t&lt;_InputIterator&gt;,
1475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare,&#32;_Allocator&gt;;
1476 
1477 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&#32;=&#32;less&lt;_Key&gt;,
1478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&#32;=&#32;allocator&lt;pair&lt;const&#32;_Key,&#32;_Tp&gt;&gt;,
1479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocator&lt;_Compare&gt;,
1480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
1481 &#32;&#32;&#32;&#32;map(initializer_list&lt;pair&lt;_Key,&#32;_Tp&gt;&gt;,
1482 &#32;&#32;&#32;&#32;_Compare&#32;=&#32;_Compare(),&#32;_Allocator&#32;=&#32;_Allocator())
1483 &#32;&#32;&#32;&#32;-&gt;&#32;map&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Allocator&gt;;
1484 
1485 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator,
1486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;,
1487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
1488 &#32;&#32;&#32;&#32;map(_InputIterator,&#32;_InputIterator,&#32;_Allocator)
1489 &#32;&#32;&#32;&#32;-&gt;&#32;map&lt;__iter_key_t&lt;_InputIterator&gt;,&#32;__iter_val_t&lt;_InputIterator&gt;,
1490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;less&lt;__iter_key_t&lt;_InputIterator&gt;&gt;,&#32;_Allocator&gt;;
1491 
1492 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator,
1493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
1494 &#32;&#32;&#32;&#32;map(initializer_list&lt;pair&lt;_Key,&#32;_Tp&gt;&gt;,&#32;_Allocator)
1495 &#32;&#32;&#32;&#32;-&gt;&#32;map&lt;_Key,&#32;_Tp,&#32;less&lt;_Key&gt;,&#32;_Allocator&gt;;
1496 
1497 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;deduction&#32;guides</emphasis>
1498 
1509 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1510 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1511 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;map&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__x,
1512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;map&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__y)
1513 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_t&#32;==&#32;__y._M_t;&#32;}
1514 
1515 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
1530 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1531 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;__detail::__synth3way_t&lt;pair&lt;const&#32;_Key,&#32;_Tp&gt;&gt;
1532 &#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;map&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__x,
1533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;map&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__y)
1534 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_t&#32;&lt;=&gt;&#32;__y._M_t;&#32;}
1535 <emphasis role="preprocessor">#else</emphasis>
1547 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1548 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1549 &#32;&#32;&#32;&#32;operator&lt;(<emphasis role="keyword">const</emphasis>&#32;map&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__x,
1550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;map&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__y)
1551 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_t&#32;&lt;&#32;__y._M_t;&#32;}
1552 
1554 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1555 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1556 &#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;map&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__x,
1557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;map&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__y)
1558 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__x&#32;==&#32;__y);&#32;}
1559 
1561 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1562 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1563 &#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;map&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__x,
1564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;map&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__y)
1565 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__y&#32;&lt;&#32;__x;&#32;}
1566 
1568 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1569 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1570 &#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;map&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__x,
1571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;map&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__y)
1572 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__y&#32;&lt;&#32;__x);&#32;}
1573 
1575 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1576 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1577 &#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;map&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__x,
1578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;map&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__y)
1579 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__x&#32;&lt;&#32;__y);&#32;}
1580 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;three-way&#32;comparison</emphasis>
1581 
1583 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1584 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1585 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(map&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__x,
1586 &#32;&#32;&#32;&#32;&#32;map&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__y)
1587 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT_IF(<emphasis role="keyword">noexcept</emphasis>(__x.swap(__y)))
1588 &#32;&#32;&#32;&#32;{&#32;__x.swap(__y);&#32;}
1589 
1590 _GLIBCXX_END_NAMESPACE_CONTAINER
1591 
1592 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
1593 &#32;&#32;<emphasis role="comment">//&#32;Allow&#32;std::map&#32;access&#32;to&#32;internals&#32;of&#32;compatible&#32;maps.</emphasis>
1594 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cmp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,
1595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cmp2&gt;
1596 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>
1597 &#32;&#32;&#32;&#32;_Rb_tree_merge_helper&lt;_GLIBCXX_STD_C::map&lt;_Key,&#32;_Val,&#32;_Cmp1,&#32;_Alloc&gt;,
1598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Cmp2&gt;
1599 &#32;&#32;&#32;&#32;{
1600 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1601 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>_GLIBCXX_STD_C::map&lt;_Key,&#32;_Val,&#32;_Cmp1,&#32;_Alloc&gt;;
1602 
1603 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;
1604 &#32;&#32;&#32;&#32;&#32;&#32;_S_get_tree(_GLIBCXX_STD_C::map&lt;_Key,&#32;_Val,&#32;_Cmp2,&#32;_Alloc&gt;&amp;&#32;__map)
1605 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__map._M_t;&#32;}
1606 
1607 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;
1608 &#32;&#32;&#32;&#32;&#32;&#32;_S_get_tree(_GLIBCXX_STD_C::multimap&lt;_Key,&#32;_Val,&#32;_Cmp2,&#32;_Alloc&gt;&amp;&#32;__map)
1609 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__map._M_t;&#32;}
1610 &#32;&#32;&#32;&#32;};
1611 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
1612 
1613 _GLIBCXX_END_NAMESPACE_VERSION
1614 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
1615 
1616 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_STL_MAP_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
