<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2parallel_2base_8h" xml:lang="en-US">
<title>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/parallel/base.h File Reference</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/parallel/base.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &lt;bits/c++config.h&gt;<?linebreak?>#include &lt;bits/stl_function.h&gt;<?linebreak?>#include &lt;omp.h&gt;<?linebreak?>#include &lt;parallel/features.h&gt;<?linebreak?>#include &lt;parallel/basic_iterator.h&gt;<?linebreak?>#include &lt;parallel/parallel.h&gt;<?linebreak?></programlisting>Include dependency graph for base.h:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="_classes_2lib_2include_2c_09_09_2parallel_2base_8h__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_class____gnu__parallel_1_1___equal_from_less">__gnu_parallel::_EqualFromLess&lt; _T1, _T2, _Compare &gt;</link></para>

<para>Constructs predicate for equality from strict weak ordering predicate. </para>
</listitem>
            <listitem><para>class <link linkend="_class____gnu__parallel_1_1____unary__negate">__gnu_parallel::__unary_negate&lt; _Predicate, argument_type &gt;</link></para>

<para>Similar to std::unary_negate, but giving the argument types explicitly. </para>
</listitem>
            <listitem><para>class <link linkend="_class____gnu__parallel_1_1____binder1st">__gnu_parallel::__binder1st&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt;</link></para>

<para>Similar to std::binder1st, but giving the argument types explicitly. </para>
</listitem>
            <listitem><para>class <link linkend="_class____gnu__parallel_1_1____binder2nd">__gnu_parallel::__binder2nd&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt;</link></para>

<para>Similar to std::binder2nd, but giving the argument types explicitly. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1___equal_to">__gnu_parallel::_EqualTo&lt; _T1, _T2 &gt;</link></para>

<para>Similar to std::equal_to, but allows two different types. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1___less">__gnu_parallel::_Less&lt; _T1, _T2 &gt;</link></para>

<para>Similar to std::less, but allows two different types. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1___less_3_01___tp_00_01___tp_01_4">__gnu_parallel::_Less&lt; _Tp, _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1___plus">__gnu_parallel::_Plus&lt; _Tp1, _Tp2, _Result &gt;</link></para>

<para>Similar to std::plus, but allows two different types. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1___plus_3_01___tp_00_01___tp_00_01___tp_01_4">__gnu_parallel::_Plus&lt; _Tp, _Tp, _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1___multiplies">__gnu_parallel::_Multiplies&lt; _Tp1, _Tp2, _Result &gt;</link></para>

<para>Similar to std::multiplies, but allows two different types. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1___multiplies_3_01___tp_00_01___tp_00_01___tp_01_4">__gnu_parallel::_Multiplies&lt; _Tp, _Tp, _Tp &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_class____gnu__parallel_1_1___pseudo_sequence_iterator">__gnu_parallel::_PseudoSequenceIterator&lt; _Tp, _DifferenceTp &gt;</link></para>

<para>_Iterator associated with <link linkend="_class____gnu__parallel_1_1___pseudo_sequence">__gnu_parallel::_PseudoSequence</link>. If features the usual random-access iterator functionality. </para>
</listitem>
            <listitem><para>class <link linkend="_class____gnu__parallel_1_1___pseudo_sequence">__gnu_parallel::_PseudoSequence&lt; _Tp, _DifferenceTp &gt;</link></para>

<para>Sequence that conceptually consists of multiple copies of the same element. The copies are not stored explicitly, of course. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Namespaces    </title>
        <itemizedlist>
            <listitem><para>namespace <link linkend="_namespacestd_1_1____parallel">std::__parallel</link></para>

<para>GNU parallel code, replaces standard behavior with parallel behavior. </para>
</listitem>
            <listitem><para>namespace <link linkend="_namespace____gnu__parallel">__gnu_parallel</link></para>

<para>GNU parallel code for public use. </para>
</listitem>
            <listitem><para>namespace <link linkend="_namespace____gnu__sequential">__gnu_sequential</link></para>

<para>GNU sequential classes for public use. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="__classes_2lib_2include_2c_09_09_2parallel_2base_8h_1acff27ea0a7532ee31661cbd47a95d3de">_GLIBCXX_PARALLEL_ASSERT</link>(_Condition)&#160;&#160;&#160;do { } while (<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>namespace std <link linkend="__classes_2lib_2include_2c_09_09_2parallel_2base_8h_1a544d74b2d5d0dd2197f5fd6f02691de0">_GLIBCXX_VISIBILITY</link> (default)</para>
</listitem>
            <listitem><para><link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link> <link linkend="_namespace____gnu__parallel_1aa72851b809c2b314bc09580c3512f281">__gnu_parallel::__get_max_threads</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__gnu_parallel::__is_parallel</link> (const <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">_Parallelism</link> __p)</para>
</listitem>
            <listitem><para>template&lt;typename _Size &gt; </para><para>_Size <link linkend="_namespace____gnu__parallel_1ae8e1f6dc07de01f28bf591339cf8aa9c">__gnu_parallel::__rd_log2</link> (_Size __n)</para>

<para>Calculates the rounded-down logarithm of <computeroutput>__n</computeroutput> for base 2. </para>
</listitem>
            <listitem><para><link linkend="_namespace____gnu__parallel_1aa1171c39f9e5afad6392c7aeefb81115">_CASable</link> <link linkend="_namespace____gnu__parallel_1a7fcc29eb3f2d9c83756a9d99b4105b3b">__gnu_parallel::__encode2</link> (int __a, int __b)</para>

<para>Encode two integers into one gnu_parallel::_CASable. </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____gnu__parallel_1aee3989c0ed2561801b8a6c0282008cca">__gnu_parallel::__decode2</link> (<link linkend="_namespace____gnu__parallel_1aa1171c39f9e5afad6392c7aeefb81115">_CASable</link> __x, int &amp;__a, int &amp;__b)</para>

<para>Decode two integers from one gnu_parallel::_CASable. </para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>const _Tp &amp; <link linkend="_namespace____gnu__parallel_1a417ee6b935946ea05ce7c45fd067541a">__gnu_parallel::min</link> (const _Tp &amp;__a, const _Tp &amp;__b)</para>

<para>Equivalent to std::min. </para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>const _Tp &amp; <link linkend="_namespace____gnu__parallel_1a2cade9be3af2e53828fe5a3865d2d9c1">__gnu_parallel::max</link> (const _Tp &amp;__a, const _Tp &amp;__b)</para>

<para>Equivalent to std::max. </para>
</listitem>
            <listitem><para>template&lt;typename _RAIter , typename _Compare &gt; </para><para>_RAIter <link linkend="_namespace____gnu__parallel_1a74914ea59d68887b517e12c90189dbcd">__gnu_parallel::__median_of_three_iterators</link> (_RAIter __a, _RAIter __b, _RAIter __c, _Compare __comp)</para>

<para>Compute the median of three referenced elements, according to <computeroutput>__comp</computeroutput>. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="__classes_2lib_2include_2c_09_09_2parallel_2base_8h_1acff27ea0a7532ee31661cbd47a95d3de"/><section>
    <title>_GLIBCXX_PARALLEL_ASSERT</title>
<indexterm><primary>_GLIBCXX_PARALLEL_ASSERT</primary><secondary>base.h</secondary></indexterm>
<indexterm><primary>base.h</primary><secondary>_GLIBCXX_PARALLEL_ASSERT</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> _GLIBCXX_PARALLEL_ASSERT( _Condition)&#160;&#160;&#160;do { } while (<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</computeroutput></para></section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="__classes_2lib_2include_2c_09_09_2parallel_2base_8h_1a544d74b2d5d0dd2197f5fd6f02691de0"/><section>
    <title>_GLIBCXX_VISIBILITY()</title>
<indexterm><primary>_GLIBCXX_VISIBILITY</primary><secondary>base.h</secondary></indexterm>
<indexterm><primary>base.h</primary><secondary>_GLIBCXX_VISIBILITY</secondary></indexterm>
<para><computeroutput>namespace std _GLIBCXX_VISIBILITY (default )</computeroutput></para></section>
</section>
</section>
