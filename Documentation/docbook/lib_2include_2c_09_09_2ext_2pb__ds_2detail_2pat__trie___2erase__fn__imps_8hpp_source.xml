<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2erase__fn__imps_8hpp_source" xml:lang="en-US">
<title>erase_fn_imps.hpp</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/ext/pb_ds/detail/pat_trie_/erase_fn_imps.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2005-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2004&#32;Ami&#32;Tavory&#32;and&#32;Vladimir&#32;Dreizin,&#32;IBM-HRL.</emphasis>
26 
27 <emphasis role="comment">//&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;sell,&#32;and&#32;distribute&#32;this&#32;software</emphasis>
28 <emphasis role="comment">//&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,&#32;provided&#32;that&#32;the&#32;above&#32;copyright</emphasis>
29 <emphasis role="comment">//&#32;notice&#32;appears&#32;in&#32;all&#32;copies,&#32;and&#32;that&#32;both&#32;that&#32;copyright&#32;notice</emphasis>
30 <emphasis role="comment">//&#32;and&#32;this&#32;permission&#32;notice&#32;appear&#32;in&#32;supporting&#32;documentation.&#32;None</emphasis>
31 <emphasis role="comment">//&#32;of&#32;the&#32;above&#32;authors,&#32;nor&#32;IBM&#32;Haifa&#32;Research&#32;Laboratories,&#32;make&#32;any</emphasis>
32 <emphasis role="comment">//&#32;representation&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
33 <emphasis role="comment">//&#32;purpose.&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied</emphasis>
34 <emphasis role="comment">//&#32;warranty.</emphasis>
35 
41 <emphasis role="preprocessor">#ifdef&#32;PB_DS_CLASS_C_DEC</emphasis>
42 
43 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
44 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
45 PB_DS_CLASS_C_DEC::
46 erase(key_const_reference&#32;r_key)
47 {
48 &#32;&#32;node_pointer&#32;p_nd&#32;=&#32;find_imp(r_key);
49 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_nd&#32;==&#32;0&#32;||&#32;p_nd-&gt;m_type&#32;==&#32;i_node)
50 &#32;&#32;&#32;&#32;{
51 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1aabe976c8ae811576bfa1b0786dcfe377">PB_DS_CHECK_KEY_DOES_NOT_EXIST</link>(r_key)
52 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
53 &#32;&#32;&#32;&#32;}
54 
55 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_nd-&gt;m_type&#32;==&#32;leaf_node);
56 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!synth_access_traits::equal_keys(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(<emphasis role="keyword">reinterpret_cast&lt;</emphasis>leaf_pointer<emphasis role="keyword">&gt;</emphasis>(p_nd)-&gt;<link linkend="_classvalue">value</link>()),&#32;r_key))
57 &#32;&#32;&#32;&#32;{
58 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1aabe976c8ae811576bfa1b0786dcfe377">PB_DS_CHECK_KEY_DOES_NOT_EXIST</link>(r_key)
59 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
60 &#32;&#32;&#32;&#32;}
61 
62 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1acfae3994df576dbc37edc392d027c7ef">PB_DS_CHECK_KEY_EXISTS</link>(r_key)
63 &#32;&#32;erase_leaf(<emphasis role="keyword">static_cast&lt;</emphasis>leaf_pointer<emphasis role="keyword">&gt;</emphasis>(p_nd));
64 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
65 &#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>;
66 }
67 
68 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
69 <emphasis role="keywordtype">void</emphasis>
70 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::
71 erase_fixup(inode_pointer&#32;p_nd)
72 {
73 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(std::distance(p_nd-&gt;begin(),&#32;p_nd-&gt;end())&#32;&gt;=&#32;1);
74 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::distance(p_nd-&gt;begin(),&#32;p_nd-&gt;end())&#32;==&#32;1)
75 &#32;&#32;&#32;&#32;{
76 &#32;&#32;&#32;&#32;&#32;&#32;node_pointer&#32;p_parent&#32;=&#32;p_nd-&gt;m_p_parent;
77 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_parent&#32;==&#32;m_p_head)
78 &#32;&#32;&#32;&#32;m_p_head-&gt;m_p_parent&#32;=&#32;*p_nd-&gt;begin();
79 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
80 &#32;&#32;&#32;&#32;{
81 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_parent-&gt;m_type&#32;==&#32;i_node);
82 &#32;&#32;&#32;&#32;&#32;&#32;node_pointer&#32;p_new_child&#32;=&#32;*p_nd-&gt;begin();
83 
84 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;inode_pointer&#32;inode_ptr;
85 &#32;&#32;&#32;&#32;&#32;&#32;inode_ptr&#32;p_internal&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>inode_ptr<emphasis role="keyword">&gt;</emphasis>(p_parent);
86 &#32;&#32;&#32;&#32;&#32;&#32;p_internal-&gt;replace_child(p_new_child,&#32;pref_begin(p_new_child),
87 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pref_end(p_new_child),&#32;<emphasis role="keyword">this</emphasis>);
88 &#32;&#32;&#32;&#32;}
89 &#32;&#32;&#32;&#32;&#32;&#32;(*p_nd-&gt;begin())-&gt;m_p_parent&#32;=&#32;p_nd-&gt;m_p_parent;
90 &#32;&#32;&#32;&#32;&#32;&#32;p_nd-&gt;~inode();
91 &#32;&#32;&#32;&#32;&#32;&#32;s_inode_allocator.deallocate(p_nd,&#32;1);
92 
93 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_parent&#32;==&#32;m_p_head)
94 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
95 
96 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_parent-&gt;m_type&#32;==&#32;i_node);
97 &#32;&#32;&#32;&#32;&#32;&#32;p_nd&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>inode_pointer<emphasis role="keyword">&gt;</emphasis>(p_parent);
98 &#32;&#32;&#32;&#32;}
99 
100 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)
101 &#32;&#32;&#32;&#32;{
102 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(std::distance(p_nd-&gt;begin(),&#32;p_nd-&gt;end())&#32;&gt;&#32;1);
103 &#32;&#32;&#32;&#32;&#32;&#32;p_nd-&gt;update_prefixes(<emphasis role="keyword">this</emphasis>);
104 &#32;&#32;&#32;&#32;&#32;&#32;apply_update(p_nd,&#32;(node_update*)<emphasis role="keyword">this</emphasis>);
105 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie___8hpp_1acf6a9e64eab117967a73db18d6b8b23d">PB_DS_ASSERT_NODE_VALID</link>(p_nd)
106 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_nd-&gt;m_p_parent-&gt;m_type&#32;==&#32;head_node)
107 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
108 
109 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_nd-&gt;m_p_parent-&gt;m_type&#32;==&#32;i_node);
110 
111 &#32;&#32;&#32;&#32;&#32;&#32;p_nd&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>inode_pointer<emphasis role="keyword">&gt;</emphasis>(p_nd-&gt;m_p_parent);
112 &#32;&#32;&#32;&#32;}
113 }
114 
115 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
116 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
117 PB_DS_CLASS_C_DEC::
118 actual_erase_leaf(leaf_pointer&#32;p_l)
119 {
120 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(m_size&#32;&gt;&#32;0);
121 &#32;&#32;--m_size;
122 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a784d392bfeacfb0e3e6e0d2719489fb6">_GLIBCXX_DEBUG_ONLY</link>(debug_base::erase_existing(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(p_l-&gt;value())));
123 &#32;&#32;p_l-&gt;~leaf();
124 &#32;&#32;s_leaf_allocator.deallocate(p_l,&#32;1);
125 }
126 
127 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
128 <emphasis role="keywordtype">void</emphasis>
129 PB_DS_CLASS_C_DEC::
130 clear()
131 {
132 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!empty())
133 &#32;&#32;&#32;&#32;{
134 &#32;&#32;&#32;&#32;&#32;&#32;clear_imp(m_p_head-&gt;m_p_parent);
135 &#32;&#32;&#32;&#32;&#32;&#32;m_size&#32;=&#32;0;
136 &#32;&#32;&#32;&#32;&#32;&#32;initialize();
137 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a784d392bfeacfb0e3e6e0d2719489fb6">_GLIBCXX_DEBUG_ONLY</link>(debug_base::clear();)
138 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
139 &#32;&#32;&#32;&#32;}
140 }
141 
142 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
143 <emphasis role="keywordtype">void</emphasis>
144 PB_DS_CLASS_C_DEC::
145 clear_imp(node_pointer&#32;p_nd)
146 {
147 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_nd-&gt;m_type&#32;==&#32;i_node)
148 &#32;&#32;&#32;&#32;{
149 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_nd-&gt;m_type&#32;==&#32;i_node);
150 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">typename</emphasis>&#32;inode::iterator&#32;it&#32;=
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>inode_pointer<emphasis role="keyword">&gt;</emphasis>(p_nd)-&gt;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>();
152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;it&#32;!=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>inode_pointer<emphasis role="keyword">&gt;</emphasis>(p_nd)-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;++it)
154 &#32;&#32;&#32;&#32;{
155 &#32;&#32;&#32;&#32;&#32;&#32;node_pointer&#32;p_child&#32;=*&#32;it;
156 &#32;&#32;&#32;&#32;&#32;&#32;clear_imp(p_child);
157 &#32;&#32;&#32;&#32;}
158 &#32;&#32;&#32;&#32;&#32;&#32;s_inode_allocator.deallocate(<emphasis role="keyword">static_cast&lt;</emphasis>inode_pointer<emphasis role="keyword">&gt;</emphasis>(p_nd),&#32;1);
159 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
160 &#32;&#32;&#32;&#32;}
161 
162 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_nd-&gt;m_type&#32;==&#32;leaf_node);
163 &#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>leaf_pointer<emphasis role="keyword">&gt;</emphasis>(p_nd)-&gt;~leaf();
164 &#32;&#32;s_leaf_allocator.deallocate(<emphasis role="keyword">static_cast&lt;</emphasis>leaf_pointer<emphasis role="keyword">&gt;</emphasis>(p_nd),&#32;1);
165 }
166 
167 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
168 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::const_iterator
169 PB_DS_CLASS_C_DEC::
170 erase(const_iterator&#32;it)
171 {
172 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
173 
174 &#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(it&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>())
175 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;it;
176 
177 &#32;&#32;const_iterator&#32;ret_it&#32;=&#32;it;
178 &#32;&#32;++ret_it;
179 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(it.m_p_nd-&gt;m_type&#32;==&#32;leaf_node);
180 &#32;&#32;erase_leaf(static_cast&lt;leaf_pointer&gt;(it.m_p_nd));
181 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*this))
182 &#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;ret_it;
183 }
184 
185 <emphasis role="preprocessor">#ifdef&#32;PB_DS_DATA_TRUE_INDICATOR</emphasis>
186 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
187 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::iterator
188 PB_DS_CLASS_C_DEC::
189 erase(iterator&#32;it)
190 {
191 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
192 
193 &#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(it&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>())
194 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;it;
195 &#32;&#32;iterator&#32;ret_it&#32;=&#32;it;
196 &#32;&#32;++ret_it;
197 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(it.m_p_nd-&gt;m_type&#32;==&#32;leaf_node);
198 &#32;&#32;erase_leaf(static_cast&lt;leaf_pointer&gt;(it.m_p_nd));
199 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*this))
200 &#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;ret_it;
201 }
202 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;#ifdef&#32;PB_DS_DATA_TRUE_INDICATOR</emphasis>
203 
204 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
205 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::const_reverse_iterator
206 PB_DS_CLASS_C_DEC::
207 erase(const_reverse_iterator&#32;it)
208 {
209 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
210 
211 &#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(it.m_p_nd&#32;==&#32;m_p_head)
212 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;it;
213 &#32;&#32;const_reverse_iterator&#32;ret_it&#32;=&#32;it;
214 &#32;&#32;++ret_it;
215 
216 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(it.m_p_nd-&gt;m_type&#32;==&#32;leaf_node);
217 &#32;&#32;erase_leaf(static_cast&lt;leaf_pointer&gt;(it.m_p_nd));
218 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*this))
219 &#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;ret_it;
220 }
221 
222 <emphasis role="preprocessor">#ifdef&#32;PB_DS_DATA_TRUE_INDICATOR</emphasis>
223 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
224 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::reverse_iterator
225 PB_DS_CLASS_C_DEC::
226 erase(reverse_iterator&#32;it)
227 {
228 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
229 
230 &#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(it.m_p_nd&#32;==&#32;m_p_head)
231 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;it;
232 &#32;&#32;reverse_iterator&#32;ret_it&#32;=&#32;it;
233 &#32;&#32;++ret_it;
234 
235 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(it.m_p_nd-&gt;m_type&#32;==&#32;leaf_node);
236 &#32;&#32;erase_leaf(static_cast&lt;leaf_pointer&gt;(it.m_p_nd));
237 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*this))
238 &#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;ret_it;
239 }
240 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;#ifdef&#32;PB_DS_DATA_TRUE_INDICATOR</emphasis>
241 
242 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
243 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Pred&gt;
244 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::size_type
245 PB_DS_CLASS_C_DEC::
246 erase_if(Pred&#32;pred)
247 {
248 &#32;&#32;size_type&#32;num_ersd&#32;=&#32;0;
249 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
250 
251 &#32;&#32;iterator&#32;it&#32;=&#32;begin();
252 &#32;&#32;while&#32;(it&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>())
253 &#32;&#32;&#32;&#32;{
254 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
255 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(pred(*it))
256 &#32;&#32;&#32;&#32;{
257 &#32;&#32;&#32;&#32;&#32;&#32;++num_ersd;
258 &#32;&#32;&#32;&#32;&#32;&#32;it&#32;=&#32;erase(it);
259 &#32;&#32;&#32;&#32;}
260 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
261 &#32;&#32;&#32;&#32;++it;
262 &#32;&#32;&#32;&#32;}
263 
264 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
265 &#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;num_ersd;
266 }
267 
268 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
269 <emphasis role="keywordtype">void</emphasis>
270 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::
271 erase_leaf(leaf_pointer&#32;p_l)
272 {
273 &#32;&#32;update_min_max_for_erased_leaf(p_l);
274 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_l-&gt;m_p_parent-&gt;m_type&#32;==&#32;head_node)
275 &#32;&#32;&#32;&#32;{
276 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;==&#32;1);
277 &#32;&#32;&#32;&#32;&#32;&#32;clear();
278 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
279 &#32;&#32;&#32;&#32;}
280 
281 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;&gt;&#32;1);
282 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_l-&gt;m_p_parent-&gt;m_type&#32;==&#32;i_node);
283 
284 &#32;&#32;inode_pointer&#32;p_parent&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>inode_pointer<emphasis role="keyword">&gt;</emphasis>(p_l-&gt;m_p_parent);
285 
286 &#32;&#32;p_parent-&gt;remove_child(p_l);
287 &#32;&#32;erase_fixup(p_parent);
288 &#32;&#32;actual_erase_leaf(p_l);
289 }
290 
291 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
292 <emphasis role="keywordtype">void</emphasis>
293 PB_DS_CLASS_C_DEC::
294 update_min_max_for_erased_leaf(leaf_pointer&#32;p_l)
295 {
296 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_size&#32;==&#32;1)
297 &#32;&#32;&#32;&#32;{
298 &#32;&#32;&#32;&#32;&#32;&#32;m_p_head-&gt;m_p_min&#32;=&#32;m_p_head;
299 &#32;&#32;&#32;&#32;&#32;&#32;m_p_head-&gt;m_p_max&#32;=&#32;m_p_head;
300 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
301 &#32;&#32;&#32;&#32;}
302 
303 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_l&#32;==&#32;<emphasis role="keyword">static_cast&lt;</emphasis>leaf_const_pointer<emphasis role="keyword">&gt;</emphasis>(m_p_head-&gt;m_p_min))
304 &#32;&#32;&#32;&#32;{
305 &#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;it(p_l);
306 &#32;&#32;&#32;&#32;&#32;&#32;++it;
307 &#32;&#32;&#32;&#32;&#32;&#32;m_p_head-&gt;m_p_min&#32;=&#32;it.m_p_nd;
308 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
309 &#32;&#32;&#32;&#32;}
310 
311 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_l&#32;==&#32;<emphasis role="keyword">static_cast&lt;</emphasis>leaf_const_pointer<emphasis role="keyword">&gt;</emphasis>(m_p_head-&gt;m_p_max))
312 &#32;&#32;&#32;&#32;{
313 &#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;it(p_l);
314 &#32;&#32;&#32;&#32;&#32;&#32;--it;
315 &#32;&#32;&#32;&#32;&#32;&#32;m_p_head-&gt;m_p_max&#32;=&#32;it.m_p_nd;
316 &#32;&#32;&#32;&#32;}
317 }
318 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
