<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2pstl_2parallel__backend__tbb_8h_source" xml:lang="en-US">
<title>parallel_backend_tbb.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/pstl/parallel_backend_tbb.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 <emphasis role="comment">//===--&#32;parallel_backend_tbb.h&#32;--------------------------------------------===//</emphasis>
3 <emphasis role="comment">//</emphasis>
4 <emphasis role="comment">//&#32;Part&#32;of&#32;the&#32;LLVM&#32;Project,&#32;under&#32;the&#32;Apache&#32;License&#32;v2.0&#32;with&#32;LLVM&#32;Exceptions.</emphasis>
5 <emphasis role="comment">//&#32;See&#32;https://llvm.org/LICENSE.txt&#32;for&#32;license&#32;information.</emphasis>
6 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;Apache-2.0&#32;WITH&#32;LLVM-exception</emphasis>
7 <emphasis role="comment">//</emphasis>
8 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
9 
10 <emphasis role="preprocessor">#ifndef&#32;_PSTL_PARALLEL_BACKEND_TBB_H</emphasis>
11 <emphasis role="preprocessor">#define&#32;_PSTL_PARALLEL_BACKEND_TBB_H</emphasis>
12 
13 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
14 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>
15 
16 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__old_2_classes_2lib_2include_2c_09_09_2pstl_2parallel__backend__utils_8h">parallel_backend_utils.h</link>&quot;</emphasis>
17 
18 <emphasis role="comment">//&#32;Bring&#32;in&#32;minimal&#32;required&#32;subset&#32;of&#32;Intel&#32;TBB</emphasis>
19 <emphasis role="preprocessor">#include&#32;&lt;tbb/blocked_range.h&gt;</emphasis>
20 <emphasis role="preprocessor">#include&#32;&lt;tbb/parallel_for.h&gt;</emphasis>
21 <emphasis role="preprocessor">#include&#32;&lt;tbb/parallel_reduce.h&gt;</emphasis>
22 <emphasis role="preprocessor">#include&#32;&lt;tbb/parallel_scan.h&gt;</emphasis>
23 <emphasis role="preprocessor">#include&#32;&lt;tbb/parallel_invoke.h&gt;</emphasis>
24 <emphasis role="preprocessor">#include&#32;&lt;tbb/task_arena.h&gt;</emphasis>
25 <emphasis role="preprocessor">#include&#32;&lt;tbb/tbb_allocator.h&gt;</emphasis>
26 <emphasis role="preprocessor">#include&#32;&lt;tbb/task.h&gt;</emphasis>
27 
28 <emphasis role="preprocessor">#if&#32;TBB_INTERFACE_VERSION&#32;&lt;&#32;10000</emphasis>
29 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;error&#32;Intel(R)&#32;Threading&#32;Building&#32;Blocks&#32;2018&#32;is&#32;required;&#32;older&#32;versions&#32;are&#32;not&#32;supported.</emphasis>
30 <emphasis role="preprocessor">#endif</emphasis>
31 
32 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____pstl">__pstl</link>
33 {
34 <emphasis role="keyword">namespace&#32;</emphasis>__tbb_backend
35 {
36 
38 
41 <emphasis role="comment">//&#32;tbb::allocator&#32;can&#32;improve&#32;performance&#32;in&#32;some&#32;cases.</emphasis>
42 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
43 <emphasis role="keyword">class&#32;</emphasis>__buffer
44 {
45 &#32;&#32;&#32;&#32;tbb::tbb_allocator&lt;_Tp&gt;&#32;_M_allocator;
46 &#32;&#32;&#32;&#32;_Tp*&#32;_M_ptr;
47 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::size_t&#32;_M_buf_size;
48 &#32;&#32;&#32;&#32;__buffer(<emphasis role="keyword">const</emphasis>&#32;__buffer&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
49 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
50 &#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;__buffer&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
51 
52 &#32;&#32;<emphasis role="keyword">public</emphasis>:
54 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____buffer_1add418ab10602c3e0ee104d43fe70508b">__buffer</link>(std::size_t&#32;n)&#32;:&#32;_M_allocator(),&#32;_M_ptr(_M_allocator.allocate(n)),&#32;_M_buf_size(n)&#32;{}
56 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_ptr&#32;!=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;&#32;}
58 &#32;&#32;&#32;&#32;_Tp*
59 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____buffer_1a4c50301000475a7f96f6a8270559c0df">get</link>()<emphasis role="keyword">&#32;const</emphasis>
60 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_ptr;
62 &#32;&#32;&#32;&#32;}
64 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____buffer_1af1d24ec591115c5879d6ab60d33ca03a">~__buffer</link>()&#32;{&#32;_M_allocator.deallocate(_M_ptr,&#32;_M_buf_size);&#32;}
65 };
66 
67 <emphasis role="comment">//&#32;Wrapper&#32;for&#32;tbb::task</emphasis>
68 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
69 <link linkend="_namespace____pstl_1_1____tbb__backend_1a2ce0aab329490eb18c3aa27835c00cd2">__cancel_execution</link>()
70 {
71 <emphasis role="preprocessor">#if&#32;TBB_INTERFACE_VERSION&#32;&lt;=&#32;12000</emphasis>
72 &#32;&#32;&#32;&#32;tbb::task::self().group()-&gt;cancel_group_execution();
73 <emphasis role="preprocessor">#else</emphasis>
74 &#32;&#32;&#32;&#32;tbb::task::current_context()-&gt;cancel_group_execution();
75 <emphasis role="preprocessor">#endif</emphasis>
76 }
77 
78 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
79 <emphasis role="comment">//&#32;parallel_for</emphasis>
80 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
81 
82 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Index,&#32;<emphasis role="keyword">class</emphasis>&#32;_RealBody&gt;
83 <emphasis role="keyword">class&#32;</emphasis>__parallel_for_body
84 {
85 &#32;&#32;<emphasis role="keyword">public</emphasis>:
86 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____parallel__for__body_1aa682a4463f49145dfd7d5ed768974ef2">__parallel_for_body</link>(<emphasis role="keyword">const</emphasis>&#32;_RealBody&amp;&#32;__body)&#32;:&#32;_M_body(__body)&#32;{}
87 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____parallel__for__body_1a52446154fe60fe6dd04b0f965a3d1786">__parallel_for_body</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____parallel__for__body">__parallel_for_body</link>&amp;&#32;__body)&#32;:&#32;_M_body(__body._M_body)&#32;{}
88 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
89 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____parallel__for__body_1a97d97b9fec57adcd48bb74f8a15b9ae3">operator()</link>(<emphasis role="keyword">const</emphasis>&#32;tbb::blocked_range&lt;_Index&gt;&amp;&#32;__range)<emphasis role="keyword">&#32;const</emphasis>
90 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_body(__range.begin(),&#32;__range.end());
92 &#32;&#32;&#32;&#32;}
93 
94 &#32;&#32;<emphasis role="keyword">private</emphasis>:
95 &#32;&#32;&#32;&#32;_RealBody&#32;_M_body;
96 };
97 
99 <emphasis role="comment">//&#32;wrapper&#32;over&#32;tbb::parallel_for</emphasis>
100 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_Index,&#32;<emphasis role="keyword">class</emphasis>&#32;_Fp&gt;
101 <emphasis role="keywordtype">void</emphasis>
102 <link linkend="_namespace____pstl_1_1____tbb__backend_1afc697413a9bdd9d9e8e390827a960735">__parallel_for</link>(_ExecutionPolicy&amp;&amp;,&#32;_Index&#32;__first,&#32;_Index&#32;__last,&#32;_Fp&#32;__f)
103 {
104 &#32;&#32;&#32;&#32;tbb::this_task_arena::isolate([=]()&#32;{
105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tbb::parallel_for(tbb::blocked_range&lt;_Index&gt;(__first,&#32;__last),&#32;__parallel_for_body&lt;_Index,&#32;_Fp&gt;(__f));
106 &#32;&#32;&#32;&#32;});
107 }
108 
110 <emphasis role="comment">//&#32;wrapper&#32;over&#32;tbb::parallel_reduce</emphasis>
111 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_Value,&#32;<emphasis role="keyword">class</emphasis>&#32;_Index,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RealBody,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Reduction&gt;
112 _Value
113 <link linkend="_namespace____pstl_1_1____tbb__backend_1a4a9dd8a02e3599cec8b430574551b661">__parallel_reduce</link>(_ExecutionPolicy&amp;&amp;,&#32;_Index&#32;__first,&#32;_Index&#32;__last,&#32;<emphasis role="keyword">const</emphasis>&#32;_Value&amp;&#32;__identity,
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_RealBody&amp;&#32;__real_body,&#32;<emphasis role="keyword">const</emphasis>&#32;_Reduction&amp;&#32;__reduction)
115 {
116 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;tbb::this_task_arena::isolate([__first,&#32;__last,&#32;&amp;__identity,&#32;&amp;__real_body,&#32;&amp;__reduction]()&#32;-&gt;&#32;_Value&#32;{
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;tbb::parallel_reduce(
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tbb::blocked_range&lt;_Index&gt;(__first,&#32;__last),&#32;__identity,
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__real_body](<emphasis role="keyword">const</emphasis>&#32;tbb::blocked_range&lt;_Index&gt;&amp;&#32;__r,&#32;<emphasis role="keyword">const</emphasis>&#32;_Value&amp;&#32;__value)&#32;-&gt;&#32;_Value&#32;{
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__real_body(__r.begin(),&#32;__r.end(),&#32;__value);
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__reduction);
123 &#32;&#32;&#32;&#32;});
124 }
125 
126 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
127 <emphasis role="comment">//&#32;parallel_transform_reduce</emphasis>
128 <emphasis role="comment">//</emphasis>
129 <emphasis role="comment">//&#32;Notation:</emphasis>
130 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;r(i,j,init)&#32;returns&#32;reduction&#32;of&#32;init&#32;with&#32;reduction&#32;over&#32;[i,j)</emphasis>
131 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;u(i)&#32;returns&#32;f(i,i+1,identity)&#32;for&#32;a&#32;hypothetical&#32;left&#32;identity&#32;element&#32;of&#32;r</emphasis>
132 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;c(x,y)&#32;combines&#32;values&#32;x&#32;and&#32;y&#32;that&#32;were&#32;the&#32;result&#32;of&#32;r&#32;or&#32;u</emphasis>
133 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
134 
135 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Index,&#32;<emphasis role="keyword">class</emphasis>&#32;_Up,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">class</emphasis>&#32;_Cp,&#32;<emphasis role="keyword">class</emphasis>&#32;_Rp&gt;
136 <emphasis role="keyword">struct&#32;</emphasis>__par_trans_red_body
137 {
138 &#32;&#32;&#32;&#32;<emphasis role="keyword">alignas</emphasis>(_Tp)&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body_1a2079d472f07dc5936793198efa345c3a">_M_sum_storage</link>[<emphasis role="keyword">sizeof</emphasis>(_Tp)];&#32;<emphasis role="comment">//&#32;Holds&#32;generalized&#32;non-commutative&#32;sum&#32;when&#32;has_sum==true</emphasis>
139 &#32;&#32;&#32;&#32;_Rp&#32;<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body_1a2a784ff00ef4bbdcf311ce23bff770ac">_M_brick_reduce</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Most&#32;likely&#32;to&#32;have&#32;non-empty&#32;layout</emphasis>
140 &#32;&#32;&#32;&#32;_Up&#32;<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body_1a3bc703719d6b2134d34a283e271ee7ff">_M_u</link>;
141 &#32;&#32;&#32;&#32;_Cp&#32;<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body_1abfcc099c263a186cb36f0ca546cc88bf">_M_combine</link>;
142 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body_1aca115dabbb3f53237a4926910a8e1eb0">_M_has_sum</link>;&#32;<emphasis role="comment">//&#32;Put&#32;last&#32;to&#32;minimize&#32;size&#32;of&#32;class</emphasis>
143 &#32;&#32;&#32;&#32;_Tp&amp;
144 &#32;&#32;&#32;&#32;<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body_1aa826d7427f4c941478263f1f4e08d607">sum</link>()
145 &#32;&#32;&#32;&#32;{
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_PSTL_ASSERT_MSG(<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body_1aca115dabbb3f53237a4926910a8e1eb0">_M_has_sum</link>,&#32;<emphasis role="stringliteral">&quot;sum&#32;expected&quot;</emphasis>);
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*(_Tp*)<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body_1a2079d472f07dc5936793198efa345c3a">_M_sum_storage</link>;
148 &#32;&#32;&#32;&#32;}
149 &#32;&#32;&#32;&#32;<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body_1ab70c093f5a8c21ecd9dfff695b2669e1">__par_trans_red_body</link>(_Up&#32;__u,&#32;_Tp&#32;__init,&#32;_Cp&#32;__c,&#32;_Rp&#32;__r)
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body_1a2a784ff00ef4bbdcf311ce23bff770ac">_M_brick_reduce</link>(__r),&#32;<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body_1a3bc703719d6b2134d34a283e271ee7ff">_M_u</link>(__u),&#32;<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body_1abfcc099c263a186cb36f0ca546cc88bf">_M_combine</link>(__c),&#32;<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body_1aca115dabbb3f53237a4926910a8e1eb0">_M_has_sum</link>(<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)
151 &#32;&#32;&#32;&#32;{
152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;(<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body_1a2079d472f07dc5936793198efa345c3a">_M_sum_storage</link>)&#32;_Tp(__init);
153 &#32;&#32;&#32;&#32;}
154 
155 &#32;&#32;&#32;&#32;<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body_1a93f554831ee2e0390f26e63c1db6c3e4">__par_trans_red_body</link>(<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body">__par_trans_red_body</link>&amp;&#32;__left,&#32;tbb::split)
156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body_1a2a784ff00ef4bbdcf311ce23bff770ac">_M_brick_reduce</link>(__left.<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body_1a2a784ff00ef4bbdcf311ce23bff770ac">_M_brick_reduce</link>),&#32;<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body_1a3bc703719d6b2134d34a283e271ee7ff">_M_u</link>(__left.<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body_1a3bc703719d6b2134d34a283e271ee7ff">_M_u</link>),&#32;<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body_1abfcc099c263a186cb36f0ca546cc88bf">_M_combine</link>(__left.<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body_1abfcc099c263a186cb36f0ca546cc88bf">_M_combine</link>),&#32;<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body_1aca115dabbb3f53237a4926910a8e1eb0">_M_has_sum</link>(<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)
157 &#32;&#32;&#32;&#32;{
158 &#32;&#32;&#32;&#32;}
159 
160 &#32;&#32;&#32;&#32;<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body_1a46b6157a530510206764db4b30e5eb32">~__par_trans_red_body</link>()
161 &#32;&#32;&#32;&#32;{
162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;17.6.5.12&#32;tells&#32;us&#32;to&#32;not&#32;worry&#32;about&#32;catching&#32;exceptions&#32;from&#32;destructors.</emphasis>
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body_1aca115dabbb3f53237a4926910a8e1eb0">_M_has_sum</link>)
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body_1aa826d7427f4c941478263f1f4e08d607">sum</link>().~_Tp();
165 &#32;&#32;&#32;&#32;}
166 
167 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
168 &#32;&#32;&#32;&#32;<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body_1aff1e1847a7c5afee2f8a42c987f0e289">join</link>(<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body">__par_trans_red_body</link>&amp;&#32;__rhs)
169 &#32;&#32;&#32;&#32;{
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body_1aa826d7427f4c941478263f1f4e08d607">sum</link>()&#32;=&#32;<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body_1abfcc099c263a186cb36f0ca546cc88bf">_M_combine</link>(<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body_1aa826d7427f4c941478263f1f4e08d607">sum</link>(),&#32;__rhs.sum());
171 &#32;&#32;&#32;&#32;}
172 
173 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
174 &#32;&#32;&#32;&#32;<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body_1af0e7869662361b84b861c892d1b898ce">operator()</link>(<emphasis role="keyword">const</emphasis>&#32;tbb::blocked_range&lt;_Index&gt;&amp;&#32;__range)
175 &#32;&#32;&#32;&#32;{
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Index&#32;__i&#32;=&#32;__range.begin();
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Index&#32;__j&#32;=&#32;__range.end();
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body_1aca115dabbb3f53237a4926910a8e1eb0">_M_has_sum</link>)
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_PSTL_ASSERT_MSG(__range.size()&#32;&gt;&#32;1,&#32;<emphasis role="stringliteral">&quot;there&#32;should&#32;be&#32;at&#32;least&#32;2&#32;elements&quot;</emphasis>);
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;(&amp;<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body_1a2079d472f07dc5936793198efa345c3a">_M_sum_storage</link>)
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp(<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body_1abfcc099c263a186cb36f0ca546cc88bf">_M_combine</link>(<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body_1a3bc703719d6b2134d34a283e271ee7ff">_M_u</link>(__i),&#32;<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body_1a3bc703719d6b2134d34a283e271ee7ff">_M_u</link>(__i&#32;+&#32;1)));&#32;<emphasis role="comment">//&#32;The&#32;condition&#32;i+1&#32;&lt;&#32;j&#32;is&#32;provided&#32;by&#32;the&#32;grain&#32;size&#32;of&#32;3</emphasis>
183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body_1aca115dabbb3f53237a4926910a8e1eb0">_M_has_sum</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::advance(__i,&#32;2);
185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__i&#32;==&#32;__j)
186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body_1aa826d7427f4c941478263f1f4e08d607">sum</link>()&#32;=&#32;<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body_1a2a784ff00ef4bbdcf311ce23bff770ac">_M_brick_reduce</link>(__i,&#32;__j,&#32;<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body_1aa826d7427f4c941478263f1f4e08d607">sum</link>());
189 &#32;&#32;&#32;&#32;}
190 };
191 
192 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_Index,&#32;<emphasis role="keyword">class</emphasis>&#32;_Up,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">class</emphasis>&#32;_Cp,&#32;<emphasis role="keyword">class</emphasis>&#32;_Rp&gt;
193 _Tp
194 <link linkend="_namespace____pstl_1_1____tbb__backend_1afcf54e45b118dd3af37bc3954d883625">__parallel_transform_reduce</link>(_ExecutionPolicy&amp;&amp;,&#32;_Index&#32;__first,&#32;_Index&#32;__last,&#32;_Up&#32;__u,&#32;_Tp&#32;__init,&#32;_Cp&#32;__combine,
195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Rp&#32;__brick_reduce)
196 {
197 &#32;&#32;&#32;&#32;<link linkend="_struct____pstl_1_1____tbb__backend_1_1____par__trans__red__body">__tbb_backend::__par_trans_red_body&lt;_Index, _Up, _Tp, _Cp, _Rp&gt;</link>&#32;__body(__u,&#32;__init,&#32;__combine,&#32;__brick_reduce);
198 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;grain&#32;size&#32;of&#32;3&#32;is&#32;used&#32;in&#32;order&#32;to&#32;provide&#32;mininum&#32;2&#32;elements&#32;for&#32;each&#32;body</emphasis>
199 &#32;&#32;&#32;&#32;tbb::this_task_arena::isolate(
200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__first,&#32;__last,&#32;&amp;__body]()&#32;{&#32;tbb::parallel_reduce(tbb::blocked_range&lt;_Index&gt;(__first,&#32;__last,&#32;3),&#32;__body);&#32;});
201 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__body.sum();
202 }
203 
204 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
205 <emphasis role="comment">//&#32;parallel_scan</emphasis>
206 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
207 
208 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Index,&#32;<emphasis role="keyword">class</emphasis>&#32;_Up,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">class</emphasis>&#32;_Cp,&#32;<emphasis role="keyword">class</emphasis>&#32;_Rp,&#32;<emphasis role="keyword">class</emphasis>&#32;_Sp&gt;
209 <emphasis role="keyword">class&#32;</emphasis>__trans_scan_body
210 {
211 &#32;&#32;&#32;&#32;<emphasis role="keyword">alignas</emphasis>(_Tp)&#32;<emphasis role="keywordtype">char</emphasis>&#32;_M_sum_storage[<emphasis role="keyword">sizeof</emphasis>(_Tp)];&#32;<emphasis role="comment">//&#32;Holds&#32;generalized&#32;non-commutative&#32;sum&#32;when&#32;has_sum==true</emphasis>
212 &#32;&#32;&#32;&#32;_Rp&#32;_M_brick_reduce;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Most&#32;likely&#32;to&#32;have&#32;non-empty&#32;layout</emphasis>
213 &#32;&#32;&#32;&#32;_Up&#32;_M_u;
214 &#32;&#32;&#32;&#32;_Cp&#32;_M_combine;
215 &#32;&#32;&#32;&#32;_Sp&#32;_M_scan;
216 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_M_has_sum;&#32;<emphasis role="comment">//&#32;Put&#32;last&#32;to&#32;minimize&#32;size&#32;of&#32;class</emphasis>
217 &#32;&#32;<emphasis role="keyword">public</emphasis>:
218 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____trans__scan__body_1a0557f767aaa0088b6c39a854cf40a6a0">__trans_scan_body</link>(_Up&#32;__u,&#32;_Tp&#32;__init,&#32;_Cp&#32;__combine,&#32;_Rp&#32;__reduce,&#32;_Sp&#32;__scan)
219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_brick_reduce(__reduce),&#32;_M_u(__u),&#32;_M_combine(__combine),&#32;_M_scan(__scan),&#32;_M_has_sum(<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)
220 &#32;&#32;&#32;&#32;{
221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;(_M_sum_storage)&#32;_Tp(__init);
222 &#32;&#32;&#32;&#32;}
223 
224 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____trans__scan__body_1a0a66903a0ef25c684114e4186874a302">__trans_scan_body</link>(<link linkend="_class____pstl_1_1____tbb__backend_1_1____trans__scan__body">__trans_scan_body</link>&amp;&#32;__b,&#32;tbb::split)
225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_brick_reduce(__b._M_brick_reduce),&#32;_M_u(__b._M_u),&#32;_M_combine(__b._M_combine),&#32;_M_scan(__b._M_scan),
226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_has_sum(<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)
227 &#32;&#32;&#32;&#32;{
228 &#32;&#32;&#32;&#32;}
229 
230 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____trans__scan__body_1aa9c4cdcb54c7a048d745fb16606039f5">~__trans_scan_body</link>()
231 &#32;&#32;&#32;&#32;{
232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;17.6.5.12&#32;tells&#32;us&#32;to&#32;not&#32;worry&#32;about&#32;catching&#32;exceptions&#32;from&#32;destructors.</emphasis>
233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_has_sum)
234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____trans__scan__body_1ad433d59dd8103d38d1c1b66780a77fb0">sum</link>().~_Tp();
235 &#32;&#32;&#32;&#32;}
236 
237 &#32;&#32;&#32;&#32;_Tp&amp;
238 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____trans__scan__body_1ad433d59dd8103d38d1c1b66780a77fb0">sum</link>()<emphasis role="keyword">&#32;const</emphasis>
239 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_PSTL_ASSERT_MSG(_M_has_sum,&#32;<emphasis role="stringliteral">&quot;sum&#32;expected&quot;</emphasis>);
241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">const_cast&lt;</emphasis>_Tp*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_Tp&#32;const*<emphasis role="keyword">&gt;</emphasis>(_M_sum_storage));
242 &#32;&#32;&#32;&#32;}
243 
244 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
245 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____trans__scan__body_1a3652e3ac03fbcd23b6cf24af26ed717c">operator()</link>(<emphasis role="keyword">const</emphasis>&#32;tbb::blocked_range&lt;_Index&gt;&amp;&#32;__range,&#32;tbb::pre_scan_tag)
246 &#32;&#32;&#32;&#32;{
247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Index&#32;__i&#32;=&#32;__range.begin();
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Index&#32;__j&#32;=&#32;__range.end();
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_has_sum)
250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;(&amp;_M_sum_storage)&#32;_Tp(_M_u(__i));
252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_has_sum&#32;=&#32;<emphasis role="keyword">true</emphasis>;
253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__i;
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__i&#32;==&#32;__j)
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____trans__scan__body_1ad433d59dd8103d38d1c1b66780a77fb0">sum</link>()&#32;=&#32;_M_brick_reduce(__i,&#32;__j,&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____trans__scan__body_1ad433d59dd8103d38d1c1b66780a77fb0">sum</link>());
258 &#32;&#32;&#32;&#32;}
259 
260 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
261 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____trans__scan__body_1ae9ce20cfda9bcb20c4f408980bae8c47">operator()</link>(<emphasis role="keyword">const</emphasis>&#32;tbb::blocked_range&lt;_Index&gt;&amp;&#32;__range,&#32;tbb::final_scan_tag)
262 &#32;&#32;&#32;&#32;{
263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____trans__scan__body_1ad433d59dd8103d38d1c1b66780a77fb0">sum</link>()&#32;=&#32;_M_scan(__range.begin(),&#32;__range.end(),&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____trans__scan__body_1ad433d59dd8103d38d1c1b66780a77fb0">sum</link>());
264 &#32;&#32;&#32;&#32;}
265 
266 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
267 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____trans__scan__body_1ae334325251e954c93bc2a5e8dc1fff73">reverse_join</link>(<link linkend="_class____pstl_1_1____tbb__backend_1_1____trans__scan__body">__trans_scan_body</link>&amp;&#32;__a)
268 &#32;&#32;&#32;&#32;{
269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_has_sum)
270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____trans__scan__body_1ad433d59dd8103d38d1c1b66780a77fb0">sum</link>()&#32;=&#32;_M_combine(__a.sum(),&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____trans__scan__body_1ad433d59dd8103d38d1c1b66780a77fb0">sum</link>());
272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;(&amp;_M_sum_storage)&#32;_Tp(__a.sum());
276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_has_sum&#32;=&#32;<emphasis role="keyword">true</emphasis>;
277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
278 &#32;&#32;&#32;&#32;}
279 
280 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
281 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____trans__scan__body_1a681d5787ca9790c092d75fb6aa785c81">assign</link>(<link linkend="_class____pstl_1_1____tbb__backend_1_1____trans__scan__body">__trans_scan_body</link>&amp;&#32;__b)
282 &#32;&#32;&#32;&#32;{
283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____trans__scan__body_1ad433d59dd8103d38d1c1b66780a77fb0">sum</link>()&#32;=&#32;__b.sum();
284 &#32;&#32;&#32;&#32;}
285 };
286 
287 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Index&gt;
288 _Index
289 <link linkend="_namespace____pstl_1_1____tbb__backend_1a412bd21d61e578eab6a5afe510c8f07d">__split</link>(_Index&#32;__m)
290 {
291 &#32;&#32;&#32;&#32;_Index&#32;__k&#32;=&#32;1;
292 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(2&#32;*&#32;__k&#32;&lt;&#32;__m)
293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__k&#32;*=&#32;2;
294 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__k;
295 }
296 
297 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
298 <emphasis role="comment">//&#32;__parallel_strict_scan</emphasis>
299 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
300 
301 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Index,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cp&gt;
302 <emphasis role="keywordtype">void</emphasis>
303 <link linkend="_namespace____pstl_1_1____tbb__backend_1ac07922e1fd589396a2fa41616cdf6cc6">__upsweep</link>(_Index&#32;__i,&#32;_Index&#32;__m,&#32;_Index&#32;__tilesize,&#32;_Tp*&#32;__r,&#32;_Index&#32;__lastsize,&#32;_Rp&#32;__reduce,&#32;_Cp&#32;__combine)
304 {
305 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__m&#32;==&#32;1)
306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__r[0]&#32;=&#32;__reduce(__i&#32;*&#32;__tilesize,&#32;__lastsize);
307 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
308 &#32;&#32;&#32;&#32;{
309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Index&#32;__k&#32;=&#32;<link linkend="_namespace____pstl_1_1____tbb__backend_1a412bd21d61e578eab6a5afe510c8f07d">__split</link>(__m);
310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tbb::parallel_invoke(
311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[=]&#32;{&#32;<link linkend="_namespace____pstl_1_1____tbb__backend_1ac07922e1fd589396a2fa41616cdf6cc6">__tbb_backend::__upsweep</link>(__i,&#32;__k,&#32;__tilesize,&#32;__r,&#32;__tilesize,&#32;__reduce,&#32;__combine);&#32;},
312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[=]&#32;{
313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____tbb__backend_1ac07922e1fd589396a2fa41616cdf6cc6">__tbb_backend::__upsweep</link>(__i&#32;+&#32;__k,&#32;__m&#32;-&#32;__k,&#32;__tilesize,&#32;__r&#32;+&#32;__k,&#32;__lastsize,&#32;__reduce,&#32;__combine);
314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__m&#32;==&#32;2&#32;*&#32;__k)
316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__r[__m&#32;-&#32;1]&#32;=&#32;__combine(__r[__k&#32;-&#32;1],&#32;__r[__m&#32;-&#32;1]);
317 &#32;&#32;&#32;&#32;}
318 }
319 
320 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Index,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sp&gt;
321 <emphasis role="keywordtype">void</emphasis>
322 <link linkend="_namespace____pstl_1_1____tbb__backend_1ac78e1043be34a9e5923c89e5af1eb37e">__downsweep</link>(_Index&#32;__i,&#32;_Index&#32;__m,&#32;_Index&#32;__tilesize,&#32;_Tp*&#32;__r,&#32;_Index&#32;__lastsize,&#32;_Tp&#32;__initial,&#32;_Cp&#32;__combine,
323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Sp&#32;__scan)
324 {
325 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__m&#32;==&#32;1)
326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__scan(__i&#32;*&#32;__tilesize,&#32;__lastsize,&#32;__initial);
327 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
328 &#32;&#32;&#32;&#32;{
329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Index&#32;__k&#32;=&#32;<link linkend="_namespace____pstl_1_1____tbb__backend_1a412bd21d61e578eab6a5afe510c8f07d">__split</link>(__m);
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tbb::parallel_invoke(
331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[=]&#32;{&#32;<link linkend="_namespace____pstl_1_1____tbb__backend_1ac78e1043be34a9e5923c89e5af1eb37e">__tbb_backend::__downsweep</link>(__i,&#32;__k,&#32;__tilesize,&#32;__r,&#32;__tilesize,&#32;__initial,&#32;__combine,&#32;__scan);&#32;},
332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assumes&#32;that&#32;__combine&#32;never&#32;throws.</emphasis>
333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//TODO:&#32;Consider&#32;adding&#32;a&#32;requirement&#32;for&#32;user&#32;functors&#32;to&#32;be&#32;constant.</emphasis>
334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[=,&#32;&amp;__combine]&#32;{
335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____tbb__backend_1ac78e1043be34a9e5923c89e5af1eb37e">__tbb_backend::__downsweep</link>(__i&#32;+&#32;__k,&#32;__m&#32;-&#32;__k,&#32;__tilesize,&#32;__r&#32;+&#32;__k,&#32;__lastsize,
336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__combine(__initial,&#32;__r[__k&#32;-&#32;1]),&#32;__combine,&#32;__scan);
337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
338 &#32;&#32;&#32;&#32;}
339 }
340 
341 <emphasis role="comment">//&#32;Adapted&#32;from&#32;Intel(R)&#32;Cilk(TM)&#32;version&#32;from&#32;cilkpub.</emphasis>
342 <emphasis role="comment">//&#32;Let&#32;i:len&#32;denote&#32;a&#32;counted&#32;interval&#32;of&#32;length&#32;n&#32;starting&#32;at&#32;i.&#32;&#32;s&#32;denotes&#32;a&#32;generalized-sum&#32;value.</emphasis>
343 <emphasis role="comment">//&#32;Expected&#32;actions&#32;of&#32;the&#32;functors&#32;are:</emphasis>
344 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;reduce(i,len)&#32;-&gt;&#32;s&#32;&#32;--&#32;return&#32;reduction&#32;value&#32;of&#32;i:len.</emphasis>
345 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;combine(s1,s2)&#32;-&gt;&#32;s&#32;--&#32;return&#32;merged&#32;sum</emphasis>
346 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;apex(s)&#32;--&#32;do&#32;any&#32;processing&#32;necessary&#32;between&#32;reduce&#32;and&#32;scan.</emphasis>
347 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;scan(i,len,initial)&#32;--&#32;perform&#32;scan&#32;over&#32;i:len&#32;starting&#32;with&#32;initial.</emphasis>
348 <emphasis role="comment">//&#32;The&#32;initial&#32;range&#32;0:n&#32;is&#32;partitioned&#32;into&#32;consecutive&#32;subranges.</emphasis>
349 <emphasis role="comment">//&#32;reduce&#32;and&#32;scan&#32;are&#32;each&#32;called&#32;exactly&#32;once&#32;per&#32;subrange.</emphasis>
350 <emphasis role="comment">//&#32;Thus&#32;callers&#32;can&#32;rely&#32;upon&#32;side&#32;effects&#32;in&#32;reduce.</emphasis>
351 <emphasis role="comment">//&#32;combine&#32;must&#32;not&#32;throw&#32;an&#32;exception.</emphasis>
352 <emphasis role="comment">//&#32;apex&#32;is&#32;called&#32;exactly&#32;once,&#32;after&#32;all&#32;calls&#32;to&#32;reduce&#32;and&#32;before&#32;all&#32;calls&#32;to&#32;scan.</emphasis>
353 <emphasis role="comment">//&#32;For&#32;example,&#32;it&apos;s&#32;useful&#32;for&#32;allocating&#32;a&#32;__buffer&#32;used&#32;by&#32;scan&#32;but&#32;whose&#32;size&#32;is&#32;the&#32;sum&#32;of&#32;all&#32;reduction&#32;values.</emphasis>
354 <emphasis role="comment">//&#32;T&#32;must&#32;have&#32;a&#32;trivial&#32;constructor&#32;and&#32;destructor.</emphasis>
355 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Index,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap&gt;
356 <emphasis role="keywordtype">void</emphasis>
357 <link linkend="_namespace____pstl_1_1____tbb__backend_1aad41a532e4a5fc9713ff8da06b89f6d1">__parallel_strict_scan</link>(_ExecutionPolicy&amp;&amp;,&#32;_Index&#32;__n,&#32;_Tp&#32;__initial,&#32;_Rp&#32;__reduce,&#32;_Cp&#32;__combine,&#32;_Sp&#32;__scan,
358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Ap&#32;__apex)
359 {
360 &#32;&#32;&#32;&#32;tbb::this_task_arena::isolate([=,&#32;&amp;__combine]()&#32;{
361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&gt;&#32;1)
362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Index&#32;__p&#32;=&#32;tbb::this_task_arena::max_concurrency();
364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Index&#32;__slack&#32;=&#32;4;
365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Index&#32;__tilesize&#32;=&#32;(__n&#32;-&#32;1)&#32;/&#32;(__slack&#32;*&#32;__p)&#32;+&#32;1;
366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Index&#32;__m&#32;=&#32;(__n&#32;-&#32;1)&#32;/&#32;__tilesize;
367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__buffer&lt;_Tp&gt;&#32;__buf(__m&#32;+&#32;1);
368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;__r&#32;=&#32;__buf.get();
369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____tbb__backend_1ac07922e1fd589396a2fa41616cdf6cc6">__tbb_backend::__upsweep</link>(_Index(0),&#32;_Index(__m&#32;+&#32;1),&#32;__tilesize,&#32;__r,&#32;__n&#32;-&#32;__m&#32;*&#32;__tilesize,&#32;__reduce,
370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__combine);
371 
372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;When&#32;__apex&#32;is&#32;a&#32;no-op&#32;and&#32;__combine&#32;has&#32;no&#32;side&#32;effects,&#32;a&#32;good&#32;optimizer</emphasis>
373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;should&#32;be&#32;able&#32;to&#32;eliminate&#32;all&#32;code&#32;between&#32;here&#32;and&#32;__apex.</emphasis>
374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Alternatively,&#32;provide&#32;a&#32;default&#32;value&#32;for&#32;__apex&#32;that&#32;can&#32;be</emphasis>
375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;recognized&#32;by&#32;metaprogramming&#32;that&#32;conditionlly&#32;executes&#32;the&#32;following.</emphasis>
376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__k&#32;=&#32;__m&#32;+&#32;1;
377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;__t&#32;=&#32;__r[__k&#32;-&#32;1];
378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;((__k&#32;&amp;=&#32;__k&#32;-&#32;1))
379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__t&#32;=&#32;__combine(__r[__k&#32;-&#32;1],&#32;__t);
380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__apex(__combine(__initial,&#32;__t));
381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____tbb__backend_1ac78e1043be34a9e5923c89e5af1eb37e">__tbb_backend::__downsweep</link>(_Index(0),&#32;_Index(__m&#32;+&#32;1),&#32;__tilesize,&#32;__r,&#32;__n&#32;-&#32;__m&#32;*&#32;__tilesize,&#32;__initial,
382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__combine,&#32;__scan);
383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Fewer&#32;than&#32;2&#32;elements&#32;in&#32;sequence,&#32;or&#32;out&#32;of&#32;memory.&#32;&#32;Handle&#32;has&#32;single&#32;block.</emphasis>
386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;__sum&#32;=&#32;__initial;
387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n)
388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sum&#32;=&#32;__combine(__sum,&#32;__reduce(_Index(0),&#32;__n));
389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__apex(__sum);
390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n)
391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__scan(_Index(0),&#32;__n,&#32;__initial);
392 &#32;&#32;&#32;&#32;});
393 }
394 
395 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_Index,&#32;<emphasis role="keyword">class</emphasis>&#32;_Up,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">class</emphasis>&#32;_Cp,&#32;<emphasis role="keyword">class</emphasis>&#32;_Rp,&#32;<emphasis role="keyword">class</emphasis>&#32;_Sp&gt;
396 _Tp
397 <link linkend="_namespace____pstl_1_1____tbb__backend_1a35e5a2ca33d8474d4f761aefdc3c4b2e">__parallel_transform_scan</link>(_ExecutionPolicy&amp;&amp;,&#32;_Index&#32;__n,&#32;_Up&#32;__u,&#32;_Tp&#32;__init,&#32;_Cp&#32;__combine,&#32;_Rp&#32;__brick_reduce,
398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Sp&#32;__scan)
399 {
400 &#32;&#32;&#32;&#32;__trans_scan_body&lt;_Index,&#32;_Up,&#32;_Tp,&#32;_Cp,&#32;_Rp,&#32;_Sp&gt;&#32;__body(__u,&#32;__init,&#32;__combine,&#32;__brick_reduce,&#32;__scan);
401 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__range&#32;=&#32;tbb::blocked_range&lt;_Index&gt;(0,&#32;__n);
402 &#32;&#32;&#32;&#32;tbb::this_task_arena::isolate([__range,&#32;&amp;__body]()&#32;{&#32;tbb::parallel_scan(__range,&#32;__body);&#32;});
403 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__body.sum();
404 }
405 
406 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
407 <emphasis role="comment">//&#32;parallel_stable_sort</emphasis>
408 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
409 
410 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
411 <emphasis role="comment">//&#32;stable_sort&#32;utilities</emphasis>
412 <emphasis role="comment">//</emphasis>
413 <emphasis role="comment">//&#32;These&#32;are&#32;used&#32;by&#32;parallel&#32;implementations&#32;but&#32;do&#32;not&#32;depend&#32;on&#32;them.</emphasis>
414 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
415 <emphasis role="preprocessor">#define&#32;_PSTL_MERGE_CUT_OFF&#32;2000</emphasis>
416 
417 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Func&gt;
418 <emphasis role="keyword">class&#32;</emphasis>__func_task;
419 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Func&gt;
420 <emphasis role="keyword">class&#32;</emphasis>__root_task;
421 
422 <emphasis role="preprocessor">#if&#32;TBB_INTERFACE_VERSION&#32;&lt;=&#32;12000</emphasis>
423 <emphasis role="keyword">class&#32;</emphasis>__task&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;tbb::task
424 {
425 &#32;&#32;<emphasis role="keyword">public</emphasis>:
426 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Fn&gt;
427 &#32;&#32;&#32;&#32;__task*
428 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____task_1adcb063a69a17d5f5d98ac09ebed8e0c0">make_continuation</link>(_Fn&amp;&amp;&#32;__f)
429 &#32;&#32;&#32;&#32;{
430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;(allocate_continuation())&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____func__task">__func_task</link>&lt;<emphasis role="keyword">typename</emphasis>&#32;std::decay&lt;_Fn&gt;::type&gt;(std::forward&lt;_Fn&gt;(__f));
431 &#32;&#32;&#32;&#32;}
432 
433 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Fn&gt;
434 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____task">__task</link>*
435 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____task_1a2c2c50a71e43ce8cc8d1454abbfea4e5">make_child_of</link>(<link linkend="_class____pstl_1_1____tbb__backend_1_1____task">__task</link>*&#32;parent,&#32;_Fn&amp;&amp;&#32;__f)
436 &#32;&#32;&#32;&#32;{
437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;(parent-&gt;allocate_child())&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____func__task">__func_task</link>&lt;<emphasis role="keyword">typename</emphasis>&#32;std::decay&lt;_Fn&gt;::type&gt;(std::forward&lt;_Fn&gt;(__f));
438 &#32;&#32;&#32;&#32;}
439 
440 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Fn&gt;
441 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____task">__task</link>*
442 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____task_1acef9934f613941da92f256d0afa2f32e">make_additional_child_of</link>(tbb::task*&#32;parent,&#32;_Fn&amp;&amp;&#32;__f)
443 &#32;&#32;&#32;&#32;{
444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;(tbb::task::allocate_additional_child_of(*parent))
445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____func__task">__func_task</link>&lt;<emphasis role="keyword">typename</emphasis>&#32;std::decay&lt;_Fn&gt;::type&gt;(std::forward&lt;_Fn&gt;(__f));
446 &#32;&#32;&#32;&#32;}
447 
448 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
449 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____task_1abb49e6eaa41b657f5bc325e87a613f6b">recycle_as_continuation</link>()
450 &#32;&#32;&#32;&#32;{
451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tbb::task::recycle_as_continuation();
452 &#32;&#32;&#32;&#32;}
453 
454 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
455 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____task_1a0bc9e779be42b8bdfa70b53f7715d618">recycle_as_child_of</link>(<link linkend="_class____pstl_1_1____tbb__backend_1_1____task">__task</link>*&#32;parent)
456 &#32;&#32;&#32;&#32;{
457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tbb::task::recycle_as_child_of(*parent);
458 &#32;&#32;&#32;&#32;}
459 
460 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
461 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____task_1a461df97d741617cd512582b410ad486a">spawn</link>(<link linkend="_class____pstl_1_1____tbb__backend_1_1____task">__task</link>*&#32;__t)
462 &#32;&#32;&#32;&#32;{
463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tbb::task::spawn(*__t);
464 &#32;&#32;&#32;&#32;}
465 
466 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Fn&gt;
467 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
468 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____task_1a9e0f11077ac28313dab50b15dfb56c9f">spawn_root_and_wait</link>(<link linkend="_class____pstl_1_1____tbb__backend_1_1____root__task">__root_task&lt;_Fn&gt;</link>&amp;&#32;__root)
469 &#32;&#32;&#32;&#32;{
470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tbb::task::spawn_root_and_wait(*__root._M_task);
471 &#32;&#32;&#32;&#32;}
472 };
473 
474 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Func&gt;
475 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class____pstl_1_1____tbb__backend_1_1____func__task">__func_task</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____task">__task</link>
476 {
477 &#32;&#32;&#32;&#32;_Func&#32;_M_func;
478 
479 &#32;&#32;&#32;&#32;tbb::task*
480 &#32;&#32;&#32;&#32;execute()
481 &#32;&#32;&#32;&#32;{
482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_func(<emphasis role="keyword">this</emphasis>);
483 &#32;&#32;&#32;&#32;};
484 
485 &#32;&#32;<emphasis role="keyword">public</emphasis>:
486 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Fn&gt;
487 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____func__task_1ad129a90f0efac6f9097a02bf4417bed8">__func_task</link>(_Fn&amp;&amp;&#32;__f)&#32;:&#32;_M_func{<link linkend="_namespacestd">std</link>::forward&lt;_Fn&gt;(__f)}
488 &#32;&#32;&#32;&#32;{
489 &#32;&#32;&#32;&#32;}
490 
491 &#32;&#32;&#32;&#32;_Func&amp;
492 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____func__task_1ace88ab7a1cbb94a0247f0eddf4857aaf">body</link>()
493 &#32;&#32;&#32;&#32;{
494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_func;
495 &#32;&#32;&#32;&#32;}
496 };
497 
498 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Func&gt;
499 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class____pstl_1_1____tbb__backend_1_1____root__task">__root_task</link>
500 {
501 &#32;&#32;&#32;&#32;tbb::task*&#32;_M_task;
502 
503 &#32;&#32;<emphasis role="keyword">public</emphasis>:
504 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;Args&gt;
505 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____root__task_1a7bc53e1c183207992c6f09b04f49b49f">__root_task</link>(Args&amp;&amp;...&#32;args)
506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_task{new&#32;(tbb::task::allocate_root())&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____func__task">__func_task</link>&lt;_Func&gt;{_Func(std::forward&lt;Args&gt;(args)...)}}
507 &#32;&#32;&#32;&#32;{
508 &#32;&#32;&#32;&#32;}
509 
510 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>__task;
511 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>__func_task&lt;_Func&gt;;
512 };
513 
514 <emphasis role="preprocessor">#else&#32;&#32;</emphasis><emphasis role="comment">//&#32;TBB_INTERFACE_VERSION&#32;&lt;=&#32;12000</emphasis>
515 <emphasis role="keyword">class&#32;</emphasis>__task&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;tbb::detail::d1::task
516 {
517 &#32;&#32;<emphasis role="keyword">protected</emphasis>:
518 &#32;&#32;&#32;&#32;tbb::detail::d1::small_object_allocator&#32;_M_allocator{};
519 &#32;&#32;&#32;&#32;tbb::detail::d1::execution_data*&#32;_M_execute_data{};
520 &#32;&#32;&#32;&#32;__task*&#32;_M_parent{};
521 &#32;&#32;&#32;&#32;std::atomic&lt;int&gt;&#32;_M_refcount{};
522 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_M_recycle{};
523 
524 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Fn&gt;
525 &#32;&#32;&#32;&#32;__task*
526 &#32;&#32;&#32;&#32;allocate_func_task(_Fn&amp;&amp;&#32;__f)
527 &#32;&#32;&#32;&#32;{
528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_PSTL_ASSERT(_M_execute_data&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tbb::detail::d1::small_object_allocator&#32;__alloc{};
530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__t&#32;=
531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__alloc.new_object&lt;__func_task&lt;typename&#32;std::decay&lt;_Fn&gt;::type&gt;&gt;(*_M_execute_data,&#32;std::forward&lt;_Fn&gt;(__f));
532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__t-&gt;_M_allocator&#32;=&#32;__alloc;
533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__t;
534 &#32;&#32;&#32;&#32;}
535 
536 &#32;&#32;<emphasis role="keyword">public</emphasis>:
537 &#32;&#32;&#32;&#32;__task*
538 &#32;&#32;&#32;&#32;parent()
539 &#32;&#32;&#32;&#32;{
540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_parent;
541 &#32;&#32;&#32;&#32;}
542 
543 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
544 &#32;&#32;&#32;&#32;set_ref_count(<emphasis role="keywordtype">int</emphasis>&#32;__n)
545 &#32;&#32;&#32;&#32;{
546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_refcount.store(__n,&#32;std::memory_order_release);
547 &#32;&#32;&#32;&#32;}
548 
549 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Fn&gt;
550 &#32;&#32;&#32;&#32;__task*
551 &#32;&#32;&#32;&#32;make_continuation(_Fn&amp;&amp;&#32;__f)
552 &#32;&#32;&#32;&#32;{
553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__t&#32;=&#32;allocate_func_task(std::forward&lt;_Fn&amp;&amp;&gt;(__f));
554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__t-&gt;_M_parent&#32;=&#32;_M_parent;
555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_parent&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__t;
557 &#32;&#32;&#32;&#32;}
558 
559 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Fn&gt;
560 &#32;&#32;&#32;&#32;__task*
561 &#32;&#32;&#32;&#32;make_child_of(__task*&#32;__parent,&#32;_Fn&amp;&amp;&#32;__f)
562 &#32;&#32;&#32;&#32;{
563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__t&#32;=&#32;allocate_func_task(std::forward&lt;_Fn&amp;&amp;&gt;(__f));
564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__t-&gt;_M_parent&#32;=&#32;__parent;
565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__t;
566 &#32;&#32;&#32;&#32;}
567 
568 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Fn&gt;
569 &#32;&#32;&#32;&#32;__task*
570 &#32;&#32;&#32;&#32;make_additional_child_of(__task*&#32;__parent,&#32;_Fn&amp;&amp;&#32;__f)
571 &#32;&#32;&#32;&#32;{
572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__t&#32;=&#32;make_child_of(__parent,&#32;std::forward&lt;_Fn&gt;(__f));
573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_PSTL_ASSERT(__parent-&gt;_M_refcount.load(std::memory_order_relaxed)&#32;&gt;&#32;0);
574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__parent-&gt;_M_refcount;
575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__t;
576 &#32;&#32;&#32;&#32;}
577 
578 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
579 &#32;&#32;&#32;&#32;recycle_as_continuation()
580 &#32;&#32;&#32;&#32;{
581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_recycle&#32;=&#32;<emphasis role="keyword">true</emphasis>;
582 &#32;&#32;&#32;&#32;}
583 
584 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
585 &#32;&#32;&#32;&#32;recycle_as_child_of(__task*&#32;parent)
586 &#32;&#32;&#32;&#32;{
587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_recycle&#32;=&#32;<emphasis role="keyword">true</emphasis>;
588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_parent&#32;=&#32;parent;
589 &#32;&#32;&#32;&#32;}
590 
591 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
592 &#32;&#32;&#32;&#32;spawn(__task*&#32;__t)
593 &#32;&#32;&#32;&#32;{
594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_PSTL_ASSERT(_M_execute_data&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tbb::detail::d1::spawn(*__t,&#32;*_M_execute_data-&gt;context);
596 &#32;&#32;&#32;&#32;}
597 
598 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Fn&gt;
599 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
600 &#32;&#32;&#32;&#32;spawn_root_and_wait(__root_task&lt;_Fn&gt;&amp;&#32;__root)
601 &#32;&#32;&#32;&#32;{
602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tbb::detail::d1::execute_and_wait(*__root._M_func_task,&#32;__root._M_context,&#32;__root._M_wait_object,
603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__root._M_context);
604 &#32;&#32;&#32;&#32;}
605 
606 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Func&gt;
607 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>__func_task;
608 };
609 
610 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Func&gt;
611 <emphasis role="keyword">class&#32;</emphasis>__func_task&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__task
612 {
613 &#32;&#32;&#32;&#32;_Func&#32;_M_func;
614 
615 &#32;&#32;&#32;&#32;__task*
616 &#32;&#32;&#32;&#32;execute(tbb::detail::d1::execution_data&amp;&#32;__ed)<emphasis role="keyword">&#32;override</emphasis>
617 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_execute_data&#32;=&#32;&amp;__ed;
619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_recycle&#32;=&#32;<emphasis role="keyword">false</emphasis>;
620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__task*&#32;__next&#32;=&#32;_M_func(<emphasis role="keyword">this</emphasis>);
621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;finalize(__next);
622 &#32;&#32;&#32;&#32;};
623 
624 &#32;&#32;&#32;&#32;__task*
625 &#32;&#32;&#32;&#32;cancel(tbb::detail::d1::execution_data&amp;&#32;__ed)<emphasis role="keyword">&#32;override</emphasis>
626 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;finalize(<emphasis role="keyword">nullptr</emphasis>);
628 &#32;&#32;&#32;&#32;}
629 
630 &#32;&#32;&#32;&#32;__task*
631 &#32;&#32;&#32;&#32;finalize(__task*&#32;__next)
632 &#32;&#32;&#32;&#32;{
633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__recycle&#32;=&#32;_M_recycle;
634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_recycle&#32;=&#32;<emphasis role="keyword">false</emphasis>;
635 
636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__recycle)
637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__next;
639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
640 
641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__parent&#32;=&#32;_M_parent;
642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__alloc&#32;=&#32;_M_allocator;
643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__ed&#32;=&#32;_M_execute_data;
644 
645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;~__func_task();
646 
647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_PSTL_ASSERT(__parent&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_PSTL_ASSERT(__parent-&gt;_M_refcount.load(std::memory_order_relaxed)&#32;&gt;&#32;0);
649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(--__parent-&gt;_M_refcount&#32;==&#32;0)
650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_PSTL_ASSERT(__next&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>);
652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__alloc.deallocate(<emphasis role="keyword">this</emphasis>,&#32;*__ed);
653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__parent;
654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
655 
656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__next;
657 &#32;&#32;&#32;&#32;}
658 
659 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>__root_task&lt;_Func&gt;;
660 
661 &#32;&#32;<emphasis role="keyword">public</emphasis>:
662 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Fn&gt;
663 &#32;&#32;&#32;&#32;__func_task(_Fn&amp;&amp;&#32;__f)&#32;:&#32;_M_func(<link linkend="_namespacestd">std</link>::forward&lt;_Fn&gt;(__f))
664 &#32;&#32;&#32;&#32;{
665 &#32;&#32;&#32;&#32;}
666 
667 &#32;&#32;&#32;&#32;_Func&amp;
668 &#32;&#32;&#32;&#32;body()
669 &#32;&#32;&#32;&#32;{
670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_func;
671 &#32;&#32;&#32;&#32;}
672 };
673 
674 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Func&gt;
675 <emphasis role="keyword">class&#32;</emphasis>__root_task&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__task
676 {
677 &#32;&#32;&#32;&#32;__task*
678 &#32;&#32;&#32;&#32;execute(tbb::detail::d1::execution_data&amp;&#32;__ed)<emphasis role="keyword">&#32;override</emphasis>
679 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_wait_object.release();
681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
682 &#32;&#32;&#32;&#32;};
683 
684 &#32;&#32;&#32;&#32;__task*
685 &#32;&#32;&#32;&#32;cancel(tbb::detail::d1::execution_data&amp;&#32;__ed)<emphasis role="keyword">&#32;override</emphasis>
686 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_wait_object.release();
688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
689 &#32;&#32;&#32;&#32;}
690 
691 &#32;&#32;&#32;&#32;__func_task&lt;_Func&gt;*&#32;_M_func_task{};
692 &#32;&#32;&#32;&#32;tbb::detail::d1::wait_context&#32;_M_wait_object{0};
693 &#32;&#32;&#32;&#32;tbb::task_group_context&#32;_M_context{};
694 
695 &#32;&#32;<emphasis role="keyword">public</emphasis>:
696 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;Args&gt;
697 &#32;&#32;&#32;&#32;__root_task(Args&amp;&amp;...&#32;args)&#32;:&#32;_M_wait_object{1}
698 &#32;&#32;&#32;&#32;{
699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tbb::detail::d1::small_object_allocator&#32;__alloc{};
700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_func_task&#32;=&#32;__alloc.new_object&lt;__func_task&lt;_Func&gt;&gt;(_Func(std::forward&lt;Args&gt;(args)...));
701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_func_task-&gt;_M_allocator&#32;=&#32;__alloc;
702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_func_task-&gt;_M_parent&#32;=&#32;<emphasis role="keyword">this</emphasis>;
703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_refcount.store(1,&#32;std::memory_order_relaxed);
704 &#32;&#32;&#32;&#32;}
705 
706 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>__task;
707 };
708 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TBB_INTERFACE_VERSION&#32;&lt;=&#32;12000</emphasis>
709 
710 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cleanup,
711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_LeafMerge&gt;
712 <emphasis role="keyword">class&#32;</emphasis>__merge_func
713 {
714 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_RandomAccessIterator1&gt;::difference_type&#32;_DifferenceType1;
715 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_RandomAccessIterator2&gt;::difference_type&#32;_DifferenceType2;
716 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::common_type&lt;_DifferenceType1,&#32;_DifferenceType2&gt;::type&#32;_SizeType;
717 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_RandomAccessIterator1&gt;::value_type&#32;_ValueType;
718 
719 &#32;&#32;&#32;&#32;_RandomAccessIterator1&#32;_M_x_beg;
720 &#32;&#32;&#32;&#32;_RandomAccessIterator2&#32;_M_z_beg;
721 
722 &#32;&#32;&#32;&#32;_SizeType&#32;_M_xs,&#32;_M_xe;
723 &#32;&#32;&#32;&#32;_SizeType&#32;_M_ys,&#32;_M_ye;
724 &#32;&#32;&#32;&#32;_SizeType&#32;_M_zs;
725 &#32;&#32;&#32;&#32;_Compare&#32;_M_comp;
726 &#32;&#32;&#32;&#32;_LeafMerge&#32;_M_leaf_merge;
727 &#32;&#32;&#32;&#32;_SizeType&#32;_M_nsort;&#32;<emphasis role="comment">//number&#32;of&#32;elements&#32;to&#32;be&#32;sorted&#32;for&#32;partial_sort&#32;alforithm</emphasis>
728 
729 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_SizeType&#32;__merge_cut_off&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2pstl_2parallel__backend__tbb_8h_1af869ba400ecc0d93c30063ce85199f6c">_PSTL_MERGE_CUT_OFF</link>;
730 
731 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_root;&#32;&#32;&#32;<emphasis role="comment">//means&#32;a&#32;task&#32;is&#32;merging&#32;root&#32;task</emphasis>
732 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_x_orig;&#32;<emphasis role="comment">//&quot;true&quot;&#32;means&#32;X(or&#32;left&#32;)&#32;subrange&#32;is&#32;in&#32;the&#32;original&#32;container;&#32;false&#32;-&#32;in&#32;the&#32;buffer</emphasis>
733 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_y_orig;&#32;<emphasis role="comment">//&quot;true&quot;&#32;means&#32;Y(or&#32;right)&#32;subrange&#32;is&#32;in&#32;the&#32;original&#32;container;&#32;false&#32;-&#32;in&#32;the&#32;buffer</emphasis>
734 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_split;&#32;<emphasis role="comment">//&quot;true&quot;&#32;means&#32;a&#32;merge&#32;task&#32;is&#32;a&#32;split&#32;task&#32;for&#32;parallel&#32;merging,&#32;the&#32;execution&#32;logic&#32;differs</emphasis>
735 
736 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
737 &#32;&#32;&#32;&#32;is_partial()<emphasis role="keyword">&#32;const</emphasis>
738 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_nsort&#32;&gt;&#32;0;
740 &#32;&#32;&#32;&#32;}
741 
742 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__move_value
743 &#32;&#32;&#32;&#32;{
744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Iterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;Iterator2&gt;
745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;operator()(Iterator1&#32;__x,&#32;Iterator2&#32;__z)
747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__z&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(*__x);
749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
750 &#32;&#32;&#32;&#32;};
751 
752 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__move_value_construct
753 &#32;&#32;&#32;&#32;{
754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Iterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;Iterator2&gt;
755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;operator()(Iterator1&#32;__x,&#32;Iterator2&#32;__z)
757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::new&#32;(std::addressof(*__z))&#32;_ValueType(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(*__x));
759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
760 &#32;&#32;&#32;&#32;};
761 
762 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__move_range
763 &#32;&#32;&#32;&#32;{
764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Iterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;Iterator2&gt;
765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Iterator2
766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;operator()(Iterator1&#32;__first1,&#32;Iterator1&#32;__last1,&#32;Iterator2&#32;__first2)
767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__last1&#32;-&#32;__first1&#32;&lt;&#32;__merge_cut_off)
769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first1,&#32;__last1,&#32;__first2);
770 
771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__n&#32;=&#32;__last1&#32;-&#32;__first1;
772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tbb::parallel_for(tbb::blocked_range&lt;_SizeType&gt;(0,&#32;__n,&#32;__merge_cut_off),
773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__first1,&#32;__first2](<emphasis role="keyword">const</emphasis>&#32;tbb::blocked_range&lt;_SizeType&gt;&amp;&#32;__range)&#32;{
774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first1&#32;+&#32;__range.begin(),&#32;__first1&#32;+&#32;__range.end(),
775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first2&#32;+&#32;__range.begin());
776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first2&#32;+&#32;__n;
778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
779 &#32;&#32;&#32;&#32;};
780 
781 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__move_range_construct
782 &#32;&#32;&#32;&#32;{
783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Iterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;Iterator2&gt;
784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Iterator2
785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;operator()(Iterator1&#32;__first1,&#32;Iterator1&#32;__last1,&#32;Iterator2&#32;__first2)
786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__last1&#32;-&#32;__first1&#32;&lt;&#32;__merge_cut_off)
788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first1&#32;!=&#32;__last1;&#32;++__first1,&#32;++__first2)
790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__move_value_construct()(__first1,&#32;__first2);
791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first2;
792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
793 
794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__n&#32;=&#32;__last1&#32;-&#32;__first1;
795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tbb::parallel_for(tbb::blocked_range&lt;_SizeType&gt;(0,&#32;__n,&#32;__merge_cut_off),
796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__first1,&#32;__first2](<emphasis role="keyword">const</emphasis>&#32;tbb::blocked_range&lt;_SizeType&gt;&amp;&#32;__range)&#32;{
797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;i&#32;=&#32;__range.begin();&#32;i&#32;!=&#32;__range.end();&#32;++i)
798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__move_value_construct()(__first1&#32;+&#32;i,&#32;__first2&#32;+&#32;i);
799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first2&#32;+&#32;__n;
801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
802 &#32;&#32;&#32;&#32;};
803 
804 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__cleanup_range
805 &#32;&#32;&#32;&#32;{
806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Iterator&gt;
807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;operator()(Iterator&#32;__first,&#32;Iterator&#32;__last)
809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__last&#32;-&#32;__first&#32;&lt;&#32;__merge_cut_off)
811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Cleanup()(__first,&#32;__last);
812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__n&#32;=&#32;__last&#32;-&#32;__first;
815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tbb::parallel_for(tbb::blocked_range&lt;_SizeType&gt;(0,&#32;__n,&#32;__merge_cut_off),
816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__first](<emphasis role="keyword">const</emphasis>&#32;tbb::blocked_range&lt;_SizeType&gt;&amp;&#32;__range)&#32;{
817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Cleanup()(__first&#32;+&#32;__range.begin(),&#32;__first&#32;+&#32;__range.end());
818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
821 &#32;&#32;&#32;&#32;};
822 
823 &#32;&#32;<emphasis role="keyword">public</emphasis>:
824 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____merge__func_1ad70838187f992556274f4ad60d5abccd">__merge_func</link>(_SizeType&#32;__xs,&#32;_SizeType&#32;__xe,&#32;_SizeType&#32;__ys,&#32;_SizeType&#32;__ye,&#32;_SizeType&#32;__zs,&#32;_Compare&#32;__comp,
825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Cleanup,&#32;_LeafMerge&#32;__leaf_merge,&#32;_SizeType&#32;__nsort,&#32;_RandomAccessIterator1&#32;__x_beg,
826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator2&#32;__z_beg,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__x_orig,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__y_orig,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__root)
827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_xs(__xs),&#32;_M_xe(__xe),&#32;_M_ys(__ys),&#32;_M_ye(__ye),&#32;_M_zs(__zs),&#32;_M_x_beg(__x_beg),&#32;_M_z_beg(__z_beg),
828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_comp(__comp),&#32;_M_leaf_merge(__leaf_merge),&#32;_M_nsort(__nsort),&#32;_root(__root),
829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_x_orig(__x_orig),&#32;_y_orig(__y_orig),&#32;_split(<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)
830 &#32;&#32;&#32;&#32;{
831 &#32;&#32;&#32;&#32;}
832 
833 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
834 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____merge__func_1a522a6348cd3d14ef1885e45b6107c3f6">is_left</link>(_SizeType&#32;__idx)<emphasis role="keyword">&#32;const</emphasis>
835 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_xs&#32;==&#32;__idx;
837 &#32;&#32;&#32;&#32;}
838 
839 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;IndexType&gt;
840 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
841 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____merge__func_1afc24fae571f75b8f9aa700d18de319a6">set_odd</link>(IndexType&#32;__idx,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__on_off)
842 &#32;&#32;&#32;&#32;{
843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is_left(__idx))
844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_x_orig&#32;=&#32;__on_off;
845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_y_orig&#32;=&#32;__on_off;
847 &#32;&#32;&#32;&#32;}
848 
849 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____task">__task</link>*
850 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____merge__func_1aa2e0ca38a43a3d5d80cc3533df4ea90b">operator()</link>(<link linkend="_class____pstl_1_1____tbb__backend_1_1____task">__task</link>*&#32;__self);
851 
852 &#32;&#32;<emphasis role="keyword">private</emphasis>:
853 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____merge__func">__merge_func</link>*
854 &#32;&#32;&#32;&#32;parent_merge(<link linkend="_class____pstl_1_1____tbb__backend_1_1____task">__task</link>*&#32;__self)<emphasis role="keyword">&#32;const</emphasis>
855 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_root&#32;?&#32;nullptr&#32;:&#32;&amp;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_class____pstl_1_1____tbb__backend_1_1____func__task">__func_task&lt;__merge_func&gt;</link>*<emphasis role="keyword">&gt;</emphasis>(__self-&gt;parent())-&gt;body();
857 &#32;&#32;&#32;&#32;}
858 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
859 &#32;&#32;&#32;&#32;x_less_y()
860 &#32;&#32;&#32;&#32;{
861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__nx&#32;=&#32;(_M_xe&#32;-&#32;_M_xs);
862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__ny&#32;=&#32;(_M_ye&#32;-&#32;_M_ys);
863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_PSTL_ASSERT(__nx&#32;&gt;&#32;0&#32;&amp;&amp;&#32;__ny&#32;&gt;&#32;0);
864 
865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_PSTL_ASSERT(_x_orig&#32;==&#32;_y_orig);
866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_PSTL_ASSERT(!is_partial());
867 
868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_x_orig)
869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_PSTL_ASSERT(<link linkend="_namespacestd_1a042892d225ddbeba3c9cbd839dba38a9">std::is_sorted</link>(_M_x_beg&#32;+&#32;_M_xs,&#32;_M_x_beg&#32;+&#32;_M_xe,&#32;_M_comp));
871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_PSTL_ASSERT(<link linkend="_namespacestd_1a042892d225ddbeba3c9cbd839dba38a9">std::is_sorted</link>(_M_x_beg&#32;+&#32;_M_ys,&#32;_M_x_beg&#32;+&#32;_M_ye,&#32;_M_comp));
872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!_M_comp(*(_M_x_beg&#32;+&#32;_M_ys),&#32;*(_M_x_beg&#32;+&#32;_M_xe&#32;-&#32;1));
873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
874 
875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_PSTL_ASSERT(<link linkend="_namespacestd_1a042892d225ddbeba3c9cbd839dba38a9">std::is_sorted</link>(_M_z_beg&#32;+&#32;_M_xs,&#32;_M_z_beg&#32;+&#32;_M_xe,&#32;_M_comp));
876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_PSTL_ASSERT(<link linkend="_namespacestd_1a042892d225ddbeba3c9cbd839dba38a9">std::is_sorted</link>(_M_z_beg&#32;+&#32;_M_ys,&#32;_M_z_beg&#32;+&#32;_M_ye,&#32;_M_comp));
877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!_M_comp(*(_M_z_beg&#32;+&#32;_M_zs&#32;+&#32;__nx),&#32;*(_M_z_beg&#32;+&#32;_M_zs&#32;+&#32;__nx&#32;-&#32;1));
878 &#32;&#32;&#32;&#32;}
879 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
880 &#32;&#32;&#32;&#32;move_x_range()
881 &#32;&#32;&#32;&#32;{
882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__nx&#32;=&#32;(_M_xe&#32;-&#32;_M_xs);
883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__ny&#32;=&#32;(_M_ye&#32;-&#32;_M_ys);
884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_PSTL_ASSERT(__nx&#32;&gt;&#32;0&#32;&amp;&amp;&#32;__ny&#32;&gt;&#32;0);
885 
886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_x_orig)
887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__move_range_construct()(_M_x_beg&#32;+&#32;_M_xs,&#32;_M_x_beg&#32;+&#32;_M_xe,&#32;_M_z_beg&#32;+&#32;_M_zs);
888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__move_range()(_M_z_beg&#32;+&#32;_M_zs,&#32;_M_z_beg&#32;+&#32;_M_zs&#32;+&#32;__nx,&#32;_M_x_beg&#32;+&#32;_M_xs);
891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cleanup_range()(_M_z_beg&#32;+&#32;_M_zs,&#32;_M_z_beg&#32;+&#32;_M_zs&#32;+&#32;__nx);
892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
893 
894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_x_orig&#32;=&#32;!_x_orig;
895 &#32;&#32;&#32;&#32;}
896 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
897 &#32;&#32;&#32;&#32;move_y_range()
898 &#32;&#32;&#32;&#32;{
899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__nx&#32;=&#32;(_M_xe&#32;-&#32;_M_xs);
900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__ny&#32;=&#32;(_M_ye&#32;-&#32;_M_ys);
901 
902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_y_orig)
903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__move_range_construct()(_M_x_beg&#32;+&#32;_M_ys,&#32;_M_x_beg&#32;+&#32;_M_ye,&#32;_M_z_beg&#32;+&#32;_M_zs&#32;+&#32;__nx);
904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__move_range()(_M_z_beg&#32;+&#32;_M_zs&#32;+&#32;__nx,&#32;_M_z_beg&#32;+&#32;_M_zs&#32;+&#32;__nx&#32;+&#32;__ny,&#32;_M_x_beg&#32;+&#32;_M_ys);
907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cleanup_range()(_M_z_beg&#32;+&#32;_M_zs&#32;+&#32;__nx,&#32;_M_z_beg&#32;+&#32;_M_zs&#32;+&#32;__nx&#32;+&#32;__ny);
908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
909 
910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_y_orig&#32;=&#32;!_y_orig;
911 &#32;&#32;&#32;&#32;}
912 &#32;&#32;&#32;&#32;__task*
913 &#32;&#32;&#32;&#32;merge_ranges(__task*&#32;__self)
914 &#32;&#32;&#32;&#32;{
915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_PSTL_ASSERT(_x_orig&#32;==&#32;_y_orig);&#32;<emphasis role="comment">//two&#32;merged&#32;subrange&#32;must&#32;be&#32;lie&#32;into&#32;the&#32;same&#32;buffer</emphasis>
916 
917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__nx&#32;=&#32;(_M_xe&#32;-&#32;_M_xs);
918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__ny&#32;=&#32;(_M_ye&#32;-&#32;_M_ys);
919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__n&#32;=&#32;__nx&#32;+&#32;__ny;
920 
921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;need&#32;to&#32;merge&#32;{x}&#32;and&#32;{y}</emphasis>
922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&gt;&#32;__merge_cut_off)
923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;split_merging(__self);
924 
925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//merge&#32;to&#32;buffer</emphasis>
926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_x_orig)
927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_leaf_merge(_M_x_beg&#32;+&#32;_M_xs,&#32;_M_x_beg&#32;+&#32;_M_xe,&#32;_M_x_beg&#32;+&#32;_M_ys,&#32;_M_x_beg&#32;+&#32;_M_ye,&#32;_M_z_beg&#32;+&#32;_M_zs,
929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_comp,&#32;__move_value_construct(),&#32;__move_value_construct(),&#32;__move_range_construct(),
930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__move_range_construct());
931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_PSTL_ASSERT(parent_merge(__self));&#32;<emphasis role="comment">//not&#32;root&#32;merging&#32;task</emphasis>
932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//merge&#32;to&#32;&quot;origin&quot;</emphasis>
934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_PSTL_ASSERT(_x_orig&#32;==&#32;_y_orig);
937 
938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_PSTL_ASSERT(is_partial()&#32;||&#32;<link linkend="_namespacestd_1a042892d225ddbeba3c9cbd839dba38a9">std::is_sorted</link>(_M_z_beg&#32;+&#32;_M_xs,&#32;_M_z_beg&#32;+&#32;_M_xe,&#32;_M_comp));
939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_PSTL_ASSERT(is_partial()&#32;||&#32;<link linkend="_namespacestd_1a042892d225ddbeba3c9cbd839dba38a9">std::is_sorted</link>(_M_z_beg&#32;+&#32;_M_ys,&#32;_M_z_beg&#32;+&#32;_M_ye,&#32;_M_comp));
940 
941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__nx&#32;=&#32;(_M_xe&#32;-&#32;_M_xs);
942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__ny&#32;=&#32;(_M_ye&#32;-&#32;_M_ys);
943 
944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_leaf_merge(_M_z_beg&#32;+&#32;_M_xs,&#32;_M_z_beg&#32;+&#32;_M_xe,&#32;_M_z_beg&#32;+&#32;_M_ys,&#32;_M_z_beg&#32;+&#32;_M_ye,&#32;_M_x_beg&#32;+&#32;_M_zs,
945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_comp,&#32;__move_value(),&#32;__move_value(),&#32;__move_range(),&#32;__move_range());
946 
947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cleanup_range()(_M_z_beg&#32;+&#32;_M_xs,&#32;_M_z_beg&#32;+&#32;_M_xe);
948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cleanup_range()(_M_z_beg&#32;+&#32;_M_ys,&#32;_M_z_beg&#32;+&#32;_M_ye);
949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
951 &#32;&#32;&#32;&#32;}
952 
953 &#32;&#32;&#32;&#32;__task*
954 &#32;&#32;&#32;&#32;process_ranges(__task*&#32;__self)
955 &#32;&#32;&#32;&#32;{
956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_PSTL_ASSERT(_x_orig&#32;==&#32;_y_orig);
957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_PSTL_ASSERT(!_split);
958 
959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;p&#32;=&#32;parent_merge(__self);
960 
961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!p)
962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//root&#32;merging&#32;task</emphasis>
963 
964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//optimization,&#32;just&#32;for&#32;sort&#32;algorithm,&#32;//{x}&#32;&lt;=&#32;{y}</emphasis>
965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!is_partial()&#32;&amp;&amp;&#32;x_less_y())&#32;<emphasis role="comment">//we&#32;have&#32;a&#32;solution</emphasis>
966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_x_orig)
968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//we&#32;have&#32;to&#32;move&#32;the&#32;solution&#32;to&#32;the&#32;origin</emphasis>
969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;move_x_range();&#32;<emphasis role="comment">//parallel&#32;moving</emphasis>
970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;move_y_range();&#32;<emphasis role="comment">//parallel&#32;moving</emphasis>
971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//else:&#32;if&#32;we&#32;have&#32;data&#32;in&#32;the&#32;origin,</emphasis>
975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//we&#32;have&#32;to&#32;move&#32;data&#32;to&#32;the&#32;buffer&#32;for&#32;final&#32;merging&#32;into&#32;the&#32;origin.</emphasis>
976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_x_orig)
977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;move_x_range();&#32;<emphasis role="comment">//parallel&#32;moving</emphasis>
979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;move_y_range();&#32;<emphasis role="comment">//parallel&#32;moving</emphasis>
980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;need&#32;to&#32;merge&#32;{x}&#32;and&#32;{y}.</emphasis>
982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;merge_ranges(__self);
983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//else:&#32;not&#32;root&#32;merging&#32;task&#32;(parent_merge()&#32;==&#32;NULL)</emphasis>
985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//optimization,&#32;just&#32;for&#32;sort&#32;algorithm,&#32;//{x}&#32;&lt;=&#32;{y}</emphasis>
986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!is_partial()&#32;&amp;&amp;&#32;x_less_y())
987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;id_range&#32;=&#32;_M_zs;
989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;set_odd(id_range,&#32;_x_orig);
990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//else:&#32;we&#32;have&#32;to&#32;revert&#32;&quot;_x(y)_orig&quot;&#32;flag&#32;of&#32;the&#32;parent&#32;merging&#32;task</emphasis>
993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;id_range&#32;=&#32;_M_zs;
994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;set_odd(id_range,&#32;!_x_orig);
995 
996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;merge_ranges(__self);
997 &#32;&#32;&#32;&#32;}
998 
999 &#32;&#32;&#32;&#32;<emphasis role="comment">//splitting&#32;as&#32;merge&#32;task&#32;into&#32;2&#32;of&#32;the&#32;same&#32;level</emphasis>
1000 &#32;&#32;&#32;&#32;__task*
1001 &#32;&#32;&#32;&#32;split_merging(__task*&#32;__self)
1002 &#32;&#32;&#32;&#32;{
1003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_PSTL_ASSERT(_x_orig&#32;==&#32;_y_orig);
1004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__nx&#32;=&#32;(_M_xe&#32;-&#32;_M_xs);
1005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__ny&#32;=&#32;(_M_ye&#32;-&#32;_M_ys);
1006 
1007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SizeType&#32;__xm{};
1008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SizeType&#32;__ym{};
1009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__nx&#32;&lt;&#32;__ny)
1010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ym&#32;=&#32;_M_ys&#32;+&#32;__ny&#32;/&#32;2;
1012 
1013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_x_orig)
1014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__xm&#32;=&#32;std::upper_bound(_M_x_beg&#32;+&#32;_M_xs,&#32;_M_x_beg&#32;+&#32;_M_xe,&#32;*(_M_x_beg&#32;+&#32;__ym),&#32;_M_comp)&#32;-&#32;_M_x_beg;
1015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__xm&#32;=&#32;std::upper_bound(_M_z_beg&#32;+&#32;_M_xs,&#32;_M_z_beg&#32;+&#32;_M_xe,&#32;*(_M_z_beg&#32;+&#32;__ym),&#32;_M_comp)&#32;-&#32;_M_z_beg;
1017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__xm&#32;=&#32;_M_xs&#32;+&#32;__nx&#32;/&#32;2;
1021 
1022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_y_orig)
1023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ym&#32;=&#32;std::lower_bound(_M_x_beg&#32;+&#32;_M_ys,&#32;_M_x_beg&#32;+&#32;_M_ye,&#32;*(_M_x_beg&#32;+&#32;__xm),&#32;_M_comp)&#32;-&#32;_M_x_beg;
1024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ym&#32;=&#32;std::lower_bound(_M_z_beg&#32;+&#32;_M_ys,&#32;_M_z_beg&#32;+&#32;_M_ye,&#32;*(_M_z_beg&#32;+&#32;__xm),&#32;_M_comp)&#32;-&#32;_M_z_beg;
1026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1027 
1028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__zm&#32;=&#32;_M_zs&#32;+&#32;((__xm&#32;-&#32;_M_xs)&#32;+&#32;(__ym&#32;-&#32;_M_ys));
1029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__merge_func&#32;__right_func(__xm,&#32;_M_xe,&#32;__ym,&#32;_M_ye,&#32;__zm,&#32;_M_comp,&#32;_Cleanup(),&#32;_M_leaf_merge,&#32;_M_nsort,
1030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_x_beg,&#32;_M_z_beg,&#32;_x_orig,&#32;_y_orig,&#32;_root);
1031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__right_func._split&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__merge_task&#32;=&#32;__self-&gt;make_additional_child_of(__self-&gt;parent(),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__right_func));
1033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__self-&gt;spawn(__merge_task);
1034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__self-&gt;recycle_as_continuation();
1035 
1036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_xe&#32;=&#32;__xm;
1037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_ye&#32;=&#32;__ym;
1038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_split&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1039 
1040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__self;
1041 &#32;&#32;&#32;&#32;}
1042 };
1043 
1044 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator2,&#32;<emphasis role="keyword">typename</emphasis>&#32;__M_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cleanup,
1045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_LeafMerge&gt;
1046 __task*
1047 __merge_func&lt;_RandomAccessIterator1,&#32;_RandomAccessIterator2,&#32;__M_Compare,&#32;_Cleanup,&#32;_LeafMerge&gt;::
1048 operator()(__task*&#32;__self)
1049 {
1050 &#32;&#32;&#32;&#32;<emphasis role="comment">//a.&#32;split&#32;merge&#32;task&#32;into&#32;2&#32;of&#32;the&#32;same&#32;level;&#32;the&#32;special&#32;logic,</emphasis>
1051 &#32;&#32;&#32;&#32;<emphasis role="comment">//without&#32;processing(process_ranges)&#32;adjacent&#32;sub-ranges&#32;x&#32;and&#32;y</emphasis>
1052 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_split)
1053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;merge_ranges(__self);
1054 
1055 &#32;&#32;&#32;&#32;<emphasis role="comment">//b.&#32;General&#32;merging&#32;of&#32;adjacent&#32;sub-ranges&#32;x&#32;and&#32;y&#32;(with&#32;optimization&#32;in&#32;case&#32;of&#32;{x}&#32;&lt;=&#32;{y}&#32;)</emphasis>
1056 
1057 &#32;&#32;&#32;&#32;<emphasis role="comment">//1.&#32;x&#32;and&#32;y&#32;are&#32;in&#32;the&#32;even&#32;buffer</emphasis>
1058 &#32;&#32;&#32;&#32;<emphasis role="comment">//2.&#32;x&#32;and&#32;y&#32;are&#32;in&#32;the&#32;odd&#32;buffer</emphasis>
1059 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_x_orig&#32;==&#32;_y_orig)
1060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;process_ranges(__self);
1061 
1062 &#32;&#32;&#32;&#32;<emphasis role="comment">//3.&#32;x&#32;is&#32;in&#32;even&#32;buffer,&#32;y&#32;is&#32;in&#32;the&#32;odd&#32;buffer</emphasis>
1063 &#32;&#32;&#32;&#32;<emphasis role="comment">//4.&#32;x&#32;is&#32;in&#32;odd&#32;buffer,&#32;y&#32;is&#32;in&#32;the&#32;even&#32;buffer</emphasis>
1064 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!parent_merge(__self))
1065 &#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//root&#32;merge&#32;task</emphasis>
1066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_x_orig)
1067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;move_x_range();
1068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;move_y_range();
1070 &#32;&#32;&#32;&#32;}
1071 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1072 &#32;&#32;&#32;&#32;{
1073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_SizeType&#32;__nx&#32;=&#32;(_M_xe&#32;-&#32;_M_xs);
1074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_SizeType&#32;__ny&#32;=&#32;(_M_ye&#32;-&#32;_M_ys);
1075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_PSTL_ASSERT(__nx&#32;&gt;&#32;0);
1076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_PSTL_ASSERT(__nx&#32;&gt;&#32;0);
1077 
1078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__nx&#32;&lt;&#32;__ny)
1079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;move_x_range();
1080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;move_y_range();
1082 &#32;&#32;&#32;&#32;}
1083 
1084 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;process_ranges(__self);
1085 }
1086 
1087 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_LeafSort&gt;
1088 <emphasis role="keyword">class&#32;</emphasis>__stable_sort_func
1089 {
1090 &#32;&#32;<emphasis role="keyword">public</emphasis>:
1091 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_RandomAccessIterator1&gt;::difference_type&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1a0fc1c11e46113897145b6ba058dccbcf">_DifferenceType1</link>;
1092 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_RandomAccessIterator2&gt;::difference_type&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1a9841e6928238c30d8a991d3e5fdc94fc">_DifferenceType2</link>;
1093 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::common_type&lt;_DifferenceType1,&#32;_DifferenceType2&gt;::type&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1adace226b3de93e2a6d7abd1c3aa19638">_SizeType</link>;
1094 
1095 &#32;&#32;<emphasis role="keyword">private</emphasis>:
1096 &#32;&#32;&#32;&#32;_RandomAccessIterator1&#32;_M_xs,&#32;_M_xe,&#32;_M_x_beg;
1097 &#32;&#32;&#32;&#32;_RandomAccessIterator2&#32;_M_zs,&#32;_M_z_beg;
1098 &#32;&#32;&#32;&#32;_Compare&#32;_M_comp;
1099 &#32;&#32;&#32;&#32;_LeafSort&#32;_M_leaf_sort;
1100 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_M_root;
1101 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1adace226b3de93e2a6d7abd1c3aa19638">_SizeType</link>&#32;_M_nsort;&#32;<emphasis role="comment">//zero&#32;or&#32;number&#32;of&#32;elements&#32;to&#32;be&#32;sorted&#32;for&#32;partial_sort&#32;alforithm</emphasis>
1102 
1103 &#32;&#32;<emphasis role="keyword">public</emphasis>:
1104 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1a737763e97eb7c7427eee18e160f9ec11">__stable_sort_func</link>(_RandomAccessIterator1&#32;__xs,&#32;_RandomAccessIterator1&#32;__xe,&#32;_RandomAccessIterator2&#32;__zs,
1105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__root,&#32;_Compare&#32;__comp,&#32;_LeafSort&#32;__leaf_sort,&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1adace226b3de93e2a6d7abd1c3aa19638">_SizeType</link>&#32;__nsort,
1106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator1&#32;__x_beg,&#32;_RandomAccessIterator2&#32;__z_beg)
1107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_xs(__xs),&#32;_M_xe(__xe),&#32;_M_x_beg(__x_beg),&#32;_M_zs(__zs),&#32;_M_z_beg(__z_beg),&#32;_M_comp(__comp),
1108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_leaf_sort(__leaf_sort),&#32;_M_root(__root),&#32;_M_nsort(__nsort)
1109 &#32;&#32;&#32;&#32;{
1110 &#32;&#32;&#32;&#32;}
1111 
1112 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____task">__task</link>*
1113 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1acdd1b875eb63fba87562564d602b264c">operator()</link>(<link linkend="_class____pstl_1_1____tbb__backend_1_1____task">__task</link>*&#32;__self);
1114 };
1115 
1116 <emphasis role="preprocessor">#define&#32;_PSTL_STABLE_SORT_CUT_OFF&#32;500</emphasis>
1117 
1118 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_LeafSort&gt;
1119 __task*
1120 __stable_sort_func&lt;_RandomAccessIterator1,&#32;_RandomAccessIterator2,&#32;_Compare,&#32;_LeafSort&gt;::operator()(__task*&#32;__self)
1121 {
1122 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__merge_func&lt;_RandomAccessIterator1,&#32;_RandomAccessIterator2,&#32;_Compare,&#32;__utils::__serial_destroy,
1123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__utils::__serial_move_merge&gt;
1124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_MergeTaskType;
1125 
1126 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_SizeType&#32;__n&#32;=&#32;_M_xe&#32;-&#32;_M_xs;
1127 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_SizeType&#32;__nmerge&#32;=&#32;_M_nsort&#32;&gt;&#32;0&#32;?&#32;_M_nsort&#32;:&#32;__n;
1128 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_SizeType&#32;__sort_cut_off&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2pstl_2parallel__backend__tbb_8h_1a1919770db021e403acd6c1c6613a3285">_PSTL_STABLE_SORT_CUT_OFF</link>;
1129 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&lt;=&#32;__sort_cut_off)
1130 &#32;&#32;&#32;&#32;{
1131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_leaf_sort(_M_xs,&#32;_M_xe,&#32;_M_comp);
1132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_PSTL_ASSERT(!_M_root);
1133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
1134 &#32;&#32;&#32;&#32;}
1135 
1136 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_RandomAccessIterator1&#32;__xm&#32;=&#32;_M_xs&#32;+&#32;__n&#32;/&#32;2;
1137 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_RandomAccessIterator2&#32;__zm&#32;=&#32;_M_zs&#32;+&#32;(__xm&#32;-&#32;_M_xs);
1138 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_RandomAccessIterator2&#32;__ze&#32;=&#32;_M_zs&#32;+&#32;__n;
1139 &#32;&#32;&#32;&#32;_MergeTaskType&#32;__m(_MergeTaskType(_M_xs&#32;-&#32;_M_x_beg,&#32;__xm&#32;-&#32;_M_x_beg,&#32;__xm&#32;-&#32;_M_x_beg,&#32;_M_xe&#32;-&#32;_M_x_beg,
1140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_zs&#32;-&#32;_M_z_beg,&#32;_M_comp,&#32;__utils::__serial_destroy(),
1141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__utils::__serial_move_merge(__nmerge),&#32;_M_nsort,&#32;_M_x_beg,&#32;_M_z_beg,
1142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*x_orig*/</emphasis>&#32;<emphasis role="keyword">true</emphasis>,&#32;<emphasis role="comment">/*y_orig*/</emphasis>&#32;<emphasis role="keyword">true</emphasis>,&#32;<emphasis role="comment">/*root*/</emphasis>&#32;_M_root));
1143 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__parent&#32;=&#32;__self-&gt;make_continuation(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__m));
1144 &#32;&#32;&#32;&#32;__parent-&gt;set_ref_count(2);
1145 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__right&#32;=&#32;__self-&gt;make_child_of(
1146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__parent,&#32;__stable_sort_func(__xm,&#32;_M_xe,&#32;__zm,&#32;<emphasis role="keyword">false</emphasis>,&#32;_M_comp,&#32;_M_leaf_sort,&#32;_M_nsort,&#32;_M_x_beg,&#32;_M_z_beg));
1147 &#32;&#32;&#32;&#32;__self-&gt;spawn(__right);
1148 &#32;&#32;&#32;&#32;__self-&gt;recycle_as_child_of(__parent);
1149 &#32;&#32;&#32;&#32;_M_root&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1150 &#32;&#32;&#32;&#32;_M_xe&#32;=&#32;__xm;
1151 
1152 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__self;
1153 }
1154 
1155 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_LeafSort&gt;
1156 <emphasis role="keywordtype">void</emphasis>
1157 <link linkend="_namespace____pstl_1_1____serial__backend_1a1d19b13972acbafa2554b1fb8b812914">__parallel_stable_sort</link>(_ExecutionPolicy&amp;&amp;,&#32;_RandomAccessIterator&#32;__xs,&#32;_RandomAccessIterator&#32;__xe,&#32;_Compare&#32;__comp,
1158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_LeafSort&#32;__leaf_sort,&#32;std::size_t&#32;__nsort&#32;=&#32;0)
1159 {
1160 &#32;&#32;&#32;&#32;tbb::this_task_arena::isolate([=,&#32;&amp;__nsort]()&#32;{
1161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//sorting&#32;based&#32;on&#32;task&#32;tree&#32;and&#32;parallel&#32;merge</emphasis>
1162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_RandomAccessIterator&gt;::value_type&#32;_ValueType;
1163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_RandomAccessIterator&gt;::difference_type&#32;_DifferenceType;
1164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_DifferenceType&#32;__n&#32;=&#32;__xe&#32;-&#32;__xs;
1165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__nsort&#32;==&#32;__n)
1166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__nsort&#32;=&#32;0;&#32;<emphasis role="comment">//&#32;&apos;partial_sort&apos;&#32;becames&#32;&apos;sort&apos;</emphasis>
1167 
1168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_DifferenceType&#32;__sort_cut_off&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2pstl_2parallel__backend__tbb_8h_1a1919770db021e403acd6c1c6613a3285">_PSTL_STABLE_SORT_CUT_OFF</link>;
1169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&gt;&#32;__sort_cut_off)
1170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__buffer&lt;_ValueType&gt;&#32;__buf(__n);
1172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__root_task&lt;__stable_sort_func&lt;_RandomAccessIterator,&#32;_ValueType*,&#32;_Compare,&#32;_LeafSort&gt;&gt;&#32;__root{
1173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__xs,&#32;__xe,&#32;__buf.get(),&#32;<emphasis role="keyword">true</emphasis>,&#32;__comp,&#32;__leaf_sort,&#32;__nsort,&#32;__xs,&#32;__buf.get()};
1174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__task::spawn_root_and_wait(__root);
1175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
1176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//serial&#32;sort</emphasis>
1178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__leaf_sort(__xs,&#32;__xe,&#32;__comp);
1179 &#32;&#32;&#32;&#32;});
1180 }
1181 
1182 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1183 <emphasis role="comment">//&#32;parallel_merge</emphasis>
1184 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1185 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator3,
1186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_LeafMerge&gt;
1187 <emphasis role="keyword">class&#32;</emphasis>__merge_func_static
1188 {
1189 &#32;&#32;&#32;&#32;_RandomAccessIterator1&#32;_M_xs,&#32;_M_xe;
1190 &#32;&#32;&#32;&#32;_RandomAccessIterator2&#32;_M_ys,&#32;_M_ye;
1191 &#32;&#32;&#32;&#32;_RandomAccessIterator3&#32;_M_zs;
1192 &#32;&#32;&#32;&#32;_Compare&#32;_M_comp;
1193 &#32;&#32;&#32;&#32;_LeafMerge&#32;_M_leaf_merge;
1194 
1195 &#32;&#32;<emphasis role="keyword">public</emphasis>:
1196 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____merge__func__static_1a6d2ba39c5ad8660d5777de8bee1060d4">__merge_func_static</link>(_RandomAccessIterator1&#32;__xs,&#32;_RandomAccessIterator1&#32;__xe,&#32;_RandomAccessIterator2&#32;__ys,
1197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator2&#32;__ye,&#32;_RandomAccessIterator3&#32;__zs,&#32;_Compare&#32;__comp,
1198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_LeafMerge&#32;__leaf_merge)
1199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_xs(__xs),&#32;_M_xe(__xe),&#32;_M_ys(__ys),&#32;_M_ye(__ye),&#32;_M_zs(__zs),&#32;_M_comp(__comp),&#32;_M_leaf_merge(__leaf_merge)
1200 &#32;&#32;&#32;&#32;{
1201 &#32;&#32;&#32;&#32;}
1202 
1203 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____task">__task</link>*
1204 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____tbb__backend_1_1____merge__func__static_1a628b1474d5c9862ced88219cb403c1d7">operator()</link>(<link linkend="_class____pstl_1_1____tbb__backend_1_1____task">__task</link>*&#32;__self);
1205 };
1206 
1207 <emphasis role="comment">//TODO:&#32;consider&#32;usage&#32;of&#32;parallel_for&#32;with&#32;a&#32;custom&#32;blocked_range</emphasis>
1208 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator3,
1209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__M_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_LeafMerge&gt;
1210 <link linkend="_class____pstl_1_1____tbb__backend_1_1____task">__task</link>*
1211 <link linkend="_class____pstl_1_1____tbb__backend_1_1____merge__func__static">__merge_func_static&lt;_RandomAccessIterator1, _RandomAccessIterator2, _RandomAccessIterator3, __M_Compare, _LeafMerge&gt;::</link>
1212 <link linkend="_class____pstl_1_1____tbb__backend_1_1____merge__func__static">operator()</link>(<link linkend="_class____pstl_1_1____tbb__backend_1_1____task">__task</link>*&#32;__self)
1213 {
1214 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_RandomAccessIterator1&gt;::difference_type&#32;_DifferenceType1;
1215 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_RandomAccessIterator2&gt;::difference_type&#32;_DifferenceType2;
1216 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::common_type&lt;_DifferenceType1,&#32;_DifferenceType2&gt;::type&#32;_SizeType;
1217 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_SizeType&#32;__n&#32;=&#32;(_M_xe&#32;-&#32;_M_xs)&#32;+&#32;(_M_ye&#32;-&#32;_M_ys);
1218 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_SizeType&#32;__merge_cut_off&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2pstl_2parallel__backend__tbb_8h_1af869ba400ecc0d93c30063ce85199f6c">_PSTL_MERGE_CUT_OFF</link>;
1219 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&lt;=&#32;__merge_cut_off)
1220 &#32;&#32;&#32;&#32;{
1221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_leaf_merge(_M_xs,&#32;_M_xe,&#32;_M_ys,&#32;_M_ye,&#32;_M_zs,&#32;_M_comp);
1222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
1223 &#32;&#32;&#32;&#32;}
1224 
1225 &#32;&#32;&#32;&#32;_RandomAccessIterator1&#32;__xm;
1226 &#32;&#32;&#32;&#32;_RandomAccessIterator2&#32;__ym;
1227 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_xe&#32;-&#32;_M_xs&#32;&lt;&#32;_M_ye&#32;-&#32;_M_ys)
1228 &#32;&#32;&#32;&#32;{
1229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ym&#32;=&#32;_M_ys&#32;+&#32;(_M_ye&#32;-&#32;_M_ys)&#32;/&#32;2;
1230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__xm&#32;=&#32;std::upper_bound(_M_xs,&#32;_M_xe,&#32;*__ym,&#32;_M_comp);
1231 &#32;&#32;&#32;&#32;}
1232 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1233 &#32;&#32;&#32;&#32;{
1234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__xm&#32;=&#32;_M_xs&#32;+&#32;(_M_xe&#32;-&#32;_M_xs)&#32;/&#32;2;
1235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ym&#32;=&#32;std::lower_bound(_M_ys,&#32;_M_ye,&#32;*__xm,&#32;_M_comp);
1236 &#32;&#32;&#32;&#32;}
1237 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_RandomAccessIterator3&#32;__zm&#32;=&#32;_M_zs&#32;+&#32;((__xm&#32;-&#32;_M_xs)&#32;+&#32;(__ym&#32;-&#32;_M_ys));
1238 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__right&#32;=&#32;__self-&gt;make_additional_child_of(
1239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__self-&gt;parent(),&#32;__merge_func_static(__xm,&#32;_M_xe,&#32;__ym,&#32;_M_ye,&#32;__zm,&#32;_M_comp,&#32;_M_leaf_merge));
1240 &#32;&#32;&#32;&#32;__self-&gt;spawn(__right);
1241 &#32;&#32;&#32;&#32;__self-&gt;recycle_as_continuation();
1242 &#32;&#32;&#32;&#32;_M_xe&#32;=&#32;__xm;
1243 &#32;&#32;&#32;&#32;_M_ye&#32;=&#32;__ym;
1244 
1245 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__self;
1246 }
1247 
1248 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator2,
1249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator3,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_LeafMerge&gt;
1250 <emphasis role="keywordtype">void</emphasis>
1251 <link linkend="_namespace____pstl_1_1____serial__backend_1adde34d3d43f7f72f8463f67d115f3e9d">__parallel_merge</link>(_ExecutionPolicy&amp;&amp;,&#32;_RandomAccessIterator1&#32;__xs,&#32;_RandomAccessIterator1&#32;__xe,
1252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator2&#32;__ys,&#32;_RandomAccessIterator2&#32;__ye,&#32;_RandomAccessIterator3&#32;__zs,&#32;_Compare&#32;__comp,
1253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_LeafMerge&#32;__leaf_merge)
1254 {
1255 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_RandomAccessIterator1&gt;::difference_type&#32;_DifferenceType1;
1256 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_RandomAccessIterator2&gt;::difference_type&#32;_DifferenceType2;
1257 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::common_type&lt;_DifferenceType1,&#32;_DifferenceType2&gt;::type&#32;_SizeType;
1258 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_SizeType&#32;__n&#32;=&#32;(__xe&#32;-&#32;__xs)&#32;+&#32;(__ye&#32;-&#32;__ys);
1259 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_SizeType&#32;__merge_cut_off&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2pstl_2parallel__backend__tbb_8h_1af869ba400ecc0d93c30063ce85199f6c">_PSTL_MERGE_CUT_OFF</link>;
1260 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&lt;=&#32;__merge_cut_off)
1261 &#32;&#32;&#32;&#32;{
1262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Fall&#32;back&#32;on&#32;serial&#32;merge</emphasis>
1263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__leaf_merge(__xs,&#32;__xe,&#32;__ys,&#32;__ye,&#32;__zs,&#32;__comp);
1264 &#32;&#32;&#32;&#32;}
1265 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1266 &#32;&#32;&#32;&#32;{
1267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tbb::this_task_arena::isolate([=]()&#32;{
1268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__merge_func_static&lt;_RandomAccessIterator1,&#32;_RandomAccessIterator2,&#32;_RandomAccessIterator3,
1269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare,&#32;_LeafMerge&gt;
1270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_TaskType;
1271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__root_task&lt;_TaskType&gt;&#32;__root{__xs,&#32;__xe,&#32;__ys,&#32;__ye,&#32;__zs,&#32;__comp,&#32;__leaf_merge};
1272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__task::spawn_root_and_wait(__root);
1273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
1274 &#32;&#32;&#32;&#32;}
1275 }
1276 
1277 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1278 <emphasis role="comment">//&#32;parallel_invoke</emphasis>
1279 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1280 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">typename</emphasis>&#32;_F1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_F2&gt;
1281 <emphasis role="keywordtype">void</emphasis>
1282 <link linkend="_namespace____pstl_1_1____serial__backend_1a1aa84b929d0e1a58cd793a31fe44d3a8">__parallel_invoke</link>(_ExecutionPolicy&amp;&amp;,&#32;_F1&amp;&amp;&#32;__f1,&#32;_F2&amp;&amp;&#32;__f2)
1283 {
1284 &#32;&#32;&#32;&#32;<emphasis role="comment">//TODO:&#32;a&#32;version&#32;of&#32;tbb::this_task_arena::isolate&#32;with&#32;variadic&#32;arguments&#32;pack&#32;should&#32;be&#32;added&#32;in&#32;the&#32;future</emphasis>
1285 &#32;&#32;&#32;&#32;tbb::this_task_arena::isolate([&amp;]()&#32;{&#32;tbb::parallel_invoke(std::forward&lt;_F1&gt;(__f1),&#32;std::forward&lt;_F2&gt;(__f2));&#32;});
1286 }
1287 
1288 }&#32;<emphasis role="comment">//&#32;namespace&#32;__tbb_backend</emphasis>
1289 }&#32;<emphasis role="comment">//&#32;namespace&#32;__pstl</emphasis>
1290 
1291 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_PSTL_PARALLEL_BACKEND_TBB_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
