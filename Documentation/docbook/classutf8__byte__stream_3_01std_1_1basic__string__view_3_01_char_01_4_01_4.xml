<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4" xml:lang="en-US">
<title>utf8_byte_stream&lt; std::basic_string_view&lt; Char &gt; &gt; Class Template Reference</title>
<indexterm><primary>utf8_byte_stream&lt; std::basic_string_view&lt; Char &gt; &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;toml.hpp&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> constexpr <link linkend="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4_1a7ede07b930ef849492da6b24ef13b778">utf8_byte_stream</link> (std::basic_string_view&lt; Char &gt; <link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>) noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4_1ac9be009983ef67089c25d51a74a4ee68">error</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4_1adb397dfdc74f9978c9c32f3e05c328a7">eof</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> constexpr <link linkend="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4_1aee49ba0b44a6b36dbc2a02bdd52750d0">operator bool</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4_1a4894d3e2f94b3f8b301816aeee1f45dc">peek_eof</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4_1ac5dcac7842c67a190084701a1ce0b1b2">operator()</link> (<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> *dest, <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abb50fc1ead3a02a46fb52daa2045f95c">num</link>) noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> constexpr <link linkend="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4_1a7ede07b930ef849492da6b24ef13b778">utf8_byte_stream</link> (std::basic_string_view&lt; Char &gt; <link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>) noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4_1ac9be009983ef67089c25d51a74a4ee68">error</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4_1adb397dfdc74f9978c9c32f3e05c328a7">eof</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> constexpr <link linkend="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4_1aee49ba0b44a6b36dbc2a02bdd52750d0">operator bool</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4_1a4894d3e2f94b3f8b301816aeee1f45dc">peek_eof</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4_1ac5dcac7842c67a190084701a1ce0b1b2">operator()</link> (<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> *dest, <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abb50fc1ead3a02a46fb52daa2045f95c">num</link>) noexcept</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4_1a7ede07b930ef849492da6b24ef13b778"/><section>
    <title>utf8_byte_stream()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>utf8_byte_stream</primary><secondary>utf8_byte_stream&lt; std::basic_string_view&lt; Char &gt; &gt;</secondary></indexterm>
<indexterm><primary>utf8_byte_stream&lt; std::basic_string_view&lt; Char &gt; &gt;</primary><secondary>utf8_byte_stream</secondary></indexterm>
<computeroutput>template&lt;typename Char &gt; </computeroutput><para><computeroutput><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> constexpr utf8_byte_stream&lt; std::basic_string_view&lt; Char &gt; &gt;::utf8_byte_stream (std::basic_string_view&lt; Char &gt; sv)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4_1a7ede07b930ef849492da6b24ef13b778"/><section>
    <title>utf8_byte_stream()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>utf8_byte_stream</primary><secondary>utf8_byte_stream&lt; std::basic_string_view&lt; Char &gt; &gt;</secondary></indexterm>
<indexterm><primary>utf8_byte_stream&lt; std::basic_string_view&lt; Char &gt; &gt;</primary><secondary>utf8_byte_stream</secondary></indexterm>
<computeroutput>template&lt;typename Char &gt; </computeroutput><para><computeroutput><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> constexpr utf8_byte_stream&lt; std::basic_string_view&lt; Char &gt; &gt;::utf8_byte_stream (std::basic_string_view&lt; Char &gt; sv)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4_1adb397dfdc74f9978c9c32f3e05c328a7"/><section>
    <title>eof()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>eof</primary><secondary>utf8_byte_stream&lt; std::basic_string_view&lt; Char &gt; &gt;</secondary></indexterm>
<indexterm><primary>utf8_byte_stream&lt; std::basic_string_view&lt; Char &gt; &gt;</primary><secondary>eof</secondary></indexterm>
<computeroutput>template&lt;typename Char &gt; </computeroutput><para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4_1a7ede07b930ef849492da6b24ef13b778">utf8_byte_stream</link>&lt; std::basic_string_view&lt; Char &gt; &gt;::eof ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4_1adb397dfdc74f9978c9c32f3e05c328a7"/><section>
    <title>eof()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>eof</primary><secondary>utf8_byte_stream&lt; std::basic_string_view&lt; Char &gt; &gt;</secondary></indexterm>
<indexterm><primary>utf8_byte_stream&lt; std::basic_string_view&lt; Char &gt; &gt;</primary><secondary>eof</secondary></indexterm>
<computeroutput>template&lt;typename Char &gt; </computeroutput><para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4_1a7ede07b930ef849492da6b24ef13b778">utf8_byte_stream</link>&lt; std::basic_string_view&lt; Char &gt; &gt;::eof ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4_1ac9be009983ef67089c25d51a74a4ee68"/><section>
    <title>error()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>error</primary><secondary>utf8_byte_stream&lt; std::basic_string_view&lt; Char &gt; &gt;</secondary></indexterm>
<indexterm><primary>utf8_byte_stream&lt; std::basic_string_view&lt; Char &gt; &gt;</primary><secondary>error</secondary></indexterm>
<computeroutput>template&lt;typename Char &gt; </computeroutput><para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4_1a7ede07b930ef849492da6b24ef13b778">utf8_byte_stream</link>&lt; std::basic_string_view&lt; Char &gt; &gt;::error ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4_1ac9be009983ef67089c25d51a74a4ee68"/><section>
    <title>error()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>error</primary><secondary>utf8_byte_stream&lt; std::basic_string_view&lt; Char &gt; &gt;</secondary></indexterm>
<indexterm><primary>utf8_byte_stream&lt; std::basic_string_view&lt; Char &gt; &gt;</primary><secondary>error</secondary></indexterm>
<computeroutput>template&lt;typename Char &gt; </computeroutput><para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4_1a7ede07b930ef849492da6b24ef13b778">utf8_byte_stream</link>&lt; std::basic_string_view&lt; Char &gt; &gt;::error ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4_1aee49ba0b44a6b36dbc2a02bdd52750d0"/><section>
    <title>operator bool()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator bool</primary><secondary>utf8_byte_stream&lt; std::basic_string_view&lt; Char &gt; &gt;</secondary></indexterm>
<indexterm><primary>utf8_byte_stream&lt; std::basic_string_view&lt; Char &gt; &gt;</primary><secondary>operator bool</secondary></indexterm>
<computeroutput>template&lt;typename Char &gt; </computeroutput><para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> constexpr <link linkend="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4_1a7ede07b930ef849492da6b24ef13b778">utf8_byte_stream</link>&lt; std::basic_string_view&lt; Char &gt; &gt;::operator <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4_1aee49ba0b44a6b36dbc2a02bdd52750d0"/><section>
    <title>operator bool()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator bool</primary><secondary>utf8_byte_stream&lt; std::basic_string_view&lt; Char &gt; &gt;</secondary></indexterm>
<indexterm><primary>utf8_byte_stream&lt; std::basic_string_view&lt; Char &gt; &gt;</primary><secondary>operator bool</secondary></indexterm>
<computeroutput>template&lt;typename Char &gt; </computeroutput><para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> constexpr <link linkend="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4_1a7ede07b930ef849492da6b24ef13b778">utf8_byte_stream</link>&lt; std::basic_string_view&lt; Char &gt; &gt;::operator <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4_1ac5dcac7842c67a190084701a1ce0b1b2"/><section>
    <title>operator()()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator()</primary><secondary>utf8_byte_stream&lt; std::basic_string_view&lt; Char &gt; &gt;</secondary></indexterm>
<indexterm><primary>utf8_byte_stream&lt; std::basic_string_view&lt; Char &gt; &gt;</primary><secondary>operator()</secondary></indexterm>
<computeroutput>template&lt;typename Char &gt; </computeroutput><para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4_1a7ede07b930ef849492da6b24ef13b778">utf8_byte_stream</link>&lt; std::basic_string_view&lt; Char &gt; &gt;::operator() (<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> * dest, <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> num)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4_1ac5dcac7842c67a190084701a1ce0b1b2"/><section>
    <title>operator()()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator()</primary><secondary>utf8_byte_stream&lt; std::basic_string_view&lt; Char &gt; &gt;</secondary></indexterm>
<indexterm><primary>utf8_byte_stream&lt; std::basic_string_view&lt; Char &gt; &gt;</primary><secondary>operator()</secondary></indexterm>
<computeroutput>template&lt;typename Char &gt; </computeroutput><para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4_1a7ede07b930ef849492da6b24ef13b778">utf8_byte_stream</link>&lt; std::basic_string_view&lt; Char &gt; &gt;::operator() (<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> * dest, <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> num)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4_1a4894d3e2f94b3f8b301816aeee1f45dc"/><section>
    <title>peek_eof()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>peek_eof</primary><secondary>utf8_byte_stream&lt; std::basic_string_view&lt; Char &gt; &gt;</secondary></indexterm>
<indexterm><primary>utf8_byte_stream&lt; std::basic_string_view&lt; Char &gt; &gt;</primary><secondary>peek_eof</secondary></indexterm>
<computeroutput>template&lt;typename Char &gt; </computeroutput><para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4_1a7ede07b930ef849492da6b24ef13b778">utf8_byte_stream</link>&lt; std::basic_string_view&lt; Char &gt; &gt;::peek_eof ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4_1a4894d3e2f94b3f8b301816aeee1f45dc"/><section>
    <title>peek_eof()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>peek_eof</primary><secondary>utf8_byte_stream&lt; std::basic_string_view&lt; Char &gt; &gt;</secondary></indexterm>
<indexterm><primary>utf8_byte_stream&lt; std::basic_string_view&lt; Char &gt; &gt;</primary><secondary>peek_eof</secondary></indexterm>
<computeroutput>template&lt;typename Char &gt; </computeroutput><para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4_1a7ede07b930ef849492da6b24ef13b778">utf8_byte_stream</link>&lt; std::basic_string_view&lt; Char &gt; &gt;::peek_eof ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following files:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/include/toml++/impl/<link linkend="_parser_8inl">parser.inl</link>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/<link linkend="_toml_8hpp">toml.hpp</link></section>
</section>
