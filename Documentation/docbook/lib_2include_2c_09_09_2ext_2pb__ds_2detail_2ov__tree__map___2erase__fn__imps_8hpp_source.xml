<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2ext_2pb__ds_2detail_2ov__tree__map___2erase__fn__imps_8hpp_source" xml:lang="en-US">
<title>erase_fn_imps.hpp</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/ext/pb_ds/detail/ov_tree_map_/erase_fn_imps.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2005-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2004&#32;Ami&#32;Tavory&#32;and&#32;Vladimir&#32;Dreizin,&#32;IBM-HRL.</emphasis>
26 
27 <emphasis role="comment">//&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;sell,&#32;and&#32;distribute&#32;this&#32;software</emphasis>
28 <emphasis role="comment">//&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,&#32;provided&#32;that&#32;the&#32;above&#32;copyright</emphasis>
29 <emphasis role="comment">//&#32;notice&#32;appears&#32;in&#32;all&#32;copies,&#32;and&#32;that&#32;both&#32;that&#32;copyright&#32;notice</emphasis>
30 <emphasis role="comment">//&#32;and&#32;this&#32;permission&#32;notice&#32;appear&#32;in&#32;supporting&#32;documentation.&#32;None</emphasis>
31 <emphasis role="comment">//&#32;of&#32;the&#32;above&#32;authors,&#32;nor&#32;IBM&#32;Haifa&#32;Research&#32;Laboratories,&#32;make&#32;any</emphasis>
32 <emphasis role="comment">//&#32;representation&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
33 <emphasis role="comment">//&#32;purpose.&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied</emphasis>
34 <emphasis role="comment">//&#32;warranty.</emphasis>
35 
41 <emphasis role="preprocessor">#ifdef&#32;PB_DS_CLASS_C_DEC</emphasis>
42 
43 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
44 <emphasis role="keywordtype">void</emphasis>
45 PB_DS_CLASS_C_DEC::
46 clear()
47 {
48 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
49 &#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(m_size&#32;==&#32;0)
50 &#32;&#32;&#32;&#32;{
51 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
52 &#32;&#32;&#32;&#32;}
53 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
54 &#32;&#32;&#32;&#32;{
55 &#32;&#32;&#32;&#32;&#32;&#32;reallocate_metadata((node_update*&#32;)<emphasis role="keyword">this</emphasis>,&#32;0);
56 &#32;&#32;&#32;&#32;&#32;&#32;cond_dtor&lt;size_type&gt;&#32;cd(m_a_values,&#32;m_end_it,&#32;m_size);
57 &#32;&#32;&#32;&#32;}
58 
59 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a784d392bfeacfb0e3e6e0d2719489fb6">_GLIBCXX_DEBUG_ONLY</link>(debug_base::clear();)
60 &#32;&#32;m_a_values&#32;=&#32;0;
61 &#32;&#32;m_size&#32;=&#32;0;
62 &#32;&#32;m_end_it&#32;=&#32;m_a_values;
63 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
64 }
65 
66 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
67 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Pred&gt;
68 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::size_type
69 PB_DS_CLASS_C_DEC::
70 erase_if(Pred&#32;pred)
71 {
72 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
73 
74 <emphasis role="preprocessor">#ifdef&#32;PB_DS_REGRESSION</emphasis>
75 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc::group_adjustor&#32;adjust(m_size);
76 <emphasis role="preprocessor">#endif</emphasis>
77 
78 &#32;&#32;size_type&#32;new_size&#32;=&#32;0;
79 &#32;&#32;size_type&#32;num_val_ersd&#32;=&#32;0;
80 
81 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(iterator&#32;source_it&#32;=&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>();&#32;source_it&#32;!=&#32;m_end_it;&#32;++source_it)
82 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!pred(*source_it))
83 &#32;&#32;&#32;&#32;&#32;&#32;++new_size;
84 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
85 &#32;&#32;&#32;&#32;&#32;&#32;++num_val_ersd;
86 
87 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(new_size&#32;==&#32;0)
88 &#32;&#32;&#32;&#32;{
89 &#32;&#32;&#32;&#32;&#32;&#32;clear();
90 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;num_val_ersd;
91 &#32;&#32;&#32;&#32;}
92 
93 &#32;&#32;value_vector&#32;a_new_values&#32;=&#32;s_value_alloc.allocate(new_size);
94 &#32;&#32;iterator&#32;target_it&#32;=&#32;a_new_values;
95 &#32;&#32;cond_dtor&lt;size_type&gt;&#32;cd(a_new_values,&#32;target_it,&#32;new_size);
96 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a784d392bfeacfb0e3e6e0d2719489fb6">_GLIBCXX_DEBUG_ONLY</link>(debug_base::clear());
97 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(iterator&#32;source_it&#32;=&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>();&#32;source_it&#32;!=&#32;m_end_it;&#32;++source_it)
98 &#32;&#32;&#32;&#32;{
99 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!pred(*source_it))
100 &#32;&#32;&#32;&#32;{
101 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;(<emphasis role="keyword">const_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(target_it)))
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type(*source_it);
103 
104 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a784d392bfeacfb0e3e6e0d2719489fb6">_GLIBCXX_DEBUG_ONLY</link>(debug_base::insert_new(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(*source_it)));
105 &#32;&#32;&#32;&#32;&#32;&#32;++target_it;
106 &#32;&#32;&#32;&#32;}
107 &#32;&#32;&#32;&#32;}
108 
109 &#32;&#32;reallocate_metadata((node_update*)<emphasis role="keyword">this</emphasis>,&#32;new_size);
110 &#32;&#32;cd.set_no_action();
111 
112 &#32;&#32;{
113 &#32;&#32;&#32;&#32;cond_dtor&lt;size_type&gt;&#32;cd1(m_a_values,&#32;m_end_it,&#32;m_size);
114 &#32;&#32;}
115 
116 &#32;&#32;m_a_values&#32;=&#32;a_new_values;
117 &#32;&#32;m_size&#32;=&#32;new_size;
118 &#32;&#32;m_end_it&#32;=&#32;target_it;
119 &#32;&#32;update(node_begin(),&#32;(node_update*)<emphasis role="keyword">this</emphasis>);
120 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
121 &#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;num_val_ersd;
122 }
123 
124 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
125 template&lt;typename&#32;It&gt;
126 It
127 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::
128 erase_imp(It&#32;it)
129 {
130 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
131 &#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(it&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>())
132 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();
133 
134 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1acfae3994df576dbc37edc392d027c7ef">PB_DS_CHECK_KEY_EXISTS</link>(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(*it))
135 
136 <emphasis role="preprocessor">#ifdef&#32;PB_DS_REGRESSION</emphasis>
137 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc::group_adjustor&#32;adjust(m_size);
138 <emphasis role="preprocessor">#endif</emphasis>
139 
140 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(m_size&#32;&gt;&#32;0);
141 &#32;&#32;value_vector&#32;a_values&#32;=&#32;s_value_alloc.allocate(m_size&#32;-&#32;1);
142 &#32;&#32;iterator&#32;source_it&#32;=&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>();
143 &#32;&#32;iterator&#32;source_end_it&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();
144 &#32;&#32;iterator&#32;target_it&#32;=&#32;a_values;
145 &#32;&#32;iterator&#32;ret_it&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();
146 
147 &#32;&#32;cond_dtor&lt;size_type&gt;&#32;cd(a_values,&#32;target_it,&#32;m_size&#32;-&#32;1);
148 
149 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a784d392bfeacfb0e3e6e0d2719489fb6">_GLIBCXX_DEBUG_ONLY</link>(size_type&#32;cnt&#32;=&#32;0;)
150 
151 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(source_it&#32;!=&#32;source_end_it)
152 &#32;&#32;&#32;&#32;{
153 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(source_it&#32;!=&#32;it)
154 &#32;&#32;&#32;&#32;{
155 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a784d392bfeacfb0e3e6e0d2719489fb6">_GLIBCXX_DEBUG_ONLY</link>(++cnt;)
156 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(cnt&#32;!=&#32;m_size);
157 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;(<emphasis role="keyword">const_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(target_it)))
158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type(*source_it);
159 
160 &#32;&#32;&#32;&#32;&#32;&#32;++target_it;
161 &#32;&#32;&#32;&#32;}
162 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
163 &#32;&#32;&#32;&#32;ret_it&#32;=&#32;target_it;
164 &#32;&#32;&#32;&#32;++source_it;
165 &#32;&#32;&#32;&#32;}
166 
167 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(m_size&#32;&gt;&#32;0);
168 &#32;&#32;reallocate_metadata((node_update*)<emphasis role="keyword">this</emphasis>,&#32;m_size&#32;-&#32;1);
169 &#32;&#32;cd.set_no_action();
170 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a784d392bfeacfb0e3e6e0d2719489fb6">_GLIBCXX_DEBUG_ONLY</link>(debug_base::erase_existing(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(*it));)
171 &#32;&#32;{
172 &#32;&#32;&#32;&#32;cond_dtor&lt;size_type&gt;&#32;cd1(m_a_values,&#32;m_end_it,&#32;m_size);
173 &#32;&#32;}
174 
175 &#32;&#32;m_a_values&#32;=&#32;a_values;
176 &#32;&#32;--m_size;
177 &#32;&#32;m_end_it&#32;=&#32;m_a_values&#32;+&#32;m_size;
178 &#32;&#32;update(node_begin(),&#32;(node_update*)<emphasis role="keyword">this</emphasis>);
179 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
180 &#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;It(ret_it);
181 }
182 
183 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
184 <emphasis role="keywordtype">bool</emphasis>
185 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::
186 erase(key_const_reference&#32;r_key)
187 {
188 &#32;&#32;point_iterator&#32;it&#32;=&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(r_key);
189 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(it&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>())
190 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
191 &#32;&#32;erase(it);
192 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
193 }
194 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
