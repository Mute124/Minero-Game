<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_source" xml:lang="en-US">
<title>gthr-default.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/x86_64-w64-mingw32/bits/gthr-default.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">/*&#32;Threads&#32;compatibility&#32;routines&#32;for&#32;libgcc2&#32;and&#32;libobjc.&#32;&#32;*/</emphasis>
2 <emphasis role="comment">/*&#32;Compile&#32;this&#32;one&#32;with&#32;gcc.&#32;&#32;*/</emphasis>
3 <emphasis role="comment">/*&#32;Copyright&#32;(C)&#32;1997-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment"></emphasis>
5 <emphasis role="comment">This&#32;file&#32;is&#32;part&#32;of&#32;GCC.</emphasis>
6 <emphasis role="comment"></emphasis>
7 <emphasis role="comment">GCC&#32;is&#32;free&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under</emphasis>
8 <emphasis role="comment">the&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free</emphasis>
9 <emphasis role="comment">Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
10 <emphasis role="comment">version.</emphasis>
11 <emphasis role="comment"></emphasis>
12 <emphasis role="comment">GCC&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but&#32;WITHOUT&#32;ANY</emphasis>
13 <emphasis role="comment">WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of&#32;MERCHANTABILITY&#32;or</emphasis>
14 <emphasis role="comment">FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU&#32;General&#32;Public&#32;License</emphasis>
15 <emphasis role="comment">for&#32;more&#32;details.</emphasis>
16 <emphasis role="comment"></emphasis>
17 <emphasis role="comment">Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
18 <emphasis role="comment">permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
19 <emphasis role="comment">3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
20 <emphasis role="comment"></emphasis>
21 <emphasis role="comment">You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
22 <emphasis role="comment">a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
23 <emphasis role="comment">see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
24 <emphasis role="comment">&lt;http://www.gnu.org/licenses/&gt;.&#32;&#32;*/</emphasis>
25 
26 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_GCC_GTHR_POSIX_H</emphasis>
27 <emphasis role="preprocessor">#define&#32;_GLIBCXX_GCC_GTHR_POSIX_H</emphasis>
28 
29 <emphasis role="comment">/*&#32;POSIX&#32;threads&#32;specific&#32;definitions.</emphasis>
30 <emphasis role="comment">&#32;&#32;&#32;Easy,&#32;since&#32;the&#32;interface&#32;is&#32;just&#32;one-to-one&#32;mapping.&#32;&#32;*/</emphasis>
31 
32 <emphasis role="preprocessor">#define&#32;__GTHREADS&#32;1</emphasis>
33 <emphasis role="preprocessor">#define&#32;__GTHREADS_CXX0X&#32;1</emphasis>
34 
35 <emphasis role="preprocessor">#include&#32;&lt;pthread.h&gt;</emphasis>
36 
37 <emphasis role="preprocessor">#if&#32;((defined(_LIBOBJC)&#32;||&#32;defined(_LIBOBJC_WEAK))&#32;\</emphasis>
38 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;||&#32;!defined(_GTHREAD_USE_MUTEX_TIMEDLOCK))</emphasis>
39 <emphasis role="preprocessor">#&#32;include&#32;&lt;unistd.h&gt;</emphasis>
40 <emphasis role="preprocessor">#&#32;if&#32;defined(_POSIX_TIMEOUTS)&#32;&amp;&amp;&#32;_POSIX_TIMEOUTS&#32;&gt;=&#32;0</emphasis>
41 <emphasis role="preprocessor">#&#32;&#32;define&#32;_GTHREAD_USE_MUTEX_TIMEDLOCK&#32;1</emphasis>
42 <emphasis role="preprocessor">#&#32;else</emphasis>
43 <emphasis role="preprocessor">#&#32;&#32;define&#32;_GTHREAD_USE_MUTEX_TIMEDLOCK&#32;0</emphasis>
44 <emphasis role="preprocessor">#&#32;endif</emphasis>
45 <emphasis role="preprocessor">#endif</emphasis>
46 
47 <emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a5a968e6376296a133fae83572d4b2efc">pthread_t</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a306ab8a31415e59d7772b24c22ab60dc">__gthread_t</link>;
48 <emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1ae3576124dcee020fef884de07a48290c">pthread_key_t</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a3b3e350644d8ae574a3c842e27c69083">__gthread_key_t</link>;
49 <emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a4be465d5b536b183b4a9a6e56d67eab4">pthread_once_t</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1af51081352b97dcd93f8668cc895c1c7f">__gthread_once_t</link>;
50 <emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a50d9d56f346ce3e4ce711d7d1acea193">pthread_mutex_t</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a97856e6b17fbc2936d96d8ea2962eda3">__gthread_mutex_t</link>;
51 <emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a50d9d56f346ce3e4ce711d7d1acea193">pthread_mutex_t</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a3c90aae862e464058c70dcf114373851">__gthread_recursive_mutex_t</link>;
52 <emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a889b578630430003a00009eb9bc682f1">pthread_cond_t</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae8dd15b5bc8c82f0d61fa4063122fdc8">__gthread_cond_t</link>;
53 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>timespec&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1af7819bed58b3ca9c8a995141339d8a3c">__gthread_time_t</link>;
54 
55 <emphasis role="comment">/*&#32;POSIX&#32;like&#32;conditional&#32;variables&#32;are&#32;supported.&#32;&#32;Please&#32;look&#32;at&#32;comments</emphasis>
56 <emphasis role="comment">&#32;&#32;&#32;in&#32;gthr.h&#32;for&#32;details.&#32;*/</emphasis>
57 <emphasis role="preprocessor">#define&#32;__GTHREAD_HAS_COND&#32;&#32;1</emphasis>
58 
59 <emphasis role="preprocessor">#define&#32;__GTHREAD_MUTEX_INIT&#32;PTHREAD_MUTEX_INITIALIZER</emphasis>
60 <emphasis role="preprocessor">#define&#32;__GTHREAD_MUTEX_INIT_FUNCTION&#32;__gthread_mutex_init_function</emphasis>
61 <emphasis role="preprocessor">#define&#32;__GTHREAD_ONCE_INIT&#32;PTHREAD_ONCE_INIT</emphasis>
62 <emphasis role="preprocessor">#if&#32;defined(PTHREAD_RECURSIVE_MUTEX_INITIALIZER)</emphasis>
63 <emphasis role="preprocessor">#define&#32;__GTHREAD_RECURSIVE_MUTEX_INIT&#32;PTHREAD_RECURSIVE_MUTEX_INITIALIZER</emphasis>
64 <emphasis role="preprocessor">#elif&#32;defined(PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP)</emphasis>
65 <emphasis role="preprocessor">#define&#32;__GTHREAD_RECURSIVE_MUTEX_INIT&#32;PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP</emphasis>
66 <emphasis role="preprocessor">#else</emphasis>
67 <emphasis role="preprocessor">#define&#32;__GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION&#32;__gthread_recursive_mutex_init_function</emphasis>
68 <emphasis role="preprocessor">#endif</emphasis>
69 <emphasis role="preprocessor">#define&#32;__GTHREAD_COND_INIT&#32;PTHREAD_COND_INITIALIZER</emphasis>
70 <emphasis role="preprocessor">#define&#32;__GTHREAD_TIME_INIT&#32;{0,0}</emphasis>
71 
72 <emphasis role="preprocessor">#ifdef&#32;_GTHREAD_USE_MUTEX_INIT_FUNC</emphasis>
73 <emphasis role="preprocessor">#&#32;undef&#32;__GTHREAD_MUTEX_INIT</emphasis>
74 <emphasis role="preprocessor">#endif</emphasis>
75 <emphasis role="preprocessor">#ifdef&#32;_GTHREAD_USE_RECURSIVE_MUTEX_INIT_FUNC</emphasis>
76 <emphasis role="preprocessor">#&#32;undef&#32;__GTHREAD_RECURSIVE_MUTEX_INIT</emphasis>
77 <emphasis role="preprocessor">#&#32;undef&#32;__GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION</emphasis>
78 <emphasis role="preprocessor">#&#32;define&#32;__GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION&#32;__gthread_recursive_mutex_init_function</emphasis>
79 <emphasis role="preprocessor">#endif</emphasis>
80 <emphasis role="preprocessor">#ifdef&#32;_GTHREAD_USE_COND_INIT_FUNC</emphasis>
81 <emphasis role="preprocessor">#&#32;undef&#32;__GTHREAD_COND_INIT</emphasis>
82 <emphasis role="preprocessor">#&#32;define&#32;__GTHREAD_COND_INIT_FUNCTION&#32;__gthread_cond_init_function</emphasis>
83 <emphasis role="preprocessor">#endif</emphasis>
84 
85 <emphasis role="preprocessor">#if&#32;__GXX_WEAK__&#32;&amp;&amp;&#32;_GLIBCXX_GTHREAD_USE_WEAK</emphasis>
86 <emphasis role="preprocessor">#&#32;ifndef&#32;__gthrw_pragma</emphasis>
87 <emphasis role="preprocessor">#&#32;&#32;define&#32;__gthrw_pragma(pragma)</emphasis>
88 <emphasis role="preprocessor">#&#32;endif</emphasis>
89 <emphasis role="preprocessor">#&#32;define&#32;__gthrw2(name,name2,type)&#32;\</emphasis>
90 <emphasis role="preprocessor">&#32;&#32;static&#32;__typeof(type)&#32;name&#32;\</emphasis>
91 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__attribute__&#32;((__weakref__(#name2),&#32;__copy__&#32;(type)));&#32;\</emphasis>
92 <emphasis role="preprocessor">&#32;&#32;__gthrw_pragma(weak&#32;type)</emphasis>
93 <emphasis role="preprocessor">#&#32;define&#32;__gthrw_(name)&#32;__gthrw_&#32;##&#32;name</emphasis>
94 <emphasis role="preprocessor">#else</emphasis>
95 <emphasis role="preprocessor">#&#32;define&#32;__gthrw2(name,name2,type)</emphasis>
96 <emphasis role="preprocessor">#&#32;define&#32;__gthrw_(name)&#32;name</emphasis>
97 <emphasis role="preprocessor">#endif</emphasis>
98 
99 <emphasis role="comment">/*&#32;Typically,&#32;__gthrw_foo&#32;is&#32;a&#32;weak&#32;reference&#32;to&#32;symbol&#32;foo.&#32;&#32;*/</emphasis>
100 <emphasis role="preprocessor">#define&#32;__gthrw(name)&#32;__gthrw2(__gthrw_&#32;##&#32;name,name,name)</emphasis>
101 
102 <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae73d59629d2d21a71550a5b8d3160ff1">__gthrw</link>(<link linkend="__classes_2lib_2pthread_8h_1ad3e2169d99cca6716f63e7a6a815e1f9">pthread_once</link>)
103 <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae73d59629d2d21a71550a5b8d3160ff1">__gthrw</link>(<link linkend="__classes_2lib_2pthread_8h_1a118837985ccd3a829c518928ec32c1ac">pthread_getspecific</link>)
104 <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae73d59629d2d21a71550a5b8d3160ff1">__gthrw</link>(<link linkend="__classes_2lib_2pthread_8h_1a828266e605ec695f7a5b3096b486e70e">pthread_setspecific</link>)
105 
106 <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae73d59629d2d21a71550a5b8d3160ff1">__gthrw</link>(<link linkend="__classes_2lib_2pthread_8h_1ab3431d2d45bf174acdcecde5dac5839c">pthread_create</link>)
107 <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae73d59629d2d21a71550a5b8d3160ff1">__gthrw</link>(<link linkend="__classes_2lib_2pthread_8h_1a25b888453922185b872e6c87aee3e214">pthread_join</link>)
108 <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae73d59629d2d21a71550a5b8d3160ff1">__gthrw</link>(<link linkend="__classes_2lib_2pthread_8h_1a3bfce84d4d4fd73d4ae6793135412178">pthread_equal</link>)
109 <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae73d59629d2d21a71550a5b8d3160ff1">__gthrw</link>(<link linkend="__classes_2lib_2pthread_8h_1a2fdeabafeb422282ee687c9361dde092">pthread_self</link>)
110 <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae73d59629d2d21a71550a5b8d3160ff1">__gthrw</link>(<link linkend="__classes_2lib_2pthread_8h_1afd57474cd16075a818e924f5435dd1fe">pthread_detach</link>)
111 <emphasis role="preprocessor">#ifndef&#32;__BIONIC__</emphasis>
112 <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae73d59629d2d21a71550a5b8d3160ff1">__gthrw</link>(<link linkend="__classes_2lib_2pthread_8h_1ad9b32625e1e5bfb65deae5b61b71ecc8">pthread_cancel</link>)
113 <emphasis role="preprocessor">#endif</emphasis>
114 <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae73d59629d2d21a71550a5b8d3160ff1">__gthrw</link>(<link linkend="__classes_2lib_2pthread_8h_1a6c8d40dba19ab44315a73fa45579e07c">sched_yield</link>)
115 
116 <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae73d59629d2d21a71550a5b8d3160ff1">__gthrw</link>(<link linkend="__classes_2lib_2pthread_8h_1a4ca880f3d1afbb33cea07c60934cc49a">pthread_mutex_lock</link>)
117 <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae73d59629d2d21a71550a5b8d3160ff1">__gthrw</link>(<link linkend="__classes_2lib_2pthread_8h_1a9c7d6c19b9d517190ecd1f4d6fd27d7f">pthread_mutex_trylock</link>)
118 <emphasis role="preprocessor">#if&#32;_GTHREAD_USE_MUTEX_TIMEDLOCK</emphasis>
119 <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae73d59629d2d21a71550a5b8d3160ff1">__gthrw</link>(<link linkend="__classes_2lib_2pthread_8h_1aca21274598f7fad8d0fd8bef4eab9608">pthread_mutex_timedlock</link>)
120 <emphasis role="preprocessor">#endif</emphasis>
121 <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae73d59629d2d21a71550a5b8d3160ff1">__gthrw</link>(<link linkend="__classes_2lib_2pthread_8h_1a7e057138b5fb17da713695ebb25732e1">pthread_mutex_unlock</link>)
122 <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae73d59629d2d21a71550a5b8d3160ff1">__gthrw</link>(<link linkend="__classes_2lib_2pthread_8h_1a766f78ccf9846265c8f379ee92852a2c">pthread_mutex_init</link>)
123 <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae73d59629d2d21a71550a5b8d3160ff1">__gthrw</link>(<link linkend="__classes_2lib_2pthread_8h_1a058f31bed045ef535cb482d45ccaebec">pthread_mutex_destroy</link>)
124 
125 <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae73d59629d2d21a71550a5b8d3160ff1">__gthrw</link>(<link linkend="__classes_2lib_2pthread_8h_1a9ae7756a4d025b42386fc1835efa6975">pthread_cond_init</link>)
126 <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae73d59629d2d21a71550a5b8d3160ff1">__gthrw</link>(<link linkend="__classes_2lib_2pthread_8h_1abfd2c6ee1cd83fe2e556c696bd140e2f">pthread_cond_broadcast</link>)
127 <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae73d59629d2d21a71550a5b8d3160ff1">__gthrw</link>(<link linkend="__classes_2lib_2pthread_8h_1a4ba961fe959f9d2c2770e822ae51184f">pthread_cond_signal</link>)
128 <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae73d59629d2d21a71550a5b8d3160ff1">__gthrw</link>(<link linkend="__classes_2lib_2pthread_8h_1a9eb8d1c21f8f6da4114b33e12dfcd069">pthread_cond_wait</link>)
129 <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae73d59629d2d21a71550a5b8d3160ff1">__gthrw</link>(<link linkend="__classes_2lib_2pthread_8h_1adce004fdb8b6813b22e5e1ee1b2bf923">pthread_cond_timedwait</link>)
130 <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae73d59629d2d21a71550a5b8d3160ff1">__gthrw</link>(<link linkend="__classes_2lib_2pthread_8h_1a8855d5ab1f81a02c4e4c7e708bfe3ae6">pthread_cond_destroy</link>)
131 
132 <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae73d59629d2d21a71550a5b8d3160ff1">__gthrw</link>(<link linkend="__classes_2lib_2pthread_8h_1af2edd6107c5cf7dcff1a40bf878a9a7a">pthread_key_create</link>)
133 <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae73d59629d2d21a71550a5b8d3160ff1">__gthrw</link>(<link linkend="__classes_2lib_2pthread_8h_1a9b51f8826d51d11e280d16d896ea2050">pthread_key_delete</link>)
134 <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae73d59629d2d21a71550a5b8d3160ff1">__gthrw</link>(<link linkend="__classes_2lib_2pthread_8h_1ab890b953e5712cbc68601993097ba87c">pthread_mutexattr_init</link>)
135 <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae73d59629d2d21a71550a5b8d3160ff1">__gthrw</link>(<link linkend="__classes_2lib_2pthread_8h_1ad6de9a4bb74d0cd006d8b9dd4e22ba8b">pthread_mutexattr_settype</link>)
136 <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae73d59629d2d21a71550a5b8d3160ff1">__gthrw</link>(<link linkend="__classes_2lib_2pthread_8h_1acad46d5d742884ab327f165012ad6d31">pthread_mutexattr_destroy</link>)
137 
138 
139 <emphasis role="preprocessor">#if&#32;defined(_LIBOBJC)&#32;||&#32;defined(_LIBOBJC_WEAK)</emphasis>
140 <emphasis role="comment">/*&#32;Objective-C.&#32;&#32;*/</emphasis>
141 <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae73d59629d2d21a71550a5b8d3160ff1">__gthrw</link>(<link linkend="__classes_2lib_2pthread_8h_1afad0f29df9eb6f3e86301718bbb6316a">pthread_exit</link>)
142 <emphasis role="preprocessor">#ifdef&#32;_POSIX_PRIORITY_SCHEDULING</emphasis>
143 <emphasis role="preprocessor">#ifdef&#32;_POSIX_THREAD_PRIORITY_SCHEDULING</emphasis>
144 <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae73d59629d2d21a71550a5b8d3160ff1">__gthrw</link>(<link linkend="__classes_2lib_2pthread_8h_1a4adca5eec5f7d79a9a66c938a6481547">sched_get_priority_max</link>)
145 <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae73d59629d2d21a71550a5b8d3160ff1">__gthrw</link>(<link linkend="__classes_2lib_2pthread_8h_1a4c3046c4f2a21f421684222bb7b013fa">sched_get_priority_min</link>)
146 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_POSIX_THREAD_PRIORITY_SCHEDULING&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
147 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_POSIX_PRIORITY_SCHEDULING&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
148 <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae73d59629d2d21a71550a5b8d3160ff1">__gthrw</link>(<link linkend="__classes_2lib_2pthread_8h_1ae14ebd7965a1b57d97be6dc63c267ade">pthread_attr_destroy</link>)
149 <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae73d59629d2d21a71550a5b8d3160ff1">__gthrw</link>(<link linkend="__classes_2lib_2pthread_8h_1a0ef09cf581ad2a5eb9617503886be618">pthread_attr_init</link>)
150 <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae73d59629d2d21a71550a5b8d3160ff1">__gthrw</link>(<link linkend="__classes_2lib_2pthread_8h_1a2d2bf5c16432171c8b78aa63a879efcf">pthread_attr_setdetachstate</link>)
151 <emphasis role="preprocessor">#ifdef&#32;_POSIX_THREAD_PRIORITY_SCHEDULING</emphasis>
152 <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae73d59629d2d21a71550a5b8d3160ff1">__gthrw</link>(<link linkend="__classes_2lib_2pthread_8h_1a5953c02e8601721f28f600e06ca0052e">pthread_getschedparam</link>)
153 <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae73d59629d2d21a71550a5b8d3160ff1">__gthrw</link>(<link linkend="__classes_2lib_2pthread_8h_1ab2c23d7c6f85bd86d76b464ab92bd169">pthread_setschedparam</link>)
154 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_POSIX_THREAD_PRIORITY_SCHEDULING&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
155 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_LIBOBJC&#32;||&#32;_LIBOBJC_WEAK&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
156 
157 <emphasis role="preprocessor">#if&#32;__GXX_WEAK__&#32;&amp;&amp;&#32;_GLIBCXX_GTHREAD_USE_WEAK</emphasis>
158 
159 <emphasis role="comment">/*&#32;On&#32;Solaris&#32;2.6&#32;up&#32;to&#32;9,&#32;the&#32;libc&#32;exposes&#32;a&#32;POSIX&#32;threads&#32;interface&#32;even&#32;if</emphasis>
160 <emphasis role="comment">&#32;&#32;&#32;-pthreads&#32;is&#32;not&#32;specified.&#32;&#32;The&#32;functions&#32;are&#32;dummies&#32;and&#32;most&#32;return&#32;an</emphasis>
161 <emphasis role="comment">&#32;&#32;&#32;error&#32;value.&#32;&#32;However&#32;pthread_once&#32;returns&#32;0&#32;without&#32;invoking&#32;the&#32;routine</emphasis>
162 <emphasis role="comment">&#32;&#32;&#32;it&#32;is&#32;passed&#32;so&#32;we&#32;cannot&#32;pretend&#32;that&#32;the&#32;interface&#32;is&#32;active&#32;if&#32;-pthreads</emphasis>
163 <emphasis role="comment">&#32;&#32;&#32;is&#32;not&#32;specified.&#32;&#32;On&#32;Solaris&#32;2.5.1,&#32;the&#32;interface&#32;is&#32;not&#32;exposed&#32;at&#32;all&#32;so</emphasis>
164 <emphasis role="comment">&#32;&#32;&#32;we&#32;need&#32;to&#32;play&#32;the&#32;usual&#32;game&#32;with&#32;weak&#32;symbols.&#32;&#32;On&#32;Solaris&#32;10&#32;and&#32;up,&#32;a</emphasis>
165 <emphasis role="comment">&#32;&#32;&#32;working&#32;interface&#32;is&#32;always&#32;exposed.&#32;&#32;On&#32;FreeBSD&#32;6&#32;and&#32;later,&#32;libc&#32;also</emphasis>
166 <emphasis role="comment">&#32;&#32;&#32;exposes&#32;a&#32;dummy&#32;POSIX&#32;threads&#32;interface,&#32;similar&#32;to&#32;what&#32;Solaris&#32;2.6&#32;up</emphasis>
167 <emphasis role="comment">&#32;&#32;&#32;to&#32;9&#32;does.&#32;&#32;FreeBSD&#32;&gt;=&#32;700014&#32;even&#32;provides&#32;a&#32;pthread_cancel&#32;stub&#32;in&#32;libc,</emphasis>
168 <emphasis role="comment">&#32;&#32;&#32;which&#32;means&#32;the&#32;alternate&#32;__gthread_active_p&#32;below&#32;cannot&#32;be&#32;used&#32;there.&#32;&#32;*/</emphasis>
169 
170 <emphasis role="preprocessor">#if&#32;defined(__FreeBSD__)&#32;||&#32;(defined(__sun)&#32;&amp;&amp;&#32;defined(__svr4__))</emphasis>
171 
172 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__gthread_active&#32;=&#32;-1;
173 
174 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
175 __gthread_trigger&#32;(<emphasis role="keywordtype">void</emphasis>)
176 {
177 &#32;&#32;__gthread_active&#32;=&#32;1;
178 }
179 
180 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
181 __gthread_active_p&#32;(<emphasis role="keywordtype">void</emphasis>)
182 {
183 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a50d9d56f346ce3e4ce711d7d1acea193">pthread_mutex_t</link>&#32;__gthread_active_mutex&#32;=&#32;<link linkend="__classes_2lib_2pthread_8h_1a84e55100366a6a8338a2af3b3f279686">PTHREAD_MUTEX_INITIALIZER</link>;
184 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a4be465d5b536b183b4a9a6e56d67eab4">pthread_once_t</link>&#32;__gthread_active_once&#32;=&#32;<link linkend="__classes_2lib_2pthread_8h_1a59e22497b65fc305ddb5cea8b4990b51">PTHREAD_ONCE_INIT</link>;
185 
186 &#32;&#32;<emphasis role="comment">/*&#32;Avoid&#32;reading&#32;__gthread_active&#32;twice&#32;on&#32;the&#32;main&#32;code&#32;path.&#32;&#32;*/</emphasis>
187 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;__gthread_active_latest_value&#32;=&#32;__gthread_active;
188 
189 &#32;&#32;<emphasis role="comment">/*&#32;This&#32;test&#32;is&#32;not&#32;protected&#32;to&#32;avoid&#32;taking&#32;a&#32;lock&#32;on&#32;the&#32;main&#32;code</emphasis>
190 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;path&#32;so&#32;every&#32;update&#32;of&#32;__gthread_active&#32;in&#32;a&#32;threaded&#32;program&#32;must</emphasis>
191 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;be&#32;atomic&#32;with&#32;regard&#32;to&#32;the&#32;result&#32;of&#32;the&#32;test.&#32;&#32;*/</emphasis>
192 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_expect&#32;(__gthread_active_latest_value&#32;&lt;&#32;0,&#32;0))
193 &#32;&#32;&#32;&#32;{
194 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1ad3e2169d99cca6716f63e7a6a815e1f9">pthread_once</link>))
195 &#32;&#32;&#32;&#32;{
196 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;If&#32;this&#32;really&#32;is&#32;a&#32;threaded&#32;program,&#32;then&#32;we&#32;must&#32;ensure&#32;that</emphasis>
197 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__gthread_active&#32;has&#32;been&#32;set&#32;to&#32;1&#32;before&#32;exiting&#32;this&#32;block.&#32;&#32;*/</emphasis>
198 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a4ca880f3d1afbb33cea07c60934cc49a">pthread_mutex_lock</link>)&#32;(&amp;__gthread_active_mutex);
199 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1ad3e2169d99cca6716f63e7a6a815e1f9">pthread_once</link>)&#32;(&amp;__gthread_active_once,&#32;__gthread_trigger);
200 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a7e057138b5fb17da713695ebb25732e1">pthread_mutex_unlock</link>)&#32;(&amp;__gthread_active_mutex);
201 &#32;&#32;&#32;&#32;}
202 
203 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Make&#32;sure&#32;we&apos;ll&#32;never&#32;enter&#32;this&#32;block&#32;again.&#32;&#32;*/</emphasis>
204 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gthread_active&#32;&lt;&#32;0)
205 &#32;&#32;&#32;&#32;__gthread_active&#32;=&#32;0;
206 
207 &#32;&#32;&#32;&#32;&#32;&#32;__gthread_active_latest_value&#32;=&#32;__gthread_active;
208 &#32;&#32;&#32;&#32;}
209 
210 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gthread_active_latest_value&#32;!=&#32;0;
211 }
212 
213 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">/*&#32;neither&#32;FreeBSD&#32;nor&#32;Solaris&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
214 
215 <emphasis role="comment">/*&#32;For&#32;a&#32;program&#32;to&#32;be&#32;multi-threaded&#32;the&#32;only&#32;thing&#32;that&#32;it&#32;certainly&#32;must</emphasis>
216 <emphasis role="comment">&#32;&#32;&#32;be&#32;using&#32;is&#32;pthread_create.&#32;&#32;However,&#32;there&#32;may&#32;be&#32;other&#32;libraries&#32;that</emphasis>
217 <emphasis role="comment">&#32;&#32;&#32;intercept&#32;pthread_create&#32;with&#32;their&#32;own&#32;definitions&#32;to&#32;wrap&#32;pthreads</emphasis>
218 <emphasis role="comment">&#32;&#32;&#32;functionality&#32;for&#32;some&#32;purpose.&#32;&#32;In&#32;those&#32;cases,&#32;pthread_create&#32;being</emphasis>
219 <emphasis role="comment">&#32;&#32;&#32;defined&#32;might&#32;not&#32;necessarily&#32;mean&#32;that&#32;libpthread&#32;is&#32;actually&#32;linked</emphasis>
220 <emphasis role="comment">&#32;&#32;&#32;in.</emphasis>
221 <emphasis role="comment"></emphasis>
222 <emphasis role="comment">&#32;&#32;&#32;For&#32;the&#32;GNU&#32;C&#32;library,&#32;we&#32;can&#32;use&#32;a&#32;known&#32;internal&#32;name.&#32;&#32;This&#32;is&#32;always</emphasis>
223 <emphasis role="comment">&#32;&#32;&#32;available&#32;in&#32;the&#32;ABI,&#32;but&#32;no&#32;other&#32;library&#32;would&#32;define&#32;it.&#32;&#32;That&#32;is</emphasis>
224 <emphasis role="comment">&#32;&#32;&#32;ideal,&#32;since&#32;any&#32;public&#32;pthread&#32;function&#32;might&#32;be&#32;intercepted&#32;just&#32;as</emphasis>
225 <emphasis role="comment">&#32;&#32;&#32;pthread_create&#32;might&#32;be.&#32;&#32;__pthread_key_create&#32;is&#32;an&#32;&quot;internal&quot;</emphasis>
226 <emphasis role="comment">&#32;&#32;&#32;implementation&#32;symbol,&#32;but&#32;it&#32;is&#32;part&#32;of&#32;the&#32;public&#32;exported&#32;ABI.&#32;&#32;Also,</emphasis>
227 <emphasis role="comment">&#32;&#32;&#32;it&apos;s&#32;among&#32;the&#32;symbols&#32;that&#32;the&#32;static&#32;libpthread.a&#32;always&#32;links&#32;in</emphasis>
228 <emphasis role="comment">&#32;&#32;&#32;whenever&#32;pthread_create&#32;is&#32;used,&#32;so&#32;there&#32;is&#32;no&#32;danger&#32;of&#32;a&#32;false</emphasis>
229 <emphasis role="comment">&#32;&#32;&#32;negative&#32;result&#32;in&#32;any&#32;statically-linked,&#32;multi-threaded&#32;program.</emphasis>
230 <emphasis role="comment"></emphasis>
231 <emphasis role="comment">&#32;&#32;&#32;For&#32;others,&#32;we&#32;choose&#32;pthread_cancel&#32;as&#32;a&#32;function&#32;that&#32;seems&#32;unlikely</emphasis>
232 <emphasis role="comment">&#32;&#32;&#32;to&#32;be&#32;redefined&#32;by&#32;an&#32;interceptor&#32;library.&#32;&#32;The&#32;bionic&#32;(Android)&#32;C</emphasis>
233 <emphasis role="comment">&#32;&#32;&#32;library&#32;does&#32;not&#32;provide&#32;pthread_cancel,&#32;so&#32;we&#32;do&#32;use&#32;pthread_create</emphasis>
234 <emphasis role="comment">&#32;&#32;&#32;there&#32;(and&#32;interceptor&#32;libraries&#32;lose).&#32;&#32;*/</emphasis>
235 
236 <emphasis role="preprocessor">#ifdef&#32;__GLIBC__</emphasis>
237 <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ac1d9d7a8715b321a1d07e71eb5013ac9">__gthrw2</link>(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(__pthread_key_create),
238 &#32;&#32;&#32;&#32;&#32;__pthread_key_create,
239 &#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1af2edd6107c5cf7dcff1a40bf878a9a7a">pthread_key_create</link>)
240 <emphasis role="preprocessor">#&#32;define&#32;GTHR_ACTIVE_PROXY&#32;&#32;__gthrw_(__pthread_key_create)</emphasis>
241 <emphasis role="preprocessor">#elif&#32;defined&#32;(__BIONIC__)</emphasis>
242 <emphasis role="preprocessor">#&#32;define&#32;GTHR_ACTIVE_PROXY&#32;&#32;__gthrw_(pthread_create)</emphasis>
243 <emphasis role="preprocessor">#else</emphasis>
244 <emphasis role="preprocessor">#&#32;define&#32;GTHR_ACTIVE_PROXY&#32;&#32;__gthrw_(pthread_cancel)</emphasis>
245 <emphasis role="preprocessor">#endif</emphasis>
246 
247 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
248 __gthread_active_p&#32;(<emphasis role="keywordtype">void</emphasis>)
249 {
250 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*<emphasis role="keyword">const</emphasis>&#32;__gthread_active_ptr
251 &#32;&#32;&#32;&#32;=&#32;__extension__&#32;(<emphasis role="keywordtype">void</emphasis>&#32;*)&#32;&amp;GTHR_ACTIVE_PROXY;
252 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gthread_active_ptr&#32;!=&#32;0;
253 }
254 
255 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;FreeBSD&#32;or&#32;Solaris&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
256 
257 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">/*&#32;not&#32;__GXX_WEAK__&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
258 
259 <emphasis role="comment">/*&#32;Similar&#32;to&#32;Solaris,&#32;HP-UX&#32;11&#32;for&#32;PA-RISC&#32;provides&#32;stubs&#32;for&#32;pthread</emphasis>
260 <emphasis role="comment">&#32;&#32;&#32;calls&#32;in&#32;shared&#32;flavors&#32;of&#32;the&#32;HP-UX&#32;C&#32;library.&#32;&#32;Most&#32;of&#32;the&#32;stubs</emphasis>
261 <emphasis role="comment">&#32;&#32;&#32;have&#32;no&#32;functionality.&#32;&#32;The&#32;details&#32;are&#32;described&#32;in&#32;the&#32;&quot;libc&#32;cumulative</emphasis>
262 <emphasis role="comment">&#32;&#32;&#32;patch&quot;&#32;for&#32;each&#32;subversion&#32;of&#32;HP-UX&#32;11.&#32;&#32;There&#32;are&#32;two&#32;special&#32;interfaces</emphasis>
263 <emphasis role="comment">&#32;&#32;&#32;provided&#32;for&#32;checking&#32;whether&#32;an&#32;application&#32;is&#32;linked&#32;to&#32;a&#32;shared&#32;pthread</emphasis>
264 <emphasis role="comment">&#32;&#32;&#32;library&#32;or&#32;not.&#32;&#32;However,&#32;these&#32;interfaces&#32;aren&apos;t&#32;available&#32;in&#32;early</emphasis>
265 <emphasis role="comment">&#32;&#32;&#32;libpthread&#32;libraries.&#32;&#32;We&#32;also&#32;need&#32;a&#32;test&#32;that&#32;works&#32;for&#32;archive</emphasis>
266 <emphasis role="comment">&#32;&#32;&#32;libraries.&#32;&#32;We&#32;can&apos;t&#32;use&#32;pthread_once&#32;as&#32;some&#32;libc&#32;versions&#32;call&#32;the</emphasis>
267 <emphasis role="comment">&#32;&#32;&#32;init&#32;function.&#32;&#32;We&#32;also&#32;can&apos;t&#32;use&#32;pthread_create&#32;or&#32;pthread_attr_init</emphasis>
268 <emphasis role="comment">&#32;&#32;&#32;as&#32;these&#32;create&#32;a&#32;thread&#32;and&#32;thereby&#32;prevent&#32;changing&#32;the&#32;default&#32;stack</emphasis>
269 <emphasis role="comment">&#32;&#32;&#32;size.&#32;&#32;The&#32;function&#32;pthread_default_stacksize_np&#32;is&#32;available&#32;in&#32;both</emphasis>
270 <emphasis role="comment">&#32;&#32;&#32;the&#32;archive&#32;and&#32;shared&#32;versions&#32;of&#32;libpthread.&#32;&#32;&#32;It&#32;can&#32;be&#32;used&#32;to</emphasis>
271 <emphasis role="comment">&#32;&#32;&#32;determine&#32;the&#32;default&#32;pthread&#32;stack&#32;size.&#32;&#32;There&#32;is&#32;a&#32;stub&#32;in&#32;some</emphasis>
272 <emphasis role="comment">&#32;&#32;&#32;shared&#32;libc&#32;versions&#32;which&#32;returns&#32;a&#32;zero&#32;size&#32;if&#32;pthreads&#32;are&#32;not</emphasis>
273 <emphasis role="comment">&#32;&#32;&#32;active.&#32;&#32;We&#32;provide&#32;an&#32;equivalent&#32;stub&#32;to&#32;handle&#32;cases&#32;where&#32;libc</emphasis>
274 <emphasis role="comment">&#32;&#32;&#32;doesn&apos;t&#32;provide&#32;one.&#32;&#32;*/</emphasis>
275 
276 <emphasis role="preprocessor">#if&#32;defined(__hppa__)&#32;&amp;&amp;&#32;defined(__hpux__)</emphasis>
277 
278 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__gthread_active&#32;=&#32;-1;
279 
280 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
281 __gthread_active_p&#32;(<emphasis role="keywordtype">void</emphasis>)
282 {
283 &#32;&#32;<emphasis role="comment">/*&#32;Avoid&#32;reading&#32;__gthread_active&#32;twice&#32;on&#32;the&#32;main&#32;code&#32;path.&#32;&#32;*/</emphasis>
284 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;__gthread_active_latest_value&#32;=&#32;__gthread_active;
285 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__s;
286 
287 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_expect&#32;(__gthread_active_latest_value&#32;&lt;&#32;0,&#32;0))
288 &#32;&#32;&#32;&#32;{
289 &#32;&#32;&#32;&#32;&#32;&#32;pthread_default_stacksize_np&#32;(0,&#32;&amp;__s);
290 &#32;&#32;&#32;&#32;&#32;&#32;__gthread_active&#32;=&#32;__s&#32;?&#32;1&#32;:&#32;0;
291 &#32;&#32;&#32;&#32;&#32;&#32;__gthread_active_latest_value&#32;=&#32;__gthread_active;
292 &#32;&#32;&#32;&#32;}
293 
294 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gthread_active_latest_value&#32;!=&#32;0;
295 }
296 
297 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">/*&#32;not&#32;hppa-hpux&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
298 
299 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
300 __gthread_active_p&#32;(<emphasis role="keywordtype">void</emphasis>)
301 {
302 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
303 }
304 
305 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;hppa-hpux&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
306 
307 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;__GXX_WEAK__&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
308 
309 <emphasis role="preprocessor">#ifdef&#32;_LIBOBJC</emphasis>
310 
311 <emphasis role="comment">/*&#32;This&#32;is&#32;the&#32;config.h&#32;file&#32;in&#32;libobjc/&#32;*/</emphasis>
312 <emphasis role="preprocessor">#include&#32;&lt;config.h&gt;</emphasis>
313 
314 <emphasis role="preprocessor">#ifdef&#32;HAVE_SCHED_H</emphasis>
315 <emphasis role="preprocessor">#&#32;include&#32;&lt;sched.h&gt;</emphasis>
316 <emphasis role="preprocessor">#endif</emphasis>
317 
318 <emphasis role="comment">/*&#32;Key&#32;structure&#32;for&#32;maintaining&#32;thread&#32;specific&#32;storage&#32;*/</emphasis>
319 <emphasis role="keyword">static</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1ae3576124dcee020fef884de07a48290c">pthread_key_t</link>&#32;_objc_thread_storage;
320 <emphasis role="keyword">static</emphasis>&#32;<link linkend="_structpthread__attr__t">pthread_attr_t</link>&#32;_objc_thread_attribs;
321 
322 <emphasis role="comment">/*&#32;Thread&#32;local&#32;storage&#32;for&#32;a&#32;single&#32;thread&#32;*/</emphasis>
323 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*thread_local_storage&#32;=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
324 
325 <emphasis role="comment">/*&#32;Backend&#32;initialization&#32;functions&#32;*/</emphasis>
326 
327 <emphasis role="comment">/*&#32;Initialize&#32;the&#32;threads&#32;subsystem.&#32;&#32;*/</emphasis>
328 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
329 __gthread_objc_init_thread_system&#32;(<emphasis role="keywordtype">void</emphasis>)
330 {
331 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gthread_active_p&#32;())
332 &#32;&#32;&#32;&#32;{
333 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Initialize&#32;the&#32;thread&#32;storage&#32;key.&#32;&#32;*/</emphasis>
334 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1af2edd6107c5cf7dcff1a40bf878a9a7a">pthread_key_create</link>)&#32;(&amp;_objc_thread_storage,&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)&#32;==&#32;0)
335 &#32;&#32;&#32;&#32;{
336 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;The&#32;normal&#32;default&#32;detach&#32;state&#32;for&#32;threads&#32;is</emphasis>
337 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;PTHREAD_CREATE_JOINABLE&#32;which&#32;causes&#32;threads&#32;to&#32;not&#32;die</emphasis>
338 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;when&#32;you&#32;think&#32;they&#32;should.&#32;&#32;*/</emphasis>
339 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a0ef09cf581ad2a5eb9617503886be618">pthread_attr_init</link>)&#32;(&amp;_objc_thread_attribs)&#32;==&#32;0
340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a2d2bf5c16432171c8b78aa63a879efcf">pthread_attr_setdetachstate</link>)&#32;(&amp;_objc_thread_attribs,
341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a391c5eb0f6b5febc48710d0be3f62394">PTHREAD_CREATE_DETACHED</link>)&#32;==&#32;0)
342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
343 &#32;&#32;&#32;&#32;}
344 &#32;&#32;&#32;&#32;}
345 
346 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
347 }
348 
349 <emphasis role="comment">/*&#32;Close&#32;the&#32;threads&#32;subsystem.&#32;&#32;*/</emphasis>
350 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
351 __gthread_objc_close_thread_system&#32;(<emphasis role="keywordtype">void</emphasis>)
352 {
353 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gthread_active_p&#32;()
354 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a9b51f8826d51d11e280d16d896ea2050">pthread_key_delete</link>)&#32;(_objc_thread_storage)&#32;==&#32;0
355 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1ae14ebd7965a1b57d97be6dc63c267ade">pthread_attr_destroy</link>)&#32;(&amp;_objc_thread_attribs)&#32;==&#32;0)
356 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
357 
358 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
359 }
360 
361 <emphasis role="comment">/*&#32;Backend&#32;thread&#32;functions&#32;*/</emphasis>
362 
363 <emphasis role="comment">/*&#32;Create&#32;a&#32;new&#32;thread&#32;of&#32;execution.&#32;&#32;*/</emphasis>
364 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;objc_thread_t
365 __gthread_objc_thread_detach&#32;(<emphasis role="keywordtype">void</emphasis>&#32;(*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a18ae3ab36a07e388833b568cfdfa90c8">func</link>)(<emphasis role="keywordtype">void</emphasis>&#32;*),&#32;<emphasis role="keywordtype">void</emphasis>&#32;*arg)
366 {
367 &#32;&#32;objc_thread_t&#32;thread_id;
368 &#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a5a968e6376296a133fae83572d4b2efc">pthread_t</link>&#32;new_thread_handle;
369 
370 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__gthread_active_p&#32;())
371 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
372 
373 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1ab3431d2d45bf174acdcecde5dac5839c">pthread_create</link>)&#32;(&amp;new_thread_handle,&#32;&amp;_objc_thread_attribs,
374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keywordtype">void</emphasis>&#32;*)&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a18ae3ab36a07e388833b568cfdfa90c8">func</link>,&#32;arg)))
375 &#32;&#32;&#32;&#32;thread_id&#32;=&#32;(objc_thread_t)&#32;new_thread_handle;
376 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
377 &#32;&#32;&#32;&#32;thread_id&#32;=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
378 
379 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;thread_id;
380 }
381 
382 <emphasis role="comment">/*&#32;Set&#32;the&#32;current&#32;thread&apos;s&#32;priority.&#32;&#32;*/</emphasis>
383 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
384 __gthread_objc_thread_set_priority&#32;(<emphasis role="keywordtype">int</emphasis>&#32;priority)
385 {
386 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__gthread_active_p&#32;())
387 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
388 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
389 &#32;&#32;&#32;&#32;{
390 <emphasis role="preprocessor">#ifdef&#32;_POSIX_PRIORITY_SCHEDULING</emphasis>
391 <emphasis role="preprocessor">#ifdef&#32;_POSIX_THREAD_PRIORITY_SCHEDULING</emphasis>
392 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a5a968e6376296a133fae83572d4b2efc">pthread_t</link>&#32;thread_id&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a2fdeabafeb422282ee687c9361dde092">pthread_self</link>)&#32;();
393 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;policy;
394 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structsched__param">sched_param</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a432f0f93a241d368c5162c5da2221c1b">params</link>;
395 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;priority_min,&#32;priority_max;
396 
397 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a5953c02e8601721f28f600e06ca0052e">pthread_getschedparam</link>)&#32;(thread_id,&#32;&amp;policy,&#32;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a432f0f93a241d368c5162c5da2221c1b">params</link>)&#32;==&#32;0)
398 &#32;&#32;&#32;&#32;{
399 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((priority_max&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a4adca5eec5f7d79a9a66c938a6481547">sched_get_priority_max</link>)&#32;(policy))&#32;==&#32;-1)
400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
401 
402 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((priority_min&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a4c3046c4f2a21f421684222bb7b013fa">sched_get_priority_min</link>)&#32;(policy))&#32;==&#32;-1)
403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
404 
405 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(priority&#32;&gt;&#32;priority_max)
406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;priority&#32;=&#32;priority_max;
407 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(priority&#32;&lt;&#32;priority_min)
408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;priority&#32;=&#32;priority_min;
409 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a432f0f93a241d368c5162c5da2221c1b">params</link>.<link linkend="_structsched__param_1aa0f2640949273f2c30549ed8d1bb197e">sched_priority</link>&#32;=&#32;priority;
410 
411 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
412 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;The&#32;solaris&#32;7&#32;and&#32;several&#32;other&#32;man&#32;pages&#32;incorrectly&#32;state&#32;that</emphasis>
413 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;this&#32;should&#32;be&#32;a&#32;pointer&#32;to&#32;policy&#32;but&#32;pthread.h&#32;is&#32;universally</emphasis>
414 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;at&#32;odds&#32;with&#32;this.</emphasis>
415 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
416 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1ab2c23d7c6f85bd86d76b464ab92bd169">pthread_setschedparam</link>)&#32;(thread_id,&#32;policy,&#32;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a432f0f93a241d368c5162c5da2221c1b">params</link>)&#32;==&#32;0)
417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
418 &#32;&#32;&#32;&#32;}
419 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_POSIX_THREAD_PRIORITY_SCHEDULING&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
420 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_POSIX_PRIORITY_SCHEDULING&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
421 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
422 &#32;&#32;&#32;&#32;}
423 }
424 
425 <emphasis role="comment">/*&#32;Return&#32;the&#32;current&#32;thread&apos;s&#32;priority.&#32;&#32;*/</emphasis>
426 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
427 __gthread_objc_thread_get_priority&#32;(<emphasis role="keywordtype">void</emphasis>)
428 {
429 <emphasis role="preprocessor">#ifdef&#32;_POSIX_PRIORITY_SCHEDULING</emphasis>
430 <emphasis role="preprocessor">#ifdef&#32;_POSIX_THREAD_PRIORITY_SCHEDULING</emphasis>
431 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gthread_active_p&#32;())
432 &#32;&#32;&#32;&#32;{
433 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;policy;
434 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structsched__param">sched_param</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a432f0f93a241d368c5162c5da2221c1b">params</link>;
435 
436 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a5953c02e8601721f28f600e06ca0052e">pthread_getschedparam</link>)&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a2fdeabafeb422282ee687c9361dde092">pthread_self</link>)&#32;(),&#32;&amp;policy,&#32;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a432f0f93a241d368c5162c5da2221c1b">params</link>)&#32;==&#32;0)
437 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a432f0f93a241d368c5162c5da2221c1b">params</link>.<link linkend="_structsched__param_1aa0f2640949273f2c30549ed8d1bb197e">sched_priority</link>;
438 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
439 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
440 &#32;&#32;&#32;&#32;}
441 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
442 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_POSIX_THREAD_PRIORITY_SCHEDULING&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
443 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_POSIX_PRIORITY_SCHEDULING&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
444 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;OBJC_THREAD_INTERACTIVE_PRIORITY;
445 }
446 
447 <emphasis role="comment">/*&#32;Yield&#32;our&#32;process&#32;time&#32;to&#32;another&#32;thread.&#32;&#32;*/</emphasis>
448 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
449 __gthread_objc_thread_yield&#32;(<emphasis role="keywordtype">void</emphasis>)
450 {
451 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gthread_active_p&#32;())
452 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a6c8d40dba19ab44315a73fa45579e07c">sched_yield</link>)&#32;();
453 }
454 
455 <emphasis role="comment">/*&#32;Terminate&#32;the&#32;current&#32;thread.&#32;&#32;*/</emphasis>
456 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
457 __gthread_objc_thread_exit&#32;(<emphasis role="keywordtype">void</emphasis>)
458 {
459 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gthread_active_p&#32;())
460 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;exit&#32;the&#32;thread&#32;*/</emphasis>
461 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1afad0f29df9eb6f3e86301718bbb6316a">pthread_exit</link>)&#32;(&amp;__objc_thread_exit_status);
462 
463 &#32;&#32;<emphasis role="comment">/*&#32;Failed&#32;if&#32;we&#32;reached&#32;here&#32;*/</emphasis>
464 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
465 }
466 
467 <emphasis role="comment">/*&#32;Returns&#32;an&#32;integer&#32;value&#32;which&#32;uniquely&#32;describes&#32;a&#32;thread.&#32;&#32;*/</emphasis>
468 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;objc_thread_t
469 __gthread_objc_thread_id&#32;(<emphasis role="keywordtype">void</emphasis>)
470 {
471 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gthread_active_p&#32;())
472 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(objc_thread_t)&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a2fdeabafeb422282ee687c9361dde092">pthread_self</link>)&#32;();
473 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
474 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(objc_thread_t)&#32;1;
475 }
476 
477 <emphasis role="comment">/*&#32;Sets&#32;the&#32;thread&apos;s&#32;local&#32;storage&#32;pointer.&#32;&#32;*/</emphasis>
478 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
479 __gthread_objc_thread_set_data&#32;(<emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="_classvalue">value</link>)
480 {
481 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gthread_active_p&#32;())
482 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a828266e605ec695f7a5b3096b486e70e">pthread_setspecific</link>)&#32;(_objc_thread_storage,&#32;<link linkend="_classvalue">value</link>);
483 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
484 &#32;&#32;&#32;&#32;{
485 &#32;&#32;&#32;&#32;&#32;&#32;thread_local_storage&#32;=&#32;<link linkend="_classvalue">value</link>;
486 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
487 &#32;&#32;&#32;&#32;}
488 }
489 
490 <emphasis role="comment">/*&#32;Returns&#32;the&#32;thread&apos;s&#32;local&#32;storage&#32;pointer.&#32;&#32;*/</emphasis>
491 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*
492 __gthread_objc_thread_get_data&#32;(<emphasis role="keywordtype">void</emphasis>)
493 {
494 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gthread_active_p&#32;())
495 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a118837985ccd3a829c518928ec32c1ac">pthread_getspecific</link>)&#32;(_objc_thread_storage);
496 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
497 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;thread_local_storage;
498 }
499 
500 <emphasis role="comment">/*&#32;Backend&#32;mutex&#32;functions&#32;*/</emphasis>
501 
502 <emphasis role="comment">/*&#32;Allocate&#32;a&#32;mutex.&#32;&#32;*/</emphasis>
503 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
504 __gthread_objc_mutex_allocate&#32;(objc_mutex_t&#32;mutex)
505 {
506 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gthread_active_p&#32;())
507 &#32;&#32;&#32;&#32;{
508 &#32;&#32;&#32;&#32;&#32;&#32;mutex-&gt;backend&#32;=&#32;objc_malloc&#32;(<emphasis role="keyword">sizeof</emphasis>&#32;(<link linkend="__classes_2lib_2pthread_8h_1a50d9d56f346ce3e4ce711d7d1acea193">pthread_mutex_t</link>));
509 
510 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a766f78ccf9846265c8f379ee92852a2c">pthread_mutex_init</link>)&#32;((<link linkend="__classes_2lib_2pthread_8h_1a50d9d56f346ce3e4ce711d7d1acea193">pthread_mutex_t</link>&#32;*)&#32;mutex-&gt;backend,&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>))
511 &#32;&#32;&#32;&#32;{
512 &#32;&#32;&#32;&#32;&#32;&#32;objc_free&#32;(mutex-&gt;backend);
513 &#32;&#32;&#32;&#32;&#32;&#32;mutex-&gt;backend&#32;=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
514 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
515 &#32;&#32;&#32;&#32;}
516 &#32;&#32;&#32;&#32;}
517 
518 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
519 }
520 
521 <emphasis role="comment">/*&#32;Deallocate&#32;a&#32;mutex.&#32;&#32;*/</emphasis>
522 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
523 __gthread_objc_mutex_deallocate&#32;(objc_mutex_t&#32;mutex)
524 {
525 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gthread_active_p&#32;())
526 &#32;&#32;&#32;&#32;{
527 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>;
528 
529 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
530 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;Posix&#32;Threads&#32;specifically&#32;require&#32;that&#32;the&#32;thread&#32;be&#32;unlocked</emphasis>
531 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;for&#32;__gthrw_(pthread_mutex_destroy)&#32;to&#32;work.</emphasis>
532 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
533 
534 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>
535 &#32;&#32;&#32;&#32;{
536 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a7e057138b5fb17da713695ebb25732e1">pthread_mutex_unlock</link>)&#32;((<link linkend="__classes_2lib_2pthread_8h_1a50d9d56f346ce3e4ce711d7d1acea193">pthread_mutex_t</link>&#32;*)&#32;mutex-&gt;backend);
537 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>&#32;&lt;&#32;0)
538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
539 &#32;&#32;&#32;&#32;}
540 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>);
541 
542 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a058f31bed045ef535cb482d45ccaebec">pthread_mutex_destroy</link>)&#32;((<link linkend="__classes_2lib_2pthread_8h_1a50d9d56f346ce3e4ce711d7d1acea193">pthread_mutex_t</link>&#32;*)&#32;mutex-&gt;backend))
543 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
544 
545 &#32;&#32;&#32;&#32;&#32;&#32;objc_free&#32;(mutex-&gt;backend);
546 &#32;&#32;&#32;&#32;&#32;&#32;mutex-&gt;backend&#32;=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
547 &#32;&#32;&#32;&#32;}
548 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
549 }
550 
551 <emphasis role="comment">/*&#32;Grab&#32;a&#32;lock&#32;on&#32;a&#32;mutex.&#32;&#32;*/</emphasis>
552 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
553 __gthread_objc_mutex_lock&#32;(objc_mutex_t&#32;mutex)
554 {
555 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gthread_active_p&#32;()
556 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a4ca880f3d1afbb33cea07c60934cc49a">pthread_mutex_lock</link>)&#32;((<link linkend="__classes_2lib_2pthread_8h_1a50d9d56f346ce3e4ce711d7d1acea193">pthread_mutex_t</link>&#32;*)&#32;mutex-&gt;backend)&#32;!=&#32;0)
557 &#32;&#32;&#32;&#32;{
558 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
559 &#32;&#32;&#32;&#32;}
560 
561 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
562 }
563 
564 <emphasis role="comment">/*&#32;Try&#32;to&#32;grab&#32;a&#32;lock&#32;on&#32;a&#32;mutex.&#32;&#32;*/</emphasis>
565 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
566 __gthread_objc_mutex_trylock&#32;(objc_mutex_t&#32;mutex)
567 {
568 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gthread_active_p&#32;()
569 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a9c7d6c19b9d517190ecd1f4d6fd27d7f">pthread_mutex_trylock</link>)&#32;((<link linkend="__classes_2lib_2pthread_8h_1a50d9d56f346ce3e4ce711d7d1acea193">pthread_mutex_t</link>&#32;*)&#32;mutex-&gt;backend)&#32;!=&#32;0)
570 &#32;&#32;&#32;&#32;{
571 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
572 &#32;&#32;&#32;&#32;}
573 
574 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
575 }
576 
577 <emphasis role="comment">/*&#32;Unlock&#32;the&#32;mutex&#32;*/</emphasis>
578 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
579 __gthread_objc_mutex_unlock&#32;(objc_mutex_t&#32;mutex)
580 {
581 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gthread_active_p&#32;()
582 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a7e057138b5fb17da713695ebb25732e1">pthread_mutex_unlock</link>)&#32;((<link linkend="__classes_2lib_2pthread_8h_1a50d9d56f346ce3e4ce711d7d1acea193">pthread_mutex_t</link>&#32;*)&#32;mutex-&gt;backend)&#32;!=&#32;0)
583 &#32;&#32;&#32;&#32;{
584 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
585 &#32;&#32;&#32;&#32;}
586 
587 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
588 }
589 
590 <emphasis role="comment">/*&#32;Backend&#32;condition&#32;mutex&#32;functions&#32;*/</emphasis>
591 
592 <emphasis role="comment">/*&#32;Allocate&#32;a&#32;condition.&#32;&#32;*/</emphasis>
593 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
594 __gthread_objc_condition_allocate&#32;(objc_condition_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3fd7759b3d6e5284475eee14a613b9f9">condition</link>)
595 {
596 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gthread_active_p&#32;())
597 &#32;&#32;&#32;&#32;{
598 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3fd7759b3d6e5284475eee14a613b9f9">condition</link>-&gt;backend&#32;=&#32;objc_malloc&#32;(<emphasis role="keyword">sizeof</emphasis>&#32;(<link linkend="__classes_2lib_2pthread_8h_1a889b578630430003a00009eb9bc682f1">pthread_cond_t</link>));
599 
600 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a9ae7756a4d025b42386fc1835efa6975">pthread_cond_init</link>)&#32;((<link linkend="__classes_2lib_2pthread_8h_1a889b578630430003a00009eb9bc682f1">pthread_cond_t</link>&#32;*)&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3fd7759b3d6e5284475eee14a613b9f9">condition</link>-&gt;backend,&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>))
601 &#32;&#32;&#32;&#32;{
602 &#32;&#32;&#32;&#32;&#32;&#32;objc_free&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3fd7759b3d6e5284475eee14a613b9f9">condition</link>-&gt;backend);
603 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3fd7759b3d6e5284475eee14a613b9f9">condition</link>-&gt;backend&#32;=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
604 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
605 &#32;&#32;&#32;&#32;}
606 &#32;&#32;&#32;&#32;}
607 
608 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
609 }
610 
611 <emphasis role="comment">/*&#32;Deallocate&#32;a&#32;condition.&#32;&#32;*/</emphasis>
612 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
613 __gthread_objc_condition_deallocate&#32;(objc_condition_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3fd7759b3d6e5284475eee14a613b9f9">condition</link>)
614 {
615 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gthread_active_p&#32;())
616 &#32;&#32;&#32;&#32;{
617 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a8855d5ab1f81a02c4e4c7e708bfe3ae6">pthread_cond_destroy</link>)&#32;((<link linkend="__classes_2lib_2pthread_8h_1a889b578630430003a00009eb9bc682f1">pthread_cond_t</link>&#32;*)&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3fd7759b3d6e5284475eee14a613b9f9">condition</link>-&gt;backend))
618 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
619 
620 &#32;&#32;&#32;&#32;&#32;&#32;objc_free&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3fd7759b3d6e5284475eee14a613b9f9">condition</link>-&gt;backend);
621 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3fd7759b3d6e5284475eee14a613b9f9">condition</link>-&gt;backend&#32;=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
622 &#32;&#32;&#32;&#32;}
623 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
624 }
625 
626 <emphasis role="comment">/*&#32;Wait&#32;on&#32;the&#32;condition&#32;*/</emphasis>
627 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
628 __gthread_objc_condition_wait&#32;(objc_condition_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3fd7759b3d6e5284475eee14a613b9f9">condition</link>,&#32;objc_mutex_t&#32;mutex)
629 {
630 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gthread_active_p&#32;())
631 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a9eb8d1c21f8f6da4114b33e12dfcd069">pthread_cond_wait</link>)&#32;((<link linkend="__classes_2lib_2pthread_8h_1a889b578630430003a00009eb9bc682f1">pthread_cond_t</link>&#32;*)&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3fd7759b3d6e5284475eee14a613b9f9">condition</link>-&gt;backend,
632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<link linkend="__classes_2lib_2pthread_8h_1a50d9d56f346ce3e4ce711d7d1acea193">pthread_mutex_t</link>&#32;*)&#32;mutex-&gt;backend);
633 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
634 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
635 }
636 
637 <emphasis role="comment">/*&#32;Wake&#32;up&#32;all&#32;threads&#32;waiting&#32;on&#32;this&#32;condition.&#32;&#32;*/</emphasis>
638 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
639 __gthread_objc_condition_broadcast&#32;(objc_condition_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3fd7759b3d6e5284475eee14a613b9f9">condition</link>)
640 {
641 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gthread_active_p&#32;())
642 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1abfd2c6ee1cd83fe2e556c696bd140e2f">pthread_cond_broadcast</link>)&#32;((<link linkend="__classes_2lib_2pthread_8h_1a889b578630430003a00009eb9bc682f1">pthread_cond_t</link>&#32;*)&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3fd7759b3d6e5284475eee14a613b9f9">condition</link>-&gt;backend);
643 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
644 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
645 }
646 
647 <emphasis role="comment">/*&#32;Wake&#32;up&#32;one&#32;thread&#32;waiting&#32;on&#32;this&#32;condition.&#32;&#32;*/</emphasis>
648 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
649 __gthread_objc_condition_signal&#32;(objc_condition_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3fd7759b3d6e5284475eee14a613b9f9">condition</link>)
650 {
651 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gthread_active_p&#32;())
652 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a4ba961fe959f9d2c2770e822ae51184f">pthread_cond_signal</link>)&#32;((<link linkend="__classes_2lib_2pthread_8h_1a889b578630430003a00009eb9bc682f1">pthread_cond_t</link>&#32;*)&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3fd7759b3d6e5284475eee14a613b9f9">condition</link>-&gt;backend);
653 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
654 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
655 }
656 
657 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">/*&#32;_LIBOBJC&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
658 
659 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
660 __gthread_create&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a306ab8a31415e59d7772b24c22ab60dc">__gthread_t</link>&#32;*__threadid,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*(*__func)&#32;(<emphasis role="keywordtype">void</emphasis>*),
661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*__args)
662 {
663 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1ab3431d2d45bf174acdcecde5dac5839c">pthread_create</link>)&#32;(__threadid,&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>,&#32;__func,&#32;__args);
664 }
665 
666 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
667 __gthread_join&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a306ab8a31415e59d7772b24c22ab60dc">__gthread_t</link>&#32;__threadid,&#32;<emphasis role="keywordtype">void</emphasis>&#32;**__value_ptr)
668 {
669 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a25b888453922185b872e6c87aee3e214">pthread_join</link>)&#32;(__threadid,&#32;__value_ptr);
670 }
671 
672 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
673 __gthread_detach&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a306ab8a31415e59d7772b24c22ab60dc">__gthread_t</link>&#32;__threadid)
674 {
675 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1afd57474cd16075a818e924f5435dd1fe">pthread_detach</link>)&#32;(__threadid);
676 }
677 
678 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
679 __gthread_equal&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a306ab8a31415e59d7772b24c22ab60dc">__gthread_t</link>&#32;__t1,&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a306ab8a31415e59d7772b24c22ab60dc">__gthread_t</link>&#32;__t2)
680 {
681 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a3bfce84d4d4fd73d4ae6793135412178">pthread_equal</link>)&#32;(__t1,&#32;__t2);
682 }
683 
684 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a306ab8a31415e59d7772b24c22ab60dc">__gthread_t</link>
685 __gthread_self&#32;(<emphasis role="keywordtype">void</emphasis>)
686 {
687 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a2fdeabafeb422282ee687c9361dde092">pthread_self</link>)&#32;();
688 }
689 
690 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
691 __gthread_yield&#32;(<emphasis role="keywordtype">void</emphasis>)
692 {
693 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a6c8d40dba19ab44315a73fa45579e07c">sched_yield</link>)&#32;();
694 }
695 
696 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
697 __gthread_once&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1af51081352b97dcd93f8668cc895c1c7f">__gthread_once_t</link>&#32;*__once,&#32;<emphasis role="keywordtype">void</emphasis>&#32;(*__func)&#32;(<emphasis role="keywordtype">void</emphasis>))
698 {
699 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gthread_active_p&#32;())
700 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1ad3e2169d99cca6716f63e7a6a815e1f9">pthread_once</link>)&#32;(__once,&#32;__func);
701 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
702 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
703 }
704 
705 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
706 __gthread_key_create&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a3b3e350644d8ae574a3c842e27c69083">__gthread_key_t</link>&#32;*__key,&#32;<emphasis role="keywordtype">void</emphasis>&#32;(*__dtor)&#32;(<emphasis role="keywordtype">void</emphasis>&#32;*))
707 {
708 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1af2edd6107c5cf7dcff1a40bf878a9a7a">pthread_key_create</link>)&#32;(__key,&#32;__dtor);
709 }
710 
711 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
712 __gthread_key_delete&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a3b3e350644d8ae574a3c842e27c69083">__gthread_key_t</link>&#32;__key)
713 {
714 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a9b51f8826d51d11e280d16d896ea2050">pthread_key_delete</link>)&#32;(__key);
715 }
716 
717 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*
718 __gthread_getspecific&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a3b3e350644d8ae574a3c842e27c69083">__gthread_key_t</link>&#32;__key)
719 {
720 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a118837985ccd3a829c518928ec32c1ac">pthread_getspecific</link>)&#32;(__key);
721 }
722 
723 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
724 __gthread_setspecific&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a3b3e350644d8ae574a3c842e27c69083">__gthread_key_t</link>&#32;__key,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*__ptr)
725 {
726 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a828266e605ec695f7a5b3096b486e70e">pthread_setspecific</link>)&#32;(__key,&#32;__ptr);
727 }
728 
729 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
730 __gthread_mutex_init_function&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a97856e6b17fbc2936d96d8ea2962eda3">__gthread_mutex_t</link>&#32;*__mutex)
731 {
732 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gthread_active_p&#32;())
733 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a766f78ccf9846265c8f379ee92852a2c">pthread_mutex_init</link>)&#32;(__mutex,&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
734 }
735 
736 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
737 __gthread_mutex_destroy&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a97856e6b17fbc2936d96d8ea2962eda3">__gthread_mutex_t</link>&#32;*__mutex)
738 {
739 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gthread_active_p&#32;())
740 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a058f31bed045ef535cb482d45ccaebec">pthread_mutex_destroy</link>)&#32;(__mutex);
741 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
742 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
743 }
744 
745 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
746 __gthread_mutex_lock&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a97856e6b17fbc2936d96d8ea2962eda3">__gthread_mutex_t</link>&#32;*__mutex)
747 {
748 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gthread_active_p&#32;())
749 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a4ca880f3d1afbb33cea07c60934cc49a">pthread_mutex_lock</link>)&#32;(__mutex);
750 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
751 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
752 }
753 
754 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
755 __gthread_mutex_trylock&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a97856e6b17fbc2936d96d8ea2962eda3">__gthread_mutex_t</link>&#32;*__mutex)
756 {
757 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gthread_active_p&#32;())
758 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a9c7d6c19b9d517190ecd1f4d6fd27d7f">pthread_mutex_trylock</link>)&#32;(__mutex);
759 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
760 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
761 }
762 
763 <emphasis role="preprocessor">#if&#32;_GTHREAD_USE_MUTEX_TIMEDLOCK</emphasis>
764 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
765 __gthread_mutex_timedlock&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a97856e6b17fbc2936d96d8ea2962eda3">__gthread_mutex_t</link>&#32;*__mutex,
766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1af7819bed58b3ca9c8a995141339d8a3c">__gthread_time_t</link>&#32;*__abs_timeout)
767 {
768 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gthread_active_p&#32;())
769 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1aca21274598f7fad8d0fd8bef4eab9608">pthread_mutex_timedlock</link>)&#32;(__mutex,&#32;__abs_timeout);
770 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
771 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
772 }
773 <emphasis role="preprocessor">#endif</emphasis>
774 
775 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
776 __gthread_mutex_unlock&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a97856e6b17fbc2936d96d8ea2962eda3">__gthread_mutex_t</link>&#32;*__mutex)
777 {
778 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gthread_active_p&#32;())
779 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a7e057138b5fb17da713695ebb25732e1">pthread_mutex_unlock</link>)&#32;(__mutex);
780 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
781 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
782 }
783 
784 <emphasis role="preprocessor">#if&#32;!defined(&#32;PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP)&#32;\</emphasis>
785 <emphasis role="preprocessor">&#32;&#32;||&#32;defined(_GTHREAD_USE_RECURSIVE_MUTEX_INIT_FUNC)</emphasis>
786 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
787 __gthread_recursive_mutex_init_function&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a3c90aae862e464058c70dcf114373851">__gthread_recursive_mutex_t</link>&#32;*__mutex)
788 {
789 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gthread_active_p&#32;())
790 &#32;&#32;&#32;&#32;{
791 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1ae27e7f66c70f4c171ba28f05d288070e">pthread_mutexattr_t</link>&#32;__attr;
792 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;__r;
793 
794 &#32;&#32;&#32;&#32;&#32;&#32;__r&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1ab890b953e5712cbc68601993097ba87c">pthread_mutexattr_init</link>)&#32;(&amp;__attr);
795 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__r)
796 &#32;&#32;&#32;&#32;__r&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1ad6de9a4bb74d0cd006d8b9dd4e22ba8b">pthread_mutexattr_settype</link>)&#32;(&amp;__attr,
797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a715e9644a7183d98cb2c9dd41cb89645">PTHREAD_MUTEX_RECURSIVE</link>);
798 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__r)
799 &#32;&#32;&#32;&#32;__r&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a766f78ccf9846265c8f379ee92852a2c">pthread_mutex_init</link>)&#32;(__mutex,&#32;&amp;__attr);
800 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__r)
801 &#32;&#32;&#32;&#32;__r&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1acad46d5d742884ab327f165012ad6d31">pthread_mutexattr_destroy</link>)&#32;(&amp;__attr);
802 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
803 &#32;&#32;&#32;&#32;}
804 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
805 }
806 <emphasis role="preprocessor">#endif</emphasis>
807 
808 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
809 __gthread_recursive_mutex_lock&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a3c90aae862e464058c70dcf114373851">__gthread_recursive_mutex_t</link>&#32;*__mutex)
810 {
811 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gthread_mutex_lock&#32;(__mutex);
812 }
813 
814 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
815 __gthread_recursive_mutex_trylock&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a3c90aae862e464058c70dcf114373851">__gthread_recursive_mutex_t</link>&#32;*__mutex)
816 {
817 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gthread_mutex_trylock&#32;(__mutex);
818 }
819 
820 <emphasis role="preprocessor">#if&#32;_GTHREAD_USE_MUTEX_TIMEDLOCK</emphasis>
821 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
822 __gthread_recursive_mutex_timedlock&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a3c90aae862e464058c70dcf114373851">__gthread_recursive_mutex_t</link>&#32;*__mutex,
823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1af7819bed58b3ca9c8a995141339d8a3c">__gthread_time_t</link>&#32;*__abs_timeout)
824 {
825 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gthread_mutex_timedlock&#32;(__mutex,&#32;__abs_timeout);
826 }
827 <emphasis role="preprocessor">#endif</emphasis>
828 
829 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
830 __gthread_recursive_mutex_unlock&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a3c90aae862e464058c70dcf114373851">__gthread_recursive_mutex_t</link>&#32;*__mutex)
831 {
832 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gthread_mutex_unlock&#32;(__mutex);
833 }
834 
835 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
836 __gthread_recursive_mutex_destroy&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a3c90aae862e464058c70dcf114373851">__gthread_recursive_mutex_t</link>&#32;*__mutex)
837 {
838 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gthread_mutex_destroy&#32;(__mutex);
839 }
840 
841 <emphasis role="preprocessor">#ifdef&#32;_GTHREAD_USE_COND_INIT_FUNC</emphasis>
842 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
843 __gthread_cond_init_function&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae8dd15b5bc8c82f0d61fa4063122fdc8">__gthread_cond_t</link>&#32;*__cond)
844 {
845 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gthread_active_p&#32;())
846 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a9ae7756a4d025b42386fc1835efa6975">pthread_cond_init</link>)&#32;(__cond,&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
847 }
848 <emphasis role="preprocessor">#endif</emphasis>
849 
850 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
851 __gthread_cond_broadcast&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae8dd15b5bc8c82f0d61fa4063122fdc8">__gthread_cond_t</link>&#32;*__cond)
852 {
853 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1abfd2c6ee1cd83fe2e556c696bd140e2f">pthread_cond_broadcast</link>)&#32;(__cond);
854 }
855 
856 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
857 __gthread_cond_signal&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae8dd15b5bc8c82f0d61fa4063122fdc8">__gthread_cond_t</link>&#32;*__cond)
858 {
859 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a4ba961fe959f9d2c2770e822ae51184f">pthread_cond_signal</link>)&#32;(__cond);
860 }
861 
862 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
863 __gthread_cond_wait&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae8dd15b5bc8c82f0d61fa4063122fdc8">__gthread_cond_t</link>&#32;*__cond,&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a97856e6b17fbc2936d96d8ea2962eda3">__gthread_mutex_t</link>&#32;*__mutex)
864 {
865 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a9eb8d1c21f8f6da4114b33e12dfcd069">pthread_cond_wait</link>)&#32;(__cond,&#32;__mutex);
866 }
867 
868 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
869 __gthread_cond_timedwait&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae8dd15b5bc8c82f0d61fa4063122fdc8">__gthread_cond_t</link>&#32;*__cond,&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a97856e6b17fbc2936d96d8ea2962eda3">__gthread_mutex_t</link>&#32;*__mutex,
870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1af7819bed58b3ca9c8a995141339d8a3c">__gthread_time_t</link>&#32;*__abs_timeout)
871 {
872 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1adce004fdb8b6813b22e5e1ee1b2bf923">pthread_cond_timedwait</link>)&#32;(__cond,&#32;__mutex,&#32;__abs_timeout);
873 }
874 
875 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
876 __gthread_cond_wait_recursive&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae8dd15b5bc8c82f0d61fa4063122fdc8">__gthread_cond_t</link>&#32;*__cond,
877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a3c90aae862e464058c70dcf114373851">__gthread_recursive_mutex_t</link>&#32;*__mutex)
878 {
879 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gthread_cond_wait&#32;(__cond,&#32;__mutex);
880 }
881 
882 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
883 __gthread_cond_destroy&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae8dd15b5bc8c82f0d61fa4063122fdc8">__gthread_cond_t</link>*&#32;__cond)
884 {
885 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a95ab2cc62adbe4cd49201197487d272e">__gthrw_</link>(<link linkend="__classes_2lib_2pthread_8h_1a8855d5ab1f81a02c4e4c7e708bfe3ae6">pthread_cond_destroy</link>)&#32;(__cond);
886 }
887 
888 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_LIBOBJC&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
889 
890 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;!&#32;_GLIBCXX_GCC_GTHR_POSIX_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
