<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class____gnu__pbds_1_1cc__hash__table" xml:lang="en-US">
<title>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt; Class Template Reference</title>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;assoc_container.hpp&gt;</computeroutput>
</para>
Inheritance diagram for __gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__pbds_1_1cc__hash__table__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for __gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__pbds_1_1cc__hash__table__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>typedef <link linkend="_struct____gnu__pbds_1_1cc__hash__tag">cc_hash_tag</link> <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a38d159df0dc1c2215d72ac19843f31fa">container_category</link></para>
</listitem>
            <listitem><para>typedef Hash_Fn <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link></para>
</listitem>
            <listitem><para>typedef Eq_Fn <link linkend="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff">eq_fn</link></para>
</listitem>
            <listitem><para>typedef Resize_Policy <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a71c9be26c51008b994b00db5b7c475ff">resize_policy</link></para>
</listitem>
            <listitem><para>typedef Comb_Hash_Fn <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a058474341acb4f5cbef841463abb711a">comb_hash_fn</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_struct____gnu__pbds_1_1cc__hash__tag">cc_hash_tag</link> <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a38d159df0dc1c2215d72ac19843f31fa">container_category</link></para>
</listitem>
            <listitem><para>typedef Hash_Fn <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link></para>
</listitem>
            <listitem><para>typedef Eq_Fn <link linkend="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff">eq_fn</link></para>
</listitem>
            <listitem><para>typedef Resize_Policy <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a71c9be26c51008b994b00db5b7c475ff">resize_policy</link></para>
</listitem>
            <listitem><para>typedef Comb_Hash_Fn <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a058474341acb4f5cbef841463abb711a">comb_hash_fn</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_struct____gnu__pbds_1_1cc__hash__tag">cc_hash_tag</link> <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a38d159df0dc1c2215d72ac19843f31fa">container_category</link></para>
</listitem>
            <listitem><para>typedef Hash_Fn <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link></para>
</listitem>
            <listitem><para>typedef Eq_Fn <link linkend="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff">eq_fn</link></para>
</listitem>
            <listitem><para>typedef Resize_Policy <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a71c9be26c51008b994b00db5b7c475ff">resize_policy</link></para>
</listitem>
            <listitem><para>typedef Comb_Hash_Fn <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a058474341acb4f5cbef841463abb711a">comb_hash_fn</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class____gnu__pbds_1_1cc__hash__table_1a5bb84ecde74cb41964822f5d7cce74e1">cc_hash_table</link> ()</para>

<para>Default constructor. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1cc__hash__table_1ae82fe7fcb8c0975de60e6fa15ce95085">cc_hash_table</link> (const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp;h)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1cc__hash__table_1a27bdb924e2946488ec465fcacde15e21">cc_hash_table</link> (const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff">eq_fn</link> &amp;e)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1cc__hash__table_1a2f83d8a3065813574b512ebbf8437447">cc_hash_table</link> (const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff">eq_fn</link> &amp;e, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a058474341acb4f5cbef841463abb711a">comb_hash_fn</link> &amp;ch)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1cc__hash__table_1af141c65bc358d5c20b19adfe317ad7ac">cc_hash_table</link> (const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff">eq_fn</link> &amp;e, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a058474341acb4f5cbef841463abb711a">comb_hash_fn</link> &amp;ch, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a71c9be26c51008b994b00db5b7c475ff">resize_policy</link> &amp;rp)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1cc__hash__table_1a70bcd64a9cb68398c169151c36365be9">cc_hash_table</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1cc__hash__table_1a406cabdd8523a7b910875ce4ecce1cbc">cc_hash_table</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp;h)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1cc__hash__table_1a824df817359f701b3d157ed8638d4528">cc_hash_table</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff">eq_fn</link> &amp;e)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1cc__hash__table_1a1bca4b04926462c9f409b902ebb0b397">cc_hash_table</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff">eq_fn</link> &amp;e, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a058474341acb4f5cbef841463abb711a">comb_hash_fn</link> &amp;ch)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1cc__hash__table_1a2ffb9ad5d7b0bdde4f5e079ed3c0a6a5">cc_hash_table</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff">eq_fn</link> &amp;e, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a058474341acb4f5cbef841463abb711a">comb_hash_fn</link> &amp;ch, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a71c9be26c51008b994b00db5b7c475ff">resize_policy</link> &amp;rp)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1cc__hash__table_1a10c4362c6fe53b45e162b9ba7799a627">cc_hash_table</link> (const <link linkend="_class____gnu__pbds_1_1cc__hash__table">cc_hash_table</link> &amp;other)</para>
</listitem>
            <listitem><para>virtual <link linkend="_class____gnu__pbds_1_1cc__hash__table_1ac5a27b98648ef886e6155830054985e7">~cc_hash_table</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1cc__hash__table">cc_hash_table</link> &amp; <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a2d88bda1d62287bbfa60f4c12eb6a2b6">operator=</link> (const <link linkend="_class____gnu__pbds_1_1cc__hash__table">cc_hash_table</link> &amp;other)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a404404b74ca8a67d629ace35000a04ad">swap</link> (<link linkend="_class____gnu__pbds_1_1cc__hash__table">cc_hash_table</link> &amp;other)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1cc__hash__table_1a5bb84ecde74cb41964822f5d7cce74e1">cc_hash_table</link> ()</para>

<para>Default constructor. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1cc__hash__table_1ae82fe7fcb8c0975de60e6fa15ce95085">cc_hash_table</link> (const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp;h)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1cc__hash__table_1a27bdb924e2946488ec465fcacde15e21">cc_hash_table</link> (const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff">eq_fn</link> &amp;e)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1cc__hash__table_1a2f83d8a3065813574b512ebbf8437447">cc_hash_table</link> (const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff">eq_fn</link> &amp;e, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a058474341acb4f5cbef841463abb711a">comb_hash_fn</link> &amp;ch)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1cc__hash__table_1af141c65bc358d5c20b19adfe317ad7ac">cc_hash_table</link> (const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff">eq_fn</link> &amp;e, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a058474341acb4f5cbef841463abb711a">comb_hash_fn</link> &amp;ch, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a71c9be26c51008b994b00db5b7c475ff">resize_policy</link> &amp;rp)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1cc__hash__table_1a70bcd64a9cb68398c169151c36365be9">cc_hash_table</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1cc__hash__table_1a406cabdd8523a7b910875ce4ecce1cbc">cc_hash_table</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp;h)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1cc__hash__table_1a824df817359f701b3d157ed8638d4528">cc_hash_table</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff">eq_fn</link> &amp;e)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1cc__hash__table_1a1bca4b04926462c9f409b902ebb0b397">cc_hash_table</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff">eq_fn</link> &amp;e, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a058474341acb4f5cbef841463abb711a">comb_hash_fn</link> &amp;ch)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1cc__hash__table_1a2ffb9ad5d7b0bdde4f5e079ed3c0a6a5">cc_hash_table</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff">eq_fn</link> &amp;e, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a058474341acb4f5cbef841463abb711a">comb_hash_fn</link> &amp;ch, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a71c9be26c51008b994b00db5b7c475ff">resize_policy</link> &amp;rp)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1cc__hash__table_1a10c4362c6fe53b45e162b9ba7799a627">cc_hash_table</link> (const <link linkend="_class____gnu__pbds_1_1cc__hash__table">cc_hash_table</link> &amp;other)</para>
</listitem>
            <listitem><para>virtual <link linkend="_class____gnu__pbds_1_1cc__hash__table_1ac5a27b98648ef886e6155830054985e7">~cc_hash_table</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1cc__hash__table">cc_hash_table</link> &amp; <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a2d88bda1d62287bbfa60f4c12eb6a2b6">operator=</link> (const <link linkend="_class____gnu__pbds_1_1cc__hash__table">cc_hash_table</link> &amp;other)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a404404b74ca8a67d629ace35000a04ad">swap</link> (<link linkend="_class____gnu__pbds_1_1cc__hash__table">cc_hash_table</link> &amp;other)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1cc__hash__table_1a5bb84ecde74cb41964822f5d7cce74e1">cc_hash_table</link> ()</para>

<para>Default constructor. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1cc__hash__table_1ae82fe7fcb8c0975de60e6fa15ce95085">cc_hash_table</link> (const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp;h)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1cc__hash__table_1a27bdb924e2946488ec465fcacde15e21">cc_hash_table</link> (const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff">eq_fn</link> &amp;e)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1cc__hash__table_1a2f83d8a3065813574b512ebbf8437447">cc_hash_table</link> (const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff">eq_fn</link> &amp;e, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a058474341acb4f5cbef841463abb711a">comb_hash_fn</link> &amp;ch)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1cc__hash__table_1af141c65bc358d5c20b19adfe317ad7ac">cc_hash_table</link> (const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff">eq_fn</link> &amp;e, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a058474341acb4f5cbef841463abb711a">comb_hash_fn</link> &amp;ch, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a71c9be26c51008b994b00db5b7c475ff">resize_policy</link> &amp;rp)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1cc__hash__table_1a70bcd64a9cb68398c169151c36365be9">cc_hash_table</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1cc__hash__table_1a406cabdd8523a7b910875ce4ecce1cbc">cc_hash_table</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp;h)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1cc__hash__table_1a824df817359f701b3d157ed8638d4528">cc_hash_table</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff">eq_fn</link> &amp;e)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1cc__hash__table_1a1bca4b04926462c9f409b902ebb0b397">cc_hash_table</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff">eq_fn</link> &amp;e, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a058474341acb4f5cbef841463abb711a">comb_hash_fn</link> &amp;ch)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1cc__hash__table_1a2ffb9ad5d7b0bdde4f5e079ed3c0a6a5">cc_hash_table</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff">eq_fn</link> &amp;e, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a058474341acb4f5cbef841463abb711a">comb_hash_fn</link> &amp;ch, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a71c9be26c51008b994b00db5b7c475ff">resize_policy</link> &amp;rp)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1cc__hash__table_1a10c4362c6fe53b45e162b9ba7799a627">cc_hash_table</link> (const <link linkend="_class____gnu__pbds_1_1cc__hash__table">cc_hash_table</link> &amp;other)</para>
</listitem>
            <listitem><para>virtual <link linkend="_class____gnu__pbds_1_1cc__hash__table_1ac5a27b98648ef886e6155830054985e7">~cc_hash_table</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1cc__hash__table">cc_hash_table</link> &amp; <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a2d88bda1d62287bbfa60f4c12eb6a2b6">operator=</link> (const <link linkend="_class____gnu__pbds_1_1cc__hash__table">cc_hash_table</link> &amp;other)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a404404b74ca8a67d629ace35000a04ad">swap</link> (<link linkend="_class____gnu__pbds_1_1cc__hash__table">cc_hash_table</link> &amp;other)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename Key, typename Mapped, typename Hash_Fn = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn = detail::default_comb_hash_fn::type, typename Resize_Policy = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc = std::allocator&lt;char&gt;&gt;<?linebreak?>class __gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</title></simplesect>

<para>A collision-chaining hash-based associative container.</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Key</entry><entry>
<para>Key type. </para>
</entry>
                            </row>
                            <row>
<entry>Mapped</entry><entry>
<para>Map type. </para>
</entry>
                            </row>
                            <row>
<entry>Hash_Fn</entry><entry>
<para>Hashing functor. </para>
</entry>
                            </row>
                            <row>
<entry>Eq_Fn</entry><entry>
<para>Equal functor. </para>
</entry>
                            </row>
                            <row>
<entry>Comb_Hash_Fn</entry><entry>
<para>Combining hash functor. If Hash_Fn is not <link linkend="_struct____gnu__pbds_1_1null__type">null_type</link>, then this is the ranged-hash functor; otherwise, this is the range-hashing functor. XXX(See Design::Hash-Based Containers::Hash Policies.) </para>
</entry>
                            </row>
                            <row>
<entry>Resize_Policy</entry><entry>
<para>Resizes hash. </para>
</entry>
                            </row>
                            <row>
<entry>Store_Hash</entry><entry>
<para>Indicates whether the hash value will be stored along with each key. If Hash_Fn is <link linkend="_struct____gnu__pbds_1_1null__type">null_type</link>, then the container will not compile if this value is true </para>
</entry>
                            </row>
                            <row>
<entry>_Alloc</entry><entry>
<para>Allocator type.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Base tag choices are: <link linkend="_struct____gnu__pbds_1_1cc__hash__tag">cc_hash_tag</link>.</para>

<para>Base is <link linkend="_class____gnu__pbds_1_1basic__hash__table">basic_hash_table</link>. </para>
</section>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a058474341acb4f5cbef841463abb711a"/><section>
    <title>comb_hash_fn<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>comb_hash_fn</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>comb_hash_fn</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>typedef Comb_Hash_Fn <link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::comb_hash_fn</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a058474341acb4f5cbef841463abb711a"/><section>
    <title>comb_hash_fn<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>comb_hash_fn</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>comb_hash_fn</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>typedef Comb_Hash_Fn <link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::comb_hash_fn</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a058474341acb4f5cbef841463abb711a"/><section>
    <title>comb_hash_fn<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>comb_hash_fn</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>comb_hash_fn</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>typedef Comb_Hash_Fn <link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::comb_hash_fn</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a38d159df0dc1c2215d72ac19843f31fa"/><section>
    <title>container_category<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>container_category</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>container_category</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>typedef <link linkend="_struct____gnu__pbds_1_1cc__hash__tag">cc_hash_tag</link> <link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::container_category</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a38d159df0dc1c2215d72ac19843f31fa"/><section>
    <title>container_category<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>container_category</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>container_category</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>typedef <link linkend="_struct____gnu__pbds_1_1cc__hash__tag">cc_hash_tag</link> <link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::container_category</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a38d159df0dc1c2215d72ac19843f31fa"/><section>
    <title>container_category<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>container_category</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>container_category</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>typedef <link linkend="_struct____gnu__pbds_1_1cc__hash__tag">cc_hash_tag</link> <link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::container_category</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff"/><section>
    <title>eq_fn<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>eq_fn</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>eq_fn</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>typedef Eq_Fn <link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::eq_fn</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff"/><section>
    <title>eq_fn<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>eq_fn</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>eq_fn</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>typedef Eq_Fn <link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::eq_fn</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff"/><section>
    <title>eq_fn<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>eq_fn</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>eq_fn</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>typedef Eq_Fn <link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::eq_fn</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0"/><section>
    <title>hash_fn<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>hash_fn</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>hash_fn</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>typedef Hash_Fn <link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::hash_fn</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0"/><section>
    <title>hash_fn<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>hash_fn</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>hash_fn</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>typedef Hash_Fn <link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::hash_fn</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0"/><section>
    <title>hash_fn<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>hash_fn</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>hash_fn</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>typedef Hash_Fn <link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::hash_fn</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a71c9be26c51008b994b00db5b7c475ff"/><section>
    <title>resize_policy<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>resize_policy</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>resize_policy</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>typedef Resize_Policy <link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::resize_policy</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a71c9be26c51008b994b00db5b7c475ff"/><section>
    <title>resize_policy<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>resize_policy</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>resize_policy</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>typedef Resize_Policy <link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::resize_policy</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a71c9be26c51008b994b00db5b7c475ff"/><section>
    <title>resize_policy<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>resize_policy</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>resize_policy</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>typedef Resize_Policy <link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::resize_policy</computeroutput></para></section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a5bb84ecde74cb41964822f5d7cce74e1"/><section>
    <title>cc_hash_table()<computeroutput>[1/33]</computeroutput></title>
<indexterm><primary>cc_hash_table</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>cc_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::cc_hash_table ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Default constructor. </para>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1ae82fe7fcb8c0975de60e6fa15ce95085"/><section>
    <title>cc_hash_table()<computeroutput>[2/33]</computeroutput></title>
<indexterm><primary>cc_hash_table</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>cc_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::cc_hash_table (const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp; h)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking some policy objects. r_hash_fn will be copied by the Hash_Fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a27bdb924e2946488ec465fcacde15e21"/><section>
    <title>cc_hash_table()<computeroutput>[3/33]</computeroutput></title>
<indexterm><primary>cc_hash_table</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>cc_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::cc_hash_table (const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff">eq_fn</link> &amp; e)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking some policy objects. r_hash_fn will be copied by the hash_fn object of the container object, and r_eq_fn will be copied by the eq_fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a2f83d8a3065813574b512ebbf8437447"/><section>
    <title>cc_hash_table()<computeroutput>[4/33]</computeroutput></title>
<indexterm><primary>cc_hash_table</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>cc_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::cc_hash_table (const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff">eq_fn</link> &amp; e, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a058474341acb4f5cbef841463abb711a">comb_hash_fn</link> &amp; ch)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking some policy objects. r_hash_fn will be copied by the hash_fn object of the container object, r_eq_fn will be copied by the eq_fn object of the container object, and r_comb_hash_fn will be copied by the comb_hash_fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1af141c65bc358d5c20b19adfe317ad7ac"/><section>
    <title>cc_hash_table()<computeroutput>[5/33]</computeroutput></title>
<indexterm><primary>cc_hash_table</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>cc_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::cc_hash_table (const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff">eq_fn</link> &amp; e, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a058474341acb4f5cbef841463abb711a">comb_hash_fn</link> &amp; ch, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a71c9be26c51008b994b00db5b7c475ff">resize_policy</link> &amp; rp)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking some policy objects. r_hash_fn will be copied by the hash_fn object of the container object, r_eq_fn will be copied by the eq_fn object of the container object, r_comb_hash_fn will be copied by the comb_hash_fn object of the container object, and r_resize_policy will be copied by the resize_policy object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a70bcd64a9cb68398c169151c36365be9"/><section>
    <title>cc_hash_table()<computeroutput>[6/33]</computeroutput></title>
<indexterm><primary>cc_hash_table</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>cc_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::cc_hash_table (It first, It last)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types. The value_types between first_it and last_it will be inserted into the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a406cabdd8523a7b910875ce4ecce1cbc"/><section>
    <title>cc_hash_table()<computeroutput>[7/33]</computeroutput></title>
<indexterm><primary>cc_hash_table</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>cc_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::cc_hash_table (It first, It last, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp; h)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types and some policy objects. The value_types between first_it and last_it will be inserted into the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a824df817359f701b3d157ed8638d4528"/><section>
    <title>cc_hash_table()<computeroutput>[8/33]</computeroutput></title>
<indexterm><primary>cc_hash_table</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>cc_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::cc_hash_table (It first, It last, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff">eq_fn</link> &amp; e)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types and some policy objects The value_types between first_it and last_it will be inserted into the container object. r_hash_fn will be copied by the hash_fn object of the container object, and r_eq_fn will be copied by the eq_fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a1bca4b04926462c9f409b902ebb0b397"/><section>
    <title>cc_hash_table()<computeroutput>[9/33]</computeroutput></title>
<indexterm><primary>cc_hash_table</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>cc_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::cc_hash_table (It first, It last, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff">eq_fn</link> &amp; e, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a058474341acb4f5cbef841463abb711a">comb_hash_fn</link> &amp; ch)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types and some policy objects The value_types between first_it and last_it will be inserted into the container object. r_hash_fn will be copied by the hash_fn object of the container object, r_eq_fn will be copied by the eq_fn object of the container object, and r_comb_hash_fn will be copied by the comb_hash_fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a2ffb9ad5d7b0bdde4f5e079ed3c0a6a5"/><section>
    <title>cc_hash_table()<computeroutput>[10/33]</computeroutput></title>
<indexterm><primary>cc_hash_table</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>cc_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::cc_hash_table (It first, It last, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff">eq_fn</link> &amp; e, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a058474341acb4f5cbef841463abb711a">comb_hash_fn</link> &amp; ch, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a71c9be26c51008b994b00db5b7c475ff">resize_policy</link> &amp; rp)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types and some policy objects The value_types between first_it and last_it will be inserted into the container object. r_hash_fn will be copied by the hash_fn object of the container object, r_eq_fn will be copied by the eq_fn object of the container object, r_comb_hash_fn will be copied by the comb_hash_fn object of the container object, and r_resize_policy will be copied by the resize_policy object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a10c4362c6fe53b45e162b9ba7799a627"/><section>
    <title>cc_hash_table()<computeroutput>[11/33]</computeroutput></title>
<indexterm><primary>cc_hash_table</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>cc_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::cc_hash_table (const <link linkend="_class____gnu__pbds_1_1cc__hash__table">cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1ac5a27b98648ef886e6155830054985e7"/><section>
    <title>~cc_hash_table()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>~cc_hash_table</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>~cc_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>virtual <link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::~<link linkend="_class____gnu__pbds_1_1cc__hash__table">cc_hash_table</link> ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a5bb84ecde74cb41964822f5d7cce74e1"/><section>
    <title>cc_hash_table()<computeroutput>[12/33]</computeroutput></title>
<indexterm><primary>cc_hash_table</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>cc_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::cc_hash_table ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Default constructor. </para>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1ae82fe7fcb8c0975de60e6fa15ce95085"/><section>
    <title>cc_hash_table()<computeroutput>[13/33]</computeroutput></title>
<indexterm><primary>cc_hash_table</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>cc_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::cc_hash_table (const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp; h)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking some policy objects. r_hash_fn will be copied by the Hash_Fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a27bdb924e2946488ec465fcacde15e21"/><section>
    <title>cc_hash_table()<computeroutput>[14/33]</computeroutput></title>
<indexterm><primary>cc_hash_table</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>cc_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::cc_hash_table (const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff">eq_fn</link> &amp; e)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking some policy objects. r_hash_fn will be copied by the hash_fn object of the container object, and r_eq_fn will be copied by the eq_fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a2f83d8a3065813574b512ebbf8437447"/><section>
    <title>cc_hash_table()<computeroutput>[15/33]</computeroutput></title>
<indexterm><primary>cc_hash_table</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>cc_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::cc_hash_table (const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff">eq_fn</link> &amp; e, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a058474341acb4f5cbef841463abb711a">comb_hash_fn</link> &amp; ch)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking some policy objects. r_hash_fn will be copied by the hash_fn object of the container object, r_eq_fn will be copied by the eq_fn object of the container object, and r_comb_hash_fn will be copied by the comb_hash_fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1af141c65bc358d5c20b19adfe317ad7ac"/><section>
    <title>cc_hash_table()<computeroutput>[16/33]</computeroutput></title>
<indexterm><primary>cc_hash_table</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>cc_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::cc_hash_table (const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff">eq_fn</link> &amp; e, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a058474341acb4f5cbef841463abb711a">comb_hash_fn</link> &amp; ch, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a71c9be26c51008b994b00db5b7c475ff">resize_policy</link> &amp; rp)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking some policy objects. r_hash_fn will be copied by the hash_fn object of the container object, r_eq_fn will be copied by the eq_fn object of the container object, r_comb_hash_fn will be copied by the comb_hash_fn object of the container object, and r_resize_policy will be copied by the resize_policy object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a70bcd64a9cb68398c169151c36365be9"/><section>
    <title>cc_hash_table()<computeroutput>[17/33]</computeroutput></title>
<indexterm><primary>cc_hash_table</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>cc_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::cc_hash_table (It first, It last)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types. The value_types between first_it and last_it will be inserted into the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a406cabdd8523a7b910875ce4ecce1cbc"/><section>
    <title>cc_hash_table()<computeroutput>[18/33]</computeroutput></title>
<indexterm><primary>cc_hash_table</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>cc_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::cc_hash_table (It first, It last, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp; h)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types and some policy objects. The value_types between first_it and last_it will be inserted into the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a824df817359f701b3d157ed8638d4528"/><section>
    <title>cc_hash_table()<computeroutput>[19/33]</computeroutput></title>
<indexterm><primary>cc_hash_table</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>cc_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::cc_hash_table (It first, It last, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff">eq_fn</link> &amp; e)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types and some policy objects The value_types between first_it and last_it will be inserted into the container object. r_hash_fn will be copied by the hash_fn object of the container object, and r_eq_fn will be copied by the eq_fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a1bca4b04926462c9f409b902ebb0b397"/><section>
    <title>cc_hash_table()<computeroutput>[20/33]</computeroutput></title>
<indexterm><primary>cc_hash_table</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>cc_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::cc_hash_table (It first, It last, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff">eq_fn</link> &amp; e, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a058474341acb4f5cbef841463abb711a">comb_hash_fn</link> &amp; ch)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types and some policy objects The value_types between first_it and last_it will be inserted into the container object. r_hash_fn will be copied by the hash_fn object of the container object, r_eq_fn will be copied by the eq_fn object of the container object, and r_comb_hash_fn will be copied by the comb_hash_fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a2ffb9ad5d7b0bdde4f5e079ed3c0a6a5"/><section>
    <title>cc_hash_table()<computeroutput>[21/33]</computeroutput></title>
<indexterm><primary>cc_hash_table</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>cc_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::cc_hash_table (It first, It last, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff">eq_fn</link> &amp; e, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a058474341acb4f5cbef841463abb711a">comb_hash_fn</link> &amp; ch, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a71c9be26c51008b994b00db5b7c475ff">resize_policy</link> &amp; rp)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types and some policy objects The value_types between first_it and last_it will be inserted into the container object. r_hash_fn will be copied by the hash_fn object of the container object, r_eq_fn will be copied by the eq_fn object of the container object, r_comb_hash_fn will be copied by the comb_hash_fn object of the container object, and r_resize_policy will be copied by the resize_policy object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a10c4362c6fe53b45e162b9ba7799a627"/><section>
    <title>cc_hash_table()<computeroutput>[22/33]</computeroutput></title>
<indexterm><primary>cc_hash_table</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>cc_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::cc_hash_table (const <link linkend="_class____gnu__pbds_1_1cc__hash__table">cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1ac5a27b98648ef886e6155830054985e7"/><section>
    <title>~cc_hash_table()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>~cc_hash_table</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>~cc_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>virtual <link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::~<link linkend="_class____gnu__pbds_1_1cc__hash__table">cc_hash_table</link> ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a5bb84ecde74cb41964822f5d7cce74e1"/><section>
    <title>cc_hash_table()<computeroutput>[23/33]</computeroutput></title>
<indexterm><primary>cc_hash_table</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>cc_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::cc_hash_table ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Default constructor. </para>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1ae82fe7fcb8c0975de60e6fa15ce95085"/><section>
    <title>cc_hash_table()<computeroutput>[24/33]</computeroutput></title>
<indexterm><primary>cc_hash_table</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>cc_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::cc_hash_table (const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp; h)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking some policy objects. r_hash_fn will be copied by the Hash_Fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a27bdb924e2946488ec465fcacde15e21"/><section>
    <title>cc_hash_table()<computeroutput>[25/33]</computeroutput></title>
<indexterm><primary>cc_hash_table</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>cc_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::cc_hash_table (const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff">eq_fn</link> &amp; e)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking some policy objects. r_hash_fn will be copied by the hash_fn object of the container object, and r_eq_fn will be copied by the eq_fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a2f83d8a3065813574b512ebbf8437447"/><section>
    <title>cc_hash_table()<computeroutput>[26/33]</computeroutput></title>
<indexterm><primary>cc_hash_table</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>cc_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::cc_hash_table (const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff">eq_fn</link> &amp; e, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a058474341acb4f5cbef841463abb711a">comb_hash_fn</link> &amp; ch)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking some policy objects. r_hash_fn will be copied by the hash_fn object of the container object, r_eq_fn will be copied by the eq_fn object of the container object, and r_comb_hash_fn will be copied by the comb_hash_fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1af141c65bc358d5c20b19adfe317ad7ac"/><section>
    <title>cc_hash_table()<computeroutput>[27/33]</computeroutput></title>
<indexterm><primary>cc_hash_table</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>cc_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::cc_hash_table (const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff">eq_fn</link> &amp; e, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a058474341acb4f5cbef841463abb711a">comb_hash_fn</link> &amp; ch, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a71c9be26c51008b994b00db5b7c475ff">resize_policy</link> &amp; rp)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking some policy objects. r_hash_fn will be copied by the hash_fn object of the container object, r_eq_fn will be copied by the eq_fn object of the container object, r_comb_hash_fn will be copied by the comb_hash_fn object of the container object, and r_resize_policy will be copied by the resize_policy object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a70bcd64a9cb68398c169151c36365be9"/><section>
    <title>cc_hash_table()<computeroutput>[28/33]</computeroutput></title>
<indexterm><primary>cc_hash_table</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>cc_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::cc_hash_table (It first, It last)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types. The value_types between first_it and last_it will be inserted into the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a406cabdd8523a7b910875ce4ecce1cbc"/><section>
    <title>cc_hash_table()<computeroutput>[29/33]</computeroutput></title>
<indexterm><primary>cc_hash_table</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>cc_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::cc_hash_table (It first, It last, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp; h)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types and some policy objects. The value_types between first_it and last_it will be inserted into the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a824df817359f701b3d157ed8638d4528"/><section>
    <title>cc_hash_table()<computeroutput>[30/33]</computeroutput></title>
<indexterm><primary>cc_hash_table</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>cc_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::cc_hash_table (It first, It last, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff">eq_fn</link> &amp; e)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types and some policy objects The value_types between first_it and last_it will be inserted into the container object. r_hash_fn will be copied by the hash_fn object of the container object, and r_eq_fn will be copied by the eq_fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a1bca4b04926462c9f409b902ebb0b397"/><section>
    <title>cc_hash_table()<computeroutput>[31/33]</computeroutput></title>
<indexterm><primary>cc_hash_table</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>cc_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::cc_hash_table (It first, It last, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff">eq_fn</link> &amp; e, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a058474341acb4f5cbef841463abb711a">comb_hash_fn</link> &amp; ch)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types and some policy objects The value_types between first_it and last_it will be inserted into the container object. r_hash_fn will be copied by the hash_fn object of the container object, r_eq_fn will be copied by the eq_fn object of the container object, and r_comb_hash_fn will be copied by the comb_hash_fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a2ffb9ad5d7b0bdde4f5e079ed3c0a6a5"/><section>
    <title>cc_hash_table()<computeroutput>[32/33]</computeroutput></title>
<indexterm><primary>cc_hash_table</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>cc_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::cc_hash_table (It first, It last, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a33fdc025ce86db4546f99bfb70e31bd0">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1acbf863081a29a5540fd6bb2b9aafc0ff">eq_fn</link> &amp; e, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a058474341acb4f5cbef841463abb711a">comb_hash_fn</link> &amp; ch, const <link linkend="_class____gnu__pbds_1_1cc__hash__table_1a71c9be26c51008b994b00db5b7c475ff">resize_policy</link> &amp; rp)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types and some policy objects The value_types between first_it and last_it will be inserted into the container object. r_hash_fn will be copied by the hash_fn object of the container object, r_eq_fn will be copied by the eq_fn object of the container object, r_comb_hash_fn will be copied by the comb_hash_fn object of the container object, and r_resize_policy will be copied by the resize_policy object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a10c4362c6fe53b45e162b9ba7799a627"/><section>
    <title>cc_hash_table()<computeroutput>[33/33]</computeroutput></title>
<indexterm><primary>cc_hash_table</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>cc_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::cc_hash_table (const <link linkend="_class____gnu__pbds_1_1cc__hash__table">cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1ac5a27b98648ef886e6155830054985e7"/><section>
    <title>~cc_hash_table()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>~cc_hash_table</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>~cc_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>virtual <link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::~<link linkend="_class____gnu__pbds_1_1cc__hash__table">cc_hash_table</link> ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a2d88bda1d62287bbfa60f4c12eb6a2b6"/><section>
    <title>operator=()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1cc__hash__table">cc_hash_table</link> &amp; <link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::operator= (const <link linkend="_class____gnu__pbds_1_1cc__hash__table">cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__pbds_1_1cc__hash__table_a2d88bda1d62287bbfa60f4c12eb6a2b6_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a2d88bda1d62287bbfa60f4c12eb6a2b6"/><section>
    <title>operator=()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1cc__hash__table">cc_hash_table</link> &amp; <link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::operator= (const <link linkend="_class____gnu__pbds_1_1cc__hash__table">cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__pbds_1_1cc__hash__table_a2d88bda1d62287bbfa60f4c12eb6a2b6_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a2d88bda1d62287bbfa60f4c12eb6a2b6"/><section>
    <title>operator=()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1cc__hash__table">cc_hash_table</link> &amp; <link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::operator= (const <link linkend="_class____gnu__pbds_1_1cc__hash__table">cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__pbds_1_1cc__hash__table_a2d88bda1d62287bbfa60f4c12eb6a2b6_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a404404b74ca8a67d629ace35000a04ad"/><section>
    <title>swap()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>swap</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>swap</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::swap (<link linkend="_class____gnu__pbds_1_1cc__hash__table">cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__pbds_1_1cc__hash__table_a404404b74ca8a67d629ace35000a04ad_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a404404b74ca8a67d629ace35000a04ad"/><section>
    <title>swap()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>swap</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>swap</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::swap (<link linkend="_class____gnu__pbds_1_1cc__hash__table">cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1cc__hash__table_1a404404b74ca8a67d629ace35000a04ad"/><section>
    <title>swap()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>swap</primary><secondary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::cc_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>swap</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Hash_Fn  = detail::default_comb_hash_fn::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Hash_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__pbds_1_1cc__hash__table">__gnu_pbds::cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::swap (<link linkend="_class____gnu__pbds_1_1cc__hash__table">cc_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Hash_Fn, Resize_Policy, Store_Hash, _Alloc &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following files:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/ext/pb_ds/<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2assoc__container_8hpp">assoc_container.hpp</link>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/ext/pb_ds/<link linkend="_lib_2include_2c_09_09_2ext_2pb__ds_2assoc__container_8hpp">assoc_container.hpp</link>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/ext/pb_ds/<link linkend="__old_2_classes_2lib_2include_2c_09_09_2ext_2pb__ds_2assoc__container_8hpp">assoc_container.hpp</link></section>
</section>
