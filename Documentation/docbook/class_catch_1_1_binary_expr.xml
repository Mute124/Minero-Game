<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_catch_1_1_binary_expr" xml:lang="en-US">
<title>Catch::BinaryExpr&lt; LhsT, RhsT &gt; Class Template Reference</title>
<indexterm><primary>Catch::BinaryExpr&lt; LhsT, RhsT &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;catch.hpp&gt;</computeroutput>
</para>
Inheritance diagram for Catch::BinaryExpr&lt; LhsT, RhsT &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_catch_1_1_binary_expr__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for Catch::BinaryExpr&lt; LhsT, RhsT &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_catch_1_1_binary_expr__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_catch_1_1_binary_expr_1a657d66346aef97a760c22776fe6008b6">BinaryExpr</link> (<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> comparisonResult, LhsT lhs, <link linkend="_class_catch_1_1_string_ref">StringRef</link> op, RhsT rhs)</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>auto <link linkend="_class_catch_1_1_binary_expr_1ae4fba62be6063010bc33d0988ff7d8d5">operator&amp;&amp;</link> (T) const -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt; LhsT, RhsT const &amp; &gt; const</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>auto <link linkend="_class_catch_1_1_binary_expr_1a331e53968b1a2f92827c35721cc7eded">operator||</link> (T) const -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt; LhsT, RhsT const &amp; &gt; const</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>auto <link linkend="_class_catch_1_1_binary_expr_1a245bffd2aab2f560814739986710aaf1">operator==</link> (T) const -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt; LhsT, RhsT const &amp; &gt; const</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>auto <link linkend="_class_catch_1_1_binary_expr_1ad06dd2c9fc1dd77fe8d8e51440c14ff6">operator!=</link> (T) const -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt; LhsT, RhsT const &amp; &gt; const</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>auto <link linkend="_class_catch_1_1_binary_expr_1acff324c7d285cbee7efa9fbe83955638">operator&gt;</link> (T) const -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt; LhsT, RhsT const &amp; &gt; const</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>auto <link linkend="_class_catch_1_1_binary_expr_1a7e6c3dcf59b3cd51e7c82355da3ef451">operator&lt;</link> (T) const -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt; LhsT, RhsT const &amp; &gt; const</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>auto <link linkend="_class_catch_1_1_binary_expr_1a67901ddb9afd83961fb4e65ea3d75050">operator&gt;=</link> (T) const -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt; LhsT, RhsT const &amp; &gt; const</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>auto <link linkend="_class_catch_1_1_binary_expr_1a5590a2c5f5074ca2509c09b92bfcdf57">operator&lt;=</link> (T) const -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt; LhsT, RhsT const &amp; &gt; const</para>
</listitem>
        </itemizedlist>
</simplesect>
Public Member Functions inherited from <link linkend="_struct_catch_1_1_i_transient_expression">Catch::ITransientExpression</link>        <itemizedlist>
            <listitem><para>auto <link linkend="_struct_catch_1_1_i_transient_expression_1a3b436e13a0a6d3522bbf70d4e31deb22">isBinaryExpression</link> () const -&gt; <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link></para>
</listitem>
            <listitem><para>auto <link linkend="_struct_catch_1_1_i_transient_expression_1a101c7db86c87eff93a8ff496720e6320">getResult</link> () const -&gt; <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link></para>
</listitem>
            <listitem><para><link linkend="_struct_catch_1_1_i_transient_expression_1aafe69572b7ed884e63ec81f58d4afd8c">ITransientExpression</link> (<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_struct_catch_1_1_i_transient_expression_1a3b436e13a0a6d3522bbf70d4e31deb22">isBinaryExpression</link>, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>)</para>
</listitem>
            <listitem><para>virtual <link linkend="_struct_catch_1_1_i_transient_expression_1aeadf426de589938c4964fe4068eeee77">~ITransientExpression</link> ()</para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Additional Inherited Members    </title>
Public Attributes inherited from <link linkend="_struct_catch_1_1_i_transient_expression">Catch::ITransientExpression</link>        <itemizedlist>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_struct_catch_1_1_i_transient_expression_1a75ce48da824d514d08152d396abb28d8">m_isBinaryExpression</link></para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_struct_catch_1_1_i_transient_expression_1a4646e2b5e0156e913653ec3b9b60c942">m_result</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_catch_1_1_binary_expr_1a657d66346aef97a760c22776fe6008b6"/><section>
    <title>BinaryExpr()</title>
<indexterm><primary>BinaryExpr</primary><secondary>Catch::BinaryExpr&lt; LhsT, RhsT &gt;</secondary></indexterm>
<indexterm><primary>Catch::BinaryExpr&lt; LhsT, RhsT &gt;</primary><secondary>BinaryExpr</secondary></indexterm>
<computeroutput>template&lt;typename LhsT , typename RhsT &gt; </computeroutput><para><computeroutput><link linkend="_class_catch_1_1_binary_expr">Catch::BinaryExpr</link>&lt; LhsT, RhsT &gt;::BinaryExpr (<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> comparisonResult, LhsT lhs, <link linkend="_class_catch_1_1_string_ref">StringRef</link> op, RhsT rhs)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_catch_1_1_binary_expr_1ad06dd2c9fc1dd77fe8d8e51440c14ff6"/><section>
    <title>operator!=()</title>
<indexterm><primary>operator!=</primary><secondary>Catch::BinaryExpr&lt; LhsT, RhsT &gt;</secondary></indexterm>
<indexterm><primary>Catch::BinaryExpr&lt; LhsT, RhsT &gt;</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;typename LhsT , typename RhsT &gt; </computeroutput><computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>auto <link linkend="_class_catch_1_1_binary_expr">Catch::BinaryExpr</link>&lt; LhsT, RhsT &gt;::operator!= (T ) const -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt;LhsT, RhsT const&amp;&gt; const <computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_binary_expr_1ae4fba62be6063010bc33d0988ff7d8d5"/><section>
    <title>operator&amp;&amp;()</title>
<indexterm><primary>operator&amp;&amp;</primary><secondary>Catch::BinaryExpr&lt; LhsT, RhsT &gt;</secondary></indexterm>
<indexterm><primary>Catch::BinaryExpr&lt; LhsT, RhsT &gt;</primary><secondary>operator&amp;&amp;</secondary></indexterm>
<computeroutput>template&lt;typename LhsT , typename RhsT &gt; </computeroutput><computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>auto <link linkend="_class_catch_1_1_binary_expr">Catch::BinaryExpr</link>&lt; LhsT, RhsT &gt;::operator&amp;&amp; (T ) const -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt;LhsT, RhsT const&amp;&gt; const <computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_binary_expr_1a7e6c3dcf59b3cd51e7c82355da3ef451"/><section>
    <title>operator&lt;()</title>
<indexterm><primary>operator&lt;</primary><secondary>Catch::BinaryExpr&lt; LhsT, RhsT &gt;</secondary></indexterm>
<indexterm><primary>Catch::BinaryExpr&lt; LhsT, RhsT &gt;</primary><secondary>operator&lt;</secondary></indexterm>
<computeroutput>template&lt;typename LhsT , typename RhsT &gt; </computeroutput><computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>auto <link linkend="_class_catch_1_1_binary_expr">Catch::BinaryExpr</link>&lt; LhsT, RhsT &gt;::operator&lt; (T ) const -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt;LhsT, RhsT const&amp;&gt; const <computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_binary_expr_1a5590a2c5f5074ca2509c09b92bfcdf57"/><section>
    <title>operator&lt;=()</title>
<indexterm><primary>operator&lt;=</primary><secondary>Catch::BinaryExpr&lt; LhsT, RhsT &gt;</secondary></indexterm>
<indexterm><primary>Catch::BinaryExpr&lt; LhsT, RhsT &gt;</primary><secondary>operator&lt;=</secondary></indexterm>
<computeroutput>template&lt;typename LhsT , typename RhsT &gt; </computeroutput><computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>auto <link linkend="_class_catch_1_1_binary_expr">Catch::BinaryExpr</link>&lt; LhsT, RhsT &gt;::operator&lt;= (T ) const -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt;LhsT, RhsT const&amp;&gt; const <computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_binary_expr_1a245bffd2aab2f560814739986710aaf1"/><section>
    <title>operator==()</title>
<indexterm><primary>operator==</primary><secondary>Catch::BinaryExpr&lt; LhsT, RhsT &gt;</secondary></indexterm>
<indexterm><primary>Catch::BinaryExpr&lt; LhsT, RhsT &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;typename LhsT , typename RhsT &gt; </computeroutput><computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>auto <link linkend="_class_catch_1_1_binary_expr">Catch::BinaryExpr</link>&lt; LhsT, RhsT &gt;::operator== (T ) const -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt;LhsT, RhsT const&amp;&gt; const <computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_binary_expr_1acff324c7d285cbee7efa9fbe83955638"/><section>
    <title>operator&gt;()</title>
<indexterm><primary>operator&gt;</primary><secondary>Catch::BinaryExpr&lt; LhsT, RhsT &gt;</secondary></indexterm>
<indexterm><primary>Catch::BinaryExpr&lt; LhsT, RhsT &gt;</primary><secondary>operator&gt;</secondary></indexterm>
<computeroutput>template&lt;typename LhsT , typename RhsT &gt; </computeroutput><computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>auto <link linkend="_class_catch_1_1_binary_expr">Catch::BinaryExpr</link>&lt; LhsT, RhsT &gt;::operator&gt; (T ) const -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt;LhsT, RhsT const&amp;&gt; const <computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_binary_expr_1a67901ddb9afd83961fb4e65ea3d75050"/><section>
    <title>operator&gt;=()</title>
<indexterm><primary>operator&gt;=</primary><secondary>Catch::BinaryExpr&lt; LhsT, RhsT &gt;</secondary></indexterm>
<indexterm><primary>Catch::BinaryExpr&lt; LhsT, RhsT &gt;</primary><secondary>operator&gt;=</secondary></indexterm>
<computeroutput>template&lt;typename LhsT , typename RhsT &gt; </computeroutput><computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>auto <link linkend="_class_catch_1_1_binary_expr">Catch::BinaryExpr</link>&lt; LhsT, RhsT &gt;::operator&gt;= (T ) const -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt;LhsT, RhsT const&amp;&gt; const <computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_binary_expr_1a331e53968b1a2f92827c35721cc7eded"/><section>
    <title>operator||()</title>
<indexterm><primary>operator||</primary><secondary>Catch::BinaryExpr&lt; LhsT, RhsT &gt;</secondary></indexterm>
<indexterm><primary>Catch::BinaryExpr&lt; LhsT, RhsT &gt;</primary><secondary>operator||</secondary></indexterm>
<computeroutput>template&lt;typename LhsT , typename RhsT &gt; </computeroutput><computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>auto <link linkend="_class_catch_1_1_binary_expr">Catch::BinaryExpr</link>&lt; LhsT, RhsT &gt;::operator|| (T ) const -&gt; <link linkend="_class_catch_1_1_binary_expr">BinaryExpr</link>&lt;LhsT, RhsT const&amp;&gt; const <computeroutput>[inline]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following file:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/vendor/<link linkend="_catch_8hpp">catch.hpp</link></section>
</section>
