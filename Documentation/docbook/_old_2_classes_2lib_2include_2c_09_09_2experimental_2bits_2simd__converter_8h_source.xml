<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2experimental_2bits_2simd__converter_8h_source" xml:lang="en-US">
<title>simd_converter.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/experimental/bits/simd_converter.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Generic&#32;simd&#32;conversions&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2020-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_EXPERIMENTAL_SIMD_CONVERTER_H_</emphasis>
26 <emphasis role="preprocessor">#define&#32;_GLIBCXX_EXPERIMENTAL_SIMD_CONVERTER_H_</emphasis>
27 
28 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
29 
30 _GLIBCXX_SIMD_BEGIN_NAMESPACE
31 <emphasis role="comment">//&#32;_SimdConverter&#32;scalar&#32;-&gt;&#32;scalar&#32;{{{</emphasis>
32 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_From,&#32;<emphasis role="keyword">typename</emphasis>&#32;_To&gt;
33 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SimdConverter&lt;_From,&#32;simd_abi::scalar,&#32;_To,&#32;simd_abi::scalar,
34 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;!is_same_v&lt;_From,&#32;_To&gt;&gt;&gt;
35 &#32;&#32;{
36 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_To&#32;operator()(_From&#32;__a)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
37 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_To<emphasis role="keyword">&gt;</emphasis>(__a);&#32;}
38 &#32;&#32;};
39 
40 <emphasis role="comment">//&#32;}}}</emphasis>
41 <emphasis role="comment">//&#32;_SimdConverter&#32;scalar&#32;-&gt;&#32;&quot;native&quot;&#32;{{{</emphasis>
42 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_From,&#32;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
43 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SimdConverter&lt;_From,&#32;simd_abi::scalar,&#32;_To,&#32;_Abi,
44 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;!is_same_v&lt;_Abi,&#32;simd_abi::scalar&gt;&gt;&gt;
45 &#32;&#32;{
46 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Ret&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi::template&#32;__traits&lt;_To&gt;::_SimdMember;
47 
48 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;_More&gt;
49 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Ret
50 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_From&#32;__a,&#32;_More...&#32;__more)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
51 &#32;&#32;&#32;&#32;&#32;&#32;{
52 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>...(_More)&#32;+&#32;1&#32;==&#32;_Abi::template&#32;_S_size&lt;_To&gt;);
53 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(conjunction_v&lt;is_same&lt;_From,&#32;_More&gt;...&gt;);
54 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__make_vector&lt;_To&gt;(__a,&#32;__more...);
55 &#32;&#32;&#32;&#32;&#32;&#32;}
56 &#32;&#32;};
57 
58 <emphasis role="comment">//&#32;}}}</emphasis>
59 <emphasis role="comment">//&#32;_SimdConverter&#32;&quot;native&#32;1&quot;&#32;-&gt;&#32;&quot;native&#32;2&quot;&#32;{{{</emphasis>
60 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_From,&#32;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keyword">typename</emphasis>&#32;_AFrom,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ATo&gt;
61 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SimdConverter&lt;
62 &#32;&#32;&#32;&#32;_From,&#32;_AFrom,&#32;_To,&#32;_ATo,
63 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;!disjunction_v&lt;
64 &#32;&#32;&#32;&#32;&#32;&#32;__is_fixed_size_abi&lt;_AFrom&gt;,&#32;__is_fixed_size_abi&lt;_ATo&gt;,
65 &#32;&#32;&#32;&#32;&#32;&#32;is_same&lt;_AFrom,&#32;simd_abi::scalar&gt;,&#32;is_same&lt;_ATo,&#32;simd_abi::scalar&gt;,
66 &#32;&#32;&#32;&#32;&#32;&#32;conjunction&lt;is_same&lt;_From,&#32;_To&gt;,&#32;is_same&lt;_AFrom,&#32;_ATo&gt;&gt;&gt;&gt;&gt;
67 &#32;&#32;{
68 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Arg&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_AFrom::template&#32;__traits&lt;_From&gt;::_SimdMember;
69 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Ret&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_ATo::template&#32;__traits&lt;_To&gt;::_SimdMember;
70 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_V&#32;=&#32;__vector_type_t&lt;_To,&#32;simd_size_v&lt;_To,&#32;_ATo&gt;&gt;;
71 
72 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;_More&gt;
73 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Ret
74 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Arg&#32;__a,&#32;_More...&#32;__more)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
75 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_convert&lt;_V&gt;(__a,&#32;__more...);&#32;}
76 &#32;&#32;};
77 
78 <emphasis role="comment">//&#32;}}}</emphasis>
79 <emphasis role="comment">//&#32;_SimdConverter&#32;scalar&#32;-&gt;&#32;fixed_size&lt;1&gt;&#32;{{{1</emphasis>
80 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_From,&#32;<emphasis role="keyword">typename</emphasis>&#32;_To&gt;
81 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SimdConverter&lt;_From,&#32;simd_abi::scalar,&#32;_To,&#32;simd_abi::fixed_size&lt;1&gt;,
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
83 &#32;&#32;{
84 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdTuple&lt;_To,&#32;simd_abi::scalar&gt;
85 &#32;&#32;&#32;&#32;operator()(_From&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
86 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<emphasis role="keyword">static_cast&lt;</emphasis>_To<emphasis role="keyword">&gt;</emphasis>(__x)};&#32;}
87 &#32;&#32;};
88 
89 <emphasis role="comment">//&#32;_SimdConverter&#32;fixed_size&lt;1&gt;&#32;-&gt;&#32;scalar&#32;{{{1</emphasis>
90 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_From,&#32;<emphasis role="keyword">typename</emphasis>&#32;_To&gt;
91 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SimdConverter&lt;_From,&#32;simd_abi::fixed_size&lt;1&gt;,&#32;_To,&#32;simd_abi::scalar,
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
93 &#32;&#32;{
94 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_To
95 &#32;&#32;&#32;&#32;operator()(_SimdTuple&lt;_From,&#32;simd_abi::scalar&gt;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
96 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<emphasis role="keyword">static_cast&lt;</emphasis>_To<emphasis role="keyword">&gt;</emphasis>(__x.first)};&#32;}
97 &#32;&#32;};
98 
99 <emphasis role="comment">//&#32;_SimdConverter&#32;fixed_size&lt;_Np&gt;&#32;-&gt;&#32;fixed_size&lt;_Np&gt;&#32;{{{1</emphasis>
100 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_From,&#32;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_Np&gt;
101 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SimdConverter&lt;_From,&#32;simd_abi::fixed_size&lt;_Np&gt;,&#32;_To,
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;simd_abi::fixed_size&lt;_Np&gt;,
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;!is_same_v&lt;_From,&#32;_To&gt;&gt;&gt;
104 &#32;&#32;{
105 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Ret&#32;=&#32;__fixed_size_storage_t&lt;_To,&#32;_Np&gt;;
106 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Arg&#32;=&#32;__fixed_size_storage_t&lt;_From,&#32;_Np&gt;;
107 
108 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Ret
109 &#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Arg&amp;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
110 &#32;&#32;&#32;&#32;{
111 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_From,&#32;_To&gt;)
112 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x;
113 
114 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;special&#32;case&#32;(optimize)&#32;int&#32;signedness&#32;casts</emphasis>
115 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_From)&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(_To)
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_integral_v&lt;_From&gt;&#32;&amp;&amp;&#32;is_integral_v&lt;_To&gt;)
117 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__bit_cast&lt;_Ret&gt;(__x);
118 
119 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;special&#32;case&#32;if&#32;all&#32;ABI&#32;tags&#32;in&#32;_Ret&#32;are&#32;scalar</emphasis>
120 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_scalar_abi&lt;typename&#32;_Ret::_FirstAbi&gt;())
121 &#32;&#32;&#32;&#32;{
122 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__call_with_subscripts(
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x,&#32;make_index_sequence&lt;_Np&gt;(),
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">auto</emphasis>...&#32;__values)&#32;constexpr-&gt;_Ret&#32;{
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;__make_simd_tuple&lt;_To,&#32;decltype((void)&#32;__values,
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;simd_abi::scalar())...&gt;(
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_cast&lt;_To&gt;(__values)...);
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
129 &#32;&#32;&#32;&#32;}
130 
131 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;from&#32;one&#32;vector&#32;to&#32;one&#32;vector</emphasis>
132 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Arg::_S_first_size&#32;==&#32;_Ret::_S_first_size)
133 &#32;&#32;&#32;&#32;{
134 &#32;&#32;&#32;&#32;&#32;&#32;_SimdConverter&lt;_From,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Arg::_FirstAbi,&#32;_To,
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ret::_FirstAbi&gt;
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__native_cvt;
137 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Arg::_S_tuple_size&#32;==&#32;1)
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__native_cvt(__x.first)};
139 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_NRemain&#32;=&#32;_Np&#32;-&#32;_Arg::_S_first_size;
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdConverter&lt;_From,&#32;simd_abi::fixed_size&lt;_NRemain&gt;,&#32;_To,
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;simd_abi::fixed_size&lt;_NRemain&gt;&gt;
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__remainder_cvt;
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__native_cvt(__x.first),&#32;__remainder_cvt(__x.second)};
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
147 &#32;&#32;&#32;&#32;}
148 
149 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;from&#32;one&#32;vector&#32;to&#32;multiple&#32;vectors</emphasis>
150 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Arg::_S_first_size&#32;&gt;&#32;_Ret::_S_first_size)
151 &#32;&#32;&#32;&#32;{
152 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__multiple_return_chunks
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__convert_all&lt;__vector_type_t&lt;_To,&#32;_Ret::_S_first_size&gt;&gt;(
154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x.first);
155 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__converted&#32;=&#32;__multiple_return_chunks.size()
156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;_Ret::_FirstAbi::template&#32;_S_size&lt;_To&gt;;
157 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__remaining&#32;=&#32;_Np&#32;-&#32;__converted;
158 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Arg::_S_tuple_size&#32;==&#32;1&#32;&amp;&amp;&#32;__remaining&#32;==&#32;0)
159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__to_simd_tuple&lt;_To,&#32;_Np&gt;(__multiple_return_chunks);
160 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Arg::_S_tuple_size&#32;==&#32;1)
161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;e.g.&#32;&lt;int,&#32;3&gt;&#32;-&gt;&#32;&lt;double,&#32;2,&#32;1&gt;&#32;or&#32;&lt;short,&#32;7&gt;&#32;-&gt;&#32;&lt;double,&#32;4,&#32;2,</emphasis>
162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;1&gt;</emphasis>
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_RetRem
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__remove_cvref_t&lt;decltype(__simd_tuple_pop_front&lt;__converted&gt;(
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Ret()))&gt;;
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__return_chunks2
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__convert_all&lt;__vector_type_t&lt;_To,&#32;_RetRem::_S_first_size&gt;,&#32;0,
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__converted&gt;(__x.first);
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__converted2
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__converted
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;__return_chunks2.size()&#32;*&#32;_RetRem::_S_first_size;
172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__converted2&#32;==&#32;_Np)
173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__to_simd_tuple&lt;_To,&#32;_Np&gt;(__multiple_return_chunks,
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__return_chunks2);
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_RetRem2&#32;=&#32;__remove_cvref_t&lt;
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(__simd_tuple_pop_front&lt;__return_chunks2.size()
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;_RetRem::_S_first_size&gt;(
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RetRem()))&gt;;
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__return_chunks3&#32;=&#32;__convert_all&lt;
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_type_t&lt;_To,&#32;_RetRem2::_S_first_size&gt;,&#32;0,
183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__converted2&gt;(__x.first);
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__converted3
185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__converted2
186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;__return_chunks3.size()&#32;*&#32;_RetRem2::_S_first_size;
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__converted3&#32;==&#32;_Np)
188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__to_simd_tuple&lt;_To,&#32;_Np&gt;(__multiple_return_chunks,
189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__return_chunks2,
190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__return_chunks3);
191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_RetRem3
194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__remove_cvref_t&lt;<emphasis role="keyword">decltype</emphasis>(__simd_tuple_pop_front&lt;
195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__return_chunks3.size()
196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;_RetRem2::_S_first_size&gt;(
197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RetRem2()))&gt;;
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__return_chunks4&#32;=&#32;__convert_all&lt;
199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_type_t&lt;_To,&#32;_RetRem3::_S_first_size&gt;,&#32;0,
200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__converted3&gt;(__x.first);
201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__converted4
202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__converted3
203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;__return_chunks4.size()&#32;*&#32;_RetRem3::_S_first_size;
204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__converted4&#32;==&#32;_Np)
205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__to_simd_tuple&lt;_To,&#32;_Np&gt;(
206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__multiple_return_chunks,&#32;__return_chunks2,
207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__return_chunks3,&#32;__return_chunks4);
208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_To&gt;();
210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
213 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_NRemain&#32;=&#32;_Np&#32;-&#32;_Arg::_S_first_size;
216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdConverter&lt;_From,&#32;simd_abi::fixed_size&lt;_NRemain&gt;,&#32;_To,
217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;simd_abi::fixed_size&lt;_NRemain&gt;&gt;
218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__remainder_cvt;
219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__simd_tuple_concat(
220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_simd_tuple&lt;_To,&#32;_Arg::_S_first_size&gt;(
221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__multiple_return_chunks),
222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__remainder_cvt(__x.second));
223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
224 &#32;&#32;&#32;&#32;}
225 
226 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;from&#32;multiple&#32;vectors&#32;to&#32;one&#32;vector</emphasis>
227 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_Arg::_S_first_size&#32;&lt;&#32;_Ret::_S_first_size</emphasis>
228 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;a)&#32;heterogeneous&#32;input&#32;at&#32;the&#32;end&#32;of&#32;the&#32;tuple&#32;(possible&#32;with&#32;partial</emphasis>
229 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;native&#32;registers&#32;in&#32;_Ret)</emphasis>
230 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Ret::_S_tuple_size&#32;==&#32;1
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;_Np&#32;%&#32;_Arg::_S_first_size&#32;!=&#32;0)
232 &#32;&#32;&#32;&#32;{
233 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_Ret::_FirstAbi::template&#32;_S_is_partial&lt;_To&gt;);
234 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Ret{__generate_from_n_evaluations&lt;
235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>&#32;_VectorTraits&lt;typename&#32;_Ret::_FirstType&gt;::type&gt;(
236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_To<emphasis role="keyword">&gt;</emphasis>(__x[__i]);&#32;})};
237 &#32;&#32;&#32;&#32;}
238 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
239 &#32;&#32;&#32;&#32;{
240 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_Arg::_S_tuple_size&#32;&gt;&#32;1);
241 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__n
242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__div_roundup(_Ret::_S_first_size,&#32;_Arg::_S_first_size);
243 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__call_with_n_evaluations&lt;__n&gt;(
244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;__x](<emphasis role="keyword">auto</emphasis>...&#32;__uncvted)&#32;{
245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;assuming&#32;_Arg&#32;Abi&#32;tags&#32;for&#32;all&#32;__i&#32;are&#32;_Arg::_FirstAbi</emphasis>
246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdConverter&lt;_From,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Arg::_FirstAbi,&#32;_To,
247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ret::_FirstAbi&gt;
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__native_cvt;
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Ret::_S_tuple_size&#32;==&#32;1)
250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Ret{__native_cvt(__uncvted...)};
251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Ret{
253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__native_cvt(__uncvted...),
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdConverter&lt;
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_From,&#32;simd_abi::fixed_size&lt;_Np&#32;-&#32;_Ret::_S_first_size&gt;,&#32;_To,
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;simd_abi::fixed_size&lt;_Np&#32;-&#32;_Ret::_S_first_size&gt;&gt;()(
257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__simd_tuple_pop_front&lt;_Ret::_S_first_size&gt;(__x))};
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;__x](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__get_tuple_at&lt;__i&gt;(__x);&#32;});
260 &#32;&#32;&#32;&#32;}
261 &#32;&#32;&#32;&#32;}
262 &#32;&#32;};
263 
264 <emphasis role="comment">//&#32;_SimdConverter&#32;&quot;native&quot;&#32;-&gt;&#32;fixed_size&lt;_Np&gt;&#32;{{{1</emphasis>
265 <emphasis role="comment">//&#32;i.e.&#32;1&#32;register&#32;to&#32;?&#32;registers</emphasis>
266 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_From,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap,&#32;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_Np&gt;
267 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SimdConverter&lt;_From,&#32;_Ap,&#32;_To,&#32;simd_abi::fixed_size&lt;_Np&gt;,
268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;!__is_fixed_size_abi_v&lt;_Ap&gt;&gt;&gt;
269 &#32;&#32;{
270 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(
271 &#32;&#32;&#32;&#32;&#32;&#32;_Np&#32;==&#32;simd_size_v&lt;_From,&#32;_Ap&gt;,
272 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;_SimdConverter&#32;to&#32;fixed_size&#32;only&#32;works&#32;for&#32;equal&#32;element&#32;counts&quot;</emphasis>);
273 
274 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Ret&#32;=&#32;__fixed_size_storage_t&lt;_To,&#32;_Np&gt;;
275 
276 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Ret
277 &#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">typename</emphasis>&#32;_SimdTraits&lt;_From,&#32;_Ap&gt;::_SimdMember&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
278 &#32;&#32;&#32;&#32;{
279 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Ret::_S_tuple_size&#32;==&#32;1)
280 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__vector_convert&lt;typename&#32;_Ret::_FirstType::_BuiltinType&gt;(__x)};
281 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
282 &#32;&#32;&#32;&#32;{
283 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_FixedNp&#32;=&#32;simd_abi::fixed_size&lt;_Np&gt;;
284 &#32;&#32;&#32;&#32;&#32;&#32;_SimdConverter&lt;_From,&#32;_FixedNp,&#32;_To,&#32;_FixedNp&gt;&#32;__fixed_cvt;
285 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_FromFixedStorage&#32;=&#32;__fixed_size_storage_t&lt;_From,&#32;_Np&gt;;
286 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromFixedStorage::_S_tuple_size&#32;==&#32;1)
287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__fixed_cvt(_FromFixedStorage{__x});
288 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromFixedStorage::_S_tuple_size&#32;==&#32;2)
289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_FromFixedStorage&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>)&#32;&lt;=&#32;<emphasis role="keyword">sizeof</emphasis>(__x));
292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(&amp;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>.first,&#32;&amp;__x,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>.first));
293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(&amp;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>.second.first,
294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(&amp;__x)
295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>.first),
296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>.second.first));
297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__fixed_cvt(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
299 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_From&gt;();
301 &#32;&#32;&#32;&#32;}
302 &#32;&#32;&#32;&#32;}
303 &#32;&#32;};
304 
305 <emphasis role="comment">//&#32;_SimdConverter&#32;fixed_size&lt;_Np&gt;&#32;-&gt;&#32;&quot;native&quot;&#32;{{{1</emphasis>
306 <emphasis role="comment">//&#32;i.e.&#32;?&#32;register&#32;to&#32;1&#32;registers</emphasis>
307 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_From,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap&gt;
308 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SimdConverter&lt;_From,&#32;simd_abi::fixed_size&lt;_Np&gt;,&#32;_To,&#32;_Ap,
309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;!__is_fixed_size_abi_v&lt;_Ap&gt;&gt;&gt;
310 &#32;&#32;{
311 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(
312 &#32;&#32;&#32;&#32;&#32;&#32;_Np&#32;==&#32;simd_size_v&lt;_To,&#32;_Ap&gt;,
313 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;_SimdConverter&#32;to&#32;fixed_size&#32;only&#32;works&#32;for&#32;equal&#32;element&#32;counts&quot;</emphasis>);
314 
315 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Arg&#32;=&#32;__fixed_size_storage_t&lt;_From,&#32;_Np&gt;;
316 
317 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>
318 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_SimdTraits&lt;_To,&#32;_Ap&gt;::_SimdMember
319 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Arg&amp;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
320 &#32;&#32;&#32;&#32;{
321 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Arg::_S_tuple_size&#32;==&#32;1)
322 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_convert&lt;__vector_type_t&lt;_To,&#32;_Np&gt;&gt;(__x.first);
323 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Arg::_S_is_homogeneous)
324 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__call_with_n_evaluations&lt;_Arg::_S_tuple_size&gt;(
325 &#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">auto</emphasis>...&#32;__members)&#32;{
326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;((is_convertible_v&lt;<emphasis role="keyword">decltype</emphasis>(__members),&#32;_To&gt;&#32;&amp;&amp;&#32;...))
327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_type_t&lt;_To,&#32;_Np&gt;{<emphasis role="keyword">static_cast&lt;</emphasis>_To<emphasis role="keyword">&gt;</emphasis>(__members)...};
328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_convert&lt;__vector_type_t&lt;_To,&#32;_Np&gt;&gt;(__members...);
330 &#32;&#32;&#32;&#32;&#32;&#32;},
331 &#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__get_tuple_at&lt;__i&gt;(__x);&#32;});
332 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__fixed_size_storage_t&lt;_To,&#32;_Np&gt;::_S_tuple_size&#32;==&#32;1)
333 &#32;&#32;&#32;&#32;{
334 &#32;&#32;&#32;&#32;&#32;&#32;_SimdConverter&lt;_From,&#32;simd_abi::fixed_size&lt;_Np&gt;,&#32;_To,
335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;simd_abi::fixed_size&lt;_Np&gt;&gt;
336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__fixed_cvt;
337 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__fixed_cvt(__x).first;
338 &#32;&#32;&#32;&#32;}
339 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
340 &#32;&#32;&#32;&#32;{
341 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;_From,&#32;_Np&gt;&#32;__xv
342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__generate_from_n_evaluations&lt;_Np,&#32;__vector_type_t&lt;_From,&#32;_Np&gt;&gt;(
343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x[__i];&#32;});
344 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_convert&lt;__vector_type_t&lt;_To,&#32;_Np&gt;&gt;(__xv);
345 &#32;&#32;&#32;&#32;}
346 &#32;&#32;&#32;&#32;}
347 &#32;&#32;};
348 
349 <emphasis role="comment">//&#32;}}}1</emphasis>
350 _GLIBCXX_SIMD_END_NAMESPACE
351 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
352 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_EXPERIMENTAL_SIMD_CONVERTER_H_</emphasis>
353 
354 <emphasis role="comment">//&#32;vim:&#32;foldmethod=marker&#32;sw=2&#32;noet&#32;ts=8&#32;sts=2&#32;tw=80</emphasis>
</programlisting></section>
