<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2bits_2valarray__before_8h_source" xml:lang="en-US">
<title>valarray_before.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/bits/valarray_before.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;The&#32;template&#32;and&#32;inlines&#32;for&#32;the&#32;-*-&#32;C++&#32;-*-&#32;internal&#32;_Meta&#32;class.</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;1997-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="comment">//&#32;Written&#32;by&#32;Gabriel&#32;Dos&#32;Reis&#32;&lt;Gabriel.Dos-Reis@cmla.ens-cachan.fr&gt;</emphasis>
31 
32 <emphasis role="preprocessor">#ifndef&#32;_VALARRAY_BEFORE_H</emphasis>
33 <emphasis role="preprocessor">#define&#32;_VALARRAY_BEFORE_H&#32;1</emphasis>
34 
35 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
36 
37 <emphasis role="preprocessor">#include&#32;&lt;bits/slice_array.h&gt;</emphasis>
38 
39 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
40 {
41 _GLIBCXX_BEGIN_NAMESPACE_VERSION
42 
43 &#32;&#32;<emphasis role="comment">//</emphasis>
44 &#32;&#32;<emphasis role="comment">//&#32;Implementing&#32;a&#32;loosened&#32;valarray&#32;return&#32;value&#32;is&#32;tricky.</emphasis>
45 &#32;&#32;<emphasis role="comment">//&#32;First&#32;we&#32;need&#32;to&#32;meet&#32;26.3.1/3:&#32;we&#32;should&#32;not&#32;add&#32;more&#32;than</emphasis>
46 &#32;&#32;<emphasis role="comment">//&#32;two&#32;levels&#32;of&#32;template&#32;nesting.&#32;Therefore&#32;we&#32;resort&#32;to&#32;template</emphasis>
47 &#32;&#32;<emphasis role="comment">//&#32;template&#32;to&#32;&quot;flatten&quot;&#32;loosened&#32;return&#32;value&#32;types.</emphasis>
48 &#32;&#32;<emphasis role="comment">//&#32;At&#32;some&#32;point&#32;we&#32;use&#32;partial&#32;specialization&#32;to&#32;remove&#32;one&#32;level</emphasis>
49 &#32;&#32;<emphasis role="comment">//&#32;template&#32;nesting&#32;due&#32;to&#32;_Expr&lt;&gt;</emphasis>
50 &#32;&#32;<emphasis role="comment">//</emphasis>
51 
52 &#32;&#32;<emphasis role="comment">//&#32;This&#32;class&#32;is&#32;NOT&#32;defined.&#32;It&#32;doesn&apos;t&#32;need&#32;to.</emphasis>
53 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp2&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>_Constant;
54 
55 &#32;&#32;<emphasis role="comment">//&#32;Implementations&#32;of&#32;unary&#32;functions&#32;applied&#32;to&#32;valarray&lt;&gt;s.</emphasis>
56 &#32;&#32;<emphasis role="comment">//&#32;I&#32;use&#32;hard-coded&#32;object&#32;functions&#32;here&#32;instead&#32;of&#32;a&#32;generic</emphasis>
57 &#32;&#32;<emphasis role="comment">//&#32;approach&#32;like&#32;pointers&#32;to&#32;function:</emphasis>
58 &#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;1)&#32;correctness:&#32;some&#32;functions&#32;take&#32;references,&#32;others&#32;values.</emphasis>
59 &#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;we&#32;can&apos;t&#32;deduce&#32;the&#32;correct&#32;type&#32;afterwards.</emphasis>
60 &#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;2)&#32;efficiency&#32;--&#32;object&#32;functions&#32;can&#32;be&#32;easily&#32;inlined</emphasis>
61 &#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;3)&#32;be&#32;Koenig-lookup-friendly</emphasis>
62 
63 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Abs
64 &#32;&#32;{
65 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
66 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__t)<emphasis role="keyword">&#32;const</emphasis>
67 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;abs(__t);&#32;}
68 &#32;&#32;};
69 
70 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Cos
71 &#32;&#32;{
72 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
73 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__t)<emphasis role="keyword">&#32;const</emphasis>
74 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1ad5430427f9814a92459a8880f4a11bd6">cos</link>(__t);&#32;}
75 &#32;&#32;};
76 
77 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Acos
78 &#32;&#32;{
79 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
80 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__t)<emphasis role="keyword">&#32;const</emphasis>
81 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a6826a8b8db695e1c1cddea666254e56f">acos</link>(__t);&#32;}
82 &#32;&#32;};
83 
84 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Cosh
85 &#32;&#32;{
86 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
87 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__t)<emphasis role="keyword">&#32;const</emphasis>
88 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1ac2ac5e2dccf59bf3393c5e24b168f3c6">cosh</link>(__t);&#32;}
89 &#32;&#32;};
90 
91 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Sin
92 &#32;&#32;{
93 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
94 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__t)<emphasis role="keyword">&#32;const</emphasis>
95 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a428aa2da5120f109315e38b59ac2fbe7">sin</link>(__t);&#32;}
96 &#32;&#32;};
97 
98 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Asin
99 &#32;&#32;{
100 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
101 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__t)<emphasis role="keyword">&#32;const</emphasis>
102 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1aa2375efebaed504113d91f1822bafa38">asin</link>(__t);&#32;}
103 &#32;&#32;};
104 
105 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Sinh
106 &#32;&#32;{
107 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
108 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__t)<emphasis role="keyword">&#32;const</emphasis>
109 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a2579de64a076b1183bbf48cbed658d12">sinh</link>(__t);&#32;}
110 &#32;&#32;};
111 
112 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Tan
113 &#32;&#32;{
114 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
115 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__t)<emphasis role="keyword">&#32;const</emphasis>
116 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a58fbdc949853bd2d1f0a8dbf9f89fe32">tan</link>(__t);&#32;}
117 &#32;&#32;};
118 
119 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Atan
120 &#32;&#32;{
121 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
122 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__t)<emphasis role="keyword">&#32;const</emphasis>
123 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1af59f8735da7eee127c6807d114e82a3a">atan</link>(__t);&#32;}
124 &#32;&#32;};
125 
126 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Tanh
127 &#32;&#32;{
128 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
129 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__t)<emphasis role="keyword">&#32;const</emphasis>
130 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a4a926ffaf78a83aca2ae45be46fa7571">tanh</link>(__t);&#32;}
131 &#32;&#32;};
132 
133 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Exp
134 &#32;&#32;{
135 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
136 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__t)<emphasis role="keyword">&#32;const</emphasis>
137 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a15078bfb380de3cfbb83117d459a475b">exp</link>(__t);&#32;}
138 &#32;&#32;};
139 
140 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Log
141 &#32;&#32;{
142 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
143 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__t)<emphasis role="keyword">&#32;const</emphasis>
144 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a25a8d722e743f3a219e5f0bf0bb867c7">log</link>(__t);&#32;}
145 &#32;&#32;};
146 
147 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Log10
148 &#32;&#32;{
149 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
150 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__t)<emphasis role="keyword">&#32;const</emphasis>
151 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1af26c25cec2b892904654e4068b199882">log10</link>(__t);&#32;}
152 &#32;&#32;};
153 
154 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Sqrt
155 &#32;&#32;{
156 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
157 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__t)<emphasis role="keyword">&#32;const</emphasis>
158 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a86ab780bf1de516c739da6893b2e303a">sqrt</link>(__t);&#32;}
159 &#32;&#32;};
160 
161 &#32;&#32;<emphasis role="comment">//&#32;In&#32;the&#32;past,&#32;we&#32;used&#32;to&#32;tailor&#32;operator&#32;applications&#32;semantics</emphasis>
162 &#32;&#32;<emphasis role="comment">//&#32;to&#32;the&#32;specialization&#32;of&#32;standard&#32;function&#32;objects&#32;(i.e.&#32;plus&lt;&gt;,&#32;etc.)</emphasis>
163 &#32;&#32;<emphasis role="comment">//&#32;That&#32;is&#32;incorrect.&#32;&#32;Therefore&#32;we&#32;provide&#32;our&#32;own&#32;surrogates.</emphasis>
164 
165 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__unary_plus
166 &#32;&#32;{
167 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
168 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__t)<emphasis role="keyword">&#32;const</emphasis>
169 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;+__t;&#32;}
170 &#32;&#32;};
171 
172 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__negate
173 &#32;&#32;{
174 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
175 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__t)<emphasis role="keyword">&#32;const</emphasis>
176 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;-__t;&#32;}
177 &#32;&#32;};
178 
179 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__bitwise_not
180 &#32;&#32;{
181 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
182 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__t)<emphasis role="keyword">&#32;const</emphasis>
183 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;~__t;&#32;}
184 &#32;&#32;};
185 
186 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__plus
187 &#32;&#32;{
188 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
189 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
190 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;+&#32;__y;&#32;}
191 &#32;&#32;};
192 
193 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__minus
194 &#32;&#32;{
195 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
196 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
197 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;-&#32;__y;&#32;}
198 &#32;&#32;};
199 
200 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__multiplies
201 &#32;&#32;{
202 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
203 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
204 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;*&#32;__y;&#32;}
205 &#32;&#32;};
206 
207 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__divides
208 &#32;&#32;{
209 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
210 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
211 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;/&#32;__y;&#32;}
212 &#32;&#32;};
213 
214 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__modulus
215 &#32;&#32;{
216 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
217 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
218 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;%&#32;__y;&#32;}
219 &#32;&#32;};
220 
221 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__bitwise_xor
222 &#32;&#32;{
223 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
224 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
225 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;^&#32;__y;&#32;}
226 &#32;&#32;};
227 
228 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__bitwise_and
229 &#32;&#32;{
230 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
231 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
232 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;&amp;&#32;__y;&#32;}
233 &#32;&#32;};
234 
235 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__bitwise_or
236 &#32;&#32;{
237 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
238 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
239 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;|&#32;__y;&#32;}
240 &#32;&#32;};
241 
242 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__shift_left
243 &#32;&#32;{
244 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
245 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
246 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;&lt;&lt;&#32;__y;&#32;}
247 &#32;&#32;};
248 
249 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__shift_right
250 &#32;&#32;{
251 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
252 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
253 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;&gt;&gt;&#32;__y;&#32;}
254 &#32;&#32;};
255 
256 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__logical_and
257 &#32;&#32;{
258 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
259 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
260 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;&amp;&amp;&#32;__y;&#32;}
261 &#32;&#32;};
262 
263 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__logical_or
264 &#32;&#32;{
265 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
266 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
267 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;||&#32;__y;&#32;}
268 &#32;&#32;};
269 
270 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__logical_not
271 &#32;&#32;{
272 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
273 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
274 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!__x;&#32;}
275 &#32;&#32;};
276 
277 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__equal_to
278 &#32;&#32;{
279 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
280 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
281 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;==&#32;__y;&#32;}
282 &#32;&#32;};
283 
284 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__not_equal_to
285 &#32;&#32;{
286 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
287 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
288 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;!=&#32;__y;&#32;}
289 &#32;&#32;};
290 
291 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__less
292 &#32;&#32;{
293 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
294 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
295 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;&lt;&#32;__y;&#32;}
296 &#32;&#32;};
297 
298 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__greater
299 &#32;&#32;{
300 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
301 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
302 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;&gt;&#32;__y;&#32;}
303 &#32;&#32;};
304 
305 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__less_equal
306 &#32;&#32;{
307 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
308 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
309 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;&lt;=&#32;__y;&#32;}
310 &#32;&#32;};
311 
312 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__greater_equal
313 &#32;&#32;{
314 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
315 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
316 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;&gt;=&#32;__y;&#32;}
317 &#32;&#32;};
318 
319 &#32;&#32;<emphasis role="comment">//&#32;The&#32;few&#32;binary&#32;functions&#32;we&#32;miss.</emphasis>
320 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Atan2
321 &#32;&#32;{
322 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
323 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
324 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a525d483aa59186e25ad8a1b5b8428536">atan2</link>(__x,&#32;__y);&#32;}
325 &#32;&#32;};
326 
327 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Pow
328 &#32;&#32;{
329 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
330 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
331 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a490c36eca6590103f32eb0520a4c11f6">pow</link>(__x,&#32;__y);&#32;}
332 &#32;&#32;};
333 
334 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_IsVal<emphasis role="keywordtype">id</emphasis>ValarrayValue&#32;=&#32;!__is_abstract(_Tp)&gt;
335 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__fun_with_valarray
336 &#32;&#32;&#32;&#32;{
337 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;result_type;
338 &#32;&#32;&#32;&#32;};
339 
340 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
341 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__fun_with_valarray&lt;_Tp,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>&gt;
342 &#32;&#32;&#32;&#32;{
343 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;result&#32;type&#32;defined&#32;for&#32;invalid&#32;value&#32;types.</emphasis>
344 &#32;&#32;&#32;&#32;};
345 
346 &#32;&#32;<emphasis role="comment">//&#32;We&#32;need&#32;these&#32;bits&#32;in&#32;order&#32;to&#32;recover&#32;the&#32;return&#32;type&#32;of</emphasis>
347 &#32;&#32;<emphasis role="comment">//&#32;some&#32;functions/operators&#32;now&#32;that&#32;we&apos;re&#32;no&#32;longer&#32;using</emphasis>
348 &#32;&#32;<emphasis role="comment">//&#32;function&#32;templates.</emphasis>
349 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
350 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__fun&#32;:&#32;__fun_with_valarray&lt;_Tp&gt;
351 &#32;&#32;&#32;&#32;{
352 &#32;&#32;&#32;&#32;};
353 
354 &#32;&#32;<emphasis role="comment">//&#32;several&#32;specializations&#32;for&#32;relational&#32;operators.</emphasis>
355 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
356 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__fun&lt;__logical_not,&#32;_Tp&gt;
357 &#32;&#32;&#32;&#32;{
358 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;result_type;
359 &#32;&#32;&#32;&#32;};
360 
361 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
362 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__fun&lt;__logical_and,&#32;_Tp&gt;
363 &#32;&#32;&#32;&#32;{
364 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;result_type;
365 &#32;&#32;&#32;&#32;};
366 
367 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
368 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__fun&lt;__logical_or,&#32;_Tp&gt;
369 &#32;&#32;&#32;&#32;{
370 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;result_type;
371 &#32;&#32;&#32;&#32;};
372 
373 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
374 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__fun&lt;__less,&#32;_Tp&gt;
375 &#32;&#32;&#32;&#32;{
376 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;result_type;
377 &#32;&#32;&#32;&#32;};
378 
379 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
380 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__fun&lt;__greater,&#32;_Tp&gt;
381 &#32;&#32;&#32;&#32;{
382 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;result_type;
383 &#32;&#32;&#32;&#32;};
384 
385 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
386 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__fun&lt;__less_equal,&#32;_Tp&gt;
387 &#32;&#32;&#32;&#32;{
388 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;result_type;
389 &#32;&#32;&#32;&#32;};
390 
391 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
392 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__fun&lt;__greater_equal,&#32;_Tp&gt;
393 &#32;&#32;&#32;&#32;{
394 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;result_type;
395 &#32;&#32;&#32;&#32;};
396 
397 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
398 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__fun&lt;__equal_to,&#32;_Tp&gt;
399 &#32;&#32;&#32;&#32;{
400 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;result_type;
401 &#32;&#32;&#32;&#32;};
402 
403 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
404 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__fun&lt;__not_equal_to,&#32;_Tp&gt;
405 &#32;&#32;&#32;&#32;{
406 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;result_type;
407 &#32;&#32;&#32;&#32;};
408 
409 <emphasis role="keyword">namespace&#32;</emphasis>__detail
410 {
411 &#32;&#32;<emphasis role="comment">//&#32;Closure&#32;types&#32;already&#32;have&#32;reference&#32;semantics&#32;and&#32;are&#32;often&#32;short-lived,</emphasis>
412 &#32;&#32;<emphasis role="comment">//&#32;so&#32;store&#32;them&#32;by&#32;value&#32;to&#32;avoid&#32;(some&#32;cases&#32;of)&#32;dangling&#32;references&#32;to</emphasis>
413 &#32;&#32;<emphasis role="comment">//&#32;out-of-scope&#32;temporaries.</emphasis>
414 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
415 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_ValArrayRef
416 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&#32;__type;&#32;};
417 
418 &#32;&#32;<emphasis role="comment">//&#32;Use&#32;real&#32;references&#32;for&#32;std::valarray&#32;objects.</emphasis>
419 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
420 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_ValArrayRef&lt;&#32;valarray&lt;_Tp&gt;&#32;&gt;
421 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;&#32;__type;&#32;};
422 
423 &#32;&#32;<emphasis role="comment">//</emphasis>
424 &#32;&#32;<emphasis role="comment">//&#32;Apply&#32;function&#32;taking&#32;a&#32;value/const&#32;reference&#32;closure</emphasis>
425 &#32;&#32;<emphasis role="comment">//</emphasis>
426 
427 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Dom,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Arg&gt;
428 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_FunBase
429 &#32;&#32;&#32;&#32;{
430 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
431 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dom::value_type&#32;value_type;
432 
433 &#32;&#32;&#32;&#32;&#32;&#32;_FunBase(<emphasis role="keyword">const</emphasis>&#32;_Dom&amp;&#32;__e,&#32;value_type&#32;__f(_Arg))
434 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_expr(__e),&#32;_M_func(__f)&#32;{}
435 
436 &#32;&#32;&#32;&#32;&#32;&#32;value_type&#32;operator[](<emphasis role="keywordtype">size_t</emphasis>&#32;__i)<emphasis role="keyword">&#32;const</emphasis>
437 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_func&#32;(_M_expr[__i]);&#32;}
438 
439 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_expr.size&#32;();}
440 
441 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
442 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_ValArrayRef&lt;_Dom&gt;::__type&#32;_M_expr;
443 &#32;&#32;&#32;&#32;&#32;&#32;value_type&#32;(*_M_func)(_Arg);
444 &#32;&#32;&#32;&#32;};
445 
446 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
447 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_ValFunClos&lt;_Expr,_Dom&gt;&#32;:&#32;_FunBase&lt;_Dom,&#32;typename&#32;_Dom::value_type&gt;
448 &#32;&#32;&#32;&#32;{
449 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_FunBase&lt;_Dom,&#32;typename&#32;_Dom::value_type&gt;&#32;_Base;
450 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::value_type&#32;value_type;
451 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;value_type&#32;_Tp;
452 
453 &#32;&#32;&#32;&#32;&#32;&#32;_ValFunClos(<emphasis role="keyword">const</emphasis>&#32;_Dom&amp;&#32;__e,&#32;_Tp&#32;__f(_Tp))&#32;:&#32;_Base(__e,&#32;__f)&#32;{}
454 &#32;&#32;&#32;&#32;};
455 
456 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
457 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_ValFunClos&lt;_ValArray,_Tp&gt;&#32;:&#32;_FunBase&lt;valarray&lt;_Tp&gt;,&#32;_Tp&gt;
458 &#32;&#32;&#32;&#32;{
459 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_FunBase&lt;valarray&lt;_Tp&gt;,&#32;_Tp&gt;&#32;_Base;
460 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;value_type;
461 
462 &#32;&#32;&#32;&#32;&#32;&#32;_ValFunClos(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;&#32;__v,&#32;_Tp&#32;__f(_Tp))&#32;:&#32;_Base(__v,&#32;__f)&#32;{}
463 &#32;&#32;&#32;&#32;};
464 
465 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
466 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_RefFunClos&lt;_Expr,&#32;_Dom&gt;
467 &#32;&#32;&#32;&#32;:&#32;_FunBase&lt;_Dom,&#32;const&#32;typename&#32;_Dom::value_type&amp;&gt;
468 &#32;&#32;&#32;&#32;{
469 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_FunBase&lt;_Dom,&#32;const&#32;typename&#32;_Dom::value_type&amp;&gt;&#32;_Base;
470 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::value_type&#32;value_type;
471 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;value_type&#32;_Tp;
472 
473 &#32;&#32;&#32;&#32;&#32;&#32;_RefFunClos(<emphasis role="keyword">const</emphasis>&#32;_Dom&amp;&#32;__e,&#32;_Tp&#32;__f(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;))
474 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__e,&#32;__f)&#32;{}
475 &#32;&#32;&#32;&#32;};
476 
477 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
478 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_RefFunClos&lt;_ValArray,&#32;_Tp&gt;
479 &#32;&#32;&#32;&#32;:&#32;_FunBase&lt;valarray&lt;_Tp&gt;,&#32;const&#32;_Tp&amp;&gt;
480 &#32;&#32;&#32;&#32;{
481 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_FunBase&lt;valarray&lt;_Tp&gt;,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&gt;&#32;_Base;
482 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;value_type;
483 
484 &#32;&#32;&#32;&#32;&#32;&#32;_RefFunClos(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;&#32;__v,&#32;_Tp&#32;__f(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;))
485 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__v,&#32;__f)&#32;{}
486 &#32;&#32;&#32;&#32;};
487 
488 &#32;&#32;<emphasis role="comment">//</emphasis>
489 &#32;&#32;<emphasis role="comment">//&#32;Unary&#32;expression&#32;closure.</emphasis>
490 &#32;&#32;<emphasis role="comment">//</emphasis>
491 
492 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Oper,&#32;<emphasis role="keyword">class</emphasis>&#32;_Arg&gt;
493 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_UnBase
494 &#32;&#32;&#32;&#32;{
495 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
496 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Arg::value_type&#32;_Vt;
497 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__fun&lt;_Oper,&#32;_Vt&gt;::result_type&#32;value_type;
498 
499 &#32;&#32;&#32;&#32;&#32;&#32;_UnBase(<emphasis role="keyword">const</emphasis>&#32;_Arg&amp;&#32;__e)&#32;:&#32;_M_expr(__e)&#32;{}
500 
501 &#32;&#32;&#32;&#32;&#32;&#32;value_type&#32;operator[](<emphasis role="keywordtype">size_t</emphasis>&#32;__i)<emphasis role="keyword">&#32;const</emphasis>
502 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Oper()(_M_expr[__i]);&#32;}
503 
504 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_expr.size();&#32;}
505 &#32;&#32;&#32;&#32;&#32;&#32;
506 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
507 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_ValArrayRef&lt;_Arg&gt;::__type&#32;_M_expr;
508 &#32;&#32;&#32;&#32;};
509 
510 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Oper,&#32;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
511 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_UnClos&lt;_Oper,&#32;_Expr,&#32;_Dom&gt;
512 &#32;&#32;&#32;&#32;:&#32;_UnBase&lt;_Oper,&#32;_Dom&gt;
513 &#32;&#32;&#32;&#32;{
514 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Dom&#32;_Arg;
515 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_UnBase&lt;_Oper,&#32;_Dom&gt;&#32;_Base;
516 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::value_type&#32;value_type;
517 
518 &#32;&#32;&#32;&#32;&#32;&#32;_UnClos(<emphasis role="keyword">const</emphasis>&#32;_Arg&amp;&#32;__e)&#32;:&#32;_Base(__e)&#32;{}
519 &#32;&#32;&#32;&#32;};
520 
521 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Oper,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
522 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_UnClos&lt;_Oper,&#32;_ValArray,&#32;_Tp&gt;
523 &#32;&#32;&#32;&#32;:&#32;_UnBase&lt;_Oper,&#32;valarray&lt;_Tp&gt;&#32;&gt;
524 &#32;&#32;&#32;&#32;{
525 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;valarray&lt;_Tp&gt;&#32;_Arg;
526 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_UnBase&lt;_Oper,&#32;valarray&lt;_Tp&gt;&#32;&gt;&#32;_Base;
527 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::value_type&#32;value_type;
528 
529 &#32;&#32;&#32;&#32;&#32;&#32;_UnClos(<emphasis role="keyword">const</emphasis>&#32;_Arg&amp;&#32;__e)&#32;:&#32;_Base(__e)&#32;{}
530 &#32;&#32;&#32;&#32;};
531 
532 
533 &#32;&#32;<emphasis role="comment">//</emphasis>
534 &#32;&#32;<emphasis role="comment">//&#32;Binary&#32;expression&#32;closure.</emphasis>
535 &#32;&#32;<emphasis role="comment">//</emphasis>
536 
537 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Oper,&#32;<emphasis role="keyword">class</emphasis>&#32;_FirstArg,&#32;<emphasis role="keyword">class</emphasis>&#32;_SecondArg&gt;
538 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_BinBase
539 &#32;&#32;&#32;&#32;{
540 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
541 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_FirstArg::value_type&#32;_Vt;
542 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__fun&lt;_Oper,&#32;_Vt&gt;::result_type&#32;value_type;
543 
544 &#32;&#32;&#32;&#32;&#32;&#32;_BinBase(<emphasis role="keyword">const</emphasis>&#32;_FirstArg&amp;&#32;__e1,&#32;<emphasis role="keyword">const</emphasis>&#32;_SecondArg&amp;&#32;__e2)
545 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_expr1(__e1),&#32;_M_expr2(__e2)&#32;{}
546 
547 &#32;&#32;&#32;&#32;&#32;&#32;value_type&#32;operator[](<emphasis role="keywordtype">size_t</emphasis>&#32;__i)<emphasis role="keyword">&#32;const</emphasis>
548 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Oper()(_M_expr1[__i],&#32;_M_expr2[__i]);&#32;}
549 
550 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_expr1.size();&#32;}
551 
552 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
553 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_ValArrayRef&lt;_FirstArg&gt;::__type&#32;_M_expr1;
554 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_ValArrayRef&lt;_SecondArg&gt;::__type&#32;_M_expr2;
555 &#32;&#32;&#32;&#32;};
556 
557 
558 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Oper,&#32;<emphasis role="keyword">class</emphasis>&#32;_Clos&gt;
559 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_BinBase2
560 &#32;&#32;&#32;&#32;{
561 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
562 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Clos::value_type&#32;_Vt;
563 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__fun&lt;_Oper,&#32;_Vt&gt;::result_type&#32;value_type;
564 
565 &#32;&#32;&#32;&#32;&#32;&#32;_BinBase2(<emphasis role="keyword">const</emphasis>&#32;_Clos&amp;&#32;__e,&#32;<emphasis role="keyword">const</emphasis>&#32;_Vt&amp;&#32;__t)
566 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_expr1(__e),&#32;_M_expr2(__t)&#32;{}
567 
568 &#32;&#32;&#32;&#32;&#32;&#32;value_type&#32;operator[](<emphasis role="keywordtype">size_t</emphasis>&#32;__i)<emphasis role="keyword">&#32;const</emphasis>
569 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Oper()(_M_expr1[__i],&#32;_M_expr2);&#32;}
570 
571 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_expr1.size();&#32;}
572 
573 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
574 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_ValArrayRef&lt;_Clos&gt;::__type&#32;_M_expr1;
575 &#32;&#32;&#32;&#32;&#32;&#32;_Vt&#32;_M_expr2;
576 &#32;&#32;&#32;&#32;};
577 
578 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Oper,&#32;<emphasis role="keyword">class</emphasis>&#32;_Clos&gt;
579 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_BinBase1
580 &#32;&#32;&#32;&#32;{
581 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
582 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Clos::value_type&#32;_Vt;
583 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__fun&lt;_Oper,&#32;_Vt&gt;::result_type&#32;value_type;
584 
585 &#32;&#32;&#32;&#32;&#32;&#32;_BinBase1(<emphasis role="keyword">const</emphasis>&#32;_Vt&amp;&#32;__t,&#32;<emphasis role="keyword">const</emphasis>&#32;_Clos&amp;&#32;__e)
586 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_expr1(__t),&#32;_M_expr2(__e)&#32;{}
587 
588 &#32;&#32;&#32;&#32;&#32;&#32;value_type&#32;operator[](<emphasis role="keywordtype">size_t</emphasis>&#32;__i)<emphasis role="keyword">&#32;const</emphasis>
589 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Oper()(_M_expr1,&#32;_M_expr2[__i]);&#32;}
590 
591 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_expr2.size();&#32;}
592 
593 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
594 &#32;&#32;&#32;&#32;&#32;&#32;_Vt&#32;_M_expr1;
595 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_ValArrayRef&lt;_Clos&gt;::__type&#32;_M_expr2;
596 &#32;&#32;&#32;&#32;};
597 
598 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Oper,&#32;<emphasis role="keyword">class</emphasis>&#32;_Dom1,&#32;<emphasis role="keyword">class</emphasis>&#32;_Dom2&gt;
599 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_BinClos&lt;_Oper,&#32;_Expr,&#32;_Expr,&#32;_Dom1,&#32;_Dom2&gt;
600 &#32;&#32;&#32;&#32;:&#32;_BinBase&lt;_Oper,&#32;_Dom1,&#32;_Dom2&gt;
601 &#32;&#32;&#32;&#32;{
602 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_BinBase&lt;_Oper,&#32;_Dom1,&#32;_Dom2&gt;&#32;_Base;
603 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::value_type&#32;value_type;
604 
605 &#32;&#32;&#32;&#32;&#32;&#32;_BinClos(<emphasis role="keyword">const</emphasis>&#32;_Dom1&amp;&#32;__e1,&#32;<emphasis role="keyword">const</emphasis>&#32;_Dom2&amp;&#32;__e2)&#32;:&#32;_Base(__e1,&#32;__e2)&#32;{}
606 &#32;&#32;&#32;&#32;};
607 
608 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Oper,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
609 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_BinClos&lt;_Oper,&#32;_ValArray,&#32;_ValArray,&#32;_Tp,&#32;_Tp&gt;
610 &#32;&#32;&#32;&#32;:&#32;_BinBase&lt;_Oper,&#32;valarray&lt;_Tp&gt;,&#32;valarray&lt;_Tp&gt;&#32;&gt;
611 &#32;&#32;&#32;&#32;{
612 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_BinBase&lt;_Oper,&#32;valarray&lt;_Tp&gt;,&#32;valarray&lt;_Tp&gt;&#32;&gt;&#32;_Base;
613 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::value_type&#32;value_type;
614 
615 &#32;&#32;&#32;&#32;&#32;&#32;_BinClos(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;&#32;__v,&#32;<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;&#32;__w)
616 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__v,&#32;__w)&#32;{}
617 &#32;&#32;&#32;&#32;};
618 
619 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Oper,&#32;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
620 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_BinClos&lt;_Oper,&#32;_Expr,&#32;_ValArray,&#32;_Dom,&#32;typename&#32;_Dom::value_type&gt;
621 &#32;&#32;&#32;&#32;:&#32;_BinBase&lt;_Oper,&#32;_Dom,&#32;valarray&lt;typename&#32;_Dom::value_type&gt;&#32;&gt;
622 &#32;&#32;&#32;&#32;{
623 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dom::value_type&#32;_Tp;
624 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_BinBase&lt;_Oper,_Dom,valarray&lt;_Tp&gt;&#32;&gt;&#32;_Base;
625 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::value_type&#32;value_type;
626 
627 &#32;&#32;&#32;&#32;&#32;&#32;_BinClos(<emphasis role="keyword">const</emphasis>&#32;_Dom&amp;&#32;__e1,&#32;<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;&#32;__e2)
628 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__e1,&#32;__e2)&#32;{}
629 &#32;&#32;&#32;&#32;};
630 
631 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Oper,&#32;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
632 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_BinClos&lt;_Oper,&#32;_ValArray,&#32;_Expr,&#32;typename&#32;_Dom::value_type,&#32;_Dom&gt;
633 &#32;&#32;&#32;&#32;:&#32;_BinBase&lt;_Oper,&#32;valarray&lt;typename&#32;_Dom::value_type&gt;,_Dom&gt;
634 &#32;&#32;&#32;&#32;{
635 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dom::value_type&#32;_Tp;
636 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_BinBase&lt;_Oper,&#32;valarray&lt;_Tp&gt;,&#32;_Dom&gt;&#32;_Base;
637 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::value_type&#32;value_type;
638 
639 &#32;&#32;&#32;&#32;&#32;&#32;_BinClos(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;&#32;__e1,&#32;<emphasis role="keyword">const</emphasis>&#32;_Dom&amp;&#32;__e2)
640 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__e1,&#32;__e2)&#32;{}
641 &#32;&#32;&#32;&#32;};
642 
643 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Oper,&#32;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
644 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_BinClos&lt;_Oper,&#32;_Expr,&#32;_Constant,&#32;_Dom,&#32;typename&#32;_Dom::value_type&gt;
645 &#32;&#32;&#32;&#32;:&#32;_BinBase2&lt;_Oper,&#32;_Dom&gt;
646 &#32;&#32;&#32;&#32;{
647 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dom::value_type&#32;_Tp;
648 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_BinBase2&lt;_Oper,_Dom&gt;&#32;_Base;
649 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::value_type&#32;value_type;
650 
651 &#32;&#32;&#32;&#32;&#32;&#32;_BinClos(<emphasis role="keyword">const</emphasis>&#32;_Dom&amp;&#32;__e1,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__e2)&#32;:&#32;_Base(__e1,&#32;__e2)&#32;{}
652 &#32;&#32;&#32;&#32;};
653 
654 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Oper,&#32;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
655 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_BinClos&lt;_Oper,&#32;_Constant,&#32;_Expr,&#32;typename&#32;_Dom::value_type,&#32;_Dom&gt;
656 &#32;&#32;&#32;&#32;:&#32;_BinBase1&lt;_Oper,&#32;_Dom&gt;
657 &#32;&#32;&#32;&#32;{
658 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dom::value_type&#32;_Tp;
659 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_BinBase1&lt;_Oper,&#32;_Dom&gt;&#32;_Base;
660 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::value_type&#32;value_type;
661 
662 &#32;&#32;&#32;&#32;&#32;&#32;_BinClos(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__e1,&#32;<emphasis role="keyword">const</emphasis>&#32;_Dom&amp;&#32;__e2)&#32;:&#32;_Base(__e1,&#32;__e2)&#32;{}
663 &#32;&#32;&#32;&#32;};
664 
665 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Oper,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
666 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_BinClos&lt;_Oper,&#32;_ValArray,&#32;_Constant,&#32;_Tp,&#32;_Tp&gt;
667 &#32;&#32;&#32;&#32;:&#32;_BinBase2&lt;_Oper,&#32;valarray&lt;_Tp&gt;&#32;&gt;
668 &#32;&#32;&#32;&#32;{
669 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_BinBase2&lt;_Oper,valarray&lt;_Tp&gt;&#32;&gt;&#32;_Base;
670 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::value_type&#32;value_type;
671 
672 &#32;&#32;&#32;&#32;&#32;&#32;_BinClos(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;&#32;__v,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__t)&#32;:&#32;_Base(__v,&#32;__t)&#32;{}
673 &#32;&#32;&#32;&#32;};
674 
675 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Oper,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
676 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_BinClos&lt;_Oper,&#32;_Constant,&#32;_ValArray,&#32;_Tp,&#32;_Tp&gt;
677 &#32;&#32;&#32;&#32;:&#32;_BinBase1&lt;_Oper,&#32;valarray&lt;_Tp&gt;&#32;&gt;
678 &#32;&#32;&#32;&#32;{
679 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_BinBase1&lt;_Oper,&#32;valarray&lt;_Tp&gt;&#32;&gt;&#32;_Base;
680 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::value_type&#32;value_type;
681 
682 &#32;&#32;&#32;&#32;&#32;&#32;_BinClos(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__t,&#32;<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;&#32;__v)&#32;:&#32;_Base(__t,&#32;__v)&#32;{}
683 &#32;&#32;&#32;&#32;};
684 
685 &#32;&#32;<emphasis role="comment">//</emphasis>
686 &#32;&#32;<emphasis role="comment">//&#32;slice_array&#32;closure.</emphasis>
687 &#32;&#32;<emphasis role="comment">//</emphasis>
688 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Dom&gt;
689 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_SBase
690 &#32;&#32;&#32;&#32;{
691 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
692 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dom::value_type&#32;value_type;
693 &#32;&#32;&#32;&#32;&#32;&#32;
694 &#32;&#32;&#32;&#32;&#32;&#32;_SBase&#32;(<emphasis role="keyword">const</emphasis>&#32;_Dom&amp;&#32;__e,&#32;<emphasis role="keyword">const</emphasis>&#32;slice&amp;&#32;__s)
695 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_expr&#32;(__e),&#32;_M_slice&#32;(__s)&#32;{}
696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
697 &#32;&#32;&#32;&#32;&#32;&#32;value_type
698 &#32;&#32;&#32;&#32;&#32;&#32;operator[]&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;__i)<emphasis role="keyword">&#32;const</emphasis>
699 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_expr[_M_slice.start&#32;()&#32;+&#32;__i&#32;*&#32;_M_slice.stride&#32;()];&#32;}
700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
701 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>
702 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()<emphasis role="keyword">&#32;const</emphasis>
703 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_slice.size&#32;();&#32;}
704 
705 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
706 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_ValArrayRef&lt;_Dom&gt;::__type&#32;_M_expr;
707 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;slice&amp;&#32;_M_slice;
708 &#32;&#32;&#32;&#32;};
709 
710 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
711 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_SBase&lt;_Array&lt;_Tp&gt;&#32;&gt;
712 &#32;&#32;&#32;&#32;{
713 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
714 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;value_type;
715 &#32;&#32;&#32;&#32;&#32;&#32;
716 &#32;&#32;&#32;&#32;&#32;&#32;_SBase&#32;(_Array&lt;_Tp&gt;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;slice&amp;&#32;__s)
717 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_array&#32;(__a._M_data+__s.start()),&#32;_M_size&#32;(__s.size()),
718 &#32;&#32;&#32;&#32;_M_stride&#32;(__s.stride())&#32;{}
719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
720 &#32;&#32;&#32;&#32;&#32;&#32;value_type
721 &#32;&#32;&#32;&#32;&#32;&#32;operator[]&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;__i)<emphasis role="keyword">&#32;const</emphasis>
722 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_array._M_data[__i&#32;*&#32;_M_stride];&#32;}
723 &#32;&#32;&#32;&#32;&#32;&#32;
724 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>
725 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()<emphasis role="keyword">&#32;const</emphasis>
726 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_size;&#32;}
727 
728 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
729 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Array&lt;_Tp&gt;&#32;_M_array;
730 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_M_size;
731 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_M_stride;
732 &#32;&#32;&#32;&#32;};
733 
734 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
735 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SClos&lt;_Expr,&#32;_Dom&gt;
736 &#32;&#32;&#32;&#32;:&#32;_SBase&lt;_Dom&gt;
737 &#32;&#32;&#32;&#32;{
738 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_SBase&lt;_Dom&gt;&#32;_Base;
739 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::value_type&#32;value_type;
740 &#32;&#32;&#32;&#32;&#32;&#32;
741 &#32;&#32;&#32;&#32;&#32;&#32;_SClos&#32;(<emphasis role="keyword">const</emphasis>&#32;_Dom&amp;&#32;__e,&#32;<emphasis role="keyword">const</emphasis>&#32;slice&amp;&#32;__s)&#32;:&#32;_Base&#32;(__e,&#32;__s)&#32;{}
742 &#32;&#32;&#32;&#32;};
743 
744 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
745 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SClos&lt;_ValArray,&#32;_Tp&gt;
746 &#32;&#32;&#32;&#32;:&#32;_SBase&lt;_Array&lt;_Tp&gt;&#32;&gt;
747 &#32;&#32;&#32;&#32;{
748 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;&#32;_SBase&lt;_Array&lt;_Tp&gt;&#32;&gt;&#32;_Base;
749 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;value_type;
750 &#32;&#32;&#32;&#32;&#32;&#32;
751 &#32;&#32;&#32;&#32;&#32;&#32;_SClos&#32;(_Array&lt;_Tp&gt;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;slice&amp;&#32;__s)&#32;:&#32;_Base&#32;(__a,&#32;__s)&#32;{}
752 &#32;&#32;&#32;&#32;};
753 }&#32;<emphasis role="comment">//&#32;namespace&#32;__detail</emphasis>
754 
755 _GLIBCXX_END_NAMESPACE_VERSION
756 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
757 
758 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_CPP_VALARRAY_BEFORE_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
