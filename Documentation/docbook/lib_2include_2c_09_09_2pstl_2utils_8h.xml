<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2pstl_2utils_8h" xml:lang="en-US">
<title>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/pstl/utils.h File Reference</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/pstl/utils.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &lt;new&gt;<?linebreak?>#include &lt;type_traits&gt;<?linebreak?></programlisting>Include dependency graph for utils.h:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="lib_2include_2c_09_09_2pstl_2utils_8h__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
This graph shows which files directly or indirectly include this file:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="lib_2include_2c_09_09_2pstl_2utils_8h__dep__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_struct____pstl_1_1____internal_1_1____no__op">__pstl::__internal::__no_op</link></para>

<para>Unary operator that returns reference to its argument. </para>
</listitem>
            <listitem><para>class <link linkend="_class____pstl_1_1____internal_1_1____not__pred">__pstl::__internal::__not_pred&lt; _Pred &gt;</link></para>

<para>Logical negation of a predicate. </para>
</listitem>
            <listitem><para>class <link linkend="_class____pstl_1_1____internal_1_1____reorder__pred">__pstl::__internal::__reorder_pred&lt; _Pred &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_class____pstl_1_1____internal_1_1____pstl__equal">__pstl::__internal::__pstl_equal</link></para>

<para>&quot;==&quot; comparison. </para>
</listitem>
            <listitem><para>class <link linkend="_class____pstl_1_1____internal_1_1____pstl__less">__pstl::__internal::__pstl_less</link></para>

<para>&quot;&lt;&quot; comparison. </para>
</listitem>
            <listitem><para>class <link linkend="_class____pstl_1_1____internal_1_1____equal__value__by__pred">__pstl::__internal::__equal_value_by_pred&lt; _Tp, _Predicate &gt;</link></para>

<para>Like a polymorphic lambda for pred(...,value) </para>
</listitem>
            <listitem><para>class <link linkend="_class____pstl_1_1____internal_1_1____equal__value">__pstl::__internal::__equal_value&lt; _Tp &gt;</link></para>

<para>Like a polymorphic lambda for ==value. </para>
</listitem>
            <listitem><para>class <link linkend="_class____pstl_1_1____internal_1_1____not__equal__value">__pstl::__internal::__not_equal_value&lt; _Tp &gt;</link></para>

<para>Logical negation of ==value. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Namespaces    </title>
        <itemizedlist>
            <listitem><para>namespace <link linkend="_namespace____pstl">__pstl</link></para>
</listitem>
            <listitem><para>namespace <link linkend="_namespace____pstl_1_1____internal">__pstl::__internal</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>template&lt;typename _Fp &gt; </para><para>std::result_of&lt; _Fp()&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> <link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__pstl::__internal::__except_handler</link> (_Fp __f)</para>
</listitem>
            <listitem><para>template&lt;typename _Fp &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a87c94f05940f4ecf102a6ffd803dfdaf">__pstl::__internal::__invoke_if</link> (std::true_type, _Fp __f)</para>
</listitem>
            <listitem><para>template&lt;typename _Fp &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1aa28f5d7304eca28001c5617cbc03a49e">__pstl::__internal::__invoke_if</link> (std::false_type, _Fp __f)</para>
</listitem>
            <listitem><para>template&lt;typename _Fp &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a99ffa966b0cf5f0b3687352c6b055f81">__pstl::__internal::__invoke_if_not</link> (std::false_type, _Fp __f)</para>
</listitem>
            <listitem><para>template&lt;typename _Fp &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a3d31de2b216616b4c29fb20b7f3af4ae">__pstl::__internal::__invoke_if_not</link> (std::true_type, _Fp __f)</para>
</listitem>
            <listitem><para>template&lt;typename _F1 , typename _F2 &gt; </para><para>std::result_of&lt; _F1()&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> <link linkend="_namespace____pstl_1_1____internal_1a15436428a09d1f47fcfdebbebd4a19d6">__pstl::__internal::__invoke_if_else</link> (std::true_type, _F1 __f1, _F2 __f2)</para>
</listitem>
            <listitem><para>template&lt;typename _F1 , typename _F2 &gt; </para><para>std::result_of&lt; _F2()&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> <link linkend="_namespace____pstl_1_1____internal_1a6cf4d82365aad117c8b0dc5bc28b533c">__pstl::__internal::__invoke_if_else</link> (std::false_type, _F1 __f1, _F2 __f2)</para>
</listitem>
            <listitem><para>template&lt;typename _ForwardIterator , typename _Compare &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1ac5870aee10bdade2147062d8b74f6d2e">__pstl::__internal::__cmp_iterators_by_values</link> (_ForwardIterator __a, _ForwardIterator __b, _Compare __comp)</para>
</listitem>
        </itemizedlist>
</simplesect>
</section>
