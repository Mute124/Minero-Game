<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2experimental_2bits_2simd__math_8h_source" xml:lang="en-US">
<title>simd_math.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/experimental/bits/simd_math.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Math&#32;overloads&#32;for&#32;simd&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2020-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_EXPERIMENTAL_SIMD_MATH_H_</emphasis>
26 <emphasis role="preprocessor">#define&#32;_GLIBCXX_EXPERIMENTAL_SIMD_MATH_H_</emphasis>
27 
28 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
29 
30 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>
31 <emphasis role="preprocessor">#include&#32;&lt;iomanip&gt;</emphasis>
32 
33 _GLIBCXX_SIMD_BEGIN_NAMESPACE
34 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_V&gt;
35 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Samesize&#32;=&#32;fixed_size_simd&lt;_Tp,&#32;_V::size()&gt;;
36 
37 <emphasis role="comment">//&#32;_Math_return_type&#32;{{{</emphasis>
38 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_DoubleR,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
39 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Math_return_type;
40 
41 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_DoubleR,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
42 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Math_return_type_t&#32;=
43 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Math_return_type&lt;_DoubleR,&#32;_Tp,&#32;_Abi&gt;::type;
44 
45 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
46 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Math_return_type&lt;double,&#32;_Tp,&#32;_Abi&gt;
47 &#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;simd&lt;_Tp,&#32;_Abi&gt;;&#32;};
48 
49 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
50 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Math_return_type&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>,&#32;_Tp,&#32;_Abi&gt;
51 &#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;simd_mask&lt;_Tp,&#32;_Abi&gt;;&#32;};
52 
53 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_DoubleR,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
54 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Math_return_type
55 &#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;fixed_size_simd&lt;_DoubleR,&#32;simd_size_v&lt;_Tp,&#32;_Abi&gt;&gt;;&#32;};
56 
57 <emphasis role="comment">//}}}</emphasis>
58 <emphasis role="comment">//&#32;_GLIBCXX_SIMD_MATH_CALL_&#32;{{{</emphasis>
59 <emphasis role="preprocessor">#define&#32;_GLIBCXX_SIMD_MATH_CALL_(__name)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
60 <emphasis role="preprocessor">template&#32;&lt;typename&#32;_Tp,&#32;typename&#32;_Abi,&#32;typename...,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
61 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_R&#32;=&#32;_Math_return_type_t&lt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
62 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decltype(std::__name(declval&lt;double&gt;())),&#32;_Tp,&#32;_Abi&gt;&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
63 <emphasis role="preprocessor">&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
64 <emphasis role="preprocessor">&#32;&#32;enable_if_t&lt;is_floating_point_v&lt;_Tp&gt;,&#32;_R&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
65 <emphasis role="preprocessor">&#32;&#32;__name(simd&lt;_Tp,&#32;_Abi&gt;&#32;__x)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
66 <emphasis role="preprocessor">&#32;&#32;{&#32;return&#32;{__private_init,&#32;_Abi::_SimdImpl::_S_##__name(__data(__x))};&#32;}</emphasis>
67 
68 <emphasis role="comment">//&#32;}}}</emphasis>
69 <emphasis role="comment">//_Extra_argument_type{{{</emphasis>
70 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
71 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Extra_argument_type;
72 
73 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
74 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Extra_argument_type&lt;_Tp*,&#32;_Tp,&#32;_Abi&gt;
75 &#32;&#32;{
76 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;simd&lt;_Tp,&#32;_Abi&gt;*;
77 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>*&#32;declval();
78 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__needs_temporary_scalar&#32;=&#32;<emphasis role="keyword">true</emphasis>;
79 
80 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;_S_data(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;__x)
81 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;__data(*__x);&#32;}
82 &#32;&#32;};
83 
84 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
85 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Extra_argument_type&lt;_Up*,&#32;_Tp,&#32;_Abi&gt;
86 &#32;&#32;{
87 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_integral_v&lt;_Up&gt;);
88 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;fixed_size_simd&lt;_Up,&#32;simd_size_v&lt;_Tp,&#32;_Abi&gt;&gt;*;
89 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Up*&#32;declval();
90 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__needs_temporary_scalar&#32;=&#32;<emphasis role="keyword">true</emphasis>;
91 
92 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;_S_data(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;__x)
93 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;__data(*__x);&#32;}
94 &#32;&#32;};
95 
96 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
97 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Extra_argument_type&lt;_Tp,&#32;_Tp,&#32;_Abi&gt;
98 &#32;&#32;{
99 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;simd&lt;_Tp,&#32;_Abi&gt;;
100 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;declval();
101 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__needs_temporary_scalar&#32;=&#32;<emphasis role="keyword">false</emphasis>;
102 
103 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)
104 &#32;&#32;&#32;&#32;_S_data(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&amp;&#32;__x)
105 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__data(__x);&#32;}
106 &#32;&#32;};
107 
108 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
109 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Extra_argument_type
110 &#32;&#32;{
111 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_integral_v&lt;_Up&gt;);
112 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;fixed_size_simd&lt;_Up,&#32;simd_size_v&lt;_Tp,&#32;_Abi&gt;&gt;;
113 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Up&#32;declval();
114 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__needs_temporary_scalar&#32;=&#32;<emphasis role="keyword">false</emphasis>;
115 
116 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)
117 &#32;&#32;&#32;&#32;_S_data(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&amp;&#32;__x)
118 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__data(__x);&#32;}
119 &#32;&#32;};
120 
121 <emphasis role="comment">//}}}</emphasis>
122 <emphasis role="comment">//&#32;_GLIBCXX_SIMD_MATH_CALL2_&#32;{{{</emphasis>
123 <emphasis role="preprocessor">#define&#32;_GLIBCXX_SIMD_MATH_CALL2_(__name,&#32;__arg2)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
124 <emphasis role="preprocessor">template&#32;&lt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
125 <emphasis role="preprocessor">&#32;&#32;typename&#32;_Tp,&#32;typename&#32;_Abi,&#32;typename...,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
126 <emphasis role="preprocessor">&#32;&#32;typename&#32;_Arg2&#32;=&#32;_Extra_argument_type&lt;__arg2,&#32;_Tp,&#32;_Abi&gt;,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
127 <emphasis role="preprocessor">&#32;&#32;typename&#32;_R&#32;=&#32;_Math_return_type_t&lt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
128 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;decltype(std::__name(declval&lt;double&gt;(),&#32;_Arg2::declval())),&#32;_Tp,&#32;_Abi&gt;&gt;&#32;&#32;&#32;&#32;\</emphasis>
129 <emphasis role="preprocessor">&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
130 <emphasis role="preprocessor">&#32;&#32;enable_if_t&lt;is_floating_point_v&lt;_Tp&gt;,&#32;_R&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
131 <emphasis role="preprocessor">&#32;&#32;__name(const&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__x,&#32;const&#32;typename&#32;_Arg2::type&amp;&#32;__y)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
132 <emphasis role="preprocessor">&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
133 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;return&#32;{__private_init,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
134 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Abi::_SimdImpl::_S_##__name(__data(__x),&#32;_Arg2::_S_data(__y))};&#32;&#32;&#32;\</emphasis>
135 <emphasis role="preprocessor">&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
136 <emphasis role="preprocessor">template&#32;&lt;typename&#32;_Up,&#32;typename&#32;_Tp,&#32;typename&#32;_Abi&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
137 <emphasis role="preprocessor">&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_Math_return_type_t&lt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
138 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;decltype(std::__name(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
139 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;declval&lt;double&gt;(),&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
140 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;declval&lt;enable_if_t&lt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
141 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;conjunction_v&lt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
142 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;is_same&lt;__arg2,&#32;_Tp&gt;,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
143 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;negation&lt;is_same&lt;__remove_cvref_t&lt;_Up&gt;,&#32;simd&lt;_Tp,&#32;_Abi&gt;&gt;&gt;,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
144 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;is_convertible&lt;_Up,&#32;simd&lt;_Tp,&#32;_Abi&gt;&gt;,&#32;is_floating_point&lt;_Tp&gt;&gt;,&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
145 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;double&gt;&gt;())),&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
146 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_Tp,&#32;_Abi&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
147 <emphasis role="preprocessor">&#32;&#32;__name(_Up&amp;&amp;&#32;__xx,&#32;const&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__yy)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
148 <emphasis role="preprocessor">&#32;&#32;{&#32;return&#32;__name(simd&lt;_Tp,&#32;_Abi&gt;(static_cast&lt;_Up&amp;&amp;&gt;(__xx)),&#32;__yy);&#32;}</emphasis>
149 
150 <emphasis role="comment">//&#32;}}}</emphasis>
151 <emphasis role="comment">//&#32;_GLIBCXX_SIMD_MATH_CALL3_&#32;{{{</emphasis>
152 <emphasis role="preprocessor">#define&#32;_GLIBCXX_SIMD_MATH_CALL3_(__name,&#32;__arg2,&#32;__arg3)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
153 <emphasis role="preprocessor">template&#32;&lt;typename&#32;_Tp,&#32;typename&#32;_Abi,&#32;typename...,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
154 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_Arg2&#32;=&#32;_Extra_argument_type&lt;__arg2,&#32;_Tp,&#32;_Abi&gt;,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
155 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_Arg3&#32;=&#32;_Extra_argument_type&lt;__arg3,&#32;_Tp,&#32;_Abi&gt;,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
156 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_R&#32;=&#32;_Math_return_type_t&lt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
157 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decltype(std::__name(declval&lt;double&gt;(),&#32;_Arg2::declval(),&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
158 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Arg3::declval())),&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
159 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp,&#32;_Abi&gt;&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
160 <emphasis role="preprocessor">&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
161 <emphasis role="preprocessor">&#32;&#32;enable_if_t&lt;is_floating_point_v&lt;_Tp&gt;,&#32;_R&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
162 <emphasis role="preprocessor">&#32;&#32;__name(const&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__x,&#32;const&#32;typename&#32;_Arg2::type&amp;&#32;__y,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
163 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;const&#32;typename&#32;_Arg3::type&amp;&#32;__z)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
164 <emphasis role="preprocessor">&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
165 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;return&#32;{__private_init,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
166 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Abi::_SimdImpl::_S_##__name(__data(__x),&#32;_Arg2::_S_data(__y),&#32;&#32;&#32;&#32;&#32;\</emphasis>
167 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Arg3::_S_data(__z))};&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
168 <emphasis role="preprocessor">&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
169 <emphasis role="preprocessor">template&#32;&lt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
170 <emphasis role="preprocessor">&#32;&#32;typename&#32;_T0,&#32;typename&#32;_T1,&#32;typename&#32;_T2,&#32;typename...,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
171 <emphasis role="preprocessor">&#32;&#32;typename&#32;_U0&#32;=&#32;__remove_cvref_t&lt;_T0&gt;,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
172 <emphasis role="preprocessor">&#32;&#32;typename&#32;_U1&#32;=&#32;__remove_cvref_t&lt;_T1&gt;,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
173 <emphasis role="preprocessor">&#32;&#32;typename&#32;_U2&#32;=&#32;__remove_cvref_t&lt;_T2&gt;,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
174 <emphasis role="preprocessor">&#32;&#32;typename&#32;_Simd&#32;=&#32;conditional_t&lt;is_simd_v&lt;_U1&gt;,&#32;_U1,&#32;_U2&gt;,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
175 <emphasis role="preprocessor">&#32;&#32;typename&#32;=&#32;enable_if_t&lt;conjunction_v&lt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
176 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;is_simd&lt;_Simd&gt;,&#32;is_convertible&lt;_T0&amp;&amp;,&#32;_Simd&gt;,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
177 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;is_convertible&lt;_T1&amp;&amp;,&#32;_Simd&gt;,&#32;is_convertible&lt;_T2&amp;&amp;,&#32;_Simd&gt;,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
178 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;negation&lt;conjunction&lt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
179 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;is_simd&lt;_U0&gt;,&#32;is_floating_point&lt;__value_type_or_identity_t&lt;_U0&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#32;&#32;&#32;&#32;\</emphasis>
180 <emphasis role="preprocessor">&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;decltype(__name(declval&lt;const&#32;_Simd&amp;&gt;(),&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
181 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;declval&lt;const&#32;_Simd&amp;&gt;(),&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
182 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;declval&lt;const&#32;_Simd&amp;&gt;()))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
183 <emphasis role="preprocessor">&#32;&#32;__name(_T0&amp;&amp;&#32;__xx,&#32;_T1&amp;&amp;&#32;__yy,&#32;_T2&amp;&amp;&#32;__zz)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
184 <emphasis role="preprocessor">&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
185 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;return&#32;__name(_Simd(static_cast&lt;_T0&amp;&amp;&gt;(__xx)),&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
186 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Simd(static_cast&lt;_T1&amp;&amp;&gt;(__yy)),&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
187 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Simd(static_cast&lt;_T2&amp;&amp;&gt;(__zz)));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
188 <emphasis role="preprocessor">&#32;&#32;}</emphasis>
189 
190 <emphasis role="comment">//&#32;}}}</emphasis>
191 <emphasis role="comment">//&#32;__cosSeries&#32;{{{</emphasis>
192 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
193 &#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;<emphasis role="keyword">static</emphasis>&#32;simd&lt;float,&#32;_Abi&gt;
194 &#32;&#32;__cosSeries(<emphasis role="keyword">const</emphasis>&#32;simd&lt;float,&#32;_Abi&gt;&amp;&#32;__x)
195 &#32;&#32;{
196 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;simd&lt;float,&#32;_Abi&gt;&#32;__x2&#32;=&#32;__x&#32;*&#32;__x;
197 &#32;&#32;&#32;&#32;simd&lt;float,&#32;_Abi&gt;&#32;__y;
198 &#32;&#32;&#32;&#32;__y&#32;=&#32;0x1.ap-16f;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;1/8!</emphasis>
199 &#32;&#32;&#32;&#32;__y&#32;=&#32;__y&#32;*&#32;__x2&#32;-&#32;0x1.6c1p-10f;&#32;&#32;&#32;<emphasis role="comment">//&#32;-1/6!</emphasis>
200 &#32;&#32;&#32;&#32;__y&#32;=&#32;__y&#32;*&#32;__x2&#32;+&#32;0x1.555556p-5f;&#32;<emphasis role="comment">//&#32;&#32;1/4!</emphasis>
201 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__y&#32;*&#32;(__x2&#32;*&#32;__x2)&#32;-&#32;.5f&#32;*&#32;__x2&#32;+&#32;1.f;
202 &#32;&#32;}
203 
204 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
205 &#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;<emphasis role="keyword">static</emphasis>&#32;simd&lt;double,&#32;_Abi&gt;
206 &#32;&#32;__cosSeries(<emphasis role="keyword">const</emphasis>&#32;simd&lt;double,&#32;_Abi&gt;&amp;&#32;__x)
207 &#32;&#32;{
208 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;simd&lt;double,&#32;_Abi&gt;&#32;__x2&#32;=&#32;__x&#32;*&#32;__x;
209 &#32;&#32;&#32;&#32;simd&lt;double,&#32;_Abi&gt;&#32;__y;
210 &#32;&#32;&#32;&#32;__y&#32;=&#32;0x1.AC00000000000p-45;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;1/16!</emphasis>
211 &#32;&#32;&#32;&#32;__y&#32;=&#32;__y&#32;*&#32;__x2&#32;-&#32;0x1.9394000000000p-37;&#32;<emphasis role="comment">//&#32;-1/14!</emphasis>
212 &#32;&#32;&#32;&#32;__y&#32;=&#32;__y&#32;*&#32;__x2&#32;+&#32;0x1.1EED8C0000000p-29;&#32;<emphasis role="comment">//&#32;&#32;1/12!</emphasis>
213 &#32;&#32;&#32;&#32;__y&#32;=&#32;__y&#32;*&#32;__x2&#32;-&#32;0x1.27E4FB7400000p-22;&#32;<emphasis role="comment">//&#32;-1/10!</emphasis>
214 &#32;&#32;&#32;&#32;__y&#32;=&#32;__y&#32;*&#32;__x2&#32;+&#32;0x1.A01A01A018000p-16;&#32;<emphasis role="comment">//&#32;&#32;1/8!</emphasis>
215 &#32;&#32;&#32;&#32;__y&#32;=&#32;__y&#32;*&#32;__x2&#32;-&#32;0x1.6C16C16C16C00p-10;&#32;<emphasis role="comment">//&#32;-1/6!</emphasis>
216 &#32;&#32;&#32;&#32;__y&#32;=&#32;__y&#32;*&#32;__x2&#32;+&#32;0x1.5555555555554p-5;&#32;&#32;<emphasis role="comment">//&#32;&#32;1/4!</emphasis>
217 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__y&#32;*&#32;__x2&#32;-&#32;.5f)&#32;*&#32;__x2&#32;+&#32;1.f;
218 &#32;&#32;}
219 
220 <emphasis role="comment">//&#32;}}}</emphasis>
221 <emphasis role="comment">//&#32;__sinSeries&#32;{{{</emphasis>
222 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
223 &#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;<emphasis role="keyword">static</emphasis>&#32;simd&lt;float,&#32;_Abi&gt;
224 &#32;&#32;__sinSeries(<emphasis role="keyword">const</emphasis>&#32;simd&lt;float,&#32;_Abi&gt;&amp;&#32;__x)
225 &#32;&#32;{
226 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;simd&lt;float,&#32;_Abi&gt;&#32;__x2&#32;=&#32;__x&#32;*&#32;__x;
227 &#32;&#32;&#32;&#32;simd&lt;float,&#32;_Abi&gt;&#32;__y;
228 &#32;&#32;&#32;&#32;__y&#32;=&#32;-0x1.9CC000p-13f;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-1/7!</emphasis>
229 &#32;&#32;&#32;&#32;__y&#32;=&#32;__y&#32;*&#32;__x2&#32;+&#32;0x1.111100p-7f;&#32;<emphasis role="comment">//&#32;&#32;1/5!</emphasis>
230 &#32;&#32;&#32;&#32;__y&#32;=&#32;__y&#32;*&#32;__x2&#32;-&#32;0x1.555556p-3f;&#32;<emphasis role="comment">//&#32;-1/3!</emphasis>
231 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__y&#32;*&#32;(__x2&#32;*&#32;__x)&#32;+&#32;__x;
232 &#32;&#32;}
233 
234 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
235 &#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;<emphasis role="keyword">static</emphasis>&#32;simd&lt;double,&#32;_Abi&gt;
236 &#32;&#32;__sinSeries(<emphasis role="keyword">const</emphasis>&#32;simd&lt;double,&#32;_Abi&gt;&amp;&#32;__x)
237 &#32;&#32;{
238 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__x&#32;&#32;=&#32;[0,&#32;0.7854&#32;=&#32;pi/4]</emphasis>
239 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__x²&#32;=&#32;[0,&#32;0.6169&#32;=&#32;pi²/8]</emphasis>
240 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;simd&lt;double,&#32;_Abi&gt;&#32;__x2&#32;=&#32;__x&#32;*&#32;__x;
241 &#32;&#32;&#32;&#32;simd&lt;double,&#32;_Abi&gt;&#32;__y;
242 &#32;&#32;&#32;&#32;__y&#32;=&#32;-0x1.ACF0000000000p-41;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-1/15!</emphasis>
243 &#32;&#32;&#32;&#32;__y&#32;=&#32;__y&#32;*&#32;__x2&#32;+&#32;0x1.6124400000000p-33;&#32;<emphasis role="comment">//&#32;&#32;1/13!</emphasis>
244 &#32;&#32;&#32;&#32;__y&#32;=&#32;__y&#32;*&#32;__x2&#32;-&#32;0x1.AE64567000000p-26;&#32;<emphasis role="comment">//&#32;-1/11!</emphasis>
245 &#32;&#32;&#32;&#32;__y&#32;=&#32;__y&#32;*&#32;__x2&#32;+&#32;0x1.71DE3A5540000p-19;&#32;<emphasis role="comment">//&#32;&#32;1/9!</emphasis>
246 &#32;&#32;&#32;&#32;__y&#32;=&#32;__y&#32;*&#32;__x2&#32;-&#32;0x1.A01A01A01A000p-13;&#32;<emphasis role="comment">//&#32;-1/7!</emphasis>
247 &#32;&#32;&#32;&#32;__y&#32;=&#32;__y&#32;*&#32;__x2&#32;+&#32;0x1.1111111111110p-7;&#32;&#32;<emphasis role="comment">//&#32;&#32;1/5!</emphasis>
248 &#32;&#32;&#32;&#32;__y&#32;=&#32;__y&#32;*&#32;__x2&#32;-&#32;0x1.5555555555555p-3;&#32;&#32;<emphasis role="comment">//&#32;-1/3!</emphasis>
249 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__y&#32;*&#32;(__x2&#32;*&#32;__x)&#32;+&#32;__x;
250 &#32;&#32;}
251 
252 <emphasis role="comment">//&#32;}}}</emphasis>
253 <emphasis role="comment">//&#32;__zero_low_bits&#32;{{{</emphasis>
254 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>&#32;_Bits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
255 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;simd&lt;_Tp,&#32;_Abi&gt;
256 &#32;&#32;__zero_low_bits(simd&lt;_Tp,&#32;_Abi&gt;&#32;__x)
257 &#32;&#32;{
258 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Abi&gt;&#32;__bitmask
259 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__bit_cast&lt;_Tp&gt;(~make_unsigned_t&lt;__int_for_sizeof_t&lt;_Tp&gt;&gt;()&#32;&lt;&lt;&#32;_Bits);
260 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Abi::_SimdImpl::_S_bit_and(__data(__x),&#32;__data(__bitmask))};
262 &#32;&#32;}
263 
264 <emphasis role="comment">//&#32;}}}</emphasis>
265 <emphasis role="comment">//&#32;__fold_input&#32;{{{</emphasis>
266 
285 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
286 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Folded
287 &#32;&#32;{
288 &#32;&#32;&#32;&#32;simd&lt;_Tp,&#32;_Abi&gt;&#32;_M_x;
289 &#32;&#32;&#32;&#32;rebind_simd_t&lt;int,&#32;simd&lt;_Tp,&#32;_Abi&gt;&gt;&#32;_M_quadrant;
290 &#32;&#32;};
291 
292 <emphasis role="keyword">namespace&#32;</emphasis>__math_float&#32;{
293 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;__pi_over_4&#32;=&#32;0x1.921FB6p-1f;&#32;<emphasis role="comment">//&#32;π/4</emphasis>
294 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;__2_over_pi&#32;=&#32;0x1.45F306p-1f;&#32;<emphasis role="comment">//&#32;2/π</emphasis>
295 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;__pi_2_5bits0
296 &#32;&#32;=&#32;0x1.921fc0p0f;&#32;<emphasis role="comment">//&#32;π/2,&#32;5&#32;0-bits&#32;(least&#32;significant)</emphasis>
297 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;__pi_2_5bits0_rem
298 &#32;&#32;=&#32;-0x1.5777a6p-21f;&#32;<emphasis role="comment">//&#32;π/2&#32;-&#32;__pi_2_5bits0</emphasis>
299 }&#32;<emphasis role="comment">//&#32;namespace&#32;__math_float</emphasis>
300 <emphasis role="keyword">namespace&#32;</emphasis>__math_double&#32;{
301 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;__pi_over_4&#32;=&#32;0x1.921fb54442d18p-1;&#32;<emphasis role="comment">//&#32;π/4</emphasis>
302 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;__2_over_pi&#32;=&#32;0x1.45F306DC9C883p-1;&#32;<emphasis role="comment">//&#32;2/π</emphasis>
303 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;__pi_2&#32;=&#32;0x1.921fb54442d18p0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;π/2</emphasis>
304 }&#32;<emphasis role="comment">//&#32;namespace&#32;__math_double</emphasis>
305 
306 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
307 &#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_Folded&lt;float,&#32;_Abi&gt;
308 &#32;&#32;__fold_input(<emphasis role="keyword">const</emphasis>&#32;simd&lt;float,&#32;_Abi&gt;&amp;&#32;__x)
309 &#32;&#32;{
310 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_V&#32;=&#32;simd&lt;float,&#32;_Abi&gt;;
311 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_IV&#32;=&#32;rebind_simd_t&lt;int,&#32;_V&gt;;
312 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>__math_float;
313 &#32;&#32;&#32;&#32;_Folded&lt;float,&#32;_Abi&gt;&#32;__r;
314 &#32;&#32;&#32;&#32;__r._M_x&#32;=&#32;<link linkend="_group__core__func__common_1ga439e60a72eadecfeda2df5449c613a64">abs</link>(__x);
315 <emphasis role="preprocessor">#if&#32;0</emphasis>
316 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;zero&#32;most&#32;mantissa&#32;bits:</emphasis>
317 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;__1_over_pi&#32;=&#32;0x1.45F306p-2f;&#32;<emphasis role="comment">//&#32;1/π</emphasis>
318 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__y&#32;=&#32;(__r._M_x&#32;*&#32;__1_over_pi&#32;+&#32;0x1.8p23f)&#32;-&#32;0x1.8p23f;
319 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;split&#32;π&#32;into&#32;4&#32;parts,&#32;the&#32;first&#32;three&#32;with&#32;13&#32;trailing&#32;zeros&#32;(to&#32;make&#32;the</emphasis>
320 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;following&#32;multiplications&#32;precise):</emphasis>
321 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;__pi0&#32;=&#32;0x1.920000p1f;
322 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;__pi1&#32;=&#32;0x1.fb4000p-11f;
323 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;__pi2&#32;=&#32;0x1.444000p-23f;
324 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;__pi3&#32;=&#32;0x1.68c234p-38f;
325 &#32;&#32;&#32;&#32;__r._M_x&#32;-&#32;__y*__pi0&#32;-&#32;__y*__pi1&#32;-&#32;__y*__pi2&#32;-&#32;__y*__pi3
326 <emphasis role="preprocessor">#else</emphasis>
327 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_GLIBCXX_SIMD_IS_UNLIKELY(<link linkend="_namespacestd_1af69ea32ebd7865fb57714d6b5f12f26d">all_of</link>(__r._M_x&#32;&lt;&#32;__pi_over_4)))
328 &#32;&#32;&#32;&#32;&#32;&#32;__r._M_quadrant&#32;=&#32;0;
329 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_GLIBCXX_SIMD_IS_LIKELY(<link linkend="_namespacestd_1af69ea32ebd7865fb57714d6b5f12f26d">all_of</link>(__r._M_x&#32;&lt;&#32;6&#32;*&#32;__pi_over_4)))
330 &#32;&#32;&#32;&#32;&#32;&#32;{
331 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_V&#32;__y&#32;=&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a283df788ac3ead918eb16a6d3936f4ef">nearbyint</link>(__r._M_x&#32;*&#32;__2_over_pi);
332 &#32;&#32;&#32;&#32;__r._M_quadrant&#32;=&#32;static_simd_cast&lt;_IV&gt;(__y)&#32;&amp;&#32;3;&#32;<emphasis role="comment">//&#32;__y&#32;mod&#32;4</emphasis>
333 &#32;&#32;&#32;&#32;__r._M_x&#32;-=&#32;__y&#32;*&#32;__pi_2_5bits0;
334 &#32;&#32;&#32;&#32;__r._M_x&#32;-=&#32;__y&#32;*&#32;__pi_2_5bits0_rem;
335 &#32;&#32;&#32;&#32;&#32;&#32;}
336 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
337 &#32;&#32;&#32;&#32;&#32;&#32;{
338 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__math_double::__2_over_pi;
339 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__math_double::__pi_2;
340 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_VD&#32;=&#32;rebind_simd_t&lt;double,&#32;_V&gt;;
341 &#32;&#32;&#32;&#32;_VD&#32;__xd&#32;=&#32;static_simd_cast&lt;_VD&gt;(__r._M_x);
342 &#32;&#32;&#32;&#32;_VD&#32;__y&#32;=&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a283df788ac3ead918eb16a6d3936f4ef">nearbyint</link>(__xd&#32;*&#32;__2_over_pi);
343 &#32;&#32;&#32;&#32;__r._M_quadrant&#32;=&#32;static_simd_cast&lt;_IV&gt;(__y)&#32;&amp;&#32;3;&#32;<emphasis role="comment">//&#32;=&#32;__y&#32;mod&#32;4</emphasis>
344 &#32;&#32;&#32;&#32;__r._M_x&#32;=&#32;static_simd_cast&lt;_V&gt;(__xd&#32;-&#32;__y&#32;*&#32;__pi_2);
345 &#32;&#32;&#32;&#32;&#32;&#32;}
346 <emphasis role="preprocessor">#endif</emphasis>
347 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
348 &#32;&#32;}
349 
350 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
351 &#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_Folded&lt;double,&#32;_Abi&gt;
352 &#32;&#32;__fold_input(<emphasis role="keyword">const</emphasis>&#32;simd&lt;double,&#32;_Abi&gt;&amp;&#32;__x)
353 &#32;&#32;{
354 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_V&#32;=&#32;simd&lt;double,&#32;_Abi&gt;;
355 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_IV&#32;=&#32;rebind_simd_t&lt;int,&#32;_V&gt;;
356 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>__math_double;
357 
358 &#32;&#32;&#32;&#32;_Folded&lt;double,&#32;_Abi&gt;&#32;__r;
359 &#32;&#32;&#32;&#32;__r._M_x&#32;=&#32;<link linkend="_group__core__func__common_1ga439e60a72eadecfeda2df5449c613a64">abs</link>(__x);
360 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_GLIBCXX_SIMD_IS_UNLIKELY(<link linkend="_namespacestd_1af69ea32ebd7865fb57714d6b5f12f26d">all_of</link>(__r._M_x&#32;&lt;&#32;__pi_over_4)))
361 &#32;&#32;&#32;&#32;&#32;&#32;{
362 &#32;&#32;&#32;&#32;__r._M_quadrant&#32;=&#32;0;
363 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
364 &#32;&#32;&#32;&#32;&#32;&#32;}
365 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_V&#32;__y&#32;=&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a283df788ac3ead918eb16a6d3936f4ef">nearbyint</link>(__r._M_x&#32;/&#32;(2&#32;*&#32;__pi_over_4));
366 &#32;&#32;&#32;&#32;__r._M_quadrant&#32;=&#32;static_simd_cast&lt;_IV&gt;(__y)&#32;&amp;&#32;3;
367 
368 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_GLIBCXX_SIMD_IS_LIKELY(<link linkend="_namespacestd_1af69ea32ebd7865fb57714d6b5f12f26d">all_of</link>(__r._M_x&#32;&lt;&#32;1025&#32;*&#32;__pi_over_4)))
369 &#32;&#32;&#32;&#32;&#32;&#32;{
370 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;x&#32;-&#32;y&#32;*&#32;pi/2,&#32;y&#32;uses&#32;no&#32;more&#32;than&#32;11&#32;mantissa&#32;bits</emphasis>
371 &#32;&#32;&#32;&#32;__r._M_x&#32;-=&#32;__y&#32;*&#32;0x1.921FB54443000p0;
372 &#32;&#32;&#32;&#32;__r._M_x&#32;-=&#32;__y&#32;*&#32;-0x1.73DCB3B39A000p-43;
373 &#32;&#32;&#32;&#32;__r._M_x&#32;-=&#32;__y&#32;*&#32;0x1.45C06E0E68948p-86;
374 &#32;&#32;&#32;&#32;&#32;&#32;}
375 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_GLIBCXX_SIMD_IS_LIKELY(<link linkend="_namespacestd_1af69ea32ebd7865fb57714d6b5f12f26d">all_of</link>(__y&#32;&lt;=&#32;0x1.0p30)))
376 &#32;&#32;&#32;&#32;&#32;&#32;{
377 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;x&#32;-&#32;y&#32;*&#32;pi/2,&#32;y&#32;uses&#32;no&#32;more&#32;than&#32;29&#32;mantissa&#32;bits</emphasis>
378 &#32;&#32;&#32;&#32;__r._M_x&#32;-=&#32;__y&#32;*&#32;0x1.921FB40000000p0;
379 &#32;&#32;&#32;&#32;__r._M_x&#32;-=&#32;__y&#32;*&#32;0x1.4442D00000000p-24;
380 &#32;&#32;&#32;&#32;__r._M_x&#32;-=&#32;__y&#32;*&#32;0x1.8469898CC5170p-48;
381 &#32;&#32;&#32;&#32;&#32;&#32;}
382 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
383 &#32;&#32;&#32;&#32;&#32;&#32;{
384 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;x&#32;-&#32;y&#32;*&#32;pi/2,&#32;y&#32;may&#32;require&#32;all&#32;mantissa&#32;bits</emphasis>
385 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_V&#32;__y_hi&#32;=&#32;__zero_low_bits&lt;26&gt;(__y);
386 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_V&#32;__y_lo&#32;=&#32;__y&#32;-&#32;__y_hi;
387 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__pi_2_1&#32;=&#32;0x1.921FB50000000p0;
388 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__pi_2_2&#32;=&#32;0x1.110B460000000p-26;
389 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__pi_2_3&#32;=&#32;0x1.1A62630000000p-54;
390 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__pi_2_4&#32;=&#32;0x1.8A2E03707344Ap-81;
391 &#32;&#32;&#32;&#32;__r._M_x&#32;=&#32;__r._M_x&#32;-&#32;__y_hi&#32;*&#32;__pi_2_1
392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>(__y_hi&#32;*&#32;__pi_2_2,&#32;__y_lo&#32;*&#32;__pi_2_1)
393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>(__y_hi&#32;*&#32;__pi_2_2,&#32;__y_lo&#32;*&#32;__pi_2_1)
394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>(__y_hi&#32;*&#32;__pi_2_3,&#32;__y_lo&#32;*&#32;__pi_2_2)
395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>(__y_hi&#32;*&#32;__pi_2_3,&#32;__y_lo&#32;*&#32;__pi_2_2)
396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>(__y&#32;*&#32;__pi_2_4,&#32;__y_lo&#32;*&#32;__pi_2_3)
397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>(__y&#32;*&#32;__pi_2_4,&#32;__y_lo&#32;*&#32;__pi_2_3);
398 &#32;&#32;&#32;&#32;&#32;&#32;}
399 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
400 &#32;&#32;}
401 
402 <emphasis role="comment">//&#32;}}}</emphasis>
403 <emphasis role="comment">//&#32;__extract_exponent_as_int&#32;{{{</emphasis>
404 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
405 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC
406 &#32;&#32;rebind_simd_t&lt;int,&#32;simd&lt;_Tp,&#32;_Abi&gt;&gt;
407 &#32;&#32;__extract_exponent_as_int(<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__v)
408 &#32;&#32;{
409 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Vp&#32;=&#32;simd&lt;_Tp,&#32;_Abi&gt;;
410 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Up&#32;=&#32;make_unsigned_t&lt;__int_for_sizeof_t&lt;_Tp&gt;&gt;;
411 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>std::experimental::__float_bitwise_operators;
412 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>std::experimental::__proposed;
413 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Vp&#32;__exponent_mask
414 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__infinity_v&lt;_Tp&gt;;&#32;<emphasis role="comment">//&#32;0x7f800000&#32;or&#32;0x7ff0000000000000</emphasis>
415 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;static_simd_cast&lt;rebind_simd_t&lt;int,&#32;_Vp&gt;&gt;(
416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;simd_bit_cast&lt;rebind_simd_t&lt;_Up,&#32;_Vp&gt;&gt;(__v&#32;&amp;&#32;__exponent_mask)
417 &#32;&#32;&#32;&#32;&#32;&#32;&gt;&gt;&#32;(__digits_v&lt;_Tp&gt;&#32;-&#32;1));
418 &#32;&#32;}
419 
420 <emphasis role="comment">//&#32;}}}</emphasis>
421 <emphasis role="comment">//&#32;__impl_or_fallback&#32;{{{</emphasis>
422 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ImplFun,&#32;<emphasis role="keyword">typename</emphasis>&#32;FallbackFun,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
423 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">auto</emphasis>
424 &#32;&#32;__impl_or_fallback_dispatch(<emphasis role="keywordtype">int</emphasis>,&#32;ImplFun&amp;&amp;&#32;__impl_fun,&#32;FallbackFun&amp;&amp;,
425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Args&amp;&amp;...&#32;__args)
426 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(__impl_fun(<emphasis role="keyword">static_cast&lt;</emphasis>_Args&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__args)...))
427 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__impl_fun(<emphasis role="keyword">static_cast&lt;</emphasis>_Args&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__args)...);&#32;}
428 
429 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ImplFun,&#32;<emphasis role="keyword">typename</emphasis>&#32;FallbackFun,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args,
430 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;__detail::__odr_helper&gt;
431 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
432 &#32;&#32;__impl_or_fallback_dispatch(<emphasis role="keywordtype">float</emphasis>,&#32;ImplFun&amp;&amp;,&#32;FallbackFun&amp;&amp;&#32;__fallback_fun,
433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Args&amp;&amp;...&#32;__args)
434 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(__fallback_fun(<emphasis role="keyword">static_cast&lt;</emphasis>_Args&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__args)...))
435 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__fallback_fun(<emphasis role="keyword">static_cast&lt;</emphasis>_Args&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__args)...);&#32;}
436 
437 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
438 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">auto</emphasis>
439 &#32;&#32;__impl_or_fallback(_Args&amp;&amp;...&#32;__args)
440 &#32;&#32;{
441 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__impl_or_fallback_dispatch(<emphasis role="keywordtype">int</emphasis>(),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Args&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__args)...);
442 &#32;&#32;}
443 <emphasis role="comment">//}}}</emphasis>
444 
445 <emphasis role="comment">//&#32;trigonometric&#32;functions&#32;{{{</emphasis>
446 _GLIBCXX_SIMD_MATH_CALL_(<link linkend="__classes_2lib_2include_2tgmath_8h_1a6826a8b8db695e1c1cddea666254e56f">acos</link>)
447 _GLIBCXX_SIMD_MATH_CALL_(<link linkend="__classes_2lib_2include_2tgmath_8h_1aa2375efebaed504113d91f1822bafa38">asin</link>)
448 _GLIBCXX_SIMD_MATH_CALL_(<link linkend="__classes_2lib_2include_2tgmath_8h_1af59f8735da7eee127c6807d114e82a3a">atan</link>)
449 _GLIBCXX_SIMD_MATH_CALL2_(<link linkend="__classes_2lib_2include_2tgmath_8h_1a525d483aa59186e25ad8a1b5b8428536">atan2</link>,&#32;_Tp)
450 
451 <emphasis role="comment">/*</emphasis>
452 <emphasis role="comment">&#32;*&#32;algorithm&#32;for&#32;sine&#32;and&#32;cosine:</emphasis>
453 <emphasis role="comment">&#32;*</emphasis>
454 <emphasis role="comment">&#32;*&#32;The&#32;result&#32;can&#32;be&#32;calculated&#32;with&#32;sine&#32;or&#32;cosine&#32;depending&#32;on&#32;the&#32;π/4&#32;section</emphasis>
455 <emphasis role="comment">&#32;*&#32;the&#32;input&#32;is&#32;in.&#32;sine&#32;&#32;&#32;≈&#32;__x&#32;+&#32;__x³&#32;cosine&#32;≈&#32;1&#32;-&#32;__x²</emphasis>
456 <emphasis role="comment">&#32;*</emphasis>
457 <emphasis role="comment">&#32;*&#32;sine:</emphasis>
458 <emphasis role="comment">&#32;*&#32;Map&#32;-__x&#32;to&#32;__x&#32;and&#32;invert&#32;the&#32;output</emphasis>
459 <emphasis role="comment">&#32;*&#32;Extend&#32;precision&#32;of&#32;__x&#32;-&#32;n&#32;*&#32;π/4&#32;by&#32;calculating</emphasis>
460 <emphasis role="comment">&#32;*&#32;((__x&#32;-&#32;n&#32;*&#32;p1)&#32;-&#32;n&#32;*&#32;p2)&#32;-&#32;n&#32;*&#32;p3&#32;(p1&#32;+&#32;p2&#32;+&#32;p3&#32;=&#32;π/4)</emphasis>
461 <emphasis role="comment">&#32;*</emphasis>
462 <emphasis role="comment">&#32;*&#32;Calculate&#32;Taylor&#32;series&#32;with&#32;tuned&#32;coefficients.</emphasis>
463 <emphasis role="comment">&#32;*&#32;Fix&#32;sign.</emphasis>
464 <emphasis role="comment">&#32;*/</emphasis>
465 <emphasis role="comment">//&#32;cos{{{</emphasis>
466 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;__detail::__odr_helper&gt;
467 &#32;&#32;enable_if_t&lt;is_floating_point_v&lt;_Tp&gt;,&#32;simd&lt;_Tp,&#32;_Abi&gt;&gt;
468 &#32;&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1ad5430427f9814a92459a8880f4a11bd6">cos</link>(<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__x)
469 &#32;&#32;{
470 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_V&#32;=&#32;simd&lt;_Tp,&#32;_Abi&gt;;
471 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_scalar_abi&lt;_Abi&gt;()&#32;||&#32;__is_fixed_size_abi_v&lt;_Abi&gt;)
472 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;_Abi::_SimdImpl::_S_cos(__data(__x))};
473 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
474 &#32;&#32;&#32;&#32;&#32;&#32;{
475 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Tp,&#32;float&gt;)
476 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_GLIBCXX_SIMD_IS_UNLIKELY(<link linkend="_namespacestd_1a9dc98b4fd1f056dcea526d7b9b90ba7f">any_of</link>(<link linkend="_group__core__func__common_1ga439e60a72eadecfeda2df5449c613a64">abs</link>(__x)&#32;&gt;=&#32;393382)))
477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;static_simd_cast&lt;_V&gt;(
478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1ad5430427f9814a92459a8880f4a11bd6">cos</link>(static_simd_cast&lt;rebind_simd_t&lt;double,&#32;_V&gt;&gt;(__x)));
479 
480 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__f&#32;=&#32;__fold_input(__x);
481 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;quadrant&#32;|&#32;effect</emphasis>
482 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0&#32;|&#32;cosSeries,&#32;+</emphasis>
483 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1&#32;|&#32;sinSeries,&#32;-</emphasis>
484 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;2&#32;|&#32;cosSeries,&#32;-</emphasis>
485 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;3&#32;|&#32;sinSeries,&#32;+</emphasis>
486 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>std::experimental::__float_bitwise_operators;
487 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_V&#32;__sign_flip
488 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;_V(-0.f)&#32;&amp;&#32;static_simd_cast&lt;_V&gt;((1&#32;+&#32;__f._M_quadrant)&#32;&lt;&lt;&#32;30);
489 
490 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__need_cos&#32;=&#32;(__f._M_quadrant&#32;&amp;&#32;1)&#32;==&#32;0;
491 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_GLIBCXX_SIMD_IS_UNLIKELY(<link linkend="_namespacestd_1af69ea32ebd7865fb57714d6b5f12f26d">all_of</link>(__need_cos)))
492 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__sign_flip&#32;^&#32;__cosSeries(__f._M_x);
493 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_GLIBCXX_SIMD_IS_UNLIKELY(<link linkend="_namespacestd_1a9ed705e7dfee41b5d879e6e0450cbc6c">none_of</link>(__need_cos)))
494 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__sign_flip&#32;^&#32;__sinSeries(__f._M_x);
495 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;some_of(__need_cos)</emphasis>
496 &#32;&#32;&#32;&#32;&#32;&#32;{
497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_V&#32;__r&#32;=&#32;__sinSeries(__f._M_x);
498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;where(__need_cos.__cvt(),&#32;__r)&#32;=&#32;__cosSeries(__f._M_x);
499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r&#32;^&#32;__sign_flip;
500 &#32;&#32;&#32;&#32;&#32;&#32;}
501 &#32;&#32;&#32;&#32;&#32;&#32;}
502 &#32;&#32;}
503 
504 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
505 &#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE
506 &#32;&#32;enable_if_t&lt;is_floating_point&lt;_Tp&gt;::value,&#32;simd&lt;_Tp,&#32;simd_abi::scalar&gt;&gt;
507 &#32;&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1ad5430427f9814a92459a8880f4a11bd6">cos</link>(simd&lt;_Tp,&#32;simd_abi::scalar&gt;&#32;__x)
508 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::cos(__data(__x));&#32;}
509 
510 <emphasis role="comment">//}}}</emphasis>
511 <emphasis role="comment">//&#32;sin{{{</emphasis>
512 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;__detail::__odr_helper&gt;
513 &#32;&#32;enable_if_t&lt;is_floating_point_v&lt;_Tp&gt;,&#32;simd&lt;_Tp,&#32;_Abi&gt;&gt;
514 &#32;&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a428aa2da5120f109315e38b59ac2fbe7">sin</link>(<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__x)
515 &#32;&#32;{
516 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_V&#32;=&#32;simd&lt;_Tp,&#32;_Abi&gt;;
517 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_scalar_abi&lt;_Abi&gt;()&#32;||&#32;__is_fixed_size_abi_v&lt;_Abi&gt;)
518 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;_Abi::_SimdImpl::_S_sin(__data(__x))};
519 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
520 &#32;&#32;&#32;&#32;&#32;&#32;{
521 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Tp,&#32;float&gt;)
522 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_GLIBCXX_SIMD_IS_UNLIKELY(<link linkend="_namespacestd_1a9dc98b4fd1f056dcea526d7b9b90ba7f">any_of</link>(<link linkend="_group__core__func__common_1ga439e60a72eadecfeda2df5449c613a64">abs</link>(__x)&#32;&gt;=&#32;527449)))
523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;static_simd_cast&lt;_V&gt;(
524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a428aa2da5120f109315e38b59ac2fbe7">sin</link>(static_simd_cast&lt;rebind_simd_t&lt;double,&#32;_V&gt;&gt;(__x)));
525 
526 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__f&#32;=&#32;__fold_input(__x);
527 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;quadrant&#32;|&#32;effect</emphasis>
528 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0&#32;|&#32;sinSeries</emphasis>
529 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1&#32;|&#32;cosSeries</emphasis>
530 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;2&#32;|&#32;sinSeries,&#32;sign&#32;flip</emphasis>
531 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;3&#32;|&#32;cosSeries,&#32;sign&#32;flip</emphasis>
532 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>std::experimental::__float_bitwise_operators;
533 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__sign_flip
534 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;(__x&#32;^&#32;static_simd_cast&lt;_V&gt;(1&#32;-&#32;__f._M_quadrant))&#32;&amp;&#32;_V(_Tp(-0.));
535 
536 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__need_sin&#32;=&#32;(__f._M_quadrant&#32;&amp;&#32;1)&#32;==&#32;0;
537 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_GLIBCXX_SIMD_IS_UNLIKELY(<link linkend="_namespacestd_1af69ea32ebd7865fb57714d6b5f12f26d">all_of</link>(__need_sin)))
538 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__sign_flip&#32;^&#32;__sinSeries(__f._M_x);
539 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_GLIBCXX_SIMD_IS_UNLIKELY(<link linkend="_namespacestd_1a9ed705e7dfee41b5d879e6e0450cbc6c">none_of</link>(__need_sin)))
540 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__sign_flip&#32;^&#32;__cosSeries(__f._M_x);
541 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;some_of(__need_sin)</emphasis>
542 &#32;&#32;&#32;&#32;&#32;&#32;{
543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_V&#32;__r&#32;=&#32;__cosSeries(__f._M_x);
544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;where(__need_sin.__cvt(),&#32;__r)&#32;=&#32;__sinSeries(__f._M_x);
545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__sign_flip&#32;^&#32;__r;
546 &#32;&#32;&#32;&#32;&#32;&#32;}
547 &#32;&#32;&#32;&#32;&#32;&#32;}
548 &#32;&#32;}
549 
550 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
551 &#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE
552 &#32;&#32;enable_if_t&lt;is_floating_point&lt;_Tp&gt;::value,&#32;simd&lt;_Tp,&#32;simd_abi::scalar&gt;&gt;
553 &#32;&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a428aa2da5120f109315e38b59ac2fbe7">sin</link>(simd&lt;_Tp,&#32;simd_abi::scalar&gt;&#32;__x)
554 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::sin(__data(__x));&#32;}
555 
556 <emphasis role="comment">//}}}</emphasis>
557 _GLIBCXX_SIMD_MATH_CALL_(<link linkend="__classes_2lib_2include_2tgmath_8h_1a58fbdc949853bd2d1f0a8dbf9f89fe32">tan</link>)
558 _GLIBCXX_SIMD_MATH_CALL_(<link linkend="__classes_2lib_2include_2tgmath_8h_1a9f39bf49b902489c4e2a12973645c325">acosh</link>)
559 _GLIBCXX_SIMD_MATH_CALL_(<link linkend="__classes_2lib_2include_2tgmath_8h_1a043f706d7beb6980b1b5ca2bcb665475">asinh</link>)
560 _GLIBCXX_SIMD_MATH_CALL_(<link linkend="__classes_2lib_2include_2tgmath_8h_1a4cc4b9783a42af3a24583515a7ac0c1d">atanh</link>)
561 _GLIBCXX_SIMD_MATH_CALL_(<link linkend="__classes_2lib_2include_2tgmath_8h_1ac2ac5e2dccf59bf3393c5e24b168f3c6">cosh</link>)
562 _GLIBCXX_SIMD_MATH_CALL_(<link linkend="__classes_2lib_2include_2tgmath_8h_1a2579de64a076b1183bbf48cbed658d12">sinh</link>)
563 _GLIBCXX_SIMD_MATH_CALL_(<link linkend="__classes_2lib_2include_2tgmath_8h_1a4a926ffaf78a83aca2ae45be46fa7571">tanh</link>)
564 <emphasis role="comment">//&#32;}}}</emphasis>
565 <emphasis role="comment">//&#32;exponential&#32;functions&#32;{{{</emphasis>
566 _GLIBCXX_SIMD_MATH_CALL_(<link linkend="__classes_2lib_2include_2tgmath_8h_1a15078bfb380de3cfbb83117d459a475b">exp</link>)
567 _GLIBCXX_SIMD_MATH_CALL_(<link linkend="__classes_2lib_2include_2tgmath_8h_1a81df8f8ac36a83137eb6e6451c55f1ab">exp2</link>)
568 _GLIBCXX_SIMD_MATH_CALL_(<link linkend="__classes_2lib_2include_2tgmath_8h_1aaefafe3f57183bef8acd2b49c680ea12">expm1</link>)
569 
570 <emphasis role="comment">//&#32;}}}</emphasis>
571 <emphasis role="comment">//&#32;frexp&#32;{{{</emphasis>
572 <emphasis role="preprocessor">#if&#32;_GLIBCXX_SIMD_X86INTRIN</emphasis>
573 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
574 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC
575 &#32;&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
576 &#32;&#32;__getexp(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x)
577 &#32;&#32;{
578 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512vl&#32;&amp;&amp;&#32;__is_sse_ps&lt;_Tp,&#32;_Np&gt;())
579 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__auto_bitcast(_mm_getexp_ps(__to_intrin(__x)));
580 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f&#32;&amp;&amp;&#32;__is_sse_ps&lt;_Tp,&#32;_Np&gt;())
581 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__auto_bitcast(<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a6a91b8a7b0c6c97d22586b769e65f943">_mm512_getexp_ps</link>(__auto_bitcast(__to_intrin(__x))));
582 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512vl&#32;&amp;&amp;&#32;__is_sse_pd&lt;_Tp,&#32;_Np&gt;())
583 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_getexp_pd(__x);
584 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f&#32;&amp;&amp;&#32;__is_sse_pd&lt;_Tp,&#32;_Np&gt;())
585 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lo128(<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a22f54aea4bac7e79bdc72db95178d0e8">_mm512_getexp_pd</link>(__auto_bitcast(__x)));
586 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512vl&#32;&amp;&amp;&#32;__is_avx_ps&lt;_Tp,&#32;_Np&gt;())
587 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_getexp_ps(__x);
588 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f&#32;&amp;&amp;&#32;__is_avx_ps&lt;_Tp,&#32;_Np&gt;())
589 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lo256(<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a6a91b8a7b0c6c97d22586b769e65f943">_mm512_getexp_ps</link>(__auto_bitcast(__x)));
590 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512vl&#32;&amp;&amp;&#32;__is_avx_pd&lt;_Tp,&#32;_Np&gt;())
591 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_getexp_pd(__x);
592 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f&#32;&amp;&amp;&#32;__is_avx_pd&lt;_Tp,&#32;_Np&gt;())
593 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lo256(<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a22f54aea4bac7e79bdc72db95178d0e8">_mm512_getexp_pd</link>(__auto_bitcast(__x)));
594 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_ps&lt;_Tp,&#32;_Np&gt;())
595 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a6a91b8a7b0c6c97d22586b769e65f943">_mm512_getexp_ps</link>(__x);
596 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_pd&lt;_Tp,&#32;_Np&gt;())
597 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a22f54aea4bac7e79bdc72db95178d0e8">_mm512_getexp_pd</link>(__x);
598 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
599 &#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
600 &#32;&#32;}
601 
602 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
603 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC
604 &#32;&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
605 &#32;&#32;__getmant_avx512(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x)
606 &#32;&#32;{
607 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512vl&#32;&amp;&amp;&#32;__is_sse_ps&lt;_Tp,&#32;_Np&gt;())
608 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__auto_bitcast(<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1aa26b0df3d9948e2d7cb252ed9cd86a3c">_mm_getmant_ps</link>(__to_intrin(__x),&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a5b0ce3981006f958eeba456df42ded39a6cbecf6d8d28b92865a0a6084d0e3358">_MM_MANT_NORM_p5_1</link>,
609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1aa3376c5bdb1892cfcc2e349d077b0272abc14c9c9ce683ed07220415fde6e085e">_MM_MANT_SIGN_src</link>));
610 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f&#32;&amp;&amp;&#32;__is_sse_ps&lt;_Tp,&#32;_Np&gt;())
611 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__auto_bitcast(<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a65ccfb6253cce75d948ae42beb4e31d1">_mm512_getmant_ps</link>(__auto_bitcast(__to_intrin(__x)),
612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a5b0ce3981006f958eeba456df42ded39a6cbecf6d8d28b92865a0a6084d0e3358">_MM_MANT_NORM_p5_1</link>,
613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1aa3376c5bdb1892cfcc2e349d077b0272abc14c9c9ce683ed07220415fde6e085e">_MM_MANT_SIGN_src</link>));
614 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512vl&#32;&amp;&amp;&#32;__is_sse_pd&lt;_Tp,&#32;_Np&gt;())
615 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1a84b185de8e4eb7687abb1a8cc56a0d33">_mm_getmant_pd</link>(__x,&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a5b0ce3981006f958eeba456df42ded39a6cbecf6d8d28b92865a0a6084d0e3358">_MM_MANT_NORM_p5_1</link>,&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1aa3376c5bdb1892cfcc2e349d077b0272abc14c9c9ce683ed07220415fde6e085e">_MM_MANT_SIGN_src</link>);
616 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f&#32;&amp;&amp;&#32;__is_sse_pd&lt;_Tp,&#32;_Np&gt;())
617 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lo128(<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a19eb368ba3771d15e399b1c3bc3322bd">_mm512_getmant_pd</link>(__auto_bitcast(__x),&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a5b0ce3981006f958eeba456df42ded39a6cbecf6d8d28b92865a0a6084d0e3358">_MM_MANT_NORM_p5_1</link>,
618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1aa3376c5bdb1892cfcc2e349d077b0272abc14c9c9ce683ed07220415fde6e085e">_MM_MANT_SIGN_src</link>));
619 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512vl&#32;&amp;&amp;&#32;__is_avx_ps&lt;_Tp,&#32;_Np&gt;())
620 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1a12c9fed0f2fd3fe18ec2e286157f2f2a">_mm256_getmant_ps</link>(__x,&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a5b0ce3981006f958eeba456df42ded39a6cbecf6d8d28b92865a0a6084d0e3358">_MM_MANT_NORM_p5_1</link>,&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1aa3376c5bdb1892cfcc2e349d077b0272abc14c9c9ce683ed07220415fde6e085e">_MM_MANT_SIGN_src</link>);
621 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f&#32;&amp;&amp;&#32;__is_avx_ps&lt;_Tp,&#32;_Np&gt;())
622 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lo256(<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a65ccfb6253cce75d948ae42beb4e31d1">_mm512_getmant_ps</link>(__auto_bitcast(__x),&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a5b0ce3981006f958eeba456df42ded39a6cbecf6d8d28b92865a0a6084d0e3358">_MM_MANT_NORM_p5_1</link>,
623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1aa3376c5bdb1892cfcc2e349d077b0272abc14c9c9ce683ed07220415fde6e085e">_MM_MANT_SIGN_src</link>));
624 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512vl&#32;&amp;&amp;&#32;__is_avx_pd&lt;_Tp,&#32;_Np&gt;())
625 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1a1c858dc4c9cfab7406966ce4dd1440de">_mm256_getmant_pd</link>(__x,&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a5b0ce3981006f958eeba456df42ded39a6cbecf6d8d28b92865a0a6084d0e3358">_MM_MANT_NORM_p5_1</link>,&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1aa3376c5bdb1892cfcc2e349d077b0272abc14c9c9ce683ed07220415fde6e085e">_MM_MANT_SIGN_src</link>);
626 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f&#32;&amp;&amp;&#32;__is_avx_pd&lt;_Tp,&#32;_Np&gt;())
627 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lo256(<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a19eb368ba3771d15e399b1c3bc3322bd">_mm512_getmant_pd</link>(__auto_bitcast(__x),&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a5b0ce3981006f958eeba456df42ded39a6cbecf6d8d28b92865a0a6084d0e3358">_MM_MANT_NORM_p5_1</link>,
628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1aa3376c5bdb1892cfcc2e349d077b0272abc14c9c9ce683ed07220415fde6e085e">_MM_MANT_SIGN_src</link>));
629 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_ps&lt;_Tp,&#32;_Np&gt;())
630 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a65ccfb6253cce75d948ae42beb4e31d1">_mm512_getmant_ps</link>(__x,&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a5b0ce3981006f958eeba456df42ded39a6cbecf6d8d28b92865a0a6084d0e3358">_MM_MANT_NORM_p5_1</link>,&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1aa3376c5bdb1892cfcc2e349d077b0272abc14c9c9ce683ed07220415fde6e085e">_MM_MANT_SIGN_src</link>);
631 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_pd&lt;_Tp,&#32;_Np&gt;())
632 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a19eb368ba3771d15e399b1c3bc3322bd">_mm512_getmant_pd</link>(__x,&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a5b0ce3981006f958eeba456df42ded39a6cbecf6d8d28b92865a0a6084d0e3358">_MM_MANT_NORM_p5_1</link>,&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1aa3376c5bdb1892cfcc2e349d077b0272abc14c9c9ce683ed07220415fde6e085e">_MM_MANT_SIGN_src</link>);
633 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
634 &#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
635 &#32;&#32;}
636 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_SIMD_X86INTRIN</emphasis>
637 
644 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;__detail::__odr_helper&gt;
645 &#32;&#32;enable_if_t&lt;is_floating_point_v&lt;_Tp&gt;,&#32;simd&lt;_Tp,&#32;_Abi&gt;&gt;
646 &#32;&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a1a63fc454f1959d87924b7cbec3a65e5">frexp</link>(<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__x,&#32;_Samesize&lt;<emphasis role="keywordtype">int</emphasis>,&#32;simd&lt;_Tp,&#32;_Abi&gt;&gt;*&#32;__exp)
647 &#32;&#32;{
648 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(simd_size_v&lt;_Tp,&#32;_Abi&gt;&#32;==&#32;1)
649 &#32;&#32;&#32;&#32;&#32;&#32;{
650 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
651 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__r&#32;=&#32;std::frexp(__x[0],&#32;&amp;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
652 &#32;&#32;&#32;&#32;(*__exp)[0]&#32;=&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
653 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
654 &#32;&#32;&#32;&#32;&#32;&#32;}
655 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_fixed_size_abi_v&lt;_Abi&gt;)
656 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;_Abi::_SimdImpl::_S_frexp(__data(__x),&#32;__data(*__exp))};
657 <emphasis role="preprocessor">#if&#32;_GLIBCXX_SIMD_X86INTRIN</emphasis>
658 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f)
659 &#32;&#32;&#32;&#32;&#32;&#32;{
660 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&#32;=&#32;simd_size_v&lt;_Tp,&#32;_Abi&gt;;
661 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_NI&#32;=&#32;_Np&#32;&lt;&#32;4&#32;?&#32;4&#32;:&#32;_Np;
662 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__v&#32;=&#32;__data(__x);
663 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__isnonzero
664 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;_Abi::_SimdImpl::_S_isnonzerovalue_mask(__v._M_data);
665 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;int,&#32;_NI&gt;&#32;__exp_plus1
666 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;1&#32;+&#32;__convert&lt;_SimdWrapper&lt;int,&#32;_NI&gt;&gt;(__getexp(__v))._M_data;
667 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;int,&#32;_Np&gt;&#32;__e&#32;=&#32;__wrapper_bitcast&lt;int,&#32;_Np&gt;(
668 &#32;&#32;&#32;&#32;&#32;&#32;_Abi::_CommonImpl::_S_blend(_SimdWrapper&lt;bool,&#32;_NI&gt;(__isnonzero),
669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdWrapper&lt;int,&#32;_NI&gt;(),&#32;__exp_plus1));
670 &#32;&#32;&#32;&#32;simd_abi::deduce_t&lt;int,&#32;_Np&gt;::_CommonImpl::_S_store(__e,&#32;__exp);
671 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,
672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Abi::_CommonImpl::_S_blend(_SimdWrapper&lt;bool,&#32;_Np&gt;(
673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__isnonzero),
674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__v,&#32;__getmant_avx512(__v))};
675 &#32;&#32;&#32;&#32;&#32;&#32;}
676 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_SIMD_X86INTRIN</emphasis>
677 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
678 &#32;&#32;&#32;&#32;&#32;&#32;{
679 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;fallback&#32;implementation</emphasis>
680 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4&#32;||&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8);
681 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_V&#32;=&#32;simd&lt;_Tp,&#32;_Abi&gt;;
682 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_IV&#32;=&#32;rebind_simd_t&lt;int,&#32;_V&gt;;
683 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>std::experimental::__proposed;
684 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>std::experimental::__float_bitwise_operators;
685 
686 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__exp_adjust&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4&#32;?&#32;0x7e&#32;:&#32;0x3fe;
687 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__exp_offset&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4&#32;?&#32;0x70&#32;:&#32;0x200;
688 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&#32;__subnorm_scale&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4&#32;?&#32;0x1p112&#32;:&#32;0x1p512;
689 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_USE_CONSTEXPR_API&#32;_V&#32;__exponent_mask
690 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__infinity_v&lt;_Tp&gt;;&#32;<emphasis role="comment">//&#32;0x7f800000&#32;or&#32;0x7ff0000000000000</emphasis>
691 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_USE_CONSTEXPR_API&#32;_V&#32;__p5_1_exponent
692 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;-(2&#32;-&#32;__epsilon_v&lt;_Tp&gt;)&#32;/&#32;2;&#32;<emphasis role="comment">//&#32;0xbf7fffff&#32;or&#32;0xbfefffffffffffff</emphasis>
693 
694 &#32;&#32;&#32;&#32;_V&#32;__mant&#32;=&#32;__p5_1_exponent&#32;&amp;&#32;(__exponent_mask&#32;|&#32;__x);&#32;<emphasis role="comment">//&#32;+/-[.5,&#32;1)</emphasis>
695 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_IV&#32;__exponent_bits&#32;=&#32;__extract_exponent_as_int(__x);
696 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_GLIBCXX_SIMD_IS_LIKELY(<link linkend="_namespacestd_1af69ea32ebd7865fb57714d6b5f12f26d">all_of</link>(isnormal(__x))))
697 &#32;&#32;&#32;&#32;&#32;&#32;{
698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__exp
699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;simd_cast&lt;_Samesize&lt;int,&#32;_V&gt;&gt;(__exponent_bits&#32;-&#32;__exp_adjust);
700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__mant;
701 &#32;&#32;&#32;&#32;&#32;&#32;}
702 
703 <emphasis role="preprocessor">#if&#32;__FINITE_MATH_ONLY__</emphasis>
704 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;at&#32;least&#32;one&#32;element&#32;of&#32;__x&#32;is&#32;0&#32;or&#32;subnormal,&#32;the&#32;rest&#32;is&#32;normal</emphasis>
705 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(inf&#32;and&#32;NaN&#32;are&#32;excluded&#32;by&#32;-ffinite-math-only)</emphasis>
706 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__iszero_inf_nan&#32;=&#32;__x&#32;==&#32;0;
707 <emphasis role="preprocessor">#else</emphasis>
708 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Ip&#32;=&#32;__int_for_sizeof_t&lt;_Tp&gt;;
709 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__as_int&#32;=&#32;simd_bit_cast&lt;rebind_simd_t&lt;_Ip,&#32;_V&gt;&gt;(<link linkend="_group__core__func__common_1ga439e60a72eadecfeda2df5449c613a64">abs</link>(__x));
710 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__inf&#32;=&#32;simd_bit_cast&lt;rebind_simd_t&lt;_Ip,&#32;_V&gt;&gt;(_V(__infinity_v&lt;_Tp&gt;));
711 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__iszero_inf_nan&#32;=&#32;static_simd_cast&lt;typename&#32;_V::mask_type&gt;(
712 &#32;&#32;&#32;&#32;&#32;&#32;__as_int&#32;==&#32;0&#32;||&#32;__as_int&#32;&gt;=&#32;__inf);
713 <emphasis role="preprocessor">#endif</emphasis>
714 
715 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_V&#32;__scaled_subnormal&#32;=&#32;__x&#32;*&#32;__subnorm_scale;
716 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_V&#32;__mant_subnormal
717 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__p5_1_exponent&#32;&amp;&#32;(__exponent_mask&#32;|&#32;__scaled_subnormal);
718 &#32;&#32;&#32;&#32;where(!isnormal(__x),&#32;__mant)&#32;=&#32;__mant_subnormal;
719 &#32;&#32;&#32;&#32;where(__iszero_inf_nan,&#32;__mant)&#32;=&#32;__x;
720 &#32;&#32;&#32;&#32;_IV&#32;__e&#32;=&#32;__extract_exponent_as_int(__scaled_subnormal);
721 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_MaskType&#32;=
722 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;conditional_t&lt;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keyword">typename</emphasis>&#32;_V::value_type)&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">int</emphasis>),
723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_V,&#32;_IV&gt;::mask_type;
724 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_MaskType&#32;__value_isnormal&#32;=&#32;isnormal(__x).__cvt();
725 &#32;&#32;&#32;&#32;where(__value_isnormal.__cvt(),&#32;__e)&#32;=&#32;__exponent_bits;
726 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(_IV)&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(__value_isnormal));
727 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_IV&#32;__offset
728 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;(simd_bit_cast&lt;_IV&gt;(__value_isnormal)&#32;&amp;&#32;_IV(__exp_adjust))
729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(simd_bit_cast&lt;_IV&gt;(static_simd_cast&lt;_MaskType&gt;(__exponent_bits&#32;==&#32;0)
730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&#32;static_simd_cast&lt;_MaskType&gt;(__x&#32;!=&#32;0))
731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&#32;_IV(__exp_adjust&#32;+&#32;__exp_offset));
732 &#32;&#32;&#32;&#32;*__exp&#32;=&#32;simd_cast&lt;_Samesize&lt;int,&#32;_V&gt;&gt;(__e&#32;-&#32;__offset);
733 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__mant;
734 &#32;&#32;&#32;&#32;&#32;&#32;}
735 &#32;&#32;}
736 
737 <emphasis role="comment">//&#32;}}}</emphasis>
738 _GLIBCXX_SIMD_MATH_CALL2_(<link linkend="__classes_2lib_2include_2tgmath_8h_1ac39e838c245bd16537685b14924d7a6d">ldexp</link>,&#32;<emphasis role="keywordtype">int</emphasis>)
739 _GLIBCXX_SIMD_MATH_CALL_(<link linkend="__classes_2lib_2include_2tgmath_8h_1a56d9ee07e4d286eb2faac2e2336a0dce">ilogb</link>)
740 
741 <emphasis role="comment">//&#32;logarithms&#32;{{{</emphasis>
742 _GLIBCXX_SIMD_MATH_CALL_(<link linkend="__classes_2lib_2include_2tgmath_8h_1a25a8d722e743f3a219e5f0bf0bb867c7">log</link>)
743 _GLIBCXX_SIMD_MATH_CALL_(<link linkend="__classes_2lib_2include_2tgmath_8h_1af26c25cec2b892904654e4068b199882">log10</link>)
744 _GLIBCXX_SIMD_MATH_CALL_(<link linkend="__classes_2lib_2include_2tgmath_8h_1aef0f23babcbccbb1e66cd549a64f72c9">log1p</link>)
745 _GLIBCXX_SIMD_MATH_CALL_(<link linkend="__classes_2lib_2include_2tgmath_8h_1a18af743c2cec4baeee9ffb27999ddaad">log2</link>)
746 
747 <emphasis role="comment">//}}}</emphasis>
748 <emphasis role="comment">//&#32;logb{{{</emphasis>
749 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;__detail::__odr_helper&gt;
750 &#32;&#32;enable_if_t&lt;is_floating_point&lt;_Tp&gt;::value,&#32;simd&lt;_Tp,&#32;_Abi&gt;&gt;
751 &#32;&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a438bad4f46b608b173f382b5bc36edae">logb</link>(<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__x)
752 &#32;&#32;{
753 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&#32;=&#32;simd_size_v&lt;_Tp,&#32;_Abi&gt;;
754 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;==&#32;1)
755 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::logb(__x[0]);
756 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_fixed_size_abi_v&lt;_Abi&gt;)
757 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;_Abi::_SimdImpl::_S_logb(__data(__x))};
758 <emphasis role="preprocessor">#if&#32;_GLIBCXX_SIMD_X86INTRIN&#32;</emphasis><emphasis role="comment">//&#32;{{{</emphasis>
759 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512vl&#32;&amp;&amp;&#32;__is_sse_ps&lt;_Tp,&#32;_Np&gt;())
760 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,
761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__auto_bitcast(_mm_getexp_ps(__to_intrin(__as_vector(__x))))};
762 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512vl&#32;&amp;&amp;&#32;__is_sse_pd&lt;_Tp,&#32;_Np&gt;())
763 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;_mm_getexp_pd(__data(__x))};
764 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512vl&#32;&amp;&amp;&#32;__is_avx_ps&lt;_Tp,&#32;_Np&gt;())
765 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;_mm256_getexp_ps(__data(__x))};
766 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512vl&#32;&amp;&amp;&#32;__is_avx_pd&lt;_Tp,&#32;_Np&gt;())
767 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;_mm256_getexp_pd(__data(__x))};
768 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f&#32;&amp;&amp;&#32;__is_avx_ps&lt;_Tp,&#32;_Np&gt;())
769 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,
770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lo256(<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a6a91b8a7b0c6c97d22586b769e65f943">_mm512_getexp_ps</link>(__auto_bitcast(__data(__x))))};
771 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f&#32;&amp;&amp;&#32;__is_avx_pd&lt;_Tp,&#32;_Np&gt;())
772 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,
773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lo256(<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a22f54aea4bac7e79bdc72db95178d0e8">_mm512_getexp_pd</link>(__auto_bitcast(__data(__x))))};
774 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_ps&lt;_Tp,&#32;_Np&gt;())
775 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a6a91b8a7b0c6c97d22586b769e65f943">_mm512_getexp_ps</link>(__data(__x))};
776 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_pd&lt;_Tp,&#32;_Np&gt;())
777 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a22f54aea4bac7e79bdc72db95178d0e8">_mm512_getexp_pd</link>(__data(__x))};
778 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_SIMD_X86INTRIN&#32;}}}</emphasis>
779 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
780 &#32;&#32;&#32;&#32;&#32;&#32;{
781 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_V&#32;=&#32;simd&lt;_Tp,&#32;_Abi&gt;;
782 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>std::experimental::__proposed;
783 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__is_normal&#32;=&#32;isnormal(__x);
784 
785 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;work&#32;on&#32;abs(__x)&#32;to&#32;reflect&#32;the&#32;return&#32;value&#32;on&#32;Linux&#32;for&#32;negative</emphasis>
786 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;inputs&#32;(domain-error&#32;=&gt;&#32;implementation-defined&#32;value&#32;is&#32;returned)</emphasis>
787 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_V&#32;abs_x&#32;=&#32;<link linkend="_group__core__func__common_1ga439e60a72eadecfeda2df5449c613a64">abs</link>(__x);
788 
789 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__exponent(__x)&#32;returns&#32;the&#32;exponent&#32;value&#32;(bias&#32;removed)&#32;as</emphasis>
790 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;simd&lt;_Up&gt;&#32;with&#32;integral&#32;_Up</emphasis>
791 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;__exponent&#32;=&#32;[](<emphasis role="keyword">const</emphasis>&#32;_V&amp;&#32;__v)&#32;{
792 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>std::experimental::__proposed;
793 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_IV&#32;=&#32;rebind_simd_t&lt;
794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;conditional_t&lt;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(_LLong),&#32;_LLong,&#32;<emphasis role="keywordtype">int</emphasis>&gt;,&#32;_V&gt;;
795 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(simd_bit_cast&lt;_IV&gt;(__v)&#32;&gt;&gt;&#32;(__digits_v&lt;_Tp&gt;&#32;-&#32;1))
796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;(__max_exponent_v&lt;_Tp&gt;&#32;-&#32;1);
797 &#32;&#32;&#32;&#32;};
798 &#32;&#32;&#32;&#32;_V&#32;__r&#32;=&#32;static_simd_cast&lt;_V&gt;(__exponent(abs_x));
799 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_GLIBCXX_SIMD_IS_LIKELY(<link linkend="_namespacestd_1af69ea32ebd7865fb57714d6b5f12f26d">all_of</link>(__is_normal)))
800 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;without&#32;corner&#32;cases&#32;(nan,&#32;inf,&#32;subnormal,&#32;zero)&#32;we&#32;have&#32;our</emphasis>
801 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;answer:</emphasis>
802 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
803 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__is_zero&#32;=&#32;__x&#32;==&#32;0;
804 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__is_nan&#32;=&#32;<link linkend="_group__core__func__common_1ga81f85e3c56f1f559034422b357c37e21">isnan</link>(__x);
805 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__is_inf&#32;=&#32;<link linkend="_group__core__func__common_1ga6dfda49bcedffb43ffe5d85307d732fa">isinf</link>(__x);
806 &#32;&#32;&#32;&#32;where(__is_zero,&#32;__r)&#32;=&#32;-__infinity_v&lt;_Tp&gt;;
807 &#32;&#32;&#32;&#32;where(__is_nan,&#32;__r)&#32;=&#32;__x;
808 &#32;&#32;&#32;&#32;where(__is_inf,&#32;__r)&#32;=&#32;__infinity_v&lt;_Tp&gt;;
809 &#32;&#32;&#32;&#32;__is_normal&#32;|=&#32;__is_zero&#32;||&#32;__is_nan&#32;||&#32;__is_inf;
810 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_namespacestd_1af69ea32ebd7865fb57714d6b5f12f26d">all_of</link>(__is_normal))
811 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;at&#32;this&#32;point&#32;everything&#32;but&#32;subnormals&#32;is&#32;handled</emphasis>
812 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
813 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;subnormals&#32;repeat&#32;the&#32;exponent&#32;extraction&#32;after&#32;multiplication&#32;of&#32;the</emphasis>
814 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;input&#32;with&#32;__a&#32;floating&#32;point&#32;value&#32;that&#32;has&#32;112&#32;(0x70)&#32;in&#32;its&#32;exponent</emphasis>
815 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(not&#32;too&#32;big&#32;for&#32;sp&#32;and&#32;large&#32;enough&#32;for&#32;dp)</emphasis>
816 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_V&#32;__scaled&#32;=&#32;abs_x&#32;*&#32;_Tp(0x1p112);
817 &#32;&#32;&#32;&#32;_V&#32;__scaled_exp&#32;=&#32;static_simd_cast&lt;_V&gt;(__exponent(__scaled)&#32;-&#32;112);
818 &#32;&#32;&#32;&#32;where(__is_normal,&#32;__scaled_exp)&#32;=&#32;__r;
819 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__scaled_exp;
820 &#32;&#32;&#32;&#32;&#32;&#32;}
821 &#32;&#32;}
822 
823 <emphasis role="comment">//}}}</emphasis>
824 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;__detail::__odr_helper&gt;
825 &#32;&#32;enable_if_t&lt;is_floating_point_v&lt;_Tp&gt;,&#32;simd&lt;_Tp,&#32;_Abi&gt;&gt;
826 &#32;&#32;<link linkend="_group__core__func__common_1ga85e33f139b8db1b39b590a5713b9e679">modf</link>(<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__x,&#32;simd&lt;_Tp,&#32;_Abi&gt;*&#32;__iptr)
827 &#32;&#32;{
828 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(simd_size_v&lt;_Tp,&#32;_Abi&gt;&#32;==&#32;1)
829 &#32;&#32;&#32;&#32;&#32;&#32;{
830 &#32;&#32;&#32;&#32;_Tp&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
831 &#32;&#32;&#32;&#32;_Tp&#32;__r&#32;=&#32;std::modf(__x[0],&#32;&amp;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
832 &#32;&#32;&#32;&#32;__iptr[0]&#32;=&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
833 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
834 &#32;&#32;&#32;&#32;&#32;&#32;}
835 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
836 &#32;&#32;&#32;&#32;&#32;&#32;{
837 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__integral&#32;=&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a1bf4c48c09dda9ec4a0b1b4aa8cd8920">trunc</link>(__x);
838 &#32;&#32;&#32;&#32;*__iptr&#32;=&#32;__integral;
839 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__r&#32;=&#32;__x&#32;-&#32;__integral;
840 <emphasis role="preprocessor">#if&#32;!__FINITE_MATH_ONLY__</emphasis>
841 &#32;&#32;&#32;&#32;where(<link linkend="_group__core__func__common_1ga6dfda49bcedffb43ffe5d85307d732fa">isinf</link>(__x),&#32;__r)&#32;=&#32;_Tp();
842 <emphasis role="preprocessor">#endif</emphasis>
843 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1ae1df9e2567ff4293e3b52172f5f16d9b">copysign</link>(__r,&#32;__x);
844 &#32;&#32;&#32;&#32;&#32;&#32;}
845 &#32;&#32;}
846 
847 _GLIBCXX_SIMD_MATH_CALL2_(<link linkend="__classes_2lib_2include_2tgmath_8h_1ab9cb73896372f1d851b1dd69abed17ae">scalbn</link>,&#32;<emphasis role="keywordtype">int</emphasis>)
848 _GLIBCXX_SIMD_MATH_CALL2_(<link linkend="__classes_2lib_2include_2tgmath_8h_1a17d09c2fa2ec2c6ae91caf76e5d0a8c9">scalbln</link>,&#32;<emphasis role="keywordtype">long</emphasis>)
849 
850 _GLIBCXX_SIMD_MATH_CALL_(<link linkend="__classes_2lib_2include_2tgmath_8h_1ab95ebf7d48afa4fe99e6f59163a6ddbb">cbrt</link>)
851 
852 _GLIBCXX_SIMD_MATH_CALL_(abs)
853 _GLIBCXX_SIMD_MATH_CALL_(<link linkend="__classes_2lib_2include_2tgmath_8h_1a4c7267c07bf08c667c579af6a9e73db5">fabs</link>)
854 
855 <emphasis role="comment">//&#32;[parallel.simd.math]&#32;only&#32;asks&#32;for&#32;is_floating_point_v&lt;_Tp&gt;&#32;and&#32;forgot&#32;to</emphasis>
856 <emphasis role="comment">//&#32;allow&#32;signed&#32;integral&#32;_Tp</emphasis>
857 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
858 &#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE
859 &#32;&#32;enable_if_t&lt;!is_floating_point_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_signed_v&lt;_Tp&gt;,&#32;simd&lt;_Tp,&#32;_Abi&gt;&gt;
860 &#32;&#32;<link linkend="_group__core__func__common_1ga439e60a72eadecfeda2df5449c613a64">abs</link>(<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__x)
861 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;_Abi::_SimdImpl::_S_abs(__data(__x))};&#32;}
862 
863 <emphasis role="preprocessor">#define&#32;_GLIBCXX_SIMD_CVTING2(_NAME)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
864 <emphasis role="preprocessor">template&#32;&lt;typename&#32;_Tp,&#32;typename&#32;_Abi&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
865 <emphasis role="preprocessor">&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;simd&lt;_Tp,&#32;_Abi&gt;&#32;_NAME(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
866 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;const&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__x,&#32;const&#32;__type_identity_t&lt;simd&lt;_Tp,&#32;_Abi&gt;&gt;&amp;&#32;__y)&#32;\</emphasis>
867 <emphasis role="preprocessor">&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
868 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;return&#32;_NAME(__x,&#32;__y);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
869 <emphasis role="preprocessor">&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
870 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
871 <emphasis role="preprocessor">template&#32;&lt;typename&#32;_Tp,&#32;typename&#32;_Abi&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
872 <emphasis role="preprocessor">&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;simd&lt;_Tp,&#32;_Abi&gt;&#32;_NAME(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
873 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;const&#32;__type_identity_t&lt;simd&lt;_Tp,&#32;_Abi&gt;&gt;&amp;&#32;__x,&#32;const&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__y)&#32;\</emphasis>
874 <emphasis role="preprocessor">&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
875 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;return&#32;_NAME(__x,&#32;__y);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
876 <emphasis role="preprocessor">&#32;&#32;}</emphasis>
877 
878 <emphasis role="preprocessor">#define&#32;_GLIBCXX_SIMD_CVTING3(_NAME)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
879 <emphasis role="preprocessor">template&#32;&lt;typename&#32;_Tp,&#32;typename&#32;_Abi&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
880 <emphasis role="preprocessor">&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;simd&lt;_Tp,&#32;_Abi&gt;&#32;_NAME(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
881 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;const&#32;__type_identity_t&lt;simd&lt;_Tp,&#32;_Abi&gt;&gt;&amp;&#32;__x,&#32;const&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__y,&#32;\</emphasis>
882 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;const&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__z)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
883 <emphasis role="preprocessor">&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
884 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;return&#32;_NAME(__x,&#32;__y,&#32;__z);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
885 <emphasis role="preprocessor">&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
886 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
887 <emphasis role="preprocessor">template&#32;&lt;typename&#32;_Tp,&#32;typename&#32;_Abi&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
888 <emphasis role="preprocessor">&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;simd&lt;_Tp,&#32;_Abi&gt;&#32;_NAME(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
889 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;const&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__x,&#32;const&#32;__type_identity_t&lt;simd&lt;_Tp,&#32;_Abi&gt;&gt;&amp;&#32;__y,&#32;\</emphasis>
890 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;const&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__z)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
891 <emphasis role="preprocessor">&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
892 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;return&#32;_NAME(__x,&#32;__y,&#32;__z);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
893 <emphasis role="preprocessor">&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
894 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
895 <emphasis role="preprocessor">template&#32;&lt;typename&#32;_Tp,&#32;typename&#32;_Abi&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
896 <emphasis role="preprocessor">&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;simd&lt;_Tp,&#32;_Abi&gt;&#32;_NAME(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
897 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;const&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__x,&#32;const&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__y,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
898 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;const&#32;__type_identity_t&lt;simd&lt;_Tp,&#32;_Abi&gt;&gt;&amp;&#32;__z)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
899 <emphasis role="preprocessor">&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
900 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;return&#32;_NAME(__x,&#32;__y,&#32;__z);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
901 <emphasis role="preprocessor">&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
902 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
903 <emphasis role="preprocessor">template&#32;&lt;typename&#32;_Tp,&#32;typename&#32;_Abi&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
904 <emphasis role="preprocessor">&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;simd&lt;_Tp,&#32;_Abi&gt;&#32;_NAME(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
905 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;const&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__x,&#32;const&#32;__type_identity_t&lt;simd&lt;_Tp,&#32;_Abi&gt;&gt;&amp;&#32;__y,&#32;\</emphasis>
906 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;const&#32;__type_identity_t&lt;simd&lt;_Tp,&#32;_Abi&gt;&gt;&amp;&#32;__z)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
907 <emphasis role="preprocessor">&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
908 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;return&#32;_NAME(__x,&#32;__y,&#32;__z);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
909 <emphasis role="preprocessor">&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
910 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
911 <emphasis role="preprocessor">template&#32;&lt;typename&#32;_Tp,&#32;typename&#32;_Abi&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
912 <emphasis role="preprocessor">&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;simd&lt;_Tp,&#32;_Abi&gt;&#32;_NAME(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
913 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;const&#32;__type_identity_t&lt;simd&lt;_Tp,&#32;_Abi&gt;&gt;&amp;&#32;__x,&#32;const&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__y,&#32;\</emphasis>
914 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;const&#32;__type_identity_t&lt;simd&lt;_Tp,&#32;_Abi&gt;&gt;&amp;&#32;__z)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
915 <emphasis role="preprocessor">&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
916 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;return&#32;_NAME(__x,&#32;__y,&#32;__z);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
917 <emphasis role="preprocessor">&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
918 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
919 <emphasis role="preprocessor">template&#32;&lt;typename&#32;_Tp,&#32;typename&#32;_Abi&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
920 <emphasis role="preprocessor">&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;simd&lt;_Tp,&#32;_Abi&gt;&#32;_NAME(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
921 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;const&#32;__type_identity_t&lt;simd&lt;_Tp,&#32;_Abi&gt;&gt;&amp;&#32;__x,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
922 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;const&#32;__type_identity_t&lt;simd&lt;_Tp,&#32;_Abi&gt;&gt;&amp;&#32;__y,&#32;const&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__z)&#32;\</emphasis>
923 <emphasis role="preprocessor">&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
924 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;return&#32;_NAME(__x,&#32;__y,&#32;__z);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
925 <emphasis role="preprocessor">&#32;&#32;}</emphasis>
926 
927 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_R,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ToApply,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Tps&gt;
928 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_R
929 &#32;&#32;__fixed_size_apply(_ToApply&amp;&amp;&#32;__apply,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__arg0,
930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tps&amp;...&#32;__args)
931 &#32;&#32;{
932 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,
933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__data(__arg0)._M_apply_per_chunk(
934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__impl,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;...&#32;__inner)&#32;{
935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_V&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;<emphasis role="keyword">decltype</emphasis>(__impl)::simd_type;
936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__data(__apply(_V(__private_init,&#32;__inner)...));
937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__data(__args)...)};
939 &#32;&#32;}
940 
941 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_VV,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;__detail::__odr_helper&gt;
942 &#32;&#32;__remove_cvref_t&lt;_VV&gt;
943 &#32;&#32;__hypot(_VV&#32;__x,&#32;_VV&#32;__y)
944 &#32;&#32;{
945 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_V&#32;=&#32;__remove_cvref_t&lt;_VV&gt;;
946 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_V::value_type;
947 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_V::size()&#32;==&#32;1)
948 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::hypot(_Tp(__x[0]),&#32;_Tp(__y[0]));
949 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_fixed_size_abi_v&lt;typename&#32;_V::abi_type&gt;)
950 &#32;&#32;&#32;&#32;&#32;&#32;{
951 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__fixed_size_apply&lt;_V&gt;([](<emphasis role="keyword">auto</emphasis>&#32;__a,
952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__b)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a751b566c6febf9c99c3968e99189560c">hypot</link>(__a,&#32;__b);&#32;},
953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x,&#32;__y);
954 &#32;&#32;&#32;&#32;&#32;&#32;}
955 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
956 &#32;&#32;&#32;&#32;&#32;&#32;{
957 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;A&#32;simple&#32;solution&#32;for&#32;_Tp&#32;==&#32;float&#32;would&#32;be&#32;to&#32;cast&#32;to&#32;double&#32;and</emphasis>
958 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;simply&#32;calculate&#32;sqrt(x²+y²)&#32;as&#32;it&#32;can&apos;t&#32;over-/underflow&#32;anymore&#32;with</emphasis>
959 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;dp.&#32;It&#32;still&#32;needs&#32;the&#32;Annex&#32;F&#32;fixups&#32;though&#32;and&#32;isn&apos;t&#32;faster&#32;on</emphasis>
960 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Skylake-AVX512&#32;(not&#32;even&#32;for&#32;SSE&#32;and&#32;AVX&#32;vectors,&#32;and&#32;really&#32;bad&#32;for</emphasis>
961 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;AVX-512).</emphasis>
962 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>__float_bitwise_operators;
963 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>__proposed;
964 &#32;&#32;&#32;&#32;_V&#32;__absx&#32;=&#32;<link linkend="_group__core__func__common_1ga439e60a72eadecfeda2df5449c613a64">abs</link>(__x);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;no&#32;error</emphasis>
965 &#32;&#32;&#32;&#32;_V&#32;__absy&#32;=&#32;<link linkend="_group__core__func__common_1ga439e60a72eadecfeda2df5449c613a64">abs</link>(__y);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;no&#32;error</emphasis>
966 &#32;&#32;&#32;&#32;_V&#32;__hi&#32;=&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>(__absx,&#32;__absy);&#32;<emphasis role="comment">//&#32;no&#32;error</emphasis>
967 &#32;&#32;&#32;&#32;_V&#32;__lo&#32;=&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>(__absy,&#32;__absx);&#32;<emphasis role="comment">//&#32;no&#32;error</emphasis>
968 
969 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;round&#32;__hi&#32;down&#32;to&#32;the&#32;next&#32;power-of-2:</emphasis>
970 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_USE_CONSTEXPR_API&#32;_V&#32;__inf(__infinity_v&lt;_Tp&gt;);
971 
972 <emphasis role="preprocessor">#ifndef&#32;__FAST_MATH__</emphasis>
973 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_neon&#32;&amp;&amp;&#32;!__have_neon_a32)
974 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;With&#32;ARMv7&#32;NEON,&#32;we&#32;have&#32;no&#32;subnormals&#32;and&#32;must&#32;use&#32;slightly</emphasis>
975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;different&#32;strategy</emphasis>
976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_V&#32;__hi_exp&#32;=&#32;__hi&#32;&amp;&#32;__inf;
977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_V&#32;__scale_back&#32;=&#32;__hi_exp;
978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;large&#32;exponents&#32;(max&#32;&amp;&#32;max/2)&#32;the&#32;inversion&#32;comes&#32;too&#32;close</emphasis>
979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;to&#32;subnormals.&#32;Subtract&#32;3&#32;from&#32;the&#32;exponent:</emphasis>
980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;where(__hi_exp&#32;&gt;&#32;1,&#32;__scale_back)&#32;=&#32;__hi_exp&#32;*&#32;_Tp(0.125);
981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Invert&#32;and&#32;adjust&#32;for&#32;the&#32;off-by-one&#32;error&#32;of&#32;inversion&#32;via&#32;xor:</emphasis>
982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_V&#32;__scale&#32;=&#32;(__scale_back&#32;^&#32;__inf)&#32;*&#32;_Tp(.5);
983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_V&#32;__h1&#32;=&#32;__hi&#32;*&#32;__scale;
984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_V&#32;__l1&#32;=&#32;__lo&#32;*&#32;__scale;
985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_V&#32;__r&#32;=&#32;__scale_back&#32;*&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a86ab780bf1de516c739da6893b2e303a">sqrt</link>(__h1&#32;*&#32;__h1&#32;+&#32;__l1&#32;*&#32;__l1);
986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Fix&#32;up&#32;hypot(0,&#32;0)&#32;to&#32;not&#32;be&#32;NaN:</emphasis>
987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;where(__hi&#32;==&#32;0,&#32;__r)&#32;=&#32;0;
988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
989 &#32;&#32;&#32;&#32;&#32;&#32;}
990 <emphasis role="preprocessor">#endif</emphasis>
991 
992 <emphasis role="preprocessor">#ifdef&#32;__FAST_MATH__</emphasis>
993 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;With&#32;fast-math,&#32;ignore&#32;precision&#32;of&#32;subnormals&#32;and&#32;inputs&#32;from</emphasis>
994 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__finite_max_v/2&#32;to&#32;__finite_max_v.&#32;This&#32;removes&#32;all</emphasis>
995 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;branching/masking.</emphasis>
996 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)
997 #<emphasis role="keywordflow">else</emphasis>
998 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_GLIBCXX_SIMD_IS_LIKELY(<link linkend="_namespacestd_1af69ea32ebd7865fb57714d6b5f12f26d">all_of</link>(isnormal(__x))
999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="_namespacestd_1af69ea32ebd7865fb57714d6b5f12f26d">all_of</link>(isnormal(__y))))
1000 #endif
1001 &#32;&#32;&#32;&#32;&#32;&#32;{
1002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_V&#32;__hi_exp&#32;=&#32;__hi&#32;&amp;&#32;__inf;
1003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//((__hi&#32;+&#32;__hi)&#32;&amp;&#32;__inf)&#32;^&#32;__inf&#32;almost&#32;works&#32;for&#32;computing</emphasis>
1004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//__scale,</emphasis>
1005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;except&#32;when&#32;(__hi&#32;+&#32;__hi)&#32;&amp;&#32;__inf&#32;==&#32;__inf,&#32;in&#32;which&#32;case&#32;__scale</emphasis>
1006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;becomes&#32;0&#32;(should&#32;be&#32;min/2&#32;instead)&#32;and&#32;thus&#32;loses&#32;the</emphasis>
1007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;information&#32;from&#32;__lo.</emphasis>
1008 <emphasis role="preprocessor">#ifdef&#32;__FAST_MATH__</emphasis>
1009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Ip&#32;=&#32;__int_for_sizeof_t&lt;_Tp&gt;;
1010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_IV&#32;=&#32;rebind_simd_t&lt;_Ip,&#32;_V&gt;;
1011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__as_int&#32;=&#32;simd_bit_cast&lt;_IV&gt;(__hi_exp);
1012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_V&#32;__scale
1013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;simd_bit_cast&lt;_V&gt;(2&#32;*&#32;simd_bit_cast&lt;_Ip&gt;(_Tp(1))&#32;-&#32;__as_int);
1014 <emphasis role="preprocessor">#else</emphasis>
1015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_V&#32;__scale&#32;=&#32;(__hi_exp&#32;^&#32;__inf)&#32;*&#32;_Tp(.5);
1016 <emphasis role="preprocessor">#endif</emphasis>
1017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_USE_CONSTEXPR_API&#32;_V&#32;__mant_mask
1018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__norm_min_v&lt;_Tp&gt;&#32;-&#32;__denorm_min_v&lt;_Tp&gt;;
1019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_V&#32;__h1&#32;=&#32;(__hi&#32;&amp;&#32;__mant_mask)&#32;|&#32;_V(1);
1020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_V&#32;__l1&#32;=&#32;__lo&#32;*&#32;__scale;
1021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__hi_exp&#32;*&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a86ab780bf1de516c739da6893b2e303a">sqrt</link>(__h1&#32;*&#32;__h1&#32;+&#32;__l1&#32;*&#32;__l1);
1022 &#32;&#32;&#32;&#32;&#32;&#32;}
1023 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1024 &#32;&#32;&#32;&#32;&#32;&#32;{
1025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;slower&#32;path&#32;to&#32;support&#32;subnormals</emphasis>
1026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;__hi&#32;is&#32;subnormal,&#32;avoid&#32;scaling&#32;by&#32;inf&#32;&amp;&#32;final&#32;mul&#32;by&#32;0</emphasis>
1027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(which&#32;yields&#32;NaN)&#32;by&#32;using&#32;min()</emphasis>
1028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_V&#32;__scale&#32;=&#32;_V(1&#32;/&#32;__norm_min_v&lt;_Tp&gt;);
1029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;invert&#32;exponent&#32;w/o&#32;error&#32;and&#32;w/o&#32;using&#32;the&#32;slow&#32;divider&#32;unit:</emphasis>
1030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;xor&#32;inverts&#32;the&#32;exponent&#32;but&#32;off&#32;by&#32;1.&#32;Multiplication&#32;with&#32;.5</emphasis>
1031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;adjusts&#32;for&#32;the&#32;discrepancy.</emphasis>
1032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;where(__hi&#32;&gt;=&#32;__norm_min_v&lt;_Tp&gt;,&#32;__scale)
1033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;((__hi&#32;&amp;&#32;__inf)&#32;^&#32;__inf)&#32;*&#32;_Tp(.5);
1034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;adjust&#32;final&#32;exponent&#32;for&#32;subnormal&#32;inputs</emphasis>
1035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_V&#32;__hi_exp&#32;=&#32;__norm_min_v&lt;_Tp&gt;;
1036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;where(__hi&#32;&gt;=&#32;__norm_min_v&lt;_Tp&gt;,&#32;__hi_exp)
1037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__hi&#32;&amp;&#32;__inf;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;no&#32;error</emphasis>
1038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_V&#32;__h1&#32;=&#32;__hi&#32;*&#32;__scale;&#32;<emphasis role="comment">//&#32;no&#32;error</emphasis>
1039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_V&#32;__l1&#32;=&#32;__lo&#32;*&#32;__scale;&#32;<emphasis role="comment">//&#32;no&#32;error</emphasis>
1040 
1041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;sqrt(x²+y²)&#32;=&#32;e*sqrt((x/e)²+(y/e)²):</emphasis>
1042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;this&#32;ensures&#32;no&#32;overflow&#32;in&#32;the&#32;argument&#32;to&#32;sqrt</emphasis>
1043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_V&#32;__r&#32;=&#32;__hi_exp&#32;*&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a86ab780bf1de516c739da6893b2e303a">sqrt</link>(__h1&#32;*&#32;__h1&#32;+&#32;__l1&#32;*&#32;__l1);
1044 <emphasis role="preprocessor">#ifdef&#32;__STDC_IEC_559__</emphasis>
1045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;fixup&#32;for&#32;Annex&#32;F&#32;requirements</emphasis>
1046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;naive&#32;fixup&#32;goes&#32;like&#32;this:</emphasis>
1047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
1048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;where(__l1&#32;==&#32;0,&#32;__r)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__hi;</emphasis>
1049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;where(isunordered(__x,&#32;__y),&#32;__r)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__quiet_NaN_v&lt;_Tp&gt;;</emphasis>
1050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;where(isinf(__absx)&#32;||&#32;isinf(__absy),&#32;__r)&#32;=&#32;__inf;</emphasis>
1051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
1052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;fixup&#32;can&#32;be&#32;prepared&#32;in&#32;parallel&#32;with&#32;the&#32;sqrt,&#32;requiring&#32;a</emphasis>
1053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;single&#32;blend&#32;step&#32;after&#32;hi_exp&#32;*&#32;sqrt,&#32;reducing&#32;latency&#32;and</emphasis>
1054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;throughput:</emphasis>
1055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_V&#32;__fixup&#32;=&#32;__hi;&#32;<emphasis role="comment">//&#32;__lo&#32;==&#32;0</emphasis>
1056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;where(isunordered(__x,&#32;__y),&#32;__fixup)&#32;=&#32;__quiet_NaN_v&lt;_Tp&gt;;
1057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;where(<link linkend="_group__core__func__common_1ga6dfda49bcedffb43ffe5d85307d732fa">isinf</link>(__absx)&#32;||&#32;<link linkend="_group__core__func__common_1ga6dfda49bcedffb43ffe5d85307d732fa">isinf</link>(__absy),&#32;__fixup)&#32;=&#32;__inf;
1058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;where(!(__lo&#32;==&#32;0&#32;||&#32;isunordered(__x,&#32;__y)
1059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;(<link linkend="_group__core__func__common_1ga6dfda49bcedffb43ffe5d85307d732fa">isinf</link>(__absx)&#32;||&#32;<link linkend="_group__core__func__common_1ga6dfda49bcedffb43ffe5d85307d732fa">isinf</link>(__absy))),
1060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__fixup)
1061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__r;
1062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__r&#32;=&#32;__fixup;
1063 <emphasis role="preprocessor">#endif</emphasis>
1064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
1065 &#32;&#32;&#32;&#32;&#32;&#32;}
1066 &#32;&#32;&#32;&#32;&#32;&#32;}
1067 &#32;&#32;}
1068 
1069 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
1070 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;simd&lt;_Tp,&#32;_Abi&gt;
1071 &#32;&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a751b566c6febf9c99c3968e99189560c">hypot</link>(<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__y)
1072 &#32;&#32;{
1073 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__hypot&lt;conditional_t&lt;__is_fixed_size_abi_v&lt;_Abi&gt;,
1074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;,&#32;simd&lt;_Tp,&#32;_Abi&gt;&gt;&gt;(__x,
1075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__y);
1076 &#32;&#32;}
1077 
1078 _GLIBCXX_SIMD_CVTING2(<link linkend="__classes_2lib_2include_2tgmath_8h_1a751b566c6febf9c99c3968e99189560c">hypot</link>)
1079 
1080 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_VV,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;__detail::__odr_helper&gt;
1081 &#32;&#32;__remove_cvref_t&lt;_VV&gt;
1082 &#32;&#32;__hypot(_VV&#32;__x,&#32;_VV&#32;__y,&#32;_VV&#32;__z)
1083 &#32;&#32;{
1084 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_V&#32;=&#32;__remove_cvref_t&lt;_VV&gt;;
1085 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Abi&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_V::abi_type;
1086 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_V::value_type;
1087 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;FIXME:&#32;enable&#32;after&#32;PR77776&#32;is&#32;resolved</emphasis>
1088 <emphasis role="comment">&#32;&#32;&#32;&#32;if&#32;constexpr&#32;(_V::size()&#32;==&#32;1)</emphasis>
1089 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;return&#32;std::hypot(_Tp(__x[0]),&#32;_Tp(__y[0]),&#32;_Tp(__z[0]));</emphasis>
1090 <emphasis role="comment">&#32;&#32;&#32;&#32;else</emphasis>
1091 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
1092 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_fixed_size_abi_v&lt;_Abi&gt;&#32;&amp;&amp;&#32;_V::size()&#32;&gt;&#32;1)
1093 &#32;&#32;&#32;&#32;&#32;&#32;{
1094 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__fixed_size_apply&lt;simd&lt;_Tp,&#32;_Abi&gt;&gt;(
1095 &#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">auto</emphasis>&#32;__a,&#32;<emphasis role="keyword">auto</emphasis>&#32;__b,&#32;<emphasis role="keyword">auto</emphasis>&#32;__c)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a751b566c6febf9c99c3968e99189560c">hypot</link>(__a,&#32;__b,&#32;__c);&#32;},
1096 &#32;&#32;&#32;&#32;&#32;&#32;__x,&#32;__y,&#32;__z);
1097 &#32;&#32;&#32;&#32;&#32;&#32;}
1098 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1099 &#32;&#32;&#32;&#32;&#32;&#32;{
1100 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>__float_bitwise_operators;
1101 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>__proposed;
1102 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_V&#32;__absx&#32;=&#32;<link linkend="_group__core__func__common_1ga439e60a72eadecfeda2df5449c613a64">abs</link>(__x);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;no&#32;error</emphasis>
1103 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_V&#32;__absy&#32;=&#32;<link linkend="_group__core__func__common_1ga439e60a72eadecfeda2df5449c613a64">abs</link>(__y);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;no&#32;error</emphasis>
1104 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_V&#32;__absz&#32;=&#32;<link linkend="_group__core__func__common_1ga439e60a72eadecfeda2df5449c613a64">abs</link>(__z);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;no&#32;error</emphasis>
1105 &#32;&#32;&#32;&#32;_V&#32;__hi&#32;=&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>(<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>(__absx,&#32;__absy),&#32;__absz);&#32;<emphasis role="comment">//&#32;no&#32;error</emphasis>
1106 &#32;&#32;&#32;&#32;_V&#32;__l0&#32;=&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>(__absz,&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>(__absx,&#32;__absy));&#32;<emphasis role="comment">//&#32;no&#32;error</emphasis>
1107 &#32;&#32;&#32;&#32;_V&#32;__l1&#32;=&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>(__absy,&#32;__absx);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;no&#32;error</emphasis>
1108 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__digits_v&lt;_Tp&gt;&#32;==&#32;64&#32;&amp;&amp;&#32;__max_exponent_v&lt;_Tp&gt;&#32;==&#32;0x4000
1109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__min_exponent_v&lt;_Tp&gt;&#32;==&#32;-0x3FFD&#32;&amp;&amp;&#32;_V::size()&#32;==&#32;1)
1110 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Seems&#32;like&#32;x87&#32;fp80,&#32;where&#32;bit&#32;63&#32;is&#32;always&#32;1&#32;unless&#32;subnormal&#32;or</emphasis>
1111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NaN.&#32;In&#32;this&#32;case&#32;the&#32;bit-tricks&#32;don&apos;t&#32;work,&#32;they&#32;require&#32;IEC559</emphasis>
1112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;binary32&#32;or&#32;binary64&#32;format.</emphasis>
1113 <emphasis role="preprocessor">#ifdef&#32;__STDC_IEC_559__</emphasis>
1114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;fixup&#32;for&#32;Annex&#32;F&#32;requirements</emphasis>
1115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group__core__func__common_1ga6dfda49bcedffb43ffe5d85307d732fa">isinf</link>(__absx[0])&#32;||&#32;<link linkend="_group__core__func__common_1ga6dfda49bcedffb43ffe5d85307d732fa">isinf</link>(__absy[0])&#32;||&#32;<link linkend="_group__core__func__common_1ga6dfda49bcedffb43ffe5d85307d732fa">isinf</link>(__absz[0]))
1116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__infinity_v&lt;_Tp&gt;;
1117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isunordered(__absx[0],&#32;__absy[0]&#32;+&#32;__absz[0]))
1118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__quiet_NaN_v&lt;_Tp&gt;;
1119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__l0[0]&#32;==&#32;0&#32;&amp;&amp;&#32;__l1[0]&#32;==&#32;0)
1120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__hi;
1121 <emphasis role="preprocessor">#endif</emphasis>
1122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_V&#32;__hi_exp&#32;=&#32;__hi;
1123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_ULLong&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;0x8000&apos;0000&apos;0000&apos;0000ull;
1124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(&amp;__data(__hi_exp),&#32;&amp;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>,&#32;8);
1125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_V&#32;__scale&#32;=&#32;1&#32;/&#32;__hi_exp;
1126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__hi&#32;*=&#32;__scale;
1127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__l0&#32;*=&#32;__scale;
1128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__l1&#32;*=&#32;__scale;
1129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__hi_exp&#32;*&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a86ab780bf1de516c739da6893b2e303a">sqrt</link>((__l0&#32;*&#32;__l0&#32;+&#32;__l1&#32;*&#32;__l1)&#32;+&#32;__hi&#32;*&#32;__hi);
1130 &#32;&#32;&#32;&#32;&#32;&#32;}
1131 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1132 &#32;&#32;&#32;&#32;&#32;&#32;{
1133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;round&#32;__hi&#32;down&#32;to&#32;the&#32;next&#32;power-of-2:</emphasis>
1134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_USE_CONSTEXPR_API&#32;_V&#32;__inf(__infinity_v&lt;_Tp&gt;);
1135 
1136 <emphasis role="preprocessor">#ifndef&#32;__FAST_MATH__</emphasis>
1137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_V::size()&#32;&gt;&#32;1&#32;&amp;&amp;&#32;__have_neon&#32;&amp;&amp;&#32;!__have_neon_a32)
1138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;With&#32;ARMv7&#32;NEON,&#32;we&#32;have&#32;no&#32;subnormals&#32;and&#32;must&#32;use&#32;slightly</emphasis>
1139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;different&#32;strategy</emphasis>
1140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_V&#32;__hi_exp&#32;=&#32;__hi&#32;&amp;&#32;__inf;
1141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_V&#32;__scale_back&#32;=&#32;__hi_exp;
1142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;large&#32;exponents&#32;(max&#32;&amp;&#32;max/2)&#32;the&#32;inversion&#32;comes&#32;too</emphasis>
1143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;close&#32;to&#32;subnormals.&#32;Subtract&#32;3&#32;from&#32;the&#32;exponent:</emphasis>
1144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;where(__hi_exp&#32;&gt;&#32;1,&#32;__scale_back)&#32;=&#32;__hi_exp&#32;*&#32;_Tp(0.125);
1145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Invert&#32;and&#32;adjust&#32;for&#32;the&#32;off-by-one&#32;error&#32;of&#32;inversion&#32;via</emphasis>
1146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;xor:</emphasis>
1147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_V&#32;__scale&#32;=&#32;(__scale_back&#32;^&#32;__inf)&#32;*&#32;_Tp(.5);
1148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_V&#32;__h1&#32;=&#32;__hi&#32;*&#32;__scale;
1149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__l0&#32;*=&#32;__scale;
1150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__l1&#32;*=&#32;__scale;
1151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_V&#32;__lo&#32;=&#32;__l0&#32;*&#32;__l0
1152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;__l1&#32;*&#32;__l1;&#32;<emphasis role="comment">//&#32;add&#32;the&#32;two&#32;smaller&#32;values&#32;first</emphasis>
1153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">asm</emphasis>(<emphasis role="stringliteral">&quot;&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;+m&quot;</emphasis>(__lo));
1154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_V&#32;__r&#32;=&#32;__scale_back&#32;*&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a86ab780bf1de516c739da6893b2e303a">sqrt</link>(__h1&#32;*&#32;__h1&#32;+&#32;__lo);
1155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Fix&#32;up&#32;hypot(0,&#32;0,&#32;0)&#32;to&#32;not&#32;be&#32;NaN:</emphasis>
1156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;where(__hi&#32;==&#32;0,&#32;__r)&#32;=&#32;0;
1157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
1158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1159 <emphasis role="preprocessor">#endif</emphasis>
1160 
1161 <emphasis role="preprocessor">#ifdef&#32;__FAST_MATH__</emphasis>
1162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;With&#32;fast-math,&#32;ignore&#32;precision&#32;of&#32;subnormals&#32;and&#32;inputs&#32;from</emphasis>
1163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__finite_max_v/2&#32;to&#32;__finite_max_v.&#32;This&#32;removes&#32;all</emphasis>
1164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;branching/masking.</emphasis>
1165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)
1166 #<emphasis role="keywordflow">else</emphasis>
1167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_GLIBCXX_SIMD_IS_LIKELY(<link linkend="_namespacestd_1af69ea32ebd7865fb57714d6b5f12f26d">all_of</link>(isnormal(__x))
1168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="_namespacestd_1af69ea32ebd7865fb57714d6b5f12f26d">all_of</link>(isnormal(__y))
1169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="_namespacestd_1af69ea32ebd7865fb57714d6b5f12f26d">all_of</link>(isnormal(__z))))
1170 #endif
1171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_V&#32;__hi_exp&#32;=&#32;__hi&#32;&amp;&#32;__inf;
1173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//((__hi&#32;+&#32;__hi)&#32;&amp;&#32;__inf)&#32;^&#32;__inf&#32;almost&#32;works&#32;for&#32;computing</emphasis>
1174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//__scale,&#32;except&#32;when&#32;(__hi&#32;+&#32;__hi)&#32;&amp;&#32;__inf&#32;==&#32;__inf,&#32;in&#32;which</emphasis>
1175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;case&#32;__scale</emphasis>
1176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;becomes&#32;0&#32;(should&#32;be&#32;min/2&#32;instead)&#32;and&#32;thus&#32;loses&#32;the</emphasis>
1177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;information&#32;from&#32;__lo.</emphasis>
1178 <emphasis role="preprocessor">#ifdef&#32;__FAST_MATH__</emphasis>
1179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Ip&#32;=&#32;__int_for_sizeof_t&lt;_Tp&gt;;
1180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_IV&#32;=&#32;rebind_simd_t&lt;_Ip,&#32;_V&gt;;
1181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__as_int&#32;=&#32;simd_bit_cast&lt;_IV&gt;(__hi_exp);
1182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_V&#32;__scale
1183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;simd_bit_cast&lt;_V&gt;(2&#32;*&#32;simd_bit_cast&lt;_Ip&gt;(_Tp(1))&#32;-&#32;__as_int);
1184 <emphasis role="preprocessor">#else</emphasis>
1185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_V&#32;__scale&#32;=&#32;(__hi_exp&#32;^&#32;__inf)&#32;*&#32;_Tp(.5);
1186 <emphasis role="preprocessor">#endif</emphasis>
1187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&#32;__mant_mask
1188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__norm_min_v&lt;_Tp&gt;&#32;-&#32;__denorm_min_v&lt;_Tp&gt;;
1189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_V&#32;__h1&#32;=&#32;(__hi&#32;&amp;&#32;_V(__mant_mask))&#32;|&#32;_V(1);
1190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__l0&#32;*=&#32;__scale;
1191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__l1&#32;*=&#32;__scale;
1192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_V&#32;__lo
1193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__l0&#32;*&#32;__l0
1194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;__l1&#32;*&#32;__l1;&#32;<emphasis role="comment">//&#32;add&#32;the&#32;two&#32;smaller&#32;values&#32;first</emphasis>
1195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__hi_exp&#32;*&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a86ab780bf1de516c739da6893b2e303a">sqrt</link>(__lo&#32;+&#32;__h1&#32;*&#32;__h1);
1196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;slower&#32;path&#32;to&#32;support&#32;subnormals</emphasis>
1200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;__hi&#32;is&#32;subnormal,&#32;avoid&#32;scaling&#32;by&#32;inf&#32;&amp;&#32;final&#32;mul&#32;by&#32;0</emphasis>
1201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(which&#32;yields&#32;NaN)&#32;by&#32;using&#32;min()</emphasis>
1202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_V&#32;__scale&#32;=&#32;_V(1&#32;/&#32;__norm_min_v&lt;_Tp&gt;);
1203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;invert&#32;exponent&#32;w/o&#32;error&#32;and&#32;w/o&#32;using&#32;the&#32;slow&#32;divider</emphasis>
1204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;unit:&#32;xor&#32;inverts&#32;the&#32;exponent&#32;but&#32;off&#32;by&#32;1.&#32;Multiplication</emphasis>
1205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;with&#32;.5&#32;adjusts&#32;for&#32;the&#32;discrepancy.</emphasis>
1206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;where(__hi&#32;&gt;=&#32;__norm_min_v&lt;_Tp&gt;,&#32;__scale)
1207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;((__hi&#32;&amp;&#32;__inf)&#32;^&#32;__inf)&#32;*&#32;_Tp(.5);
1208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;adjust&#32;final&#32;exponent&#32;for&#32;subnormal&#32;inputs</emphasis>
1209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_V&#32;__hi_exp&#32;=&#32;__norm_min_v&lt;_Tp&gt;;
1210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;where(__hi&#32;&gt;=&#32;__norm_min_v&lt;_Tp&gt;,&#32;__hi_exp)
1211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__hi&#32;&amp;&#32;__inf;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;no&#32;error</emphasis>
1212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_V&#32;__h1&#32;=&#32;__hi&#32;*&#32;__scale;&#32;<emphasis role="comment">//&#32;no&#32;error</emphasis>
1213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__l0&#32;*=&#32;__scale;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;no&#32;error</emphasis>
1214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__l1&#32;*=&#32;__scale;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;no&#32;error</emphasis>
1215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_V&#32;__lo&#32;=&#32;__l0&#32;*&#32;__l0
1216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;__l1&#32;*&#32;__l1;&#32;<emphasis role="comment">//&#32;add&#32;the&#32;two&#32;smaller&#32;values&#32;first</emphasis>
1217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_V&#32;__r&#32;=&#32;__hi_exp&#32;*&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a86ab780bf1de516c739da6893b2e303a">sqrt</link>(__lo&#32;+&#32;__h1&#32;*&#32;__h1);
1218 <emphasis role="preprocessor">#ifdef&#32;__STDC_IEC_559__</emphasis>
1219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;fixup&#32;for&#32;Annex&#32;F&#32;requirements</emphasis>
1220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_V&#32;__fixup&#32;=&#32;__hi;&#32;<emphasis role="comment">//&#32;__lo&#32;==&#32;0</emphasis>
1221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;where(__lo&#32;==&#32;0,&#32;__fixup)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__hi;</emphasis>
1222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;where(isunordered(__x,&#32;__y&#32;+&#32;__z),&#32;__fixup)
1223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__quiet_NaN_v&lt;_Tp&gt;;
1224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;where(<link linkend="_group__core__func__common_1ga6dfda49bcedffb43ffe5d85307d732fa">isinf</link>(__absx)&#32;||&#32;<link linkend="_group__core__func__common_1ga6dfda49bcedffb43ffe5d85307d732fa">isinf</link>(__absy)&#32;||&#32;<link linkend="_group__core__func__common_1ga6dfda49bcedffb43ffe5d85307d732fa">isinf</link>(__absz),&#32;__fixup)
1225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__inf;
1226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Instead&#32;of&#32;__lo&#32;==&#32;0,&#32;the&#32;following&#32;could&#32;depend&#32;on&#32;__h1²&#32;==</emphasis>
1227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__h1²&#32;+&#32;__lo&#32;(i.e.&#32;__hi&#32;is&#32;so&#32;much&#32;larger&#32;than&#32;the&#32;other&#32;two</emphasis>
1228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;inputs&#32;that&#32;the&#32;result&#32;is&#32;exactly&#32;__hi).&#32;While&#32;this&#32;may</emphasis>
1229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;improve&#32;precision,&#32;it&#32;is&#32;likely&#32;to&#32;reduce&#32;efficiency&#32;if&#32;the</emphasis>
1230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ISA&#32;has&#32;FMAs&#32;(because&#32;__h1²&#32;+&#32;__lo&#32;is&#32;an&#32;FMA,&#32;but&#32;the</emphasis>
1231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;intermediate</emphasis>
1232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__h1²&#32;must&#32;be&#32;kept)</emphasis>
1233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;where(!(__lo&#32;==&#32;0&#32;||&#32;isunordered(__x,&#32;__y&#32;+&#32;__z)
1234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;<link linkend="_group__core__func__common_1ga6dfda49bcedffb43ffe5d85307d732fa">isinf</link>(__absx)&#32;||&#32;<link linkend="_group__core__func__common_1ga6dfda49bcedffb43ffe5d85307d732fa">isinf</link>(__absy)&#32;||&#32;<link linkend="_group__core__func__common_1ga6dfda49bcedffb43ffe5d85307d732fa">isinf</link>(__absz)),
1235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__fixup)
1236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__r;
1237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__r&#32;=&#32;__fixup;
1238 <emphasis role="preprocessor">#endif</emphasis>
1239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
1240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1241 &#32;&#32;&#32;&#32;&#32;&#32;}
1242 &#32;&#32;&#32;&#32;&#32;&#32;}
1243 &#32;&#32;}
1244 
1245 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
1246 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;simd&lt;_Tp,&#32;_Abi&gt;
1247 &#32;&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a751b566c6febf9c99c3968e99189560c">hypot</link>(<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__y,
1248 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__z)
1249 &#32;&#32;{
1250 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__hypot&lt;conditional_t&lt;__is_fixed_size_abi_v&lt;_Abi&gt;,
1251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;,&#32;simd&lt;_Tp,&#32;_Abi&gt;&gt;&gt;(__x,
1252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__y,
1253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__z);
1254 &#32;&#32;}
1255 
1256 _GLIBCXX_SIMD_CVTING3(<link linkend="__classes_2lib_2include_2tgmath_8h_1a751b566c6febf9c99c3968e99189560c">hypot</link>)
1257 
1258 _GLIBCXX_SIMD_MATH_CALL2_(<link linkend="__classes_2lib_2include_2tgmath_8h_1a490c36eca6590103f32eb0520a4c11f6">pow</link>,&#32;_Tp)
1259 
1260 _GLIBCXX_SIMD_MATH_CALL_(<link linkend="__classes_2lib_2include_2tgmath_8h_1a86ab780bf1de516c739da6893b2e303a">sqrt</link>)
1261 _GLIBCXX_SIMD_MATH_CALL_(<link linkend="__classes_2lib_2include_2tgmath_8h_1a4165b919297d605e13a90107432f82bc">erf</link>)
1262 _GLIBCXX_SIMD_MATH_CALL_(<link linkend="__classes_2lib_2include_2tgmath_8h_1a6055417e172fa9376e96426c8fb4ffbb">erfc</link>)
1263 _GLIBCXX_SIMD_MATH_CALL_(<link linkend="__classes_2lib_2include_2tgmath_8h_1abb805ac761f948a92378a8e615f381a4">lgamma</link>)
1264 _GLIBCXX_SIMD_MATH_CALL_(<link linkend="__classes_2lib_2include_2tgmath_8h_1ade3a678daf949cf694c82981b5359c6c">tgamma</link>)
1265 _GLIBCXX_SIMD_MATH_CALL_(<link linkend="__classes_2lib_2include_2tgmath_8h_1adb9d5300e335a2898597780e7db7158d">ceil</link>)
1266 _GLIBCXX_SIMD_MATH_CALL_(<link linkend="__classes_2lib_2include_2tgmath_8h_1af856cb49514ce62a1b07883867f6f255">floor</link>)
1267 _GLIBCXX_SIMD_MATH_CALL_(<link linkend="__classes_2lib_2include_2tgmath_8h_1a283df788ac3ead918eb16a6d3936f4ef">nearbyint</link>)
1268 _GLIBCXX_SIMD_MATH_CALL_(<link linkend="__classes_2lib_2include_2tgmath_8h_1ae13e880889aa452c9adec0a0d1690a50">rint</link>)
1269 _GLIBCXX_SIMD_MATH_CALL_(<link linkend="__classes_2lib_2include_2tgmath_8h_1a14657bf794350193b021ea8a968129b6">lrint</link>)
1270 _GLIBCXX_SIMD_MATH_CALL_(<link linkend="__classes_2lib_2include_2tgmath_8h_1a220c7fd7006446ff6f373833bdc847ba">llrint</link>)
1271 
1272 _GLIBCXX_SIMD_MATH_CALL_(<link linkend="__classes_2lib_2include_2tgmath_8h_1a6ea10f4260b54a61665ead26cb995ba3">round</link>)
1273 _GLIBCXX_SIMD_MATH_CALL_(<link linkend="__classes_2lib_2include_2tgmath_8h_1a9e8c2b3b0cb90c46e6a5ac345322282c">lround</link>)
1274 _GLIBCXX_SIMD_MATH_CALL_(<link linkend="__classes_2lib_2include_2tgmath_8h_1af7f976f7b98d000fef56b6be1550b31b">llround</link>)
1275 
1276 _GLIBCXX_SIMD_MATH_CALL_(<link linkend="__classes_2lib_2include_2tgmath_8h_1a1bf4c48c09dda9ec4a0b1b4aa8cd8920">trunc</link>)
1277 
1278 _GLIBCXX_SIMD_MATH_CALL2_(<link linkend="__classes_2lib_2include_2tgmath_8h_1a2947d0248e7d12258dba930ed0a52678">fmod</link>,&#32;_Tp)
1279 _GLIBCXX_SIMD_MATH_CALL2_(<link linkend="__classes_2lib_2include_2tgmath_8h_1a6580b4a83cd7c960cda8c6ce1df26871">remainder</link>,&#32;_Tp)
1280 _GLIBCXX_SIMD_MATH_CALL3_(<link linkend="__classes_2lib_2include_2tgmath_8h_1af26447dd9f60e7a68d2a35895efb1c56">remquo</link>,&#32;_Tp,&#32;<emphasis role="keywordtype">int</emphasis>*)
1281 
1282 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;__detail::__odr_helper&gt;
1283 &#32;&#32;enable_if_t&lt;is_floating_point_v&lt;_Tp&gt;,&#32;simd&lt;_Tp,&#32;_Abi&gt;&gt;
1284 &#32;&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1ae1df9e2567ff4293e3b52172f5f16d9b">copysign</link>(<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__y)
1285 &#32;&#32;{
1286 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(simd_size_v&lt;_Tp,&#32;_Abi&gt;&#32;==&#32;1)
1287 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::copysign(__x[0],&#32;__y[0]);
1288 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_fixed_size_abi_v&lt;_Abi&gt;)
1289 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;_Abi::_SimdImpl::_S_copysign(__data(__x),&#32;__data(__y))};
1290 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1291 &#32;&#32;&#32;&#32;&#32;&#32;{
1292 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_V&#32;=&#32;simd&lt;_Tp,&#32;_Abi&gt;;
1293 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>std::experimental::__float_bitwise_operators;
1294 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_USE_CONSTEXPR_API&#32;<emphasis role="keyword">auto</emphasis>&#32;__signmask&#32;=&#32;_V(1)&#32;^&#32;_V(-1);
1295 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__x&#32;&amp;&#32;~__signmask)&#32;|&#32;(__y&#32;&amp;&#32;__signmask);
1296 &#32;&#32;&#32;&#32;&#32;&#32;}
1297 &#32;&#32;}
1298 
1299 _GLIBCXX_SIMD_MATH_CALL2_(<link linkend="__classes_2lib_2include_2tgmath_8h_1a1b027edfeb81f764c9e07df1452652a8">nextafter</link>,&#32;_Tp)
1300 <emphasis role="comment">//&#32;not&#32;covered&#32;in&#32;[parallel.simd.math]:</emphasis>
1301 <emphasis role="comment">//&#32;_GLIBCXX_SIMD_MATH_CALL2_(nexttoward,&#32;long&#32;double)</emphasis>
1302 _GLIBCXX_SIMD_MATH_CALL2_(<link linkend="__classes_2lib_2include_2tgmath_8h_1a7ef36eaba7ad1b1fbd09698d7c7befa8">fdim</link>,&#32;_Tp)
1303 _GLIBCXX_SIMD_MATH_CALL2_(<link linkend="__classes_2lib_2include_2tgmath_8h_1a1c3600f02664f2255b85d9d85d3cf418">fmax</link>,&#32;_Tp)
1304 _GLIBCXX_SIMD_MATH_CALL2_(<link linkend="__classes_2lib_2include_2tgmath_8h_1a731ba685a68fdea7f9545398055e8bb7">fmin</link>,&#32;_Tp)
1305 
1306 _GLIBCXX_SIMD_MATH_CALL3_(<link linkend="__classes_2lib_2include_2tgmath_8h_1a601e3e26bceb442ef97674f161dee8f3">fma</link>,&#32;_Tp,&#32;_Tp)
1307 _GLIBCXX_SIMD_MATH_CALL_(<link linkend="_toml_8hpp_1a2c39cdb56141a8d5637c9933c53e8bb6">fpclassify</link>)
1308 _GLIBCXX_SIMD_MATH_CALL_(isfinite)
1309 
1310 <emphasis role="comment">//&#32;isnan&#32;and&#32;isinf&#32;require&#32;special&#32;treatment&#32;because&#32;old&#32;glibc&#32;may&#32;declare</emphasis>
1311 <emphasis role="comment">//&#32;`int&#32;isinf(double)`.</emphasis>
1312 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi,&#32;<emphasis role="keyword">typename</emphasis>...,
1313 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_R&#32;=&#32;_Math_return_type_t&lt;bool,&#32;_Tp,&#32;_Abi&gt;&gt;
1314 &#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE
1315 &#32;&#32;enable_if_t&lt;is_floating_point_v&lt;_Tp&gt;,&#32;_R&gt;
1316 &#32;&#32;<link linkend="_group__core__func__common_1ga6dfda49bcedffb43ffe5d85307d732fa">isinf</link>(simd&lt;_Tp,&#32;_Abi&gt;&#32;__x)
1317 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;_Abi::_SimdImpl::_S_isinf(__data(__x))};&#32;}
1318 
1319 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi,&#32;<emphasis role="keyword">typename</emphasis>...,
1320 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_R&#32;=&#32;_Math_return_type_t&lt;bool,&#32;_Tp,&#32;_Abi&gt;&gt;
1321 &#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE
1322 &#32;&#32;enable_if_t&lt;is_floating_point_v&lt;_Tp&gt;,&#32;_R&gt;
1323 &#32;&#32;<link linkend="_group__core__func__common_1ga81f85e3c56f1f559034422b357c37e21">isnan</link>(simd&lt;_Tp,&#32;_Abi&gt;&#32;__x)
1324 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;_Abi::_SimdImpl::_S_isnan(__data(__x))};&#32;}
1325 
1326 _GLIBCXX_SIMD_MATH_CALL_(isnormal)
1327 
1328 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
1329 &#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE
1330 &#32;&#32;simd_mask&lt;_Tp,&#32;_Abi&gt;
1331 &#32;&#32;signbit(simd&lt;_Tp,&#32;_Abi&gt;&#32;__x)
1332 &#32;&#32;{
1333 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_integral_v&lt;_Tp&gt;)
1334 &#32;&#32;&#32;&#32;&#32;&#32;{
1335 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_unsigned_v&lt;_Tp&gt;)
1336 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;simd_mask&lt;_Tp,&#32;_Abi&gt;{};&#32;<emphasis role="comment">//&#32;false</emphasis>
1337 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1338 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;&lt;&#32;0;
1339 &#32;&#32;&#32;&#32;&#32;&#32;}
1340 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1341 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;_Abi::_SimdImpl::_S_signbit(__data(__x))};
1342 &#32;&#32;}
1343 
1344 _GLIBCXX_SIMD_MATH_CALL2_(isgreater,&#32;_Tp)
1345 _GLIBCXX_SIMD_MATH_CALL2_(isgreaterequal,&#32;_Tp)
1346 _GLIBCXX_SIMD_MATH_CALL2_(isless,&#32;_Tp)
1347 _GLIBCXX_SIMD_MATH_CALL2_(islessequal,&#32;_Tp)
1348 _GLIBCXX_SIMD_MATH_CALL2_(islessgreater,&#32;_Tp)
1349 _GLIBCXX_SIMD_MATH_CALL2_(isunordered,&#32;_Tp)
1350 
1351 <emphasis role="comment">/*&#32;not&#32;covered&#32;in&#32;[parallel.simd.math]</emphasis>
1352 <emphasis role="comment">template&#32;&lt;typename&#32;_Abi&gt;&#32;__doublev&lt;_Abi&gt;&#32;nan(const&#32;char*&#32;tagp);</emphasis>
1353 <emphasis role="comment">template&#32;&lt;typename&#32;_Abi&gt;&#32;__floatv&lt;_Abi&gt;&#32;nanf(const&#32;char*&#32;tagp);</emphasis>
1354 <emphasis role="comment">template&#32;&lt;typename&#32;_Abi&gt;&#32;__ldoublev&lt;_Abi&gt;&#32;nanl(const&#32;char*&#32;tagp);</emphasis>
1355 <emphasis role="comment"></emphasis>
1356 <emphasis role="comment">template&#32;&lt;typename&#32;_V&gt;&#32;struct&#32;simd_div_t&#32;{</emphasis>
1357 <emphasis role="comment">&#32;&#32;&#32;&#32;_V&#32;quot,&#32;rem;</emphasis>
1358 <emphasis role="comment">};</emphasis>
1359 <emphasis role="comment"></emphasis>
1360 <emphasis role="comment">template&#32;&lt;typename&#32;_Abi&gt;</emphasis>
1361 <emphasis role="comment">simd_div_t&lt;_SCharv&lt;_Abi&gt;&gt;&#32;div(_SCharv&lt;_Abi&gt;&#32;numer,</emphasis>
1362 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SCharv&lt;_Abi&gt;&#32;denom);</emphasis>
1363 <emphasis role="comment">template&#32;&lt;typename&#32;_Abi&gt;</emphasis>
1364 <emphasis role="comment">simd_div_t&lt;__shortv&lt;_Abi&gt;&gt;&#32;div(__shortv&lt;_Abi&gt;&#32;numer,</emphasis>
1365 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__shortv&lt;_Abi&gt;&#32;denom);</emphasis>
1366 <emphasis role="comment">template&#32;&lt;typename&#32;_Abi&gt;</emphasis>
1367 <emphasis role="comment">simd_div_t&lt;__intv&lt;_Abi&gt;&gt;&#32;div(__intv&lt;_Abi&gt;&#32;numer,&#32;__intv&lt;_Abi&gt;&#32;denom);</emphasis>
1368 <emphasis role="comment">template&#32;&lt;typename&#32;_Abi&gt;</emphasis>
1369 <emphasis role="comment">simd_div_t&lt;__longv&lt;_Abi&gt;&gt;&#32;div(__longv&lt;_Abi&gt;&#32;numer,</emphasis>
1370 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__longv&lt;_Abi&gt;&#32;denom);</emphasis>
1371 <emphasis role="comment">template&#32;&lt;typename&#32;_Abi&gt;</emphasis>
1372 <emphasis role="comment">simd_div_t&lt;__llongv&lt;_Abi&gt;&gt;&#32;div(__llongv&lt;_Abi&gt;&#32;numer,</emphasis>
1373 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__llongv&lt;_Abi&gt;&#32;denom);</emphasis>
1374 <emphasis role="comment">*/</emphasis>
1375 
1376 <emphasis role="comment">//&#32;special&#32;math&#32;{{{</emphasis>
1377 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;__detail::__odr_helper&gt;
1378 &#32;&#32;enable_if_t&lt;is_floating_point_v&lt;_Tp&gt;,&#32;simd&lt;_Tp,&#32;_Abi&gt;&gt;
1379 &#32;&#32;assoc_laguerre(<emphasis role="keyword">const</emphasis>&#32;fixed_size_simd&lt;<emphasis role="keywordtype">unsigned</emphasis>,&#32;simd_size_v&lt;_Tp,&#32;_Abi&gt;&gt;&amp;&#32;__n,
1380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;fixed_size_simd&lt;<emphasis role="keywordtype">unsigned</emphasis>,&#32;simd_size_v&lt;_Tp,&#32;_Abi&gt;&gt;&amp;&#32;__m,
1381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__x)
1382 &#32;&#32;{
1383 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;simd&lt;_Tp,&#32;_Abi&gt;([&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{
1384 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::assoc_laguerre(__n[__i],&#32;__m[__i],&#32;__x[__i]);
1385 &#32;&#32;&#32;&#32;});
1386 &#32;&#32;}
1387 
1388 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;__detail::__odr_helper&gt;
1389 &#32;&#32;enable_if_t&lt;is_floating_point_v&lt;_Tp&gt;,&#32;simd&lt;_Tp,&#32;_Abi&gt;&gt;
1390 &#32;&#32;assoc_legendre(<emphasis role="keyword">const</emphasis>&#32;fixed_size_simd&lt;<emphasis role="keywordtype">unsigned</emphasis>,&#32;simd_size_v&lt;_Tp,&#32;_Abi&gt;&gt;&amp;&#32;__n,
1391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;fixed_size_simd&lt;<emphasis role="keywordtype">unsigned</emphasis>,&#32;simd_size_v&lt;_Tp,&#32;_Abi&gt;&gt;&amp;&#32;__m,
1392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__x)
1393 &#32;&#32;{
1394 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;simd&lt;_Tp,&#32;_Abi&gt;([&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{
1395 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::assoc_legendre(__n[__i],&#32;__m[__i],&#32;__x[__i]);
1396 &#32;&#32;&#32;&#32;});
1397 &#32;&#32;}
1398 
1399 _GLIBCXX_SIMD_MATH_CALL2_(beta,&#32;_Tp)
1400 _GLIBCXX_SIMD_MATH_CALL_(comp_ellint_1)
1401 _GLIBCXX_SIMD_MATH_CALL_(comp_ellint_2)
1402 _GLIBCXX_SIMD_MATH_CALL2_(comp_ellint_3,&#32;_Tp)
1403 _GLIBCXX_SIMD_MATH_CALL2_(cyl_bessel_i,&#32;_Tp)
1404 _GLIBCXX_SIMD_MATH_CALL2_(cyl_bessel_j,&#32;_Tp)
1405 _GLIBCXX_SIMD_MATH_CALL2_(cyl_bessel_k,&#32;_Tp)
1406 _GLIBCXX_SIMD_MATH_CALL2_(cyl_neumann,&#32;_Tp)
1407 _GLIBCXX_SIMD_MATH_CALL2_(ellint_1,&#32;_Tp)
1408 _GLIBCXX_SIMD_MATH_CALL2_(ellint_2,&#32;_Tp)
1409 _GLIBCXX_SIMD_MATH_CALL3_(ellint_3,&#32;_Tp,&#32;_Tp)
1410 _GLIBCXX_SIMD_MATH_CALL_(expint)
1411 
1412 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;__detail::__odr_helper&gt;
1413 &#32;&#32;enable_if_t&lt;is_floating_point_v&lt;_Tp&gt;,&#32;simd&lt;_Tp,&#32;_Abi&gt;&gt;
1414 &#32;&#32;<link linkend="_namespacehermite">hermite</link>(<emphasis role="keyword">const</emphasis>&#32;fixed_size_simd&lt;<emphasis role="keywordtype">unsigned</emphasis>,&#32;simd_size_v&lt;_Tp,&#32;_Abi&gt;&gt;&amp;&#32;__n,
1415 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__x)
1416 &#32;&#32;{
1417 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;simd&lt;_Tp,&#32;_Abi&gt;(
1418 &#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::hermite(__n[__i],&#32;__x[__i]);&#32;});
1419 &#32;&#32;}
1420 
1421 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;__detail::__odr_helper&gt;
1422 &#32;&#32;enable_if_t&lt;is_floating_point_v&lt;_Tp&gt;,&#32;simd&lt;_Tp,&#32;_Abi&gt;&gt;
1423 &#32;&#32;laguerre(<emphasis role="keyword">const</emphasis>&#32;fixed_size_simd&lt;<emphasis role="keywordtype">unsigned</emphasis>,&#32;simd_size_v&lt;_Tp,&#32;_Abi&gt;&gt;&amp;&#32;__n,
1424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__x)
1425 &#32;&#32;{
1426 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;simd&lt;_Tp,&#32;_Abi&gt;(
1427 &#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::laguerre(__n[__i],&#32;__x[__i]);&#32;});
1428 &#32;&#32;}
1429 
1430 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;__detail::__odr_helper&gt;
1431 &#32;&#32;enable_if_t&lt;is_floating_point_v&lt;_Tp&gt;,&#32;simd&lt;_Tp,&#32;_Abi&gt;&gt;
1432 &#32;&#32;legendre(<emphasis role="keyword">const</emphasis>&#32;fixed_size_simd&lt;<emphasis role="keywordtype">unsigned</emphasis>,&#32;simd_size_v&lt;_Tp,&#32;_Abi&gt;&gt;&amp;&#32;__n,
1433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__x)
1434 &#32;&#32;{
1435 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;simd&lt;_Tp,&#32;_Abi&gt;(
1436 &#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::legendre(__n[__i],&#32;__x[__i]);&#32;});
1437 &#32;&#32;}
1438 
1439 _GLIBCXX_SIMD_MATH_CALL_(riemann_zeta)
1440 
1441 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;__detail::__odr_helper&gt;
1442 &#32;&#32;enable_if_t&lt;is_floating_point_v&lt;_Tp&gt;,&#32;simd&lt;_Tp,&#32;_Abi&gt;&gt;
1443 &#32;&#32;sph_bessel(<emphasis role="keyword">const</emphasis>&#32;fixed_size_simd&lt;<emphasis role="keywordtype">unsigned</emphasis>,&#32;simd_size_v&lt;_Tp,&#32;_Abi&gt;&gt;&amp;&#32;__n,
1444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__x)
1445 &#32;&#32;{
1446 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;simd&lt;_Tp,&#32;_Abi&gt;(
1447 &#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::sph_bessel(__n[__i],&#32;__x[__i]);&#32;});
1448 &#32;&#32;}
1449 
1450 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;__detail::__odr_helper&gt;
1451 &#32;&#32;enable_if_t&lt;is_floating_point_v&lt;_Tp&gt;,&#32;simd&lt;_Tp,&#32;_Abi&gt;&gt;
1452 &#32;&#32;sph_legendre(<emphasis role="keyword">const</emphasis>&#32;fixed_size_simd&lt;<emphasis role="keywordtype">unsigned</emphasis>,&#32;simd_size_v&lt;_Tp,&#32;_Abi&gt;&gt;&amp;&#32;__l,
1453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;fixed_size_simd&lt;<emphasis role="keywordtype">unsigned</emphasis>,&#32;simd_size_v&lt;_Tp,&#32;_Abi&gt;&gt;&amp;&#32;__m,
1454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;&#32;theta)
1455 &#32;&#32;{
1456 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;simd&lt;_Tp,&#32;_Abi&gt;([&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{
1457 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::assoc_legendre(__l[__i],&#32;__m[__i],&#32;theta[__i]);
1458 &#32;&#32;&#32;&#32;});
1459 &#32;&#32;}
1460 
1461 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;__detail::__odr_helper&gt;
1462 &#32;&#32;enable_if_t&lt;is_floating_point_v&lt;_Tp&gt;,&#32;simd&lt;_Tp,&#32;_Abi&gt;&gt;
1463 &#32;&#32;sph_neumann(<emphasis role="keyword">const</emphasis>&#32;fixed_size_simd&lt;<emphasis role="keywordtype">unsigned</emphasis>,&#32;simd_size_v&lt;_Tp,&#32;_Abi&gt;&gt;&amp;&#32;__n,
1464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__x)
1465 &#32;&#32;{
1466 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;simd&lt;_Tp,&#32;_Abi&gt;(
1467 &#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::sph_neumann(__n[__i],&#32;__x[__i]);&#32;});
1468 &#32;&#32;}
1469 <emphasis role="comment">//&#32;}}}</emphasis>
1470 
1471 <emphasis role="preprocessor">#undef&#32;_GLIBCXX_SIMD_CVTING2</emphasis>
1472 <emphasis role="preprocessor">#undef&#32;_GLIBCXX_SIMD_CVTING3</emphasis>
1473 <emphasis role="preprocessor">#undef&#32;_GLIBCXX_SIMD_MATH_CALL_</emphasis>
1474 <emphasis role="preprocessor">#undef&#32;_GLIBCXX_SIMD_MATH_CALL2_</emphasis>
1475 <emphasis role="preprocessor">#undef&#32;_GLIBCXX_SIMD_MATH_CALL3_</emphasis>
1476 
1477 _GLIBCXX_SIMD_END_NAMESPACE
1478 
1479 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
1480 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_EXPERIMENTAL_SIMD_MATH_H_</emphasis>
1481 
1482 <emphasis role="comment">//&#32;vim:&#32;foldmethod=marker&#32;sw=2&#32;ts=8&#32;noet&#32;sts=2</emphasis>
</programlisting></section>
