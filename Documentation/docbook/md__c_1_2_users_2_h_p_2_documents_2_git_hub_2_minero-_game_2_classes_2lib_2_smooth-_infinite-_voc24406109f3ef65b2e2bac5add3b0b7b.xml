<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2_smooth-_infinite-_voc24406109f3ef65b2e2bac5add3b0b7b" xml:lang="en-US">
<title>Smooth-Infinite-Voxel-Terrain</title>
<indexterm><primary>Smooth-Infinite-Voxel-Terrain</primary></indexterm>

<para><anchor xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2_smooth-_infinite-_voc24406109f3ef65b2e2bac5add3b0b7b_1autotoc_md715"/>A voxel terrain generator that allows artists to easily create endless, diverse game worlds.</para>

<para>dependencies: <link xlink:href="www.transvoxel.org">transvoxel</link> and <link xlink:href="www.volumesoffun.com">polyvox</link></para>

<para>octree:</para>

<para>The original version of polyvox used virtual memory to page in &amp; out terrain chunks.</para>

<para>For this project, we use octree instead, as it allows us to easily implement chunk LOD.</para>

<para>Built-in multi-threading supports memory-consuming components such as A.I. units and surface vegetation.</para>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2_smooth-_infinite-_voc24406109f3ef65b2e2bac5add3b0b7b_1autotoc_md716">
<title>Chunk management with octrees</title>

<para>Each leaf node contains a single chunk, whose LOD is updated by the tree. The player carries a voxel modification component integrated with polyvox, and each octree calculates the distance between the component and its central location per frame. The variables mentioned above are used to determine a chunk&apos;s LOD, which tremendously improves the overall performance during runtime. Here are some pictures comparing a terrain segment generated with the conventional method that loads chunk with virtual memory paging, and another one generated with the maneuver mentioned above.</para>

<para>Generated with conventional method:</para>

<para>A small-sized, limited with virtual memory paging:</para>

<para></para>

<para>Generated with octrees:</para>

<para>Huge terrain segment with vegetation and dynamic LOD</para>

<para>Please note that smooth shading is supported. The lowpoly effect is intentionally created by the terrain material with DDX and DDY nodes.</para>

<para>  </para>

<para>Each octree calculates the distance between the player and its central position to determine its LOD. A lower LOD indicates a larger octree with a single chunk in the same size.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2_smooth-_infinite-_voc24406109f3ef65b2e2bac5add3b0b7b_1autotoc_md717">
<title>Drawbacks of virtual memory paging:</title>

<para>When used with a large-scale polygon engine, chunks must be paged out of virtual memory in a constructor. As a result, engine-specific multi-threading functions can not access terrain data during construction, which is probably the reason why the conventional method is so slow. </para>
</section>
</section>
