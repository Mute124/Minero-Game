<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2bits_2ranges__util_8h_source" xml:lang="en-US">
<title>ranges_util.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/bits/ranges_util.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Utilities&#32;for&#32;representing&#32;and&#32;manipulating&#32;ranges&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2019-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_RANGES_UTIL_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_RANGES_UTIL_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
34 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/ranges_base.h&gt;</emphasis>
35 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/utility.h&gt;</emphasis>
36 
37 <emphasis role="preprocessor">#ifdef&#32;__cpp_lib_ranges</emphasis>
38 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
39 {
40 _GLIBCXX_BEGIN_NAMESPACE_VERSION
41 <emphasis role="keyword">namespace&#32;</emphasis>ranges
42 {
43 &#32;&#32;<emphasis role="comment">//&#32;C++20&#32;24.5&#32;[range.utility]&#32;Range&#32;utilities</emphasis>
44 
45 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>__detail
46 &#32;&#32;{
47 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Range&gt;
48 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__simple_view&#32;=&#32;view&lt;_Range&gt;&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a7b8ad0b27a927682837f95528fa454f5">range&lt;const _Range&gt;</link>
49 &#32;&#32;&#32;&#32;&amp;&amp;&#32;same_as&lt;iterator_t&lt;_Range&gt;,&#32;iterator_t&lt;const&#32;_Range&gt;&gt;
50 &#32;&#32;&#32;&#32;&amp;&amp;&#32;same_as&lt;sentinel_t&lt;_Range&gt;,&#32;sentinel_t&lt;const&#32;_Range&gt;&gt;;
51 
52 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_It&gt;
53 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__has_arrow&#32;=&#32;input_iterator&lt;_It&gt;
54 &#32;&#32;&#32;&#32;&amp;&amp;&#32;(is_pointer_v&lt;_It&gt;&#32;||&#32;<emphasis role="keyword">requires</emphasis>(_It&#32;__it)&#32;{&#32;__it.operator-&gt;();&#32;});
55 
56 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
57 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__different_from
58 &#32;&#32;&#32;&#32;=&#32;!same_as&lt;remove_cvref_t&lt;_Tp&gt;,&#32;remove_cvref_t&lt;_Up&gt;&gt;;
59 &#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;__detail</emphasis>
60 
62 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Derived&gt;
63 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;is_class_v&lt;_Derived&gt;&#32;&amp;&amp;&#32;same_as&lt;_Derived,&#32;remove_cv_t&lt;_Derived&gt;&gt;
64 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>view_interface
65 &#32;&#32;&#32;&#32;{
66 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
67 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Derived&amp;&#32;_M_derived()&#32;noexcept
68 &#32;&#32;&#32;&#32;&#32;&#32;{
69 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(derived_from&lt;_Derived,&#32;view_interface&lt;_Derived&gt;&gt;);
70 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(view&lt;_Derived&gt;);
71 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Derived&amp;<emphasis role="keyword">&gt;</emphasis>(*this);
72 &#32;&#32;&#32;&#32;&#32;&#32;}
73 
74 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Derived&amp;&#32;_M_derived()&#32;const&#32;noexcept
75 &#32;&#32;&#32;&#32;&#32;&#32;{
76 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(derived_from&lt;_Derived,&#32;view_interface&lt;_Derived&gt;&gt;);
77 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(view&lt;_Derived&gt;);
78 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>_Derived&amp;<emphasis role="keyword">&gt;</emphasis>(*this);
79 &#32;&#32;&#32;&#32;&#32;&#32;}
80 
81 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
82 &#32;&#32;&#32;&#32;&#32;&#32;_S_bool(<emphasis role="keywordtype">bool</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>;&#32;<emphasis role="comment">//&#32;not&#32;defined</emphasis>
83 
84 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
85 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
86 &#32;&#32;&#32;&#32;_S_empty(_Tp&amp;&#32;__t)
87 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(_S_bool(ranges::begin(__t)&#32;==&#32;ranges::end(__t))))
88 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;ranges::begin(__t)&#32;==&#32;ranges::end(__t);&#32;}
89 
90 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
91 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
92 &#32;&#32;&#32;&#32;_S_size(_Tp&amp;&#32;__t)
93 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(ranges::end(__t)&#32;-&#32;ranges::begin(__t)))
94 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;ranges::end(__t)&#32;-&#32;ranges::begin(__t);&#32;}
95 
96 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
97 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
98 &#32;&#32;&#32;&#32;&#32;&#32;empty()
99 &#32;&#32;&#32;&#32;&#32;&#32;noexcept(noexcept(_S_empty(_M_derived())))
100 &#32;&#32;&#32;&#32;&#32;&#32;requires&#32;forward_range&lt;_Derived&gt;
101 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_empty(_M_derived());&#32;}
102 
103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
104 &#32;&#32;&#32;&#32;&#32;&#32;empty()&#32;const
105 &#32;&#32;&#32;&#32;&#32;&#32;noexcept(noexcept(_S_empty(_M_derived())))
106 &#32;&#32;&#32;&#32;&#32;&#32;requires&#32;forward_range&lt;const&#32;_Derived&gt;
107 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_empty(_M_derived());&#32;}
108 
109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">explicit</emphasis>
110 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>()&#32;noexcept(noexcept(ranges::empty(_M_derived())))
111 &#32;&#32;&#32;&#32;&#32;&#32;requires&#32;requires&#32;{&#32;ranges::empty(_M_derived());&#32;}
112 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!ranges::empty(_M_derived());&#32;}
113 
114 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">explicit</emphasis>
115 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>()&#32;const&#32;noexcept(noexcept(ranges::empty(_M_derived())))
116 &#32;&#32;&#32;&#32;&#32;&#32;requires&#32;requires&#32;{&#32;ranges::empty(_M_derived());&#32;}
117 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!ranges::empty(_M_derived());&#32;}
118 
119 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
120 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>()&#32;noexcept(noexcept(ranges::begin(_M_derived())))
121 &#32;&#32;&#32;&#32;&#32;&#32;requires&#32;contiguous_iterator&lt;iterator_t&lt;_Derived&gt;&gt;
122 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::to_address(ranges::begin(_M_derived()));&#32;}
123 
124 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
125 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>()&#32;const&#32;noexcept(noexcept(ranges::begin(_M_derived())))
126 &#32;&#32;&#32;&#32;&#32;&#32;requires&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a7b8ad0b27a927682837f95528fa454f5">range</link>&lt;const&#32;_Derived&gt;
127 &#32;&#32;&#32;&#32;&amp;&amp;&#32;contiguous_iterator&lt;iterator_t&lt;const&#32;_Derived&gt;&gt;
128 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::to_address(ranges::begin(_M_derived()));&#32;}
129 
130 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
131 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;noexcept(noexcept(_S_size(_M_derived())))
132 &#32;&#32;&#32;&#32;&#32;&#32;requires&#32;forward_range&lt;_Derived&gt;
133 &#32;&#32;&#32;&#32;&amp;&amp;&#32;sized_sentinel_for&lt;sentinel_t&lt;_Derived&gt;,&#32;iterator_t&lt;_Derived&gt;&gt;
134 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_size(_M_derived());&#32;}
135 
136 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
137 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;const&#32;noexcept(noexcept(_S_size(_M_derived())))
138 &#32;&#32;&#32;&#32;&#32;&#32;requires&#32;forward_range&lt;const&#32;_Derived&gt;
139 &#32;&#32;&#32;&#32;&amp;&amp;&#32;sized_sentinel_for&lt;sentinel_t&lt;const&#32;_Derived&gt;,
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator_t&lt;const&#32;_Derived&gt;&gt;
141 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_size(_M_derived());&#32;}
142 
143 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)
144 &#32;&#32;&#32;&#32;&#32;&#32;front()&#32;<emphasis role="keyword">requires</emphasis>&#32;forward_range&lt;_Derived&gt;
145 &#32;&#32;&#32;&#32;&#32;&#32;{
146 &#32;&#32;&#32;&#32;__glibcxx_assert(!empty());
147 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*ranges::begin(_M_derived());
148 &#32;&#32;&#32;&#32;&#32;&#32;}
149 
150 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)
151 &#32;&#32;&#32;&#32;&#32;&#32;front()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">requires</emphasis>&#32;forward_range&lt;const&#32;_Derived&gt;
152 &#32;&#32;&#32;&#32;&#32;&#32;{
153 &#32;&#32;&#32;&#32;__glibcxx_assert(!empty());
154 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*ranges::begin(_M_derived());
155 &#32;&#32;&#32;&#32;&#32;&#32;}
156 
157 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)
158 &#32;&#32;&#32;&#32;&#32;&#32;back()
159 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;bidirectional_range&lt;_Derived&gt;&#32;&amp;&amp;&#32;common_range&lt;_Derived&gt;
160 &#32;&#32;&#32;&#32;&#32;&#32;{
161 &#32;&#32;&#32;&#32;__glibcxx_assert(!empty());
162 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*ranges::prev(ranges::end(_M_derived()));
163 &#32;&#32;&#32;&#32;&#32;&#32;}
164 
165 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)
166 &#32;&#32;&#32;&#32;&#32;&#32;back()&#32;<emphasis role="keyword">const</emphasis>
167 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;bidirectional_range&lt;const&#32;_Derived&gt;
168 &#32;&#32;&#32;&#32;&amp;&amp;&#32;common_range&lt;const&#32;_Derived&gt;
169 &#32;&#32;&#32;&#32;&#32;&#32;{
170 &#32;&#32;&#32;&#32;__glibcxx_assert(!empty());
171 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*ranges::prev(ranges::end(_M_derived()));
172 &#32;&#32;&#32;&#32;&#32;&#32;}
173 
174 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;random_access_range&#32;_Range&#32;=&#32;_Derived&gt;
175 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)
176 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>[](range_difference_t&lt;_Range&gt;&#32;__n)
177 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;ranges::begin(_M_derived())[__n];&#32;}
178 
179 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;random_access_range&#32;_Range&#32;=&#32;const&#32;_Derived&gt;
180 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)
181 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>[](range_difference_t&lt;_Range&gt;&#32;__n)&#32;<emphasis role="keyword">const</emphasis>
182 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;ranges::begin(_M_derived())[__n];&#32;}
183 &#32;&#32;&#32;&#32;};
184 
185 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>__detail
186 &#32;&#32;{
187 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_From,&#32;<emphasis role="keyword">typename</emphasis>&#32;_To&gt;
188 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__uses_nonqualification_pointer_conversion
189 &#32;&#32;&#32;&#32;=&#32;is_pointer_v&lt;_From&gt;&#32;&amp;&amp;&#32;is_pointer_v&lt;_To&gt;
190 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!convertible_to&lt;remove_pointer_t&lt;_From&gt;(*)[],
191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;remove_pointer_t&lt;_To&gt;(*)[]&gt;;
192 
193 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_From,&#32;<emphasis role="keyword">typename</emphasis>&#32;_To&gt;
194 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__convertible_to_non_slicing&#32;=&#32;convertible_to&lt;_From,&#32;_To&gt;
195 &#32;&#32;&#32;&#32;&amp;&amp;&#32;!__uses_nonqualification_pointer_conversion&lt;decay_t&lt;_From&gt;,
196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decay_t&lt;_To&gt;&gt;;
197 
198 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
199 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__pair_like
200 &#32;&#32;&#32;&#32;=&#32;!is_reference_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">requires</emphasis>(_Tp&#32;__t)
201 &#32;&#32;&#32;&#32;{
202 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;tuple_size&lt;_Tp&gt;::type;
203 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;derived_from&lt;tuple_size&lt;_Tp&gt;,&#32;integral_constant&lt;size_t,&#32;2&gt;&gt;;
204 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;tuple_element_t&lt;0,&#32;remove_const_t&lt;_Tp&gt;&gt;;
205 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;tuple_element_t&lt;1,&#32;remove_const_t&lt;_Tp&gt;&gt;;
206 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get&lt;0&gt;</link>(__t)&#32;}&#32;-&gt;&#32;convertible_to&lt;const&#32;tuple_element_t&lt;0,&#32;_Tp&gt;&amp;&gt;;
207 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get&lt;1&gt;</link>(__t)&#32;}&#32;-&gt;&#32;convertible_to&lt;const&#32;tuple_element_t&lt;1,&#32;_Tp&gt;&amp;&gt;;
208 &#32;&#32;&#32;&#32;};
209 
210 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Vp&gt;
211 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__pair_like_convertible_from
212 &#32;&#32;&#32;&#32;=&#32;!<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a7b8ad0b27a927682837f95528fa454f5">range&lt;_Tp&gt;</link>&#32;&amp;&amp;&#32;__pair_like&lt;_Tp&gt;
213 &#32;&#32;&#32;&#32;&amp;&amp;&#32;constructible_from&lt;_Tp,&#32;_Up,&#32;_Vp&gt;
214 &#32;&#32;&#32;&#32;&amp;&amp;&#32;__convertible_to_non_slicing&lt;_Up,&#32;tuple_element_t&lt;0,&#32;_Tp&gt;&gt;
215 &#32;&#32;&#32;&#32;&amp;&amp;&#32;convertible_to&lt;_Vp,&#32;tuple_element_t&lt;1,&#32;_Tp&gt;&gt;;
216 
217 &#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;__detail</emphasis>
218 
219 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>views&#32;{&#32;<emphasis role="keyword">struct&#32;</emphasis>_Drop;&#32;}&#32;<emphasis role="comment">//&#32;defined&#32;in&#32;&lt;ranges&gt;</emphasis>
220 
221 &#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;subrange_kind&#32;:&#32;<emphasis role="keywordtype">bool</emphasis>&#32;{&#32;unsized,&#32;sized&#32;};
222 
224 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_or_output_iterator&#32;_It,&#32;sentinel_for&lt;_It&gt;&#32;_Sent&#32;=&#32;_It,
225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;subrange_kind&#32;_Kind&#32;=&#32;sized_sentinel_for&lt;_Sent,&#32;_It&gt;
226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;subrange_kind::sized&#32;:&#32;subrange_kind::unsized&gt;
227 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;(_Kind&#32;==&#32;subrange_kind::sized&#32;||&#32;!sized_sentinel_for&lt;_Sent,&#32;_It&gt;)
228 &#32;&#32;&#32;&#32;<emphasis role="keyword">class</emphasis>&#32;subrange&#32;:&#32;public&#32;view_interface&lt;subrange&lt;_It,&#32;_Sent,&#32;_Kind&gt;&gt;
229 &#32;&#32;&#32;&#32;{
230 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
231 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_S_store_size
232 &#32;&#32;&#32;&#32;=&#32;_Kind&#32;==&#32;subrange_kind::sized&#32;&amp;&amp;&#32;!sized_sentinel_for&lt;_Sent,&#32;_It&gt;;
233 
234 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>views::_Drop;&#32;<emphasis role="comment">//&#32;Needs&#32;to&#32;inspect&#32;_S_store_size.</emphasis>
235 
236 &#32;&#32;&#32;&#32;&#32;&#32;_It&#32;_M_begin&#32;=&#32;_It();
237 &#32;&#32;&#32;&#32;&#32;&#32;[[no_unique_address]]&#32;_Sent&#32;_M_end&#32;=&#32;_Sent();
238 
239 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__size_type
240 &#32;&#32;&#32;&#32;=&#32;__detail::__make_unsigned_like_t&lt;iter_difference_t&lt;_It&gt;&gt;;
241 
242 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;=&#32;_S_store_size&gt;
243 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Size
244 &#32;&#32;&#32;&#32;{&#32;};
245 
246 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
247 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Size&lt;_Tp,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
248 &#32;&#32;&#32;&#32;{&#32;_Tp&#32;_M_size;&#32;};
249 
250 &#32;&#32;&#32;&#32;&#32;&#32;[[no_unique_address]]&#32;_Size&lt;__size_type&gt;&#32;_M_size&#32;=&#32;{};
251 
252 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
253 &#32;&#32;&#32;&#32;&#32;&#32;subrange()&#32;<emphasis role="keyword">requires</emphasis>&#32;default_initializable&lt;_It&gt;&#32;=&#32;default;
254 
255 &#32;&#32;&#32;&#32;&#32;&#32;constexpr
256 &#32;&#32;&#32;&#32;&#32;&#32;subrange(__detail::__convertible_to_non_slicing&lt;_It&gt;&#32;auto&#32;__i,&#32;_Sent&#32;__s)
257 &#32;&#32;&#32;&#32;&#32;&#32;noexcept(is_nothrow_constructible_v&lt;_It,&#32;decltype(__i)&gt;
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_nothrow_constructible_v&lt;_Sent,&#32;_Sent&amp;&gt;)
259 &#32;&#32;&#32;&#32;requires&#32;(!_S_store_size)
260 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_begin(<link linkend="_namespacestd">std</link>::move(__i)),&#32;_M_end(__s)
261 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
262 
263 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
264 &#32;&#32;&#32;&#32;&#32;&#32;subrange(__detail::__convertible_to_non_slicing&lt;_It&gt;&#32;<emphasis role="keyword">auto</emphasis>&#32;__i,&#32;_Sent&#32;__s,
265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__size_type&#32;__n)
266 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(is_nothrow_constructible_v&lt;_It,&#32;<emphasis role="keyword">decltype</emphasis>(__i)&gt;
267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_nothrow_constructible_v&lt;_Sent,&#32;_Sent&amp;&gt;)
268 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;(_Kind&#32;==&#32;subrange_kind::sized)
269 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_begin(<link linkend="_namespacestd">std</link>::<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(__i)),&#32;_M_end(__s)
270 &#32;&#32;&#32;&#32;&#32;&#32;{
271 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_S_store_size)
272 &#32;&#32;&#32;&#32;&#32;&#32;_M_size._M_size&#32;=&#32;__n;
273 &#32;&#32;&#32;&#32;&#32;&#32;}
274 
275 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;__detail::__different_from&lt;subrange&gt;&#32;_Rng&gt;
276 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;borrowed_range&lt;_Rng&gt;
277 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__detail::__convertible_to_non_slicing&lt;iterator_t&lt;_Rng&gt;,&#32;_It&gt;
278 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;convertible_to&lt;sentinel_t&lt;_Rng&gt;,&#32;_Sent&gt;
279 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
280 &#32;&#32;&#32;&#32;subrange(_Rng&amp;&amp;&#32;__r)
281 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(subrange(__r,&#32;ranges::size(__r))))
282 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;_S_store_size&#32;&amp;&amp;&#32;sized_range&lt;_Rng&gt;
283 &#32;&#32;&#32;&#32;:&#32;subrange(__r,&#32;ranges::size(__r))
284 &#32;&#32;&#32;&#32;{&#32;}
285 
286 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;__detail::__different_from&lt;subrange&gt;&#32;_Rng&gt;
287 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;borrowed_range&lt;_Rng&gt;
288 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__detail::__convertible_to_non_slicing&lt;iterator_t&lt;_Rng&gt;,&#32;_It&gt;
289 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;convertible_to&lt;sentinel_t&lt;_Rng&gt;,&#32;_Sent&gt;
290 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
291 &#32;&#32;&#32;&#32;subrange(_Rng&amp;&amp;&#32;__r)
292 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(subrange(ranges::begin(__r),&#32;ranges::end(__r))))
293 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;(!_S_store_size)
294 &#32;&#32;&#32;&#32;:&#32;subrange(ranges::<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>(__r),&#32;ranges::<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(__r))
295 &#32;&#32;&#32;&#32;{&#32;}
296 
297 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;borrowed_range&#32;_Rng&gt;
298 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;__detail::__convertible_to_non_slicing&lt;iterator_t&lt;_Rng&gt;,&#32;_It&gt;
299 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;convertible_to&lt;sentinel_t&lt;_Rng&gt;,&#32;_Sent&gt;
300 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
301 &#32;&#32;&#32;&#32;subrange(_Rng&amp;&amp;&#32;__r,&#32;__size_type&#32;__n)
302 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(subrange(ranges::begin(__r),&#32;ranges::end(__r),&#32;__n)))
303 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;(_Kind&#32;==&#32;subrange_kind::sized)
304 &#32;&#32;&#32;&#32;:&#32;subrange{ranges::<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>(__r),&#32;ranges::<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(__r),&#32;__n}
305 &#32;&#32;&#32;&#32;{&#32;}
306 
307 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;__detail::__different_from&lt;subrange&gt;&#32;_PairLike&gt;
308 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;__detail::__pair_like_convertible_from&lt;_PairLike,&#32;<emphasis role="keyword">const</emphasis>&#32;_It&amp;,
309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Sent&amp;&gt;
310 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
311 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;_PairLike()<emphasis role="keyword">&#32;const</emphasis>
312 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_PairLike(_M_begin,&#32;_M_end);&#32;}
313 
314 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_It
315 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>()&#32;const&#32;requires&#32;copyable&lt;_It&gt;
316 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_begin;&#32;}
317 
318 &#32;&#32;&#32;&#32;&#32;&#32;[[nodiscard]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_It
319 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>()&#32;<emphasis role="keyword">requires</emphasis>&#32;(!copyable&lt;_It&gt;)
320 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(_M_begin);&#32;}
321 
322 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Sent&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_end;&#32;}
323 
324 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;empty()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_begin&#32;==&#32;_M_end;&#32;}
325 
326 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__size_type
327 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;const&#32;requires&#32;(_Kind&#32;==&#32;subrange_kind::sized)
328 &#32;&#32;&#32;&#32;&#32;&#32;{
329 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_S_store_size)
330 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_size._M_size;
331 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
332 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__detail::__to_unsigned_like(_M_end&#32;-&#32;_M_begin);
333 &#32;&#32;&#32;&#32;&#32;&#32;}
334 
335 &#32;&#32;&#32;&#32;&#32;&#32;[[nodiscard]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;subrange
336 &#32;&#32;&#32;&#32;&#32;&#32;next(iter_difference_t&lt;_It&gt;&#32;__n&#32;=&#32;1)&#32;const&#32;&amp;
337 &#32;&#32;&#32;&#32;requires&#32;forward_iterator&lt;_It&gt;
338 &#32;&#32;&#32;&#32;&#32;&#32;{
339 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
340 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>.advance(__n);
341 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
342 &#32;&#32;&#32;&#32;&#32;&#32;}
343 
344 &#32;&#32;&#32;&#32;&#32;&#32;[[nodiscard]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;subrange
345 &#32;&#32;&#32;&#32;&#32;&#32;next(iter_difference_t&lt;_It&gt;&#32;__n&#32;=&#32;1)&#32;&amp;&amp;
346 &#32;&#32;&#32;&#32;&#32;&#32;{
347 &#32;&#32;&#32;&#32;advance(__n);
348 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(*<emphasis role="keyword">this</emphasis>);
349 &#32;&#32;&#32;&#32;&#32;&#32;}
350 
351 &#32;&#32;&#32;&#32;&#32;&#32;[[nodiscard]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;subrange
352 &#32;&#32;&#32;&#32;&#32;&#32;prev(iter_difference_t&lt;_It&gt;&#32;__n&#32;=&#32;1)&#32;const
353 &#32;&#32;&#32;&#32;requires&#32;bidirectional_iterator&lt;_It&gt;
354 &#32;&#32;&#32;&#32;&#32;&#32;{
355 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
356 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>.advance(-__n);
357 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
358 &#32;&#32;&#32;&#32;&#32;&#32;}
359 
360 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;subrange&amp;
361 &#32;&#32;&#32;&#32;&#32;&#32;advance(iter_difference_t&lt;_It&gt;&#32;__n)
362 &#32;&#32;&#32;&#32;&#32;&#32;{
363 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
364 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;3433.&#32;subrange::advance(n)&#32;has&#32;UB&#32;when&#32;n&#32;&lt;&#32;0</emphasis>
365 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(bidirectional_iterator&lt;_It&gt;)
366 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&lt;&#32;0)
367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::advance(_M_begin,&#32;__n);
369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_S_store_size)
370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_size._M_size&#32;+=&#32;__detail::__to_unsigned_like(-__n);
371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
373 
374 &#32;&#32;&#32;&#32;__glibcxx_assert(__n&#32;&gt;=&#32;0);
375 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__d&#32;=&#32;__n&#32;-&#32;ranges::advance(_M_begin,&#32;__n,&#32;_M_end);
376 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_S_store_size)
377 &#32;&#32;&#32;&#32;&#32;&#32;_M_size._M_size&#32;-=&#32;__detail::__to_unsigned_like(__d);
378 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
379 &#32;&#32;&#32;&#32;&#32;&#32;}
380 &#32;&#32;&#32;&#32;};
381 
382 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_or_output_iterator&#32;_It,&#32;sentinel_for&lt;_It&gt;&#32;_Sent&gt;
383 &#32;&#32;&#32;&#32;subrange(_It,&#32;_Sent)&#32;-&gt;&#32;subrange&lt;_It,&#32;_Sent&gt;;
384 
385 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_or_output_iterator&#32;_It,&#32;sentinel_for&lt;_It&gt;&#32;_Sent&gt;
386 &#32;&#32;&#32;&#32;subrange(_It,&#32;_Sent,
387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::__make_unsigned_like_t&lt;iter_difference_t&lt;_It&gt;&gt;)
388 &#32;&#32;&#32;&#32;&#32;&#32;-&gt;&#32;subrange&lt;_It,&#32;_Sent,&#32;subrange_kind::sized&gt;;
389 
390 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;borrowed_range&#32;_Rng&gt;
391 &#32;&#32;&#32;&#32;subrange(_Rng&amp;&amp;)
392 &#32;&#32;&#32;&#32;&#32;&#32;-&gt;&#32;subrange&lt;iterator_t&lt;_Rng&gt;,&#32;sentinel_t&lt;_Rng&gt;,
393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(sized_range&lt;_Rng&gt;
394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;sized_sentinel_for&lt;sentinel_t&lt;_Rng&gt;,&#32;iterator_t&lt;_Rng&gt;&gt;)
395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;subrange_kind::sized&#32;:&#32;subrange_kind::unsized&gt;;
396 
397 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;borrowed_range&#32;_Rng&gt;
398 &#32;&#32;&#32;&#32;subrange(_Rng&amp;&amp;,
399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::__make_unsigned_like_t&lt;range_difference_t&lt;_Rng&gt;&gt;)
400 &#32;&#32;&#32;&#32;&#32;&#32;-&gt;&#32;subrange&lt;iterator_t&lt;_Rng&gt;,&#32;sentinel_t&lt;_Rng&gt;,&#32;subrange_kind::sized&gt;;
401 
402 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Num,&#32;<emphasis role="keyword">class</emphasis>&#32;_It,&#32;<emphasis role="keyword">class</emphasis>&#32;_Sent,&#32;subrange_kind&#32;_Kind&gt;
403 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;(_Num&#32;&lt;&#32;2)
404 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
405 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(<emphasis role="keyword">const</emphasis>&#32;subrange&lt;_It,&#32;_Sent,&#32;_Kind&gt;&amp;&#32;__r)
406 &#32;&#32;&#32;&#32;{
407 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Num&#32;==&#32;0)
408 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r.begin();
409 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
410 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r.end();
411 &#32;&#32;&#32;&#32;}
412 
413 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Num,&#32;<emphasis role="keyword">class</emphasis>&#32;_It,&#32;<emphasis role="keyword">class</emphasis>&#32;_Sent,&#32;subrange_kind&#32;_Kind&gt;
414 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;(_Num&#32;&lt;&#32;2)
415 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
416 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(subrange&lt;_It,&#32;_Sent,&#32;_Kind&gt;&amp;&amp;&#32;__r)
417 &#32;&#32;&#32;&#32;{
418 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Num&#32;==&#32;0)
419 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r.begin();
420 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
421 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r.end();
422 &#32;&#32;&#32;&#32;}
423 
424 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_It,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sent,&#32;subrange_kind&#32;_Kind&gt;
425 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
426 &#32;&#32;&#32;&#32;&#32;&#32;enable_borrowed_range&lt;subrange&lt;_It,&#32;_Sent,&#32;_Kind&gt;&gt;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
427 
428 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;range&#32;_Range&gt;
429 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>borrowed_subrange_t&#32;=&#32;__conditional_t&lt;borrowed_range&lt;_Range&gt;,
430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;subrange&lt;iterator_t&lt;_Range&gt;&gt;,
431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dangling&gt;;
432 }&#32;<emphasis role="comment">//&#32;namespace&#32;ranges</emphasis>
433 
434 <emphasis role="comment">//&#32;The&#32;following&#32;ranges&#32;algorithms&#32;are&#32;used&#32;by&#32;&lt;ranges&gt;,&#32;and&#32;are&#32;defined&#32;here</emphasis>
435 <emphasis role="comment">//&#32;so&#32;that&#32;&lt;ranges&gt;&#32;can&#32;avoid&#32;including&#32;all&#32;of&#32;&lt;bits/ranges_algo.h&gt;.</emphasis>
436 <emphasis role="keyword">namespace&#32;</emphasis>ranges
437 {
438 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__find_fn
439 &#32;&#32;{
440 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity&gt;
442 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirect_binary_predicate&lt;ranges::equal_to,
443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;_Iter,&#32;_Proj&gt;,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*&gt;
444 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Iter
445 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,
446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
447 &#32;&#32;&#32;&#32;&#32;&#32;{
448 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first&#32;!=&#32;__last
449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!(std::__invoke(__proj,&#32;*__first)&#32;==&#32;__value))
450 &#32;&#32;&#32;&#32;&#32;&#32;++__first;
451 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
452 &#32;&#32;&#32;&#32;&#32;&#32;}
453 
454 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_range&#32;_Range,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity&gt;
455 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirect_binary_predicate&lt;ranges::equal_to,
456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;,
457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*&gt;
458 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;borrowed_iterator_t&lt;_Range&gt;
459 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
460 &#32;&#32;&#32;&#32;&#32;&#32;{
461 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__value,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
463 &#32;&#32;&#32;&#32;&#32;&#32;}
464 &#32;&#32;};
465 
466 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__find_fn&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>{};
467 
468 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__find_if_fn
469 &#32;&#32;{
470 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,
472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_unary_predicate&lt;projected&lt;_Iter,&#32;_Proj&gt;&gt;&#32;_Pred&gt;
473 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Iter
474 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,
475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&#32;__pred,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
476 &#32;&#32;&#32;&#32;&#32;&#32;{
477 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first&#32;!=&#32;__last
478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!(<emphasis role="keywordtype">bool</emphasis>)std::__invoke(__pred,&#32;std::__invoke(__proj,&#32;*__first)))
479 &#32;&#32;&#32;&#32;&#32;&#32;++__first;
480 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
481 &#32;&#32;&#32;&#32;&#32;&#32;}
482 
483 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_range&#32;_Range,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_unary_predicate&lt;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;&gt;
485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&gt;
486 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;borrowed_iterator_t&lt;_Range&gt;
487 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Pred&#32;__pred,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
488 &#32;&#32;&#32;&#32;&#32;&#32;{
489 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__pred),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
491 &#32;&#32;&#32;&#32;&#32;&#32;}
492 &#32;&#32;};
493 
494 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__find_if_fn&#32;<link linkend="_namespacestd_1a12540b98a8b3f5862173e50b92f1de81">find_if</link>{};
495 
496 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__find_if_not_fn
497 &#32;&#32;{
498 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,
500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_unary_predicate&lt;projected&lt;_Iter,&#32;_Proj&gt;&gt;&#32;_Pred&gt;
501 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Iter
502 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,
503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&#32;__pred,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
504 &#32;&#32;&#32;&#32;&#32;&#32;{
505 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first&#32;!=&#32;__last
506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(<emphasis role="keywordtype">bool</emphasis>)std::__invoke(__pred,&#32;std::__invoke(__proj,&#32;*__first)))
507 &#32;&#32;&#32;&#32;&#32;&#32;++__first;
508 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
509 &#32;&#32;&#32;&#32;&#32;&#32;}
510 
511 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_range&#32;_Range,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_unary_predicate&lt;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;&gt;
513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&gt;
514 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;borrowed_iterator_t&lt;_Range&gt;
515 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Pred&#32;__pred,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
516 &#32;&#32;&#32;&#32;&#32;&#32;{
517 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__pred),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
519 &#32;&#32;&#32;&#32;&#32;&#32;}
520 &#32;&#32;};
521 
522 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__find_if_not_fn&#32;<link linkend="_namespacestd_1ae19772fb8787d5b9c35285c98dfa5d79">find_if_not</link>{};
523 
524 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iter2&gt;
525 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>in_in_result
526 &#32;&#32;&#32;&#32;{
527 &#32;&#32;&#32;&#32;&#32;&#32;[[no_unique_address]]&#32;_Iter1&#32;in1;
528 &#32;&#32;&#32;&#32;&#32;&#32;[[no_unique_address]]&#32;_Iter2&#32;in2;
529 
530 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2&gt;
531 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;convertible_to&lt;const&#32;_Iter1&amp;,&#32;_IIter1&gt;
532 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;convertible_to&lt;const&#32;_Iter2&amp;,&#32;_IIter2&gt;
533 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
534 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;in_in_result&lt;_IIter1,&#32;_IIter2&gt;()&#32;const&#32;&amp;
535 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{in1,&#32;in2};&#32;}
536 
537 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2&gt;
538 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;convertible_to&lt;_Iter1,&#32;_IIter1&gt;
539 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;convertible_to&lt;_Iter2,&#32;_IIter2&gt;
540 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
541 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;in_in_result&lt;_IIter1,&#32;_IIter2&gt;()&#32;&amp;&amp;
542 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(in1),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(in2)};&#32;}
543 &#32;&#32;&#32;&#32;};
544 
545 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iter2&gt;
546 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>mismatch_result&#32;=&#32;in_in_result&lt;_Iter1,&#32;_Iter2&gt;;
547 
548 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__mismatch_fn
549 &#32;&#32;{
550 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_Iter1,&#32;sentinel_for&lt;_Iter1&gt;&#32;_Sent1,
551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input_iterator&#32;_Iter2,&#32;sentinel_for&lt;_Iter2&gt;&#32;_Sent2,
552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred&#32;=&#32;ranges::equal_to,
553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj1&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj2&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity&gt;
554 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_comparable&lt;_Iter1,&#32;_Iter2,&#32;_Pred,&#32;_Proj1,&#32;_Proj2&gt;
555 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;mismatch_result&lt;_Iter1,&#32;_Iter2&gt;
556 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter1&#32;__first1,&#32;_Sent1&#32;__last1,
557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Iter2&#32;__first2,&#32;_Sent2&#32;__last2,&#32;_Pred&#32;__pred&#32;=&#32;{},
558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Proj1&#32;__proj1&#32;=&#32;{},&#32;_Proj2&#32;__proj2&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
559 &#32;&#32;&#32;&#32;&#32;&#32;{
560 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first1&#32;!=&#32;__last1&#32;&amp;&amp;&#32;__first2&#32;!=&#32;__last2
561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(<emphasis role="keywordtype">bool</emphasis>)std::__invoke(__pred,
562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj1,&#32;*__first1),
563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj2,&#32;*__first2)))
564 &#32;&#32;&#32;&#32;{
565 &#32;&#32;&#32;&#32;&#32;&#32;++__first1;
566 &#32;&#32;&#32;&#32;&#32;&#32;++__first2;
567 &#32;&#32;&#32;&#32;}
568 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first1),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first2)&#32;};
569 &#32;&#32;&#32;&#32;&#32;&#32;}
570 
571 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_range&#32;_Range1,&#32;input_range&#32;_Range2,
572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred&#32;=&#32;ranges::equal_to,
573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj1&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj2&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>&gt;
574 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_comparable&lt;iterator_t&lt;_Range1&gt;,&#32;iterator_t&lt;_Range2&gt;,
575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred,&#32;_Proj1,&#32;_Proj2&gt;
576 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;mismatch_result&lt;iterator_t&lt;_Range1&gt;,&#32;iterator_t&lt;_Range2&gt;&gt;
577 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range1&amp;&amp;&#32;__r1,&#32;_Range2&amp;&amp;&#32;__r2,&#32;_Pred&#32;__pred&#32;=&#32;{},
578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Proj1&#32;__proj1&#32;=&#32;{},&#32;_Proj2&#32;__proj2&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
579 &#32;&#32;&#32;&#32;&#32;&#32;{
580 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r1),&#32;ranges::end(__r1),
581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::begin(__r2),&#32;ranges::end(__r2),
582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__pred),
583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj1),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj2));
584 &#32;&#32;&#32;&#32;&#32;&#32;}
585 &#32;&#32;};
586 
587 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__mismatch_fn&#32;<link linkend="_namespacestd_1a14e973b0980afe3afbceb376817e29f0">mismatch</link>{};
588 
589 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__search_fn
590 &#32;&#32;{
591 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;forward_iterator&#32;_Iter1,&#32;sentinel_for&lt;_Iter1&gt;&#32;_Sent1,
592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;forward_iterator&#32;_Iter2,&#32;sentinel_for&lt;_Iter2&gt;&#32;_Sent2,
593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred&#32;=&#32;ranges::equal_to,
594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj1&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj2&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity&gt;
595 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_comparable&lt;_Iter1,&#32;_Iter2,&#32;_Pred,&#32;_Proj1,&#32;_Proj2&gt;
596 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;subrange&lt;_Iter1&gt;
597 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter1&#32;__first1,&#32;_Sent1&#32;__last1,
598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Iter2&#32;__first2,&#32;_Sent2&#32;__last2,&#32;_Pred&#32;__pred&#32;=&#32;{},
599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Proj1&#32;__proj1&#32;=&#32;{},&#32;_Proj2&#32;__proj2&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
600 &#32;&#32;&#32;&#32;&#32;&#32;{
601 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first1&#32;==&#32;__last1&#32;||&#32;__first2&#32;==&#32;__last2)
602 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__first1,&#32;__first1};
603 
604 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;)
605 &#32;&#32;&#32;&#32;&#32;&#32;{
606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;)
607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first1&#32;==&#32;__last1)
609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__first1,&#32;__first1};
610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__pred,
611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj1,&#32;*__first1),
612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj2,&#32;*__first2)))
613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first1;
615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__cur1&#32;=&#32;__first1;
617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__cur2&#32;=&#32;__first2;
618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;)
619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(++__cur2&#32;==&#32;__last2)
621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__first1,&#32;++__cur1};
622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(++__cur1&#32;==&#32;__last1)
623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__cur1,&#32;__cur1};
624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(<emphasis role="keywordtype">bool</emphasis>)std::__invoke(__pred,
625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj1,&#32;*__cur1),
626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj2,&#32;*__cur2)))
627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first1;
629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
632 &#32;&#32;&#32;&#32;&#32;&#32;}
633 &#32;&#32;&#32;&#32;&#32;&#32;}
634 
635 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;forward_range&#32;_Range1,&#32;forward_range&#32;_Range2,
636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred&#32;=&#32;ranges::equal_to,
637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj1&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj2&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>&gt;
638 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_comparable&lt;iterator_t&lt;_Range1&gt;,&#32;iterator_t&lt;_Range2&gt;,
639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred,&#32;_Proj1,&#32;_Proj2&gt;
640 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;borrowed_subrange_t&lt;_Range1&gt;
641 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range1&amp;&amp;&#32;__r1,&#32;_Range2&amp;&amp;&#32;__r2,&#32;_Pred&#32;__pred&#32;=&#32;{},
642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Proj1&#32;__proj1&#32;=&#32;{},&#32;_Proj2&#32;__proj2&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
643 &#32;&#32;&#32;&#32;&#32;&#32;{
644 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r1),&#32;ranges::end(__r1),
645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::begin(__r2),&#32;ranges::end(__r2),
646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__pred),
647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj1),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj2));
648 &#32;&#32;&#32;&#32;&#32;&#32;}
649 &#32;&#32;};
650 
651 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__search_fn&#32;<link linkend="_namespacestd_1a5a4354dff231af6d172e1f24befda7f2">search</link>{};
652 }&#32;<emphasis role="comment">//&#32;namespace&#32;ranges</emphasis>
653 
654 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>ranges::get;
655 
656 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sent,&#32;ranges::subrange_kind&#32;_Kind&gt;
657 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>tuple_size&lt;ranges::subrange&lt;_Iter,&#32;_Sent,&#32;_Kind&gt;&gt;
658 &#32;&#32;&#32;&#32;:&#32;integral_constant&lt;size_t,&#32;2&gt;
659 &#32;&#32;&#32;&#32;{&#32;};
660 
661 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sent,&#32;ranges::subrange_kind&#32;_Kind&gt;
662 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>tuple_element&lt;0,&#32;ranges::subrange&lt;_Iter,&#32;_Sent,&#32;_Kind&gt;&gt;
663 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;_Iter;&#32;};
664 
665 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sent,&#32;ranges::subrange_kind&#32;_Kind&gt;
666 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>tuple_element&lt;1,&#32;ranges::subrange&lt;_Iter,&#32;_Sent,&#32;_Kind&gt;&gt;
667 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;_Sent;&#32;};
668 
669 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sent,&#32;ranges::subrange_kind&#32;_Kind&gt;
670 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>tuple_element&lt;0,&#32;const&#32;ranges::subrange&lt;_Iter,&#32;_Sent,&#32;_Kind&gt;&gt;
671 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;_Iter;&#32;};
672 
673 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sent,&#32;ranges::subrange_kind&#32;_Kind&gt;
674 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>tuple_element&lt;1,&#32;const&#32;ranges::subrange&lt;_Iter,&#32;_Sent,&#32;_Kind&gt;&gt;
675 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;_Sent;&#32;};
676 
677 _GLIBCXX_END_NAMESPACE_VERSION
678 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
679 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;library&#32;concepts</emphasis>
680 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++20</emphasis>
681 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_RANGES_UTIL_H</emphasis>
</programlisting></section>
