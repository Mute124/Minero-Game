<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_date__time_8h_source" xml:lang="en-US">
<title>date_time.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/include/toml++/impl/date_time.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//#&#32;This&#32;file&#32;is&#32;a&#32;part&#32;of&#32;toml++&#32;and&#32;is&#32;subject&#32;to&#32;the&#32;the&#32;terms&#32;of&#32;the&#32;MIT&#32;license.</emphasis>
2 <emphasis role="comment">//#&#32;Copyright&#32;(c)&#32;Mark&#32;Gillard&#32;&lt;mark.gillard@outlook.com.au&gt;</emphasis>
3 <emphasis role="comment">//#&#32;See&#32;https://github.com/marzer/tomlplusplus/blob/master/LICENSE&#32;for&#32;the&#32;full&#32;license&#32;text.</emphasis>
4 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;MIT</emphasis>
5 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
6 
7 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_forward__declarations_8h">forward_declarations.h</link>&quot;</emphasis>
8 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_print__to__stream_8h">print_to_stream.h</link>&quot;</emphasis>
9 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_header__start_8h">header_start.h</link>&quot;</emphasis>
10 
11 <link linkend="_date__time_8h_1a24e5c42f7e94b0b0f3212744874731e6">TOML_NAMESPACE_START</link>
12 {
14 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_preprocessor_8h_1a0d667de514e1435f8cfba9b403dd6665">TOML_TRIVIAL_ABI</link>&#32;date
15 &#32;&#32;&#32;&#32;{
17 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a273cf69d639a59973b6019625df33e30">uint16_t</link>&#32;year;
18 
20 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&#32;month;
21 
23 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&#32;day;
24 
26 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
27 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;date()&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
28 
30 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a28441f3c429403e368267788c2e8a279">TOML_CONSTRAINED_TEMPLATE</link>((impl::all_integral&lt;Y,&#32;M,&#32;D&gt;),&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294a5596231eabd6cf29050967d5ac83ad84">Y</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;M,&#32;<emphasis role="keyword">typename</emphasis>&#32;D)
31 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
32 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;date(<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294a5596231eabd6cf29050967d5ac83ad84">Y</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>,&#32;M&#32;m,&#32;D&#32;d)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
33 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;year{&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a273cf69d639a59973b6019625df33e30">uint16_t</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>)&#32;},
34 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;month{&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link><emphasis role="keyword">&gt;</emphasis>(m)&#32;},
35 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;day{&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link><emphasis role="keyword">&gt;</emphasis>(d)&#32;}
36 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
37 
39 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
40 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;date&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;date&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
41 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
42 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.year&#32;==&#32;rhs.year&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
43 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;lhs.month&#32;==&#32;rhs.month&#32;<emphasis role="comment">//</emphasis>
44 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;lhs.day&#32;==&#32;rhs.day;
45 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
46 
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;date&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;date&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
50 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(lhs&#32;==&#32;rhs);
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
53 
54 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
56 
57 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;pack(<emphasis role="keyword">const</emphasis>&#32;date&amp;&#32;d)&#32;<emphasis role="keyword">noexcept</emphasis>
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link><emphasis role="keyword">&gt;</emphasis>(d.year)&#32;&lt;&lt;&#32;16)&#32;|&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link><emphasis role="keyword">&gt;</emphasis>(d.month)&#32;&lt;&lt;&#32;8)
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link><emphasis role="keyword">&gt;</emphasis>(d.day);
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
63 
65 
66 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
69 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&lt;(<emphasis role="keyword">const</emphasis>&#32;date&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;date&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pack(lhs)&#32;&lt;&#32;pack(rhs);
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
73 
75 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;date&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;date&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pack(lhs)&#32;&lt;=&#32;pack(rhs);
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
80 
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;date&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;date&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pack(lhs)&#32;&gt;&#32;pack(rhs);
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
87 
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
90 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;date&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;date&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pack(lhs)&#32;&gt;=&#32;pack(rhs);
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
94 
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::ostream&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;date&amp;&#32;rhs)
105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(lhs,&#32;rhs);
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs;
108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
109 &#32;&#32;&#32;&#32;};
110 
112 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_preprocessor_8h_1a0d667de514e1435f8cfba9b403dd6665">TOML_TRIVIAL_ABI</link>&#32;<link linkend="_structtime">time</link>
113 &#32;&#32;&#32;&#32;{
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&#32;<link linkend="_structtime_1aa161a868794063125aa286d161fbd9bc">hour</link>;
116 
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&#32;<link linkend="_structtime_1a15d8c0aab9e21bcc8c0a1c142b21a87a">minute</link>;
119 
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&#32;<link linkend="_structtime_1ab99c95365d82ac9fdc6646bf9f6107d0">second</link>;
122 
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;<link linkend="_structtime_1a9a334075b0ad19b4a0402a7384ff4ea0">nanosecond</link>;
125 
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structtime_1ade0dc28bfe870c974514cdf14c203934">time</link>()&#32;noexcept&#32;=&#32;default;
129 
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a28441f3c429403e368267788c2e8a279">TOML_CONSTRAINED_TEMPLATE</link>((impl::<link linkend="_toml_8hpp_1a76e834946c5dd85fc42b186f7ce325aa">all_integral</link>&lt;H,&#32;M,&#32;S,&#32;NS&gt;),
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;H,
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;M,
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;S&#32;&#32;=&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>,
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;NS&#32;=&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>)
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;constexpr&#32;<link linkend="_structtime">time</link>(H&#32;h,&#32;M&#32;m,&#32;S&#32;s&#32;=&#32;S{},&#32;NS&#32;ns&#32;=&#32;NS{})&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;hour{&#32;static_cast&lt;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&gt;(h)&#32;},
139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;minute{&#32;static_cast&lt;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&gt;(m)&#32;},
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;second{&#32;static_cast&lt;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&gt;(s)&#32;},
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nanosecond{&#32;static_cast&lt;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&gt;(ns)&#32;}
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
143 
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structtime">time</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structtime">time</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.hour&#32;==&#32;rhs.hour&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;lhs.minute&#32;==&#32;rhs.minute&#32;<emphasis role="comment">//</emphasis>
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;lhs.second&#32;==&#32;rhs.second&#32;<emphasis role="comment">//</emphasis>
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;lhs.nanosecond&#32;==&#32;rhs.nanosecond;
152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
153 
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structtime">time</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structtime">time</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(lhs&#32;==&#32;rhs);
159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
160 
161 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
163 
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;pack(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structtime">time</link>&amp;&#32;t)&#32;<emphasis role="keyword">noexcept</emphasis>
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link><emphasis role="keyword">&gt;</emphasis>(t.hour)&#32;&lt;&lt;&#32;48&#32;|&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link><emphasis role="keyword">&gt;</emphasis>(t.minute)&#32;&lt;&lt;&#32;40
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link><emphasis role="keyword">&gt;</emphasis>(t.second)&#32;&lt;&lt;&#32;32&#32;|&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link><emphasis role="keyword">&gt;</emphasis>(t.nanosecond);
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
170 
172 
173 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structtime">time</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structtime">time</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pack(lhs)&#32;&lt;&#32;pack(rhs);
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
180 
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structtime">time</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structtime">time</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pack(lhs)&#32;&lt;=&#32;pack(rhs);
186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
187 
189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structtime">time</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structtime">time</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pack(lhs)&#32;&gt;&#32;pack(rhs);
193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
194 
196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structtime">time</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structtime">time</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pack(lhs)&#32;&gt;=&#32;pack(rhs);
200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
201 
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::ostream&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structtime">time</link>&amp;&#32;rhs)
213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(lhs,&#32;rhs);
215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs;
216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
217 &#32;&#32;&#32;&#32;};
218 
220 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_preprocessor_8h_1a0d667de514e1435f8cfba9b403dd6665">TOML_TRIVIAL_ABI</link>&#32;<link linkend="_structtime__offset">time_offset</link>
221 &#32;&#32;&#32;&#32;{
223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a269259c924dce846340ddbb810db2e3c">int16_t</link>&#32;<link linkend="_structtime__offset_1a517acb196e0894a557e7f25e8cd4bfcd">minutes</link>;
224 
226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structtime__offset_1ad84f7e988cbb0c27e26bfd7e52d0eac3">time_offset</link>()&#32;noexcept&#32;=&#32;default;
228 
250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a28441f3c429403e368267788c2e8a279">TOML_CONSTRAINED_TEMPLATE</link>((impl::<link linkend="_toml_8hpp_1a76e834946c5dd85fc42b186f7ce325aa">all_integral</link>&lt;H,&#32;M&gt;),&#32;typename&#32;H,&#32;typename&#32;M)
251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;constexpr&#32;<link linkend="_structtime__offset">time_offset</link>(H&#32;h,&#32;M&#32;m)&#32;noexcept&#32;<emphasis role="comment">//</emphasis>
253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;minutes{&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a269259c924dce846340ddbb810db2e3c">int16_t</link><emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis>impl::common_signed_type&lt;H,&#32;M&gt;<emphasis role="keyword">&gt;</emphasis>(h)
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;impl::common_signed_type&lt;H,&#32;M&gt;{&#32;60&#32;}
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis>impl::common_signed_type&lt;H,&#32;M&gt;<emphasis role="keyword">&gt;</emphasis>(m))&#32;}
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
257 
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structtime__offset_1a5d652a7be27663b66c56942a042fc9a9">operator==</link>(<link linkend="_structtime__offset">time_offset</link>&#32;lhs,&#32;<link linkend="_structtime__offset">time_offset</link>&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.minutes&#32;==&#32;rhs.minutes;
263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
264 
266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structtime__offset_1ad02db0b046f4a4e92793bad8c69b2c8e">operator!=</link>(<link linkend="_structtime__offset">time_offset</link>&#32;lhs,&#32;<link linkend="_structtime__offset">time_offset</link>&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.minutes&#32;!=&#32;rhs.minutes;
270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
271 
273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structtime__offset_1a2377e61c0bf984d009cfd1e46bd09fdd">operator&lt;</link>(<link linkend="_structtime__offset">time_offset</link>&#32;lhs,&#32;<link linkend="_structtime__offset">time_offset</link>&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.minutes&#32;&lt;&#32;rhs.minutes;
277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
278 
280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structtime__offset_1a079097ba2d7163ea8f1f86a0c25a8663">operator&lt;=</link>(<link linkend="_structtime__offset">time_offset</link>&#32;lhs,&#32;<link linkend="_structtime__offset">time_offset</link>&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.minutes&#32;&lt;=&#32;rhs.minutes;
284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
285 
287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structtime__offset_1a1f37b2939e67b20d2f83fc4fcc27a1cd">operator&gt;</link>(<link linkend="_structtime__offset">time_offset</link>&#32;lhs,&#32;<link linkend="_structtime__offset">time_offset</link>&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.minutes&#32;&gt;&#32;rhs.minutes;
291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
292 
294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structtime__offset_1a3db9bc80d52b9f10aca43acaea3c403f">operator&gt;=</link>(<link linkend="_structtime__offset">time_offset</link>&#32;lhs,&#32;<link linkend="_structtime__offset">time_offset</link>&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.minutes&#32;&gt;=&#32;rhs.minutes;
298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
299 
316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_structtime__offset_1a0f8d2f1d0d3dd81facb17ae58dd3df6d">operator&lt;&lt;</link>(std::ostream&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structtime__offset">time_offset</link>&amp;&#32;rhs)
317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(lhs,&#32;rhs);
319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs;
320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
321 &#32;&#32;&#32;&#32;};
322 
323 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a1b2e27349c9e21d35138a1196acd6d58">TOML_ABI_NAMESPACE_BOOL</link>(<link linkend="_group__configuration_1ga0f6a688021ea2fc13e1c76acd64e4bbc">TOML_HAS_CUSTOM_OPTIONAL_TYPE</link>,&#32;custopt,&#32;stdopt);
324 
326 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structdate__time">date_time</link>
327 &#32;&#32;&#32;&#32;{
329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::date&#32;<link linkend="_structdate__time_1a2060f3fbddcdf9a95d040ef847b3077b">date</link>;
330 
332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::time&#32;<link linkend="_structdate__time_1a41c1a6580adadd5d1bcb206cd801b42a">time</link>;
333 
337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;optional&lt;toml::time_offset&gt;&#32;<link linkend="_structdate__time_1a1402dc3f43aab1b74cec5ef4f11087fd">offset</link>;
338 
340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdate__time_1a79f7461304efaf559893495fb1f2ad1b">date_time</link>()&#32;noexcept&#32;=&#32;default;
342 
347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;constexpr&#32;<link linkend="_structdate__time">date_time</link>(const&#32;<link linkend="_namespacetoml">toml</link>::<link linkend="_structdate__time_1a2060f3fbddcdf9a95d040ef847b3077b">date</link>&amp;&#32;d,&#32;const&#32;<link linkend="_namespacetoml">toml</link>::<link linkend="_structtime">time</link>&amp;&#32;t)&#32;noexcept&#32;<emphasis role="comment">//</emphasis>
349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_structdate__time_1a2060f3fbddcdf9a95d040ef847b3077b">date</link>{&#32;d&#32;},
350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structtime">time</link>{&#32;t&#32;},
351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ae60229696c2ec17c9e00af4899bf738e">offset</link>{}&#32;<emphasis role="comment">//&#32;TINAE&#32;-&#32;icc&#32;bugfix</emphasis>
352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
353 
357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_structdate__time_1a1e661ff41f89accf42283719880523cf">date_time</link>(<emphasis role="keyword">const</emphasis>&#32;toml::date&amp;&#32;d)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_structdate__time_1a2060f3fbddcdf9a95d040ef847b3077b">date</link>{&#32;d&#32;},
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structtime">time</link>{},
361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ae60229696c2ec17c9e00af4899bf738e">offset</link>{}&#32;<emphasis role="comment">//&#32;TINAE&#32;-&#32;icc&#32;bugfix</emphasis>
362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
363 
367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_structdate__time_1af30b39e0cd336adc49196329f2a38ba9">date_time</link>(<emphasis role="keyword">const</emphasis>&#32;toml::time&amp;&#32;t)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_structdate__time_1a2060f3fbddcdf9a95d040ef847b3077b">date</link>{},
370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structtime">time</link>{&#32;t&#32;},
371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ae60229696c2ec17c9e00af4899bf738e">offset</link>{}&#32;<emphasis role="comment">//&#32;TINAE&#32;-&#32;icc&#32;bugfix</emphasis>
372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
373 
379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_structdate__time_1adaaa9f1ae45614a97207bf3663068240">date_time</link>(<emphasis role="keyword">const</emphasis>&#32;toml::date&amp;&#32;d,&#32;<emphasis role="keyword">const</emphasis>&#32;toml::time&amp;&#32;t,&#32;<emphasis role="keyword">const</emphasis>&#32;toml::time_offset&amp;&#32;off)&#32;noexcept
381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_structdate__time_1a2060f3fbddcdf9a95d040ef847b3077b">date</link>{&#32;d&#32;},
382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structtime">time</link>{&#32;t&#32;},
383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ae60229696c2ec17c9e00af4899bf738e">offset</link>{&#32;off&#32;}
384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
385 
387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdate__time_1a9056032bb0e8f92a5009fb6e53f943e3">is_local</link>()&#32;const&#32;noexcept
389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ae60229696c2ec17c9e00af4899bf738e">offset</link>.has_value();
391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
392 
394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdate__time_1a38c66565292f0caffe111a10a654690b">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdate__time">date_time</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdate__time">date_time</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.date&#32;==&#32;rhs.date&#32;<emphasis role="comment">//</emphasis>
398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;lhs.time&#32;==&#32;rhs.time&#32;<emphasis role="comment">//</emphasis>
399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;lhs.offset&#32;==&#32;rhs.offset;
400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
401 
403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdate__time_1a2c6be102d18ce9e09068af8dfd04ece6">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdate__time">date_time</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdate__time">date_time</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(lhs&#32;==&#32;rhs);
407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
408 
410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdate__time_1a5fb1aba93d6fb3355f6993f033fa0a69">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdate__time">date_time</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdate__time">date_time</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs.date&#32;!=&#32;rhs.date)
414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.date&#32;&lt;&#32;rhs.date;
415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs.time&#32;!=&#32;rhs.time)
416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.time&#32;&lt;&#32;rhs.time;
417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.offset&#32;&lt;&#32;rhs.offset;
418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
419 
421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdate__time_1a66bb2da2653c1512df0a3f796326fd02">operator&lt;=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdate__time">date_time</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdate__time">date_time</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs.date&#32;!=&#32;rhs.date)
425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.date&#32;&lt;&#32;rhs.date;
426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs.time&#32;!=&#32;rhs.time)
427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.time&#32;&lt;&#32;rhs.time;
428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.offset&#32;&lt;=&#32;rhs.offset;
429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
430 
432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdate__time_1a2482fb5a2b13f18b7589a627855529af">operator&gt;</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdate__time">date_time</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdate__time">date_time</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(lhs&#32;&lt;=&#32;rhs);
436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
437 
439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdate__time_1ab7c914ad3875581f9fbe90cba68cade9">operator&gt;=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdate__time">date_time</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdate__time">date_time</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(lhs&#32;&lt;&#32;rhs);
443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
444 
457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_structdate__time_1ada883abc2927d0dc77c81e4f48e719bb">operator&lt;&lt;</link>(std::ostream&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdate__time">date_time</link>&amp;&#32;rhs)
458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(lhs,&#32;rhs);
460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs;
461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
462 &#32;&#32;&#32;&#32;};
463 
464 &#32;&#32;&#32;&#32;<link linkend="_date__time_8h_1aa188664cce4904ae8832f7fa59f10211">TOML_ABI_NAMESPACE_END</link>;&#32;<emphasis role="comment">//&#32;TOML_HAS_CUSTOM_OPTIONAL_TYPE</emphasis>
465 }
466 <link linkend="_date__time_8h_1afa65688cac47ce86021fef8d739f9fd8">TOML_NAMESPACE_END</link>;
467 
468 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_header__end_8h">header_end.h</link>&quot;</emphasis>
</programlisting></section>
