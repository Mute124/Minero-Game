<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2debug_2safe__container_8h_source" xml:lang="en-US">
<title>safe_container.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/debug/safe_container.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Safe&#32;container&#32;implementation&#32;&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2014-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
29 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_DEBUG_SAFE_CONTAINER_H</emphasis>
30 <emphasis role="preprocessor">#define&#32;_GLIBCXX_DEBUG_SAFE_CONTAINER_H&#32;1</emphasis>
31 
32 <emphasis role="preprocessor">#include&#32;&lt;ext/alloc_traits.h&gt;</emphasis>
33 
34 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__debug">__gnu_debug</link>
35 {
37 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_SafeContainer,
38 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,
39 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>_SafeBase,
40 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_IsCxx11AllocatorAware&#32;=&#32;<emphasis role="keyword">true</emphasis>&gt;
41 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class____gnu__debug_1_1___safe__container">_Safe_container</link>
42 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_SafeBase&lt;_SafeContainer&gt;
43 &#32;&#32;&#32;&#32;{
44 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_SafeBase&lt;_SafeContainer&gt;&#32;_Base;
45 
46 &#32;&#32;&#32;&#32;&#32;&#32;_SafeContainer&amp;
47 &#32;&#32;&#32;&#32;&#32;&#32;_M_cont()&#32;_GLIBCXX_NOEXCEPT
48 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">static_cast&lt;</emphasis>_SafeContainer*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>);&#32;}
49 
50 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
51 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
52 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__container">_Safe_container</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
53 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__container">_Safe_container</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__container">_Safe_container</link>&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
54 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__container">_Safe_container</link>(<link linkend="_class____gnu__debug_1_1___safe__container">_Safe_container</link>&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
55 
56 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
57 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__container">_Safe_container</link>(<link linkend="_class____gnu__debug_1_1___safe__container">_Safe_container</link>&amp;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;,&#32;std::true_type)
58 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_class____gnu__debug_1_1___safe__container">_Safe_container</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x))
59 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
60 
61 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__container">_Safe_container</link>(<link linkend="_class____gnu__debug_1_1___safe__container">_Safe_container</link>&amp;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a,&#32;std::false_type)
62 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_class____gnu__debug_1_1___safe__container">_Safe_container</link>()
63 &#32;&#32;&#32;&#32;&#32;&#32;{
64 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x._M_cont().get_allocator()&#32;==&#32;__a)
65 &#32;&#32;&#32;&#32;&#32;&#32;_Base::_M_swap(__x);
66 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
67 &#32;&#32;&#32;&#32;&#32;&#32;__x._M_invalidate_all();
68 &#32;&#32;&#32;&#32;&#32;&#32;}
69 
70 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
71 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__container">_Safe_container</link>(<link linkend="_class____gnu__debug_1_1___safe__container">_Safe_container</link>&amp;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
72 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_class____gnu__debug_1_1___safe__container">_Safe_container</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x),&#32;__a,
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::allocator_traits&lt;_Alloc&gt;::is_always_equal{})
74 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
75 <emphasis role="preprocessor">#endif</emphasis>
76 
77 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Copy&#32;assignment&#32;invalidate&#32;all&#32;iterators.</emphasis>
78 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__container">_Safe_container</link>&amp;
79 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__container_1acae540a4cfaab67ae885640f76854c90">operator=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__container">_Safe_container</link>&amp;)&#32;_GLIBCXX_NOEXCEPT
80 &#32;&#32;&#32;&#32;&#32;&#32;{
81 &#32;&#32;&#32;&#32;this-&gt;_M_invalidate_all();
82 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
83 &#32;&#32;&#32;&#32;&#32;&#32;}
84 
85 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
86 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__container">_Safe_container</link>&amp;
87 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__container_1acae540a4cfaab67ae885640f76854c90">operator=</link>(<link linkend="_class____gnu__debug_1_1___safe__container">_Safe_container</link>&amp;&amp;&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
88 &#32;&#32;&#32;&#32;&#32;&#32;{
89 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__addressof(__x)&#32;==&#32;<emphasis role="keyword">this</emphasis>)
90 &#32;&#32;&#32;&#32;&#32;&#32;{
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Standard&#32;containers&#32;have&#32;a&#32;valid&#32;but&#32;unspecified&#32;value&#32;after</emphasis>
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;self-move,&#32;so&#32;we&#32;invalidate&#32;all&#32;debug&#32;iterators&#32;even&#32;if&#32;the</emphasis>
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;underlying&#32;container&#32;happens&#32;to&#32;preserve&#32;its&#32;contents.</emphasis>
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_invalidate_all();
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
96 &#32;&#32;&#32;&#32;&#32;&#32;}
97 
98 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_IsCxx11AllocatorAware)
99 &#32;&#32;&#32;&#32;&#32;&#32;{
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Alloc&gt;&#32;_Alloc_traits;
101 
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__xfer_memory&#32;=&#32;_Alloc_traits::_S_propagate_on_move_assign()
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;_M_cont().get_allocator()&#32;==&#32;__x._M_cont().get_allocator();
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__xfer_memory)
105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Base::_M_swap(__x);
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_invalidate_all();
108 &#32;&#32;&#32;&#32;&#32;&#32;}
109 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
110 &#32;&#32;&#32;&#32;&#32;&#32;_Base::_M_swap(__x);
111 
112 &#32;&#32;&#32;&#32;__x._M_invalidate_all();
113 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
114 &#32;&#32;&#32;&#32;&#32;&#32;}
115 
116 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
117 &#32;&#32;&#32;&#32;&#32;&#32;_M_swap(_Safe_container&amp;&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
118 &#32;&#32;&#32;&#32;&#32;&#32;{
119 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_IsCxx11AllocatorAware)
120 &#32;&#32;&#32;&#32;&#32;&#32;{
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Alloc&gt;&#32;_Alloc_traits;
122 
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_Alloc_traits::_S_propagate_on_swap())
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1a0fffd86ffb57d67b11878baf3b9fec4a">__glibcxx_check_equal_allocs</link>(this-&gt;_M_cont()._M_base(),
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x._M_cont()._M_base());
126 &#32;&#32;&#32;&#32;&#32;&#32;}
127 
128 &#32;&#32;&#32;&#32;_Base::_M_swap(__x);
129 &#32;&#32;&#32;&#32;&#32;&#32;}
130 <emphasis role="preprocessor">#endif</emphasis>
131 &#32;&#32;&#32;&#32;};
132 
133 }&#32;<emphasis role="comment">//&#32;namespace&#32;__gnu_debug</emphasis>
134 
135 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
