<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2experimental_2bits_2fs__fwd_8h_source" xml:lang="en-US">
<title>fs_fwd.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/experimental/bits/fs_fwd.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Filesystem&#32;declarations&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2014-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_EXPERIMENTAL_FS_FWD_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_GLIBCXX_EXPERIMENTAL_FS_FWD_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
34 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/c++0x_warning.h&gt;</emphasis>
35 <emphasis role="preprocessor">#else</emphasis>
36 
37 <emphasis role="preprocessor">#include&#32;&lt;system_error&gt;</emphasis>
38 <emphasis role="preprocessor">#include&#32;&lt;cstdint&gt;</emphasis>
39 <emphasis role="preprocessor">#include&#32;&lt;bits/chrono.h&gt;</emphasis>
40 
41 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
42 {
43 _GLIBCXX_BEGIN_NAMESPACE_VERSION
44 
45 <emphasis role="keyword">namespace&#32;</emphasis>experimental
46 {
47 <emphasis role="keyword">namespace&#32;</emphasis>filesystem
48 {
49 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">namespace&#32;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0779c3b73f9aa3a0ac5b0139b5d291d9">v1</link>
50 {
51 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_CXX11_ABI</emphasis>
52 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">namespace&#32;</emphasis>__cxx11&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__abi_tag__&#32;(<emphasis role="stringliteral">&quot;cxx11&quot;</emphasis>)))&#32;{&#32;}
53 <emphasis role="preprocessor">#endif</emphasis>
54 
71 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>file_status;
72 _GLIBCXX_BEGIN_NAMESPACE_CXX11
73 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classpath">path</link>;
74 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>filesystem_error;
75 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>directory_entry;
76 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>directory_iterator;
77 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>recursive_directory_iterator;
78 _GLIBCXX_END_NAMESPACE_CXX11
79 
81 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>space_info
82 &#32;&#32;{
83 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a2ba5f6c0633401558d277b2c0e4f758d">uintmax_t</link>&#32;capacity;
84 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a2ba5f6c0633401558d277b2c0e4f758d">uintmax_t</link>&#32;free;
85 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a2ba5f6c0633401558d277b2c0e4f758d">uintmax_t</link>&#32;available;
86 &#32;&#32;};
87 
89 &#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;file_type&#32;:&#32;<emphasis role="keywordtype">signed</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;{
90 &#32;&#32;&#32;&#32;&#32;&#32;none&#32;=&#32;0,&#32;not_found&#32;=&#32;-1,&#32;regular&#32;=&#32;1,&#32;directory&#32;=&#32;2,&#32;symlink&#32;=&#32;3,
91 &#32;&#32;&#32;&#32;&#32;&#32;block&#32;=&#32;4,&#32;character&#32;=&#32;5,&#32;fifo&#32;=&#32;6,&#32;socket&#32;=&#32;7,&#32;unknown&#32;=&#32;8
92 &#32;&#32;};
93 
95 &#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;copy_options&#32;:&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&#32;{
96 &#32;&#32;&#32;&#32;&#32;&#32;none&#32;=&#32;0,
97 &#32;&#32;&#32;&#32;&#32;&#32;skip_existing&#32;=&#32;1,&#32;overwrite_existing&#32;=&#32;2,&#32;update_existing&#32;=&#32;4,
98 &#32;&#32;&#32;&#32;&#32;&#32;recursive&#32;=&#32;8,
99 &#32;&#32;&#32;&#32;&#32;&#32;copy_symlinks&#32;=&#32;16,&#32;skip_symlinks&#32;=&#32;32,
100 &#32;&#32;&#32;&#32;&#32;&#32;directories_only&#32;=&#32;64,&#32;create_symlinks&#32;=&#32;128,&#32;create_hard_links&#32;=&#32;256
101 &#32;&#32;};
102 
105 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;copy_options
106 &#32;&#32;<link linkend="_namespaceglm_1aabdf68ef3b7be9c9b37d01227fa55a36">operator&amp;</link>(copy_options&#32;__x,&#32;copy_options&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
107 &#32;&#32;{
108 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__utype&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::underlying_type&lt;copy_options&gt;::type;
109 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>copy_options<emphasis role="keyword">&gt;</emphasis>(
110 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__x)&#32;&amp;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__y));
111 &#32;&#32;}
112 
113 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;copy_options
114 &#32;&#32;<link linkend="_namespace_catch_1ab32a083e442cc09f736327d2e2865999">operator|</link>(copy_options&#32;__x,&#32;copy_options&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
115 &#32;&#32;{
116 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__utype&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::underlying_type&lt;copy_options&gt;::type;
117 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>copy_options<emphasis role="keyword">&gt;</emphasis>(
118 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__x)&#32;|&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__y));
119 &#32;&#32;}
120 
121 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;copy_options
122 &#32;&#32;<link linkend="_namespaceglm_1a0bb25372483459213269be733f871e18">operator^</link>(copy_options&#32;__x,&#32;copy_options&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
123 &#32;&#32;{
124 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__utype&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::underlying_type&lt;copy_options&gt;::type;
125 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>copy_options<emphasis role="keyword">&gt;</emphasis>(
126 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__x)&#32;^&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__y));
127 &#32;&#32;}
128 
129 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;copy_options
130 &#32;&#32;<link linkend="_namespaceglm_1afdc1f70af7c16826e06fb41664f0808b">operator~</link>(copy_options&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
131 &#32;&#32;{
132 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__utype&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::underlying_type&lt;copy_options&gt;::type;
133 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>copy_options<emphasis role="keyword">&gt;</emphasis>(~static_cast&lt;__utype&gt;(__x));
134 &#32;&#32;}
135 
136 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;copy_options&amp;
137 &#32;&#32;operator&amp;=(copy_options&amp;&#32;__x,&#32;copy_options&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
138 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;=&#32;__x&#32;&amp;&#32;__y;&#32;}
139 
140 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;copy_options&amp;
141 &#32;&#32;operator|=(copy_options&amp;&#32;__x,&#32;copy_options&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
142 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;=&#32;__x&#32;|&#32;__y;&#32;}
143 
144 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;copy_options&amp;
145 &#32;&#32;operator^=(copy_options&amp;&#32;__x,&#32;copy_options&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
146 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;=&#32;__x&#32;^&#32;__y;&#32;}
148 
150 &#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;perms&#32;:&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;{
151 &#32;&#32;&#32;&#32;&#32;&#32;none&#32;&#32;&#32;&#32;&#32;&#32;=&#32;&#32;0,
152 &#32;&#32;&#32;&#32;&#32;&#32;owner_read&#32;&#32;&#32;&#32;=&#32;&#32;0400,
153 &#32;&#32;&#32;&#32;&#32;&#32;owner_write&#32;&#32;&#32;=&#32;&#32;0200,
154 &#32;&#32;&#32;&#32;&#32;&#32;owner_exec&#32;&#32;&#32;&#32;=&#32;&#32;0100,
155 &#32;&#32;&#32;&#32;&#32;&#32;owner_all&#32;&#32;&#32;&#32;&#32;=&#32;&#32;0700,
156 &#32;&#32;&#32;&#32;&#32;&#32;group_read&#32;&#32;&#32;&#32;=&#32;&#32;&#32;040,
157 &#32;&#32;&#32;&#32;&#32;&#32;group_write&#32;&#32;&#32;=&#32;&#32;&#32;020,
158 &#32;&#32;&#32;&#32;&#32;&#32;group_exec&#32;&#32;&#32;&#32;=&#32;&#32;&#32;010,
159 &#32;&#32;&#32;&#32;&#32;&#32;group_all&#32;&#32;&#32;&#32;&#32;=&#32;&#32;&#32;070,
160 &#32;&#32;&#32;&#32;&#32;&#32;others_read&#32;&#32;&#32;=&#32;&#32;&#32;&#32;04,
161 &#32;&#32;&#32;&#32;&#32;&#32;others_write&#32;&#32;=&#32;&#32;&#32;&#32;02,
162 &#32;&#32;&#32;&#32;&#32;&#32;others_exec&#32;&#32;&#32;=&#32;&#32;&#32;&#32;01,
163 &#32;&#32;&#32;&#32;&#32;&#32;others_all&#32;&#32;&#32;&#32;=&#32;&#32;&#32;&#32;07,
164 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__core__func__vector__relational_1ga87e53f50b679f5f95c5cb4780311b3dd">all</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;&#32;0777,
165 &#32;&#32;&#32;&#32;&#32;&#32;set_uid&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;04000,
166 &#32;&#32;&#32;&#32;&#32;&#32;set_gid&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;02000,
167 &#32;&#32;&#32;&#32;&#32;&#32;sticky_bit&#32;&#32;&#32;&#32;=&#32;01000,
168 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacemask">mask</link>&#32;&#32;&#32;&#32;&#32;&#32;=&#32;07777,
169 &#32;&#32;&#32;&#32;&#32;&#32;unknown&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;&#32;0xFFFF,
170 &#32;&#32;&#32;&#32;&#32;&#32;add_perms&#32;&#32;&#32;&#32;&#32;=&#32;0x10000,
171 &#32;&#32;&#32;&#32;&#32;&#32;remove_perms&#32;&#32;=&#32;0x20000,
172 &#32;&#32;&#32;&#32;&#32;&#32;symlink_nofollow&#32;&#32;=&#32;0x40000
173 &#32;&#32;};
174 
177 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;perms
178 &#32;&#32;<link linkend="_namespaceglm_1aabdf68ef3b7be9c9b37d01227fa55a36">operator&amp;</link>(perms&#32;__x,&#32;perms&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
179 &#32;&#32;{
180 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__utype&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::underlying_type&lt;perms&gt;::type;
181 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>perms<emphasis role="keyword">&gt;</emphasis>(
182 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__x)&#32;&amp;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__y));
183 &#32;&#32;}
184 
185 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;perms
186 &#32;&#32;<link linkend="_namespace_catch_1ab32a083e442cc09f736327d2e2865999">operator|</link>(perms&#32;__x,&#32;perms&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
187 &#32;&#32;{
188 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__utype&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::underlying_type&lt;perms&gt;::type;
189 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>perms<emphasis role="keyword">&gt;</emphasis>(
190 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__x)&#32;|&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__y));
191 &#32;&#32;}
192 
193 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;perms
194 &#32;&#32;<link linkend="_namespaceglm_1a0bb25372483459213269be733f871e18">operator^</link>(perms&#32;__x,&#32;perms&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
195 &#32;&#32;{
196 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__utype&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::underlying_type&lt;perms&gt;::type;
197 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>perms<emphasis role="keyword">&gt;</emphasis>(
198 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__x)&#32;^&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__y));
199 &#32;&#32;}
200 
201 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;perms
202 &#32;&#32;<link linkend="_namespaceglm_1afdc1f70af7c16826e06fb41664f0808b">operator~</link>(perms&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
203 &#32;&#32;{
204 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__utype&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::underlying_type&lt;perms&gt;::type;
205 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>perms<emphasis role="keyword">&gt;</emphasis>(~static_cast&lt;__utype&gt;(__x));
206 &#32;&#32;}
207 
208 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;perms&amp;
209 &#32;&#32;operator&amp;=(perms&amp;&#32;__x,&#32;perms&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
210 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;=&#32;__x&#32;&amp;&#32;__y;&#32;}
211 
212 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;perms&amp;
213 &#32;&#32;operator|=(perms&amp;&#32;__x,&#32;perms&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
214 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;=&#32;__x&#32;|&#32;__y;&#32;}
215 
216 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;perms&amp;
217 &#32;&#32;operator^=(perms&amp;&#32;__x,&#32;perms&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
218 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;=&#32;__x&#32;^&#32;__y;&#32;}
220 
222 &#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;directory_options&#32;:&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;{
223 &#32;&#32;&#32;&#32;&#32;&#32;none&#32;=&#32;0,&#32;follow_directory_symlink&#32;=&#32;1,&#32;skip_permission_denied&#32;=&#32;2
224 &#32;&#32;};
225 
228 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;directory_options
229 &#32;&#32;<link linkend="_namespaceglm_1aabdf68ef3b7be9c9b37d01227fa55a36">operator&amp;</link>(directory_options&#32;__x,&#32;directory_options&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
230 &#32;&#32;{
231 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__utype&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::underlying_type&lt;directory_options&gt;::type;
232 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>directory_options<emphasis role="keyword">&gt;</emphasis>(
233 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__x)&#32;&amp;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__y));
234 &#32;&#32;}
235 
236 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;directory_options
237 &#32;&#32;<link linkend="_namespace_catch_1ab32a083e442cc09f736327d2e2865999">operator|</link>(directory_options&#32;__x,&#32;directory_options&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
238 &#32;&#32;{
239 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__utype&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::underlying_type&lt;directory_options&gt;::type;
240 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>directory_options<emphasis role="keyword">&gt;</emphasis>(
241 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__x)&#32;|&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__y));
242 &#32;&#32;}
243 
244 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;directory_options
245 &#32;&#32;<link linkend="_namespaceglm_1a0bb25372483459213269be733f871e18">operator^</link>(directory_options&#32;__x,&#32;directory_options&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
246 &#32;&#32;{
247 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__utype&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::underlying_type&lt;directory_options&gt;::type;
248 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>directory_options<emphasis role="keyword">&gt;</emphasis>(
249 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__x)&#32;^&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__y));
250 &#32;&#32;}
251 
252 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;directory_options
253 &#32;&#32;<link linkend="_namespaceglm_1afdc1f70af7c16826e06fb41664f0808b">operator~</link>(directory_options&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
254 &#32;&#32;{
255 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__utype&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::underlying_type&lt;directory_options&gt;::type;
256 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>directory_options<emphasis role="keyword">&gt;</emphasis>(~static_cast&lt;__utype&gt;(__x));
257 &#32;&#32;}
258 
259 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;directory_options&amp;
260 &#32;&#32;operator&amp;=(directory_options&amp;&#32;__x,&#32;directory_options&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
261 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;=&#32;__x&#32;&amp;&#32;__y;&#32;}
262 
263 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;directory_options&amp;
264 &#32;&#32;operator|=(directory_options&amp;&#32;__x,&#32;directory_options&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
265 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;=&#32;__x&#32;|&#32;__y;&#32;}
266 
267 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;directory_options&amp;
268 &#32;&#32;operator^=(directory_options&amp;&#32;__x,&#32;directory_options&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
269 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;=&#32;__x&#32;^&#32;__y;&#32;}
271 
273 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>file_time_type&#32;=&#32;std::chrono::system_clock::time_point;
274 
275 &#32;&#32;<emphasis role="comment">//&#32;operational&#32;functions</emphasis>
276 
277 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">copy</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__from,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to,&#32;copy_options&#32;__options);
278 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">copy</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__from,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to,&#32;copy_options&#32;__options,
279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_code&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>;
280 
281 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;copy_file(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__from,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to,&#32;copy_options&#32;__option);
282 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;copy_file(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__from,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to,&#32;copy_options&#32;__option,
283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_code&amp;);
284 
285 &#32;&#32;<link linkend="_classpath">path</link>&#32;current_path();
286 
287 &#32;&#32;file_status&#32;status(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;);
288 &#32;&#32;file_status&#32;status(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;,&#32;error_code&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>;
289 
290 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;status_known(file_status)&#32;<emphasis role="keyword">noexcept</emphasis>;
291 
292 &#32;&#32;file_status&#32;symlink_status(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;);
293 &#32;&#32;file_status&#32;symlink_status(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;,&#32;error_code&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>;
294 
295 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_regular_file(file_status)&#32;<emphasis role="keyword">noexcept</emphasis>;
296 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_symlink(file_status)&#32;<emphasis role="keyword">noexcept</emphasis>;
297 
299 }&#32;<emphasis role="comment">//&#32;namespace&#32;v1</emphasis>
300 }&#32;<emphasis role="comment">//&#32;namespace&#32;filesystem</emphasis>
301 }&#32;<emphasis role="comment">//&#32;namespace&#32;experimental</emphasis>
302 
303 _GLIBCXX_END_NAMESPACE_VERSION
304 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
305 
306 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
307 
308 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_EXPERIMENTAL_FS_FWD_H</emphasis>
</programlisting></section>
