<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2bits_2forward__list_8h" xml:lang="en-US">
<title>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/bits/forward_list.h File Reference</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/bits/forward_list.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &lt;initializer_list&gt;<?linebreak?>#include &lt;bits/stl_iterator_base_types.h&gt;<?linebreak?>#include &lt;bits/stl_iterator.h&gt;<?linebreak?>#include &lt;bits/stl_algobase.h&gt;<?linebreak?>#include &lt;bits/stl_function.h&gt;<?linebreak?>#include &lt;bits/allocator.h&gt;<?linebreak?>#include &lt;ext/alloc_traits.h&gt;<?linebreak?>#include &lt;ext/aligned_buffer.h&gt;<?linebreak?></programlisting>Include dependency graph for forward_list.h:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="_old_2_classes_2lib_2include_2c_09_09_2bits_2forward__list_8h__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="__old_2_classes_2lib_2include_2c_09_09_2bits_2forward__list_8h_1a365d53961b347e79c1e05ccf32d69d53">_GLIBCXX_FWDLIST_REMOVE_RETURN_TYPE_TAG</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
<simplesect><title></title>
        <itemizedlist>
            <listitem><para>namespace std <link linkend="__old_2_classes_2lib_2include_2c_09_09_2bits_2forward__list_8h_1a544d74b2d5d0dd2197f5fd6f02691de0">_GLIBCXX_VISIBILITY</link> (default)</para>
</listitem>
        </itemizedlist>
</simplesect>
</simplesect>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="__old_2_classes_2lib_2include_2c_09_09_2bits_2forward__list_8h_1a365d53961b347e79c1e05ccf32d69d53"/><section>
    <title>_GLIBCXX_FWDLIST_REMOVE_RETURN_TYPE_TAG</title>
<indexterm><primary>_GLIBCXX_FWDLIST_REMOVE_RETURN_TYPE_TAG</primary><secondary>forward_list.h</secondary></indexterm>
<indexterm><primary>forward_list.h</primary><secondary>_GLIBCXX_FWDLIST_REMOVE_RETURN_TYPE_TAG</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> _GLIBCXX_FWDLIST_REMOVE_RETURN_TYPE_TAG</computeroutput></para></section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="__old_2_classes_2lib_2include_2c_09_09_2bits_2forward__list_8h_1a544d74b2d5d0dd2197f5fd6f02691de0"/><section>
    <title>_GLIBCXX_VISIBILITY()</title>
<indexterm><primary>_GLIBCXX_VISIBILITY</primary><secondary>forward_list.h</secondary></indexterm>
<indexterm><primary>forward_list.h</primary><secondary>_GLIBCXX_VISIBILITY</secondary></indexterm>
<para><computeroutput>namespace std _GLIBCXX_VISIBILITY (default )</computeroutput></para>
<para>A helper basic node class for forward_list. This is just a linked list with nothing inside it. There are purely list shuffling utility methods here.</para>

<para>A helper node class for forward_list. This is just a linked list with uninitialized storage for a data value in each node. There is a sorting utility method.</para>

<para>A forward_list::iterator.</para>

<para>All the functions are op overloads.</para>

<para>Forward list iterator equality comparison.</para>

<para>Forward list iterator inequality comparison.</para>

<para>A forward_list::const_iterator.</para>

<para>All the functions are op overloads.</para>

<para>Forward list const_iterator equality comparison.</para>

<para>Forward list const_iterator inequality comparison.</para>

<para>Base class for forward_list.</para>

<para>A standard container with linear time access to elements, and fixed time insertion/deletion at any point in the sequence.</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>_Tp</entry><entry>
<para>Type of element. </para>
</entry>
                            </row>
                            <row>
<entry>_Alloc</entry><entry>
<para>Allocator type, defaults to allocator&lt;_Tp&gt;.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Meets the requirements of a <link xlink:href="tables.html#65">container</link>, a <link xlink:href="tables.html#67">sequence</link>, including the <link xlink:href="tables.html#68">optional sequence requirements</link> with the exception of <computeroutput>at</computeroutput> and <computeroutput>operator</computeroutput>[].</para>

<para>This is a <emphasis>singly</emphasis> <emphasis>linked</emphasis> list. Traversal up the list requires linear time, but adding and removing elements (or <emphasis>nodes</emphasis>) is done in constant time, regardless of where the change takes place. Unlike std::vector and std::deque, random-access iterators are not provided, so subscripting ( <computeroutput></computeroutput>[] ) access is not allowed. For algorithms which only need sequential access, this lack makes no difference.</para>

<para>Also unlike the other standard containers, std::forward_list provides specialized algorithms unique to linked lists, such as splicing, sorting, and in-place reversal.</para>

<para>Creates a forward_list with no elements.</para>

<para>Creates a forward_list with no elements. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__al</entry><entry>
<para>An allocator object.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Copy constructor with allocator argument. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__list</entry><entry>
<para>Input list to copy. </para>
</entry>
                            </row>
                            <row>
<entry>__al</entry><entry>
<para>An allocator object.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Move constructor with allocator argument. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__list</entry><entry>
<para>Input list to move. </para>
</entry>
                            </row>
                            <row>
<entry>__al</entry><entry>
<para>An allocator object.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Creates a forward_list with default constructed elements. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__n</entry><entry>
<para>The number of elements to initially create. </para>
</entry>
                            </row>
                            <row>
<entry>__al</entry><entry>
<para>An allocator object.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                This constructor creates the forward_list with <emphasis>__n</emphasis> default constructed elements.</para>

<para>Creates a forward_list with copies of an exemplar element. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__n</entry><entry>
<para>The number of elements to initially create. </para>
</entry>
                            </row>
                            <row>
<entry>__value</entry><entry>
<para>An element to copy. </para>
</entry>
                            </row>
                            <row>
<entry>__al</entry><entry>
<para>An allocator object.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                This constructor fills the forward_list with <emphasis>__n</emphasis> copies of <emphasis>__value</emphasis>.</para>

<para>Builds a forward_list from a range. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__first</entry><entry>
<para>An input iterator. </para>
</entry>
                            </row>
                            <row>
<entry>__last</entry><entry>
<para>An input iterator. </para>
</entry>
                            </row>
                            <row>
<entry>__al</entry><entry>
<para>An allocator object.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Create a forward_list consisting of copies of the elements from [<emphasis>__first</emphasis>,<emphasis>__last</emphasis>). This is linear in N (where N is distance(<emphasis>__first</emphasis>,<emphasis>__last</emphasis>)).</para>

<para>The forward_list copy constructor. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__list</entry><entry>
<para>A forward_list of identical element and allocator types.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                The forward_list move constructor. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__list</entry><entry>
<para>A forward_list of identical element and allocator types.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                The newly-created forward_list contains the exact contents of the moved instance. The contents of the moved instance are a valid, but unspecified forward_list.</para>

<para>Builds a forward_list from an initializer_list 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__il</entry><entry>
<para>An initializer_list of value_type. </para>
</entry>
                            </row>
                            <row>
<entry>__al</entry><entry>
<para>An allocator object.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Create a forward_list consisting of copies of the elements in the initializer_list <emphasis>__il</emphasis>. This is linear in __il.size().</para>

<para>The forward_list dtor.</para>

<para>The forward_list assignment operator. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__list</entry><entry>
<para>A forward_list of identical element and allocator types.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                All the elements of <emphasis>__list</emphasis> are copied.</para>

<para>Whether the allocator is copied depends on the allocator traits.</para>

<para>The forward_list move assignment operator. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__list</entry><entry>
<para>A forward_list of identical element and allocator types.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                The contents of <emphasis>__list</emphasis> are moved into this forward_list (without copying, if the allocators permit it).</para>

<para>Afterwards <emphasis>__list</emphasis> is a valid, but unspecified forward_list</para>

<para>Whether the allocator is moved depends on the allocator traits.</para>

<para>The forward_list initializer list assignment operator. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__il</entry><entry>
<para>An initializer_list of value_type.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Replace the contents of the forward_list with copies of the elements in the initializer_list <emphasis>__il</emphasis>. This is linear in __il.size().</para>

<para>Assigns a range to a forward_list. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__first</entry><entry>
<para>An input iterator. </para>
</entry>
                            </row>
                            <row>
<entry>__last</entry><entry>
<para>An input iterator.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                This function fills a forward_list with copies of the elements in the range [<emphasis>__first</emphasis>,<emphasis>__last</emphasis>).</para>

<para>Note that the assignment completely changes the forward_list and that the number of elements of the resulting forward_list is the same as the number of elements assigned.</para>

<para>Assigns a given value to a forward_list. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__n</entry><entry>
<para>Number of elements to be assigned. </para>
</entry>
                            </row>
                            <row>
<entry>__val</entry><entry>
<para>Value to be assigned.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                This function fills a forward_list with <emphasis>__n</emphasis> copies of the given value. Note that the assignment completely changes the forward_list, and that the resulting forward_list has __n elements.</para>

<para>Assigns an initializer_list to a forward_list. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__il</entry><entry>
<para>An initializer_list of value_type.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Replace the contents of the forward_list with copies of the elements in the initializer_list <emphasis>__il</emphasis>. This is linear in il.size().</para>

<para>Get a copy of the memory allocation object.</para>

<para>Returns a read/write iterator that points before the first element in the forward_list. Iteration is done in ordinary element order.</para>

<para>Returns a read-only (constant) iterator that points before the first element in the forward_list. Iteration is done in ordinary element order.</para>

<para>Returns a read/write iterator that points to the first element in the forward_list. Iteration is done in ordinary element order.</para>

<para>Returns a read-only (constant) iterator that points to the first element in the forward_list. Iteration is done in ordinary element order.</para>

<para>Returns a read/write iterator that points one past the last element in the forward_list. Iteration is done in ordinary element order.</para>

<para>Returns a read-only iterator that points one past the last element in the forward_list. Iteration is done in ordinary element order.</para>

<para>Returns a read-only (constant) iterator that points to the first element in the forward_list. Iteration is done in ordinary element order.</para>

<para>Returns a read-only (constant) iterator that points before the first element in the forward_list. Iteration is done in ordinary element order.</para>

<para>Returns a read-only (constant) iterator that points one past the last element in the forward_list. Iteration is done in ordinary element order.</para>

<para>Returns true if the forward_list is empty. (Thus begin() would equal <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end()</link>.)</para>

<para>Returns the largest possible number of elements of forward_list.</para>

<para>Returns a read/write reference to the data at the first element of the forward_list.</para>

<para>Returns a read-only (constant) reference to the data at the first element of the forward_list.</para>

<para>Constructs object in forward_list at the front of the list. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__args</entry><entry>
<para>Arguments.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                This function will insert an object of type Tp constructed with Tp(std::forward&lt;Args&gt;(args)...) at the front of the list Due to the nature of a forward_list this operation can be done in constant time, and does not invalidate iterators and references.</para>

<para>Add data to the front of the forward_list. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__val</entry><entry>
<para>Data to be added.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                This is a typical stack operation. The function creates an element at the front of the forward_list and assigns the given data to it. Due to the nature of a forward_list this operation can be done in constant time, and does not invalidate iterators and references.</para>

<para>Removes first element.</para>

<para>This is a typical stack operation. It shrinks the forward_list by one. Due to the nature of a forward_list this operation can be done in constant time, and only invalidates iterators/references to the element being removed.</para>

<para>Note that no data is returned, and if the first element&apos;s data is needed, it should be retrieved before pop_front() is called.</para>

<para>Constructs object in forward_list after the specified iterator. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__pos</entry><entry>
<para>A const_iterator into the forward_list. </para>
</entry>
                            </row>
                            <row>
<entry>__args</entry><entry>
<para>Arguments. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>An iterator that points to the inserted data.</para>
</formalpara>
This function will insert an object of type T constructed with T(std::forward&lt;Args&gt;(args)...) after the specified location. Due to the nature of a forward_list this operation can be done in constant time, and does not invalidate iterators and references.</para>

<para>Inserts given value into forward_list after specified iterator. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__pos</entry><entry>
<para>An iterator into the forward_list. </para>
</entry>
                            </row>
                            <row>
<entry>__val</entry><entry>
<para>Data to be inserted. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>An iterator that points to the inserted data.</para>
</formalpara>
This function will insert a copy of the given value after the specified location. Due to the nature of a forward_list this operation can be done in constant time, and does not invalidate iterators and references.</para>

<para>Inserts a number of copies of given data into the forward_list. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__pos</entry><entry>
<para>An iterator into the forward_list. </para>
</entry>
                            </row>
                            <row>
<entry>__n</entry><entry>
<para>Number of elements to be inserted. </para>
</entry>
                            </row>
                            <row>
<entry>__val</entry><entry>
<para>Data to be inserted. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>An iterator pointing to the last inserted copy of <emphasis>val</emphasis> or <emphasis>pos</emphasis> if <emphasis>n</emphasis> == 0.</para>
</formalpara>
This function will insert a specified number of copies of the given data after the location specified by <emphasis>pos</emphasis>.</para>

<para>This operation is linear in the number of elements inserted and does not invalidate iterators and references.</para>

<para>Inserts a range into the forward_list. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__pos</entry><entry>
<para>An iterator into the forward_list. </para>
</entry>
                            </row>
                            <row>
<entry>__first</entry><entry>
<para>An input iterator. </para>
</entry>
                            </row>
                            <row>
<entry>__last</entry><entry>
<para>An input iterator. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>An iterator pointing to the last inserted element or <emphasis>__pos</emphasis> if <emphasis>__first</emphasis> == <emphasis>__last</emphasis>.</para>
</formalpara>
This function will insert copies of the data in the range [<emphasis>__first</emphasis>,<emphasis>__last</emphasis>) into the forward_list after the location specified by <emphasis>__pos</emphasis>.</para>

<para>This operation is linear in the number of elements inserted and does not invalidate iterators and references.</para>

<para>Inserts the contents of an initializer_list into forward_list after the specified iterator. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__pos</entry><entry>
<para>An iterator into the forward_list. </para>
</entry>
                            </row>
                            <row>
<entry>__il</entry><entry>
<para>An initializer_list of value_type. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>An iterator pointing to the last inserted element or <emphasis>__pos</emphasis> if <emphasis>__il</emphasis> is empty.</para>
</formalpara>
This function will insert copies of the data in the initializer_list <emphasis>__il</emphasis> into the forward_list before the location specified by <emphasis>__pos</emphasis>.</para>

<para>This operation is linear in the number of elements inserted and does not invalidate iterators and references.</para>

<para>Removes the element pointed to by the iterator following <computeroutput>pos</computeroutput>. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__pos</entry><entry>
<para>Iterator pointing before element to be erased. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>An iterator pointing to the element following the one that was erased, or <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end()</link> if no such element exists.</para>
</formalpara>
This function will erase the element at the given position and thus shorten the forward_list by one.</para>

<para>Due to the nature of a forward_list this operation can be done in constant time, and only invalidates iterators/references to the element being removed. The user is also cautioned that this function only erases the element, and that if the element is itself a pointer, the pointed-to memory is not touched in any way. Managing the pointer is the user&apos;s responsibility.</para>

<para>Remove a range of elements. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__pos</entry><entry>
<para>Iterator pointing before the first element to be erased. </para>
</entry>
                            </row>
                            <row>
<entry>__last</entry><entry>
<para>Iterator pointing to one past the last element to be erased. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>@ __last.</para>
</formalpara>
This function will erase the elements in the range <emphasis></emphasis>(__pos,__last) and shorten the forward_list accordingly.</para>

<para>This operation is linear time in the size of the range and only invalidates iterators/references to the element being removed. The user is also cautioned that this function only erases the elements, and that if the elements themselves are pointers, the pointed-to memory is not touched in any way. Managing the pointer is the user&apos;s responsibility.</para>

<para>Swaps data with another forward_list. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__list</entry><entry>
<para>A forward_list of the same element and allocator types.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                This exchanges the elements between two lists in constant time. Note that the global <link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap()</link> function is specialized such that std::swap(l1,l2) will feed to this function.</para>

<para>Whether the allocators are swapped depends on the allocator traits.</para>

<para>Resizes the forward_list to the specified number of elements. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__sz</entry><entry>
<para>Number of elements the forward_list should contain.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                This function will resize the forward_list to the specified number of elements. If the number is smaller than the forward_list&apos;s current number of elements the forward_list is truncated, otherwise the forward_list is extended and the new elements are default constructed.</para>

<para>Resizes the forward_list to the specified number of elements. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__sz</entry><entry>
<para>Number of elements the forward_list should contain. </para>
</entry>
                            </row>
                            <row>
<entry>__val</entry><entry>
<para>Data with which new elements should be populated.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                This function will resize the forward_list to the specified number of elements. If the number is smaller than the forward_list&apos;s current number of elements the forward_list is truncated, otherwise the forward_list is extended and new elements are populated with given data.</para>

<para>Erases all the elements.</para>

<para>Note that this function only erases the elements, and that if the elements themselves are pointers, the pointed-to memory is not touched in any way. Managing the pointer is the user&apos;s responsibility.</para>

<para>Insert contents of another forward_list. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__pos</entry><entry>
<para>Iterator referencing the element to insert after. </para>
</entry>
                            </row>
                            <row>
<entry>__list</entry><entry>
<para>Source list.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                The elements of <emphasis>list</emphasis> are inserted in constant time after the element referenced by <emphasis>pos</emphasis>. <emphasis>list</emphasis> becomes an empty list.</para>

<para>Requires this != <emphasis>x</emphasis>.</para>

<para>Insert element from another forward_list. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__pos</entry><entry>
<para>Iterator referencing the element to insert after. </para>
</entry>
                            </row>
                            <row>
<entry>__list</entry><entry>
<para>Source list. </para>
</entry>
                            </row>
                            <row>
<entry>__i</entry><entry>
<para>Iterator referencing the element before the element to move.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Removes the element in list <emphasis>list</emphasis> referenced by <emphasis>i</emphasis> and inserts it into the current list after <emphasis>pos</emphasis>.</para>

<para>Insert range from another forward_list. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__pos</entry><entry>
<para>Iterator referencing the element to insert after. </para>
</entry>
                            </row>
                            <row>
<entry>__list</entry><entry>
<para>Source list. </para>
</entry>
                            </row>
                            <row>
<entry>__before</entry><entry>
<para>Iterator referencing before the start of range in list. </para>
</entry>
                            </row>
                            <row>
<entry>__last</entry><entry>
<para>Iterator referencing the end of range in list.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Removes elements in the range (__before,__last) and inserts them after <emphasis>__pos</emphasis> in constant time.</para>

<para>Undefined if <emphasis>__pos</emphasis> is in (__before,__last).</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="_old_2_classes_2lib_2include_2c_09_09_2bits_2forward__list_8h_a544d74b2d5d0dd2197f5fd6f02691de0_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
</section>
