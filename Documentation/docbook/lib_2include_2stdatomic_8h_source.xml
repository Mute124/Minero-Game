<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2stdatomic_8h_source" xml:lang="en-US">
<title>stdatomic.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/stdatomic.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">/*&#32;Copyright&#32;(C)&#32;2013-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
2 <emphasis role="comment"></emphasis>
3 <emphasis role="comment">This&#32;file&#32;is&#32;part&#32;of&#32;GCC.</emphasis>
4 <emphasis role="comment"></emphasis>
5 <emphasis role="comment">GCC&#32;is&#32;free&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify</emphasis>
6 <emphasis role="comment">it&#32;under&#32;the&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by</emphasis>
7 <emphasis role="comment">the&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
8 <emphasis role="comment">any&#32;later&#32;version.</emphasis>
9 <emphasis role="comment"></emphasis>
10 <emphasis role="comment">GCC&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
11 <emphasis role="comment">but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
12 <emphasis role="comment">MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
13 <emphasis role="comment">GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
14 <emphasis role="comment"></emphasis>
15 <emphasis role="comment">Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
16 <emphasis role="comment">permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
17 <emphasis role="comment">3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
18 <emphasis role="comment"></emphasis>
19 <emphasis role="comment">You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
20 <emphasis role="comment">a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
21 <emphasis role="comment">see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
22 <emphasis role="comment">&lt;http://www.gnu.org/licenses/&gt;.&#32;&#32;*/</emphasis>
23 
24 <emphasis role="comment">/*&#32;ISO&#32;C11&#32;Standard:&#32;&#32;7.17&#32;&#32;Atomics&#32;&lt;stdatomic.h&gt;.&#32;&#32;*/</emphasis>
25 
26 <emphasis role="preprocessor">#ifndef&#32;_STDATOMIC_H</emphasis>
27 <emphasis role="preprocessor">#define&#32;_STDATOMIC_H</emphasis>
28 
29 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">enum</emphasis>
30 &#32;&#32;{
31 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bac6489d0374e297a776f6a3db7ea5654a">memory_order_relaxed</link>&#32;=&#32;__ATOMIC_RELAXED,
32 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba0745f54882bc00251a719e42969db110">memory_order_consume</link>&#32;=&#32;__ATOMIC_CONSUME,
33 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bafb313754331704b978e9a80a933b3da7">memory_order_acquire</link>&#32;=&#32;__ATOMIC_ACQUIRE,
34 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba685a90c8fc516895354973c3918a5f7b">memory_order_release</link>&#32;=&#32;__ATOMIC_RELEASE,
35 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bae17e60cbfd766a7f165872c36e2f7bc5">memory_order_acq_rel</link>&#32;=&#32;__ATOMIC_ACQ_REL,
36 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>&#32;=&#32;__ATOMIC_SEQ_CST
37 &#32;&#32;}&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>;
38 
39 
40 <emphasis role="keyword">typedef</emphasis>&#32;_Atomic&#32;_Bool&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a160b034c575d68f2ec8418828bdb7bc3">atomic_bool</link>;
41 <emphasis role="keyword">typedef</emphasis>&#32;_Atomic&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1ae71b7ded6f8b9d72dad4490a44006449">atomic_char</link>;
42 <emphasis role="keyword">typedef</emphasis>&#32;_Atomic&#32;<emphasis role="keywordtype">signed</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a56712a065938f7e2bf5aa6e5ef665068">atomic_schar</link>;
43 <emphasis role="keyword">typedef</emphasis>&#32;_Atomic&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a9d808e30fd52e9b23d72e559ec1afa21">atomic_uchar</link>;
44 <emphasis role="keyword">typedef</emphasis>&#32;_Atomic&#32;<emphasis role="keywordtype">short</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a436297f2d352d08f70eeb1fbb6d90ded">atomic_short</link>;
45 <emphasis role="keyword">typedef</emphasis>&#32;_Atomic&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a324ca6a025ccb4a4c5cdabebcc7588e9">atomic_ushort</link>;
46 <emphasis role="keyword">typedef</emphasis>&#32;_Atomic&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1ad231f6c6a0df0b56f57e081fc909dc9c">atomic_int</link>;
47 <emphasis role="keyword">typedef</emphasis>&#32;_Atomic&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a01560d5486d973773a22630e7d4b8116">atomic_uint</link>;
48 <emphasis role="keyword">typedef</emphasis>&#32;_Atomic&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a6498fef01484044f568b7f687d078308">atomic_long</link>;
49 <emphasis role="keyword">typedef</emphasis>&#32;_Atomic&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1ad78573b3e09a4a49325e98ec7866c4d2">atomic_ulong</link>;
50 <emphasis role="keyword">typedef</emphasis>&#32;_Atomic&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1abf810024440336e81808de9d5e8cf862">atomic_llong</link>;
51 <emphasis role="keyword">typedef</emphasis>&#32;_Atomic&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1ab602c79e1f6b2dc6d33d73654493195c">atomic_ullong</link>;
52 <emphasis role="keyword">typedef</emphasis>&#32;_Atomic&#32;__CHAR16_TYPE__&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a01b7ba720186938162fe00a579adfbb3">atomic_char16_t</link>;
53 <emphasis role="keyword">typedef</emphasis>&#32;_Atomic&#32;__CHAR32_TYPE__&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a8c5ff59d5feb7e9078e4bad89d090931">atomic_char32_t</link>;
54 <emphasis role="keyword">typedef</emphasis>&#32;_Atomic&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a4f41dbe213ea9662c1fb0f5af562e363">__WCHAR_TYPE__</link>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a9fc0f1024a6e62bdbfc832034f0d3763">atomic_wchar_t</link>;
55 <emphasis role="keyword">typedef</emphasis>&#32;_Atomic&#32;__INT_LEAST8_TYPE__&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1ad6780c6f3265666038810cb8f225d42f">atomic_int_least8_t</link>;
56 <emphasis role="keyword">typedef</emphasis>&#32;_Atomic&#32;__UINT_LEAST8_TYPE__&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a1bafb7b94900525dccddc183bff07338">atomic_uint_least8_t</link>;
57 <emphasis role="keyword">typedef</emphasis>&#32;_Atomic&#32;__INT_LEAST16_TYPE__&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a827600d8bf99b35df0cf756b641c5f80">atomic_int_least16_t</link>;
58 <emphasis role="keyword">typedef</emphasis>&#32;_Atomic&#32;__UINT_LEAST16_TYPE__&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1af4d97409dac07c8e5a5527f64ea75b89">atomic_uint_least16_t</link>;
59 <emphasis role="keyword">typedef</emphasis>&#32;_Atomic&#32;__INT_LEAST32_TYPE__&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1ac0e6de331d4ed7b6cf52096e13e4f032">atomic_int_least32_t</link>;
60 <emphasis role="keyword">typedef</emphasis>&#32;_Atomic&#32;__UINT_LEAST32_TYPE__&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1ae1784ec36c9eba754b6ac73c448dbb9d">atomic_uint_least32_t</link>;
61 <emphasis role="keyword">typedef</emphasis>&#32;_Atomic&#32;__INT_LEAST64_TYPE__&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a2713a9da0b6111129711d44765ee47ca">atomic_int_least64_t</link>;
62 <emphasis role="keyword">typedef</emphasis>&#32;_Atomic&#32;__UINT_LEAST64_TYPE__&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a742e7c147c736c425a7d1aece2d5c66d">atomic_uint_least64_t</link>;
63 <emphasis role="keyword">typedef</emphasis>&#32;_Atomic&#32;__INT_FAST8_TYPE__&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1af228023511bc63489dd716462d33a677">atomic_int_fast8_t</link>;
64 <emphasis role="keyword">typedef</emphasis>&#32;_Atomic&#32;__UINT_FAST8_TYPE__&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a5aa8670979339c97cc2a4e844d447b53">atomic_uint_fast8_t</link>;
65 <emphasis role="keyword">typedef</emphasis>&#32;_Atomic&#32;__INT_FAST16_TYPE__&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1ace84bbd457e897d385c005e2627c78aa">atomic_int_fast16_t</link>;
66 <emphasis role="keyword">typedef</emphasis>&#32;_Atomic&#32;__UINT_FAST16_TYPE__&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1af396f53d358e88cd0f1053a689eb1877">atomic_uint_fast16_t</link>;
67 <emphasis role="keyword">typedef</emphasis>&#32;_Atomic&#32;__INT_FAST32_TYPE__&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1acf8315fb8dd569972ca9dbc72bc1a536">atomic_int_fast32_t</link>;
68 <emphasis role="keyword">typedef</emphasis>&#32;_Atomic&#32;__UINT_FAST32_TYPE__&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1add9f4a957cf7485b6b67150957e9e4aa">atomic_uint_fast32_t</link>;
69 <emphasis role="keyword">typedef</emphasis>&#32;_Atomic&#32;__INT_FAST64_TYPE__&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1abbefb4b834990f56e5da37030c1aa978">atomic_int_fast64_t</link>;
70 <emphasis role="keyword">typedef</emphasis>&#32;_Atomic&#32;__UINT_FAST64_TYPE__&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a9cd4fda178057d41d506b562c2858396">atomic_uint_fast64_t</link>;
71 <emphasis role="keyword">typedef</emphasis>&#32;_Atomic&#32;__INTPTR_TYPE__&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a84a23d0e4605819e8bc302c1e9abd219">atomic_intptr_t</link>;
72 <emphasis role="keyword">typedef</emphasis>&#32;_Atomic&#32;__UINTPTR_TYPE__&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a4f400c462b6946c04f78552dc2ce40a9">atomic_uintptr_t</link>;
73 <emphasis role="keyword">typedef</emphasis>&#32;_Atomic&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1ab8d03bfd9e9120480015fc51dc8b8e65">__SIZE_TYPE__</link>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a3acbd996f28e051f7ca693ea20b4d4e9">atomic_size_t</link>;
74 <emphasis role="keyword">typedef</emphasis>&#32;_Atomic&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a726a020189392103a9404da070536e07">__PTRDIFF_TYPE__</link>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a073124755eb81e80109141fff1381038">atomic_ptrdiff_t</link>;
75 <emphasis role="keyword">typedef</emphasis>&#32;_Atomic&#32;__INTMAX_TYPE__&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1aa6f3b903210c0566ea8a3badab8baae7">atomic_intmax_t</link>;
76 <emphasis role="keyword">typedef</emphasis>&#32;_Atomic&#32;__UINTMAX_TYPE__&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a1647bab6fe3345feff9f293df1ee127f">atomic_uintmax_t</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
77 
78 
79 <emphasis role="preprocessor">#define&#32;ATOMIC_VAR_INIT(VALUE)&#32;&#32;(VALUE)</emphasis>
80 
81 <emphasis role="comment">/*&#32;Initialize&#32;an&#32;atomic&#32;object&#32;pointed&#32;to&#32;by&#32;PTR&#32;with&#32;VAL.&#32;&#32;*/</emphasis>
82 <emphasis role="preprocessor">#define&#32;atomic_init(PTR,&#32;VAL)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
83 <emphasis role="preprocessor">&#32;&#32;atomic_store_explicit&#32;(PTR,&#32;VAL,&#32;__ATOMIC_RELAXED)</emphasis>
84 
85 <emphasis role="preprocessor">#define&#32;kill_dependency(Y)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
86 <emphasis role="preprocessor">&#32;&#32;__extension__&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
87 <emphasis role="preprocessor">&#32;&#32;({&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
88 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__auto_type&#32;__kill_dependency_tmp&#32;=&#32;(Y);&#32;&#32;&#32;&#32;\</emphasis>
89 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__kill_dependency_tmp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
90 <emphasis role="preprocessor">&#32;&#32;})</emphasis>
91 
92 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a7c82e718a2fa06be84951fb72d275f9e">atomic_thread_fence</link>&#32;(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>);
93 <emphasis role="preprocessor">#define&#32;atomic_thread_fence(MO)&#32;__atomic_thread_fence&#32;(MO)</emphasis>
94 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a116e0cd17b559defe9c9a738674db03b">atomic_signal_fence</link>&#32;(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>);
95 <emphasis role="preprocessor">#define&#32;atomic_signal_fence(MO)&#32;__atomic_signal_fence&#32;&#32;(MO)</emphasis>
96 <emphasis role="preprocessor">#define&#32;atomic_is_lock_free(OBJ)&#32;__atomic_is_lock_free&#32;(sizeof&#32;(*(OBJ)),&#32;(OBJ))</emphasis>
97 
98 <emphasis role="preprocessor">#define&#32;ATOMIC_BOOL_LOCK_FREE&#32;&#32;&#32;&#32;&#32;&#32;&#32;__GCC_ATOMIC_BOOL_LOCK_FREE</emphasis>
99 <emphasis role="preprocessor">#define&#32;ATOMIC_CHAR_LOCK_FREE&#32;&#32;&#32;&#32;&#32;&#32;&#32;__GCC_ATOMIC_CHAR_LOCK_FREE</emphasis>
100 <emphasis role="preprocessor">#define&#32;ATOMIC_CHAR16_T_LOCK_FREE&#32;&#32;&#32;__GCC_ATOMIC_CHAR16_T_LOCK_FREE</emphasis>
101 <emphasis role="preprocessor">#define&#32;ATOMIC_CHAR32_T_LOCK_FREE&#32;&#32;&#32;__GCC_ATOMIC_CHAR32_T_LOCK_FREE</emphasis>
102 <emphasis role="preprocessor">#define&#32;ATOMIC_WCHAR_T_LOCK_FREE&#32;&#32;&#32;&#32;__GCC_ATOMIC_WCHAR_T_LOCK_FREE</emphasis>
103 <emphasis role="preprocessor">#define&#32;ATOMIC_SHORT_LOCK_FREE&#32;&#32;&#32;&#32;&#32;&#32;__GCC_ATOMIC_SHORT_LOCK_FREE</emphasis>
104 <emphasis role="preprocessor">#define&#32;ATOMIC_INT_LOCK_FREE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__GCC_ATOMIC_INT_LOCK_FREE</emphasis>
105 <emphasis role="preprocessor">#define&#32;ATOMIC_LONG_LOCK_FREE&#32;&#32;&#32;&#32;&#32;&#32;&#32;__GCC_ATOMIC_LONG_LOCK_FREE</emphasis>
106 <emphasis role="preprocessor">#define&#32;ATOMIC_LLONG_LOCK_FREE&#32;&#32;&#32;&#32;&#32;&#32;__GCC_ATOMIC_LLONG_LOCK_FREE</emphasis>
107 <emphasis role="preprocessor">#define&#32;ATOMIC_POINTER_LOCK_FREE&#32;&#32;&#32;&#32;__GCC_ATOMIC_POINTER_LOCK_FREE</emphasis>
108 
109 
110 <emphasis role="comment">/*&#32;Note&#32;that&#32;these&#32;macros&#32;require&#32;__auto_type&#32;to&#32;remove</emphasis>
111 <emphasis role="comment">&#32;&#32;&#32;_Atomic&#32;qualifiers&#32;(and&#32;const&#32;qualifiers,&#32;if&#32;those&#32;are&#32;valid&#32;on</emphasis>
112 <emphasis role="comment">&#32;&#32;&#32;macro&#32;operands).</emphasis>
113 <emphasis role="comment">&#32;&#32;&#32;</emphasis>
114 <emphasis role="comment">&#32;&#32;&#32;Also&#32;note&#32;that&#32;the&#32;header&#32;file&#32;uses&#32;the&#32;generic&#32;form&#32;of&#32;__atomic</emphasis>
115 <emphasis role="comment">&#32;&#32;&#32;builtins,&#32;which&#32;requires&#32;the&#32;address&#32;to&#32;be&#32;taken&#32;of&#32;the&#32;value</emphasis>
116 <emphasis role="comment">&#32;&#32;&#32;parameter,&#32;and&#32;then&#32;we&#32;pass&#32;that&#32;value&#32;on.&#32;&#32;This&#32;allows&#32;the&#32;macros</emphasis>
117 <emphasis role="comment">&#32;&#32;&#32;to&#32;work&#32;for&#32;any&#32;type,&#32;and&#32;the&#32;compiler&#32;is&#32;smart&#32;enough&#32;to&#32;convert</emphasis>
118 <emphasis role="comment">&#32;&#32;&#32;these&#32;to&#32;lock-free&#32;_N&#32;variants&#32;if&#32;possible,&#32;and&#32;throw&#32;away&#32;the</emphasis>
119 <emphasis role="comment">&#32;&#32;&#32;temps.&#32;&#32;*/</emphasis>
120 
121 <emphasis role="preprocessor">#define&#32;atomic_store_explicit(PTR,&#32;VAL,&#32;MO)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
122 <emphasis role="preprocessor">&#32;&#32;__extension__&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
123 <emphasis role="preprocessor">&#32;&#32;({&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
124 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__auto_type&#32;__atomic_store_ptr&#32;=&#32;(PTR);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
125 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__typeof__&#32;((void)0,&#32;*__atomic_store_ptr)&#32;__atomic_store_tmp&#32;=&#32;(VAL);&#32;&#32;&#32;\</emphasis>
126 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__atomic_store&#32;(__atomic_store_ptr,&#32;&amp;__atomic_store_tmp,&#32;(MO));&#32;\</emphasis>
127 <emphasis role="preprocessor">&#32;&#32;})</emphasis>
128 
129 <emphasis role="preprocessor">#define&#32;atomic_store(PTR,&#32;VAL)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
130 <emphasis role="preprocessor">&#32;&#32;atomic_store_explicit&#32;(PTR,&#32;VAL,&#32;__ATOMIC_SEQ_CST)</emphasis>
131 
132 
133 <emphasis role="preprocessor">#define&#32;atomic_load_explicit(PTR,&#32;MO)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
134 <emphasis role="preprocessor">&#32;&#32;__extension__&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
135 <emphasis role="preprocessor">&#32;&#32;({&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
136 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__auto_type&#32;__atomic_load_ptr&#32;=&#32;(PTR);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
137 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__typeof__&#32;((void)0,&#32;*__atomic_load_ptr)&#32;__atomic_load_tmp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
138 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__atomic_load&#32;(__atomic_load_ptr,&#32;&amp;__atomic_load_tmp,&#32;(MO));&#32;&#32;&#32;&#32;\</emphasis>
139 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__atomic_load_tmp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
140 <emphasis role="preprocessor">&#32;&#32;})</emphasis>
141 
142 <emphasis role="preprocessor">#define&#32;atomic_load(PTR)&#32;&#32;atomic_load_explicit&#32;(PTR,&#32;__ATOMIC_SEQ_CST)</emphasis>
143 
144 
145 <emphasis role="preprocessor">#define&#32;atomic_exchange_explicit(PTR,&#32;VAL,&#32;MO)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
146 <emphasis role="preprocessor">&#32;&#32;__extension__&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
147 <emphasis role="preprocessor">&#32;&#32;({&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
148 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__auto_type&#32;__atomic_exchange_ptr&#32;=&#32;(PTR);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
149 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__typeof__&#32;((void)0,&#32;*__atomic_exchange_ptr)&#32;__atomic_exchange_val&#32;=&#32;(VAL);&#32;\</emphasis>
150 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__typeof__&#32;((void)0,&#32;*__atomic_exchange_ptr)&#32;__atomic_exchange_tmp;&#32;&#32;&#32;&#32;&#32;\</emphasis>
151 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__atomic_exchange&#32;(__atomic_exchange_ptr,&#32;&amp;__atomic_exchange_val,&#32;&#32;&#32;\</emphasis>
152 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;__atomic_exchange_tmp,&#32;(MO));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
153 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__atomic_exchange_tmp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
154 <emphasis role="preprocessor">&#32;&#32;})</emphasis>
155 
156 <emphasis role="preprocessor">#define&#32;atomic_exchange(PTR,&#32;VAL)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
157 <emphasis role="preprocessor">&#32;&#32;atomic_exchange_explicit&#32;(PTR,&#32;VAL,&#32;__ATOMIC_SEQ_CST)</emphasis>
158 
159 
160 <emphasis role="preprocessor">#define&#32;atomic_compare_exchange_strong_explicit(PTR,&#32;VAL,&#32;DES,&#32;SUC,&#32;FAIL)&#32;\</emphasis>
161 <emphasis role="preprocessor">&#32;&#32;__extension__&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
162 <emphasis role="preprocessor">&#32;&#32;({&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
163 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__auto_type&#32;__atomic_compare_exchange_ptr&#32;=&#32;(PTR);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
164 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__typeof__&#32;((void)0,&#32;*__atomic_compare_exchange_ptr)&#32;__atomic_compare_exchange_tmp&#32;\</emphasis>
165 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;=&#32;(DES);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
166 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__atomic_compare_exchange&#32;(__atomic_compare_exchange_ptr,&#32;(VAL),&#32;&#32;&#32;&#32;\</emphasis>
167 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;__atomic_compare_exchange_tmp,&#32;0,&#32;&#32;&#32;\</emphasis>
168 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(SUC),&#32;(FAIL));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
169 <emphasis role="preprocessor">&#32;&#32;})</emphasis>
170 
171 <emphasis role="preprocessor">#define&#32;atomic_compare_exchange_strong(PTR,&#32;VAL,&#32;DES)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
172 <emphasis role="preprocessor">&#32;&#32;atomic_compare_exchange_strong_explicit&#32;(PTR,&#32;VAL,&#32;DES,&#32;__ATOMIC_SEQ_CST,&#32;\</emphasis>
173 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ATOMIC_SEQ_CST)</emphasis>
174 
175 <emphasis role="preprocessor">#define&#32;atomic_compare_exchange_weak_explicit(PTR,&#32;VAL,&#32;DES,&#32;SUC,&#32;FAIL)&#32;\</emphasis>
176 <emphasis role="preprocessor">&#32;&#32;__extension__&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
177 <emphasis role="preprocessor">&#32;&#32;({&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
178 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__auto_type&#32;__atomic_compare_exchange_ptr&#32;=&#32;(PTR);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
179 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__typeof__&#32;((void)0,&#32;*__atomic_compare_exchange_ptr)&#32;__atomic_compare_exchange_tmp&#32;\</emphasis>
180 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;=&#32;(DES);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
181 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__atomic_compare_exchange&#32;(__atomic_compare_exchange_ptr,&#32;(VAL),&#32;&#32;&#32;&#32;\</emphasis>
182 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;__atomic_compare_exchange_tmp,&#32;1,&#32;&#32;&#32;\</emphasis>
183 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(SUC),&#32;(FAIL));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
184 <emphasis role="preprocessor">&#32;&#32;})</emphasis>
185 
186 <emphasis role="preprocessor">#define&#32;atomic_compare_exchange_weak(PTR,&#32;VAL,&#32;DES)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
187 <emphasis role="preprocessor">&#32;&#32;atomic_compare_exchange_weak_explicit&#32;(PTR,&#32;VAL,&#32;DES,&#32;__ATOMIC_SEQ_CST,&#32;\</emphasis>
188 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ATOMIC_SEQ_CST)</emphasis>
189 
190 
191 
192 <emphasis role="preprocessor">#define&#32;atomic_fetch_add(PTR,&#32;VAL)&#32;__atomic_fetch_add&#32;((PTR),&#32;(VAL),&#32;&#32;&#32;&#32;\</emphasis>
193 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ATOMIC_SEQ_CST)</emphasis>
194 <emphasis role="preprocessor">#define&#32;atomic_fetch_add_explicit(PTR,&#32;VAL,&#32;MO)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
195 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__atomic_fetch_add&#32;((PTR),&#32;(VAL),&#32;(MO))</emphasis>
196 
197 <emphasis role="preprocessor">#define&#32;atomic_fetch_sub(PTR,&#32;VAL)&#32;__atomic_fetch_sub&#32;((PTR),&#32;(VAL),&#32;&#32;&#32;&#32;\</emphasis>
198 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ATOMIC_SEQ_CST)</emphasis>
199 <emphasis role="preprocessor">#define&#32;atomic_fetch_sub_explicit(PTR,&#32;VAL,&#32;MO)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
200 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__atomic_fetch_sub&#32;((PTR),&#32;(VAL),&#32;(MO))</emphasis>
201 
202 <emphasis role="preprocessor">#define&#32;atomic_fetch_or(PTR,&#32;VAL)&#32;__atomic_fetch_or&#32;((PTR),&#32;(VAL),&#32;&#32;\</emphasis>
203 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ATOMIC_SEQ_CST)</emphasis>
204 <emphasis role="preprocessor">#define&#32;atomic_fetch_or_explicit(PTR,&#32;VAL,&#32;MO)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
205 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__atomic_fetch_or&#32;((PTR),&#32;(VAL),&#32;(MO))</emphasis>
206 
207 <emphasis role="preprocessor">#define&#32;atomic_fetch_xor(PTR,&#32;VAL)&#32;__atomic_fetch_xor&#32;((PTR),&#32;(VAL),&#32;&#32;&#32;&#32;\</emphasis>
208 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ATOMIC_SEQ_CST)</emphasis>
209 <emphasis role="preprocessor">#define&#32;atomic_fetch_xor_explicit(PTR,&#32;VAL,&#32;MO)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
210 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__atomic_fetch_xor&#32;((PTR),&#32;(VAL),&#32;(MO))</emphasis>
211 
212 <emphasis role="preprocessor">#define&#32;atomic_fetch_and(PTR,&#32;VAL)&#32;__atomic_fetch_and&#32;((PTR),&#32;(VAL),&#32;&#32;&#32;&#32;\</emphasis>
213 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ATOMIC_SEQ_CST)</emphasis>
214 <emphasis role="preprocessor">#define&#32;atomic_fetch_and_explicit(PTR,&#32;VAL,&#32;MO)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
215 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__atomic_fetch_and&#32;((PTR),&#32;(VAL),&#32;(MO))</emphasis>
216 
217 
218 <emphasis role="keyword">typedef</emphasis>&#32;_Atomic&#32;<emphasis role="keyword">struct</emphasis>
219 {
220 <emphasis role="preprocessor">#if&#32;__GCC_ATOMIC_TEST_AND_SET_TRUEVAL&#32;==&#32;1</emphasis>
221 &#32;&#32;_Bool&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>;
222 <emphasis role="preprocessor">#else</emphasis>
223 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>;
224 <emphasis role="preprocessor">#endif</emphasis>
225 }&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1aa3f127383701111a33a51247a2d666e1">atomic_flag</link>;
226 
227 <emphasis role="preprocessor">#define&#32;ATOMIC_FLAG_INIT&#32;&#32;&#32;&#32;{&#32;0&#32;}</emphasis>
228 
229 
230 <emphasis role="keyword">extern</emphasis>&#32;_Bool&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a1340adde527db9e19a05e8cbf06ada09">atomic_flag_test_and_set</link>&#32;(<emphasis role="keyword">volatile</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1aa3f127383701111a33a51247a2d666e1">atomic_flag</link>&#32;*);
231 <emphasis role="preprocessor">#define&#32;atomic_flag_test_and_set(PTR)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
232 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__atomic_test_and_set&#32;((PTR),&#32;__ATOMIC_SEQ_CST)</emphasis>
233 <emphasis role="keyword">extern</emphasis>&#32;_Bool&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1aa4734ef3368ecb46fa520ccb83159cbd">atomic_flag_test_and_set_explicit</link>&#32;(<emphasis role="keyword">volatile</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1aa3f127383701111a33a51247a2d666e1">atomic_flag</link>&#32;*,
234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>);
235 <emphasis role="preprocessor">#define&#32;atomic_flag_test_and_set_explicit(PTR,&#32;MO)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
236 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__atomic_test_and_set&#32;((PTR),&#32;(MO))</emphasis>
237 
238 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a95d12f1d50a5012f0d27ed169998aaa3">atomic_flag_clear</link>&#32;(<emphasis role="keyword">volatile</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1aa3f127383701111a33a51247a2d666e1">atomic_flag</link>&#32;*);
239 <emphasis role="preprocessor">#define&#32;atomic_flag_clear(PTR)&#32;&#32;__atomic_clear&#32;((PTR),&#32;__ATOMIC_SEQ_CST)</emphasis>
240 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a4e2276c0474043cd9cd29308afeb75a6">atomic_flag_clear_explicit</link>&#32;(<emphasis role="keyword">volatile</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1aa3f127383701111a33a51247a2d666e1">atomic_flag</link>&#32;*,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>);
241 <emphasis role="preprocessor">#define&#32;atomic_flag_clear_explicit(PTR,&#32;MO)&#32;&#32;&#32;__atomic_clear&#32;((PTR),&#32;(MO))</emphasis>
242 
243 <emphasis role="preprocessor">#endif&#32;&#32;</emphasis><emphasis role="comment">/*&#32;_STDATOMIC_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
