<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class____gnu__debug_1_1___safe__unordered__container" xml:lang="en-US">
<title>__gnu_debug::_Safe_unordered_container&lt; _Container &gt; Class Template Reference</title>
<indexterm><primary>__gnu_debug::_Safe_unordered_container&lt; _Container &gt;</primary></indexterm>
<para>

<para>Base class for constructing a <emphasis>safe</emphasis> unordered container type that tracks iterators that reference it. </para>
 
</para>
<para>
<computeroutput>#include &lt;safe_unordered_container.h&gt;</computeroutput>
</para>
Inheritance diagram for __gnu_debug::_Safe_unordered_container&lt; _Container &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__unordered__container__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for __gnu_debug::_Safe_unordered_container&lt; _Container &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__unordered__container__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__unordered__container_1a1cd59f7dfebb1c28f012efacbcfd92a2">_M_invalidate_all</link> ()</para>
</listitem>
            <listitem><para>template&lt;typename _Predicate &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__unordered__container_1aff0fe666b60f05c5f8da0ae92548ad42">_M_invalidate_if</link> (_Predicate __pred)</para>
</listitem>
            <listitem><para>template&lt;typename _Predicate &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__unordered__container_1aa3e9b27e61fad7cb80cfab023eac395d">_M_invalidate_local_if</link> (_Predicate __pred)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__unordered__container_1a1cd59f7dfebb1c28f012efacbcfd92a2">_M_invalidate_all</link> ()</para>
</listitem>
            <listitem><para>template&lt;typename _Predicate &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__unordered__container_1aff0fe666b60f05c5f8da0ae92548ad42">_M_invalidate_if</link> (_Predicate __pred)</para>
</listitem>
            <listitem><para>template&lt;typename _Predicate &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__unordered__container_1aa3e9b27e61fad7cb80cfab023eac395d">_M_invalidate_local_if</link> (_Predicate __pred)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__unordered__container_1af38fea658dbbc19d870448021ade3a17">_M_invalidate_locals</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__unordered__container_1af38fea658dbbc19d870448021ade3a17">_M_invalidate_locals</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
Protected Member Functions inherited from <link linkend="_class____gnu__debug_1_1___safe__unordered__container__base">__gnu_debug::_Safe_unordered_container_base</link>        <itemizedlist>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__unordered__container__base_1a9e65f903563508a84aff66abc81f0a5d">_Safe_unordered_container_base</link> () noexcept</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__unordered__container__base_1a6f7357bc3a3a6ef05fff5425d2416560">_Safe_unordered_container_base</link> (const <link linkend="_class____gnu__debug_1_1___safe__unordered__container__base">_Safe_unordered_container_base</link> &amp;) noexcept</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__unordered__container__base_1a4c64b0f6365a57a5acea89a074ca8510">_Safe_unordered_container_base</link> (<link linkend="_class____gnu__debug_1_1___safe__unordered__container__base">_Safe_unordered_container_base</link> &amp;&amp;__x) noexcept</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__unordered__container__base_1a918ae91156e92a8701da15fc61d05b63">~_Safe_unordered_container_base</link> () noexcept</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__unordered__container__base_1aa7ec5c80048329d10fe2916fff73aeff">_M_detach_all</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__unordered__container__base_1a1ff909e73bfb6e9646caf6df99db2d70">_M_swap</link> (<link linkend="_class____gnu__debug_1_1___safe__unordered__container__base">_Safe_unordered_container_base</link> &amp;__x) noexcept</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__unordered__container__base_1a9e65f903563508a84aff66abc81f0a5d">_Safe_unordered_container_base</link> () noexcept</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__unordered__container__base_1a6f7357bc3a3a6ef05fff5425d2416560">_Safe_unordered_container_base</link> (const <link linkend="_class____gnu__debug_1_1___safe__unordered__container__base">_Safe_unordered_container_base</link> &amp;) noexcept</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__unordered__container__base_1a4c64b0f6365a57a5acea89a074ca8510">_Safe_unordered_container_base</link> (<link linkend="_class____gnu__debug_1_1___safe__unordered__container__base">_Safe_unordered_container_base</link> &amp;&amp;__x) noexcept</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__unordered__container__base_1a918ae91156e92a8701da15fc61d05b63">~_Safe_unordered_container_base</link> () noexcept</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__unordered__container__base_1aa7ec5c80048329d10fe2916fff73aeff">_M_detach_all</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__unordered__container__base_1a1ff909e73bfb6e9646caf6df99db2d70">_M_swap</link> (<link linkend="_class____gnu__debug_1_1___safe__unordered__container__base">_Safe_unordered_container_base</link> &amp;__x) noexcept</para>
</listitem>
        </itemizedlist>
Protected Member Functions inherited from <link linkend="_class____gnu__debug_1_1___safe__sequence__base">__gnu_debug::_Safe_sequence_base</link>        <itemizedlist>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__sequence__base_1ab37172446e16eca63620c13465558341">_Safe_sequence_base</link> () _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__sequence__base_1a9061ce48f8c5627d61a2e4a72a43f479">~_Safe_sequence_base</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1acebac46f833f903deb7c094fc26cbea1">_M_detach_all</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1aadde2fc883be085fc4588c1ef442cd3d">_M_detach_singular</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1a75f6eb02cd1721b550bd5eb205ed6920">_M_revalidate_singular</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1a8782fb392e549945fd9e910caf3b1c23">_M_swap</link> (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> &amp;__x) _GLIBCXX_USE_NOEXCEPT</para>
</listitem>
            <listitem><para>__gnu_cxx::__mutex &amp; <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1a688ceccbb7f5cfb2b4e95f569df4191d">_M_get_mutex</link> ()  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1a58a4c8925457fcf371457ec9f071a31f">_M_invalidate_all</link> () const</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__sequence__base_1ab37172446e16eca63620c13465558341">_Safe_sequence_base</link> () _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__sequence__base_1a9061ce48f8c5627d61a2e4a72a43f479">~_Safe_sequence_base</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1acebac46f833f903deb7c094fc26cbea1">_M_detach_all</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1aadde2fc883be085fc4588c1ef442cd3d">_M_detach_singular</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1a75f6eb02cd1721b550bd5eb205ed6920">_M_revalidate_singular</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1a8782fb392e549945fd9e910caf3b1c23">_M_swap</link> (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> &amp;__x) _GLIBCXX_USE_NOEXCEPT</para>
</listitem>
            <listitem><para>__gnu_cxx::__mutex &amp; <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1a688ceccbb7f5cfb2b4e95f569df4191d">_M_get_mutex</link> ()  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1a58a4c8925457fcf371457ec9f071a31f">_M_invalidate_all</link> () const</para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Additional Inherited Members    </title>
Public Attributes inherited from <link linkend="_class____gnu__debug_1_1___safe__unordered__container__base">__gnu_debug::_Safe_unordered_container_base</link>        <itemizedlist>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> * <link linkend="_class____gnu__debug_1_1___safe__unordered__container__base_1ab0b248ca894d2694f9288b70466fe90b">_M_local_iterators</link></para>

<para>The list of mutable local iterators that reference this container. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> * <link linkend="_class____gnu__debug_1_1___safe__unordered__container__base_1a728e08773218195fe7e6b5749dd67761">_M_const_local_iterators</link></para>

<para>The list of constant local iterators that reference this container. </para>
</listitem>
        </itemizedlist>
</simplesect>
Public Attributes inherited from <link linkend="_class____gnu__debug_1_1___safe__sequence__base">__gnu_debug::_Safe_sequence_base</link>        <itemizedlist>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> * <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1a715ed592a623b3bc625d773347216c32">_M_iterators</link></para>

<para>The list of mutable iterators that reference this container. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> * <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1ad9e21ce9e18f4d060195458d3c197112">_M_const_iterators</link></para>

<para>The list of constant iterators that reference this container. </para>
</listitem>
            <listitem><para>unsigned int <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1af796b1fd115ea27cd078eeb7e4909bd5">_M_version</link></para>

<para>The container version number. This number may never be 0. </para>
</listitem>
        </itemizedlist>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename _Container&gt;<?linebreak?>class __gnu_debug::_Safe_unordered_container&lt; _Container &gt;</title></simplesect>

<para>Base class for constructing a <emphasis>safe</emphasis> unordered container type that tracks iterators that reference it. </para>



<para>The class template _Safe_unordered_container simplifies the construction of <emphasis>safe</emphasis> unordered containers that track the iterators that reference the container, so that the iterators are notified of changes in the container that may affect their operation, e.g., if the container invalidates its iterators or is destructed. This class template may only be used by deriving from it and passing the name of the derived class as its template parameter via the curiously recurring template pattern. The derived class must have <computeroutput>iterator</computeroutput> and <computeroutput>const_iterator</computeroutput> types that are instantiations of class template <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> for this container and <computeroutput>local_iterator</computeroutput> and <computeroutput>const_local_iterator</computeroutput> types that are instantiations of class template <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link> for this container. Iterators will then be tracked automatically. </para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class____gnu__debug_1_1___safe__unordered__container_1a1cd59f7dfebb1c28f012efacbcfd92a2"/><section>
    <title>_M_invalidate_all()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>_M_invalidate_all</primary><secondary>__gnu_debug::_Safe_unordered_container&lt; _Container &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_unordered_container&lt; _Container &gt;</primary><secondary>_M_invalidate_all</secondary></indexterm>
<computeroutput>template&lt;typename _Container &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__unordered__container">__gnu_debug::_Safe_unordered_container</link>&lt; _Container &gt;::_M_invalidate_all ( )<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__unordered__container_a1cd59f7dfebb1c28f012efacbcfd92a2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__unordered__container_1a1cd59f7dfebb1c28f012efacbcfd92a2"/><section>
    <title>_M_invalidate_all()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>_M_invalidate_all</primary><secondary>__gnu_debug::_Safe_unordered_container&lt; _Container &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_unordered_container&lt; _Container &gt;</primary><secondary>_M_invalidate_all</secondary></indexterm>
<computeroutput>template&lt;typename _Container &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__unordered__container">__gnu_debug::_Safe_unordered_container</link>&lt; _Container &gt;::_M_invalidate_all ( )<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__unordered__container_a1cd59f7dfebb1c28f012efacbcfd92a2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__unordered__container_1aff0fe666b60f05c5f8da0ae92548ad42"/><section>
    <title>_M_invalidate_if()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>_M_invalidate_if</primary><secondary>__gnu_debug::_Safe_unordered_container&lt; _Container &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_unordered_container&lt; _Container &gt;</primary><secondary>_M_invalidate_if</secondary></indexterm>
<computeroutput>template&lt;typename _Container &gt; </computeroutput><computeroutput>template&lt;typename _Predicate &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__unordered__container">__gnu_debug::_Safe_unordered_container</link>&lt; _Container &gt;::_M_invalidate_if (_Predicate __pred)</computeroutput></para>
<para>Invalidates all iterators <computeroutput>x</computeroutput> that reference this container, are not singular, and for which <computeroutput>__pred(x)</computeroutput> returns <computeroutput>true</computeroutput>. <computeroutput>__pred</computeroutput> will be invoked with the normal iterators nested in the safe ones. </para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__unordered__container_aff0fe666b60f05c5f8da0ae92548ad42_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__unordered__container_1aff0fe666b60f05c5f8da0ae92548ad42"/><section>
    <title>_M_invalidate_if()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>_M_invalidate_if</primary><secondary>__gnu_debug::_Safe_unordered_container&lt; _Container &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_unordered_container&lt; _Container &gt;</primary><secondary>_M_invalidate_if</secondary></indexterm>
<computeroutput>template&lt;typename _Container &gt; </computeroutput><computeroutput>template&lt;typename _Predicate &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__unordered__container">__gnu_debug::_Safe_unordered_container</link>&lt; _Container &gt;::_M_invalidate_if (_Predicate __pred)</computeroutput></para>
<para>Invalidates all iterators <computeroutput>x</computeroutput> that reference this container, are not singular, and for which <computeroutput>__pred(x)</computeroutput> returns <computeroutput>true</computeroutput>. <computeroutput>__pred</computeroutput> will be invoked with the normal iterators nested in the safe ones. </para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__unordered__container_1aa3e9b27e61fad7cb80cfab023eac395d"/><section>
    <title>_M_invalidate_local_if()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>_M_invalidate_local_if</primary><secondary>__gnu_debug::_Safe_unordered_container&lt; _Container &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_unordered_container&lt; _Container &gt;</primary><secondary>_M_invalidate_local_if</secondary></indexterm>
<computeroutput>template&lt;typename _Container &gt; </computeroutput><computeroutput>template&lt;typename _Predicate &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__unordered__container">__gnu_debug::_Safe_unordered_container</link>&lt; _Container &gt;::_M_invalidate_local_if (_Predicate __pred)</computeroutput></para>
<para>Invalidates all local iterators <computeroutput>x</computeroutput> that reference this container, are not singular, and for which <computeroutput>__pred(x)</computeroutput> returns <computeroutput>true</computeroutput>. <computeroutput>__pred</computeroutput> will be invoked with the normal local iterators nested in the safe ones. </para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__unordered__container_aa3e9b27e61fad7cb80cfab023eac395d_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__unordered__container_1aa3e9b27e61fad7cb80cfab023eac395d"/><section>
    <title>_M_invalidate_local_if()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>_M_invalidate_local_if</primary><secondary>__gnu_debug::_Safe_unordered_container&lt; _Container &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_unordered_container&lt; _Container &gt;</primary><secondary>_M_invalidate_local_if</secondary></indexterm>
<computeroutput>template&lt;typename _Container &gt; </computeroutput><computeroutput>template&lt;typename _Predicate &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__unordered__container">__gnu_debug::_Safe_unordered_container</link>&lt; _Container &gt;::_M_invalidate_local_if (_Predicate __pred)</computeroutput></para>
<para>Invalidates all local iterators <computeroutput>x</computeroutput> that reference this container, are not singular, and for which <computeroutput>__pred(x)</computeroutput> returns <computeroutput>true</computeroutput>. <computeroutput>__pred</computeroutput> will be invoked with the normal local iterators nested in the safe ones. </para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__unordered__container_1af38fea658dbbc19d870448021ade3a17"/><section>
    <title>_M_invalidate_locals()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>_M_invalidate_locals</primary><secondary>__gnu_debug::_Safe_unordered_container&lt; _Container &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_unordered_container&lt; _Container &gt;</primary><secondary>_M_invalidate_locals</secondary></indexterm>
<computeroutput>template&lt;typename _Container &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__unordered__container">__gnu_debug::_Safe_unordered_container</link>&lt; _Container &gt;::_M_invalidate_locals ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__unordered__container_af38fea658dbbc19d870448021ade3a17_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__unordered__container_af38fea658dbbc19d870448021ade3a17_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__unordered__container_1af38fea658dbbc19d870448021ade3a17"/><section>
    <title>_M_invalidate_locals()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>_M_invalidate_locals</primary><secondary>__gnu_debug::_Safe_unordered_container&lt; _Container &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_unordered_container&lt; _Container &gt;</primary><secondary>_M_invalidate_locals</secondary></indexterm>
<computeroutput>template&lt;typename _Container &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__unordered__container">__gnu_debug::_Safe_unordered_container</link>&lt; _Container &gt;::_M_invalidate_locals ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__unordered__container_af38fea658dbbc19d870448021ade3a17_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/debug/<link linkend="_lib_2include_2c_09_09_2debug_2safe__unordered__container_8h">safe_unordered_container.h</link>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/debug/<link linkend="__old_2_classes_2lib_2include_2c_09_09_2debug_2safe__unordered__container_8h">safe_unordered_container.h</link></section>
</section>
