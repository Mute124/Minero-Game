<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2bits_2stl__deque_8h_source" xml:lang="en-US">
<title>stl_deque.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/bits/stl_deque.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Deque&#32;implementation&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2001-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">/*</emphasis>
26 <emphasis role="comment">&#32;*</emphasis>
27 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1994</emphasis>
28 <emphasis role="comment">&#32;*&#32;Hewlett-Packard&#32;Company</emphasis>
29 <emphasis role="comment">&#32;*</emphasis>
30 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
31 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
32 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
33 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
34 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Hewlett-Packard&#32;Company&#32;makes&#32;no</emphasis>
35 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
36 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
37 <emphasis role="comment">&#32;*</emphasis>
38 <emphasis role="comment">&#32;*</emphasis>
39 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1997</emphasis>
40 <emphasis role="comment">&#32;*&#32;Silicon&#32;Graphics&#32;Computer&#32;Systems,&#32;Inc.</emphasis>
41 <emphasis role="comment">&#32;*</emphasis>
42 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
43 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
44 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
45 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
46 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Silicon&#32;Graphics&#32;makes&#32;no</emphasis>
47 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
48 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
49 <emphasis role="comment">&#32;*/</emphasis>
50 
56 <emphasis role="preprocessor">#ifndef&#32;_STL_DEQUE_H</emphasis>
57 <emphasis role="preprocessor">#define&#32;_STL_DEQUE_H&#32;1</emphasis>
58 
59 <emphasis role="preprocessor">#include&#32;&lt;bits/concept_check.h&gt;</emphasis>
60 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_iterator_base_types.h&gt;</emphasis>
61 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_iterator_base_funcs.h&gt;</emphasis>
62 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
63 <emphasis role="preprocessor">#include&#32;&lt;initializer_list&gt;</emphasis>
64 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_uninitialized.h&gt;</emphasis>&#32;<emphasis role="comment">//&#32;for&#32;__is_bitwise_relocatable</emphasis>
65 <emphasis role="preprocessor">#endif</emphasis>
66 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
67 <emphasis role="preprocessor">#&#32;include&#32;&lt;compare&gt;</emphasis>
68 <emphasis role="preprocessor">#endif</emphasis>
69 
70 <emphasis role="preprocessor">#include&#32;&lt;debug/assertions.h&gt;</emphasis>
71 
72 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
73 {
74 _GLIBCXX_BEGIN_NAMESPACE_VERSION
75 _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
76 
91 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_DEQUE_BUF_SIZE</emphasis>
92 <emphasis role="preprocessor">#define&#32;_GLIBCXX_DEQUE_BUF_SIZE&#32;512</emphasis>
93 <emphasis role="preprocessor">#endif</emphasis>
94 
95 &#32;&#32;_GLIBCXX_CONSTEXPR&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>
96 &#32;&#32;__deque_buf_size(<emphasis role="keywordtype">size_t</emphasis>&#32;__size)
97 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__size&#32;&lt;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2stl__deque_8h_1a87949eb8a238d15bbc7d30d84cd3b8cf">_GLIBCXX_DEQUE_BUF_SIZE</link>
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;<emphasis role="keywordtype">size_t</emphasis>(<link linkend="__classes_2lib_2include_2c_09_09_2bits_2stl__deque_8h_1a87949eb8a238d15bbc7d30d84cd3b8cf">_GLIBCXX_DEQUE_BUF_SIZE</link>&#32;/&#32;__size)&#32;:&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link>(1));&#32;}
99 
100 
112 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ref,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ptr&gt;
113 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Deque_iterator
114 &#32;&#32;&#32;&#32;{
115 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
116 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Deque_iterator&lt;_Tp,&#32;_Tp&amp;,&#32;_Tp*&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator;
117 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Deque_iterator&lt;_Tp,&#32;const&#32;_Tp&amp;,&#32;const&#32;_Tp*&gt;&#32;const_iterator;
118 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Elt_pointer;
119 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp**&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Map_pointer;
120 <emphasis role="preprocessor">#else</emphasis>
121 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
122 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CvTp&gt;
123 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__iter&#32;=&#32;_Deque_iterator&lt;_Tp,&#32;_CvTp&amp;,&#32;__ptr_rebind&lt;_Ptr,&#32;_CvTp&gt;&gt;;
124 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
125 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__iter&lt;_Tp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator;
126 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__iter&lt;const&#32;_Tp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_iterator;
127 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__ptr_rebind&lt;_Ptr,&#32;_Tp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Elt_pointer;
128 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__ptr_rebind&lt;_Ptr,&#32;_Elt_pointer&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Map_pointer;
129 <emphasis role="preprocessor">#endif</emphasis>
130 
131 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_buffer_size()&#32;_GLIBCXX_NOEXCEPT
132 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__deque_buf_size(<emphasis role="keyword">sizeof</emphasis>(_Tp));&#32;}
133 
134 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::random_access_iterator_tag&#32;&#32;&#32;iterator_category;
135 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
136 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Ptr&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
137 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Ref&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference;
138 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type;
139 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;difference_type;
140 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Deque_iterator&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Self;
141 
142 &#32;&#32;&#32;&#32;&#32;&#32;_Elt_pointer&#32;_M_cur;
143 &#32;&#32;&#32;&#32;&#32;&#32;_Elt_pointer&#32;_M_first;
144 &#32;&#32;&#32;&#32;&#32;&#32;_Elt_pointer&#32;_M_last;
145 &#32;&#32;&#32;&#32;&#32;&#32;_Map_pointer&#32;_M_node;
146 
147 &#32;&#32;&#32;&#32;&#32;&#32;_Deque_iterator(_Elt_pointer&#32;__x,&#32;_Map_pointer&#32;__y)&#32;_GLIBCXX_NOEXCEPT
148 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_cur(__x),&#32;_M_first(*__y),
149 &#32;&#32;&#32;&#32;_M_last(*__y&#32;+&#32;_S_buffer_size()),&#32;_M_node(__y)&#32;{&#32;}
150 
151 &#32;&#32;&#32;&#32;&#32;&#32;_Deque_iterator()&#32;_GLIBCXX_NOEXCEPT
152 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_cur(),&#32;_M_first(),&#32;_M_last(),&#32;_M_node()&#32;{&#32;}
153 
154 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
155 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Conversion&#32;from&#32;iterator&#32;to&#32;const_iterator.</emphasis>
156 &#32;&#32;&#32;&#32;&#32;&#32;_Deque_iterator(<emphasis role="keyword">const</emphasis>&#32;iterator&amp;&#32;__x)&#32;_GLIBCXX_NOEXCEPT
157 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_cur(__x._M_cur),&#32;_M_first(__x._M_first),
158 &#32;&#32;&#32;&#32;_M_last(__x._M_last),&#32;_M_node(__x._M_node)&#32;{&#32;}
159 <emphasis role="preprocessor">#else</emphasis>
160 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Conversion&#32;from&#32;iterator&#32;to&#32;const_iterator.</emphasis>
161 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter,
162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_Require&lt;is_same&lt;_Self,&#32;const_iterator&gt;,
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_same&lt;_Iter,&#32;iterator&gt;&gt;&gt;
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_Deque_iterator(<emphasis role="keyword">const</emphasis>&#32;_Iter&amp;&#32;__x)&#32;noexcept
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_cur(__x._M_cur),&#32;_M_first(__x._M_first),
166 &#32;&#32;&#32;&#32;&#32;_M_last(__x._M_last),&#32;_M_node(__x._M_node)&#32;{&#32;}
167 
168 &#32;&#32;&#32;&#32;&#32;&#32;_Deque_iterator(<emphasis role="keyword">const</emphasis>&#32;_Deque_iterator&amp;&#32;__x)&#32;noexcept
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_cur(__x._M_cur),&#32;_M_first(__x._M_first),
170 &#32;&#32;&#32;&#32;&#32;_M_last(__x._M_last),&#32;_M_node(__x._M_node)&#32;{&#32;}
171 
172 &#32;&#32;&#32;&#32;&#32;&#32;_Deque_iterator&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;_Deque_iterator&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
173 <emphasis role="preprocessor">#endif</emphasis>
174 
175 &#32;&#32;&#32;&#32;&#32;&#32;iterator
176 &#32;&#32;&#32;&#32;&#32;&#32;_M_const_cast()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
177 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(_M_cur,&#32;_M_node);&#32;}
178 
179 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
180 &#32;&#32;&#32;&#32;&#32;&#32;reference
181 &#32;&#32;&#32;&#32;&#32;&#32;operator*()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
182 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*_M_cur;&#32;}
183 
184 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
185 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
186 &#32;&#32;&#32;&#32;&#32;&#32;operator-&gt;()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
187 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_cur;&#32;}
188 
189 &#32;&#32;&#32;&#32;&#32;&#32;_Self&amp;
190 &#32;&#32;&#32;&#32;&#32;&#32;operator++()&#32;_GLIBCXX_NOEXCEPT
191 &#32;&#32;&#32;&#32;&#32;&#32;{
192 &#32;&#32;&#32;&#32;++_M_cur;
193 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_cur&#32;==&#32;_M_last)
194 &#32;&#32;&#32;&#32;&#32;&#32;{
195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_set_node(_M_node&#32;+&#32;1);
196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_cur&#32;=&#32;_M_first;
197 &#32;&#32;&#32;&#32;&#32;&#32;}
198 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
199 &#32;&#32;&#32;&#32;&#32;&#32;}
200 
201 &#32;&#32;&#32;&#32;&#32;&#32;_Self
202 &#32;&#32;&#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)&#32;_GLIBCXX_NOEXCEPT
203 &#32;&#32;&#32;&#32;&#32;&#32;{
204 &#32;&#32;&#32;&#32;_Self&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
205 &#32;&#32;&#32;&#32;++*<emphasis role="keyword">this</emphasis>;
206 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
207 &#32;&#32;&#32;&#32;&#32;&#32;}
208 
209 &#32;&#32;&#32;&#32;&#32;&#32;_Self&amp;
210 &#32;&#32;&#32;&#32;&#32;&#32;operator--()&#32;_GLIBCXX_NOEXCEPT
211 &#32;&#32;&#32;&#32;&#32;&#32;{
212 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_cur&#32;==&#32;_M_first)
213 &#32;&#32;&#32;&#32;&#32;&#32;{
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_set_node(_M_node&#32;-&#32;1);
215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_cur&#32;=&#32;_M_last;
216 &#32;&#32;&#32;&#32;&#32;&#32;}
217 &#32;&#32;&#32;&#32;--_M_cur;
218 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
219 &#32;&#32;&#32;&#32;&#32;&#32;}
220 
221 &#32;&#32;&#32;&#32;&#32;&#32;_Self
222 &#32;&#32;&#32;&#32;&#32;&#32;operator--(<emphasis role="keywordtype">int</emphasis>)&#32;_GLIBCXX_NOEXCEPT
223 &#32;&#32;&#32;&#32;&#32;&#32;{
224 &#32;&#32;&#32;&#32;_Self&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
225 &#32;&#32;&#32;&#32;--*<emphasis role="keyword">this</emphasis>;
226 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
227 &#32;&#32;&#32;&#32;&#32;&#32;}
228 
229 &#32;&#32;&#32;&#32;&#32;&#32;_Self&amp;
230 &#32;&#32;&#32;&#32;&#32;&#32;operator+=(difference_type&#32;__n)&#32;_GLIBCXX_NOEXCEPT
231 &#32;&#32;&#32;&#32;&#32;&#32;{
232 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;difference_type&#32;__offset&#32;=&#32;__n&#32;+&#32;(_M_cur&#32;-&#32;_M_first);
233 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__offset&#32;&gt;=&#32;0&#32;&amp;&amp;&#32;__offset&#32;&lt;&#32;difference_type(_S_buffer_size()))
234 &#32;&#32;&#32;&#32;&#32;&#32;_M_cur&#32;+=&#32;__n;
235 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
236 &#32;&#32;&#32;&#32;&#32;&#32;{
237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;difference_type&#32;__node_offset&#32;=
238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__offset&#32;&gt;&#32;0&#32;?&#32;__offset&#32;/&#32;difference_type(_S_buffer_size())
239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;-difference_type((-__offset&#32;-&#32;1)
240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/&#32;_S_buffer_size())&#32;-&#32;1;
241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_set_node(_M_node&#32;+&#32;__node_offset);
242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_cur&#32;=&#32;_M_first&#32;+&#32;(__offset&#32;-&#32;__node_offset
243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;difference_type(_S_buffer_size()));
244 &#32;&#32;&#32;&#32;&#32;&#32;}
245 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
246 &#32;&#32;&#32;&#32;&#32;&#32;}
247 
248 &#32;&#32;&#32;&#32;&#32;&#32;_Self&amp;
249 &#32;&#32;&#32;&#32;&#32;&#32;operator-=(difference_type&#32;__n)&#32;_GLIBCXX_NOEXCEPT
250 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;+=&#32;-__n;&#32;}
251 
252 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
253 &#32;&#32;&#32;&#32;&#32;&#32;reference
254 &#32;&#32;&#32;&#32;&#32;&#32;operator[](difference_type&#32;__n)&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
255 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*(*<emphasis role="keyword">this</emphasis>&#32;+&#32;__n);&#32;}
256 
262 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
263 &#32;&#32;&#32;&#32;&#32;&#32;_M_set_node(_Map_pointer&#32;__new_node)&#32;_GLIBCXX_NOEXCEPT
264 &#32;&#32;&#32;&#32;&#32;&#32;{
265 &#32;&#32;&#32;&#32;_M_node&#32;=&#32;__new_node;
266 &#32;&#32;&#32;&#32;_M_first&#32;=&#32;*__new_node;
267 &#32;&#32;&#32;&#32;_M_last&#32;=&#32;_M_first&#32;+&#32;difference_type(_S_buffer_size());
268 &#32;&#32;&#32;&#32;&#32;&#32;}
269 
270 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
271 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
272 &#32;&#32;&#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__y)&#32;_GLIBCXX_NOEXCEPT
273 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_cur&#32;==&#32;__y._M_cur;&#32;}
274 
275 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note:&#32;we&#32;also&#32;provide&#32;overloads&#32;whose&#32;operands&#32;are&#32;of&#32;the&#32;same&#32;type&#32;in</emphasis>
276 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;order&#32;to&#32;avoid&#32;ambiguous&#32;overload&#32;resolution&#32;when&#32;std::rel_ops</emphasis>
277 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;operators&#32;are&#32;in&#32;scope&#32;(for&#32;additional&#32;details,&#32;see&#32;libstdc++/3628)</emphasis>
278 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RefR,&#32;<emphasis role="keyword">typename</emphasis>&#32;_PtrR&gt;
279 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
280 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
281 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__x,
282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Deque_iterator&lt;_Tp,&#32;_RefR,&#32;_PtrR&gt;&amp;&#32;__y)
283 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
284 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_cur&#32;==&#32;__y._M_cur;&#32;}
285 
286 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
287 &#32;&#32;&#32;&#32;&#32;&#32;[[nodiscard]]
288 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;strong_ordering
289 &#32;&#32;&#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
290 &#32;&#32;&#32;&#32;&#32;&#32;{
291 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__cmp&#32;=&#32;__x._M_node&#32;&lt;=&gt;&#32;__y._M_node;&#32;__cmp&#32;!=&#32;0)
292 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__cmp;
293 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_cur&#32;&lt;=&gt;&#32;__y._M_cur;
294 &#32;&#32;&#32;&#32;&#32;&#32;}
295 <emphasis role="preprocessor">#else</emphasis>
296 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
297 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
298 &#32;&#32;&#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__y)&#32;_GLIBCXX_NOEXCEPT
299 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__x&#32;==&#32;__y);&#32;}
300 
301 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RefR,&#32;<emphasis role="keyword">typename</emphasis>&#32;_PtrR&gt;
302 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
303 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
304 &#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__x,
305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Deque_iterator&lt;_Tp,&#32;_RefR,&#32;_PtrR&gt;&amp;&#32;__y)
306 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
307 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__x&#32;==&#32;__y);&#32;}
308 
309 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
310 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
311 &#32;&#32;&#32;&#32;&#32;&#32;operator&lt;(<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__y)&#32;_GLIBCXX_NOEXCEPT
312 &#32;&#32;&#32;&#32;&#32;&#32;{
313 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__x._M_node&#32;==&#32;__y._M_node)
314 &#32;&#32;&#32;&#32;&#32;&#32;?&#32;(__x._M_cur&#32;&lt;&#32;__y._M_cur)&#32;:&#32;(__x._M_node&#32;&lt;&#32;__y._M_node);
315 &#32;&#32;&#32;&#32;&#32;&#32;}
316 
317 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RefR,&#32;<emphasis role="keyword">typename</emphasis>&#32;_PtrR&gt;
318 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
319 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
320 &#32;&#32;&#32;&#32;operator&lt;(<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__x,
321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Deque_iterator&lt;_Tp,&#32;_RefR,&#32;_PtrR&gt;&amp;&#32;__y)
322 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
323 &#32;&#32;&#32;&#32;{
324 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__x._M_node&#32;==&#32;__y._M_node)
325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;(__x._M_cur&#32;&lt;&#32;__y._M_cur)&#32;:&#32;(__x._M_node&#32;&lt;&#32;__y._M_node);
326 &#32;&#32;&#32;&#32;}
327 
328 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
329 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
330 &#32;&#32;&#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__y)&#32;_GLIBCXX_NOEXCEPT
331 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__y&#32;&lt;&#32;__x;&#32;}
332 
333 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RefR,&#32;<emphasis role="keyword">typename</emphasis>&#32;_PtrR&gt;
334 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
335 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
336 &#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__x,
337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Deque_iterator&lt;_Tp,&#32;_RefR,&#32;_PtrR&gt;&amp;&#32;__y)
338 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
339 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__y&#32;&lt;&#32;__x;&#32;}
340 
341 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
342 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
343 &#32;&#32;&#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__y)&#32;_GLIBCXX_NOEXCEPT
344 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__y&#32;&lt;&#32;__x);&#32;}
345 
346 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RefR,&#32;<emphasis role="keyword">typename</emphasis>&#32;_PtrR&gt;
347 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
348 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
349 &#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__x,
350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Deque_iterator&lt;_Tp,&#32;_RefR,&#32;_PtrR&gt;&amp;&#32;__y)
351 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
352 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__y&#32;&lt;&#32;__x);&#32;}
353 
354 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
355 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
356 &#32;&#32;&#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__y)&#32;_GLIBCXX_NOEXCEPT
357 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__x&#32;&lt;&#32;__y);&#32;}
358 
359 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RefR,&#32;<emphasis role="keyword">typename</emphasis>&#32;_PtrR&gt;
360 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
361 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
362 &#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__x,
363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Deque_iterator&lt;_Tp,&#32;_RefR,&#32;_PtrR&gt;&amp;&#32;__y)
364 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
365 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__x&#32;&lt;&#32;__y);&#32;}
366 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;three-way&#32;comparison</emphasis>
367 
368 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
369 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;difference_type
370 &#32;&#32;&#32;&#32;&#32;&#32;operator-(<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__y)&#32;_GLIBCXX_NOEXCEPT
371 &#32;&#32;&#32;&#32;&#32;&#32;{
372 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;difference_type(_S_buffer_size())
373 &#32;&#32;&#32;&#32;&#32;&#32;*&#32;(__x._M_node&#32;-&#32;__y._M_node&#32;-&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>(__x._M_node))
374 &#32;&#32;&#32;&#32;&#32;&#32;+&#32;(__x._M_cur&#32;-&#32;__x._M_first)
375 &#32;&#32;&#32;&#32;&#32;&#32;+&#32;(__y._M_last&#32;-&#32;__y._M_cur);
376 &#32;&#32;&#32;&#32;&#32;&#32;}
377 
378 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
379 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;According&#32;to&#32;the&#32;resolution&#32;of&#32;DR179&#32;not&#32;only&#32;the&#32;various&#32;comparison</emphasis>
380 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;operators&#32;but&#32;also&#32;operator-&#32;must&#32;accept&#32;mixed&#32;iterator/const_iterator</emphasis>
381 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;parameters.</emphasis>
382 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RefR,&#32;<emphasis role="keyword">typename</emphasis>&#32;_PtrR&gt;
383 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
384 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;difference_type
385 &#32;&#32;&#32;&#32;operator-(<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__x,
386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Deque_iterator&lt;_Tp,&#32;_RefR,&#32;_PtrR&gt;&amp;&#32;__y)
387 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
388 &#32;&#32;&#32;&#32;{
389 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;difference_type(_S_buffer_size())
390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;(__x._M_node&#32;-&#32;__y._M_node&#32;-&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>(__x._M_node))
391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;(__x._M_cur&#32;-&#32;__x._M_first)
392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;(__y._M_last&#32;-&#32;__y._M_cur);
393 &#32;&#32;&#32;&#32;}
394 
395 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
396 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;_Self
397 &#32;&#32;&#32;&#32;&#32;&#32;operator+(<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__x,&#32;difference_type&#32;__n)&#32;_GLIBCXX_NOEXCEPT
398 &#32;&#32;&#32;&#32;&#32;&#32;{
399 &#32;&#32;&#32;&#32;_Self&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__x;
400 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;+=&#32;__n;
401 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
402 &#32;&#32;&#32;&#32;&#32;&#32;}
403 
404 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
405 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;_Self
406 &#32;&#32;&#32;&#32;&#32;&#32;operator-(<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__x,&#32;difference_type&#32;__n)&#32;_GLIBCXX_NOEXCEPT
407 &#32;&#32;&#32;&#32;&#32;&#32;{
408 &#32;&#32;&#32;&#32;_Self&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__x;
409 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;-=&#32;__n;
410 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
411 &#32;&#32;&#32;&#32;&#32;&#32;}
412 
413 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
414 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;_Self
415 &#32;&#32;&#32;&#32;&#32;&#32;operator+(difference_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__x)&#32;_GLIBCXX_NOEXCEPT
416 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;+&#32;__n;&#32;}
417 &#32;&#32;&#32;&#32;};
418 
429 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
430 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Deque_base
431 &#32;&#32;&#32;&#32;{
432 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
433 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Alloc&gt;::template
434 &#32;&#32;&#32;&#32;rebind&lt;_Tp&gt;::other&#32;_Tp_alloc_type;
435 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Tp_alloc_type&gt;&#32;&#32;_Alloc_traits;
436 
437 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
438 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Ptr;
439 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Ptr_const;
440 <emphasis role="preprocessor">#else</emphasis>
441 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::pointer&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Ptr;
442 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::const_pointer&#32;_Ptr_const;
443 <emphasis role="preprocessor">#endif</emphasis>
444 
445 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::template&#32;rebind&lt;_Ptr&gt;::other
446 &#32;&#32;&#32;&#32;_Map_alloc_type;
447 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Map_alloc_type&gt;&#32;_Map_alloc_traits;
448 
449 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Alloc&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator_type;
450 
451 &#32;&#32;&#32;&#32;&#32;&#32;allocator_type
452 &#32;&#32;&#32;&#32;&#32;&#32;get_allocator()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
453 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;allocator_type(_M_get_Tp_allocator());&#32;}
454 
455 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Deque_iterator&lt;_Tp,&#32;_Tp&amp;,&#32;_Ptr&gt;&#32;&#32;&#32;&#32;iterator;
456 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Deque_iterator&lt;_Tp,&#32;const&#32;_Tp&amp;,&#32;_Ptr_const&gt;&#32;&#32;&#32;const_iterator;
457 
458 &#32;&#32;&#32;&#32;&#32;&#32;_Deque_base()
459 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_impl()
460 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_initialize_map(0);&#32;}
461 
462 &#32;&#32;&#32;&#32;&#32;&#32;_Deque_base(<emphasis role="keywordtype">size_t</emphasis>&#32;__num_elements)
463 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_impl()
464 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_initialize_map(__num_elements);&#32;}
465 
466 &#32;&#32;&#32;&#32;&#32;&#32;_Deque_base(<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__num_elements)
467 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_impl(__a)
468 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_initialize_map(__num_elements);&#32;}
469 
470 &#32;&#32;&#32;&#32;&#32;&#32;_Deque_base(<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
471 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_impl(__a)
472 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">/*&#32;Caller&#32;must&#32;initialize&#32;map.&#32;*/</emphasis>&#32;}
473 
474 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
475 &#32;&#32;&#32;&#32;&#32;&#32;_Deque_base(_Deque_base&amp;&amp;&#32;__x)
476 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_impl(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x._M_get_Tp_allocator()))
477 &#32;&#32;&#32;&#32;&#32;&#32;{
478 &#32;&#32;&#32;&#32;_M_initialize_map(0);
479 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x._M_impl._M_map)
480 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_swap_data(__x._M_impl);
481 &#32;&#32;&#32;&#32;&#32;&#32;}
482 
483 &#32;&#32;&#32;&#32;&#32;&#32;_Deque_base(_Deque_base&amp;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
484 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_impl(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x._M_impl),&#32;_Tp_alloc_type(__a))
485 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__x._M_initialize_map(0);&#32;}
486 
487 &#32;&#32;&#32;&#32;&#32;&#32;_Deque_base(_Deque_base&amp;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n)
488 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_impl(__a)
489 &#32;&#32;&#32;&#32;&#32;&#32;{
490 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x.get_allocator()&#32;==&#32;__a)
491 &#32;&#32;&#32;&#32;&#32;&#32;{
492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x._M_impl._M_map)
493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_initialize_map(0);
495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_swap_data(__x._M_impl);
496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
497 &#32;&#32;&#32;&#32;&#32;&#32;}
498 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
499 &#32;&#32;&#32;&#32;&#32;&#32;{
500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_initialize_map(__n);
501 &#32;&#32;&#32;&#32;&#32;&#32;}
502 &#32;&#32;&#32;&#32;&#32;&#32;}
503 <emphasis role="preprocessor">#endif</emphasis>
504 
505 &#32;&#32;&#32;&#32;&#32;&#32;~_Deque_base()&#32;_GLIBCXX_NOEXCEPT;
506 
507 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator::_Map_pointer&#32;_Map_pointer;
508 
509 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Deque_impl_data
510 &#32;&#32;&#32;&#32;&#32;&#32;{
511 &#32;&#32;&#32;&#32;_Map_pointer&#32;_M_map;
512 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_M_map_size;
513 &#32;&#32;&#32;&#32;iterator&#32;_M_start;
514 &#32;&#32;&#32;&#32;iterator&#32;_M_finish;
515 
516 &#32;&#32;&#32;&#32;_Deque_impl_data()&#32;_GLIBCXX_NOEXCEPT
517 &#32;&#32;&#32;&#32;:&#32;_M_map(),&#32;_M_map_size(),&#32;_M_start(),&#32;_M_finish()
518 &#32;&#32;&#32;&#32;{&#32;}
519 
520 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
521 &#32;&#32;&#32;&#32;_Deque_impl_data(<emphasis role="keyword">const</emphasis>&#32;_Deque_impl_data&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
522 &#32;&#32;&#32;&#32;_Deque_impl_data&amp;
523 &#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;_Deque_impl_data&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
524 
525 &#32;&#32;&#32;&#32;_Deque_impl_data(_Deque_impl_data&amp;&amp;&#32;__x)&#32;noexcept
526 &#32;&#32;&#32;&#32;:&#32;_Deque_impl_data(__x)
527 &#32;&#32;&#32;&#32;{&#32;__x&#32;=&#32;_Deque_impl_data();&#32;}
528 <emphasis role="preprocessor">#endif</emphasis>
529 
530 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
531 &#32;&#32;&#32;&#32;_M_swap_data(_Deque_impl_data&amp;&#32;__x)&#32;_GLIBCXX_NOEXCEPT
532 &#32;&#32;&#32;&#32;{
533 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Do&#32;not&#32;use&#32;std::swap(_M_start,&#32;__x._M_start),&#32;etc&#32;as&#32;it&#32;loses</emphasis>
534 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;information&#32;used&#32;by&#32;TBAA.</emphasis>
535 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(*<emphasis role="keyword">this</emphasis>,&#32;__x);
536 &#32;&#32;&#32;&#32;}
537 &#32;&#32;&#32;&#32;&#32;&#32;};
538 
539 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;struct&#32;encapsulates&#32;the&#32;implementation&#32;of&#32;the&#32;std::deque</emphasis>
540 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;standard&#32;container&#32;and&#32;at&#32;the&#32;same&#32;time&#32;makes&#32;use&#32;of&#32;the&#32;EBO</emphasis>
541 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;empty&#32;allocators.</emphasis>
542 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Deque_impl
543 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Tp_alloc_type,&#32;<emphasis role="keyword">public</emphasis>&#32;_Deque_impl_data
544 &#32;&#32;&#32;&#32;&#32;&#32;{
545 &#32;&#32;&#32;&#32;_Deque_impl()&#32;_GLIBCXX_NOEXCEPT_IF(
546 &#32;&#32;&#32;&#32;&#32;&#32;is_nothrow_default_constructible&lt;_Tp_alloc_type&gt;::value)
547 &#32;&#32;&#32;&#32;:&#32;_Tp_alloc_type()
548 &#32;&#32;&#32;&#32;{&#32;}
549 
550 &#32;&#32;&#32;&#32;_Deque_impl(<emphasis role="keyword">const</emphasis>&#32;_Tp_alloc_type&amp;&#32;__a)&#32;_GLIBCXX_NOEXCEPT
551 &#32;&#32;&#32;&#32;:&#32;_Tp_alloc_type(__a)
552 &#32;&#32;&#32;&#32;{&#32;}
553 
554 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
555 &#32;&#32;&#32;&#32;_Deque_impl(_Deque_impl&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
556 
557 &#32;&#32;&#32;&#32;_Deque_impl(_Tp_alloc_type&amp;&amp;&#32;__a)&#32;noexcept
558 &#32;&#32;&#32;&#32;:&#32;_Tp_alloc_type(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__a))
559 &#32;&#32;&#32;&#32;{&#32;}
560 
561 &#32;&#32;&#32;&#32;_Deque_impl(_Deque_impl&amp;&amp;&#32;__d,&#32;_Tp_alloc_type&amp;&amp;&#32;__a)
562 &#32;&#32;&#32;&#32;:&#32;_Tp_alloc_type(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__a)),&#32;_Deque_impl_data(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__d))
563 &#32;&#32;&#32;&#32;{&#32;}
564 <emphasis role="preprocessor">#endif</emphasis>
565 &#32;&#32;&#32;&#32;&#32;&#32;};
566 
567 &#32;&#32;&#32;&#32;&#32;&#32;_Tp_alloc_type&amp;
568 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_Tp_allocator()&#32;_GLIBCXX_NOEXCEPT
569 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_impl;&#32;}
570 
571 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp_alloc_type&amp;
572 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_Tp_allocator()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
573 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_impl;&#32;}
574 
575 &#32;&#32;&#32;&#32;&#32;&#32;_Map_alloc_type
576 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_map_allocator()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
577 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Map_alloc_type(_M_get_Tp_allocator());&#32;}
578 
579 &#32;&#32;&#32;&#32;&#32;&#32;_Ptr
580 &#32;&#32;&#32;&#32;&#32;&#32;_M_allocate_node()
581 &#32;&#32;&#32;&#32;&#32;&#32;{
582 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Tp_alloc_type&gt;&#32;_Traits;
583 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Traits::allocate(_M_impl,&#32;__deque_buf_size(<emphasis role="keyword">sizeof</emphasis>(_Tp)));
584 &#32;&#32;&#32;&#32;&#32;&#32;}
585 
586 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
587 &#32;&#32;&#32;&#32;&#32;&#32;_M_deallocate_node(_Ptr&#32;__p)&#32;_GLIBCXX_NOEXCEPT
588 &#32;&#32;&#32;&#32;&#32;&#32;{
589 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Tp_alloc_type&gt;&#32;_Traits;
590 &#32;&#32;&#32;&#32;_Traits::deallocate(_M_impl,&#32;__p,&#32;__deque_buf_size(<emphasis role="keyword">sizeof</emphasis>(_Tp)));
591 &#32;&#32;&#32;&#32;&#32;&#32;}
592 
593 &#32;&#32;&#32;&#32;&#32;&#32;_Map_pointer
594 &#32;&#32;&#32;&#32;&#32;&#32;_M_allocate_map(<emphasis role="keywordtype">size_t</emphasis>&#32;__n)
595 &#32;&#32;&#32;&#32;&#32;&#32;{
596 &#32;&#32;&#32;&#32;_Map_alloc_type&#32;__map_alloc&#32;=&#32;_M_get_map_allocator();
597 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Map_alloc_traits::allocate(__map_alloc,&#32;__n);
598 &#32;&#32;&#32;&#32;&#32;&#32;}
599 
600 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
601 &#32;&#32;&#32;&#32;&#32;&#32;_M_deallocate_map(_Map_pointer&#32;__p,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n)&#32;_GLIBCXX_NOEXCEPT
602 &#32;&#32;&#32;&#32;&#32;&#32;{
603 &#32;&#32;&#32;&#32;_Map_alloc_type&#32;__map_alloc&#32;=&#32;_M_get_map_allocator();
604 &#32;&#32;&#32;&#32;_Map_alloc_traits::deallocate(__map_alloc,&#32;__p,&#32;__n);
605 &#32;&#32;&#32;&#32;&#32;&#32;}
606 
607 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_initialize_map(<emphasis role="keywordtype">size_t</emphasis>);
608 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_create_nodes(_Map_pointer&#32;__nstart,&#32;_Map_pointer&#32;__nfinish);
609 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_destroy_nodes(_Map_pointer&#32;__nstart,
610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Map_pointer&#32;__nfinish)&#32;_GLIBCXX_NOEXCEPT;
611 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;_S_initial_map_size&#32;=&#32;8&#32;};
612 
613 &#32;&#32;&#32;&#32;&#32;&#32;_Deque_impl&#32;_M_impl;
614 &#32;&#32;&#32;&#32;};
615 
616 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
617 &#32;&#32;&#32;&#32;_Deque_base&lt;_Tp,&#32;_Alloc&gt;::
618 &#32;&#32;&#32;&#32;~_Deque_base()&#32;_GLIBCXX_NOEXCEPT
619 &#32;&#32;&#32;&#32;{
620 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;_M_impl._M_map)
621 &#32;&#32;&#32;&#32;{
622 &#32;&#32;&#32;&#32;&#32;&#32;_M_destroy_nodes(this-&gt;_M_impl._M_start._M_node,
623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_finish._M_node&#32;+&#32;1);
624 &#32;&#32;&#32;&#32;&#32;&#32;_M_deallocate_map(this-&gt;_M_impl._M_map,&#32;this-&gt;_M_impl._M_map_size);
625 &#32;&#32;&#32;&#32;}
626 &#32;&#32;&#32;&#32;}
627 
636 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
637 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
638 &#32;&#32;&#32;&#32;_Deque_base&lt;_Tp,&#32;_Alloc&gt;::
639 &#32;&#32;&#32;&#32;_M_initialize_map(<emphasis role="keywordtype">size_t</emphasis>&#32;__num_elements)
640 &#32;&#32;&#32;&#32;{
641 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__num_nodes&#32;=&#32;(__num_elements&#32;/&#32;__deque_buf_size(<emphasis role="keyword">sizeof</emphasis>(_Tp))
642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;1);
643 
644 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_map_size&#32;=&#32;std::max((<emphasis role="keywordtype">size_t</emphasis>)&#32;_S_initial_map_size,
645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>(__num_nodes&#32;+&#32;2));
646 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_map&#32;=&#32;_M_allocate_map(this-&gt;_M_impl._M_map_size);
647 
648 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;&quot;small&quot;&#32;maps&#32;(needing&#32;less&#32;than&#32;_M_map_size&#32;nodes),&#32;allocation</emphasis>
649 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;starts&#32;in&#32;the&#32;middle&#32;elements&#32;and&#32;grows&#32;outwards.&#32;&#32;So&#32;nstart&#32;may&#32;be</emphasis>
650 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;beginning&#32;of&#32;_M_map,&#32;but&#32;for&#32;small&#32;maps&#32;it&#32;may&#32;be&#32;as&#32;far&#32;in&#32;as</emphasis>
651 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_M_map+3.</emphasis>
652 
653 &#32;&#32;&#32;&#32;&#32;&#32;_Map_pointer&#32;__nstart&#32;=&#32;(this-&gt;_M_impl._M_map
654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;(this-&gt;_M_impl._M_map_size&#32;-&#32;__num_nodes)&#32;/&#32;2);
655 &#32;&#32;&#32;&#32;&#32;&#32;_Map_pointer&#32;__nfinish&#32;=&#32;__nstart&#32;+&#32;__num_nodes;
656 
657 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
658 &#32;&#32;&#32;&#32;{&#32;_M_create_nodes(__nstart,&#32;__nfinish);&#32;}
659 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
660 &#32;&#32;&#32;&#32;{
661 &#32;&#32;&#32;&#32;&#32;&#32;_M_deallocate_map(this-&gt;_M_impl._M_map,&#32;this-&gt;_M_impl._M_map_size);
662 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_map&#32;=&#32;_Map_pointer();
663 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_map_size&#32;=&#32;0;
664 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
665 &#32;&#32;&#32;&#32;}
666 
667 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_start._M_set_node(__nstart);
668 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_finish._M_set_node(__nfinish&#32;-&#32;1);
669 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_start._M_cur&#32;=&#32;_M_impl._M_start._M_first;
670 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_finish._M_cur&#32;=&#32;(this-&gt;_M_impl._M_finish._M_first
671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;__num_elements
672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;%&#32;__deque_buf_size(<emphasis role="keyword">sizeof</emphasis>(_Tp)));
673 &#32;&#32;&#32;&#32;}
674 
675 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
676 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
677 &#32;&#32;&#32;&#32;_Deque_base&lt;_Tp,&#32;_Alloc&gt;::
678 &#32;&#32;&#32;&#32;_M_create_nodes(_Map_pointer&#32;__nstart,&#32;_Map_pointer&#32;__nfinish)
679 &#32;&#32;&#32;&#32;{
680 &#32;&#32;&#32;&#32;&#32;&#32;_Map_pointer&#32;__cur;
681 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
682 &#32;&#32;&#32;&#32;{
683 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(__cur&#32;=&#32;__nstart;&#32;__cur&#32;&lt;&#32;__nfinish;&#32;++__cur)
684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__cur&#32;=&#32;this-&gt;_M_allocate_node();
685 &#32;&#32;&#32;&#32;}
686 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
687 &#32;&#32;&#32;&#32;{
688 &#32;&#32;&#32;&#32;&#32;&#32;_M_destroy_nodes(__nstart,&#32;__cur);
689 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
690 &#32;&#32;&#32;&#32;}
691 &#32;&#32;&#32;&#32;}
692 
693 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
694 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
695 &#32;&#32;&#32;&#32;_Deque_base&lt;_Tp,&#32;_Alloc&gt;::
696 &#32;&#32;&#32;&#32;_M_destroy_nodes(_Map_pointer&#32;__nstart,
697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Map_pointer&#32;__nfinish)&#32;_GLIBCXX_NOEXCEPT
698 &#32;&#32;&#32;&#32;{
699 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_Map_pointer&#32;__n&#32;=&#32;__nstart;&#32;__n&#32;&lt;&#32;__nfinish;&#32;++__n)
700 &#32;&#32;&#32;&#32;_M_deallocate_node(*__n);
701 &#32;&#32;&#32;&#32;}
702 
787 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&#32;=&#32;std::allocator&lt;_Tp&gt;&#32;&gt;
788 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>deque&#32;:&#32;<emphasis role="keyword">protected</emphasis>&#32;_Deque_base&lt;_Tp,&#32;_Alloc&gt;
789 &#32;&#32;&#32;&#32;{
790 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_CONCEPT_CHECKS</emphasis>
791 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
792 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc::value_type&#32;&#32;&#32;_Alloc_value_type;
793 <emphasis role="preprocessor">#&#32;if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
794 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ae4dc1beb74b88e6b1215e05c397fc7a2">__glibcxx_class_requires</link>(_Tp,&#32;_SGIAssignableConcept)
795 <emphasis role="preprocessor">#&#32;endif</emphasis>
796 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ae97aa7f8b95f5fdb311dc98ff0c31c72">__glibcxx_class_requires2</link>(_Tp,&#32;_Alloc_value_type,&#32;_SameTypeConcept)
797 <emphasis role="preprocessor">#endif</emphasis>
798 
799 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
800 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same&lt;typename&#32;remove_cv&lt;_Tp&gt;::type,&#32;_Tp&gt;<link linkend="_classvalue">::value</link>,
801 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;std::deque&#32;must&#32;have&#32;a&#32;non-const,&#32;non-volatile&#32;value_type&quot;</emphasis>);
802 <emphasis role="preprocessor">#&#32;if&#32;__cplusplus&#32;&gt;&#32;201703L&#32;||&#32;defined&#32;__STRICT_ANSI__</emphasis>
803 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same&lt;typename&#32;_Alloc::value_type,&#32;_Tp&gt;::value,
804 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;std::deque&#32;must&#32;have&#32;the&#32;same&#32;value_type&#32;as&#32;its&#32;allocator&quot;</emphasis>);
805 <emphasis role="preprocessor">#&#32;endif</emphasis>
806 <emphasis role="preprocessor">#endif</emphasis>
807 
808 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Deque_base&lt;_Tp,&#32;_Alloc&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Base;
809 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::_Tp_alloc_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp_alloc_type;
810 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::_Alloc_traits&#32;&#32;&#32;&#32;&#32;_Alloc_traits;
811 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::_Map_pointer&#32;&#32;&#32;&#32;&#32;&#32;_Map_pointer;
812 
813 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
814 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
815 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::pointer&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
816 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::const_pointer&#32;const_pointer;
817 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::reference&#32;&#32;&#32;&#32;&#32;reference;
818 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::const_reference&#32;&#32;&#32;const_reference;
819 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::iterator&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator;
820 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::const_iterator&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_iterator;
821 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::reverse_iterator&lt;const_iterator&gt;&#32;const_reverse_iterator;
822 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::reverse_iterator&lt;iterator&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator;
823 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type;
824 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;difference_type;
825 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Alloc&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator_type;
826 
827 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
828 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_buffer_size()&#32;_GLIBCXX_NOEXCEPT
829 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__deque_buf_size(<emphasis role="keyword">sizeof</emphasis>(_Tp));&#32;}
830 
831 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Functions&#32;controlling&#32;memory&#32;layout,&#32;and&#32;nothing&#32;else.</emphasis>
832 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::_M_initialize_map;
833 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::_M_create_nodes;
834 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::_M_destroy_nodes;
835 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::_M_allocate_node;
836 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::_M_deallocate_node;
837 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::_M_allocate_map;
838 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::_M_deallocate_map;
839 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::_M_get_Tp_allocator;
840 
845 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::_M_impl;
846 
847 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
848 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[23.2.1.1]&#32;construct/copy/destroy</emphasis>
849 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(assign()&#32;and&#32;get_allocator()&#32;are&#32;also&#32;listed&#32;in&#32;this&#32;section)</emphasis>
850 
854 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
855 &#32;&#32;&#32;&#32;&#32;&#32;deque()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
856 <emphasis role="preprocessor">#else</emphasis>
857 &#32;&#32;&#32;&#32;&#32;&#32;deque()&#32;{&#32;}
858 <emphasis role="preprocessor">#endif</emphasis>
859 
864 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
865 &#32;&#32;&#32;&#32;&#32;&#32;deque(<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
866 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__a,&#32;0)&#32;{&#32;}
867 
868 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
877 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
878 &#32;&#32;&#32;&#32;&#32;&#32;deque(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
879 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__a,&#32;_S_check_init_len(__n,&#32;__a))
880 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_default_initialize();&#32;}
881 
890 &#32;&#32;&#32;&#32;&#32;&#32;deque(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__value,
891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
892 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__a,&#32;_S_check_init_len(__n,&#32;__a))
893 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_fill_initialize(__value);&#32;}
894 <emphasis role="preprocessor">#else</emphasis>
903 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
904 &#32;&#32;&#32;&#32;&#32;&#32;deque(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__value&#32;=&#32;value_type(),
905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
906 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__a,&#32;_S_check_init_len(__n,&#32;__a))
907 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_fill_initialize(__value);&#32;}
908 <emphasis role="preprocessor">#endif</emphasis>
909 
917 &#32;&#32;&#32;&#32;&#32;&#32;deque(<emphasis role="keyword">const</emphasis>&#32;deque&amp;&#32;__x)
918 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()),
919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x.size())
920 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;std::__uninitialized_copy_a(__x.begin(),&#32;__x.end(),
921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_start,
922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_get_Tp_allocator());&#32;}
923 
924 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
933 &#32;&#32;&#32;&#32;&#32;&#32;deque(deque&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
934 
936 &#32;&#32;&#32;&#32;&#32;&#32;deque(<emphasis role="keyword">const</emphasis>&#32;deque&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;__type_identity_t&lt;allocator_type&gt;&amp;&#32;__a)
937 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__a,&#32;__x.size())
938 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;std::__uninitialized_copy_a(__x.begin(),&#32;__x.end(),
939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_start,
940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_get_Tp_allocator());&#32;}
941 
943 &#32;&#32;&#32;&#32;&#32;&#32;deque(deque&amp;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;__type_identity_t&lt;allocator_type&gt;&amp;&#32;__a)
944 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;deque(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x),&#32;__a,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::is_always_equal{})
945 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
946 
947 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
948 &#32;&#32;&#32;&#32;&#32;&#32;deque(deque&amp;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a,&#32;true_type)
949 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x),&#32;__a)
950 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
951 
952 &#32;&#32;&#32;&#32;&#32;&#32;deque(deque&amp;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a,&#32;false_type)
953 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x),&#32;__a,&#32;__x.size())
954 &#32;&#32;&#32;&#32;&#32;&#32;{
955 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x.get_allocator()&#32;!=&#32;__a&#32;&amp;&amp;&#32;!__x.empty())
956 &#32;&#32;&#32;&#32;&#32;&#32;{
957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__uninitialized_move_a(__x.begin(),&#32;__x.end(),
958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_start,
959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_get_Tp_allocator());
960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x.clear();
961 &#32;&#32;&#32;&#32;&#32;&#32;}
962 &#32;&#32;&#32;&#32;&#32;&#32;}
963 
964 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
976 &#32;&#32;&#32;&#32;&#32;&#32;deque(initializer_list&lt;value_type&gt;&#32;__l,
977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
978 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__a)
979 &#32;&#32;&#32;&#32;&#32;&#32;{
980 &#32;&#32;&#32;&#32;_M_range_initialize(__l.begin(),&#32;__l.end(),
981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag());
982 &#32;&#32;&#32;&#32;&#32;&#32;}
983 <emphasis role="preprocessor">#endif</emphasis>
984 
1000 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1001 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
1002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;std::_RequireInputIter&lt;_InputIterator&gt;&gt;
1003 &#32;&#32;&#32;&#32;deque(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
1004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
1005 &#32;&#32;&#32;&#32;:&#32;_Base(__a)
1006 &#32;&#32;&#32;&#32;{
1007 &#32;&#32;&#32;&#32;&#32;&#32;_M_range_initialize(__first,&#32;__last,
1008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__first));
1009 &#32;&#32;&#32;&#32;}
1010 <emphasis role="preprocessor">#else</emphasis>
1011 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1012 &#32;&#32;&#32;&#32;deque(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
1013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
1014 &#32;&#32;&#32;&#32;:&#32;_Base(__a)
1015 &#32;&#32;&#32;&#32;{
1016 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;whether&#32;it&apos;s&#32;an&#32;integral&#32;type.&#32;&#32;If&#32;so,&#32;it&apos;s&#32;not&#32;an&#32;iterator.</emphasis>
1017 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::__is_integer&lt;_InputIterator&gt;::__type&#32;_Integral;
1018 &#32;&#32;&#32;&#32;&#32;&#32;_M_initialize_dispatch(__first,&#32;__last,&#32;_Integral());
1019 &#32;&#32;&#32;&#32;}
1020 <emphasis role="preprocessor">#endif</emphasis>
1021 
1027 &#32;&#32;&#32;&#32;&#32;&#32;~deque()
1028 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_destroy_data(begin(),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(),&#32;_M_get_Tp_allocator());&#32;}
1029 
1039 &#32;&#32;&#32;&#32;&#32;&#32;deque&amp;
1040 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;deque&amp;&#32;__x);
1041 
1042 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1051 &#32;&#32;&#32;&#32;&#32;&#32;deque&amp;
1052 &#32;&#32;&#32;&#32;&#32;&#32;operator=(deque&amp;&amp;&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>(_Alloc_traits::_S_always_equal())
1053 &#32;&#32;&#32;&#32;&#32;&#32;{
1054 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__always_equal&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::is_always_equal;
1055 &#32;&#32;&#32;&#32;_M_move_assign1(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x),&#32;__always_equal{});
1056 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1057 &#32;&#32;&#32;&#32;&#32;&#32;}
1058 
1070 &#32;&#32;&#32;&#32;&#32;&#32;deque&amp;
1071 &#32;&#32;&#32;&#32;&#32;&#32;operator=(initializer_list&lt;value_type&gt;&#32;__l)
1072 &#32;&#32;&#32;&#32;&#32;&#32;{
1073 &#32;&#32;&#32;&#32;_M_assign_aux(__l.begin(),&#32;__l.end(),
1074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag());
1075 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1076 &#32;&#32;&#32;&#32;&#32;&#32;}
1077 <emphasis role="preprocessor">#endif</emphasis>
1078 
1089 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1090 &#32;&#32;&#32;&#32;&#32;&#32;assign(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
1091 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_fill_assign(__n,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);&#32;}
1092 
1105 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1106 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
1107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;std::_RequireInputIter&lt;_InputIterator&gt;&gt;
1108 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1109 &#32;&#32;&#32;&#32;assign(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
1110 &#32;&#32;&#32;&#32;{&#32;_M_assign_aux(__first,&#32;__last,&#32;std::__iterator_category(__first));&#32;}
1111 <emphasis role="preprocessor">#else</emphasis>
1112 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1113 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1114 &#32;&#32;&#32;&#32;assign(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
1115 &#32;&#32;&#32;&#32;{
1116 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::__is_integer&lt;_InputIterator&gt;::__type&#32;_Integral;
1117 &#32;&#32;&#32;&#32;&#32;&#32;_M_assign_dispatch(__first,&#32;__last,&#32;_Integral());
1118 &#32;&#32;&#32;&#32;}
1119 <emphasis role="preprocessor">#endif</emphasis>
1120 
1121 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1133 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1134 &#32;&#32;&#32;&#32;&#32;&#32;assign(initializer_list&lt;value_type&gt;&#32;__l)
1135 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_assign_aux(__l.begin(),&#32;__l.end(),&#32;random_access_iterator_tag());&#32;}
1136 <emphasis role="preprocessor">#endif</emphasis>
1137 
1139 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
1140 &#32;&#32;&#32;&#32;&#32;&#32;allocator_type
1141 &#32;&#32;&#32;&#32;&#32;&#32;get_allocator()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1142 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::get_allocator();&#32;}
1143 
1144 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;iterators</emphasis>
1149 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
1150 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1151 &#32;&#32;&#32;&#32;&#32;&#32;begin()&#32;_GLIBCXX_NOEXCEPT
1152 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_impl._M_start;&#32;}
1153 
1158 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
1159 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
1160 &#32;&#32;&#32;&#32;&#32;&#32;begin()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1161 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_impl._M_start;&#32;}
1162 
1168 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
1169 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1170 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;_GLIBCXX_NOEXCEPT
1171 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_impl._M_finish;&#32;}
1172 
1178 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
1179 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
1180 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1181 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_impl._M_finish;&#32;}
1182 
1188 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
1189 &#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator
1190 &#32;&#32;&#32;&#32;&#32;&#32;rbegin()&#32;_GLIBCXX_NOEXCEPT
1191 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;reverse_iterator(this-&gt;_M_impl._M_finish);&#32;}
1192 
1198 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
1199 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
1200 &#32;&#32;&#32;&#32;&#32;&#32;rbegin()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1201 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_reverse_iterator(this-&gt;_M_impl._M_finish);&#32;}
1202 
1208 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
1209 &#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator
1210 &#32;&#32;&#32;&#32;&#32;&#32;rend()&#32;_GLIBCXX_NOEXCEPT
1211 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;reverse_iterator(this-&gt;_M_impl._M_start);&#32;}
1212 
1218 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
1219 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
1220 &#32;&#32;&#32;&#32;&#32;&#32;rend()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1221 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_reverse_iterator(this-&gt;_M_impl._M_start);&#32;}
1222 
1223 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1228 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]
1229 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
1230 &#32;&#32;&#32;&#32;&#32;&#32;cbegin()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1231 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_impl._M_start;&#32;}
1232 
1238 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]
1239 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
1240 &#32;&#32;&#32;&#32;&#32;&#32;cend()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1241 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_impl._M_finish;&#32;}
1242 
1248 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]
1249 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
1250 &#32;&#32;&#32;&#32;&#32;&#32;crbegin()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1251 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_reverse_iterator(this-&gt;_M_impl._M_finish);&#32;}
1252 
1258 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]
1259 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
1260 &#32;&#32;&#32;&#32;&#32;&#32;crend()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1261 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_reverse_iterator(this-&gt;_M_impl._M_start);&#32;}
1262 <emphasis role="preprocessor">#endif</emphasis>
1263 
1264 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[23.2.1.2]&#32;capacity</emphasis>
1266 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
1267 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1268 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1269 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_impl._M_finish&#32;-&#32;this-&gt;_M_impl._M_start;&#32;}
1270 
1272 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
1273 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1274 &#32;&#32;&#32;&#32;&#32;&#32;max_size()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1275 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_max_size(_M_get_Tp_allocator());&#32;}
1276 
1277 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1287 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1288 &#32;&#32;&#32;&#32;&#32;&#32;resize(size_type&#32;__new_size)
1289 &#32;&#32;&#32;&#32;&#32;&#32;{
1290 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__len&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>();
1291 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__new_size&#32;&gt;&#32;__len)
1292 &#32;&#32;&#32;&#32;&#32;&#32;_M_default_append(__new_size&#32;-&#32;__len);
1293 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__new_size&#32;&lt;&#32;__len)
1294 &#32;&#32;&#32;&#32;&#32;&#32;_M_erase_at_end(this-&gt;_M_impl._M_start
1295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;difference_type(__new_size));
1296 &#32;&#32;&#32;&#32;&#32;&#32;}
1297 
1309 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1310 &#32;&#32;&#32;&#32;&#32;&#32;resize(size_type&#32;__new_size,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
1311 <emphasis role="preprocessor">#else</emphasis>
1323 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1324 &#32;&#32;&#32;&#32;&#32;&#32;resize(size_type&#32;__new_size,&#32;value_type&#32;__x&#32;=&#32;value_type())
1325 <emphasis role="preprocessor">#endif</emphasis>
1326 &#32;&#32;&#32;&#32;&#32;&#32;{
1327 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__len&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>();
1328 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__new_size&#32;&gt;&#32;__len)
1329 &#32;&#32;&#32;&#32;&#32;&#32;_M_fill_insert(this-&gt;_M_impl._M_finish,&#32;__new_size&#32;-&#32;__len,&#32;__x);
1330 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__new_size&#32;&lt;&#32;__len)
1331 &#32;&#32;&#32;&#32;&#32;&#32;_M_erase_at_end(this-&gt;_M_impl._M_start
1332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;difference_type(__new_size));
1333 &#32;&#32;&#32;&#32;&#32;&#32;}
1334 
1335 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1337 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1338 &#32;&#32;&#32;&#32;&#32;&#32;shrink_to_fit()&#32;<emphasis role="keyword">noexcept</emphasis>
1339 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_shrink_to_fit();&#32;}
1340 <emphasis role="preprocessor">#endif</emphasis>
1341 
1346 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;<emphasis role="keywordtype">bool</emphasis>
1347 &#32;&#32;&#32;&#32;&#32;&#32;empty()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1348 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_impl._M_finish&#32;==&#32;this-&gt;_M_impl._M_start;&#32;}
1349 
1350 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;element&#32;access</emphasis>
1362 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
1363 &#32;&#32;&#32;&#32;&#32;&#32;reference
1364 &#32;&#32;&#32;&#32;&#32;&#32;operator[](size_type&#32;__n)&#32;_GLIBCXX_NOEXCEPT
1365 &#32;&#32;&#32;&#32;&#32;&#32;{
1366 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1ab8d8aa1a9d4e3e7b8dbee295f1a9f115">__glibcxx_requires_subscript</link>(__n);
1367 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_impl._M_start[difference_type(__n)];
1368 &#32;&#32;&#32;&#32;&#32;&#32;}
1369 
1381 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
1382 &#32;&#32;&#32;&#32;&#32;&#32;const_reference
1383 &#32;&#32;&#32;&#32;&#32;&#32;operator[](size_type&#32;__n)&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1384 &#32;&#32;&#32;&#32;&#32;&#32;{
1385 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1ab8d8aa1a9d4e3e7b8dbee295f1a9f115">__glibcxx_requires_subscript</link>(__n);
1386 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_impl._M_start[difference_type(__n)];
1387 &#32;&#32;&#32;&#32;&#32;&#32;}
1388 
1389 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
1391 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1392 &#32;&#32;&#32;&#32;&#32;&#32;_M_range_check(size_type&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
1393 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
1394 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&gt;=&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>())
1395 &#32;&#32;&#32;&#32;&#32;&#32;__throw_out_of_range_fmt(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ad90b1fa000da1666f104c4dd9c0d7f9b">__N</link>(<emphasis role="stringliteral">&quot;deque::_M_range_check:&#32;__n&#32;&quot;</emphasis>
1396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;(which&#32;is&#32;%zu)&gt;=&#32;this-&gt;size()&#32;&quot;</emphasis>
1397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;(which&#32;is&#32;%zu)&quot;</emphasis>),
1398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__n,&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>());
1399 &#32;&#32;&#32;&#32;&#32;&#32;}
1400 
1401 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1413 &#32;&#32;&#32;&#32;&#32;&#32;reference
1414 &#32;&#32;&#32;&#32;&#32;&#32;at(size_type&#32;__n)
1415 &#32;&#32;&#32;&#32;&#32;&#32;{
1416 &#32;&#32;&#32;&#32;_M_range_check(__n);
1417 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)[__n];
1418 &#32;&#32;&#32;&#32;&#32;&#32;}
1419 
1431 &#32;&#32;&#32;&#32;&#32;&#32;const_reference
1432 &#32;&#32;&#32;&#32;&#32;&#32;at(size_type&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
1433 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
1434 &#32;&#32;&#32;&#32;_M_range_check(__n);
1435 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)[__n];
1436 &#32;&#32;&#32;&#32;&#32;&#32;}
1437 
1442 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
1443 &#32;&#32;&#32;&#32;&#32;&#32;reference
1444 &#32;&#32;&#32;&#32;&#32;&#32;front()&#32;_GLIBCXX_NOEXCEPT
1445 &#32;&#32;&#32;&#32;&#32;&#32;{
1446 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a208d3b3e6bd58e9f7f62942c3261fc9b">__glibcxx_requires_nonempty</link>();
1447 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*begin();
1448 &#32;&#32;&#32;&#32;&#32;&#32;}
1449 
1454 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
1455 &#32;&#32;&#32;&#32;&#32;&#32;const_reference
1456 &#32;&#32;&#32;&#32;&#32;&#32;front()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1457 &#32;&#32;&#32;&#32;&#32;&#32;{
1458 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a208d3b3e6bd58e9f7f62942c3261fc9b">__glibcxx_requires_nonempty</link>();
1459 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*begin();
1460 &#32;&#32;&#32;&#32;&#32;&#32;}
1461 
1466 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
1467 &#32;&#32;&#32;&#32;&#32;&#32;reference
1468 &#32;&#32;&#32;&#32;&#32;&#32;back()&#32;_GLIBCXX_NOEXCEPT
1469 &#32;&#32;&#32;&#32;&#32;&#32;{
1470 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a208d3b3e6bd58e9f7f62942c3261fc9b">__glibcxx_requires_nonempty</link>();
1471 &#32;&#32;&#32;&#32;iterator&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();
1472 &#32;&#32;&#32;&#32;--<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
1473 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
1474 &#32;&#32;&#32;&#32;&#32;&#32;}
1475 
1480 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
1481 &#32;&#32;&#32;&#32;&#32;&#32;const_reference
1482 &#32;&#32;&#32;&#32;&#32;&#32;back()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1483 &#32;&#32;&#32;&#32;&#32;&#32;{
1484 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a208d3b3e6bd58e9f7f62942c3261fc9b">__glibcxx_requires_nonempty</link>();
1485 &#32;&#32;&#32;&#32;const_iterator&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();
1486 &#32;&#32;&#32;&#32;--<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
1487 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
1488 &#32;&#32;&#32;&#32;&#32;&#32;}
1489 
1490 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[23.2.1.2]&#32;modifiers</emphasis>
1500 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1501 &#32;&#32;&#32;&#32;&#32;&#32;push_front(<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
1502 &#32;&#32;&#32;&#32;&#32;&#32;{
1503 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;_M_impl._M_start._M_cur&#32;!=&#32;this-&gt;_M_impl._M_start._M_first)
1504 &#32;&#32;&#32;&#32;&#32;&#32;{
1505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Alloc_traits::construct(this-&gt;_M_impl,
1506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_start._M_cur&#32;-&#32;1,
1507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x);
1508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--this-&gt;_M_impl._M_start._M_cur;
1509 &#32;&#32;&#32;&#32;&#32;&#32;}
1510 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1511 &#32;&#32;&#32;&#32;&#32;&#32;_M_push_front_aux(__x);
1512 &#32;&#32;&#32;&#32;&#32;&#32;}
1513 
1514 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1515 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1516 &#32;&#32;&#32;&#32;&#32;&#32;push_front(value_type&amp;&amp;&#32;__x)
1517 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;emplace_front(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x));&#32;}
1518 
1519 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
1520 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
1521 &#32;&#32;&#32;&#32;reference
1522 <emphasis role="preprocessor">#else</emphasis>
1523 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1524 <emphasis role="preprocessor">#endif</emphasis>
1525 &#32;&#32;&#32;&#32;emplace_front(_Args&amp;&amp;...&#32;__args);
1526 <emphasis role="preprocessor">#endif</emphasis>
1527 
1537 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1538 &#32;&#32;&#32;&#32;&#32;&#32;push_back(<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
1539 &#32;&#32;&#32;&#32;&#32;&#32;{
1540 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;_M_impl._M_finish._M_cur
1541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!=&#32;this-&gt;_M_impl._M_finish._M_last&#32;-&#32;1)
1542 &#32;&#32;&#32;&#32;&#32;&#32;{
1543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Alloc_traits::construct(this-&gt;_M_impl,
1544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_finish._M_cur,&#32;__x);
1545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++this-&gt;_M_impl._M_finish._M_cur;
1546 &#32;&#32;&#32;&#32;&#32;&#32;}
1547 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1548 &#32;&#32;&#32;&#32;&#32;&#32;_M_push_back_aux(__x);
1549 &#32;&#32;&#32;&#32;&#32;&#32;}
1550 
1551 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1552 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1553 &#32;&#32;&#32;&#32;&#32;&#32;push_back(value_type&amp;&amp;&#32;__x)
1554 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;emplace_back(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x));&#32;}
1555 
1556 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
1557 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
1558 &#32;&#32;&#32;&#32;reference
1559 <emphasis role="preprocessor">#else</emphasis>
1560 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1561 <emphasis role="preprocessor">#endif</emphasis>
1562 &#32;&#32;&#32;&#32;emplace_back(_Args&amp;&amp;...&#32;__args);
1563 <emphasis role="preprocessor">#endif</emphasis>
1564 
1573 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1574 &#32;&#32;&#32;&#32;&#32;&#32;pop_front()&#32;_GLIBCXX_NOEXCEPT
1575 &#32;&#32;&#32;&#32;&#32;&#32;{
1576 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a208d3b3e6bd58e9f7f62942c3261fc9b">__glibcxx_requires_nonempty</link>();
1577 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;_M_impl._M_start._M_cur
1578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!=&#32;this-&gt;_M_impl._M_start._M_last&#32;-&#32;1)
1579 &#32;&#32;&#32;&#32;&#32;&#32;{
1580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Alloc_traits::destroy(_M_get_Tp_allocator(),
1581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_start._M_cur);
1582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++this-&gt;_M_impl._M_start._M_cur;
1583 &#32;&#32;&#32;&#32;&#32;&#32;}
1584 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1585 &#32;&#32;&#32;&#32;&#32;&#32;_M_pop_front_aux();
1586 &#32;&#32;&#32;&#32;&#32;&#32;}
1587 
1596 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1597 &#32;&#32;&#32;&#32;&#32;&#32;pop_back()&#32;_GLIBCXX_NOEXCEPT
1598 &#32;&#32;&#32;&#32;&#32;&#32;{
1599 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a208d3b3e6bd58e9f7f62942c3261fc9b">__glibcxx_requires_nonempty</link>();
1600 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;_M_impl._M_finish._M_cur
1601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!=&#32;this-&gt;_M_impl._M_finish._M_first)
1602 &#32;&#32;&#32;&#32;&#32;&#32;{
1603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--this-&gt;_M_impl._M_finish._M_cur;
1604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Alloc_traits::destroy(_M_get_Tp_allocator(),
1605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_finish._M_cur);
1606 &#32;&#32;&#32;&#32;&#32;&#32;}
1607 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1608 &#32;&#32;&#32;&#32;&#32;&#32;_M_pop_back_aux();
1609 &#32;&#32;&#32;&#32;&#32;&#32;}
1610 
1611 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1621 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
1622 &#32;&#32;&#32;&#32;iterator
1623 &#32;&#32;&#32;&#32;emplace(const_iterator&#32;__position,&#32;_Args&amp;&amp;...&#32;__args);
1624 
1634 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1635 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__position,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x);
1636 <emphasis role="preprocessor">#else</emphasis>
1646 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1647 &#32;&#32;&#32;&#32;&#32;&#32;insert(iterator&#32;__position,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x);
1648 <emphasis role="preprocessor">#endif</emphasis>
1649 
1650 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1660 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1661 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__position,&#32;value_type&amp;&amp;&#32;__x)
1662 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;emplace(__position,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x));&#32;}
1663 
1674 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1675 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__p,&#32;initializer_list&lt;value_type&gt;&#32;__l)
1676 &#32;&#32;&#32;&#32;&#32;&#32;{
1677 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__offset&#32;=&#32;__p&#32;-&#32;cbegin();
1678 &#32;&#32;&#32;&#32;_M_range_insert_aux(__p._M_const_cast(),&#32;__l.begin(),&#32;__l.end(),
1679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::random_access_iterator_tag());
1680 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;begin()&#32;+&#32;__offset;
1681 &#32;&#32;&#32;&#32;&#32;&#32;}
1682 
1693 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1694 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__position,&#32;size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
1695 &#32;&#32;&#32;&#32;&#32;&#32;{
1696 &#32;&#32;&#32;&#32;difference_type&#32;__offset&#32;=&#32;__position&#32;-&#32;cbegin();
1697 &#32;&#32;&#32;&#32;_M_fill_insert(__position._M_const_cast(),&#32;__n,&#32;__x);
1698 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;begin()&#32;+&#32;__offset;
1699 &#32;&#32;&#32;&#32;&#32;&#32;}
1700 <emphasis role="preprocessor">#else</emphasis>
1710 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1711 &#32;&#32;&#32;&#32;&#32;&#32;insert(iterator&#32;__position,&#32;size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
1712 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_fill_insert(__position,&#32;__n,&#32;__x);&#32;}
1713 <emphasis role="preprocessor">#endif</emphasis>
1714 
1715 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1727 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
1728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;std::_RequireInputIter&lt;_InputIterator&gt;&gt;
1729 &#32;&#32;&#32;&#32;iterator
1730 &#32;&#32;&#32;&#32;insert(const_iterator&#32;__position,&#32;_InputIterator&#32;__first,
1731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator&#32;__last)
1732 &#32;&#32;&#32;&#32;{
1733 &#32;&#32;&#32;&#32;&#32;&#32;difference_type&#32;__offset&#32;=&#32;__position&#32;-&#32;cbegin();
1734 &#32;&#32;&#32;&#32;&#32;&#32;_M_range_insert_aux(__position._M_const_cast(),&#32;__first,&#32;__last,
1735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__first));
1736 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;begin()&#32;+&#32;__offset;
1737 &#32;&#32;&#32;&#32;}
1738 <emphasis role="preprocessor">#else</emphasis>
1749 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1750 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1751 &#32;&#32;&#32;&#32;insert(iterator&#32;__position,&#32;_InputIterator&#32;__first,
1752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator&#32;__last)
1753 &#32;&#32;&#32;&#32;{
1754 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;whether&#32;it&apos;s&#32;an&#32;integral&#32;type.&#32;&#32;If&#32;so,&#32;it&apos;s&#32;not&#32;an&#32;iterator.</emphasis>
1755 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::__is_integer&lt;_InputIterator&gt;::__type&#32;_Integral;
1756 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert_dispatch(__position,&#32;__first,&#32;__last,&#32;_Integral());
1757 &#32;&#32;&#32;&#32;}
1758 <emphasis role="preprocessor">#endif</emphasis>
1759 
1773 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1774 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1775 &#32;&#32;&#32;&#32;&#32;&#32;erase(const_iterator&#32;__position)
1776 <emphasis role="preprocessor">#else</emphasis>
1777 &#32;&#32;&#32;&#32;&#32;&#32;erase(iterator&#32;__position)
1778 <emphasis role="preprocessor">#endif</emphasis>
1779 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_erase(__position._M_const_cast());&#32;}
1780 
1797 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1798 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1799 &#32;&#32;&#32;&#32;&#32;&#32;erase(const_iterator&#32;__first,&#32;const_iterator&#32;__last)
1800 <emphasis role="preprocessor">#else</emphasis>
1801 &#32;&#32;&#32;&#32;&#32;&#32;erase(iterator&#32;__first,&#32;iterator&#32;__last)
1802 <emphasis role="preprocessor">#endif</emphasis>
1803 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_erase(__first._M_const_cast(),&#32;__last._M_const_cast());&#32;}
1804 
1816 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1817 &#32;&#32;&#32;&#32;&#32;&#32;swap(deque&amp;&#32;__x)&#32;_GLIBCXX_NOEXCEPT
1818 &#32;&#32;&#32;&#32;&#32;&#32;{
1819 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1820 &#32;&#32;&#32;&#32;__glibcxx_assert(_Alloc_traits::propagate_on_container_swap::value
1821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;_M_get_Tp_allocator()&#32;==&#32;__x._M_get_Tp_allocator());
1822 <emphasis role="preprocessor">#endif</emphasis>
1823 &#32;&#32;&#32;&#32;_M_impl._M_swap_data(__x._M_impl);
1824 &#32;&#32;&#32;&#32;_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
1825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x._M_get_Tp_allocator());
1826 &#32;&#32;&#32;&#32;&#32;&#32;}
1827 
1834 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1835 &#32;&#32;&#32;&#32;&#32;&#32;clear()&#32;_GLIBCXX_NOEXCEPT
1836 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_erase_at_end(begin());&#32;}
1837 
1838 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
1839 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Internal&#32;constructor&#32;functions&#32;follow.</emphasis>
1840 
1841 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
1842 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;called&#32;by&#32;the&#32;range&#32;constructor&#32;to&#32;implement&#32;[23.1.1]/9</emphasis>
1843 
1844 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
1845 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;438.&#32;Ambiguity&#32;in&#32;the&#32;&quot;do&#32;the&#32;right&#32;thing&quot;&#32;clause</emphasis>
1846 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Integer&gt;
1847 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1848 &#32;&#32;&#32;&#32;_M_initialize_dispatch(_Integer&#32;__n,&#32;_Integer&#32;__x,&#32;__true_type)
1849 &#32;&#32;&#32;&#32;{
1850 &#32;&#32;&#32;&#32;&#32;&#32;_M_initialize_map(_S_check_init_len(<emphasis role="keyword">static_cast&lt;</emphasis>size_type<emphasis role="keyword">&gt;</emphasis>(__n),
1851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_get_Tp_allocator()));
1852 &#32;&#32;&#32;&#32;&#32;&#32;_M_fill_initialize(__x);
1853 &#32;&#32;&#32;&#32;}
1854 
1855 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;called&#32;by&#32;the&#32;range&#32;constructor&#32;to&#32;implement&#32;[23.1.1]/9</emphasis>
1856 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1857 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1858 &#32;&#32;&#32;&#32;_M_initialize_dispatch(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
1859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__false_type)
1860 &#32;&#32;&#32;&#32;{
1861 &#32;&#32;&#32;&#32;&#32;&#32;_M_range_initialize(__first,&#32;__last,
1862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__first));
1863 &#32;&#32;&#32;&#32;}
1864 <emphasis role="preprocessor">#endif</emphasis>
1865 
1866 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>
1867 &#32;&#32;&#32;&#32;&#32;&#32;_S_check_init_len(<emphasis role="keywordtype">size_t</emphasis>&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
1868 &#32;&#32;&#32;&#32;&#32;&#32;{
1869 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&gt;&#32;_S_max_size(__a))
1870 &#32;&#32;&#32;&#32;&#32;&#32;__throw_length_error(
1871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ad90b1fa000da1666f104c4dd9c0d7f9b">__N</link>(<emphasis role="stringliteral">&quot;cannot&#32;create&#32;std::deque&#32;larger&#32;than&#32;max_size()&quot;</emphasis>));
1872 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__n;
1873 &#32;&#32;&#32;&#32;&#32;&#32;}
1874 
1875 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;size_type
1876 &#32;&#32;&#32;&#32;&#32;&#32;_S_max_size(<emphasis role="keyword">const</emphasis>&#32;_Tp_alloc_type&amp;&#32;__a)&#32;_GLIBCXX_NOEXCEPT
1877 &#32;&#32;&#32;&#32;&#32;&#32;{
1878 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__diffmax&#32;=&#32;__gnu_cxx::__numeric_traits&lt;ptrdiff_t&gt;::__max;
1879 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__allocmax&#32;=&#32;_Alloc_traits::max_size(__a);
1880 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(std::min)(__diffmax,&#32;__allocmax);
1881 &#32;&#32;&#32;&#32;&#32;&#32;}
1882 
1883 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;called&#32;by&#32;the&#32;second&#32;initialize_dispatch&#32;above</emphasis>
1885 
1895 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1896 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1897 &#32;&#32;&#32;&#32;_M_range_initialize(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
1898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::input_iterator_tag);
1899 
1900 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;called&#32;by&#32;the&#32;second&#32;initialize_dispatch&#32;above</emphasis>
1901 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
1902 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1903 &#32;&#32;&#32;&#32;_M_range_initialize(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
1904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward_iterator_tag);
1906 
1917 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1918 &#32;&#32;&#32;&#32;&#32;&#32;_M_fill_initialize(<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__value);
1919 
1920 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1921 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;called&#32;by&#32;deque(n).</emphasis>
1922 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1923 &#32;&#32;&#32;&#32;&#32;&#32;_M_default_initialize();
1924 <emphasis role="preprocessor">#endif</emphasis>
1925 
1926 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Internal&#32;assign&#32;functions&#32;follow.&#32;&#32;The&#32;*_aux&#32;functions&#32;do&#32;the&#32;actual</emphasis>
1927 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;assignment&#32;work&#32;for&#32;the&#32;range&#32;versions.</emphasis>
1928 
1929 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
1930 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;called&#32;by&#32;the&#32;range&#32;assign&#32;to&#32;implement&#32;[23.1.1]/9</emphasis>
1931 
1932 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
1933 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;438.&#32;Ambiguity&#32;in&#32;the&#32;&quot;do&#32;the&#32;right&#32;thing&quot;&#32;clause</emphasis>
1934 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Integer&gt;
1935 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1936 &#32;&#32;&#32;&#32;_M_assign_dispatch(_Integer&#32;__n,&#32;_Integer&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;__true_type)
1937 &#32;&#32;&#32;&#32;{&#32;_M_fill_assign(__n,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);&#32;}
1938 
1939 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;called&#32;by&#32;the&#32;range&#32;assign&#32;to&#32;implement&#32;[23.1.1]/9</emphasis>
1940 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1941 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1942 &#32;&#32;&#32;&#32;_M_assign_dispatch(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
1943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__false_type)
1944 &#32;&#32;&#32;&#32;{&#32;_M_assign_aux(__first,&#32;__last,&#32;std::__iterator_category(__first));&#32;}
1945 <emphasis role="preprocessor">#endif</emphasis>
1946 
1947 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;called&#32;by&#32;the&#32;second&#32;assign_dispatch&#32;above</emphasis>
1948 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1949 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1950 &#32;&#32;&#32;&#32;_M_assign_aux(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
1951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::input_iterator_tag);
1952 
1953 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;called&#32;by&#32;the&#32;second&#32;assign_dispatch&#32;above</emphasis>
1954 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
1955 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1956 &#32;&#32;&#32;&#32;_M_assign_aux(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
1957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward_iterator_tag)
1958 &#32;&#32;&#32;&#32;{
1959 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__len&#32;=&#32;std::distance(__first,&#32;__last);
1960 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__len&#32;&gt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>())
1961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__mid&#32;=&#32;__first;
1963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::advance(__mid,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>());
1964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link>(__first,&#32;__mid,&#32;begin());
1965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_range_insert_aux(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(),&#32;__mid,&#32;__last,
1966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__first));
1967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1968 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_erase_at_end(<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link>(__first,&#32;__last,&#32;begin()));
1970 &#32;&#32;&#32;&#32;}
1971 
1972 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;assign(n,t),&#32;and&#32;the&#32;range&#32;assign&#32;when&#32;it&#32;turns&#32;out</emphasis>
1973 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;to&#32;be&#32;the&#32;same&#32;thing.</emphasis>
1974 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1975 &#32;&#32;&#32;&#32;&#32;&#32;_M_fill_assign(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
1976 &#32;&#32;&#32;&#32;&#32;&#32;{
1977 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&gt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>())
1978 &#32;&#32;&#32;&#32;&#32;&#32;{
1979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a9042ae744521b1770e868813f939b4b7">std::fill</link>(begin(),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(),&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
1980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_fill_insert(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(),&#32;__n&#32;-&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>(),&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
1981 &#32;&#32;&#32;&#32;&#32;&#32;}
1982 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1983 &#32;&#32;&#32;&#32;&#32;&#32;{
1984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_erase_at_end(begin()&#32;+&#32;difference_type(__n));
1985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a9042ae744521b1770e868813f939b4b7">std::fill</link>(begin(),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(),&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
1986 &#32;&#32;&#32;&#32;&#32;&#32;}
1987 &#32;&#32;&#32;&#32;&#32;&#32;}
1988 
1991 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
1992 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_push_back_aux(<emphasis role="keyword">const</emphasis>&#32;value_type&amp;);
1993 
1994 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_push_front_aux(<emphasis role="keyword">const</emphasis>&#32;value_type&amp;);
1995 <emphasis role="preprocessor">#else</emphasis>
1996 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
1997 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_push_back_aux(_Args&amp;&amp;...&#32;__args);
1998 
1999 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
2000 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_push_front_aux(_Args&amp;&amp;...&#32;__args);
2001 <emphasis role="preprocessor">#endif</emphasis>
2002 
2003 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_pop_back_aux();
2004 
2005 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_pop_front_aux();
2007 
2008 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Internal&#32;insert&#32;functions&#32;follow.&#32;&#32;The&#32;*_aux&#32;functions&#32;do&#32;the&#32;actual</emphasis>
2009 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;insertion&#32;work&#32;when&#32;all&#32;shortcuts&#32;fail.</emphasis>
2010 
2011 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
2012 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;called&#32;by&#32;the&#32;range&#32;insert&#32;to&#32;implement&#32;[23.1.1]/9</emphasis>
2013 
2014 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
2015 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;438.&#32;Ambiguity&#32;in&#32;the&#32;&quot;do&#32;the&#32;right&#32;thing&quot;&#32;clause</emphasis>
2016 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Integer&gt;
2017 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2018 &#32;&#32;&#32;&#32;_M_insert_dispatch(iterator&#32;__pos,
2019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Integer&#32;__n,&#32;_Integer&#32;__x,&#32;__true_type)
2020 &#32;&#32;&#32;&#32;{&#32;_M_fill_insert(__pos,&#32;__n,&#32;__x);&#32;}
2021 
2022 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;called&#32;by&#32;the&#32;range&#32;insert&#32;to&#32;implement&#32;[23.1.1]/9</emphasis>
2023 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
2024 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2025 &#32;&#32;&#32;&#32;_M_insert_dispatch(iterator&#32;__pos,
2026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
2027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__false_type)
2028 &#32;&#32;&#32;&#32;{
2029 &#32;&#32;&#32;&#32;&#32;&#32;_M_range_insert_aux(__pos,&#32;__first,&#32;__last,
2030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__first));
2031 &#32;&#32;&#32;&#32;}
2032 <emphasis role="preprocessor">#endif</emphasis>
2033 
2034 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;called&#32;by&#32;the&#32;second&#32;insert_dispatch&#32;above</emphasis>
2035 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
2036 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2037 &#32;&#32;&#32;&#32;_M_range_insert_aux(iterator&#32;__pos,&#32;_InputIterator&#32;__first,
2038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator&#32;__last,&#32;std::input_iterator_tag);
2039 
2040 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;called&#32;by&#32;the&#32;second&#32;insert_dispatch&#32;above</emphasis>
2041 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
2042 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2043 &#32;&#32;&#32;&#32;_M_range_insert_aux(iterator&#32;__pos,&#32;_ForwardIterator&#32;__first,
2044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__last,&#32;std::forward_iterator_tag);
2045 
2046 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;insert(p,n,x),&#32;and&#32;the&#32;range&#32;insert&#32;when&#32;it&#32;turns&#32;out&#32;to&#32;be</emphasis>
2047 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;same&#32;thing.&#32;&#32;Can&#32;use&#32;fill&#32;functions&#32;in&#32;optimal&#32;situations,</emphasis>
2048 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;otherwise&#32;passes&#32;off&#32;to&#32;insert_aux(p,n,x).</emphasis>
2049 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2050 &#32;&#32;&#32;&#32;&#32;&#32;_M_fill_insert(iterator&#32;__pos,&#32;size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x);
2051 
2052 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;called&#32;by&#32;insert(p,x)</emphasis>
2053 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
2054 &#32;&#32;&#32;&#32;&#32;&#32;iterator
2055 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert_aux(iterator&#32;__pos,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x);
2056 <emphasis role="preprocessor">#else</emphasis>
2057 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
2058 &#32;&#32;&#32;&#32;iterator
2059 &#32;&#32;&#32;&#32;_M_insert_aux(iterator&#32;__pos,&#32;_Args&amp;&amp;...&#32;__args);
2060 <emphasis role="preprocessor">#endif</emphasis>
2061 
2062 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;called&#32;by&#32;insert(p,n,x)&#32;via&#32;fill_insert</emphasis>
2063 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2064 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert_aux(iterator&#32;__pos,&#32;size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x);
2065 
2066 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;called&#32;by&#32;range_insert_aux&#32;for&#32;forward&#32;iterators</emphasis>
2067 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
2068 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2069 &#32;&#32;&#32;&#32;_M_insert_aux(iterator&#32;__pos,
2070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
2071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n);
2072 
2073 
2074 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Internal&#32;erase&#32;functions&#32;follow.</emphasis>
2075 
2076 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2077 &#32;&#32;&#32;&#32;&#32;&#32;_M_destroy_data_aux(iterator&#32;__first,&#32;iterator&#32;__last);
2078 
2079 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;~deque().</emphasis>
2080 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NB:&#32;Doesn&apos;t&#32;deallocate&#32;the&#32;nodes.</emphasis>
2081 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc1&gt;
2082 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2083 &#32;&#32;&#32;&#32;_M_destroy_data(iterator&#32;__first,&#32;iterator&#32;__last,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc1&amp;)
2084 &#32;&#32;&#32;&#32;{&#32;_M_destroy_data_aux(__first,&#32;__last);&#32;}
2085 
2086 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2087 &#32;&#32;&#32;&#32;&#32;&#32;_M_destroy_data(iterator&#32;__first,&#32;iterator&#32;__last,
2088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::allocator&lt;_Tp&gt;&amp;)
2089 &#32;&#32;&#32;&#32;&#32;&#32;{
2090 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__has_trivial_destructor(value_type))
2091 &#32;&#32;&#32;&#32;&#32;&#32;_M_destroy_data_aux(__first,&#32;__last);
2092 &#32;&#32;&#32;&#32;&#32;&#32;}
2093 
2094 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;erase(q1,&#32;q2).</emphasis>
2095 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2096 &#32;&#32;&#32;&#32;&#32;&#32;_M_erase_at_begin(iterator&#32;__pos)
2097 &#32;&#32;&#32;&#32;&#32;&#32;{
2098 &#32;&#32;&#32;&#32;_M_destroy_data(begin(),&#32;__pos,&#32;_M_get_Tp_allocator());
2099 &#32;&#32;&#32;&#32;_M_destroy_nodes(this-&gt;_M_impl._M_start._M_node,&#32;__pos._M_node);
2100 &#32;&#32;&#32;&#32;this-&gt;_M_impl._M_start&#32;=&#32;__pos;
2101 &#32;&#32;&#32;&#32;&#32;&#32;}
2102 
2103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;erase(q1,&#32;q2),&#32;resize(),&#32;clear(),&#32;_M_assign_aux,</emphasis>
2104 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_M_fill_assign,&#32;operator=.</emphasis>
2105 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2106 &#32;&#32;&#32;&#32;&#32;&#32;_M_erase_at_end(iterator&#32;__pos)
2107 &#32;&#32;&#32;&#32;&#32;&#32;{
2108 &#32;&#32;&#32;&#32;_M_destroy_data(__pos,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(),&#32;_M_get_Tp_allocator());
2109 &#32;&#32;&#32;&#32;_M_destroy_nodes(__pos._M_node&#32;+&#32;1,
2110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_finish._M_node&#32;+&#32;1);
2111 &#32;&#32;&#32;&#32;this-&gt;_M_impl._M_finish&#32;=&#32;__pos;
2112 &#32;&#32;&#32;&#32;&#32;&#32;}
2113 
2114 &#32;&#32;&#32;&#32;&#32;&#32;iterator
2115 &#32;&#32;&#32;&#32;&#32;&#32;_M_erase(iterator&#32;__pos);
2116 
2117 &#32;&#32;&#32;&#32;&#32;&#32;iterator
2118 &#32;&#32;&#32;&#32;&#32;&#32;_M_erase(iterator&#32;__first,&#32;iterator&#32;__last);
2119 
2120 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
2121 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;resize(sz).</emphasis>
2122 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2123 &#32;&#32;&#32;&#32;&#32;&#32;_M_default_append(size_type&#32;__n);
2124 
2125 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
2126 &#32;&#32;&#32;&#32;&#32;&#32;_M_shrink_to_fit();
2127 <emphasis role="preprocessor">#endif</emphasis>
2128 
2131 &#32;&#32;&#32;&#32;&#32;&#32;iterator
2132 &#32;&#32;&#32;&#32;&#32;&#32;_M_reserve_elements_at_front(size_type&#32;__n)
2133 &#32;&#32;&#32;&#32;&#32;&#32;{
2134 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__vacancies&#32;=&#32;this-&gt;_M_impl._M_start._M_cur
2135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;this-&gt;_M_impl._M_start._M_first;
2136 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&gt;&#32;__vacancies)
2137 &#32;&#32;&#32;&#32;&#32;&#32;_M_new_elements_at_front(__n&#32;-&#32;__vacancies);
2138 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_impl._M_start&#32;-&#32;difference_type(__n);
2139 &#32;&#32;&#32;&#32;&#32;&#32;}
2140 
2141 &#32;&#32;&#32;&#32;&#32;&#32;iterator
2142 &#32;&#32;&#32;&#32;&#32;&#32;_M_reserve_elements_at_back(size_type&#32;__n)
2143 &#32;&#32;&#32;&#32;&#32;&#32;{
2144 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__vacancies&#32;=&#32;(this-&gt;_M_impl._M_finish._M_last
2145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;this-&gt;_M_impl._M_finish._M_cur)&#32;-&#32;1;
2146 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&gt;&#32;__vacancies)
2147 &#32;&#32;&#32;&#32;&#32;&#32;_M_new_elements_at_back(__n&#32;-&#32;__vacancies);
2148 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_impl._M_finish&#32;+&#32;difference_type(__n);
2149 &#32;&#32;&#32;&#32;&#32;&#32;}
2150 
2151 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2152 &#32;&#32;&#32;&#32;&#32;&#32;_M_new_elements_at_front(size_type&#32;__new_elements);
2153 
2154 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2155 &#32;&#32;&#32;&#32;&#32;&#32;_M_new_elements_at_back(size_type&#32;__new_elements);
2157 
2158 
2160 
2167 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2168 &#32;&#32;&#32;&#32;&#32;&#32;_M_reserve_map_at_back(size_type&#32;__nodes_to_add&#32;=&#32;1)
2169 &#32;&#32;&#32;&#32;&#32;&#32;{
2170 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__nodes_to_add&#32;+&#32;1&#32;&gt;&#32;this-&gt;_M_impl._M_map_size
2171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;(this-&gt;_M_impl._M_finish._M_node&#32;-&#32;this-&gt;_M_impl._M_map))
2172 &#32;&#32;&#32;&#32;&#32;&#32;_M_reallocate_map(__nodes_to_add,&#32;<emphasis role="keyword">false</emphasis>);
2173 &#32;&#32;&#32;&#32;&#32;&#32;}
2174 
2175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2176 &#32;&#32;&#32;&#32;&#32;&#32;_M_reserve_map_at_front(size_type&#32;__nodes_to_add&#32;=&#32;1)
2177 &#32;&#32;&#32;&#32;&#32;&#32;{
2178 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__nodes_to_add&#32;&gt;&#32;size_type(this-&gt;_M_impl._M_start._M_node
2179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;this-&gt;_M_impl._M_map))
2180 &#32;&#32;&#32;&#32;&#32;&#32;_M_reallocate_map(__nodes_to_add,&#32;<emphasis role="keyword">true</emphasis>);
2181 &#32;&#32;&#32;&#32;&#32;&#32;}
2182 
2183 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2184 &#32;&#32;&#32;&#32;&#32;&#32;_M_reallocate_map(size_type&#32;__nodes_to_add,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__add_at_front);
2186 
2187 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
2188 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Constant-time,&#32;nothrow&#32;move&#32;assignment&#32;when&#32;source&#32;object&apos;s&#32;memory</emphasis>
2189 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;can&#32;be&#32;moved&#32;because&#32;the&#32;allocators&#32;are&#32;equal.</emphasis>
2190 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2191 &#32;&#32;&#32;&#32;&#32;&#32;_M_move_assign1(deque&amp;&amp;&#32;__x,&#32;<emphasis role="comment">/*&#32;always&#32;equal:&#32;*/</emphasis>&#32;true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
2192 &#32;&#32;&#32;&#32;&#32;&#32;{
2193 &#32;&#32;&#32;&#32;this-&gt;_M_impl._M_swap_data(__x._M_impl);
2194 &#32;&#32;&#32;&#32;__x.clear();
2195 &#32;&#32;&#32;&#32;std::__alloc_on_move(_M_get_Tp_allocator(),&#32;__x._M_get_Tp_allocator());
2196 &#32;&#32;&#32;&#32;&#32;&#32;}
2197 
2198 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;When&#32;the&#32;allocators&#32;are&#32;not&#32;equal&#32;the&#32;operation&#32;could&#32;throw,&#32;because</emphasis>
2199 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&#32;might&#32;need&#32;to&#32;allocate&#32;a&#32;new&#32;map&#32;for&#32;__x&#32;after&#32;moving&#32;from&#32;it</emphasis>
2200 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;or&#32;we&#32;might&#32;need&#32;to&#32;allocate&#32;new&#32;elements&#32;for&#32;*this.</emphasis>
2201 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2202 &#32;&#32;&#32;&#32;&#32;&#32;_M_move_assign1(deque&amp;&amp;&#32;__x,&#32;<emphasis role="comment">/*&#32;always&#32;equal:&#32;*/</emphasis>&#32;false_type)
2203 &#32;&#32;&#32;&#32;&#32;&#32;{
2204 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_get_Tp_allocator()&#32;==&#32;__x._M_get_Tp_allocator())
2205 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_move_assign1(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x),&#32;true_type());
2206 
2207 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__move_storage&#32;=
2208 &#32;&#32;&#32;&#32;&#32;&#32;_Alloc_traits::_S_propagate_on_move_assign();
2209 &#32;&#32;&#32;&#32;_M_move_assign2(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x),&#32;__bool_constant&lt;__move_storage&gt;());
2210 &#32;&#32;&#32;&#32;&#32;&#32;}
2211 
2212 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Destroy&#32;all&#32;elements&#32;and&#32;deallocate&#32;all&#32;memory,&#32;then&#32;replace</emphasis>
2213 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;with&#32;elements&#32;created&#32;from&#32;__args.</emphasis>
2214 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
2215 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2216 &#32;&#32;&#32;&#32;&#32;&#32;_M_replace_map(_Args&amp;&amp;...&#32;__args)
2217 &#32;&#32;&#32;&#32;&#32;&#32;{
2218 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;new&#32;data&#32;first,&#32;so&#32;if&#32;allocation&#32;fails&#32;there&#32;are&#32;no&#32;effects.</emphasis>
2219 &#32;&#32;&#32;&#32;deque&#32;__newobj(std::forward&lt;_Args&gt;(__args)...);
2220 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Free&#32;existing&#32;storage&#32;using&#32;existing&#32;allocator.</emphasis>
2221 &#32;&#32;&#32;&#32;clear();
2222 &#32;&#32;&#32;&#32;_M_deallocate_node(*begin()._M_node);&#32;<emphasis role="comment">//&#32;one&#32;node&#32;left&#32;after&#32;clear()</emphasis>
2223 &#32;&#32;&#32;&#32;_M_deallocate_map(this-&gt;_M_impl._M_map,&#32;this-&gt;_M_impl._M_map_size);
2224 &#32;&#32;&#32;&#32;this-&gt;_M_impl._M_map&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
2225 &#32;&#32;&#32;&#32;this-&gt;_M_impl._M_map_size&#32;=&#32;0;
2226 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Take&#32;ownership&#32;of&#32;replacement&#32;memory.</emphasis>
2227 &#32;&#32;&#32;&#32;this-&gt;_M_impl._M_swap_data(__newobj._M_impl);
2228 &#32;&#32;&#32;&#32;&#32;&#32;}
2229 
2230 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Do&#32;move&#32;assignment&#32;when&#32;the&#32;allocator&#32;propagates.</emphasis>
2231 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2232 &#32;&#32;&#32;&#32;&#32;&#32;_M_move_assign2(deque&amp;&amp;&#32;__x,&#32;<emphasis role="comment">/*&#32;propagate:&#32;*/</emphasis>&#32;true_type)
2233 &#32;&#32;&#32;&#32;&#32;&#32;{
2234 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Make&#32;a&#32;copy&#32;of&#32;the&#32;original&#32;allocator&#32;state.</emphasis>
2235 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__alloc&#32;=&#32;__x._M_get_Tp_allocator();
2236 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;allocator&#32;propagates&#32;so&#32;storage&#32;can&#32;be&#32;moved&#32;from&#32;__x,</emphasis>
2237 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;leaving&#32;__x&#32;in&#32;a&#32;valid&#32;empty&#32;state&#32;with&#32;a&#32;moved-from&#32;allocator.</emphasis>
2238 &#32;&#32;&#32;&#32;_M_replace_map(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x));
2239 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Move&#32;the&#32;corresponding&#32;allocator&#32;state&#32;too.</emphasis>
2240 &#32;&#32;&#32;&#32;_M_get_Tp_allocator()&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__alloc);
2241 &#32;&#32;&#32;&#32;&#32;&#32;}
2242 
2243 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Do&#32;move&#32;assignment&#32;when&#32;it&#32;may&#32;not&#32;be&#32;possible&#32;to&#32;move&#32;source</emphasis>
2244 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;object&apos;s&#32;memory,&#32;resulting&#32;in&#32;a&#32;linear-time&#32;operation.</emphasis>
2245 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2246 &#32;&#32;&#32;&#32;&#32;&#32;_M_move_assign2(deque&amp;&amp;&#32;__x,&#32;<emphasis role="comment">/*&#32;propagate:&#32;*/</emphasis>&#32;false_type)
2247 &#32;&#32;&#32;&#32;&#32;&#32;{
2248 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x._M_get_Tp_allocator()&#32;==&#32;this-&gt;_M_get_Tp_allocator())
2249 &#32;&#32;&#32;&#32;&#32;&#32;{
2250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;allocators&#32;are&#32;equal&#32;so&#32;storage&#32;can&#32;be&#32;moved&#32;from&#32;__x,</emphasis>
2251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;leaving&#32;__x&#32;in&#32;a&#32;valid&#32;empty&#32;state&#32;with&#32;its&#32;current&#32;allocator.</emphasis>
2252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_replace_map(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x),&#32;__x.get_allocator());
2253 &#32;&#32;&#32;&#32;&#32;&#32;}
2254 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2255 &#32;&#32;&#32;&#32;&#32;&#32;{
2256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;rvalue&apos;s&#32;allocator&#32;cannot&#32;be&#32;moved&#32;and&#32;is&#32;not&#32;equal,</emphasis>
2257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;so&#32;we&#32;need&#32;to&#32;individually&#32;move&#32;each&#32;element.</emphasis>
2258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_assign_aux(std::make_move_iterator(__x.begin()),
2259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::make_move_iterator(__x.end()),
2260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::random_access_iterator_tag());
2261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x.clear();
2262 &#32;&#32;&#32;&#32;&#32;&#32;}
2263 &#32;&#32;&#32;&#32;&#32;&#32;}
2264 <emphasis role="preprocessor">#endif</emphasis>
2265 &#32;&#32;&#32;&#32;};
2266 
2267 <emphasis role="preprocessor">#if&#32;__cpp_deduction_guides&#32;&gt;=&#32;201606</emphasis>
2268 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ValT
2269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type,
2270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&#32;=&#32;allocator&lt;_ValT&gt;,
2271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;,
2272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
2273 &#32;&#32;&#32;&#32;deque(_InputIterator,&#32;_InputIterator,&#32;_Allocator&#32;=&#32;_Allocator())
2274 &#32;&#32;&#32;&#32;&#32;&#32;-&gt;&#32;deque&lt;_ValT,&#32;_Allocator&gt;;
2275 <emphasis role="preprocessor">#endif</emphasis>
2276 
2287 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2288 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
2289 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2290 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;deque&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;deque&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__y)
2291 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.size()&#32;==&#32;__y.size()
2292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="_namespacestd_1a94ada91841cca21a2327b0235f9a82cd">std::equal</link>(__x.begin(),&#32;__x.end(),&#32;__y.begin());&#32;}
2293 
2294 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
2306 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2307 &#32;&#32;&#32;&#32;[[nodiscard]]
2308 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;__detail::__synth3way_t&lt;_Tp&gt;
2309 &#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;deque&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;deque&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__y)
2310 &#32;&#32;&#32;&#32;{
2311 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::lexicographical_compare_three_way(__x.begin(),&#32;__x.end(),
2312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__y.begin(),&#32;__y.end(),
2313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::__synth3way);
2314 &#32;&#32;&#32;&#32;}
2315 <emphasis role="preprocessor">#else</emphasis>
2327 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2328 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
2329 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2330 &#32;&#32;&#32;&#32;operator&lt;(<emphasis role="keyword">const</emphasis>&#32;deque&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;deque&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__y)
2331 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a076cfce541233dc2534e44d067d41ad4">std::lexicographical_compare</link>(__x.begin(),&#32;__x.end(),
2332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__y.begin(),&#32;__y.end());&#32;}
2333 
2335 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2336 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
2337 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2338 &#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;deque&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;deque&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__y)
2339 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__x&#32;==&#32;__y);&#32;}
2340 
2342 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2343 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
2344 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2345 &#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;deque&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;deque&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__y)
2346 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__y&#32;&lt;&#32;__x;&#32;}
2347 
2349 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2350 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
2351 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2352 &#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;deque&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;deque&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__y)
2353 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__y&#32;&lt;&#32;__x);&#32;}
2354 
2356 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2357 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
2358 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2359 &#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;deque&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;deque&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__y)
2360 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__x&#32;&lt;&#32;__y);&#32;}
2361 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;three-way&#32;comparison</emphasis>
2362 
2364 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2365 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
2366 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(deque&lt;_Tp,_Alloc&gt;&amp;&#32;__x,&#32;deque&lt;_Tp,_Alloc&gt;&amp;&#32;__y)
2367 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT_IF(<emphasis role="keyword">noexcept</emphasis>(__x.swap(__y)))
2368 &#32;&#32;&#32;&#32;{&#32;__x.swap(__y);&#32;}
2369 
2370 <emphasis role="preprocessor">#undef&#32;_GLIBCXX_DEQUE_BUF_SIZE</emphasis>
2371 
2372 _GLIBCXX_END_NAMESPACE_CONTAINER
2373 
2374 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
2375 &#32;&#32;<emphasis role="comment">//&#32;std::allocator&#32;is&#32;safe,&#32;but&#32;it&#32;is&#32;not&#32;the&#32;only&#32;allocator</emphasis>
2376 &#32;&#32;<emphasis role="comment">//&#32;for&#32;which&#32;this&#32;is&#32;valid.</emphasis>
2377 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Tp&gt;
2378 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_bitwise_relocatable&lt;_GLIBCXX_STD_C::deque&lt;_Tp&gt;&gt;
2379 &#32;&#32;&#32;&#32;:&#32;true_type&#32;{&#32;};
2380 <emphasis role="preprocessor">#endif</emphasis>
2381 
2382 _GLIBCXX_END_NAMESPACE_VERSION
2383 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
2384 
2385 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_STL_DEQUE_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
