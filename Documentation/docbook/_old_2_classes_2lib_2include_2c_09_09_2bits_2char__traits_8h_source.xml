<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2bits_2char__traits_8h_source" xml:lang="en-US">
<title>char_traits.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/bits/char_traits.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Character&#32;Traits&#32;for&#32;use&#32;by&#32;standard&#32;string&#32;and&#32;iostream&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;1997-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="comment">//</emphasis>
31 <emphasis role="comment">//&#32;ISO&#32;C++&#32;14882:&#32;21&#32;&#32;Strings&#32;library</emphasis>
32 <emphasis role="comment">//</emphasis>
33 
34 <emphasis role="preprocessor">#ifndef&#32;_CHAR_TRAITS_H</emphasis>
35 <emphasis role="preprocessor">#define&#32;_CHAR_TRAITS_H&#32;1</emphasis>
36 
37 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
38 
39 <emphasis role="preprocessor">#include&#32;&lt;bits/postypes.h&gt;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;streampos</emphasis>
40 <emphasis role="preprocessor">#include&#32;&lt;cwchar&gt;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;WEOF,&#32;wmemmove,&#32;wmemset,&#32;etc.</emphasis>
41 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
42 <emphasis role="preprocessor">#&#32;include&#32;&lt;type_traits&gt;</emphasis>
43 <emphasis role="preprocessor">#endif</emphasis>
44 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;202002L</emphasis>
45 <emphasis role="preprocessor">#&#32;include&#32;&lt;compare&gt;</emphasis>
46 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/stl_construct.h&gt;</emphasis>
47 <emphasis role="preprocessor">#endif</emphasis>
48 
49 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_ALWAYS_INLINE</emphasis>
50 <emphasis role="preprocessor">#&#32;define&#32;_GLIBCXX_ALWAYS_INLINE&#32;inline&#32;__attribute__((__always_inline__))</emphasis>
51 <emphasis role="preprocessor">#endif</emphasis>
52 
53 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__cxx">__gnu_cxx</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
54 {
55 _GLIBCXX_BEGIN_NAMESPACE_VERSION
56 
57 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
58 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wstringop-overflow&quot;</emphasis>
59 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wstringop-overread&quot;</emphasis>
60 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Warray-bounds&quot;</emphasis>
61 
72 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
73 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Char_types
74 &#32;&#32;&#32;&#32;{
75 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;&#32;&#32;int_type;
76 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::streampos&#32;&#32;pos_type;
77 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::streamoff&#32;&#32;off_type;
78 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::mbstate_t&#32;&#32;state_type;
79 &#32;&#32;&#32;&#32;};
80 
81 
97 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
98 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>char_traits
99 &#32;&#32;&#32;&#32;{
100 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char_type;
101 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Char_types&lt;_CharT&gt;::int_type&#32;&#32;&#32;&#32;int_type;
102 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Char_types&lt;_CharT&gt;::pos_type&#32;&#32;&#32;&#32;pos_type;
103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Char_types&lt;_CharT&gt;::off_type&#32;&#32;&#32;&#32;off_type;
104 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Char_types&lt;_CharT&gt;::state_type&#32;&#32;state_type;
105 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
106 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>comparison_category&#32;=&#32;std::strong_ordering;
107 <emphasis role="preprocessor">#endif</emphasis>
108 
109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX14_CONSTEXPR&#32;<emphasis role="keywordtype">void</emphasis>
110 &#32;&#32;&#32;&#32;&#32;&#32;assign(char_type&amp;&#32;__c1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c2)
111 &#32;&#32;&#32;&#32;&#32;&#32;{
112 <emphasis role="preprocessor">#if&#32;__cpp_constexpr_dynamic_alloc</emphasis>
113 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
114 &#32;&#32;&#32;&#32;&#32;&#32;std::construct_at(__builtin_addressof(__c1),&#32;__c2);
115 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
116 <emphasis role="preprocessor">#endif</emphasis>
117 &#32;&#32;&#32;&#32;__c1&#32;=&#32;__c2;
118 &#32;&#32;&#32;&#32;&#32;&#32;}
119 
120 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
121 &#32;&#32;&#32;&#32;&#32;&#32;eq(<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c2)
122 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__c1&#32;==&#32;__c2;&#32;}
123 
124 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
125 &#32;&#32;&#32;&#32;&#32;&#32;lt(<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c2)
126 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__c1&#32;&lt;&#32;__c2;&#32;}
127 
128 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX14_CONSTEXPR&#32;<emphasis role="keywordtype">int</emphasis>
129 &#32;&#32;&#32;&#32;&#32;&#32;compare(<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s2,&#32;std::size_t&#32;__n);
130 
131 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX14_CONSTEXPR&#32;std::size_t
132 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelength">length</link>(<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s);
133 
134 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX14_CONSTEXPR&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*
135 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s,&#32;std::size_t&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__a);
136 
137 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;char_type*
138 &#32;&#32;&#32;&#32;&#32;&#32;move(char_type*&#32;__s1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s2,&#32;std::size_t&#32;__n);
139 
140 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;char_type*
141 &#32;&#32;&#32;&#32;&#32;&#32;copy(char_type*&#32;__s1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s2,&#32;std::size_t&#32;__n);
142 
143 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;char_type*
144 &#32;&#32;&#32;&#32;&#32;&#32;assign(char_type*&#32;__s,&#32;std::size_t&#32;__n,&#32;char_type&#32;__a);
145 
146 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;char_type
147 &#32;&#32;&#32;&#32;&#32;&#32;to_char_type(<emphasis role="keyword">const</emphasis>&#32;int_type&amp;&#32;__c)
148 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>char_type<emphasis role="keyword">&gt;</emphasis>(__c);&#32;}
149 
150 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;int_type
151 &#32;&#32;&#32;&#32;&#32;&#32;to_int_type(<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c)
152 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>int_type<emphasis role="keyword">&gt;</emphasis>(__c);&#32;}
153 
154 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
155 &#32;&#32;&#32;&#32;&#32;&#32;eq_int_type(<emphasis role="keyword">const</emphasis>&#32;int_type&amp;&#32;__c1,&#32;<emphasis role="keyword">const</emphasis>&#32;int_type&amp;&#32;__c2)
156 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__c1&#32;==&#32;__c2;&#32;}
157 
158 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;int_type
159 &#32;&#32;&#32;&#32;&#32;&#32;eof()
160 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>int_type<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1120e3468f8234e5d042869c17dcb16d">_GLIBCXX_STDIO_EOF</link>);&#32;}
161 
162 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;int_type
163 &#32;&#32;&#32;&#32;&#32;&#32;not_eof(<emphasis role="keyword">const</emphasis>&#32;int_type&amp;&#32;__c)
164 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!eq_int_type(__c,&#32;eof())&#32;?&#32;__c&#32;:&#32;to_int_type(char_type());&#32;}
165 &#32;&#32;&#32;&#32;};
166 
167 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
168 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR&#32;<emphasis role="keywordtype">int</emphasis>
169 &#32;&#32;&#32;&#32;char_traits&lt;_CharT&gt;::
170 &#32;&#32;&#32;&#32;compare(<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s2,&#32;std::size_t&#32;__n)
171 &#32;&#32;&#32;&#32;{
172 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__n;&#32;++__i)
173 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lt(__s1[__i],&#32;__s2[__i]))
174 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
175 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lt(__s2[__i],&#32;__s1[__i]))
176 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
177 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
178 &#32;&#32;&#32;&#32;}
179 
180 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
181 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR&#32;std::size_t
182 &#32;&#32;&#32;&#32;char_traits&lt;_CharT&gt;::
183 &#32;&#32;&#32;&#32;length(<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__p)
184 &#32;&#32;&#32;&#32;{
185 &#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;__i&#32;=&#32;0;
186 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!eq(__p[__i],&#32;char_type()))
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__i;
188 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__i;
189 &#32;&#32;&#32;&#32;}
190 
191 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
192 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;char_traits&lt;_CharT&gt;::char_type*
193 &#32;&#32;&#32;&#32;char_traits&lt;_CharT&gt;::
194 &#32;&#32;&#32;&#32;find(<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s,&#32;std::size_t&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__a)
195 &#32;&#32;&#32;&#32;{
196 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__n;&#32;++__i)
197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(eq(__s[__i],&#32;__a))
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s&#32;+&#32;__i;
199 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
200 &#32;&#32;&#32;&#32;}
201 
202 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
203 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
204 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;char_traits&lt;_CharT&gt;::char_type*
205 &#32;&#32;&#32;&#32;char_traits&lt;_CharT&gt;::
206 &#32;&#32;&#32;&#32;move(char_type*&#32;__s1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s2,&#32;std::size_t&#32;__n)
207 &#32;&#32;&#32;&#32;{
208 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;0)
209 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s1;
210 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;202002L</emphasis>
211 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
212 &#32;&#32;&#32;&#32;{
213 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__s1&#32;==&#32;__s2)&#32;<emphasis role="comment">//&#32;unlikely,&#32;but&#32;saves&#32;a&#32;lot&#32;of&#32;work</emphasis>
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s1;
215 <emphasis role="preprocessor">#if&#32;__cpp_constexpr_dynamic_alloc</emphasis>
216 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;overlap&#32;detection&#32;below&#32;fails&#32;due&#32;to&#32;PR&#32;c++/89074,</emphasis>
217 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;so&#32;use&#32;a&#32;temporary&#32;buffer&#32;instead.</emphasis>
218 &#32;&#32;&#32;&#32;&#32;&#32;char_type*&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;char_type[__n];
219 &#32;&#32;&#32;&#32;&#32;&#32;copy(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>,&#32;__s2,&#32;__n);
220 &#32;&#32;&#32;&#32;&#32;&#32;copy(__s1,&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>,&#32;__n);
221 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
222 <emphasis role="preprocessor">#else</emphasis>
223 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__end&#32;=&#32;__s2&#32;+&#32;__n&#32;-&#32;1;
224 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__overlap&#32;=&#32;<emphasis role="keyword">false</emphasis>;
225 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__n&#32;-&#32;1;&#32;++__i)
226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__s1&#32;+&#32;__i&#32;==&#32;__end)
228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__overlap&#32;=&#32;<emphasis role="keyword">true</emphasis>;
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
233 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__overlap)
234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>
236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__n;
238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assign(__s1[__n],&#32;__s2[__n]);
239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__n&#32;&gt;&#32;0);
241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
242 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;copy(__s1,&#32;__s2,&#32;__n);
244 <emphasis role="preprocessor">#endif</emphasis>
245 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s1;
246 &#32;&#32;&#32;&#32;}
247 <emphasis role="preprocessor">#endif</emphasis>
248 &#32;&#32;&#32;&#32;&#32;&#32;__builtin_memmove(__s1,&#32;__s2,&#32;__n&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(char_type));
249 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s1;
250 &#32;&#32;&#32;&#32;}
251 
252 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
253 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
254 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;char_traits&lt;_CharT&gt;::char_type*
255 &#32;&#32;&#32;&#32;char_traits&lt;_CharT&gt;::
256 &#32;&#32;&#32;&#32;copy(char_type*&#32;__s1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s2,&#32;std::size_t&#32;__n)
257 &#32;&#32;&#32;&#32;{
258 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;202002L</emphasis>
259 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
260 &#32;&#32;&#32;&#32;{
261 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__n;&#32;++__i)
262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::construct_at(__s1&#32;+&#32;__i,&#32;__s2[__i]);
263 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s1;
264 &#32;&#32;&#32;&#32;}
265 <emphasis role="preprocessor">#endif</emphasis>
266 
267 &#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(__s1,&#32;__s2,&#32;__n&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(char_type));
268 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s1;
269 &#32;&#32;&#32;&#32;}
270 
271 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
272 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
273 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;char_traits&lt;_CharT&gt;::char_type*
274 &#32;&#32;&#32;&#32;char_traits&lt;_CharT&gt;::
275 &#32;&#32;&#32;&#32;assign(char_type*&#32;__s,&#32;std::size_t&#32;__n,&#32;char_type&#32;__a)
276 &#32;&#32;&#32;&#32;{
277 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;202002L</emphasis>
278 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
279 &#32;&#32;&#32;&#32;{
280 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__n;&#32;++__i)
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::construct_at(__s&#32;+&#32;__i,&#32;__a);
282 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s;
283 &#32;&#32;&#32;&#32;}
284 <emphasis role="preprocessor">#endif</emphasis>
285 
286 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;(<emphasis role="keyword">sizeof</emphasis>(_CharT)&#32;==&#32;1&#32;&amp;&amp;&#32;__is_trivial(_CharT))
287 &#32;&#32;&#32;&#32;{
288 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;__c;
289 &#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(&amp;__c,&#32;__builtin_addressof(__a),&#32;1);
290 &#32;&#32;&#32;&#32;&#32;&#32;__builtin_memset(__s,&#32;__c,&#32;__n);
291 &#32;&#32;&#32;&#32;}
292 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
293 &#32;&#32;&#32;&#32;{
294 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__n;&#32;++__i)
295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__s[__i]&#32;=&#32;__a;
296 &#32;&#32;&#32;&#32;}
297 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s;
298 &#32;&#32;&#32;&#32;}
299 
300 _GLIBCXX_END_NAMESPACE_VERSION
301 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
302 
303 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
304 {
305 _GLIBCXX_BEGIN_NAMESPACE_VERSION
306 
307 <emphasis role="preprocessor">#ifdef&#32;__cpp_lib_is_constant_evaluated</emphasis>
308 <emphasis role="comment">//&#32;Unofficial&#32;macro&#32;indicating&#32;P1032R1&#32;support&#32;in&#32;C++20</emphasis>
309 <emphasis role="preprocessor">#&#32;define&#32;__cpp_lib_constexpr_char_traits&#32;201811L</emphasis>
310 <emphasis role="preprocessor">#elif&#32;__cplusplus&#32;&gt;=&#32;201703L&#32;&amp;&amp;&#32;_GLIBCXX_HAVE_IS_CONSTANT_EVALUATED</emphasis>
311 <emphasis role="comment">//&#32;Unofficial&#32;macro&#32;indicating&#32;P0426R1&#32;support&#32;in&#32;C++17</emphasis>
312 <emphasis role="preprocessor">#&#32;define&#32;__cpp_lib_constexpr_char_traits&#32;201611L</emphasis>
313 <emphasis role="preprocessor">#endif</emphasis>
314 
315 &#32;&#32;<emphasis role="comment">//&#32;21.1</emphasis>
328 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
329 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>char_traits&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__gnu_cxx::char_traits&lt;_CharT&gt;
330 &#32;&#32;&#32;&#32;{&#32;};
331 
332 
334 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
335 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>char_traits&lt;char&gt;
336 &#32;&#32;&#32;&#32;{
337 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char_type;
338 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int_type;
339 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;streampos&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos_type;
340 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;streamoff&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;off_type;
341 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;mbstate_t&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;state_type;
342 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
343 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>comparison_category&#32;=&#32;strong_ordering;
344 <emphasis role="preprocessor">#endif</emphasis>
345 
346 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">void</emphasis>
347 &#32;&#32;&#32;&#32;&#32;&#32;assign(char_type&amp;&#32;__c1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c2)&#32;_GLIBCXX_NOEXCEPT
348 &#32;&#32;&#32;&#32;&#32;&#32;{
349 <emphasis role="preprocessor">#if&#32;__cpp_constexpr_dynamic_alloc</emphasis>
350 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
351 &#32;&#32;&#32;&#32;&#32;&#32;std::construct_at(__builtin_addressof(__c1),&#32;__c2);
352 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
353 <emphasis role="preprocessor">#endif</emphasis>
354 &#32;&#32;&#32;&#32;__c1&#32;=&#32;__c2;
355 &#32;&#32;&#32;&#32;&#32;&#32;}
356 
357 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
358 &#32;&#32;&#32;&#32;&#32;&#32;eq(<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c2)&#32;_GLIBCXX_NOEXCEPT
359 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__c1&#32;==&#32;__c2;&#32;}
360 
361 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
362 &#32;&#32;&#32;&#32;&#32;&#32;lt(<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c2)&#32;_GLIBCXX_NOEXCEPT
363 &#32;&#32;&#32;&#32;&#32;&#32;{
364 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LWG&#32;467.</emphasis>
365 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(__c1)
366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(__c2));
367 &#32;&#32;&#32;&#32;&#32;&#32;}
368 
369 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">int</emphasis>
370 &#32;&#32;&#32;&#32;&#32;&#32;compare(<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s2,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n)
371 &#32;&#32;&#32;&#32;&#32;&#32;{
372 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;0)
373 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
374 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
375 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
376 &#32;&#32;&#32;&#32;&#32;&#32;{
377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__n;&#32;++__i)
378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lt(__s1[__i],&#32;__s2[__i]))
379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lt(__s2[__i],&#32;__s1[__i]))
381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
383 &#32;&#32;&#32;&#32;&#32;&#32;}
384 <emphasis role="preprocessor">#endif</emphasis>
385 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_memcmp(__s1,&#32;__s2,&#32;__n);
386 &#32;&#32;&#32;&#32;&#32;&#32;}
387 
388 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">size_t</emphasis>
389 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelength">length</link>(<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s)
390 &#32;&#32;&#32;&#32;&#32;&#32;{
391 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
392 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
393 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::char_traits&lt;char_type&gt;::length(__s);
394 <emphasis role="preprocessor">#endif</emphasis>
395 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_strlen(__s);
396 &#32;&#32;&#32;&#32;&#32;&#32;}
397 
398 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*
399 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__a)
400 &#32;&#32;&#32;&#32;&#32;&#32;{
401 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;0)
402 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
403 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
404 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
405 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::char_traits&lt;char_type&gt;::find(__s,&#32;__n,&#32;__a);
406 <emphasis role="preprocessor">#endif</emphasis>
407 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>char_type*<emphasis role="keyword">&gt;</emphasis>(__builtin_memchr(__s,&#32;__a,&#32;__n));
408 &#32;&#32;&#32;&#32;&#32;&#32;}
409 
410 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;char_type*
411 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(char_type*&#32;__s1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s2,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n)
412 &#32;&#32;&#32;&#32;&#32;&#32;{
413 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;0)
414 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s1;
415 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;202002L</emphasis>
416 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
417 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::char_traits&lt;char_type&gt;::move(__s1,&#32;__s2,&#32;__n);
418 <emphasis role="preprocessor">#endif</emphasis>
419 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>char_type*<emphasis role="keyword">&gt;</emphasis>(__builtin_memmove(__s1,&#32;__s2,&#32;__n));
420 &#32;&#32;&#32;&#32;&#32;&#32;}
421 
422 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;char_type*
423 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">copy</link>(char_type*&#32;__s1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s2,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n)
424 &#32;&#32;&#32;&#32;&#32;&#32;{
425 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;0)
426 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s1;
427 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;202002L</emphasis>
428 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
429 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::char_traits&lt;char_type&gt;::copy(__s1,&#32;__s2,&#32;__n);
430 <emphasis role="preprocessor">#endif</emphasis>
431 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>char_type*<emphasis role="keyword">&gt;</emphasis>(__builtin_memcpy(__s1,&#32;__s2,&#32;__n));
432 &#32;&#32;&#32;&#32;&#32;&#32;}
433 
434 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;char_type*
435 &#32;&#32;&#32;&#32;&#32;&#32;assign(char_type*&#32;__s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n,&#32;char_type&#32;__a)
436 &#32;&#32;&#32;&#32;&#32;&#32;{
437 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;0)
438 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s;
439 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;202002L</emphasis>
440 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
441 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::char_traits&lt;char_type&gt;::assign(__s,&#32;__n,&#32;__a);
442 <emphasis role="preprocessor">#endif</emphasis>
443 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>char_type*<emphasis role="keyword">&gt;</emphasis>(__builtin_memset(__s,&#32;__a,&#32;__n));
444 &#32;&#32;&#32;&#32;&#32;&#32;}
445 
446 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;char_type
447 &#32;&#32;&#32;&#32;&#32;&#32;to_char_type(<emphasis role="keyword">const</emphasis>&#32;int_type&amp;&#32;__c)&#32;_GLIBCXX_NOEXCEPT
448 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>char_type<emphasis role="keyword">&gt;</emphasis>(__c);&#32;}
449 
450 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;To&#32;keep&#32;both&#32;the&#32;byte&#32;0xff&#32;and&#32;the&#32;eof&#32;symbol&#32;0xffffffff</emphasis>
451 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;from&#32;ending&#32;up&#32;as&#32;0xffffffff.</emphasis>
452 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;int_type
453 &#32;&#32;&#32;&#32;&#32;&#32;to_int_type(<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c)&#32;_GLIBCXX_NOEXCEPT
454 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>int_type<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(__c));&#32;}
455 
456 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
457 &#32;&#32;&#32;&#32;&#32;&#32;eq_int_type(<emphasis role="keyword">const</emphasis>&#32;int_type&amp;&#32;__c1,&#32;<emphasis role="keyword">const</emphasis>&#32;int_type&amp;&#32;__c2)&#32;_GLIBCXX_NOEXCEPT
458 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__c1&#32;==&#32;__c2;&#32;}
459 
460 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;int_type
461 &#32;&#32;&#32;&#32;&#32;&#32;eof()&#32;_GLIBCXX_NOEXCEPT
462 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>int_type<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1120e3468f8234e5d042869c17dcb16d">_GLIBCXX_STDIO_EOF</link>);&#32;}
463 
464 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;int_type
465 &#32;&#32;&#32;&#32;&#32;&#32;not_eof(<emphasis role="keyword">const</emphasis>&#32;int_type&amp;&#32;__c)&#32;_GLIBCXX_NOEXCEPT
466 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__c&#32;==&#32;eof())&#32;?&#32;0&#32;:&#32;__c;&#32;}
467 &#32;&#32;};
468 
469 
470 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_WCHAR_T</emphasis>
472 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
473 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>char_traits&lt;<link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link>&gt;
474 &#32;&#32;&#32;&#32;{
475 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">wchar_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char_type;
476 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;wint_t&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int_type;
477 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;streamoff&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;off_type;
478 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;wstreampos&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos_type;
479 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;mbstate_t&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;state_type;
480 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
481 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>comparison_category&#32;=&#32;strong_ordering;
482 <emphasis role="preprocessor">#endif</emphasis>
483 
484 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">void</emphasis>
485 &#32;&#32;&#32;&#32;&#32;&#32;assign(char_type&amp;&#32;__c1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c2)&#32;_GLIBCXX_NOEXCEPT
486 &#32;&#32;&#32;&#32;&#32;&#32;{
487 <emphasis role="preprocessor">#if&#32;__cpp_constexpr_dynamic_alloc</emphasis>
488 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
489 &#32;&#32;&#32;&#32;&#32;&#32;std::construct_at(__builtin_addressof(__c1),&#32;__c2);
490 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
491 <emphasis role="preprocessor">#endif</emphasis>
492 &#32;&#32;&#32;&#32;__c1&#32;=&#32;__c2;
493 &#32;&#32;&#32;&#32;&#32;&#32;}
494 
495 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
496 &#32;&#32;&#32;&#32;&#32;&#32;eq(<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c2)&#32;_GLIBCXX_NOEXCEPT
497 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__c1&#32;==&#32;__c2;&#32;}
498 
499 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
500 &#32;&#32;&#32;&#32;&#32;&#32;lt(<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c2)&#32;_GLIBCXX_NOEXCEPT
501 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__c1&#32;&lt;&#32;__c2;&#32;}
502 
503 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">int</emphasis>
504 &#32;&#32;&#32;&#32;&#32;&#32;compare(<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s2,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n)
505 &#32;&#32;&#32;&#32;&#32;&#32;{
506 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;0)
507 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
508 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
509 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
510 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::char_traits&lt;char_type&gt;::compare(__s1,&#32;__s2,&#32;__n);
511 <emphasis role="preprocessor">#endif</emphasis>
512 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;wmemcmp(__s1,&#32;__s2,&#32;__n);
513 &#32;&#32;&#32;&#32;&#32;&#32;}
514 
515 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">size_t</emphasis>
516 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelength">length</link>(<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s)
517 &#32;&#32;&#32;&#32;&#32;&#32;{
518 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
519 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
520 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::char_traits&lt;char_type&gt;::length(__s);
521 <emphasis role="preprocessor">#endif</emphasis>
522 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;wcslen(__s);
523 &#32;&#32;&#32;&#32;&#32;&#32;}
524 
525 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*
526 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__a)
527 &#32;&#32;&#32;&#32;&#32;&#32;{
528 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;0)
529 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
530 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
531 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
532 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::char_traits&lt;char_type&gt;::find(__s,&#32;__n,&#32;__a);
533 <emphasis role="preprocessor">#endif</emphasis>
534 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;wmemchr(__s,&#32;__a,&#32;__n);
535 &#32;&#32;&#32;&#32;&#32;&#32;}
536 
537 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;char_type*
538 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(char_type*&#32;__s1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s2,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n)
539 &#32;&#32;&#32;&#32;&#32;&#32;{
540 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;0)
541 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s1;
542 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;202002L</emphasis>
543 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
544 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::char_traits&lt;char_type&gt;::move(__s1,&#32;__s2,&#32;__n);
545 <emphasis role="preprocessor">#endif</emphasis>
546 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;wmemmove(__s1,&#32;__s2,&#32;__n);
547 &#32;&#32;&#32;&#32;&#32;&#32;}
548 
549 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;char_type*
550 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">copy</link>(char_type*&#32;__s1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s2,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n)
551 &#32;&#32;&#32;&#32;&#32;&#32;{
552 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;0)
553 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s1;
554 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;202002L</emphasis>
555 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
556 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::char_traits&lt;char_type&gt;::copy(__s1,&#32;__s2,&#32;__n);
557 <emphasis role="preprocessor">#endif</emphasis>
558 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;wmemcpy(__s1,&#32;__s2,&#32;__n);
559 &#32;&#32;&#32;&#32;&#32;&#32;}
560 
561 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;char_type*
562 &#32;&#32;&#32;&#32;&#32;&#32;assign(char_type*&#32;__s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n,&#32;char_type&#32;__a)
563 &#32;&#32;&#32;&#32;&#32;&#32;{
564 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;0)
565 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s;
566 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;202002L</emphasis>
567 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
568 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::char_traits&lt;char_type&gt;::assign(__s,&#32;__n,&#32;__a);
569 <emphasis role="preprocessor">#endif</emphasis>
570 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;wmemset(__s,&#32;__a,&#32;__n);
571 &#32;&#32;&#32;&#32;&#32;&#32;}
572 
573 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;char_type
574 &#32;&#32;&#32;&#32;&#32;&#32;to_char_type(<emphasis role="keyword">const</emphasis>&#32;int_type&amp;&#32;__c)&#32;_GLIBCXX_NOEXCEPT
575 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;char_type(__c);&#32;}
576 
577 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;int_type
578 &#32;&#32;&#32;&#32;&#32;&#32;to_int_type(<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c)&#32;_GLIBCXX_NOEXCEPT
579 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;int_type(__c);&#32;}
580 
581 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
582 &#32;&#32;&#32;&#32;&#32;&#32;eq_int_type(<emphasis role="keyword">const</emphasis>&#32;int_type&amp;&#32;__c1,&#32;<emphasis role="keyword">const</emphasis>&#32;int_type&amp;&#32;__c2)&#32;_GLIBCXX_NOEXCEPT
583 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__c1&#32;==&#32;__c2;&#32;}
584 
585 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;int_type
586 &#32;&#32;&#32;&#32;&#32;&#32;eof()&#32;_GLIBCXX_NOEXCEPT
587 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>int_type<emphasis role="keyword">&gt;</emphasis>(WEOF);&#32;}
588 
589 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;int_type
590 &#32;&#32;&#32;&#32;&#32;&#32;not_eof(<emphasis role="keyword">const</emphasis>&#32;int_type&amp;&#32;__c)&#32;_GLIBCXX_NOEXCEPT
591 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;eq_int_type(__c,&#32;eof())&#32;?&#32;0&#32;:&#32;__c;&#32;}
592 &#32;&#32;};
593 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_USE_WCHAR_T</emphasis>
594 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
595 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>char_traits&lt;<link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link>&gt;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__gnu_cxx::char_traits&lt;wchar_t&gt;
596 &#32;&#32;&#32;&#32;{&#32;};
597 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//_GLIBCXX_USE_WCHAR_T</emphasis>
598 
599 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_CHAR8_T</emphasis>
600 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
601 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>char_traits&lt;char8_t&gt;
602 &#32;&#32;&#32;&#32;{
603 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">char8_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char_type;
604 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;int_type;
605 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;u8streampos&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos_type;
606 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;streamoff&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;off_type;
607 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;mbstate_t&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;state_type;
608 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
609 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>comparison_category&#32;=&#32;strong_ordering;
610 <emphasis role="preprocessor">#endif</emphasis>
611 
612 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">void</emphasis>
613 &#32;&#32;&#32;&#32;&#32;&#32;assign(char_type&amp;&#32;__c1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c2)&#32;_GLIBCXX_NOEXCEPT
614 &#32;&#32;&#32;&#32;&#32;&#32;{
615 <emphasis role="preprocessor">#if&#32;__cpp_constexpr_dynamic_alloc</emphasis>
616 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
617 &#32;&#32;&#32;&#32;&#32;&#32;std::construct_at(__builtin_addressof(__c1),&#32;__c2);
618 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
619 <emphasis role="preprocessor">#endif</emphasis>
620 &#32;&#32;&#32;&#32;__c1&#32;=&#32;__c2;
621 &#32;&#32;&#32;&#32;&#32;&#32;}
622 
623 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
624 &#32;&#32;&#32;&#32;&#32;&#32;eq(<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c2)&#32;_GLIBCXX_NOEXCEPT
625 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__c1&#32;==&#32;__c2;&#32;}
626 
627 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
628 &#32;&#32;&#32;&#32;&#32;&#32;lt(<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c2)&#32;_GLIBCXX_NOEXCEPT
629 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__c1&#32;&lt;&#32;__c2;&#32;}
630 
631 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">int</emphasis>
632 &#32;&#32;&#32;&#32;&#32;&#32;compare(<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s2,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n)
633 &#32;&#32;&#32;&#32;&#32;&#32;{
634 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;0)
635 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
636 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
637 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
638 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::char_traits&lt;char_type&gt;::compare(__s1,&#32;__s2,&#32;__n);
639 <emphasis role="preprocessor">#endif</emphasis>
640 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_memcmp(__s1,&#32;__s2,&#32;__n);
641 &#32;&#32;&#32;&#32;&#32;&#32;}
642 
643 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">size_t</emphasis>
644 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelength">length</link>(<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s)
645 &#32;&#32;&#32;&#32;&#32;&#32;{
646 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
647 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
648 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::char_traits&lt;char_type&gt;::length(__s);
649 <emphasis role="preprocessor">#endif</emphasis>
650 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__i&#32;=&#32;0;
651 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!eq(__s[__i],&#32;char_type()))
652 &#32;&#32;&#32;&#32;&#32;&#32;++__i;
653 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__i;
654 &#32;&#32;&#32;&#32;&#32;&#32;}
655 
656 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*
657 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__a)
658 &#32;&#32;&#32;&#32;&#32;&#32;{
659 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;0)
660 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
661 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
662 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
663 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::char_traits&lt;char_type&gt;::find(__s,&#32;__n,&#32;__a);
664 <emphasis role="preprocessor">#endif</emphasis>
665 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>char_type*<emphasis role="keyword">&gt;</emphasis>(__builtin_memchr(__s,&#32;__a,&#32;__n));
666 &#32;&#32;&#32;&#32;&#32;&#32;}
667 
668 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;char_type*
669 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(char_type*&#32;__s1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s2,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n)
670 &#32;&#32;&#32;&#32;&#32;&#32;{
671 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;0)
672 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s1;
673 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;202002L</emphasis>
674 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
675 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::char_traits&lt;char_type&gt;::move(__s1,&#32;__s2,&#32;__n);
676 <emphasis role="preprocessor">#endif</emphasis>
677 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>char_type*<emphasis role="keyword">&gt;</emphasis>(__builtin_memmove(__s1,&#32;__s2,&#32;__n));
678 &#32;&#32;&#32;&#32;&#32;&#32;}
679 
680 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;char_type*
681 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">copy</link>(char_type*&#32;__s1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s2,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n)
682 &#32;&#32;&#32;&#32;&#32;&#32;{
683 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;0)
684 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s1;
685 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;202002L</emphasis>
686 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
687 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::char_traits&lt;char_type&gt;::copy(__s1,&#32;__s2,&#32;__n);
688 <emphasis role="preprocessor">#endif</emphasis>
689 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>char_type*<emphasis role="keyword">&gt;</emphasis>(__builtin_memcpy(__s1,&#32;__s2,&#32;__n));
690 &#32;&#32;&#32;&#32;&#32;&#32;}
691 
692 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;char_type*
693 &#32;&#32;&#32;&#32;&#32;&#32;assign(char_type*&#32;__s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n,&#32;char_type&#32;__a)
694 &#32;&#32;&#32;&#32;&#32;&#32;{
695 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;0)
696 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s;
697 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;202002L</emphasis>
698 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
699 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::char_traits&lt;char_type&gt;::assign(__s,&#32;__n,&#32;__a);
700 <emphasis role="preprocessor">#endif</emphasis>
701 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>char_type*<emphasis role="keyword">&gt;</emphasis>(__builtin_memset(__s,&#32;__a,&#32;__n));
702 &#32;&#32;&#32;&#32;&#32;&#32;}
703 
704 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;char_type
705 &#32;&#32;&#32;&#32;&#32;&#32;to_char_type(<emphasis role="keyword">const</emphasis>&#32;int_type&amp;&#32;__c)&#32;_GLIBCXX_NOEXCEPT
706 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;char_type(__c);&#32;}
707 
708 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;int_type
709 &#32;&#32;&#32;&#32;&#32;&#32;to_int_type(<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c)&#32;_GLIBCXX_NOEXCEPT
710 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;int_type(__c);&#32;}
711 
712 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
713 &#32;&#32;&#32;&#32;&#32;&#32;eq_int_type(<emphasis role="keyword">const</emphasis>&#32;int_type&amp;&#32;__c1,&#32;<emphasis role="keyword">const</emphasis>&#32;int_type&amp;&#32;__c2)&#32;_GLIBCXX_NOEXCEPT
714 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__c1&#32;==&#32;__c2;&#32;}
715 
716 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;int_type
717 &#32;&#32;&#32;&#32;&#32;&#32;eof()&#32;_GLIBCXX_NOEXCEPT
718 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>int_type<emphasis role="keyword">&gt;</emphasis>(-1);&#32;}
719 
720 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;int_type
721 &#32;&#32;&#32;&#32;&#32;&#32;not_eof(<emphasis role="keyword">const</emphasis>&#32;int_type&amp;&#32;__c)&#32;_GLIBCXX_NOEXCEPT
722 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;eq_int_type(__c,&#32;eof())&#32;?&#32;0&#32;:&#32;__c;&#32;}
723 &#32;&#32;&#32;&#32;};
724 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//_GLIBCXX_USE_CHAR8_T</emphasis>
725 
726 _GLIBCXX_END_NAMESPACE_VERSION
727 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
728 
729 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
730 
731 <emphasis role="preprocessor">#include&#32;&lt;cstdint&gt;</emphasis>
732 
733 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
734 {
735 _GLIBCXX_BEGIN_NAMESPACE_VERSION
736 
737 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
738 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>char_traits&lt;char16_t&gt;
739 &#32;&#32;&#32;&#32;{
740 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">char16_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char_type;
741 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_C99_STDINT_TR1</emphasis>
742 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a4f3f6e6631cb4aaeadf1c59ff597b2fb">uint_least16_t</link>&#32;&#32;&#32;&#32;int_type;
743 <emphasis role="preprocessor">#elif&#32;defined&#32;__UINT_LEAST16_TYPE__</emphasis>
744 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__UINT_LEAST16_TYPE__&#32;&#32;&#32;&#32;&#32;int_type;
745 <emphasis role="preprocessor">#else</emphasis>
746 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;make_unsigned&lt;char16_t&gt;::type&#32;int_type;
747 <emphasis role="preprocessor">#endif</emphasis>
748 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;streamoff&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;off_type;
749 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;u16streampos&#32;&#32;&#32;&#32;&#32;&#32;pos_type;
750 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;mbstate_t&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;state_type;
751 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
752 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>comparison_category&#32;=&#32;strong_ordering;
753 <emphasis role="preprocessor">#endif</emphasis>
754 
755 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">void</emphasis>
756 &#32;&#32;&#32;&#32;&#32;&#32;assign(char_type&amp;&#32;__c1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c2)&#32;<emphasis role="keyword">noexcept</emphasis>
757 &#32;&#32;&#32;&#32;&#32;&#32;{
758 <emphasis role="preprocessor">#if&#32;__cpp_constexpr_dynamic_alloc</emphasis>
759 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
760 &#32;&#32;&#32;&#32;&#32;&#32;std::construct_at(__builtin_addressof(__c1),&#32;__c2);
761 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
762 <emphasis role="preprocessor">#endif</emphasis>
763 &#32;&#32;&#32;&#32;__c1&#32;=&#32;__c2;
764 &#32;&#32;&#32;&#32;&#32;&#32;}
765 
766 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
767 &#32;&#32;&#32;&#32;&#32;&#32;eq(<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c2)&#32;<emphasis role="keyword">noexcept</emphasis>
768 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__c1&#32;==&#32;__c2;&#32;}
769 
770 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
771 &#32;&#32;&#32;&#32;&#32;&#32;lt(<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c2)&#32;<emphasis role="keyword">noexcept</emphasis>
772 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__c1&#32;&lt;&#32;__c2;&#32;}
773 
774 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">int</emphasis>
775 &#32;&#32;&#32;&#32;&#32;&#32;compare(<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s2,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n)
776 &#32;&#32;&#32;&#32;&#32;&#32;{
777 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__n;&#32;++__i)
778 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lt(__s1[__i],&#32;__s2[__i]))
779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
780 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lt(__s2[__i],&#32;__s1[__i]))
781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
782 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
783 &#32;&#32;&#32;&#32;&#32;&#32;}
784 
785 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">size_t</emphasis>
786 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelength">length</link>(<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s)
787 &#32;&#32;&#32;&#32;&#32;&#32;{
788 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__i&#32;=&#32;0;
789 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!eq(__s[__i],&#32;char_type()))
790 &#32;&#32;&#32;&#32;&#32;&#32;++__i;
791 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__i;
792 &#32;&#32;&#32;&#32;&#32;&#32;}
793 
794 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*
795 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__a)
796 &#32;&#32;&#32;&#32;&#32;&#32;{
797 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__n;&#32;++__i)
798 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(eq(__s[__i],&#32;__a))
799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s&#32;+&#32;__i;
800 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
801 &#32;&#32;&#32;&#32;&#32;&#32;}
802 
803 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;char_type*
804 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(char_type*&#32;__s1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s2,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n)
805 &#32;&#32;&#32;&#32;&#32;&#32;{
806 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;0)
807 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s1;
808 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;202002L</emphasis>
809 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
810 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::char_traits&lt;char_type&gt;::move(__s1,&#32;__s2,&#32;__n);
811 <emphasis role="preprocessor">#endif</emphasis>
812 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keyword">static_cast&lt;</emphasis>char_type*<emphasis role="keyword">&gt;</emphasis>
813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__builtin_memmove(__s1,&#32;__s2,&#32;__n&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(char_type))));
814 &#32;&#32;&#32;&#32;&#32;&#32;}
815 
816 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;char_type*
817 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">copy</link>(char_type*&#32;__s1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s2,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n)
818 &#32;&#32;&#32;&#32;&#32;&#32;{
819 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;0)
820 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s1;
821 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;202002L</emphasis>
822 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
823 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::char_traits&lt;char_type&gt;::copy(__s1,&#32;__s2,&#32;__n);
824 <emphasis role="preprocessor">#endif</emphasis>
825 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keyword">static_cast&lt;</emphasis>char_type*<emphasis role="keyword">&gt;</emphasis>
826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__builtin_memcpy(__s1,&#32;__s2,&#32;__n&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(char_type))));
827 &#32;&#32;&#32;&#32;&#32;&#32;}
828 
829 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;char_type*
830 &#32;&#32;&#32;&#32;&#32;&#32;assign(char_type*&#32;__s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n,&#32;char_type&#32;__a)
831 &#32;&#32;&#32;&#32;&#32;&#32;{
832 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__n;&#32;++__i)
833 &#32;&#32;&#32;&#32;&#32;&#32;assign(__s[__i],&#32;__a);
834 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s;
835 &#32;&#32;&#32;&#32;&#32;&#32;}
836 
837 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;char_type
838 &#32;&#32;&#32;&#32;&#32;&#32;to_char_type(<emphasis role="keyword">const</emphasis>&#32;int_type&amp;&#32;__c)&#32;<emphasis role="keyword">noexcept</emphasis>
839 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;char_type(__c);&#32;}
840 
841 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;int_type
842 &#32;&#32;&#32;&#32;&#32;&#32;to_int_type(<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c)&#32;<emphasis role="keyword">noexcept</emphasis>
843 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__c&#32;==&#32;eof()&#32;?&#32;int_type(0xfffd)&#32;:&#32;int_type(__c);&#32;}
844 
845 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
846 &#32;&#32;&#32;&#32;&#32;&#32;eq_int_type(<emphasis role="keyword">const</emphasis>&#32;int_type&amp;&#32;__c1,&#32;<emphasis role="keyword">const</emphasis>&#32;int_type&amp;&#32;__c2)&#32;<emphasis role="keyword">noexcept</emphasis>
847 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__c1&#32;==&#32;__c2;&#32;}
848 
849 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;int_type
850 &#32;&#32;&#32;&#32;&#32;&#32;eof()&#32;noexcept
851 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>int_type<emphasis role="keyword">&gt;</emphasis>(-1);&#32;}
852 
853 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;int_type
854 &#32;&#32;&#32;&#32;&#32;&#32;not_eof(<emphasis role="keyword">const</emphasis>&#32;int_type&amp;&#32;__c)&#32;<emphasis role="keyword">noexcept</emphasis>
855 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;eq_int_type(__c,&#32;eof())&#32;?&#32;0&#32;:&#32;__c;&#32;}
856 &#32;&#32;&#32;&#32;};
857 
858 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
859 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>char_traits&lt;char32_t&gt;
860 &#32;&#32;&#32;&#32;{
861 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">char32_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char_type;
862 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_C99_STDINT_TR1</emphasis>
863 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ac0af81082969e5e3f4d939b1de7002ac">uint_least32_t</link>&#32;&#32;&#32;&#32;int_type;
864 <emphasis role="preprocessor">#elif&#32;defined&#32;__UINT_LEAST32_TYPE__</emphasis>
865 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__UINT_LEAST32_TYPE__&#32;&#32;&#32;&#32;&#32;int_type;
866 <emphasis role="preprocessor">#else</emphasis>
867 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;make_unsigned&lt;char32_t&gt;::type&#32;int_type;
868 <emphasis role="preprocessor">#endif</emphasis>
869 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;streamoff&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;off_type;
870 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;u32streampos&#32;&#32;&#32;&#32;&#32;&#32;pos_type;
871 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;mbstate_t&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;state_type;
872 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
873 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>comparison_category&#32;=&#32;strong_ordering;
874 <emphasis role="preprocessor">#endif</emphasis>
875 
876 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">void</emphasis>
877 &#32;&#32;&#32;&#32;&#32;&#32;assign(char_type&amp;&#32;__c1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c2)&#32;<emphasis role="keyword">noexcept</emphasis>
878 &#32;&#32;&#32;&#32;&#32;&#32;{
879 <emphasis role="preprocessor">#if&#32;__cpp_constexpr_dynamic_alloc</emphasis>
880 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
881 &#32;&#32;&#32;&#32;&#32;&#32;std::construct_at(__builtin_addressof(__c1),&#32;__c2);
882 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
883 <emphasis role="preprocessor">#endif</emphasis>
884 &#32;&#32;&#32;&#32;__c1&#32;=&#32;__c2;
885 &#32;&#32;&#32;&#32;&#32;&#32;}
886 
887 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
888 &#32;&#32;&#32;&#32;&#32;&#32;eq(<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c2)&#32;<emphasis role="keyword">noexcept</emphasis>
889 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__c1&#32;==&#32;__c2;&#32;}
890 
891 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
892 &#32;&#32;&#32;&#32;&#32;&#32;lt(<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c2)&#32;<emphasis role="keyword">noexcept</emphasis>
893 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__c1&#32;&lt;&#32;__c2;&#32;}
894 
895 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">int</emphasis>
896 &#32;&#32;&#32;&#32;&#32;&#32;compare(<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s2,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n)
897 &#32;&#32;&#32;&#32;&#32;&#32;{
898 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__n;&#32;++__i)
899 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lt(__s1[__i],&#32;__s2[__i]))
900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
901 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lt(__s2[__i],&#32;__s1[__i]))
902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
903 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
904 &#32;&#32;&#32;&#32;&#32;&#32;}
905 
906 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">size_t</emphasis>
907 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelength">length</link>(<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s)
908 &#32;&#32;&#32;&#32;&#32;&#32;{
909 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__i&#32;=&#32;0;
910 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!eq(__s[__i],&#32;char_type()))
911 &#32;&#32;&#32;&#32;&#32;&#32;++__i;
912 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__i;
913 &#32;&#32;&#32;&#32;&#32;&#32;}
914 
915 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*
916 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__a)
917 &#32;&#32;&#32;&#32;&#32;&#32;{
918 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__n;&#32;++__i)
919 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(eq(__s[__i],&#32;__a))
920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s&#32;+&#32;__i;
921 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
922 &#32;&#32;&#32;&#32;&#32;&#32;}
923 
924 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;char_type*
925 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(char_type*&#32;__s1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s2,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n)
926 &#32;&#32;&#32;&#32;&#32;&#32;{
927 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;0)
928 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s1;
929 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;202002L</emphasis>
930 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
931 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::char_traits&lt;char_type&gt;::move(__s1,&#32;__s2,&#32;__n);
932 <emphasis role="preprocessor">#endif</emphasis>
933 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keyword">static_cast&lt;</emphasis>char_type*<emphasis role="keyword">&gt;</emphasis>
934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__builtin_memmove(__s1,&#32;__s2,&#32;__n&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(char_type))));
935 &#32;&#32;&#32;&#32;&#32;&#32;}
936 
937 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;char_type*
938 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">copy</link>(char_type*&#32;__s1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s2,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n)
939 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;
940 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;0)
941 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s1;
942 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;202002L</emphasis>
943 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
944 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::char_traits&lt;char_type&gt;::copy(__s1,&#32;__s2,&#32;__n);
945 <emphasis role="preprocessor">#endif</emphasis>
946 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keyword">static_cast&lt;</emphasis>char_type*<emphasis role="keyword">&gt;</emphasis>
947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__builtin_memcpy(__s1,&#32;__s2,&#32;__n&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(char_type))));
948 &#32;&#32;&#32;&#32;&#32;&#32;}
949 
950 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;char_type*
951 &#32;&#32;&#32;&#32;&#32;&#32;assign(char_type*&#32;__s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n,&#32;char_type&#32;__a)
952 &#32;&#32;&#32;&#32;&#32;&#32;{
953 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__n;&#32;++__i)
954 &#32;&#32;&#32;&#32;&#32;&#32;assign(__s[__i],&#32;__a);
955 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s;
956 &#32;&#32;&#32;&#32;&#32;&#32;}
957 
958 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;char_type
959 &#32;&#32;&#32;&#32;&#32;&#32;to_char_type(<emphasis role="keyword">const</emphasis>&#32;int_type&amp;&#32;__c)&#32;<emphasis role="keyword">noexcept</emphasis>
960 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;char_type(__c);&#32;}
961 
962 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;int_type
963 &#32;&#32;&#32;&#32;&#32;&#32;to_int_type(<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c)&#32;<emphasis role="keyword">noexcept</emphasis>
964 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;int_type(__c);&#32;}
965 
966 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
967 &#32;&#32;&#32;&#32;&#32;&#32;eq_int_type(<emphasis role="keyword">const</emphasis>&#32;int_type&amp;&#32;__c1,&#32;<emphasis role="keyword">const</emphasis>&#32;int_type&amp;&#32;__c2)&#32;<emphasis role="keyword">noexcept</emphasis>
968 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__c1&#32;==&#32;__c2;&#32;}
969 
970 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;int_type
971 &#32;&#32;&#32;&#32;&#32;&#32;eof()&#32;noexcept
972 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>int_type<emphasis role="keyword">&gt;</emphasis>(-1);&#32;}
973 
974 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;int_type
975 &#32;&#32;&#32;&#32;&#32;&#32;not_eof(<emphasis role="keyword">const</emphasis>&#32;int_type&amp;&#32;__c)&#32;<emphasis role="keyword">noexcept</emphasis>
976 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;eq_int_type(__c,&#32;eof())&#32;?&#32;0&#32;:&#32;__c;&#32;}
977 &#32;&#32;&#32;&#32;};
978 
979 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
980 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>__detail
981 &#32;&#32;{
982 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ChTraits&gt;
983 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
984 &#32;&#32;&#32;&#32;&#32;&#32;__char_traits_cmp_cat(<emphasis role="keywordtype">int</emphasis>&#32;__cmp)&#32;<emphasis role="keyword">noexcept</emphasis>
985 &#32;&#32;&#32;&#32;&#32;&#32;{
986 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">requires</emphasis>&#32;{&#32;<emphasis role="keyword">typename</emphasis>&#32;_ChTraits::comparison_category;&#32;})
987 &#32;&#32;&#32;&#32;&#32;&#32;{
988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Cat&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_ChTraits::comparison_category;
989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(&#32;!is_void_v&lt;common_comparison_category_t&lt;_Cat&gt;&gt;&#32;);
990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Cat<emphasis role="keyword">&gt;</emphasis>(__cmp&#32;&lt;=&gt;&#32;0);
991 &#32;&#32;&#32;&#32;&#32;&#32;}
992 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
993 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>weak_ordering<emphasis role="keyword">&gt;</emphasis>(__cmp&#32;&lt;=&gt;&#32;0);
994 &#32;&#32;&#32;&#32;&#32;&#32;}
995 &#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;__detail</emphasis>
996 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++20</emphasis>
997 
998 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
999 
1000 _GLIBCXX_END_NAMESPACE_VERSION
1001 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
1002 
1003 <emphasis role="preprocessor">#endif&#32;&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
1004 
1005 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_CHAR_TRAITS_H</emphasis>
</programlisting></section>
