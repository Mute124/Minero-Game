<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class____gnu__debug_1_1___safe__container" xml:lang="en-US">
<title>__gnu_debug::_Safe_container&lt; _SafeContainer, _Alloc, _SafeBase, _IsCxx11AllocatorAware &gt; Class Template Reference</title>
<indexterm><primary>__gnu_debug::_Safe_container&lt; _SafeContainer, _Alloc, _SafeBase, _IsCxx11AllocatorAware &gt;</primary></indexterm>
<para>

<para>Safe class dealing with some allocator dependent operations. </para>
 
</para>
<para>
<computeroutput>#include &lt;safe_container.h&gt;</computeroutput>
</para>
Inheritance diagram for __gnu_debug::_Safe_container&lt; _SafeContainer, _Alloc, _SafeBase, _IsCxx11AllocatorAware &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__container__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for __gnu_debug::_Safe_container&lt; _SafeContainer, _Alloc, _SafeBase, _IsCxx11AllocatorAware &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__container__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__container">_Safe_container</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__container_1acae540a4cfaab67ae885640f76854c90">operator=</link> (const <link linkend="_class____gnu__debug_1_1___safe__container">_Safe_container</link> &amp;) _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__container">_Safe_container</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__container_1acae540a4cfaab67ae885640f76854c90">operator=</link> (const <link linkend="_class____gnu__debug_1_1___safe__container">_Safe_container</link> &amp;) _GLIBCXX_NOEXCEPT</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename _SafeContainer, typename _Alloc, template&lt; typename &gt; class _SafeBase, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> _IsCxx11AllocatorAware = true&gt;<?linebreak?>class __gnu_debug::_Safe_container&lt; _SafeContainer, _Alloc, _SafeBase, _IsCxx11AllocatorAware &gt;</title></simplesect>

<para>Safe class dealing with some allocator dependent operations. </para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class____gnu__debug_1_1___safe__container_1acae540a4cfaab67ae885640f76854c90"/><section>
    <title>operator=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>__gnu_debug::_Safe_container&lt; _SafeContainer, _Alloc, _SafeBase, _IsCxx11AllocatorAware &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_container&lt; _SafeContainer, _Alloc, _SafeBase, _IsCxx11AllocatorAware &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename _SafeContainer , typename _Alloc , template&lt; typename &gt; class _SafeBase, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> _IsCxx11AllocatorAware = true&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__container">_Safe_container</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__container">__gnu_debug::_Safe_container</link>&lt; _SafeContainer, _Alloc, _SafeBase, _IsCxx11AllocatorAware &gt;::operator= (const <link linkend="_class____gnu__debug_1_1___safe__container">_Safe_container</link>&lt; _SafeContainer, _Alloc, _SafeBase, _IsCxx11AllocatorAware &gt; &amp; )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__container_1acae540a4cfaab67ae885640f76854c90"/><section>
    <title>operator=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>__gnu_debug::_Safe_container&lt; _SafeContainer, _Alloc, _SafeBase, _IsCxx11AllocatorAware &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_container&lt; _SafeContainer, _Alloc, _SafeBase, _IsCxx11AllocatorAware &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename _SafeContainer , typename _Alloc , template&lt; typename &gt; class _SafeBase, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> _IsCxx11AllocatorAware = true&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__container">_Safe_container</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__container">__gnu_debug::_Safe_container</link>&lt; _SafeContainer, _Alloc, _SafeBase, _IsCxx11AllocatorAware &gt;::operator= (const <link linkend="_class____gnu__debug_1_1___safe__container">_Safe_container</link>&lt; _SafeContainer, _Alloc, _SafeBase, _IsCxx11AllocatorAware &gt; &amp; )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following files:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/debug/<link linkend="_lib_2include_2c_09_09_2debug_2safe__container_8h">safe_container.h</link>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/debug/<link linkend="__old_2_classes_2lib_2include_2c_09_09_2debug_2safe__container_8h">safe_container.h</link></section>
</section>
