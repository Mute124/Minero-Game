<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2experimental_2bits_2simd__x86_8h_source" xml:lang="en-US">
<title>simd_x86.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/experimental/bits/simd_x86.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Simd&#32;x86&#32;specific&#32;implementations&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2020-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_EXPERIMENTAL_SIMD_X86_H_</emphasis>
26 <emphasis role="preprocessor">#define&#32;_GLIBCXX_EXPERIMENTAL_SIMD_X86_H_</emphasis>
27 
28 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
29 
30 <emphasis role="preprocessor">#if&#32;!_GLIBCXX_SIMD_X86INTRIN</emphasis>
31 <emphasis role="preprocessor">#error&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
32 <emphasis role="preprocessor">&#32;&#32;&quot;simd_x86.h&#32;may&#32;only&#32;be&#32;included&#32;when&#32;MMX&#32;or&#32;SSE&#32;on&#32;x86(_64)&#32;are&#32;available&quot;</emphasis>
33 <emphasis role="preprocessor">#endif</emphasis>
34 
35 _GLIBCXX_SIMD_BEGIN_NAMESPACE
36 
37 <emphasis role="comment">//&#32;__to_masktype&#32;{{{</emphasis>
38 <emphasis role="comment">//&#32;Given&#32;&lt;T,&#32;N&gt;&#32;return&#32;&lt;__int_for_sizeof_t&lt;T&gt;,&#32;N&gt;.&#32;For&#32;_SimdWrapper&#32;and</emphasis>
39 <emphasis role="comment">//&#32;__vector_type_t.</emphasis>
40 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
41 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;__int_for_sizeof_t&lt;_Tp&gt;,&#32;_Np&gt;
42 &#32;&#32;__to_masktype(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x)
43 &#32;&#32;{
44 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__vector_type_t&lt;__int_for_sizeof_t&lt;_Tp&gt;,&#32;_Np<emphasis role="keyword">&gt;</emphasis>&gt;(
45 &#32;&#32;&#32;&#32;&#32;&#32;__x._M_data);
46 &#32;&#32;}
47 
48 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_TV,
49 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT
50 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;enable_if_t&lt;__is_vector_type_v&lt;_TV&gt;,&#32;_VectorTraits&lt;_TV&gt;&gt;,
51 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&#32;=&#32;__int_for_sizeof_t&lt;typename&#32;_TVT::value_type&gt;&gt;
52 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__vector_type_t&lt;_Up,&#32;_TVT::_S_full_size&gt;
53 &#32;&#32;__to_masktype(_TV&#32;__x)
54 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__vector_type_t&lt;_Up,&#32;_TVT::_S_full_size&gt;<emphasis role="keyword">&gt;</emphasis>(__x);&#32;}
55 
56 <emphasis role="comment">//&#32;}}}</emphasis>
57 <emphasis role="comment">//&#32;__interleave128_lo&#32;{{{</emphasis>
58 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ap,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Bp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&#32;=&#32;common_type_t&lt;_Ap,&#32;_Bp&gt;,
59 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Trait&#32;=&#32;_VectorTraits&lt;_Tp&gt;&gt;
60 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp
61 &#32;&#32;__interleave128_lo(<emphasis role="keyword">const</emphasis>&#32;_Ap&amp;&#32;__av,&#32;<emphasis role="keyword">const</emphasis>&#32;_Bp&amp;&#32;__bv)
62 &#32;&#32;{
63 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&#32;__a(__av);
64 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&#32;__b(__bv);
65 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;16&#32;&amp;&amp;&#32;_Trait::_S_full_size&#32;==&#32;2)
66 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Tp{__a[0],&#32;__b[0]};
67 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;16&#32;&amp;&amp;&#32;_Trait::_S_full_size&#32;==&#32;4)
68 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Tp{__a[0],&#32;__b[0],&#32;__a[1],&#32;__b[1]};
69 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;16&#32;&amp;&amp;&#32;_Trait::_S_full_size&#32;==&#32;8)
70 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Tp{__a[0],&#32;__b[0],&#32;__a[1],&#32;__b[1],
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a[2],&#32;__b[2],&#32;__a[3],&#32;__b[3]};
72 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;16&#32;&amp;&amp;&#32;_Trait::_S_full_size&#32;==&#32;16)
73 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Tp{__a[0],&#32;__b[0],&#32;__a[1],&#32;__b[1],&#32;__a[2],&#32;__b[2],
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a[3],&#32;__b[3],&#32;__a[4],&#32;__b[4],&#32;__a[5],&#32;__b[5],
75 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a[6],&#32;__b[6],&#32;__a[7],&#32;__b[7]};
76 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;32&#32;&amp;&amp;&#32;_Trait::_S_full_size&#32;==&#32;4)
77 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Tp{__a[0],&#32;__b[0],&#32;__a[2],&#32;__b[2]};
78 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;32&#32;&amp;&amp;&#32;_Trait::_S_full_size&#32;==&#32;8)
79 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Tp{__a[0],&#32;__b[0],&#32;__a[1],&#32;__b[1],
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a[4],&#32;__b[4],&#32;__a[5],&#32;__b[5]};
81 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;32&#32;&amp;&amp;&#32;_Trait::_S_full_size&#32;==&#32;16)
82 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Tp{__a[0],&#32;&#32;__b[0],&#32;&#32;__a[1],&#32;&#32;__b[1],&#32;__a[2],&#32;__b[2],
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a[3],&#32;&#32;__b[3],&#32;&#32;__a[8],&#32;&#32;__b[8],&#32;__a[9],&#32;__b[9],
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a[10],&#32;__b[10],&#32;__a[11],&#32;__b[11]};
85 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;32&#32;&amp;&amp;&#32;_Trait::_S_full_size&#32;==&#32;32)
86 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Tp{__a[0],&#32;&#32;__b[0],&#32;&#32;__a[1],&#32;&#32;__b[1],&#32;&#32;__a[2],&#32;&#32;__b[2],&#32;&#32;__a[3],
87 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__b[3],&#32;&#32;__a[4],&#32;&#32;__b[4],&#32;&#32;__a[5],&#32;&#32;__b[5],&#32;&#32;__a[6],&#32;&#32;__b[6],
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a[7],&#32;&#32;__b[7],&#32;&#32;__a[16],&#32;__b[16],&#32;__a[17],&#32;__b[17],&#32;__a[18],
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__b[18],&#32;__a[19],&#32;__b[19],&#32;__a[20],&#32;__b[20],&#32;__a[21],&#32;__b[21],
90 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a[22],&#32;__b[22],&#32;__a[23],&#32;__b[23]};
91 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;64&#32;&amp;&amp;&#32;_Trait::_S_full_size&#32;==&#32;8)
92 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Tp{__a[0],&#32;__b[0],&#32;__a[2],&#32;__b[2],
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a[4],&#32;__b[4],&#32;__a[6],&#32;__b[6]};
94 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;64&#32;&amp;&amp;&#32;_Trait::_S_full_size&#32;==&#32;16)
95 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Tp{__a[0],&#32;&#32;__b[0],&#32;&#32;__a[1],&#32;&#32;__b[1],&#32;__a[4],&#32;__b[4],
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a[5],&#32;&#32;__b[5],&#32;&#32;__a[8],&#32;&#32;__b[8],&#32;__a[9],&#32;__b[9],
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a[12],&#32;__b[12],&#32;__a[13],&#32;__b[13]};
98 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;64&#32;&amp;&amp;&#32;_Trait::_S_full_size&#32;==&#32;32)
99 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Tp{__a[0],&#32;&#32;__b[0],&#32;&#32;__a[1],&#32;&#32;__b[1],&#32;&#32;__a[2],&#32;&#32;__b[2],&#32;&#32;__a[3],
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__b[3],&#32;&#32;__a[8],&#32;&#32;__b[8],&#32;&#32;__a[9],&#32;&#32;__b[9],&#32;&#32;__a[10],&#32;__b[10],
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a[11],&#32;__b[11],&#32;__a[16],&#32;__b[16],&#32;__a[17],&#32;__b[17],&#32;__a[18],
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__b[18],&#32;__a[19],&#32;__b[19],&#32;__a[24],&#32;__b[24],&#32;__a[25],&#32;__b[25],
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a[26],&#32;__b[26],&#32;__a[27],&#32;__b[27]};
104 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;64&#32;&amp;&amp;&#32;_Trait::_S_full_size&#32;==&#32;64)
105 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Tp{__a[0],&#32;&#32;__b[0],&#32;&#32;__a[1],&#32;&#32;__b[1],&#32;&#32;__a[2],&#32;&#32;__b[2],&#32;&#32;__a[3],
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__b[3],&#32;&#32;__a[4],&#32;&#32;__b[4],&#32;&#32;__a[5],&#32;&#32;__b[5],&#32;&#32;__a[6],&#32;&#32;__b[6],
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a[7],&#32;&#32;__b[7],&#32;&#32;__a[16],&#32;__b[16],&#32;__a[17],&#32;__b[17],&#32;__a[18],
108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__b[18],&#32;__a[19],&#32;__b[19],&#32;__a[20],&#32;__b[20],&#32;__a[21],&#32;__b[21],
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a[22],&#32;__b[22],&#32;__a[23],&#32;__b[23],&#32;__a[32],&#32;__b[32],&#32;__a[33],
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__b[33],&#32;__a[34],&#32;__b[34],&#32;__a[35],&#32;__b[35],&#32;__a[36],&#32;__b[36],
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a[37],&#32;__b[37],&#32;__a[38],&#32;__b[38],&#32;__a[39],&#32;__b[39],&#32;__a[48],
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__b[48],&#32;__a[49],&#32;__b[49],&#32;__a[50],&#32;__b[50],&#32;__a[51],&#32;__b[51],
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a[52],&#32;__b[52],&#32;__a[53],&#32;__b[53],&#32;__a[54],&#32;__b[54],&#32;__a[55],
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__b[55]};
115 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
116 &#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
117 &#32;&#32;}
118 
119 <emphasis role="comment">//&#32;}}}</emphasis>
120 <emphasis role="comment">//&#32;__is_zero{{{</emphasis>
121 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT&#32;=&#32;_VectorTraits&lt;_Tp&gt;&gt;
122 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
123 &#32;&#32;__is_zero(_Tp&#32;__a)
124 &#32;&#32;{
125 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__builtin_is_constant_evaluated())
126 &#32;&#32;&#32;&#32;&#32;&#32;{
127 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx)
128 &#32;&#32;&#32;&#32;&#32;&#32;{
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;float,&#32;8&gt;)
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_testz_ps(__a,&#32;__a);
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;double,&#32;4&gt;)
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_testz_pd(__a,&#32;__a);
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;32)
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_testz_si256(__to_intrin(__a),&#32;__to_intrin(__a));
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;float&gt;)
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_testz_ps(__to_intrin(__a),&#32;__to_intrin(__a));
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;double,&#32;2&gt;)
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_testz_pd(__a,&#32;__a);
139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_testz_si128(__to_intrin(__a),&#32;__to_intrin(__a));
141 &#32;&#32;&#32;&#32;&#32;&#32;}
142 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse4_1)
143 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_testz_si128(__intrin_bitcast&lt;__m128i&gt;(__a),
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__intrin_bitcast&lt;__m128i&gt;(__a));
145 &#32;&#32;&#32;&#32;&#32;&#32;}
146 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;&lt;=&#32;8)
147 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__int_for_sizeof_t&lt;_Tp&gt;<emphasis role="keyword">&gt;</emphasis>(__a)&#32;==&#32;0;
148 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
149 &#32;&#32;&#32;&#32;&#32;&#32;{
150 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__b&#32;=&#32;__vector_bitcast&lt;_LLong&gt;(__a);
151 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__b)&#32;==&#32;16)
152 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__b[0]&#32;|&#32;__b[1])&#32;==&#32;0;
153 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__b)&#32;==&#32;32)
154 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__is_zero(__lo128(__b)&#32;|&#32;__hi128(__b));
155 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__b)&#32;==&#32;64)
156 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__is_zero(__lo256(__b)&#32;|&#32;__hi256(__b));
157 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
158 &#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
159 &#32;&#32;&#32;&#32;&#32;&#32;}
160 &#32;&#32;}
161 
162 <emphasis role="comment">//&#32;}}}</emphasis>
163 <emphasis role="comment">//&#32;__movemask{{{</emphasis>
164 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT&#32;=&#32;_VectorTraits&lt;_Tp&gt;&gt;
165 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a6ab244f7fbacae0281519328af87a699">_GLIBCXX_CONST</link>&#32;<emphasis role="keywordtype">int</emphasis>
166 &#32;&#32;__movemask(_Tp&#32;__a)
167 &#32;&#32;{
168 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;32)
169 &#32;&#32;&#32;&#32;&#32;&#32;{
170 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;float&gt;)
171 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_movemask_ps(__to_intrin(__a));
172 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;double&gt;)
173 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_movemask_pd(__to_intrin(__a));
174 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_movemask_epi8(__to_intrin(__a));
176 &#32;&#32;&#32;&#32;&#32;&#32;}
177 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;float&gt;)
178 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_movemask_ps(__to_intrin(__a));
179 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;double&gt;)
180 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_movemask_pd(__to_intrin(__a));
181 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
182 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_movemask_epi8(__to_intrin(__a));
183 &#32;&#32;}
184 
185 <emphasis role="comment">//&#32;}}}</emphasis>
186 <emphasis role="comment">//&#32;__testz{{{</emphasis>
187 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_TI,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT&#32;=&#32;_VectorTraits&lt;_TI&gt;&gt;
188 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a6ab244f7fbacae0281519328af87a699">_GLIBCXX_CONST</link>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
189 &#32;&#32;__testz(_TI&#32;__a,&#32;_TI&#32;__b)
190 &#32;&#32;{
191 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same_v&lt;_TI,&#32;__intrinsic_type_t&lt;<emphasis role="keyword">typename</emphasis>&#32;_TVT::value_type,
192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_TVT::_S_full_size&gt;&gt;);
193 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__builtin_is_constant_evaluated())
194 &#32;&#32;&#32;&#32;&#32;&#32;{
195 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_TI)&#32;==&#32;32)
196 &#32;&#32;&#32;&#32;&#32;&#32;{
197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;float&gt;)
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_testz_ps(__to_intrin(__a),&#32;__to_intrin(__b));
199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;double&gt;)
200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_testz_pd(__to_intrin(__a),&#32;__to_intrin(__b));
201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_testz_si256(__to_intrin(__a),&#32;__to_intrin(__b));
203 &#32;&#32;&#32;&#32;&#32;&#32;}
204 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;float&gt;&#32;&amp;&amp;&#32;__have_avx)
205 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_testz_ps(__to_intrin(__a),&#32;__to_intrin(__b));
206 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;double&gt;&#32;&amp;&amp;&#32;__have_avx)
207 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_testz_pd(__to_intrin(__a),&#32;__to_intrin(__b));
208 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse4_1)
209 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_testz_si128(__intrin_bitcast&lt;__m128i&gt;(__to_intrin(__a)),
210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__intrin_bitcast&lt;__m128i&gt;(__to_intrin(__b)));
211 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
212 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__movemask(0&#32;==&#32;__and(__a,&#32;__b))&#32;!=&#32;0;
213 &#32;&#32;&#32;&#32;&#32;&#32;}
214 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
215 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__is_zero(__and(__a,&#32;__b));
216 &#32;&#32;}
217 
218 <emphasis role="comment">//&#32;}}}</emphasis>
219 <emphasis role="comment">//&#32;__testc{{{</emphasis>
220 <emphasis role="comment">//&#32;requires&#32;SSE4.1&#32;or&#32;above</emphasis>
221 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_TI,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT&#32;=&#32;_VectorTraits&lt;_TI&gt;&gt;
222 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a6ab244f7fbacae0281519328af87a699">_GLIBCXX_CONST</link>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
223 &#32;&#32;__testc(_TI&#32;__a,&#32;_TI&#32;__b)
224 &#32;&#32;{
225 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same_v&lt;_TI,&#32;__intrinsic_type_t&lt;<emphasis role="keyword">typename</emphasis>&#32;_TVT::value_type,
226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_TVT::_S_full_size&gt;&gt;);
227 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_is_constant_evaluated())
228 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__is_zero(__andnot(__a,&#32;__b));
229 
230 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_TI)&#32;==&#32;32)
231 &#32;&#32;&#32;&#32;&#32;&#32;{
232 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;float&gt;)
233 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_testc_ps(__a,&#32;__b);
234 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;double&gt;)
235 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_testc_pd(__a,&#32;__b);
236 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
237 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_testc_si256(__to_intrin(__a),&#32;__to_intrin(__b));
238 &#32;&#32;&#32;&#32;&#32;&#32;}
239 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;float&gt;&#32;&amp;&amp;&#32;__have_avx)
240 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_testc_ps(__to_intrin(__a),&#32;__to_intrin(__b));
241 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;double&gt;&#32;&amp;&amp;&#32;__have_avx)
242 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_testc_pd(__to_intrin(__a),&#32;__to_intrin(__b));
243 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
244 &#32;&#32;&#32;&#32;&#32;&#32;{
245 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same_v&lt;_TI,&#32;_TI&gt;&#32;&amp;&amp;&#32;__have_sse4_1);
246 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_testc_si128(__intrin_bitcast&lt;__m128i&gt;(__to_intrin(__a)),
247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__intrin_bitcast&lt;__m128i&gt;(__to_intrin(__b)));
248 &#32;&#32;&#32;&#32;&#32;&#32;}
249 &#32;&#32;}
250 
251 <emphasis role="comment">//&#32;}}}</emphasis>
252 <emphasis role="comment">//&#32;__testnzc{{{</emphasis>
253 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_TI,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT&#32;=&#32;_VectorTraits&lt;_TI&gt;&gt;
254 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a6ab244f7fbacae0281519328af87a699">_GLIBCXX_CONST</link>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
255 &#32;&#32;__testnzc(_TI&#32;__a,&#32;_TI&#32;__b)
256 &#32;&#32;{
257 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same_v&lt;_TI,&#32;__intrinsic_type_t&lt;<emphasis role="keyword">typename</emphasis>&#32;_TVT::value_type,
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_TVT::_S_full_size&gt;&gt;);
259 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__builtin_is_constant_evaluated())
260 &#32;&#32;&#32;&#32;&#32;&#32;{
261 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_TI)&#32;==&#32;32)
262 &#32;&#32;&#32;&#32;&#32;&#32;{
263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;float&gt;)
264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_testnzc_ps(__a,&#32;__b);
265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;double&gt;)
266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_testnzc_pd(__a,&#32;__b);
267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_testnzc_si256(__to_intrin(__a),&#32;__to_intrin(__b));
269 &#32;&#32;&#32;&#32;&#32;&#32;}
270 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;float&gt;&#32;&amp;&amp;&#32;__have_avx)
271 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_testnzc_ps(__to_intrin(__a),&#32;__to_intrin(__b));
272 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;double&gt;&#32;&amp;&amp;&#32;__have_avx)
273 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_testnzc_pd(__to_intrin(__a),&#32;__to_intrin(__b));
274 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse4_1)
275 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_testnzc_si128(__intrin_bitcast&lt;__m128i&gt;(__to_intrin(__a)),
276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__intrin_bitcast&lt;__m128i&gt;(__to_intrin(__b)));
277 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
278 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__movemask(0&#32;==&#32;__and(__a,&#32;__b))&#32;==&#32;0
279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__movemask(0&#32;==&#32;__andnot(__a,&#32;__b))&#32;==&#32;0;
280 &#32;&#32;&#32;&#32;&#32;&#32;}
281 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
282 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__is_zero(__and(__a,&#32;__b))&#32;||&#32;__is_zero(__andnot(__a,&#32;__b)));
283 &#32;&#32;}
284 
285 <emphasis role="comment">//&#32;}}}</emphasis>
286 <emphasis role="comment">//&#32;__xzyw{{{</emphasis>
287 <emphasis role="comment">//&#32;shuffles&#32;the&#32;complete&#32;vector,&#32;swapping&#32;the&#32;inner&#32;two&#32;quarters.&#32;Often&#32;useful</emphasis>
288 <emphasis role="comment">//&#32;for&#32;AVX&#32;for&#32;fixing&#32;up&#32;a&#32;shuffle&#32;result.</emphasis>
289 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT&#32;=&#32;_VectorTraits&lt;_Tp&gt;&gt;
290 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_Tp
291 &#32;&#32;__xzyw(_Tp&#32;__a)
292 &#32;&#32;{
293 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;16)
294 &#32;&#32;&#32;&#32;&#32;&#32;{
295 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__x&#32;=&#32;__vector_bitcast&lt;conditional_t&lt;
296 &#32;&#32;&#32;&#32;&#32;&#32;is_floating_point_v&lt;typename&#32;_TVT::value_type&gt;,&#32;float,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&gt;(__a);
297 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(
298 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(__x){__x[0],&#32;__x[2],&#32;__x[1],&#32;__x[3]});
299 &#32;&#32;&#32;&#32;&#32;&#32;}
300 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;32)
301 &#32;&#32;&#32;&#32;&#32;&#32;{
302 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__x&#32;=&#32;__vector_bitcast&lt;conditional_t&lt;
303 &#32;&#32;&#32;&#32;&#32;&#32;is_floating_point_v&lt;typename&#32;_TVT::value_type&gt;,&#32;double,&#32;_LLong&gt;&gt;(__a);
304 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(
305 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(__x){__x[0],&#32;__x[2],&#32;__x[1],&#32;__x[3]});
306 &#32;&#32;&#32;&#32;&#32;&#32;}
307 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;64)
308 &#32;&#32;&#32;&#32;&#32;&#32;{
309 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__x&#32;=&#32;__vector_bitcast&lt;conditional_t&lt;
310 &#32;&#32;&#32;&#32;&#32;&#32;is_floating_point_v&lt;typename&#32;_TVT::value_type&gt;,&#32;double,&#32;_LLong&gt;&gt;(__a);
311 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">decltype</emphasis>(__x){__x[0],&#32;__x[1],&#32;__x[4],
312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x[5],&#32;__x[2],&#32;__x[3],
313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x[6],&#32;__x[7]});
314 &#32;&#32;&#32;&#32;&#32;&#32;}
315 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
316 &#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
317 &#32;&#32;}
318 
319 <emphasis role="comment">//&#32;}}}</emphasis>
320 <emphasis role="comment">//&#32;__maskload_epi32{{{</emphasis>
321 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
322 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">auto</emphasis>
323 &#32;&#32;__maskload_epi32(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>*&#32;__ptr,&#32;_Tp&#32;__k)
324 &#32;&#32;{
325 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__k)&#32;==&#32;16)
326 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_maskload_epi32(__ptr,&#32;__k);
327 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
328 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_maskload_epi32(__ptr,&#32;__k);
329 &#32;&#32;}
330 
331 <emphasis role="comment">//&#32;}}}</emphasis>
332 <emphasis role="comment">//&#32;__maskload_epi64{{{</emphasis>
333 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
334 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">auto</emphasis>
335 &#32;&#32;__maskload_epi64(<emphasis role="keyword">const</emphasis>&#32;_LLong*&#32;__ptr,&#32;_Tp&#32;__k)
336 &#32;&#32;{
337 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__k)&#32;==&#32;16)
338 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_maskload_epi64(__ptr,&#32;__k);
339 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
340 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_maskload_epi64(__ptr,&#32;__k);
341 &#32;&#32;}
342 
343 <emphasis role="comment">//&#32;}}}</emphasis>
344 <emphasis role="comment">//&#32;__maskload_ps{{{</emphasis>
345 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
346 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">auto</emphasis>
347 &#32;&#32;__maskload_ps(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>*&#32;__ptr,&#32;_Tp&#32;__k)
348 &#32;&#32;{
349 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__k)&#32;==&#32;16)
350 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_maskload_ps(__ptr,&#32;__k);
351 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
352 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_maskload_ps(__ptr,&#32;__k);
353 &#32;&#32;}
354 
355 <emphasis role="comment">//&#32;}}}</emphasis>
356 <emphasis role="comment">//&#32;__maskload_pd{{{</emphasis>
357 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
358 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">auto</emphasis>
359 &#32;&#32;__maskload_pd(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>*&#32;__ptr,&#32;_Tp&#32;__k)
360 &#32;&#32;{
361 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__k)&#32;==&#32;16)
362 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_maskload_pd(__ptr,&#32;__k);
363 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
364 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_maskload_pd(__ptr,&#32;__k);
365 &#32;&#32;}
366 
367 <emphasis role="comment">//&#32;}}}</emphasis>
368 
369 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_SIMD_WORKAROUND_PR85048</emphasis>
370 <emphasis role="preprocessor">#include&#32;&quot;simd_x86_conversions.h&quot;</emphasis>
371 <emphasis role="preprocessor">#endif</emphasis>
372 
373 <emphasis role="comment">//&#32;ISA&#32;&amp;&#32;type&#32;detection&#32;{{{</emphasis>
374 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
375 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
376 &#32;&#32;__is_sse_ps()
377 &#32;&#32;{
378 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__have_sse
379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_same_v&lt;_Tp,
380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__intrinsic_type_t&lt;_Tp,&#32;_Np&gt;)&#32;==&#32;16;
381 &#32;&#32;}
382 
383 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
384 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
385 &#32;&#32;__is_sse_pd()
386 &#32;&#32;{
387 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__have_sse2
388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_same_v&lt;_Tp,
389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__intrinsic_type_t&lt;_Tp,&#32;_Np&gt;)&#32;==&#32;16;
390 &#32;&#32;}
391 
392 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
393 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
394 &#32;&#32;__is_avx_ps()
395 &#32;&#32;{
396 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__have_avx
397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_same_v&lt;_Tp,
398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__intrinsic_type_t&lt;_Tp,&#32;_Np&gt;)&#32;==&#32;32;
399 &#32;&#32;}
400 
401 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
402 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
403 &#32;&#32;__is_avx_pd()
404 &#32;&#32;{
405 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__have_avx
406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_same_v&lt;_Tp,
407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__intrinsic_type_t&lt;_Tp,&#32;_Np&gt;)&#32;==&#32;32;
408 &#32;&#32;}
409 
410 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
411 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
412 &#32;&#32;__is_avx512_ps()
413 &#32;&#32;{
414 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__have_avx512f
415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_same_v&lt;_Tp,
416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__intrinsic_type_t&lt;_Tp,&#32;_Np&gt;)&#32;==&#32;64;
417 &#32;&#32;}
418 
419 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
420 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
421 &#32;&#32;__is_avx512_pd()
422 &#32;&#32;{
423 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__have_avx512f
424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_same_v&lt;_Tp,
425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__intrinsic_type_t&lt;_Tp,&#32;_Np&gt;)&#32;==&#32;64;
426 &#32;&#32;}
427 
428 <emphasis role="comment">//&#32;}}}</emphasis>
429 <emphasis role="keyword">struct&#32;</emphasis>_MaskImplX86Mixin;
430 
431 <emphasis role="comment">//&#32;_CommonImplX86&#32;{{{</emphasis>
432 <emphasis role="keyword">struct&#32;</emphasis>_CommonImplX86&#32;:&#32;_CommonImplBuiltin
433 {
434 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_SIMD_WORKAROUND_PR85048</emphasis>
435 &#32;&#32;<emphasis role="comment">//&#32;_S_converts_via_decomposition&#32;{{{</emphasis>
436 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_From,&#32;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_ToSize&gt;
437 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_S_converts_via_decomposition()
438 &#32;&#32;&#32;&#32;{
439 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_integral_v&lt;
440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_From&gt;&#32;&amp;&amp;&#32;is_integral_v&lt;_To&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_From)&#32;==&#32;8
441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;_ToSize&#32;==&#32;16)
442 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;2&#32;&amp;&amp;&#32;!__have_ssse3)
443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;(<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;1&#32;&amp;&amp;&#32;!__have_avx512f);
444 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_floating_point_v&lt;_From&gt;&#32;&amp;&amp;&#32;is_integral_v&lt;_To&gt;)
445 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((<emphasis role="keyword">sizeof</emphasis>(_From)&#32;==&#32;4&#32;||&#32;<emphasis role="keyword">sizeof</emphasis>(_From)&#32;==&#32;8)&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;8
446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!__have_avx512dq)
447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;(<emphasis role="keyword">sizeof</emphasis>(_From)&#32;==&#32;8&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;4&#32;&amp;&amp;&#32;!__have_sse4_1
448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;_ToSize&#32;==&#32;16);
449 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(
450 &#32;&#32;&#32;&#32;is_integral_v&lt;_From&gt;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_To&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_From)&#32;==&#32;8
451 &#32;&#32;&#32;&#32;&amp;&amp;&#32;!__have_avx512dq)
452 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;4&#32;&amp;&amp;&#32;_ToSize&#32;==&#32;16)
453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;(<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;8&#32;&amp;&amp;&#32;_ToSize&#32;&lt;&#32;64);
454 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
455 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
456 &#32;&#32;&#32;&#32;}
457 
458 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_From,&#32;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_ToSize&gt;
459 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__converts_via_decomposition_v
460 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;_S_converts_via_decomposition&lt;_From,&#32;_To,&#32;_ToSize&gt;();
461 
462 &#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
463 <emphasis role="preprocessor">#endif</emphasis>
464 &#32;&#32;<emphasis role="comment">//&#32;_S_store&#32;{{{</emphasis>
465 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_CommonImplBuiltin::_S_store;
466 
467 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
468 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;_S_store(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x,
469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*&#32;__addr)
470 &#32;&#32;&#32;&#32;{
471 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Bytes&#32;=&#32;_Np&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp);
472 
473 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;((_Bytes&#32;&amp;&#32;(_Bytes&#32;-&#32;1))&#32;!=&#32;0&#32;&amp;&amp;&#32;__have_avx512bw_vl)
474 &#32;&#32;&#32;&#32;{
475 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__v&#32;=&#32;__to_intrin(__x);
476 
477 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Bytes&#32;&amp;&#32;1)
478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Bytes&#32;&lt;&#32;16)
480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_mask_storeu_epi8(__addr,&#32;0xffffu&#32;&gt;&gt;&#32;(16&#32;-&#32;_Bytes),
481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__intrin_bitcast&lt;__m128i&gt;(__v));
482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Bytes&#32;&lt;&#32;32)
483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_mask_storeu_epi8(__addr,&#32;0xffffffffu&#32;&gt;&gt;&#32;(32&#32;-&#32;_Bytes),
484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__intrin_bitcast&lt;__m256i&gt;(__v));
485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_mask_storeu_epi8(__addr,
487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xffffffffffffffffull&#32;&gt;&gt;&#32;(64&#32;-&#32;_Bytes),
488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__intrin_bitcast&lt;__m512i&gt;(__v));
489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
490 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Bytes&#32;&amp;&#32;2)
491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Bytes&#32;&lt;&#32;16)
493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_mask_storeu_epi16(__addr,&#32;0xffu&#32;&gt;&gt;&#32;(8&#32;-&#32;_Bytes&#32;/&#32;2),
494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__intrin_bitcast&lt;__m128i&gt;(__v));
495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Bytes&#32;&lt;&#32;32)
496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_mask_storeu_epi16(__addr,&#32;0xffffu&#32;&gt;&gt;&#32;(16&#32;-&#32;_Bytes&#32;/&#32;2),
497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__intrin_bitcast&lt;__m256i&gt;(__v));
498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_mask_storeu_epi16(__addr,
500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xffffffffull&#32;&gt;&gt;&#32;(32&#32;-&#32;_Bytes&#32;/&#32;2),
501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__intrin_bitcast&lt;__m512i&gt;(__v));
502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
503 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Bytes&#32;&amp;&#32;4)
504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Bytes&#32;&lt;&#32;16)
506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_mask_storeu_epi32(__addr,&#32;0xfu&#32;&gt;&gt;&#32;(4&#32;-&#32;_Bytes&#32;/&#32;4),
507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__intrin_bitcast&lt;__m128i&gt;(__v));
508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Bytes&#32;&lt;&#32;32)
509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_mask_storeu_epi32(__addr,&#32;0xffu&#32;&gt;&gt;&#32;(8&#32;-&#32;_Bytes&#32;/&#32;4),
510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__intrin_bitcast&lt;__m256i&gt;(__v));
511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_mask_storeu_epi32(__addr,&#32;0xffffull&#32;&gt;&gt;&#32;(16&#32;-&#32;_Bytes&#32;/&#32;4),
513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__intrin_bitcast&lt;__m512i&gt;(__v));
514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
515 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(
518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Bytes&#32;&gt;&#32;16,
519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;_Bytes&#32;&lt;&#32;16&#32;&amp;&amp;&#32;(_Bytes&#32;&amp;&#32;7)&#32;==&#32;0&#32;&amp;&amp;&#32;(_Bytes&#32;&amp;&#32;(_Bytes&#32;&quot;</emphasis>
520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;-&#32;1))&#32;!=&#32;0&#32;is&#32;impossible&quot;</emphasis>);
521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Bytes&#32;&lt;&#32;32)
522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_mask_storeu_epi64(__addr,&#32;0xfu&#32;&gt;&gt;&#32;(4&#32;-&#32;_Bytes&#32;/&#32;8),
523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__intrin_bitcast&lt;__m256i&gt;(__v));
524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_mask_storeu_epi64(__addr,&#32;0xffull&#32;&gt;&gt;&#32;(8&#32;-&#32;_Bytes&#32;/&#32;8),
526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__intrin_bitcast&lt;__m512i&gt;(__v));
527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
528 &#32;&#32;&#32;&#32;}
529 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
530 &#32;&#32;&#32;&#32;_CommonImplBuiltin::_S_store(__x,&#32;__addr);
531 &#32;&#32;&#32;&#32;}
532 
533 &#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
534 &#32;&#32;<emphasis role="comment">//&#32;_S_store_bool_array(_BitMask)&#32;{{{</emphasis>
535 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_Sanitized&gt;
536 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
537 &#32;&#32;&#32;&#32;_S_store_bool_array(<emphasis role="keyword">const</emphasis>&#32;_BitMask&lt;_Np,&#32;_Sanitized&gt;&#32;__x,&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;__mem)
538 &#32;&#32;&#32;&#32;{
539 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw_vl)&#32;<emphasis role="comment">//&#32;don&apos;t&#32;care&#32;for&#32;BW&#32;w/o&#32;VL</emphasis>
540 &#32;&#32;&#32;&#32;_S_store&lt;_Np&gt;(1&#32;&amp;&#32;__vector_bitcast&lt;_UChar,&#32;_Np&gt;([=]()&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&lt;=&#32;16)
542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_movm_epi8(__x._M_to_bits());
543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&lt;=&#32;32)
544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_movm_epi8(__x._M_to_bits());
545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&lt;=&#32;64)
546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm512_movm_epi8(__x._M_to_bits());
547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_SizeConstant&lt;_Np&gt;&gt;();
549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}()),
550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mem);
551 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_bmi2)
552 &#32;&#32;&#32;&#32;{
553 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&lt;=&#32;4)
554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_store&lt;_Np&gt;(_pdep_u32(__x._M_to_bits(),&#32;0x01010101U),&#32;__mem);
555 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__execute_n_times&lt;__div_roundup(_Np,&#32;sizeof(size_t))&gt;(
557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{
558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__offset&#32;=&#32;__i&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link>);
559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__todo&#32;=&#32;std::min(<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">size_t</emphasis>),&#32;_Np&#32;-&#32;__offset);
560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__todo&#32;==&#32;1)
561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mem[__offset]&#32;=&#32;__x[__offset];
562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__bools&#32;=
565 <emphasis role="preprocessor">#ifdef&#32;__x86_64__</emphasis>
566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_pdep_u64(__x.template&#32;_M_extract&lt;__offset&gt;().to_ullong(),
567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x0101010101010101ULL);
568 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;__x86_64__</emphasis>
569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_pdep_u32(
570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x.template&#32;_M_extract&lt;__offset&gt;()._M_to_bits(),
571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x01010101U);
572 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__x86_64__</emphasis>
573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_store&lt;__todo&gt;(__bools,&#32;__mem&#32;+&#32;__offset);
574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
576 &#32;&#32;&#32;&#32;}
577 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse2&#32;&amp;&amp;&#32;_Np&#32;&gt;&#32;7)
578 &#32;&#32;&#32;&#32;__execute_n_times&lt;__div_roundup(_Np,&#32;16)&gt;([&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{
579 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__offset&#32;=&#32;__i&#32;*&#32;16;
580 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__todo&#32;=&#32;std::min(16,&#32;<emphasis role="keywordtype">int</emphasis>(_Np)&#32;-&#32;__offset);
581 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__bits&#32;=&#32;__x.template&#32;_M_extract&lt;__offset&gt;()._M_to_bits();
582 &#32;&#32;&#32;&#32;&#32;&#32;__vector_type16_t&lt;_UChar&gt;&#32;__bools;
583 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f)
584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__as32bits
586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm512_maskz_mov_epi32(__bits,&#32;__to_intrin(
587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_broadcast&lt;16&gt;(1)));
588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__as16bits
589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__xzyw(_mm256_packs_epi32(__lo256(__as32bits),
590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__todo&#32;&gt;&#32;8&#32;?&#32;__hi256(__as32bits)
591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;__m256i()));
592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__bools&#32;=&#32;__vector_bitcast&lt;_UChar&gt;(
593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_packs_epi16(__lo128(__as16bits),&#32;__hi128(__as16bits)));
594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
595 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_V&#32;=&#32;__vector_type_t&lt;_UChar,&#32;16&gt;;
598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;_mm_cvtsi32_si128(__bits);
599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;_mm_unpacklo_epi8(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>,&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;_mm_unpacklo_epi16(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>,&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;_mm_unpacklo_epi32(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>,&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_V&#32;__tmp2&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_V<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__tmp2&#32;&amp;=&#32;_V{1,&#32;2,&#32;4,&#32;8,&#32;16,&#32;32,&#32;64,&#32;128,
604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1,&#32;2,&#32;4,&#32;8,&#32;16,&#32;32,&#32;64,&#32;128};&#32;<emphasis role="comment">//&#32;mask&#32;bit&#32;index</emphasis>
605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__bools&#32;=&#32;(__tmp2&#32;==&#32;0)&#32;+&#32;1;&#32;<emphasis role="comment">//&#32;0xff&#32;-&gt;&#32;0x00&#32;|&#32;0x00&#32;-&gt;&#32;0x01</emphasis>
606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
607 &#32;&#32;&#32;&#32;&#32;&#32;_S_store&lt;__todo&gt;(__bools,&#32;__mem&#32;+&#32;__offset);
608 &#32;&#32;&#32;&#32;});
609 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
610 &#32;&#32;&#32;&#32;_CommonImplBuiltin::_S_store_bool_array(__x,&#32;__mem);
611 &#32;&#32;&#32;&#32;}
612 
613 &#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
614 &#32;&#32;<emphasis role="comment">//&#32;_S_blend_avx512&#32;{{{</emphasis>
615 &#32;&#32;<emphasis role="comment">//&#32;Returns:&#32;__k&#32;?&#32;__b&#32;:&#32;__a</emphasis>
616 &#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;reverse&#32;__a&#32;and&#32;__b&#32;to&#32;match&#32;COND_EXPR</emphasis>
617 &#32;&#32;<emphasis role="comment">//&#32;Requires:&#32;_TV&#32;to&#32;be&#32;a&#32;__vector_type_t&#32;matching&#32;valuetype&#32;for&#32;the&#32;bitmask</emphasis>
618 &#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__k</emphasis>
619 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TV&gt;
620 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_TV
621 &#32;&#32;&#32;&#32;_S_blend_avx512(<emphasis role="keyword">const</emphasis>&#32;_Kp&#32;__k,&#32;<emphasis role="keyword">const</emphasis>&#32;_TV&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;_TV&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
622 &#32;&#32;&#32;&#32;{
623 <emphasis role="preprocessor">#ifdef&#32;__clang__</emphasis>
624 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;this&#32;does&#32;a&#32;boolean&#32;choice,&#32;not&#32;a&#32;blend</emphasis>
625 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__k&#32;?&#32;__a&#32;:&#32;__b;
626 <emphasis role="preprocessor">#else</emphasis>
627 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__is_vector_type_v&lt;_TV&gt;);
628 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_VectorTraits&lt;_TV&gt;::value_type;
629 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(_TV)&#32;&gt;=&#32;16);
630 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;&lt;=&#32;8);
631 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_IntT
632 &#32;&#32;&#32;&#32;=&#32;conditional_t&lt;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;&gt;&#32;2),
633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;conditional_t&lt;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4,&#32;<emphasis role="keywordtype">int</emphasis>,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&gt;,
634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;conditional_t&lt;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1,&#32;char,&#32;<emphasis role="keywordtype">short</emphasis>&gt;&gt;;
635 &#32;&#32;&#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__aa&#32;=&#32;__vector_bitcast&lt;_IntT&gt;(__a);
636 &#32;&#32;&#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__bb&#32;=&#32;__vector_bitcast&lt;_IntT&gt;(__b);
637 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_TV)&#32;==&#32;64)
638 &#32;&#32;&#32;&#32;{
639 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1)
640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_TV<emphasis role="keyword">&gt;</emphasis>(
641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_ia32_blendmb_512_mask(__aa,&#32;__bb,&#32;__k));
642 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2)
643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_TV<emphasis role="keyword">&gt;</emphasis>(
644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_ia32_blendmw_512_mask(__aa,&#32;__bb,&#32;__k));
645 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;)
646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_ia32_blendmps_512_mask(__a,&#32;__b,&#32;__k);
647 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_TV<emphasis role="keyword">&gt;</emphasis>(
649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_ia32_blendmd_512_mask(__aa,&#32;__bb,&#32;__k));
650 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;)
651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_ia32_blendmpd_512_mask(__a,&#32;__b,&#32;__k);
652 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_TV<emphasis role="keyword">&gt;</emphasis>(
654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_ia32_blendmq_512_mask(__aa,&#32;__bb,&#32;__k));
655 &#32;&#32;&#32;&#32;}
656 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_TV)&#32;==&#32;32)
657 &#32;&#32;&#32;&#32;{
658 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1)
659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_TV<emphasis role="keyword">&gt;</emphasis>(
660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_ia32_blendmb_256_mask(__aa,&#32;__bb,&#32;__k));
661 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2)
662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_TV<emphasis role="keyword">&gt;</emphasis>(
663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_ia32_blendmw_256_mask(__aa,&#32;__bb,&#32;__k));
664 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;)
665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_ia32_blendmps_256_mask(__a,&#32;__b,&#32;__k);
666 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_TV<emphasis role="keyword">&gt;</emphasis>(
668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_ia32_blendmd_256_mask(__aa,&#32;__bb,&#32;__k));
669 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;)
670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_ia32_blendmpd_256_mask(__a,&#32;__b,&#32;__k);
671 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_TV<emphasis role="keyword">&gt;</emphasis>(
673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_ia32_blendmq_256_mask(__aa,&#32;__bb,&#32;__k));
674 &#32;&#32;&#32;&#32;}
675 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_TV)&#32;==&#32;16)
676 &#32;&#32;&#32;&#32;{
677 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1)
678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_TV<emphasis role="keyword">&gt;</emphasis>(
679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_ia32_blendmb_128_mask(__aa,&#32;__bb,&#32;__k));
680 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2)
681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_TV<emphasis role="keyword">&gt;</emphasis>(
682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_ia32_blendmw_128_mask(__aa,&#32;__bb,&#32;__k));
683 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;)
684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_ia32_blendmps_128_mask(__a,&#32;__b,&#32;__k);
685 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_TV<emphasis role="keyword">&gt;</emphasis>(
687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_ia32_blendmd_128_mask(__aa,&#32;__bb,&#32;__k));
688 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;)
689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_ia32_blendmpd_128_mask(__a,&#32;__b,&#32;__k);
690 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_TV<emphasis role="keyword">&gt;</emphasis>(
692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_ia32_blendmq_128_mask(__aa,&#32;__bb,&#32;__k));
693 &#32;&#32;&#32;&#32;}
694 <emphasis role="preprocessor">#endif</emphasis>
695 &#32;&#32;&#32;&#32;}
696 
697 &#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
698 &#32;&#32;<emphasis role="comment">//&#32;_S_blend_intrin&#32;{{{</emphasis>
699 &#32;&#32;<emphasis role="comment">//&#32;Returns:&#32;__k&#32;?&#32;__b&#32;:&#32;__a</emphasis>
700 &#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;reverse&#32;__a&#32;and&#32;__b&#32;to&#32;match&#32;COND_EXPR</emphasis>
701 &#32;&#32;<emphasis role="comment">//&#32;Requires:&#32;_Tp&#32;to&#32;be&#32;an&#32;intrinsic&#32;type&#32;(integers&#32;blend&#32;per&#32;byte)&#32;and&#32;16/32</emphasis>
702 &#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Bytes&#32;wide</emphasis>
703 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
704 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_Tp&#32;_S_blend_intrin(_Tp&#32;__k,&#32;_Tp&#32;__a,
705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
706 &#32;&#32;&#32;&#32;{
707 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same_v&lt;<emphasis role="keyword">decltype</emphasis>(__to_intrin(__a)),&#32;_Tp&gt;);
708 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">struct</emphasis>
709 &#32;&#32;&#32;&#32;&#32;&#32;{
710 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;__m128&#32;operator()(__m128&#32;__a,&#32;__m128&#32;__b,
711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128&#32;__k)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
712 &#32;&#32;&#32;&#32;{
713 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_ia32_blendvps(__a,&#32;__b,&#32;__k);
714 &#32;&#32;&#32;&#32;}
715 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;__m128d&#32;operator()(__m128d&#32;__a,&#32;__m128d&#32;__b,
716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128d&#32;__k)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
717 &#32;&#32;&#32;&#32;{
718 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_ia32_blendvpd(__a,&#32;__b,&#32;__k);
719 &#32;&#32;&#32;&#32;}
720 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;__m128i&#32;operator()(__m128i&#32;__a,&#32;__m128i&#32;__b,
721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i&#32;__k)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
722 &#32;&#32;&#32;&#32;{
723 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__m128i<emphasis role="keyword">&gt;</emphasis>(
724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_ia32_pblendvb128(<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__v16qi<emphasis role="keyword">&gt;</emphasis>(__a),
725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__v16qi<emphasis role="keyword">&gt;</emphasis>(__b),
726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__v16qi<emphasis role="keyword">&gt;</emphasis>(__k)));
727 &#32;&#32;&#32;&#32;}
728 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;__m256&#32;operator()(__m256&#32;__a,&#32;__m256&#32;__b,
729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m256&#32;__k)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
730 &#32;&#32;&#32;&#32;{
731 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_ia32_blendvps256(__a,&#32;__b,&#32;__k);
732 &#32;&#32;&#32;&#32;}
733 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;__m256d&#32;operator()(__m256d&#32;__a,&#32;__m256d&#32;__b,
734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m256d&#32;__k)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
735 &#32;&#32;&#32;&#32;{
736 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_ia32_blendvpd256(__a,&#32;__b,&#32;__k);
737 &#32;&#32;&#32;&#32;}
738 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;__m256i&#32;operator()(__m256i&#32;__a,&#32;__m256i&#32;__b,
739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m256i&#32;__k)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
740 &#32;&#32;&#32;&#32;{
741 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx2)
742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__m256i<emphasis role="keyword">&gt;</emphasis>(
743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_ia32_pblendvb256(<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__v32qi<emphasis role="keyword">&gt;</emphasis>(__a),
744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__v32qi<emphasis role="keyword">&gt;</emphasis>(__b),
745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__v32qi<emphasis role="keyword">&gt;</emphasis>(__k)));
746 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__m256i<emphasis role="keyword">&gt;</emphasis>(
748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_ia32_blendvps256(<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__v8sf<emphasis role="keyword">&gt;</emphasis>(__a),
749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__v8sf<emphasis role="keyword">&gt;</emphasis>(__b),
750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__v8sf<emphasis role="keyword">&gt;</emphasis>(__k)));
751 &#32;&#32;&#32;&#32;}
752 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;__eval;
753 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__eval(__a,&#32;__b,&#32;__k);
754 &#32;&#32;&#32;&#32;}
755 
756 &#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
757 &#32;&#32;<emphasis role="comment">//&#32;_S_blend&#32;{{{</emphasis>
758 &#32;&#32;<emphasis role="comment">//&#32;Returns:&#32;__k&#32;?&#32;__at1&#32;:&#32;__at0</emphasis>
759 &#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;reverse&#32;__at0&#32;and&#32;__at1&#32;to&#32;match&#32;COND_EXPR</emphasis>
760 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
761 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
762 &#32;&#32;&#32;&#32;_S_blend(_SimdWrapper&lt;bool,&#32;_Np&gt;&#32;__k,&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__at0,
763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__at1)
764 &#32;&#32;&#32;&#32;{
765 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same_v&lt;_Tp,&#32;_Tp&gt;&#32;&amp;&amp;&#32;__have_avx512f);
766 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__k._M_is_constprop()&#32;&amp;&amp;&#32;__at0._M_is_constprop()
767 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__at1._M_is_constprop())
768 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__generate_from_n_evaluations&lt;_Np,
769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_type_t&lt;_Tp,&#32;_Np&gt;&gt;([&amp;](
770 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__k[__i]&#32;?&#32;__at1[__i]&#32;:&#32;__at0[__i];&#32;});
771 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__at0)&#32;==&#32;64
772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;(__have_avx512vl&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__at0)&#32;&gt;=&#32;16))
773 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_blend_avx512(__k._M_data,&#32;__at0._M_data,&#32;__at1._M_data);
774 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
775 &#32;&#32;&#32;&#32;{
776 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>((__have_avx512vl&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__at0)&#32;&lt;&#32;16)
777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;!__have_avx512vl);
778 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__size&#32;=&#32;(__have_avx512vl&#32;?&#32;16&#32;:&#32;64)&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp);
779 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Tp,&#32;_Np&gt;(
780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_blend_avx512(__k._M_data,&#32;__vector_bitcast&lt;_Tp,&#32;__size&gt;(__at0),
781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;_Tp,&#32;__size&gt;(__at1)));
782 &#32;&#32;&#32;&#32;}
783 &#32;&#32;&#32;&#32;}
784 
785 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
786 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
787 &#32;&#32;&#32;&#32;_S_blend(_SimdWrapper&lt;__int_for_sizeof_t&lt;_Tp&gt;,&#32;_Np&gt;&#32;__k,
788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__at0,&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__at1)
789 &#32;&#32;&#32;&#32;{
790 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__kk&#32;=&#32;__wrapper_bitcast&lt;_Tp&gt;(__k);
791 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_is_constant_evaluated()
792 &#32;&#32;&#32;&#32;&#32;&#32;||&#32;(__kk._M_is_constprop()&#32;&amp;&amp;&#32;__at0._M_is_constprop()
793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__at1._M_is_constprop()))
794 &#32;&#32;&#32;&#32;{
795 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__r&#32;=&#32;__or(__andnot(__kk,&#32;__at0),&#32;__and(__kk,&#32;__at1));
796 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__r._M_is_constprop())
797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
798 &#32;&#32;&#32;&#32;}
799 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(((__have_avx512f&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__at0)&#32;==&#32;64)&#32;||&#32;__have_avx512vl)
800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;&gt;=&#32;4&#32;||&#32;__have_avx512bw))
801 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;convert&#32;to&#32;bitmask&#32;and&#32;call&#32;overload&#32;above</emphasis>
802 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_blend(
803 &#32;&#32;&#32;&#32;&#32;&#32;_SimdWrapper&lt;bool,&#32;_Np&gt;(
804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__make_dependent_t&lt;_Tp,&#32;_MaskImplX86Mixin&gt;::_S_to_bits(__k)
805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_to_bits()),
806 &#32;&#32;&#32;&#32;&#32;&#32;__at0,&#32;__at1);
807 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
808 &#32;&#32;&#32;&#32;{
809 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Since&#32;GCC&#32;does&#32;not&#32;assume&#32;__k&#32;to&#32;be&#32;a&#32;mask,&#32;using&#32;the&#32;builtin</emphasis>
810 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;conditional&#32;operator&#32;introduces&#32;an&#32;extra&#32;compare&#32;against&#32;0&#32;before</emphasis>
811 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;blending.&#32;So&#32;we&#32;rather&#32;call&#32;the&#32;intrinsic&#32;here.</emphasis>
812 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse4_1)
813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_blend_intrin(__to_intrin(__kk),&#32;__to_intrin(__at0),
814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_intrin(__at1));
815 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__or(__andnot(__kk,&#32;__at0),&#32;__and(__kk,&#32;__at1));
817 &#32;&#32;&#32;&#32;}
818 &#32;&#32;&#32;&#32;}
819 
820 &#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
821 };
822 
823 <emphasis role="comment">//&#32;}}}</emphasis>
824 <emphasis role="comment">//&#32;_SimdImplX86&#32;{{{</emphasis>
825 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Abi,&#32;<emphasis role="keyword">typename</emphasis>&gt;
826 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SimdImplX86&#32;:&#32;_SimdImplBuiltin&lt;_Abi&gt;
827 &#32;&#32;{
828 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base&#32;=&#32;_SimdImplBuiltin&lt;_Abi&gt;;
829 
830 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
831 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_MaskMember&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::template&#32;_MaskMember&lt;_Tp&gt;;
832 
833 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
834 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_full_size&#32;=&#32;_Abi::template&#32;_S_full_size&lt;_Tp&gt;;
835 
836 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
837 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_size&#32;=&#32;_Abi::template&#32;_S_size&lt;_Tp&gt;;
838 
839 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
840 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_max_store_size
841 &#32;&#32;&#32;&#32;=&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;&gt;=&#32;4&#32;&amp;&amp;&#32;__have_avx512f)&#32;||&#32;__have_avx512bw&#32;&#32;?&#32;64
842 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;(is_floating_point_v&lt;_Tp&gt;&amp;&amp;&#32;__have_avx)&#32;||&#32;__have_avx2&#32;?&#32;32
843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;16;
844 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_MaskImpl&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi::_MaskImpl;
845 
846 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_masked_load&#32;{{{</emphasis>
847 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
848 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
849 &#32;&#32;&#32;&#32;&#32;&#32;_S_masked_load(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__merge,&#32;_MaskMember&lt;_Tp&gt;&#32;__k,
850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Up*&#32;__mem)&#32;<emphasis role="keyword">noexcept</emphasis>
851 &#32;&#32;&#32;&#32;&#32;&#32;{
852 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_Np&#32;==&#32;_S_size&lt;_Tp&gt;);
853 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Tp,&#32;_Up&gt;&#32;||&#32;<emphasis role="comment">//&#32;no&#32;conversion</emphasis>
854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)
855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_integral_v&lt;
856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp&gt;&#32;==&#32;is_integral_v&lt;_Up&gt;)&#32;<emphasis role="comment">//&#32;conversion&#32;via&#32;bit</emphasis>
857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;reinterpretation</emphasis>
858 &#32;&#32;&#32;&#32;)
859 &#32;&#32;&#32;&#32;&#32;&#32;{
860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__intrin&#32;=&#32;__to_intrin(__merge);
861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;((__is_avx512_abi&lt;_Abi&gt;()&#32;||&#32;__have_avx512bw_vl)
862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1)
863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__kk&#32;=&#32;_MaskImpl::_S_to_bits(__k)._M_to_bits();
865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__intrin)&#32;==&#32;16)
866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__merge&#32;=&#32;__vector_bitcast&lt;_Tp,&#32;_Np&gt;(
867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_mask_loadu_epi8(__intrin,&#32;__kk,&#32;__mem));
868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__merge)&#32;==&#32;32)
869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__merge&#32;=&#32;__vector_bitcast&lt;_Tp,&#32;_Np&gt;(
870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_mask_loadu_epi8(__intrin,&#32;__kk,&#32;__mem));
871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__merge)&#32;==&#32;64)
872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__merge&#32;=&#32;__vector_bitcast&lt;_Tp,&#32;_Np&gt;(
873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_mask_loadu_epi8(__intrin,&#32;__kk,&#32;__mem));
874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;((__is_avx512_abi&lt;_Abi&gt;()&#32;||&#32;__have_avx512bw_vl)
878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2)
879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__kk&#32;=&#32;_MaskImpl::_S_to_bits(__k)._M_to_bits();
881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__intrin)&#32;==&#32;16)
882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__merge&#32;=&#32;__vector_bitcast&lt;_Tp,&#32;_Np&gt;(
883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_mask_loadu_epi16(__intrin,&#32;__kk,&#32;__mem));
884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__intrin)&#32;==&#32;32)
885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__merge&#32;=&#32;__vector_bitcast&lt;_Tp,&#32;_Np&gt;(
886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_mask_loadu_epi16(__intrin,&#32;__kk,&#32;__mem));
887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__intrin)&#32;==&#32;64)
888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__merge&#32;=&#32;__vector_bitcast&lt;_Tp,&#32;_Np&gt;(
889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_mask_loadu_epi16(__intrin,&#32;__kk,&#32;__mem));
890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;((__is_avx512_abi&lt;_Abi&gt;()&#32;||&#32;__have_avx512vl)
894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4&#32;&amp;&amp;&#32;is_integral_v&lt;_Up&gt;)
895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__kk&#32;=&#32;_MaskImpl::_S_to_bits(__k)._M_to_bits();
897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__intrin)&#32;==&#32;16)
898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__merge&#32;=&#32;__vector_bitcast&lt;_Tp,&#32;_Np&gt;(
899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_mask_loadu_epi32(__intrin,&#32;__kk,&#32;__mem));
900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__intrin)&#32;==&#32;32)
901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__merge&#32;=&#32;__vector_bitcast&lt;_Tp,&#32;_Np&gt;(
902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_mask_loadu_epi32(__intrin,&#32;__kk,&#32;__mem));
903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__intrin)&#32;==&#32;64)
904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__merge&#32;=&#32;__vector_bitcast&lt;_Tp,&#32;_Np&gt;(
905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_mask_loadu_epi32(__intrin,&#32;__kk,&#32;__mem));
906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;((__is_avx512_abi&lt;_Abi&gt;()&#32;||&#32;__have_avx512vl)
910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;)
911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__kk&#32;=&#32;_MaskImpl::_S_to_bits(__k)._M_to_bits();
913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__intrin)&#32;==&#32;16)
914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__merge&#32;=&#32;__vector_bitcast&lt;_Tp,&#32;_Np&gt;(
915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_mask_loadu_ps(__intrin,&#32;__kk,&#32;__mem));
916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__intrin)&#32;==&#32;32)
917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__merge&#32;=&#32;__vector_bitcast&lt;_Tp,&#32;_Np&gt;(
918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_mask_loadu_ps(__intrin,&#32;__kk,&#32;__mem));
919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__intrin)&#32;==&#32;64)
920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__merge&#32;=&#32;__vector_bitcast&lt;_Tp,&#32;_Np&gt;(
921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_mask_loadu_ps(__intrin,&#32;__kk,&#32;__mem));
922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx2&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4
926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_integral_v&lt;_Up&gt;)
927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(__intrin)&#32;==&#32;16&#32;||&#32;<emphasis role="keyword">sizeof</emphasis>(__intrin)&#32;==&#32;32);
929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__merge
930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__or(__andnot(__vector_bitcast&lt;_Tp&gt;(__k),&#32;__merge._M_data),
931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;_Tp,&#32;_Np&gt;(
932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__maskload_epi32(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">int</emphasis>*<emphasis role="keyword">&gt;</emphasis>(__mem),
933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_intrin(__k))));
934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(__intrin)&#32;==&#32;16&#32;||&#32;<emphasis role="keyword">sizeof</emphasis>(__intrin)&#32;==&#32;32);
938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__merge
939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__or(__andnot(__vector_bitcast&lt;_Tp&gt;(__k),&#32;__merge._M_data),
940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;_Tp,&#32;_Np&gt;(
941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__maskload_ps(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">float</emphasis>*<emphasis role="keyword">&gt;</emphasis>(__mem),
942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_intrin(__k))));
943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;((__is_avx512_abi&lt;_Abi&gt;()&#32;||&#32;__have_avx512vl)
945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8&#32;&amp;&amp;&#32;is_integral_v&lt;_Up&gt;)
946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__kk&#32;=&#32;_MaskImpl::_S_to_bits(__k)._M_to_bits();
948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__intrin)&#32;==&#32;16)
949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__merge&#32;=&#32;__vector_bitcast&lt;_Tp,&#32;_Np&gt;(
950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_mask_loadu_epi64(__intrin,&#32;__kk,&#32;__mem));
951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__intrin)&#32;==&#32;32)
952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__merge&#32;=&#32;__vector_bitcast&lt;_Tp,&#32;_Np&gt;(
953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_mask_loadu_epi64(__intrin,&#32;__kk,&#32;__mem));
954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__intrin)&#32;==&#32;64)
955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__merge&#32;=&#32;__vector_bitcast&lt;_Tp,&#32;_Np&gt;(
956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_mask_loadu_epi64(__intrin,&#32;__kk,&#32;__mem));
957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;((__is_avx512_abi&lt;_Abi&gt;()&#32;||&#32;__have_avx512vl)
961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;)
962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__kk&#32;=&#32;_MaskImpl::_S_to_bits(__k)._M_to_bits();
964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__intrin)&#32;==&#32;16)
965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__merge&#32;=&#32;__vector_bitcast&lt;_Tp,&#32;_Np&gt;(
966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_mask_loadu_pd(__intrin,&#32;__kk,&#32;__mem));
967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__intrin)&#32;==&#32;32)
968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__merge&#32;=&#32;__vector_bitcast&lt;_Tp,&#32;_Np&gt;(
969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_mask_loadu_pd(__intrin,&#32;__kk,&#32;__mem));
970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__intrin)&#32;==&#32;64)
971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__merge&#32;=&#32;__vector_bitcast&lt;_Tp,&#32;_Np&gt;(
972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_mask_loadu_pd(__intrin,&#32;__kk,&#32;__mem));
973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx2&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8
977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_integral_v&lt;_Up&gt;)
978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(__intrin)&#32;==&#32;16&#32;||&#32;<emphasis role="keyword">sizeof</emphasis>(__intrin)&#32;==&#32;32);
980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__merge
981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__or(__andnot(__vector_bitcast&lt;_Tp&gt;(__k),&#32;__merge._M_data),
982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;_Tp,&#32;_Np&gt;(__maskload_epi64(
983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>_LLong*<emphasis role="keyword">&gt;</emphasis>(__mem),
984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_intrin(__k))));
985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(__intrin)&#32;==&#32;16&#32;||&#32;<emphasis role="keyword">sizeof</emphasis>(__intrin)&#32;==&#32;32);
989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__merge
990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__or(__andnot(__vector_bitcast&lt;_Tp&gt;(__k),&#32;__merge._M_data),
991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;_Tp,&#32;_Np&gt;(
992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__maskload_pd(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">double</emphasis>*<emphasis role="keyword">&gt;</emphasis>(__mem),
993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_intrin(__k))));
994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BitOps::_S_bit_iteration(_MaskImpl::_S_to_bits(__k),
997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{
998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__merge._M_set(__i,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(
999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mem[__i]));
1000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
1001 &#32;&#32;&#32;&#32;&#32;&#32;}
1002 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Very&#32;uncertain,&#32;that&#32;the&#32;following&#32;improves&#32;anything.&#32;Needs</emphasis>
1003 <emphasis role="comment">&#32;&#32;&#32;&#32;benchmarking</emphasis>
1004 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;before&#32;it&apos;s&#32;activated.</emphasis>
1005 <emphasis role="comment">&#32;&#32;&#32;&#32;else&#32;if&#32;constexpr&#32;(sizeof(_Up)&#32;&lt;=&#32;8&#32;&amp;&amp;&#32;//&#32;no&#32;long&#32;double</emphasis>
1006 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!__converts_via_decomposition_v&lt;</emphasis>
1007 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Up,&#32;_Tp,</emphasis>
1008 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sizeof(__merge)&gt;&#32;//&#32;conversion&#32;via&#32;decomposition</emphasis>
1009 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;is&#32;better&#32;handled&#32;via&#32;the</emphasis>
1010 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;bit_iteration&#32;fallback&#32;below</emphasis>
1011 <emphasis role="comment">&#32;&#32;&#32;&#32;)</emphasis>
1012 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
1013 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;TODO:&#32;copy&#32;pattern&#32;from&#32;_S_masked_store,&#32;which&#32;doesn&apos;t&#32;resort&#32;to</emphasis>
1014 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;fixed_size</emphasis>
1015 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;using&#32;_Ap&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;simd_abi::deduce_t&lt;_Up,&#32;_Np&gt;;</emphasis>
1016 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;using&#32;_ATraits&#32;=&#32;_SimdTraits&lt;_Up,&#32;_Ap&gt;;</emphasis>
1017 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;using&#32;_AImpl&#32;&#32;&#32;=&#32;typename&#32;_ATraits::_SimdImpl;</emphasis>
1018 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_ATraits::_SimdMember&#32;__uncvted{};</emphasis>
1019 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_ATraits::_MaskMember&#32;__kk&#32;=&#32;_Ap::_MaskImpl::template</emphasis>
1020 <emphasis role="comment">&#32;&#32;&#32;&#32;_S_convert&lt;_Up&gt;(__k);</emphasis>
1021 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__uncvted&#32;=&#32;_AImpl::_S_masked_load(__uncvted,&#32;__kk,&#32;__mem);</emphasis>
1022 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdConverter&lt;_Up,&#32;_Ap,&#32;_Tp,&#32;_Abi&gt;&#32;__converter;</emphasis>
1023 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Base::_S_masked_assign(__k,&#32;__merge,&#32;__converter(__uncvted));</emphasis>
1024 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
1025 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
1026 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1027 &#32;&#32;&#32;&#32;&#32;&#32;__merge&#32;=&#32;_Base::_S_masked_load(__merge,&#32;__k,&#32;__mem);
1028 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__merge;
1029 &#32;&#32;&#32;&#32;&#32;&#32;}
1030 
1031 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
1032 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_masked_store_nocvt&#32;{{{</emphasis>
1033 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
1034 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1035 &#32;&#32;&#32;&#32;&#32;&#32;_S_masked_store_nocvt(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__v,&#32;_Tp*&#32;__mem,
1036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdWrapper&lt;bool,&#32;_Np&gt;&#32;__k)
1037 &#32;&#32;&#32;&#32;&#32;&#32;{
1038 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__vi&#32;=&#32;__to_intrin(__v);
1039 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__vi)&#32;==&#32;64)
1040 &#32;&#32;&#32;&#32;&#32;&#32;{
1041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(__v)&#32;==&#32;64&#32;&amp;&amp;&#32;__have_avx512f);
1042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1)
1043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_mask_storeu_epi8(__mem,&#32;__k,&#32;__vi);
1044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2)
1045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_mask_storeu_epi16(__mem,&#32;__k,&#32;__vi);
1046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
1047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_integral_v&lt;_Tp&gt;)
1049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_mask_storeu_epi32(__mem,&#32;__k,&#32;__vi);
1050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_mask_storeu_ps(__mem,&#32;__k,&#32;__vi);
1052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
1054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_integral_v&lt;_Tp&gt;)
1056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_mask_storeu_epi64(__mem,&#32;__k,&#32;__vi);
1057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_mask_storeu_pd(__mem,&#32;__k,&#32;__vi);
1059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1060 <emphasis role="preprocessor">#if&#32;0&#32;</emphasis><emphasis role="comment">//&#32;with&#32;KNL&#32;either&#32;sizeof(_Tp)&#32;&gt;=&#32;4&#32;or&#32;sizeof(_vi)&#32;&lt;=&#32;32</emphasis>
1061 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;with&#32;Skylake-AVX512,&#32;__have_avx512bw&#32;is&#32;true</emphasis>
1062 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse2)
1063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_M&#32;&#32;&#32;=&#32;__vector_type_t&lt;_Tp,&#32;_Np&gt;;
1065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_MVT&#32;=&#32;_VectorTraits&lt;_M&gt;;
1066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_maskmoveu_si128(__auto_bitcast(__extract&lt;0,&#32;4&gt;(__v._M_data)),
1067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__auto_bitcast(_MaskImpl::template&#32;_S_convert&lt;_Tp,&#32;_Np&gt;(__k._M_data)),
1068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(__mem));
1069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_maskmoveu_si128(__auto_bitcast(__extract&lt;1,&#32;4&gt;(__v._M_data)),
1070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__auto_bitcast(_MaskImpl::template&#32;_S_convert&lt;_Tp,&#32;_Np&gt;(
1071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__k._M_data&#32;&gt;&gt;&#32;1&#32;*&#32;_MVT::_S_full_size)),
1072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(__mem)&#32;+&#32;1&#32;*&#32;16);
1073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_maskmoveu_si128(__auto_bitcast(__extract&lt;2,&#32;4&gt;(__v._M_data)),
1074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__auto_bitcast(_MaskImpl::template&#32;_S_convert&lt;_Tp,&#32;_Np&gt;(
1075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__k._M_data&#32;&gt;&gt;&#32;2&#32;*&#32;_MVT::_S_full_size)),
1076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(__mem)&#32;+&#32;2&#32;*&#32;16);
1077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&gt;&#32;48&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp))
1078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_maskmoveu_si128(
1079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__auto_bitcast(__extract&lt;3,&#32;4&gt;(__v._M_data)),
1080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__auto_bitcast(_MaskImpl::template&#32;_S_convert&lt;_Tp,&#32;_Np&gt;(
1081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__k._M_data&#32;&gt;&gt;&#32;3&#32;*&#32;_MVT::_S_full_size)),
1082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(__mem)&#32;+&#32;3&#32;*&#32;16);
1083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1084 <emphasis role="preprocessor">#endif</emphasis>
1085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
1087 &#32;&#32;&#32;&#32;&#32;&#32;}
1088 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__vi)&#32;==&#32;32)
1089 &#32;&#32;&#32;&#32;&#32;&#32;{
1090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw_vl&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1)
1091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_mask_storeu_epi8(__mem,&#32;__k,&#32;__vi);
1092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw_vl&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2)
1093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_mask_storeu_epi16(__mem,&#32;__k,&#32;__vi);
1094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512vl&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
1095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_integral_v&lt;_Tp&gt;)
1097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_mask_storeu_epi32(__mem,&#32;__k,&#32;__vi);
1098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_mask_storeu_ps(__mem,&#32;__k,&#32;__vi);
1100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512vl&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
1102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_integral_v&lt;_Tp&gt;)
1104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_mask_storeu_epi64(__mem,&#32;__k,&#32;__vi);
1105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_mask_storeu_pd(__mem,&#32;__k,&#32;__vi);
1107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f
1109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;&gt;=&#32;4&#32;||&#32;__have_avx512bw))
1110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;use&#32;a&#32;512-bit&#32;maskstore,&#32;using&#32;zero-extension&#32;of&#32;the&#32;bitmask</emphasis>
1112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_masked_store_nocvt(
1113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdWrapper64&lt;_Tp&gt;(
1114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__intrin_bitcast&lt;__vector_type64_t&lt;_Tp&gt;&gt;(__v._M_data)),
1115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mem,&#32;_SimdWrapper&lt;<emphasis role="keywordtype">bool</emphasis>,&#32;64&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&gt;(__k._M_data));
1116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_masked_store_nocvt(__v,&#32;__mem,
1119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_MaskImpl::template&#32;_S_to_maskvector&lt;
1120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__int_for_sizeof_t&lt;_Tp&gt;,&#32;_Np&gt;(__k));
1121 &#32;&#32;&#32;&#32;&#32;&#32;}
1122 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__vi)&#32;==&#32;16)
1123 &#32;&#32;&#32;&#32;&#32;&#32;{
1124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw_vl&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1)
1125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_mask_storeu_epi8(__mem,&#32;__k,&#32;__vi);
1126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw_vl&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2)
1127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_mask_storeu_epi16(__mem,&#32;__k,&#32;__vi);
1128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512vl&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
1129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_integral_v&lt;_Tp&gt;)
1131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_mask_storeu_epi32(__mem,&#32;__k,&#32;__vi);
1132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_mask_storeu_ps(__mem,&#32;__k,&#32;__vi);
1134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512vl&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
1136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_integral_v&lt;_Tp&gt;)
1138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_mask_storeu_epi64(__mem,&#32;__k,&#32;__vi);
1139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_mask_storeu_pd(__mem,&#32;__k,&#32;__vi);
1141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f
1143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;&gt;=&#32;4&#32;||&#32;__have_avx512bw))
1144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;use&#32;a&#32;512-bit&#32;maskstore,&#32;using&#32;zero-extension&#32;of&#32;the&#32;bitmask</emphasis>
1146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_masked_store_nocvt(
1147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdWrapper64&lt;_Tp&gt;(
1148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__intrin_bitcast&lt;__intrinsic_type64_t&lt;_Tp&gt;&gt;(__v._M_data)),
1149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mem,&#32;_SimdWrapper&lt;<emphasis role="keywordtype">bool</emphasis>,&#32;64&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&gt;(__k._M_data));
1150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_masked_store_nocvt(__v,&#32;__mem,
1153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_MaskImpl::template&#32;_S_to_maskvector&lt;
1154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__int_for_sizeof_t&lt;_Tp&gt;,&#32;_Np&gt;(__k));
1155 &#32;&#32;&#32;&#32;&#32;&#32;}
1156 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1157 &#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
1158 &#32;&#32;&#32;&#32;&#32;&#32;}
1159 
1160 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
1161 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1162 &#32;&#32;&#32;&#32;&#32;&#32;_S_masked_store_nocvt(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__v,&#32;_Tp*&#32;__mem,
1163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdWrapper&lt;__int_for_sizeof_t&lt;_Tp&gt;,&#32;_Np&gt;&#32;__k)
1164 &#32;&#32;&#32;&#32;&#32;&#32;{
1165 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__v)&#32;&lt;=&#32;16)
1166 &#32;&#32;&#32;&#32;&#32;&#32;{
1167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__vi
1168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__intrin_bitcast&lt;__m128i&gt;(__as_vector(__v));
1169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__ki
1170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__intrin_bitcast&lt;__m128i&gt;(__as_vector(__k));
1171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw_vl&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1)
1172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_mask_storeu_epi8(__mem,&#32;_mm_movepi8_mask(__ki),&#32;__vi);
1173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw_vl&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2)
1174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_mask_storeu_epi16(__mem,&#32;_mm_movepi16_mask(__ki),&#32;__vi);
1175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx2&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4
1176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_integral_v&lt;_Tp&gt;)
1177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_maskstore_epi32(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis>*<emphasis role="keyword">&gt;</emphasis>(__mem),&#32;__ki,&#32;__vi);
1178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
1179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_maskstore_ps(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis>*<emphasis role="keyword">&gt;</emphasis>(__mem),&#32;__ki,
1180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;float&gt;(__vi));
1181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx2&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8
1182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_integral_v&lt;_Tp&gt;)
1183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_maskstore_epi64(<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_LLong*<emphasis role="keyword">&gt;</emphasis>(__mem),&#32;__ki,&#32;__vi);
1184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
1185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_maskstore_pd(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis>*<emphasis role="keyword">&gt;</emphasis>(__mem),&#32;__ki,
1186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;double&gt;(__vi));
1187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse2)
1188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_maskmoveu_si128(__vi,&#32;__ki,&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(__mem));
1189 &#32;&#32;&#32;&#32;&#32;&#32;}
1190 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__v)&#32;==&#32;32)
1191 &#32;&#32;&#32;&#32;&#32;&#32;{
1192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__vi
1193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__intrin_bitcast&lt;__m256i&gt;(__as_vector(__v));
1194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__ki
1195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__intrin_bitcast&lt;__m256i&gt;(__as_vector(__k));
1196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw_vl&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1)
1197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_mask_storeu_epi8(__mem,&#32;_mm256_movepi8_mask(__ki),&#32;__vi);
1198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw_vl&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2)
1199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_mask_storeu_epi16(__mem,&#32;_mm256_movepi16_mask(__ki),&#32;__vi);
1200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx2&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4
1201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_integral_v&lt;_Tp&gt;)
1202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_maskstore_epi32(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis>*<emphasis role="keyword">&gt;</emphasis>(__mem),&#32;__ki,&#32;__vi);
1203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
1204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_maskstore_ps(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis>*<emphasis role="keyword">&gt;</emphasis>(__mem),&#32;__ki,
1205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;float&gt;(__v));
1206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx2&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8
1207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_integral_v&lt;_Tp&gt;)
1208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_maskstore_epi64(<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_LLong*<emphasis role="keyword">&gt;</emphasis>(__mem),&#32;__ki,
1209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vi);
1210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
1211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_maskstore_pd(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis>*<emphasis role="keyword">&gt;</emphasis>(__mem),&#32;__ki,
1212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;double&gt;(__v));
1213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse2)
1214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_maskmoveu_si128(__lo128(__vi),&#32;__lo128(__ki),
1216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(__mem));
1217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_maskmoveu_si128(__hi128(__vi),&#32;__hi128(__ki),
1218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(__mem)&#32;+&#32;16);
1219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1220 &#32;&#32;&#32;&#32;&#32;&#32;}
1221 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1222 &#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
1223 &#32;&#32;&#32;&#32;&#32;&#32;}
1224 
1225 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
1226 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_masked_store&#32;{{{</emphasis>
1227 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
1228 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1229 &#32;&#32;&#32;&#32;&#32;&#32;_S_masked_store(<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__v,&#32;_Up*&#32;__mem,
1230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_MaskMember&lt;_Tp&gt;&#32;__k)&#32;<emphasis role="keyword">noexcept</emphasis>
1231 &#32;&#32;&#32;&#32;&#32;&#32;{
1232 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_integral_v&lt;
1233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp&gt;&#32;&amp;&amp;&#32;is_integral_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;&gt;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)
1234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__have_avx512f&#32;&amp;&amp;&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;&gt;=&#32;4&#32;||&#32;__have_avx512bw)
1235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(<emphasis role="keyword">sizeof</emphasis>(__v)&#32;==&#32;64&#32;||&#32;__have_avx512vl))
1236 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;truncating&#32;store</emphasis>
1237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__vi&#32;=&#32;__to_intrin(__v);
1238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__kk&#32;=&#32;_MaskImpl::_S_to_bits(__k)._M_to_bits();
1239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4
1240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__vi)&#32;==&#32;64)
1241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_mask_cvtepi64_storeu_epi32(__mem,&#32;__kk,&#32;__vi);
1242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4
1243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__vi)&#32;==&#32;32)
1244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_mask_cvtepi64_storeu_epi32(__mem,&#32;__kk,&#32;__vi);
1245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4
1246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__vi)&#32;==&#32;16)
1247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_mask_cvtepi64_storeu_epi32(__mem,&#32;__kk,&#32;__vi);
1248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;2
1249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__vi)&#32;==&#32;64)
1250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_mask_cvtepi64_storeu_epi16(__mem,&#32;__kk,&#32;__vi);
1251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;2
1252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__vi)&#32;==&#32;32)
1253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_mask_cvtepi64_storeu_epi16(__mem,&#32;__kk,&#32;__vi);
1254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;2
1255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__vi)&#32;==&#32;16)
1256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_mask_cvtepi64_storeu_epi16(__mem,&#32;__kk,&#32;__vi);
1257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;1
1258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__vi)&#32;==&#32;64)
1259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_mask_cvtepi64_storeu_epi8(__mem,&#32;__kk,&#32;__vi);
1260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;1
1261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__vi)&#32;==&#32;32)
1262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_mask_cvtepi64_storeu_epi8(__mem,&#32;__kk,&#32;__vi);
1263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;1
1264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__vi)&#32;==&#32;16)
1265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_mask_cvtepi64_storeu_epi8(__mem,&#32;__kk,&#32;__vi);
1266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;2
1267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__vi)&#32;==&#32;64)
1268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_mask_cvtepi32_storeu_epi16(__mem,&#32;__kk,&#32;__vi);
1269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;2
1270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__vi)&#32;==&#32;32)
1271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_mask_cvtepi32_storeu_epi16(__mem,&#32;__kk,&#32;__vi);
1272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;2
1273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__vi)&#32;==&#32;16)
1274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_mask_cvtepi32_storeu_epi16(__mem,&#32;__kk,&#32;__vi);
1275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;1
1276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__vi)&#32;==&#32;64)
1277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_mask_cvtepi32_storeu_epi8(__mem,&#32;__kk,&#32;__vi);
1278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;1
1279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__vi)&#32;==&#32;32)
1280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_mask_cvtepi32_storeu_epi8(__mem,&#32;__kk,&#32;__vi);
1281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;1
1282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__vi)&#32;==&#32;16)
1283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_mask_cvtepi32_storeu_epi8(__mem,&#32;__kk,&#32;__vi);
1284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;1
1285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__vi)&#32;==&#32;64)
1286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_mask_cvtepi16_storeu_epi8(__mem,&#32;__kk,&#32;__vi);
1287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;1
1288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__vi)&#32;==&#32;32)
1289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_mask_cvtepi16_storeu_epi8(__mem,&#32;__kk,&#32;__vi);
1290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;1
1291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__vi)&#32;==&#32;16)
1292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_mask_cvtepi16_storeu_epi8(__mem,&#32;__kk,&#32;__vi);
1293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
1295 &#32;&#32;&#32;&#32;&#32;&#32;}
1296 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1297 &#32;&#32;&#32;&#32;&#32;&#32;_Base::_S_masked_store(__v,&#32;__mem,&#32;__k);
1298 &#32;&#32;&#32;&#32;&#32;&#32;}
1299 
1300 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
1301 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_multiplies&#32;{{{</emphasis>
1302 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_V,&#32;<emphasis role="keyword">typename</emphasis>&#32;_VVT&#32;=&#32;_VectorTraits&lt;_V&gt;&gt;
1303 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_V&#32;_S_multiplies(_V&#32;__x,&#32;_V&#32;__y)
1304 &#32;&#32;&#32;&#32;&#32;&#32;{
1305 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_VVT::value_type;
1306 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_is_constant_evaluated()&#32;||&#32;__x._M_is_constprop()
1307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;__y._M_is_constprop())
1308 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__as_vector(__x)&#32;*&#32;__as_vector(__y);
1309 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1)
1310 &#32;&#32;&#32;&#32;&#32;&#32;{
1311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_V)&#32;==&#32;2)
1312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__xs&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">short</emphasis><emphasis role="keyword">&gt;</emphasis>(__x._M_data);
1314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__ys&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">short</emphasis><emphasis role="keyword">&gt;</emphasis>(__y._M_data);
1315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__vector_type_t&lt;_Tp,&#32;2&gt;<emphasis role="keyword">&gt;</emphasis>(short(
1316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((__xs&#32;*&#32;__ys)&#32;&amp;&#32;0xff)&#32;|&#32;((__xs&#32;&gt;&gt;&#32;8)&#32;*&#32;(__ys&#32;&amp;&#32;0xff00))));
1317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_V)&#32;==&#32;4&#32;&amp;&amp;&#32;_VVT::_S_partial_width&#32;==&#32;3)
1319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__xi&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(__x._M_data);
1321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__yi&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(__y._M_data);
1322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__vector_type_t&lt;_Tp,&#32;3&gt;<emphasis role="keyword">&gt;</emphasis>(
1323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((__xi&#32;*&#32;__yi)&#32;&amp;&#32;0xff)
1324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(((__xi&#32;&gt;&gt;&#32;8)&#32;*&#32;(__yi&#32;&amp;&#32;0xff00))&#32;&amp;&#32;0xff00)
1325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;((__xi&#32;&gt;&gt;&#32;16)&#32;*&#32;(__yi&#32;&amp;&#32;0xff0000)));
1326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_V)&#32;==&#32;4)
1328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__xi&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(__x._M_data);
1330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__yi&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(__y._M_data);
1331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__vector_type_t&lt;_Tp,&#32;4&gt;<emphasis role="keyword">&gt;</emphasis>(
1332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((__xi&#32;*&#32;__yi)&#32;&amp;&#32;0xff)
1333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(((__xi&#32;&gt;&gt;&#32;8)&#32;*&#32;(__yi&#32;&amp;&#32;0xff00))&#32;&amp;&#32;0xff00)
1334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(((__xi&#32;&gt;&gt;&#32;16)&#32;*&#32;(__yi&#32;&amp;&#32;0xff0000))&#32;&amp;&#32;0xff0000)
1335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;((__xi&#32;&gt;&gt;&#32;24)&#32;*&#32;(__yi&#32;&amp;&#32;0xff000000u)));
1336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_V)&#32;==&#32;8&#32;&amp;&amp;&#32;__have_avx2
1338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_signed_v&lt;_Tp&gt;)
1339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__convert&lt;typename&#32;_VVT::type&gt;(
1340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;short&gt;(_mm_cvtepi8_epi16(__to_intrin(__x)))
1341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;__vector_bitcast&lt;short&gt;(_mm_cvtepi8_epi16(__to_intrin(__y))));
1342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_V)&#32;==&#32;8&#32;&amp;&amp;&#32;__have_avx2
1343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Tp&gt;)
1344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__convert&lt;typename&#32;_VVT::type&gt;(
1345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;short&gt;(_mm_cvtepu8_epi16(__to_intrin(__x)))
1346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;__vector_bitcast&lt;short&gt;(_mm_cvtepu8_epi16(__to_intrin(__y))));
1347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;codegen&#32;of&#32;`x*y`&#32;is&#32;suboptimal&#32;(as&#32;of&#32;GCC&#32;9.0.1)</emphasis>
1350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__full_size&#32;=&#32;_VVT::_S_full_size;
1351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_Np&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(_V)&#32;&gt;=&#32;16&#32;?&#32;__full_size&#32;/&#32;2&#32;:&#32;8;
1352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_ShortW&#32;=&#32;_SimdWrapper&lt;short,&#32;_Np&gt;;
1353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_ShortW&#32;__even&#32;=&#32;__vector_bitcast&lt;short,&#32;_Np&gt;(__x)
1354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;__vector_bitcast&lt;short,&#32;_Np&gt;(__y);
1355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ShortW&#32;__high_byte&#32;=&#32;_ShortW()._M_data&#32;-&#32;256;
1356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//[&amp;]()&#32;{&#32;asm(&quot;&quot;&#32;:&#32;&quot;+x&quot;(__high_byte._M_data));&#32;}();</emphasis>
1357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_ShortW&#32;__odd
1358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;(__vector_bitcast&lt;short,&#32;_Np&gt;(__x)&#32;&gt;&gt;&#32;8)
1359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;(__vector_bitcast&lt;short,&#32;_Np&gt;(__y)&#32;&amp;&#32;__high_byte._M_data);
1360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_V)&#32;&gt;&#32;2)
1361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_CommonImplX86::_S_blend_avx512(
1362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xaaaa&apos;aaaa&apos;aaaa&apos;aaaaLL,&#32;__vector_bitcast&lt;_Tp&gt;(__even),
1363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;_Tp&gt;(__odd));
1364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse4_1&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_V)&#32;&gt;&#32;2)
1365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_CommonImplX86::_S_blend_intrin(__to_intrin(
1366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__high_byte),
1367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_intrin(__even),
1368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_intrin(__odd));
1369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__to_intrin(
1371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__or(__andnot(__high_byte,&#32;__even),&#32;__odd));
1372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1373 &#32;&#32;&#32;&#32;&#32;&#32;}
1374 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1375 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_multiplies(__x,&#32;__y);
1376 &#32;&#32;&#32;&#32;&#32;&#32;}
1377 
1378 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
1379 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_divides&#32;{{{</emphasis>
1380 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_SIMD_WORKAROUND_PR90993</emphasis>
1381 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
1382 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
1383 &#32;&#32;&#32;&#32;&#32;&#32;_S_divides(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x,&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__y)
1384 &#32;&#32;&#32;&#32;&#32;&#32;{
1385 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__builtin_is_constant_evaluated()
1386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!__builtin_constant_p(__y._M_data))
1387 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;&lt;=&#32;4)
1388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;use&#32;divps&#32;-&#32;codegen&#32;of&#32;`x/y`&#32;is&#32;suboptimal&#32;(as&#32;of&#32;GCC&#32;9.0.1)</emphasis>
1389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note&#32;that&#32;using&#32;floating-point&#32;division&#32;is&#32;likely&#32;to&#32;raise&#32;the</emphasis>
1390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;*Inexact*&#32;exception&#32;flag&#32;and&#32;thus&#32;appears&#32;like&#32;an&#32;invalid</emphasis>
1391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;as-if&quot;&#32;transformation.&#32;However,&#32;C++&#32;doesn&apos;t&#32;specify&#32;how&#32;the</emphasis>
1392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;fpenv&#32;can&#32;be&#32;observed&#32;and&#32;points&#32;to&#32;C.&#32;C&#32;says&#32;that&#32;function</emphasis>
1393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;calls&#32;are&#32;assumed&#32;to&#32;potentially&#32;raise&#32;fp&#32;exceptions,&#32;unless</emphasis>
1394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;documented&#32;otherwise.&#32;Consequently,&#32;operator/,&#32;which&#32;is&#32;a</emphasis>
1395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;function&#32;call,&#32;may&#32;raise&#32;fp&#32;exceptions.</emphasis>
1396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*const&#32;struct&#32;_CsrGuard</emphasis>
1397 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
1398 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;unsigned&#32;_M_data&#32;=&#32;_mm_getcsr();</emphasis>
1399 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CsrGuard()</emphasis>
1400 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
1401 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_setcsr(0x9f80);&#32;//&#32;turn&#32;off&#32;FP&#32;exceptions&#32;and</emphasis>
1402 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flush-to-zero</emphasis>
1403 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
1404 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~_CsrGuard()&#32;{&#32;_mm_setcsr(_M_data);&#32;}</emphasis>
1405 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;__csr;*/</emphasis>
1406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Float&#32;=&#32;conditional_t&lt;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4,&#32;<emphasis role="keywordtype">double</emphasis>,&#32;<emphasis role="keywordtype">float</emphasis>&gt;;
1407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n_intermediate
1408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::min(_Np,&#32;(__have_avx512f&#32;?&#32;64
1409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;__have_avx&#32;&#32;&#32;?&#32;32
1410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;16)
1411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/&#32;sizeof(_Float));
1412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_FloatV&#32;=&#32;__vector_type_t&lt;_Float,&#32;__n_intermediate&gt;;
1413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n_floatv
1414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__div_roundup(_Np,&#32;__n_intermediate);
1415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_R&#32;=&#32;__vector_type_t&lt;_Tp,&#32;_Np&gt;;
1416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__xf&#32;=&#32;__convert_all&lt;_FloatV,&#32;__n_floatv&gt;(__x);
1417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__yf&#32;=&#32;__convert_all&lt;_FloatV,&#32;__n_floatv&gt;(
1418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Abi::__make_padding_nonzero(__as_vector(__y)));
1419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__call_with_n_evaluations&lt;__n_floatv&gt;(
1420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">auto</emphasis>...&#32;__quotients)&#32;{
1421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_convert&lt;_R&gt;(__quotients...);
1422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
1423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;__xf,
1424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;__yf](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;-&gt;&#32;_SimdWrapper&lt;_Float,&#32;__n_intermediate&gt;&#32;{
1425 <emphasis role="preprocessor">#if&#32;!defined&#32;__clang__&#32;&amp;&amp;&#32;__GCC_IEC_559&#32;==&#32;0</emphasis>
1426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;-freciprocal-math&#32;is&#32;active,&#32;using&#32;the&#32;`/`&#32;operator&#32;is</emphasis>
1427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;incorrect&#32;because&#32;it&#32;may&#32;be&#32;translated&#32;to&#32;an&#32;imprecise</emphasis>
1428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;multiplication&#32;with&#32;reciprocal.&#32;We&#32;need&#32;to&#32;use&#32;inline</emphasis>
1429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;assembly&#32;to&#32;force&#32;a&#32;real&#32;division.</emphasis>
1430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_FloatV&#32;__r;
1431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx)&#32;<emphasis role="comment">//&#32;-mno-sse2avx&#32;is&#32;irrelevant</emphasis>
1432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;because&#32;once&#32;-mavx&#32;is&#32;given,&#32;GCC</emphasis>
1433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;emits&#32;VEX&#32;encoded&#32;vdivp[sd]</emphasis>
1434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
1436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">asm</emphasis>(<emphasis role="stringliteral">&quot;vdivpd\t{%2,&#32;%1,&#32;%0|%0,&#32;%1,&#32;%2}&quot;</emphasis>
1437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;=x&quot;</emphasis>(__r)
1438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;x&quot;</emphasis>(__xf[__i]),&#32;<emphasis role="stringliteral">&quot;x&quot;</emphasis>(__yf[__i]));
1439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">asm</emphasis>(<emphasis role="stringliteral">&quot;vdivps\t{%2,&#32;%1,&#32;%0|%0,&#32;%1,&#32;%2}&quot;</emphasis>
1441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;=x&quot;</emphasis>(__r)
1442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;x&quot;</emphasis>(__xf[__i]),&#32;<emphasis role="stringliteral">&quot;x&quot;</emphasis>(__yf[__i]));
1443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__r&#32;=&#32;__xf[__i];
1447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
1448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">asm</emphasis>(<emphasis role="stringliteral">&quot;divpd\t{%1,&#32;%0|%0,&#32;%1}&quot;</emphasis>
1449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;=x&quot;</emphasis>(__r)
1450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;x&quot;</emphasis>(__yf[__i]));
1451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">asm</emphasis>(<emphasis role="stringliteral">&quot;divps\t{%1,&#32;%0|%0,&#32;%1}&quot;</emphasis>
1453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;=x&quot;</emphasis>(__r)
1454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;x&quot;</emphasis>(__yf[__i]));
1455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
1457 <emphasis role="preprocessor">#else</emphasis>
1458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__xf[__i]&#32;/&#32;__yf[__i];
1459 <emphasis role="preprocessor">#endif</emphasis>
1460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
1461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1462 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;64-bit&#32;int&#32;division&#32;is&#32;potentially&#32;optimizable&#32;via&#32;double&#32;division&#32;if</emphasis>
1463 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;the&#32;value&#32;in&#32;__x&#32;is&#32;small&#32;enough&#32;and&#32;the&#32;conversion&#32;between</emphasis>
1464 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;int&lt;-&gt;double&#32;is&#32;efficient&#32;enough:</emphasis>
1465 <emphasis role="comment">&#32;&#32;&#32;&#32;else&#32;if&#32;constexpr&#32;(is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;</emphasis>
1466 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sizeof(_Tp)&#32;==&#32;8)</emphasis>
1467 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
1468 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;constexpr&#32;(__have_sse4_1&#32;&amp;&amp;&#32;sizeof(__x)&#32;==&#32;16)</emphasis>
1469 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
1470 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(_mm_test_all_zeros(__x,&#32;__m128i{0xffe0&apos;0000&apos;0000&apos;0000ull,</emphasis>
1471 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xffe0&apos;0000&apos;0000&apos;0000ull}))</emphasis>
1472 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
1473 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x._M_data&#32;|&#32;0x&#32;__vector_convert&lt;__m128d&gt;(__x._M_data)</emphasis>
1474 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
1475 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
1476 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
1477 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
1478 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_divides(__x,&#32;__y);
1479 &#32;&#32;&#32;&#32;&#32;&#32;}
1480 <emphasis role="preprocessor">&#32;&#32;#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_SIMD_WORKAROUND_PR90993</emphasis>
1481 
1482 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
1483 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_modulus&#32;{{{</emphasis>
1484 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
1485 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
1486 &#32;&#32;&#32;&#32;&#32;&#32;_S_modulus(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x,&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__y)
1487 &#32;&#32;&#32;&#32;&#32;&#32;{
1488 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_is_constant_evaluated()
1489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;__builtin_constant_p(__y._M_data)&#32;||&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;&gt;=&#32;8)
1490 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_modulus(__x,&#32;__y);
1491 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1492 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_minus(__x,&#32;_S_multiplies(__y,&#32;_S_divides(__x,&#32;__y)));
1493 &#32;&#32;&#32;&#32;&#32;&#32;}
1494 
1495 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
1496 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_bit_shift_left&#32;{{{</emphasis>
1497 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Notes&#32;on&#32;UB.&#32;C++2a&#32;[expr.shift]&#32;says:</emphasis>
1498 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-1-&#32;[...]&#32;The&#32;operands&#32;shall&#32;be&#32;of&#32;integral&#32;or&#32;unscoped&#32;enumeration&#32;type</emphasis>
1499 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;and&#32;integral&#32;promotions&#32;are&#32;performed.&#32;The&#32;type&#32;of&#32;the&#32;result&#32;is&#32;that</emphasis>
1500 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;of&#32;the&#32;promoted&#32;left&#32;operand.&#32;The&#32;behavior&#32;is&#32;undefined&#32;if&#32;the&#32;right</emphasis>
1501 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;operand&#32;is&#32;negative,&#32;or&#32;greater&#32;than&#32;or&#32;equal&#32;to&#32;the&#32;width&#32;of&#32;the</emphasis>
1502 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;promoted&#32;left&#32;operand.</emphasis>
1503 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-2-&#32;The&#32;value&#32;of&#32;E1&#32;&lt;&lt;&#32;E2&#32;is&#32;the&#32;unique&#32;value&#32;congruent&#32;to&#32;E1×2^E2&#32;modulo</emphasis>
1504 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;2^N,&#32;where&#32;N&#32;is&#32;the&#32;width&#32;of&#32;the&#32;type&#32;of&#32;the&#32;result.</emphasis>
1505 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
1506 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;C++17&#32;[expr.shift]&#32;says:</emphasis>
1507 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-2-&#32;The&#32;value&#32;of&#32;E1&#32;&lt;&lt;&#32;E2&#32;is&#32;E1&#32;left-shifted&#32;E2&#32;bit&#32;positions;&#32;vacated</emphasis>
1508 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;bits&#32;are&#32;zero-filled.&#32;If&#32;E1&#32;has&#32;an&#32;unsigned&#32;type,&#32;the&#32;value&#32;of&#32;the</emphasis>
1509 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;result&#32;is&#32;E1&#32;×&#32;2^E2&#32;,&#32;reduced&#32;modulo&#32;one&#32;more&#32;than&#32;the&#32;maximum&#32;value</emphasis>
1510 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;representable&#32;in&#32;the&#32;result&#32;type.&#32;Otherwise,&#32;if&#32;E1&#32;has&#32;a&#32;signed&#32;type</emphasis>
1511 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;and&#32;non-negative&#32;value,&#32;and&#32;E1&#32;×&#32;2^E2&#32;is&#32;representable&#32;in&#32;the</emphasis>
1512 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;corresponding&#32;unsigned&#32;type&#32;of&#32;the&#32;result&#32;type,&#32;then&#32;that&#32;value,</emphasis>
1513 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;converted&#32;to&#32;the&#32;result&#32;type,&#32;is&#32;the&#32;resulting&#32;value;&#32;otherwise,&#32;the</emphasis>
1514 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;behavior&#32;is&#32;undefined.</emphasis>
1515 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
1516 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Consequences:</emphasis>
1517 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;With&#32;C++2a&#32;signed&#32;and&#32;unsigned&#32;types&#32;have&#32;the&#32;same&#32;UB</emphasis>
1518 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;characteristics:</emphasis>
1519 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-&#32;left&#32;shift&#32;is&#32;not&#32;UB&#32;for&#32;0&#32;&lt;=&#32;RHS&#32;&lt;&#32;max(32,&#32;#bits(T))</emphasis>
1520 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
1521 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;With&#32;C++17&#32;there&apos;s&#32;little&#32;room&#32;for&#32;optimizations&#32;because&#32;the&#32;standard</emphasis>
1522 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;requires&#32;all&#32;shifts&#32;to&#32;happen&#32;on&#32;promoted&#32;integrals&#32;(i.e.&#32;int).&#32;Thus,</emphasis>
1523 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;short&#32;and&#32;char&#32;shifts&#32;must&#32;assume&#32;shifts&#32;affect&#32;bits&#32;of&#32;neighboring</emphasis>
1524 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;values.</emphasis>
1525 <emphasis role="preprocessor">&#32;&#32;#ifndef&#32;_GLIBCXX_SIMD_NO_SHIFT_OPT</emphasis>
1526 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT&#32;=&#32;_VectorTraits&lt;_Tp&gt;&gt;
1527 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a6ab244f7fbacae0281519328af87a699">_GLIBCXX_CONST</link>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT::type
1528 &#32;&#32;&#32;&#32;&#32;&#32;_S_bit_shift_left(_Tp&#32;__xx,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__y)
1529 &#32;&#32;&#32;&#32;&#32;&#32;{
1530 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_V&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT::type;
1531 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Up&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT::value_type;
1532 &#32;&#32;&#32;&#32;_V&#32;__x&#32;=&#32;__xx;
1533 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__ix&#32;=&#32;__to_intrin(__x);
1534 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_is_constant_evaluated())
1535 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;&lt;&lt;&#32;__y;
1536 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703</emphasis>
1537 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;after&#32;C++17,&#32;signed&#32;shifts&#32;have&#32;no&#32;UB,&#32;and&#32;behave&#32;just&#32;like&#32;unsigned</emphasis>
1538 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;shifts</emphasis>
1539 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;1&#32;&amp;&amp;&#32;is_signed_v&lt;_Up&gt;)
1540 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(
1541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_bit_shift_left(__vector_bitcast&lt;make_unsigned_t&lt;_Up&gt;&gt;(__x),
1542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__y));
1543 <emphasis role="preprocessor">#endif</emphasis>
1544 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;1)
1545 &#32;&#32;&#32;&#32;&#32;&#32;{
1546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(cf.&#32;https://gcc.gnu.org/bugzilla/show_bug.cgi?id=83894)</emphasis>
1547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_constant_p(__y))
1548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__y&#32;==&#32;0)
1550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x;
1551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__y&#32;==&#32;1)
1552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;+&#32;__x;
1553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__y&#32;==&#32;2)
1554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;__x&#32;+&#32;__x;
1556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;+&#32;__x;
1557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__y&#32;&gt;&#32;2&#32;&amp;&amp;&#32;__y&#32;&lt;&#32;8)
1559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__x)&#32;&gt;&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">unsigned</emphasis>))
1561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_UChar&#32;__mask&#32;=&#32;0xff&#32;&lt;&lt;&#32;__y;&#32;<emphasis role="comment">//&#32;precomputed&#32;vector</emphasis>
1563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(
1564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;_UChar&gt;(
1565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;unsigned&gt;(__x)&#32;&lt;&lt;&#32;__y)
1566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&#32;__mask);
1567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;__mask
1571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;(0xff&#32;&amp;&#32;(0xff&#32;&lt;&lt;&#32;__y))&#32;*&#32;0x01010101u;
1572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_V<emphasis role="keyword">&gt;</emphasis>(
1573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__int_for_sizeof_t&lt;_V&gt;<emphasis role="keyword">&gt;</emphasis>(
1574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unsigned(
1575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__int_for_sizeof_t&lt;_V&gt;<emphasis role="keyword">&gt;</emphasis>(__x)
1576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;__y)
1577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&#32;__mask));
1578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__y&#32;&gt;=&#32;8&#32;&amp;&amp;&#32;__y&#32;&lt;&#32;32)
1581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_V();
1582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_unreachable();
1584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;general&#32;strategy&#32;in&#32;the&#32;following:&#32;use&#32;an&#32;sllv&#32;instead&#32;of&#32;sll</emphasis>
1586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;instruction,&#32;because&#32;it&apos;s&#32;2&#32;to&#32;4&#32;times&#32;faster:</emphasis>
1587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw_vl&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__x)&#32;==&#32;16)
1588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(_mm256_cvtepi16_epi8(
1589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_sllv_epi16(_mm256_cvtepi8_epi16(__ix),
1590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_set1_epi16(__y))));
1591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__x)&#32;==&#32;32)
1592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(_mm512_cvtepi16_epi8(
1593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_sllv_epi16(_mm512_cvtepi8_epi16(__ix),
1594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_set1_epi16(__y))));
1595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__x)&#32;==&#32;64)
1596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__shift&#32;=&#32;_mm512_set1_epi16(__y);
1598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(
1599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__concat(_mm512_cvtepi16_epi8(_mm512_sllv_epi16(
1600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_cvtepi8_epi16(__lo256(__ix)),&#32;__shift)),
1601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_cvtepi16_epi8(_mm512_sllv_epi16(
1602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_cvtepi8_epi16(__hi256(__ix)),&#32;__shift))));
1603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx2&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__x)&#32;==&#32;32)
1605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1606 <emphasis role="preprocessor">#if&#32;1</emphasis>
1607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__shift&#32;=&#32;_mm_cvtsi32_si128(__y);
1608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__k
1609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm256_sll_epi16(_mm256_slli_epi16(~__m256i(),&#32;8),&#32;__shift);
1610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__k&#32;|=&#32;_mm256_srli_epi16(__k,&#32;8);
1611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(_mm256_sll_epi32(__ix,&#32;__shift)
1612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&#32;__k);
1613 <emphasis role="preprocessor">#else</emphasis>
1614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Up&#32;__k&#32;=&#32;0xff&#32;&lt;&lt;&#32;__y;
1615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(__vector_bitcast&lt;int&gt;(__x)&#32;&lt;&lt;&#32;__y)
1616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&#32;__k;
1617 <emphasis role="preprocessor">#endif</emphasis>
1618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__shift&#32;=&#32;_mm_cvtsi32_si128(__y);
1622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__k
1623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm_sll_epi16(_mm_slli_epi16(~__m128i(),&#32;8),&#32;__shift);
1624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__k&#32;|=&#32;_mm_srli_epi16(__k,&#32;8);
1625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_V&gt;(_mm_sll_epi16(__ix,&#32;__shift)&#32;&amp;&#32;__k);
1626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1627 &#32;&#32;&#32;&#32;&#32;&#32;}
1628 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;&lt;&lt;&#32;__y;
1629 &#32;&#32;&#32;&#32;&#32;&#32;}
1630 
1631 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT&#32;=&#32;_VectorTraits&lt;_Tp&gt;&gt;
1632 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a6ab244f7fbacae0281519328af87a699">_GLIBCXX_CONST</link>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT::type
1633 &#32;&#32;&#32;&#32;&#32;&#32;_S_bit_shift_left(_Tp&#32;__xx,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT::type&#32;__y)
1634 &#32;&#32;&#32;&#32;&#32;&#32;{
1635 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_V&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT::type;
1636 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Up&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT::value_type;
1637 &#32;&#32;&#32;&#32;_V&#32;__x&#32;=&#32;__xx;
1638 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__ix&#32;=&#32;__to_intrin(__x);
1639 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__iy&#32;=&#32;__to_intrin(__y);
1640 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_is_constant_evaluated())
1641 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;&lt;&lt;&#32;__y;
1642 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703</emphasis>
1643 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;after&#32;C++17,&#32;signed&#32;shifts&#32;have&#32;no&#32;UB,&#32;and&#32;behave&#32;just&#32;like&#32;unsigned</emphasis>
1644 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;shifts</emphasis>
1645 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_signed_v&lt;_Up&gt;)
1646 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(
1647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_bit_shift_left(__vector_bitcast&lt;make_unsigned_t&lt;_Up&gt;&gt;(__x),
1648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;make_unsigned_t&lt;_Up&gt;&gt;(__y)));
1649 <emphasis role="preprocessor">#endif</emphasis>
1650 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;1)
1651 &#32;&#32;&#32;&#32;&#32;&#32;{
1652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>&#32;__ix&#32;==&#32;64&#32;&amp;&amp;&#32;__have_avx512bw)
1653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(__concat(
1654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_cvtepi16_epi8(
1655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_sllv_epi16(_mm512_cvtepu8_epi16(__lo256(__ix)),
1656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_cvtepu8_epi16(__lo256(__iy)))),
1657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_cvtepi16_epi8(
1658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_sllv_epi16(_mm512_cvtepu8_epi16(__hi256(__ix)),
1659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_cvtepu8_epi16(__hi256(__iy))))));
1660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>&#32;__ix&#32;==&#32;32&#32;&amp;&amp;&#32;__have_avx512bw)
1661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(_mm512_cvtepi16_epi8(
1662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_sllv_epi16(_mm512_cvtepu8_epi16(__ix),
1663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_cvtepu8_epi16(__iy))));
1664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>&#32;__x&#32;&lt;=&#32;8&#32;&amp;&amp;&#32;__have_avx512bw_vl)
1665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_V&gt;(
1666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_cvtepi16_epi8(_mm_sllv_epi16(_mm_cvtepu8_epi16(__ix),
1667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_cvtepu8_epi16(__iy))));
1668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>&#32;__ix&#32;==&#32;16&#32;&amp;&amp;&#32;__have_avx512bw_vl)
1669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_V&gt;(_mm256_cvtepi16_epi8(
1670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_sllv_epi16(_mm256_cvtepu8_epi16(__ix),
1671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_cvtepu8_epi16(__iy))));
1672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>&#32;__ix&#32;==&#32;16&#32;&amp;&amp;&#32;__have_avx512bw)
1673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_V&gt;(
1674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lo128(_mm512_cvtepi16_epi8(_mm512_sllv_epi16(
1675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_cvtepu8_epi16(_mm256_castsi128_si256(__ix)),
1676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_cvtepu8_epi16(_mm256_castsi128_si256(__iy))))));
1677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse4_1&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__x)&#32;==&#32;16)
1678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__mask
1680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__vector_bitcast&lt;_Up&gt;(__vector_bitcast&lt;short&gt;(__y)&#32;&lt;&lt;&#32;5);
1681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__x4
1682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__vector_bitcast&lt;_Up&gt;(__vector_bitcast&lt;short&gt;(__x)&#32;&lt;&lt;&#32;4);
1683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x4&#32;&amp;=&#32;char(0xf0);
1684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_V<emphasis role="keyword">&gt;</emphasis>(_CommonImplX86::_S_blend_intrin(
1685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_intrin(__mask),&#32;__to_intrin(__x),&#32;__to_intrin(__x4)));
1686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mask&#32;+=&#32;__mask;
1687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__x2
1688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__vector_bitcast&lt;_Up&gt;(__vector_bitcast&lt;short&gt;(__x)&#32;&lt;&lt;&#32;2);
1689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x2&#32;&amp;=&#32;char(0xfc);
1690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_V<emphasis role="keyword">&gt;</emphasis>(_CommonImplX86::_S_blend_intrin(
1691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_intrin(__mask),&#32;__to_intrin(__x),&#32;__to_intrin(__x2)));
1692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mask&#32;+=&#32;__mask;
1693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__x1&#32;=&#32;__x&#32;+&#32;__x;
1694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_V<emphasis role="keyword">&gt;</emphasis>(_CommonImplX86::_S_blend_intrin(
1695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_intrin(__mask),&#32;__to_intrin(__x),&#32;__to_intrin(__x1)));
1696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x
1697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&#32;((__y&#32;&amp;&#32;char(0xf8))&#32;==&#32;0);&#32;<emphasis role="comment">//&#32;y&#32;&gt;&#32;7&#32;nulls&#32;the&#32;result</emphasis>
1698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__x)&#32;==&#32;16)
1700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__mask
1702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__vector_bitcast&lt;_UChar&gt;(__vector_bitcast&lt;short&gt;(__y)&#32;&lt;&lt;&#32;5);
1703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__x4
1704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__vector_bitcast&lt;_Up&gt;(__vector_bitcast&lt;short&gt;(__x)&#32;&lt;&lt;&#32;4);
1705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x4&#32;&amp;=&#32;char(0xf0);
1706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;__vector_bitcast&lt;_SChar&gt;(__mask)&#32;&lt;&#32;0&#32;?&#32;__x4&#32;:&#32;__x;
1707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mask&#32;+=&#32;__mask;
1708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__x2
1709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__vector_bitcast&lt;_Up&gt;(__vector_bitcast&lt;short&gt;(__x)&#32;&lt;&lt;&#32;2);
1710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x2&#32;&amp;=&#32;char(0xfc);
1711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;__vector_bitcast&lt;_SChar&gt;(__mask)&#32;&lt;&#32;0&#32;?&#32;__x2&#32;:&#32;__x;
1712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mask&#32;+=&#32;__mask;
1713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__x1&#32;=&#32;__x&#32;+&#32;__x;
1714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;__vector_bitcast&lt;_SChar&gt;(__mask)&#32;&lt;&#32;0&#32;?&#32;__x1&#32;:&#32;__x;
1715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x
1716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&#32;((__y&#32;&amp;&#32;char(0xf8))&#32;==&#32;0);&#32;<emphasis role="comment">//&#32;y&#32;&gt;&#32;7&#32;nulls&#32;the&#32;result</emphasis>
1717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;&lt;&lt;&#32;__y;
1720 &#32;&#32;&#32;&#32;&#32;&#32;}
1721 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;2)
1722 &#32;&#32;&#32;&#32;&#32;&#32;{
1723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>&#32;__ix&#32;==&#32;64&#32;&amp;&amp;&#32;__have_avx512bw)
1724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(_mm512_sllv_epi16(__ix,&#32;__iy));
1725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>&#32;__ix&#32;==&#32;32&#32;&amp;&amp;&#32;__have_avx512bw_vl)
1726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(_mm256_sllv_epi16(__ix,&#32;__iy));
1727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>&#32;__ix&#32;==&#32;32&#32;&amp;&amp;&#32;__have_avx512bw)
1728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(
1729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lo256(_mm512_sllv_epi16(_mm512_castsi256_si512(__ix),
1730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_castsi256_si512(__iy))));
1731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>&#32;__ix&#32;==&#32;32&#32;&amp;&amp;&#32;__have_avx2)
1732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__ux&#32;=&#32;__vector_bitcast&lt;unsigned&gt;(__x);
1734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__uy&#32;=&#32;__vector_bitcast&lt;unsigned&gt;(__y);
1735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(<link linkend="__classes_2lib_2include_2avx2intrin_8h_1a0ef549bdb477511f50c537eb535e3f35">_mm256_blend_epi16</link>(
1736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__auto_bitcast(__ux&#32;&lt;&lt;&#32;(__uy&#32;&amp;&#32;0x0000ffffu)),
1737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__auto_bitcast((__ux&#32;&amp;&#32;0xffff0000u)&#32;&lt;&lt;&#32;(__uy&#32;&gt;&gt;&#32;16)),&#32;0xaa));
1738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>&#32;__ix&#32;==&#32;16&#32;&amp;&amp;&#32;__have_avx512bw_vl)
1740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_V&gt;(_mm_sllv_epi16(__ix,&#32;__iy));
1741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>&#32;__ix&#32;==&#32;16&#32;&amp;&amp;&#32;__have_avx512bw)
1742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_V&gt;(
1743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lo128(_mm512_sllv_epi16(_mm512_castsi128_si512(__ix),
1744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_castsi128_si512(__iy))));
1745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>&#32;__ix&#32;==&#32;16&#32;&amp;&amp;&#32;__have_avx2)
1746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__ux&#32;=&#32;__vector_bitcast&lt;unsigned&gt;(__ix);
1748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__uy&#32;=&#32;__vector_bitcast&lt;unsigned&gt;(__iy);
1749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_V&gt;(<link linkend="__classes_2lib_2include_2smmintrin_8h_1a825642c8598f770a50145fb75b4d4f12">_mm_blend_epi16</link>(
1750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__auto_bitcast(__ux&#32;&lt;&lt;&#32;(__uy&#32;&amp;&#32;0x0000ffffu)),
1751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__auto_bitcast((__ux&#32;&amp;&#32;0xffff0000u)&#32;&lt;&lt;&#32;(__uy&#32;&gt;&gt;&#32;16)),&#32;0xaa));
1752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>&#32;__ix&#32;==&#32;16)
1754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Float4&#32;=&#32;__vector_type_t&lt;float,&#32;4&gt;;
1756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Int4&#32;=&#32;__vector_type_t&lt;int,&#32;4&gt;;
1757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_UInt4&#32;=&#32;__vector_type_t&lt;unsigned,&#32;4&gt;;
1758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_UInt4&#32;__yu
1759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_UInt4<emphasis role="keyword">&gt;</emphasis>(__to_intrin(__y&#32;+&#32;(0x3f8&#32;&gt;&gt;&#32;3)));
1760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x
1761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;__intrin_bitcast&lt;_V&gt;(
1762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_convert&lt;_Int4&gt;(_SimdWrapper&lt;float,&#32;4&gt;(
1763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_Float4<emphasis role="keyword">&gt;</emphasis>(__yu&#32;&lt;&lt;&#32;23)))
1764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__vector_convert&lt;_Int4&gt;(_SimdWrapper&lt;float,&#32;4&gt;(
1765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_Float4<emphasis role="keyword">&gt;</emphasis>((__yu&#32;&gt;&gt;&#32;16)&#32;&lt;&lt;&#32;23)))
1766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;16));
1767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
1770 &#32;&#32;&#32;&#32;&#32;&#32;}
1771 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>&#32;__ix&#32;==&#32;16
1772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!__have_avx2)
1773 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;latency&#32;is&#32;suboptimal,&#32;but&#32;throughput&#32;is&#32;at&#32;full&#32;speedup</emphasis>
1774 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_V&gt;(
1775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;unsigned&gt;(__ix)
1776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;__vector_convert&lt;__vector_type16_t&lt;int&gt;&gt;(
1777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdWrapper&lt;float,&#32;4&gt;(__vector_bitcast&lt;float&gt;(
1778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__vector_bitcast&lt;unsigned,&#32;4&gt;(__y)&#32;&lt;&lt;&#32;23)&#32;+&#32;0x3f80&apos;0000))));
1779 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>&#32;__ix&#32;==&#32;16
1780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!__have_avx2)
1781 &#32;&#32;&#32;&#32;&#32;&#32;{
1782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__lo&#32;=&#32;_mm_sll_epi64(__ix,&#32;__iy);
1783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__hi
1784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm_sll_epi64(__ix,&#32;_mm_unpackhi_epi64(__iy,&#32;__iy));
1785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse4_1)
1786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(<link linkend="__classes_2lib_2include_2smmintrin_8h_1a825642c8598f770a50145fb75b4d4f12">_mm_blend_epi16</link>(__lo,&#32;__hi,&#32;0xf0));
1787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(
1789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_move_sd(__vector_bitcast&lt;double&gt;(__hi),
1790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;double&gt;(__lo)));
1791 &#32;&#32;&#32;&#32;&#32;&#32;}
1792 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1793 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;&lt;&lt;&#32;__y;
1794 &#32;&#32;&#32;&#32;&#32;&#32;}
1795 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_SIMD_NO_SHIFT_OPT</emphasis>
1796 
1797 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
1798 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_bit_shift_right&#32;{{{</emphasis>
1799 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_SIMD_NO_SHIFT_OPT</emphasis>
1800 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT&#32;=&#32;_VectorTraits&lt;_Tp&gt;&gt;
1801 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a6ab244f7fbacae0281519328af87a699">_GLIBCXX_CONST</link>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT::type
1802 &#32;&#32;&#32;&#32;&#32;&#32;_S_bit_shift_right(_Tp&#32;__xx,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__y)
1803 &#32;&#32;&#32;&#32;&#32;&#32;{
1804 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_V&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT::type;
1805 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Up&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT::value_type;
1806 &#32;&#32;&#32;&#32;_V&#32;__x&#32;=&#32;__xx;
1807 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__ix&#32;=&#32;__to_intrin(__x);
1808 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_is_constant_evaluated())
1809 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;&gt;&gt;&#32;__y;
1810 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_constant_p(__y)
1811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_unsigned_v&lt;
1812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Up&gt;&#32;&amp;&amp;&#32;__y&#32;&gt;=&#32;<emphasis role="keywordtype">int</emphasis>(<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;*&#32;__CHAR_BIT__))
1813 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_V();
1814 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;1&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Up&gt;)&#32;<emphasis role="comment">//{{{</emphasis>
1815 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_V&gt;(__vector_bitcast&lt;_UShort&gt;(__ix)&#32;&gt;&gt;&#32;__y)
1816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&#32;_Up(0xff&#32;&gt;&gt;&#32;__y);
1817 &#32;&#32;&#32;&#32;<emphasis role="comment">//}}}</emphasis>
1818 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;1&#32;&amp;&amp;&#32;is_signed_v&lt;_Up&gt;)&#32;<emphasis role="comment">//{{{</emphasis>
1819 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_V&gt;(
1820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__vector_bitcast&lt;_UShort&gt;(__vector_bitcast&lt;short&gt;(__ix)
1821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;&gt;&#32;(__y&#32;+&#32;8))
1822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;8)
1823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__vector_bitcast&lt;_UShort&gt;(
1824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;short&gt;(__vector_bitcast&lt;_UShort&gt;(__ix)&#32;&lt;&lt;&#32;8)
1825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;&gt;&#32;__y)
1826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;&gt;&#32;8));
1827 &#32;&#32;&#32;&#32;<emphasis role="comment">//}}}</emphasis>
1828 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;GCC&#32;optimizes&#32;sizeof&#32;==&#32;2,&#32;4,&#32;and&#32;unsigned&#32;8&#32;as&#32;expected</emphasis>
1829 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8&#32;&amp;&amp;&#32;is_signed_v&lt;_Up&gt;)&#32;<emphasis role="comment">//{{{</emphasis>
1830 &#32;&#32;&#32;&#32;&#32;&#32;{
1831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__y&#32;&gt;&#32;32)
1832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__intrin_bitcast&lt;_V&gt;(__vector_bitcast&lt;int&gt;(__ix)&#32;&gt;&gt;&#32;32)
1833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&#32;_Up(0xffff&apos;ffff&apos;0000&apos;0000ull))
1834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;__vector_bitcast&lt;_Up&gt;(
1835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;int&gt;(__vector_bitcast&lt;_ULLong&gt;(__ix)
1836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;&gt;&#32;32)
1837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;&gt;&#32;(__y&#32;-&#32;32));
1838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_V&gt;(__vector_bitcast&lt;_ULLong&gt;(__ix)
1840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;&gt;&#32;__y)
1841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;__vector_bitcast&lt;_Up&gt;(
1842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;int&gt;(__ix&#32;&amp;&#32;-0x8000&apos;0000&apos;0000&apos;0000ll)
1843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;&gt;&#32;__y);
1844 &#32;&#32;&#32;&#32;&#32;&#32;}
1845 &#32;&#32;&#32;&#32;<emphasis role="comment">//}}}</emphasis>
1846 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1847 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;&gt;&gt;&#32;__y;
1848 &#32;&#32;&#32;&#32;&#32;&#32;}
1849 
1850 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT&#32;=&#32;_VectorTraits&lt;_Tp&gt;&gt;
1851 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a6ab244f7fbacae0281519328af87a699">_GLIBCXX_CONST</link>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT::type
1852 &#32;&#32;&#32;&#32;&#32;&#32;_S_bit_shift_right(_Tp&#32;__xx,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT::type&#32;__y)
1853 &#32;&#32;&#32;&#32;&#32;&#32;{
1854 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_V&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT::type;
1855 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Up&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT::value_type;
1856 &#32;&#32;&#32;&#32;_V&#32;__x&#32;=&#32;__xx;
1857 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__ix&#32;=&#32;__to_intrin(__x);
1858 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__iy&#32;=&#32;__to_intrin(__y);
1859 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_is_constant_evaluated()
1860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;(__builtin_constant_p(__x)&#32;&amp;&amp;&#32;__builtin_constant_p(__y)))
1861 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;&gt;&gt;&#32;__y;
1862 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;1)&#32;<emphasis role="comment">//{{{</emphasis>
1863 &#32;&#32;&#32;&#32;&#32;&#32;{
1864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__x)&#32;&lt;=&#32;8&#32;&amp;&amp;&#32;__have_avx512bw_vl)
1865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_V&gt;(_mm_cvtepi16_epi8(
1866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_signed_v&lt;_Up&gt;&#32;?&#32;_mm_srav_epi16(_mm_cvtepi8_epi16(__ix),
1867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_cvtepi8_epi16(__iy))
1868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_mm_srlv_epi16(_mm_cvtepu8_epi16(__ix),
1869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_cvtepu8_epi16(__iy))));
1870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__x)&#32;==&#32;16&#32;&amp;&amp;&#32;__have_avx512bw_vl)
1871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_V&gt;(_mm256_cvtepi16_epi8(
1872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_signed_v&lt;_Up&gt;
1873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;_mm256_srav_epi16(_mm256_cvtepi8_epi16(__ix),
1874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_cvtepi8_epi16(__iy))
1875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_mm256_srlv_epi16(_mm256_cvtepu8_epi16(__ix),
1876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_cvtepu8_epi16(__iy))));
1877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__x)&#32;==&#32;32&#32;&amp;&amp;&#32;__have_avx512bw)
1878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(_mm512_cvtepi16_epi8(
1879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_signed_v&lt;_Up&gt;
1880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;_mm512_srav_epi16(_mm512_cvtepi8_epi16(__ix),
1881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_cvtepi8_epi16(__iy))
1882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_mm512_srlv_epi16(_mm512_cvtepu8_epi16(__ix),
1883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_cvtepu8_epi16(__iy))));
1884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__x)&#32;==&#32;64&#32;&amp;&amp;&#32;is_signed_v&lt;_Up&gt;)
1885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(_mm512_mask_mov_epi8(
1886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_srav_epi16(__ix,&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1ae7614732e96c950530a6481122b288bb">_mm512_srli_epi16</link>(__iy,&#32;8)),
1887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x5555&apos;5555&apos;5555&apos;5555ull,
1888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_srav_epi16(
1889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1aaab24f02a5d47b9b119536ac1667352e">_mm512_slli_epi16</link>(__ix,&#32;8),
1890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_maskz_add_epi8(0x5555&apos;5555&apos;5555&apos;5555ull,&#32;__iy,
1891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_set1_epi16(8)))));
1892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__x)&#32;==&#32;64&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Up&gt;)
1893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(_mm512_mask_mov_epi8(
1894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_srlv_epi16(__ix,&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1ae7614732e96c950530a6481122b288bb">_mm512_srli_epi16</link>(__iy,&#32;8)),
1895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x5555&apos;5555&apos;5555&apos;5555ull,
1896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_srlv_epi16(
1897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_maskz_mov_epi8(0x5555&apos;5555&apos;5555&apos;5555ull,&#32;__ix),
1898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_maskz_mov_epi8(0x5555&apos;5555&apos;5555&apos;5555ull,&#32;__iy))));
1899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;This&#32;has&#32;better&#32;throughput&#32;but&#32;higher&#32;latency&#32;than&#32;the&#32;impl&#32;below</emphasis>
1900 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else&#32;if&#32;constexpr&#32;(__have_avx2&#32;&amp;&amp;&#32;sizeof(__x)&#32;==&#32;16&#32;&amp;&amp;</emphasis>
1901 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_unsigned_v&lt;_Up&gt;)</emphasis>
1902 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
1903 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;auto&#32;__shorts&#32;=&#32;__to_intrin(_S_bit_shift_right(</emphasis>
1904 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;_UShort&gt;(_mm256_cvtepu8_epi16(__ix)),</emphasis>
1905 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;_UShort&gt;(_mm256_cvtepu8_epi16(__iy))));</emphasis>
1906 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;__vector_bitcast&lt;_Up&gt;(</emphasis>
1907 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_packus_epi16(__lo128(__shorts),&#32;__hi128(__shorts)));</emphasis>
1908 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
1909 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
1910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx2&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__x)&#32;&gt;&#32;8)
1911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;following&#32;uses&#32;vpsr[al]vd,&#32;which&#32;requires&#32;AVX2</emphasis>
1912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_signed_v&lt;_Up&gt;)
1913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;r3&#32;=&#32;__vector_bitcast&lt;_UInt&gt;(
1915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__vector_bitcast&lt;int&gt;(__x)
1916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;&gt;&#32;(__vector_bitcast&lt;_UInt&gt;(__y)&#32;&gt;&gt;&#32;24)))
1917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&#32;0xff000000u;
1918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;r2
1919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__vector_bitcast&lt;_UInt&gt;(
1920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((__vector_bitcast&lt;int&gt;(__x)&#32;&lt;&lt;&#32;8)
1921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;&gt;&#32;((__vector_bitcast&lt;_UInt&gt;(__y)&#32;&lt;&lt;&#32;8)&#32;&gt;&gt;&#32;24)))
1922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&#32;0xff000000u;
1923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;r1
1924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__vector_bitcast&lt;_UInt&gt;(
1925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((__vector_bitcast&lt;int&gt;(__x)&#32;&lt;&lt;&#32;16)
1926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;&gt;&#32;((__vector_bitcast&lt;_UInt&gt;(__y)&#32;&lt;&lt;&#32;16)&#32;&gt;&gt;&#32;24)))
1927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&#32;0xff000000u;
1928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;r0&#32;=&#32;__vector_bitcast&lt;_UInt&gt;(
1929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__vector_bitcast&lt;int&gt;(__x)&#32;&lt;&lt;&#32;24)
1930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;&gt;&#32;((__vector_bitcast&lt;_UInt&gt;(__y)&#32;&lt;&lt;&#32;24)&#32;&gt;&gt;&#32;24));
1931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(r3&#32;|&#32;(r2&#32;&gt;&gt;&#32;8)&#32;|&#32;(r1&#32;&gt;&gt;&#32;16)
1932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(r0&#32;&gt;&gt;&#32;24));
1933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;r3&#32;=&#32;(__vector_bitcast&lt;_UInt&gt;(__x)
1937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;&gt;&#32;(__vector_bitcast&lt;_UInt&gt;(__y)&#32;&gt;&gt;&#32;24))
1938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&#32;0xff000000u;
1939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;r2
1940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;((__vector_bitcast&lt;_UInt&gt;(__x)&#32;&lt;&lt;&#32;8)
1941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;&gt;&#32;((__vector_bitcast&lt;_UInt&gt;(__y)&#32;&lt;&lt;&#32;8)&#32;&gt;&gt;&#32;24))
1942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&#32;0xff000000u;
1943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;r1
1944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;((__vector_bitcast&lt;_UInt&gt;(__x)&#32;&lt;&lt;&#32;16)
1945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;&gt;&#32;((__vector_bitcast&lt;_UInt&gt;(__y)&#32;&lt;&lt;&#32;16)&#32;&gt;&gt;&#32;24))
1946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&#32;0xff000000u;
1947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;r0
1948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;(__vector_bitcast&lt;_UInt&gt;(__x)&#32;&lt;&lt;&#32;24)
1949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;&gt;&#32;((__vector_bitcast&lt;_UInt&gt;(__y)&#32;&lt;&lt;&#32;24)&#32;&gt;&gt;&#32;24);
1950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(r3&#32;|&#32;(r2&#32;&gt;&gt;&#32;8)&#32;|&#32;(r1&#32;&gt;&gt;&#32;16)
1951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(r0&#32;&gt;&gt;&#32;24));
1952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse4_1
1954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__x)&#32;&gt;&#32;2)
1955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__x128&#32;=&#32;__vector_bitcast&lt;_Up&gt;(__ix);
1957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__mask
1958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__vector_bitcast&lt;_Up&gt;(__vector_bitcast&lt;_UShort&gt;(__iy)&#32;&lt;&lt;&#32;5);
1959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__x4&#32;=&#32;__vector_bitcast&lt;_Up&gt;(
1960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__vector_bitcast&lt;_UShort&gt;(__x128)&#32;&gt;&gt;&#32;4)&#32;&amp;&#32;_UShort(0xff0f));
1961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x128&#32;=&#32;__vector_bitcast&lt;_Up&gt;(_CommonImplX86::_S_blend_intrin(
1962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_intrin(__mask),&#32;__to_intrin(__x128),&#32;__to_intrin(__x4)));
1963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mask&#32;+=&#32;__mask;
1964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__x2&#32;=&#32;__vector_bitcast&lt;_Up&gt;(
1965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__vector_bitcast&lt;_UShort&gt;(__x128)&#32;&gt;&gt;&#32;2)&#32;&amp;&#32;_UShort(0xff3f));
1966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x128&#32;=&#32;__vector_bitcast&lt;_Up&gt;(_CommonImplX86::_S_blend_intrin(
1967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_intrin(__mask),&#32;__to_intrin(__x128),&#32;__to_intrin(__x2)));
1968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mask&#32;+=&#32;__mask;
1969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__x1&#32;=&#32;__vector_bitcast&lt;_Up&gt;(
1970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__vector_bitcast&lt;_UShort&gt;(__x128)&#32;&gt;&gt;&#32;1)&#32;&amp;&#32;_UShort(0xff7f));
1971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x128&#32;=&#32;__vector_bitcast&lt;_Up&gt;(_CommonImplX86::_S_blend_intrin(
1972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_intrin(__mask),&#32;__to_intrin(__x128),&#32;__to_intrin(__x1)));
1973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_V&gt;(
1974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x128
1975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&#32;((__vector_bitcast&lt;_Up&gt;(__iy)&#32;&amp;&#32;<emphasis role="keywordtype">char</emphasis>(0xf8))
1976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;==&#32;0));&#32;<emphasis role="comment">//&#32;y&#32;&gt;&#32;7&#32;nulls&#32;the&#32;result</emphasis>
1977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse4_1
1979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_signed_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__x)&#32;&gt;&#32;2)
1980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__mask&#32;=&#32;__vector_bitcast&lt;_UChar&gt;(
1982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;_UShort&gt;(__iy)&#32;&lt;&lt;&#32;5);
1983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__maskl&#32;=&#32;[&amp;]()&#32;{
1984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__to_intrin(__vector_bitcast&lt;_UShort&gt;(__mask)&#32;&lt;&lt;&#32;8);
1985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
1986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__xh&#32;=&#32;__vector_bitcast&lt;short&gt;(__ix);
1987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__xl&#32;=&#32;__vector_bitcast&lt;short&gt;(__ix)&#32;&lt;&lt;&#32;8;
1988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__xh4&#32;=&#32;__xh&#32;&gt;&gt;&#32;4;
1989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__xl4&#32;=&#32;__xl&#32;&gt;&gt;&#32;4;
1990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__xh&#32;=&#32;__vector_bitcast&lt;short&gt;(_CommonImplX86::_S_blend_intrin(
1991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_intrin(__mask),&#32;__to_intrin(__xh),&#32;__to_intrin(__xh4)));
1992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__xl&#32;=&#32;__vector_bitcast&lt;short&gt;(
1993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CommonImplX86::_S_blend_intrin(__maskl(),&#32;__to_intrin(__xl),
1994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_intrin(__xl4)));
1995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mask&#32;+=&#32;__mask;
1996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__xh2&#32;=&#32;__xh&#32;&gt;&gt;&#32;2;
1997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__xl2&#32;=&#32;__xl&#32;&gt;&gt;&#32;2;
1998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__xh&#32;=&#32;__vector_bitcast&lt;short&gt;(_CommonImplX86::_S_blend_intrin(
1999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_intrin(__mask),&#32;__to_intrin(__xh),&#32;__to_intrin(__xh2)));
2000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__xl&#32;=&#32;__vector_bitcast&lt;short&gt;(
2001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CommonImplX86::_S_blend_intrin(__maskl(),&#32;__to_intrin(__xl),
2002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_intrin(__xl2)));
2003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mask&#32;+=&#32;__mask;
2004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__xh1&#32;=&#32;__xh&#32;&gt;&gt;&#32;1;
2005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__xl1&#32;=&#32;__xl&#32;&gt;&gt;&#32;1;
2006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__xh&#32;=&#32;__vector_bitcast&lt;short&gt;(_CommonImplX86::_S_blend_intrin(
2007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_intrin(__mask),&#32;__to_intrin(__xh),&#32;__to_intrin(__xh1)));
2008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__xl&#32;=&#32;__vector_bitcast&lt;short&gt;(
2009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CommonImplX86::_S_blend_intrin(__maskl(),&#32;__to_intrin(__xl),
2010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_intrin(__xl1)));
2011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_V&gt;(
2012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__vector_bitcast&lt;_Up&gt;((__xh&#32;&amp;&#32;<emphasis role="keywordtype">short</emphasis>(0xff00)))
2013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;__vector_bitcast&lt;_Up&gt;(__vector_bitcast&lt;_UShort&gt;(__xl)
2014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;&gt;&#32;8))
2015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&#32;((__vector_bitcast&lt;_Up&gt;(__iy)&#32;&amp;&#32;<emphasis role="keywordtype">char</emphasis>(0xf8))
2016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;==&#32;0));&#32;<emphasis role="comment">//&#32;y&#32;&gt;&#32;7&#32;nulls&#32;the&#32;result</emphasis>
2017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_unsigned_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__x)&#32;&gt;&#32;2)&#32;<emphasis role="comment">//&#32;SSE2</emphasis>
2019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__mask
2021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__vector_bitcast&lt;_Up&gt;(__vector_bitcast&lt;_UShort&gt;(__y)&#32;&lt;&lt;&#32;5);
2022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__x4&#32;=&#32;__vector_bitcast&lt;_Up&gt;(
2023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__vector_bitcast&lt;_UShort&gt;(__x)&#32;&gt;&gt;&#32;4)&#32;&amp;&#32;_UShort(0xff0f));
2024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;__mask&#32;&gt;&#32;0x7f&#32;?&#32;__x4&#32;:&#32;__x;
2025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mask&#32;+=&#32;__mask;
2026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__x2&#32;=&#32;__vector_bitcast&lt;_Up&gt;(
2027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__vector_bitcast&lt;_UShort&gt;(__x)&#32;&gt;&gt;&#32;2)&#32;&amp;&#32;_UShort(0xff3f));
2028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;__mask&#32;&gt;&#32;0x7f&#32;?&#32;__x2&#32;:&#32;__x;
2029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mask&#32;+=&#32;__mask;
2030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__x1&#32;=&#32;__vector_bitcast&lt;_Up&gt;(
2031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__vector_bitcast&lt;_UShort&gt;(__x)&#32;&gt;&gt;&#32;1)&#32;&amp;&#32;_UShort(0xff7f));
2032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;__mask&#32;&gt;&#32;0x7f&#32;?&#32;__x1&#32;:&#32;__x;
2033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x
2034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&#32;((__y&#32;&amp;&#32;char(0xf8))&#32;==&#32;0);&#32;<emphasis role="comment">//&#32;y&#32;&gt;&#32;7&#32;nulls&#32;the&#32;result</emphasis>
2035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__x)&#32;&gt;&#32;2)&#32;<emphasis role="comment">//&#32;signed&#32;SSE2</emphasis>
2037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_signed_v&lt;_Up&gt;);
2039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__maskh&#32;=&#32;__vector_bitcast&lt;_UShort&gt;(__y)&#32;&lt;&lt;&#32;5;
2040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__maskl&#32;=&#32;__vector_bitcast&lt;_UShort&gt;(__y)&#32;&lt;&lt;&#32;(5&#32;+&#32;8);
2041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__xh&#32;=&#32;__vector_bitcast&lt;short&gt;(__x);
2042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__xl&#32;=&#32;__vector_bitcast&lt;short&gt;(__x)&#32;&lt;&lt;&#32;8;
2043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__xh4&#32;=&#32;__xh&#32;&gt;&gt;&#32;4;
2044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__xl4&#32;=&#32;__xl&#32;&gt;&gt;&#32;4;
2045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__xh&#32;=&#32;__maskh&#32;&gt;&#32;0x7fff&#32;?&#32;__xh4&#32;:&#32;__xh;
2046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__xl&#32;=&#32;__maskl&#32;&gt;&#32;0x7fff&#32;?&#32;__xl4&#32;:&#32;__xl;
2047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__maskh&#32;+=&#32;__maskh;
2048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__maskl&#32;+=&#32;__maskl;
2049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__xh2&#32;=&#32;__xh&#32;&gt;&gt;&#32;2;
2050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__xl2&#32;=&#32;__xl&#32;&gt;&gt;&#32;2;
2051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__xh&#32;=&#32;__maskh&#32;&gt;&#32;0x7fff&#32;?&#32;__xh2&#32;:&#32;__xh;
2052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__xl&#32;=&#32;__maskl&#32;&gt;&#32;0x7fff&#32;?&#32;__xl2&#32;:&#32;__xl;
2053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__maskh&#32;+=&#32;__maskh;
2054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__maskl&#32;+=&#32;__maskl;
2055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__xh1&#32;=&#32;__xh&#32;&gt;&gt;&#32;1;
2056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__xl1&#32;=&#32;__xl&#32;&gt;&gt;&#32;1;
2057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__xh&#32;=&#32;__maskh&#32;&gt;&#32;0x7fff&#32;?&#32;__xh1&#32;:&#32;__xh;
2058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__xl&#32;=&#32;__maskl&#32;&gt;&#32;0x7fff&#32;?&#32;__xl1&#32;:&#32;__xl;
2059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;__vector_bitcast&lt;_Up&gt;((__xh&#32;&amp;&#32;<emphasis role="keywordtype">short</emphasis>(0xff00)))
2060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;__vector_bitcast&lt;_Up&gt;(__vector_bitcast&lt;_UShort&gt;(__xl)
2061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;&gt;&#32;8);
2062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x
2063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&#32;((__y&#32;&amp;&#32;char(0xf8))&#32;==&#32;0);&#32;<emphasis role="comment">//&#32;y&#32;&gt;&#32;7&#32;nulls&#32;the&#32;result</emphasis>
2064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;&gt;&gt;&#32;__y;
2067 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//}}}</emphasis>
2068 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;2&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__x)&#32;&gt;=&#32;4)&#32;<emphasis role="comment">//{{{</emphasis>
2069 &#32;&#32;&#32;&#32;&#32;&#32;{
2070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">auto</emphasis>&#32;__blend_0xaa&#32;=&#32;[](<emphasis role="keyword">auto</emphasis>&#32;__a,&#32;<emphasis role="keyword">auto</emphasis>&#32;__b)&#32;{
2071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__a)&#32;==&#32;16)
2072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2smmintrin_8h_1a825642c8598f770a50145fb75b4d4f12">_mm_blend_epi16</link>(__to_intrin(__a),&#32;__to_intrin(__b),
2073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xaa);
2074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__a)&#32;==&#32;32)
2075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx2intrin_8h_1a0ef549bdb477511f50c537eb535e3f35">_mm256_blend_epi16</link>(__to_intrin(__a),&#32;__to_intrin(__b),
2076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xaa);
2077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__a)&#32;==&#32;64)
2078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1abd25b0cdee6ccd003e7ddc414987f1b6">_mm512_mask_blend_epi16</link>(0xaaaa&apos;aaaaU,&#32;__to_intrin(__a),
2079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_intrin(__b));
2080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;decltype(__a)&gt;();
2082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
2083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw_vl&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;&lt;=&#32;16)
2084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_V&gt;(is_signed_v&lt;_Up&gt;
2085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;_mm_srav_epi16(__ix,&#32;__iy)
2086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_mm_srlv_epi16(__ix,&#32;__iy));
2087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw_vl&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;32)
2088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(is_signed_v&lt;_Up&gt;
2089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;_mm256_srav_epi16(__ix,&#32;__iy)
2090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_mm256_srlv_epi16(__ix,&#32;__iy));
2091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;64)
2092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(is_signed_v&lt;_Up&gt;
2093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;_mm512_srav_epi16(__ix,&#32;__iy)
2094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_mm512_srlv_epi16(__ix,&#32;__iy));
2095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx2&#32;&amp;&amp;&#32;is_signed_v&lt;_Up&gt;)
2096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_V&gt;(
2097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__blend_0xaa(((__vector_bitcast&lt;int&gt;(__ix)&#32;&lt;&lt;&#32;16)
2098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;&gt;&#32;(__vector_bitcast&lt;int&gt;(__iy)&#32;&amp;&#32;0xffffu))
2099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;&gt;&#32;16,
2100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;int&gt;(__ix)
2101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;&gt;&#32;(__vector_bitcast&lt;int&gt;(__iy)&#32;&gt;&gt;&#32;16)));
2102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx2&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Up&gt;)
2103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_V&gt;(
2104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__blend_0xaa((__vector_bitcast&lt;_UInt&gt;(__ix)&#32;&amp;&#32;0xffffu)
2105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;&gt;&#32;(__vector_bitcast&lt;_UInt&gt;(__iy)&#32;&amp;&#32;0xffffu),
2106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;_UInt&gt;(__ix)
2107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;&gt;&#32;(__vector_bitcast&lt;_UInt&gt;(__iy)&#32;&gt;&gt;&#32;16)));
2108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse4_1)
2109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__mask&#32;=&#32;__vector_bitcast&lt;_UShort&gt;(__iy);
2111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__x128&#32;=&#32;__vector_bitcast&lt;_Up&gt;(__ix);
2112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//__mask&#32;*=&#32;0x0808;</emphasis>
2113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mask&#32;=&#32;(__mask&#32;&lt;&lt;&#32;3)&#32;|&#32;(__mask&#32;&lt;&lt;&#32;11);
2114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;do&#32;__x128&#32;=&#32;0&#32;where&#32;__y[4]&#32;is&#32;set</emphasis>
2115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x128&#32;=&#32;__vector_bitcast&lt;_Up&gt;(
2116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_blendv_epi8(__to_intrin(__x128),&#32;__m128i(),
2117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_intrin(__mask)));
2118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;do&#32;__x128&#32;=&gt;&gt;&#32;8&#32;where&#32;__y[3]&#32;is&#32;set</emphasis>
2119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x128&#32;=&#32;__vector_bitcast&lt;_Up&gt;(
2120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_blendv_epi8(__to_intrin(__x128),&#32;__to_intrin(__x128&#32;&gt;&gt;&#32;8),
2121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_intrin(__mask&#32;+=&#32;__mask)));
2122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;do&#32;__x128&#32;=&gt;&gt;&#32;4&#32;where&#32;__y[2]&#32;is&#32;set</emphasis>
2123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x128&#32;=&#32;__vector_bitcast&lt;_Up&gt;(
2124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_blendv_epi8(__to_intrin(__x128),&#32;__to_intrin(__x128&#32;&gt;&gt;&#32;4),
2125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_intrin(__mask&#32;+=&#32;__mask)));
2126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;do&#32;__x128&#32;=&gt;&gt;&#32;2&#32;where&#32;__y[1]&#32;is&#32;set</emphasis>
2127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x128&#32;=&#32;__vector_bitcast&lt;_Up&gt;(
2128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_blendv_epi8(__to_intrin(__x128),&#32;__to_intrin(__x128&#32;&gt;&gt;&#32;2),
2129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_intrin(__mask&#32;+=&#32;__mask)));
2130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;do&#32;__x128&#32;=&gt;&gt;&#32;1&#32;where&#32;__y[0]&#32;is&#32;set</emphasis>
2131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_V&gt;(
2132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_blendv_epi8(__to_intrin(__x128),&#32;__to_intrin(__x128&#32;&gt;&gt;&#32;1),
2133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_intrin(__mask&#32;+&#32;__mask)));
2134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__k&#32;=&#32;__vector_bitcast&lt;_UShort&gt;(__iy)&#32;&lt;&lt;&#32;11;
2138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__x128&#32;=&#32;__vector_bitcast&lt;_Up&gt;(__ix);
2139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__mask&#32;=&#32;[](__vector_type16_t&lt;_UShort&gt;&#32;__kk)&#32;{
2140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;short&gt;(__kk)&#32;&lt;&#32;0;
2141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
2142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;do&#32;__x128&#32;=&#32;0&#32;where&#32;__y[4]&#32;is&#32;set</emphasis>
2143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x128&#32;=&#32;__mask(__k)&#32;?&#32;<emphasis role="keyword">decltype</emphasis>(__x128)()&#32;:&#32;__x128;
2144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;do&#32;__x128&#32;=&gt;&gt;&#32;8&#32;where&#32;__y[3]&#32;is&#32;set</emphasis>
2145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x128&#32;=&#32;__mask(__k&#32;+=&#32;__k)&#32;?&#32;__x128&#32;&gt;&gt;&#32;8&#32;:&#32;__x128;
2146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;do&#32;__x128&#32;=&gt;&gt;&#32;4&#32;where&#32;__y[2]&#32;is&#32;set</emphasis>
2147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x128&#32;=&#32;__mask(__k&#32;+=&#32;__k)&#32;?&#32;__x128&#32;&gt;&gt;&#32;4&#32;:&#32;__x128;
2148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;do&#32;__x128&#32;=&gt;&gt;&#32;2&#32;where&#32;__y[1]&#32;is&#32;set</emphasis>
2149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x128&#32;=&#32;__mask(__k&#32;+=&#32;__k)&#32;?&#32;__x128&#32;&gt;&gt;&#32;2&#32;:&#32;__x128;
2150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;do&#32;__x128&#32;=&gt;&gt;&#32;1&#32;where&#32;__y[0]&#32;is&#32;set</emphasis>
2151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_V&gt;(__mask(__k&#32;+&#32;__k)&#32;?&#32;__x128&#32;&gt;&gt;&#32;1
2152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;__x128);
2153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2154 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//}}}</emphasis>
2155 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4&#32;&amp;&amp;&#32;!__have_avx2)&#32;<emphasis role="comment">//{{{</emphasis>
2156 &#32;&#32;&#32;&#32;&#32;&#32;{
2157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_unsigned_v&lt;_Up&gt;)
2158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;x&#32;&gt;&gt;&#32;y&#32;==&#32;x&#32;*&#32;2^-y&#32;==&#32;(x&#32;*&#32;2^(31-y))&#32;&gt;&gt;&#32;31</emphasis>
2160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128&#32;__factor_f&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__m128<emphasis role="keyword">&gt;</emphasis>(
2161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x4f00&apos;0000u&#32;-&#32;(__vector_bitcast&lt;unsigned,&#32;4&gt;(__y)&#32;&lt;&lt;&#32;23));
2162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;__factor
2163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__builtin_constant_p(__factor_f)
2164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;__to_intrin(
2165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__make_vector&lt;unsigned&gt;(__factor_f[0],&#32;__factor_f[1],
2166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__factor_f[2],&#32;__factor_f[3]))
2167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_mm_cvttps_epi32(__factor_f);
2168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__r02
2169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm_srli_epi64(_mm_mul_epu32(__ix,&#32;__factor),&#32;31);
2170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__r13&#32;=&#32;_mm_mul_epu32(<link linkend="__classes_2lib_2include_2emmintrin_8h_1a6184a7deed3960a115ba3b83ea370d44">_mm_srli_si128</link>(__ix,&#32;4),
2171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2emmintrin_8h_1a6184a7deed3960a115ba3b83ea370d44">_mm_srli_si128</link>(__factor,&#32;4));
2172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse4_1)
2173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_V&gt;(
2174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2smmintrin_8h_1a825642c8598f770a50145fb75b4d4f12">_mm_blend_epi16</link>(_mm_slli_epi64(__r13,&#32;1),&#32;__r02,&#32;0x33));
2175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_V&gt;(
2177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__r02&#32;|&#32;<link linkend="__classes_2lib_2include_2emmintrin_8h_1a2091290bb42bdb544fbc4c652afc2751">_mm_slli_si128</link>(_mm_srli_epi64(__r13,&#32;31),&#32;4));
2178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__shift&#32;=&#32;[](<emphasis role="keyword">auto</emphasis>&#32;__a,&#32;<emphasis role="keyword">auto</emphasis>&#32;__b)&#32;{
2182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_signed_v&lt;_Up&gt;)
2183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_sra_epi32(__a,&#32;__b);
2184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_srl_epi32(__a,&#32;__b);
2186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
2187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__r0
2188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__shift(__ix,&#32;_mm_unpacklo_epi32(__iy,&#32;__m128i()));
2189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__r1&#32;=&#32;__shift(__ix,&#32;_mm_srli_epi64(__iy,&#32;32));
2190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__r2
2191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__shift(__ix,&#32;_mm_unpackhi_epi32(__iy,&#32;__m128i()));
2192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__r3&#32;=&#32;__shift(__ix,&#32;<link linkend="__classes_2lib_2include_2emmintrin_8h_1a6184a7deed3960a115ba3b83ea370d44">_mm_srli_si128</link>(__iy,&#32;12));
2193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse4_1)
2194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_V&gt;(
2195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2smmintrin_8h_1a825642c8598f770a50145fb75b4d4f12">_mm_blend_epi16</link>(<link linkend="__classes_2lib_2include_2smmintrin_8h_1a825642c8598f770a50145fb75b4d4f12">_mm_blend_epi16</link>(__r1,&#32;__r0,&#32;0x3),
2196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2smmintrin_8h_1a825642c8598f770a50145fb75b4d4f12">_mm_blend_epi16</link>(__r3,&#32;__r2,&#32;0x30),&#32;0xf0));
2197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_V&gt;(_mm_unpacklo_epi64(
2199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpacklo_epi32(__r0,&#32;<link linkend="__classes_2lib_2include_2emmintrin_8h_1a6184a7deed3960a115ba3b83ea370d44">_mm_srli_si128</link>(__r1,&#32;4)),
2200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpackhi_epi32(__r2,&#32;<link linkend="__classes_2lib_2include_2emmintrin_8h_1a6184a7deed3960a115ba3b83ea370d44">_mm_srli_si128</link>(__r3,&#32;4))));
2201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2202 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//}}}</emphasis>
2203 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2204 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;&gt;&gt;&#32;__y;
2205 &#32;&#32;&#32;&#32;&#32;&#32;}
2206 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_SIMD_NO_SHIFT_OPT</emphasis>
2207 
2208 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2209 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;compares&#32;{{{</emphasis>
2210 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_equal_to&#32;{{{</emphasis>
2211 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2212 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_MaskMember&lt;_Tp&gt;
2213 &#32;&#32;&#32;&#32;&#32;&#32;_S_equal_to(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x,&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__y)
2214 &#32;&#32;&#32;&#32;&#32;&#32;{
2215 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_abi&lt;_Abi&gt;())&#32;<emphasis role="comment">//&#32;{{{</emphasis>
2216 &#32;&#32;&#32;&#32;&#32;&#32;{
2217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_is_constant_evaluated()
2218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;(__x._M_is_constprop()&#32;&amp;&amp;&#32;__y._M_is_constprop()))
2219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_MaskImpl::_S_to_bits(
2220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__as_wrapper&lt;_Np&gt;(__x._M_data&#32;==&#32;__y._M_data));
2221 
2222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__k1&#32;=&#32;_Abi::template&#32;_S_implicit_mask_intrin&lt;_Tp&gt;();
2223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__xi&#32;=&#32;__to_intrin(__x);
2224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__yi&#32;=&#32;__to_intrin(__y);
2225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_floating_point_v&lt;_Tp&gt;)
2226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
2228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a72a2791801b39824228b7a57ea3701c7">_mm512_mask_cmp_pd_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a9dac2ea83695373391286f7f38cf3741">_CMP_EQ_OQ</link>);
2229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
2230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1ca6fffb4f3e5d441ca9a151a3865942">_mm512_mask_cmp_ps_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a9dac2ea83695373391286f7f38cf3741">_CMP_EQ_OQ</link>);
2231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
2232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1a01355bda4b22419ecafbfbc7c1649bf3">_mm256_mask_cmp_pd_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a9dac2ea83695373391286f7f38cf3741">_CMP_EQ_OQ</link>);
2233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
2234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1a3fe6c0f31663d0b15529cff1a84bbc75">_mm256_mask_cmp_ps_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a9dac2ea83695373391286f7f38cf3741">_CMP_EQ_OQ</link>);
2235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
2236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1af2bfae924e7b46bd0aff1e2be600f36e">_mm_mask_cmp_pd_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a9dac2ea83695373391286f7f38cf3741">_CMP_EQ_OQ</link>);
2237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
2238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1a3f3a71c8b952953013acebc46ac267c9">_mm_mask_cmp_ps_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a9dac2ea83695373391286f7f38cf3741">_CMP_EQ_OQ</link>);
2239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
2241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
2243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm512_mask_cmpeq_epi64_mask(__k1,&#32;__xi,&#32;__yi);
2244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
2245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm512_mask_cmpeq_epi32_mask(__k1,&#32;__xi,&#32;__yi);
2246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2)
2247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm512_mask_cmpeq_epi16_mask(__k1,&#32;__xi,&#32;__yi);
2248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1)
2249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm512_mask_cmpeq_epi8_mask(__k1,&#32;__xi,&#32;__yi);
2250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
2251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_mask_cmpeq_epi64_mask(__k1,&#32;__xi,&#32;__yi);
2252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
2253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_mask_cmpeq_epi32_mask(__k1,&#32;__xi,&#32;__yi);
2254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2)
2255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_mask_cmpeq_epi16_mask(__k1,&#32;__xi,&#32;__yi);
2256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1)
2257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_mask_cmpeq_epi8_mask(__k1,&#32;__xi,&#32;__yi);
2258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
2259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_mask_cmpeq_epi64_mask(__k1,&#32;__xi,&#32;__yi);
2260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
2261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_mask_cmpeq_epi32_mask(__k1,&#32;__xi,&#32;__yi);
2262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2)
2263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_mask_cmpeq_epi16_mask(__k1,&#32;__xi,&#32;__yi);
2264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1)
2265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_mask_cmpeq_epi8_mask(__k1,&#32;__xi,&#32;__yi);
2266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
2268 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2269 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_is_constant_evaluated())
2270 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_equal_to(__x,&#32;__y);
2271 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__x)&#32;==&#32;8)&#32;<emphasis role="comment">//&#32;{{{</emphasis>
2272 &#32;&#32;&#32;&#32;&#32;&#32;{
2273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__r128&#32;=&#32;__vector_bitcast&lt;_Tp,&#32;16&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&gt;(__x)
2274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;==&#32;__vector_bitcast&lt;_Tp,&#32;16&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&gt;(__y);
2275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_MaskMember&lt;_Tp&gt;&#32;__r64;
2276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(&amp;__r64._M_data,&#32;&amp;__r128,&#32;<emphasis role="keyword">sizeof</emphasis>(__r64));
2277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r64;
2278 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2279 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2280 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_equal_to(__x,&#32;__y);
2281 &#32;&#32;&#32;&#32;&#32;&#32;}
2282 
2283 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2284 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_not_equal_to&#32;{{{</emphasis>
2285 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2286 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_MaskMember&lt;_Tp&gt;
2287 &#32;&#32;&#32;&#32;&#32;&#32;_S_not_equal_to(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x,&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__y)
2288 &#32;&#32;&#32;&#32;&#32;&#32;{
2289 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_abi&lt;_Abi&gt;())&#32;<emphasis role="comment">//&#32;{{{</emphasis>
2290 &#32;&#32;&#32;&#32;&#32;&#32;{
2291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_is_constant_evaluated()
2292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;(__x._M_is_constprop()&#32;&amp;&amp;&#32;__y._M_is_constprop()))
2293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_MaskImpl::_S_to_bits(
2294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__as_wrapper&lt;_Np&gt;(__x._M_data&#32;!=&#32;__y._M_data));
2295 
2296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__k1&#32;=&#32;_Abi::template&#32;_S_implicit_mask_intrin&lt;_Tp&gt;();
2297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__xi&#32;=&#32;__to_intrin(__x);
2298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__yi&#32;=&#32;__to_intrin(__y);
2299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_floating_point_v&lt;_Tp&gt;)
2300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
2302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a72a2791801b39824228b7a57ea3701c7">_mm512_mask_cmp_pd_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a68f2d5732ae1d80791f0c0196b55ab8f">_CMP_NEQ_UQ</link>);
2303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
2304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1ca6fffb4f3e5d441ca9a151a3865942">_mm512_mask_cmp_ps_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a68f2d5732ae1d80791f0c0196b55ab8f">_CMP_NEQ_UQ</link>);
2305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
2306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1a01355bda4b22419ecafbfbc7c1649bf3">_mm256_mask_cmp_pd_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a68f2d5732ae1d80791f0c0196b55ab8f">_CMP_NEQ_UQ</link>);
2307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
2308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1a3fe6c0f31663d0b15529cff1a84bbc75">_mm256_mask_cmp_ps_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a68f2d5732ae1d80791f0c0196b55ab8f">_CMP_NEQ_UQ</link>);
2309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
2310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1af2bfae924e7b46bd0aff1e2be600f36e">_mm_mask_cmp_pd_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a68f2d5732ae1d80791f0c0196b55ab8f">_CMP_NEQ_UQ</link>);
2311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
2312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1a3f3a71c8b952953013acebc46ac267c9">_mm_mask_cmp_ps_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a68f2d5732ae1d80791f0c0196b55ab8f">_CMP_NEQ_UQ</link>);
2313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
2315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
2317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;~_mm512_mask_cmpeq_epi64_mask(__k1,&#32;__xi,&#32;__yi);
2318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
2319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;~_mm512_mask_cmpeq_epi32_mask(__k1,&#32;__xi,&#32;__yi);
2320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2)
2321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;~_mm512_mask_cmpeq_epi16_mask(__k1,&#32;__xi,&#32;__yi);
2322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1)
2323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;~_mm512_mask_cmpeq_epi8_mask(__k1,&#32;__xi,&#32;__yi);
2324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
2325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;~_mm256_mask_cmpeq_epi64_mask(__k1,&#32;__xi,&#32;__yi);
2326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
2327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;~_mm256_mask_cmpeq_epi32_mask(__k1,&#32;__xi,&#32;__yi);
2328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2)
2329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;~_mm256_mask_cmpeq_epi16_mask(__k1,&#32;__xi,&#32;__yi);
2330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1)
2331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;~_mm256_mask_cmpeq_epi8_mask(__k1,&#32;__xi,&#32;__yi);
2332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
2333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;~_mm_mask_cmpeq_epi64_mask(__k1,&#32;__xi,&#32;__yi);
2334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
2335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;~_mm_mask_cmpeq_epi32_mask(__k1,&#32;__xi,&#32;__yi);
2336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2)
2337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;~_mm_mask_cmpeq_epi16_mask(__k1,&#32;__xi,&#32;__yi);
2338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1)
2339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;~_mm_mask_cmpeq_epi8_mask(__k1,&#32;__xi,&#32;__yi);
2340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
2342 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2343 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(!__builtin_is_constant_evaluated()&#32;<emphasis role="comment">//&#32;{{{</emphasis>
2344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__x)&#32;==&#32;8)
2345 &#32;&#32;&#32;&#32;&#32;&#32;{
2346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__r128&#32;=&#32;__vector_bitcast&lt;_Tp,&#32;16&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&gt;(__x)
2347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!=&#32;__vector_bitcast&lt;_Tp,&#32;16&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&gt;(__y);
2348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_MaskMember&lt;_Tp&gt;&#32;__r64;
2349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(&amp;__r64._M_data,&#32;&amp;__r128,&#32;<emphasis role="keyword">sizeof</emphasis>(__r64));
2350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r64;
2351 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2352 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2353 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_not_equal_to(__x,&#32;__y);
2354 &#32;&#32;&#32;&#32;&#32;&#32;}
2355 
2356 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2357 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_less&#32;{{{</emphasis>
2358 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2359 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_MaskMember&lt;_Tp&gt;
2360 &#32;&#32;&#32;&#32;&#32;&#32;_S_less(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x,&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__y)
2361 &#32;&#32;&#32;&#32;&#32;&#32;{
2362 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_abi&lt;_Abi&gt;())&#32;<emphasis role="comment">//&#32;{{{</emphasis>
2363 &#32;&#32;&#32;&#32;&#32;&#32;{
2364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_is_constant_evaluated()
2365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;(__x._M_is_constprop()&#32;&amp;&amp;&#32;__y._M_is_constprop()))
2366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_MaskImpl::_S_to_bits(
2367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__as_wrapper&lt;_Np&gt;(__x._M_data&#32;&lt;&#32;__y._M_data));
2368 
2369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__k1&#32;=&#32;_Abi::template&#32;_S_implicit_mask_intrin&lt;_Tp&gt;();
2370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__xi&#32;=&#32;__to_intrin(__x);
2371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__yi&#32;=&#32;__to_intrin(__y);
2372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;64)
2373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Tp,&#32;float&gt;)
2375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1ca6fffb4f3e5d441ca9a151a3865942">_mm512_mask_cmp_ps_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a8acc16d00029c2cbb343a302de2d2cbd">_CMP_LT_OS</link>);
2376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Tp,&#32;double&gt;)
2377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a72a2791801b39824228b7a57ea3701c7">_mm512_mask_cmp_pd_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a8acc16d00029c2cbb343a302de2d2cbd">_CMP_LT_OS</link>);
2378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1)
2379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm512_mask_cmplt_epi8_mask(__k1,&#32;__xi,&#32;__yi);
2380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2)
2381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm512_mask_cmplt_epi16_mask(__k1,&#32;__xi,&#32;__yi);
2382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
2383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm512_mask_cmplt_epi32_mask(__k1,&#32;__xi,&#32;__yi);
2384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
2385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm512_mask_cmplt_epi64_mask(__k1,&#32;__xi,&#32;__yi);
2386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1)
2387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm512_mask_cmplt_epu8_mask(__k1,&#32;__xi,&#32;__yi);
2388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2)
2389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm512_mask_cmplt_epu16_mask(__k1,&#32;__xi,&#32;__yi);
2390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
2391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm512_mask_cmplt_epu32_mask(__k1,&#32;__xi,&#32;__yi);
2392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
2393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm512_mask_cmplt_epu64_mask(__k1,&#32;__xi,&#32;__yi);
2394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
2396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32)
2398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Tp,&#32;float&gt;)
2400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1a3fe6c0f31663d0b15529cff1a84bbc75">_mm256_mask_cmp_ps_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a8acc16d00029c2cbb343a302de2d2cbd">_CMP_LT_OS</link>);
2401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Tp,&#32;double&gt;)
2402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1a01355bda4b22419ecafbfbc7c1649bf3">_mm256_mask_cmp_pd_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a8acc16d00029c2cbb343a302de2d2cbd">_CMP_LT_OS</link>);
2403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1)
2404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_mask_cmplt_epi8_mask(__k1,&#32;__xi,&#32;__yi);
2405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2)
2406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_mask_cmplt_epi16_mask(__k1,&#32;__xi,&#32;__yi);
2407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
2408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_mask_cmplt_epi32_mask(__k1,&#32;__xi,&#32;__yi);
2409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
2410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_mask_cmplt_epi64_mask(__k1,&#32;__xi,&#32;__yi);
2411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1)
2412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_mask_cmplt_epu8_mask(__k1,&#32;__xi,&#32;__yi);
2413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2)
2414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_mask_cmplt_epu16_mask(__k1,&#32;__xi,&#32;__yi);
2415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
2416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_mask_cmplt_epu32_mask(__k1,&#32;__xi,&#32;__yi);
2417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
2418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_mask_cmplt_epu64_mask(__k1,&#32;__xi,&#32;__yi);
2419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
2421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16)
2423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Tp,&#32;float&gt;)
2425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1a3f3a71c8b952953013acebc46ac267c9">_mm_mask_cmp_ps_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a8acc16d00029c2cbb343a302de2d2cbd">_CMP_LT_OS</link>);
2426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Tp,&#32;double&gt;)
2427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1af2bfae924e7b46bd0aff1e2be600f36e">_mm_mask_cmp_pd_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a8acc16d00029c2cbb343a302de2d2cbd">_CMP_LT_OS</link>);
2428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1)
2429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_mask_cmplt_epi8_mask(__k1,&#32;__xi,&#32;__yi);
2430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2)
2431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_mask_cmplt_epi16_mask(__k1,&#32;__xi,&#32;__yi);
2432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
2433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_mask_cmplt_epi32_mask(__k1,&#32;__xi,&#32;__yi);
2434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
2435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_mask_cmplt_epi64_mask(__k1,&#32;__xi,&#32;__yi);
2436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1)
2437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_mask_cmplt_epu8_mask(__k1,&#32;__xi,&#32;__yi);
2438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2)
2439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_mask_cmplt_epu16_mask(__k1,&#32;__xi,&#32;__yi);
2440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
2441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_mask_cmplt_epu32_mask(__k1,&#32;__xi,&#32;__yi);
2442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
2443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_mask_cmplt_epu64_mask(__k1,&#32;__xi,&#32;__yi);
2444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
2446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
2449 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2450 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(!__builtin_is_constant_evaluated()&#32;<emphasis role="comment">//&#32;{{{</emphasis>
2451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__x)&#32;==&#32;8)
2452 &#32;&#32;&#32;&#32;&#32;&#32;{
2453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__r128&#32;=&#32;__vector_bitcast&lt;_Tp,&#32;16&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&gt;(__x)
2454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&#32;__vector_bitcast&lt;_Tp,&#32;16&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&gt;(__y);
2455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_MaskMember&lt;_Tp&gt;&#32;__r64;
2456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(&amp;__r64._M_data,&#32;&amp;__r128,&#32;<emphasis role="keyword">sizeof</emphasis>(__r64));
2457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r64;
2458 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2459 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2460 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_less(__x,&#32;__y);
2461 &#32;&#32;&#32;&#32;&#32;&#32;}
2462 
2463 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2464 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_less_equal&#32;{{{</emphasis>
2465 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2466 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_MaskMember&lt;_Tp&gt;
2467 &#32;&#32;&#32;&#32;&#32;&#32;_S_less_equal(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x,&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__y)
2468 &#32;&#32;&#32;&#32;&#32;&#32;{
2469 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_abi&lt;_Abi&gt;())&#32;<emphasis role="comment">//&#32;{{{</emphasis>
2470 &#32;&#32;&#32;&#32;&#32;&#32;{
2471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_is_constant_evaluated()
2472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;(__x._M_is_constprop()&#32;&amp;&amp;&#32;__y._M_is_constprop()))
2473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_MaskImpl::_S_to_bits(
2474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__as_wrapper&lt;_Np&gt;(__x._M_data&#32;&lt;=&#32;__y._M_data));
2475 
2476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__k1&#32;=&#32;_Abi::template&#32;_S_implicit_mask_intrin&lt;_Tp&gt;();
2477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__xi&#32;=&#32;__to_intrin(__x);
2478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__yi&#32;=&#32;__to_intrin(__y);
2479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;64)
2480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Tp,&#32;float&gt;)
2482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1ca6fffb4f3e5d441ca9a151a3865942">_mm512_mask_cmp_ps_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a3a821a0fb578f35429b73d0b5cb146cb">_CMP_LE_OS</link>);
2483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Tp,&#32;double&gt;)
2484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a72a2791801b39824228b7a57ea3701c7">_mm512_mask_cmp_pd_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a3a821a0fb578f35429b73d0b5cb146cb">_CMP_LE_OS</link>);
2485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1)
2486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm512_mask_cmple_epi8_mask(__k1,&#32;__xi,&#32;__yi);
2487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2)
2488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm512_mask_cmple_epi16_mask(__k1,&#32;__xi,&#32;__yi);
2489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
2490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm512_mask_cmple_epi32_mask(__k1,&#32;__xi,&#32;__yi);
2491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
2492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm512_mask_cmple_epi64_mask(__k1,&#32;__xi,&#32;__yi);
2493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1)
2494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm512_mask_cmple_epu8_mask(__k1,&#32;__xi,&#32;__yi);
2495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2)
2496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm512_mask_cmple_epu16_mask(__k1,&#32;__xi,&#32;__yi);
2497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
2498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm512_mask_cmple_epu32_mask(__k1,&#32;__xi,&#32;__yi);
2499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
2500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm512_mask_cmple_epu64_mask(__k1,&#32;__xi,&#32;__yi);
2501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
2503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32)
2505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Tp,&#32;float&gt;)
2507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1a3fe6c0f31663d0b15529cff1a84bbc75">_mm256_mask_cmp_ps_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a3a821a0fb578f35429b73d0b5cb146cb">_CMP_LE_OS</link>);
2508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Tp,&#32;double&gt;)
2509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1a01355bda4b22419ecafbfbc7c1649bf3">_mm256_mask_cmp_pd_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a3a821a0fb578f35429b73d0b5cb146cb">_CMP_LE_OS</link>);
2510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1)
2511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_mask_cmple_epi8_mask(__k1,&#32;__xi,&#32;__yi);
2512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2)
2513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_mask_cmple_epi16_mask(__k1,&#32;__xi,&#32;__yi);
2514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
2515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_mask_cmple_epi32_mask(__k1,&#32;__xi,&#32;__yi);
2516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
2517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_mask_cmple_epi64_mask(__k1,&#32;__xi,&#32;__yi);
2518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1)
2519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_mask_cmple_epu8_mask(__k1,&#32;__xi,&#32;__yi);
2520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2)
2521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_mask_cmple_epu16_mask(__k1,&#32;__xi,&#32;__yi);
2522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
2523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_mask_cmple_epu32_mask(__k1,&#32;__xi,&#32;__yi);
2524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
2525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_mask_cmple_epu64_mask(__k1,&#32;__xi,&#32;__yi);
2526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
2528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16)
2530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Tp,&#32;float&gt;)
2532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1a3f3a71c8b952953013acebc46ac267c9">_mm_mask_cmp_ps_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a3a821a0fb578f35429b73d0b5cb146cb">_CMP_LE_OS</link>);
2533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Tp,&#32;double&gt;)
2534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1af2bfae924e7b46bd0aff1e2be600f36e">_mm_mask_cmp_pd_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a3a821a0fb578f35429b73d0b5cb146cb">_CMP_LE_OS</link>);
2535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1)
2536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_mask_cmple_epi8_mask(__k1,&#32;__xi,&#32;__yi);
2537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2)
2538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_mask_cmple_epi16_mask(__k1,&#32;__xi,&#32;__yi);
2539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
2540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_mask_cmple_epi32_mask(__k1,&#32;__xi,&#32;__yi);
2541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
2542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_mask_cmple_epi64_mask(__k1,&#32;__xi,&#32;__yi);
2543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1)
2544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_mask_cmple_epu8_mask(__k1,&#32;__xi,&#32;__yi);
2545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2)
2546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_mask_cmple_epu16_mask(__k1,&#32;__xi,&#32;__yi);
2547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
2548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_mask_cmple_epu32_mask(__k1,&#32;__xi,&#32;__yi);
2549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
2550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_mask_cmple_epu64_mask(__k1,&#32;__xi,&#32;__yi);
2551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
2553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
2556 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2557 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(!__builtin_is_constant_evaluated()&#32;<emphasis role="comment">//&#32;{{{</emphasis>
2558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__x)&#32;==&#32;8)
2559 &#32;&#32;&#32;&#32;&#32;&#32;{
2560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__r128&#32;=&#32;__vector_bitcast&lt;_Tp,&#32;16&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&gt;(__x)
2561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;=&#32;__vector_bitcast&lt;_Tp,&#32;16&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&gt;(__y);
2562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_MaskMember&lt;_Tp&gt;&#32;__r64;
2563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(&amp;__r64._M_data,&#32;&amp;__r128,&#32;<emphasis role="keyword">sizeof</emphasis>(__r64));
2564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r64;
2565 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2566 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2567 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_less_equal(__x,&#32;__y);
2568 &#32;&#32;&#32;&#32;&#32;&#32;}
2569 
2570 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}&#32;}}}</emphasis>
2571 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;negation&#32;{{{</emphasis>
2572 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2573 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_MaskMember&lt;_Tp&gt;
2574 &#32;&#32;&#32;&#32;&#32;&#32;_S_negate(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
2575 &#32;&#32;&#32;&#32;&#32;&#32;{
2576 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_abi&lt;_Abi&gt;())
2577 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_equal_to(__x,&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;());
2578 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2579 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_negate(__x);
2580 &#32;&#32;&#32;&#32;&#32;&#32;}
2581 
2582 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2583 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;math&#32;{{{</emphasis>
2584 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::_S_abs;
2585 
2586 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_sqrt&#32;{{{</emphasis>
2587 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2588 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
2589 &#32;&#32;&#32;&#32;&#32;&#32;_S_sqrt(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x)
2590 &#32;&#32;&#32;&#32;&#32;&#32;{
2591 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_sse_ps&lt;_Tp,&#32;_Np&gt;())
2592 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__auto_bitcast(_mm_sqrt_ps(__to_intrin(__x)));
2593 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_sse_pd&lt;_Tp,&#32;_Np&gt;())
2594 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_sqrt_pd(__x);
2595 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx_ps&lt;_Tp,&#32;_Np&gt;())
2596 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_sqrt_ps(__x);
2597 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx_pd&lt;_Tp,&#32;_Np&gt;())
2598 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_sqrt_pd(__x);
2599 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_ps&lt;_Tp,&#32;_Np&gt;())
2600 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm512_sqrt_ps(__x);
2601 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_pd&lt;_Tp,&#32;_Np&gt;())
2602 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm512_sqrt_pd(__x);
2603 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2604 &#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
2605 &#32;&#32;&#32;&#32;&#32;&#32;}
2606 
2607 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2608 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_ldexp&#32;{{{</emphasis>
2609 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2610 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
2611 &#32;&#32;&#32;&#32;&#32;&#32;_S_ldexp(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x,
2612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__fixed_size_storage_t&lt;int,&#32;_Np&gt;&#32;__exp)
2613 &#32;&#32;&#32;&#32;&#32;&#32;{
2614 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__x)&#32;==&#32;64&#32;||&#32;__have_avx512vl)
2615 &#32;&#32;&#32;&#32;&#32;&#32;{
2616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__xi&#32;=&#32;__to_intrin(__x);
2617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdConverter&lt;int,&#32;simd_abi::fixed_size&lt;_Np&gt;,&#32;_Tp,&#32;_Abi&gt;
2618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cvt;
2619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__expi&#32;=&#32;__to_intrin(__cvt(__exp));
2620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Up&#32;=&#32;__bool_storage_member_type_t&lt;_Np&gt;;
2621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Up&#32;__k1&#32;=&#32;_Np&#32;&lt;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;*&#32;__CHAR_BIT__&#32;?&#32;_Up((1ULL&#32;&lt;&lt;&#32;_Np)&#32;-&#32;1)&#32;:&#32;~_Up();
2622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16)
2623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
2625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_maskz_scalef_pd(__k1,&#32;__xi,&#32;__expi);
2626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_maskz_scalef_ps(__k1,&#32;__xi,&#32;__expi);
2628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32)
2630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
2632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_maskz_scalef_pd(__k1,&#32;__xi,&#32;__expi);
2633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_maskz_scalef_ps(__k1,&#32;__xi,&#32;__expi);
2635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;64);
2639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
2640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm512_maskz_scalef_pd(__k1,&#32;__xi,&#32;__expi);
2641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm512_maskz_scalef_ps(__k1,&#32;__xi,&#32;__expi);
2643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2644 &#32;&#32;&#32;&#32;&#32;&#32;}
2645 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2646 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_ldexp(__x,&#32;__exp);
2647 &#32;&#32;&#32;&#32;&#32;&#32;}
2648 
2649 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2650 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_trunc&#32;{{{</emphasis>
2651 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2652 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
2653 &#32;&#32;&#32;&#32;&#32;&#32;_S_trunc(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x)
2654 &#32;&#32;&#32;&#32;&#32;&#32;{
2655 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_ps&lt;_Tp,&#32;_Np&gt;())
2656 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1ac8678fe4aafdc6ede3da208b9fa61d50">_mm512_roundscale_ps</link>(__x,&#32;0x0b);
2657 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_pd&lt;_Tp,&#32;_Np&gt;())
2658 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a244d617f9ae4b94e7120ff6d53ca64e2">_mm512_roundscale_pd</link>(__x,&#32;0x0b);
2659 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx_ps&lt;_Tp,&#32;_Np&gt;())
2660 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a82f2460ed791e0e1e22436820ffc3778">_mm256_round_ps</link>(__x,&#32;0xb);
2661 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx_pd&lt;_Tp,&#32;_Np&gt;())
2662 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a903a3ca080847864b051bd3ffc5c56f3">_mm256_round_pd</link>(__x,&#32;0xb);
2663 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse4_1&#32;&amp;&amp;&#32;__is_sse_ps&lt;_Tp,&#32;_Np&gt;())
2664 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__auto_bitcast(<link linkend="__classes_2lib_2include_2smmintrin_8h_1ae902862ff2eb7b8de2fadd432ca7a947">_mm_round_ps</link>(__to_intrin(__x),&#32;0xb));
2665 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse4_1&#32;&amp;&amp;&#32;__is_sse_pd&lt;_Tp,&#32;_Np&gt;())
2666 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2smmintrin_8h_1a37c7e5426ef6d1cac4da15f7b211f303">_mm_round_pd</link>(__x,&#32;0xb);
2667 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_sse_ps&lt;_Tp,&#32;_Np&gt;())
2668 &#32;&#32;&#32;&#32;&#32;&#32;{
2669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__truncated
2670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm_cvtepi32_ps(_mm_cvttps_epi32(__to_intrin(__x)));
2671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__no_fractional_values
2672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__vector_bitcast&lt;int&gt;(__vector_bitcast&lt;_UInt&gt;(__to_intrin(__x))
2673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&#32;0x7f800000u)
2674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&#32;0x4b000000;&#32;<emphasis role="comment">//&#32;the&#32;exponent&#32;is&#32;so&#32;large&#32;that&#32;no&#32;mantissa&#32;bits</emphasis>
2675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;signify&#32;fractional&#32;values&#32;(0x3f8&#32;+&#32;23*8&#32;=</emphasis>
2676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0x4b0)</emphasis>
2677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__no_fractional_values&#32;?&#32;__truncated&#32;:&#32;__to_intrin(__x);
2678 &#32;&#32;&#32;&#32;&#32;&#32;}
2679 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2680 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_trunc(__x);
2681 &#32;&#32;&#32;&#32;&#32;&#32;}
2682 
2683 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2684 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_round&#32;{{{</emphasis>
2685 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2686 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
2687 &#32;&#32;&#32;&#32;&#32;&#32;_S_round(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x)
2688 &#32;&#32;&#32;&#32;&#32;&#32;{
2689 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note&#32;that&#32;_MM_FROUND_TO_NEAREST_INT&#32;rounds&#32;ties&#32;to&#32;even,&#32;not&#32;away</emphasis>
2690 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;from&#32;zero&#32;as&#32;required&#32;by&#32;std::round.&#32;Therefore&#32;this&#32;function&#32;is&#32;more</emphasis>
2691 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;complicated.</emphasis>
2692 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_V&#32;=&#32;__vector_type_t&lt;_Tp,&#32;_Np&gt;;
2693 &#32;&#32;&#32;&#32;_V&#32;__truncated;
2694 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_ps&lt;_Tp,&#32;_Np&gt;())
2695 &#32;&#32;&#32;&#32;&#32;&#32;__truncated&#32;=&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1ac8678fe4aafdc6ede3da208b9fa61d50">_mm512_roundscale_ps</link>(__x._M_data,&#32;0x0b);
2696 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_pd&lt;_Tp,&#32;_Np&gt;())
2697 &#32;&#32;&#32;&#32;&#32;&#32;__truncated&#32;=&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a244d617f9ae4b94e7120ff6d53ca64e2">_mm512_roundscale_pd</link>(__x._M_data,&#32;0x0b);
2698 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx_ps&lt;_Tp,&#32;_Np&gt;())
2699 &#32;&#32;&#32;&#32;&#32;&#32;__truncated&#32;=&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a82f2460ed791e0e1e22436820ffc3778">_mm256_round_ps</link>(__x._M_data,
2700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2smmintrin_8h_1adbfdff6c2d5957027953ffef4ac81de4">_MM_FROUND_TO_ZERO</link>&#32;|&#32;<link linkend="__classes_2lib_2include_2smmintrin_8h_1afd61685784e27df0e9c78307cb0a173a">_MM_FROUND_NO_EXC</link>);
2701 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx_pd&lt;_Tp,&#32;_Np&gt;())
2702 &#32;&#32;&#32;&#32;&#32;&#32;__truncated&#32;=&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a903a3ca080847864b051bd3ffc5c56f3">_mm256_round_pd</link>(__x._M_data,
2703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2smmintrin_8h_1adbfdff6c2d5957027953ffef4ac81de4">_MM_FROUND_TO_ZERO</link>&#32;|&#32;<link linkend="__classes_2lib_2include_2smmintrin_8h_1afd61685784e27df0e9c78307cb0a173a">_MM_FROUND_NO_EXC</link>);
2704 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse4_1&#32;&amp;&amp;&#32;__is_sse_ps&lt;_Tp,&#32;_Np&gt;())
2705 &#32;&#32;&#32;&#32;&#32;&#32;__truncated&#32;=&#32;__auto_bitcast(
2706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2smmintrin_8h_1ae902862ff2eb7b8de2fadd432ca7a947">_mm_round_ps</link>(__to_intrin(__x),
2707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2smmintrin_8h_1adbfdff6c2d5957027953ffef4ac81de4">_MM_FROUND_TO_ZERO</link>&#32;|&#32;<link linkend="__classes_2lib_2include_2smmintrin_8h_1afd61685784e27df0e9c78307cb0a173a">_MM_FROUND_NO_EXC</link>));
2708 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse4_1&#32;&amp;&amp;&#32;__is_sse_pd&lt;_Tp,&#32;_Np&gt;())
2709 &#32;&#32;&#32;&#32;&#32;&#32;__truncated
2710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__classes_2lib_2include_2smmintrin_8h_1a37c7e5426ef6d1cac4da15f7b211f303">_mm_round_pd</link>(__x._M_data,&#32;<link linkend="__classes_2lib_2include_2smmintrin_8h_1adbfdff6c2d5957027953ffef4ac81de4">_MM_FROUND_TO_ZERO</link>&#32;|&#32;<link linkend="__classes_2lib_2include_2smmintrin_8h_1afd61685784e27df0e9c78307cb0a173a">_MM_FROUND_NO_EXC</link>);
2711 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_sse_ps&lt;_Tp,&#32;_Np&gt;())
2712 &#32;&#32;&#32;&#32;&#32;&#32;__truncated&#32;=&#32;__auto_bitcast(
2713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_cvtepi32_ps(_mm_cvttps_epi32(__to_intrin(__x))));
2714 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2715 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_round(__x);
2716 
2717 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;x&#32;&lt;&#32;0&#32;=&gt;&#32;truncated&#32;&lt;=&#32;0&#32;&amp;&amp;&#32;truncated&#32;&gt;=&#32;x&#32;=&gt;&#32;x&#32;-&#32;truncated&#32;&lt;=&#32;0</emphasis>
2718 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;x&#32;&gt;&#32;0&#32;=&gt;&#32;truncated&#32;&gt;=&#32;0&#32;&amp;&amp;&#32;truncated&#32;&lt;=&#32;x&#32;=&gt;&#32;x&#32;-&#32;truncated&#32;&gt;=&#32;0</emphasis>
2719 
2720 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_V&#32;__rounded
2721 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__truncated
2722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;(__and(_S_absmask&lt;_V&gt;,&#32;__x._M_data&#32;-&#32;__truncated)&#32;&gt;=&#32;_Tp(.5)
2723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;__or(__and(_S_signmask&lt;_V&gt;,&#32;__x._M_data),&#32;_V()&#32;+&#32;1)
2724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_V());
2725 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse4_1)
2726 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__rounded;
2727 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;adjust&#32;for&#32;missing&#32;range&#32;in&#32;cvttps_epi32</emphasis>
2728 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__and(_S_absmask&lt;_V&gt;,&#32;__x._M_data)&#32;&lt;&#32;0x1p23f&#32;?&#32;__rounded
2729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;__x._M_data;
2730 &#32;&#32;&#32;&#32;&#32;&#32;}
2731 
2732 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2733 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_nearbyint&#32;{{{</emphasis>
2734 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT&#32;=&#32;_VectorTraits&lt;_Tp&gt;&gt;
2735 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_Tp&#32;_S_nearbyint(_Tp&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
2736 &#32;&#32;&#32;&#32;&#32;&#32;{
2737 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;float,&#32;16&gt;)
2738 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1ac8678fe4aafdc6ede3da208b9fa61d50">_mm512_roundscale_ps</link>(__x,&#32;0x0c);
2739 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;double,&#32;8&gt;)
2740 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a244d617f9ae4b94e7120ff6d53ca64e2">_mm512_roundscale_pd</link>(__x,&#32;0x0c);
2741 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;float,&#32;8&gt;)
2742 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a82f2460ed791e0e1e22436820ffc3778">_mm256_round_ps</link>(__x,
2743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2smmintrin_8h_1ae3db935ef2bbfd3c92598f69114d83d0">_MM_FROUND_CUR_DIRECTION</link>&#32;|&#32;<link linkend="__classes_2lib_2include_2smmintrin_8h_1afd61685784e27df0e9c78307cb0a173a">_MM_FROUND_NO_EXC</link>);
2744 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;double,&#32;4&gt;)
2745 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a903a3ca080847864b051bd3ffc5c56f3">_mm256_round_pd</link>(__x,
2746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2smmintrin_8h_1ae3db935ef2bbfd3c92598f69114d83d0">_MM_FROUND_CUR_DIRECTION</link>&#32;|&#32;<link linkend="__classes_2lib_2include_2smmintrin_8h_1afd61685784e27df0e9c78307cb0a173a">_MM_FROUND_NO_EXC</link>);
2747 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse4_1&#32;&amp;&amp;&#32;_TVT::template&#32;_S_is&lt;float,&#32;4&gt;)
2748 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2smmintrin_8h_1ae902862ff2eb7b8de2fadd432ca7a947">_mm_round_ps</link>(__x,
2749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2smmintrin_8h_1ae3db935ef2bbfd3c92598f69114d83d0">_MM_FROUND_CUR_DIRECTION</link>&#32;|&#32;<link linkend="__classes_2lib_2include_2smmintrin_8h_1afd61685784e27df0e9c78307cb0a173a">_MM_FROUND_NO_EXC</link>);
2750 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse4_1&#32;&amp;&amp;&#32;_TVT::template&#32;_S_is&lt;double,&#32;2&gt;)
2751 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2smmintrin_8h_1a37c7e5426ef6d1cac4da15f7b211f303">_mm_round_pd</link>(__x,
2752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2smmintrin_8h_1ae3db935ef2bbfd3c92598f69114d83d0">_MM_FROUND_CUR_DIRECTION</link>&#32;|&#32;<link linkend="__classes_2lib_2include_2smmintrin_8h_1afd61685784e27df0e9c78307cb0a173a">_MM_FROUND_NO_EXC</link>);
2753 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2754 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_nearbyint(__x);
2755 &#32;&#32;&#32;&#32;&#32;&#32;}
2756 
2757 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2758 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_rint&#32;{{{</emphasis>
2759 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT&#32;=&#32;_VectorTraits&lt;_Tp&gt;&gt;
2760 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_Tp&#32;_S_rint(_Tp&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
2761 &#32;&#32;&#32;&#32;&#32;&#32;{
2762 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;float,&#32;16&gt;)
2763 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1ac8678fe4aafdc6ede3da208b9fa61d50">_mm512_roundscale_ps</link>(__x,&#32;0x04);
2764 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;double,&#32;8&gt;)
2765 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a244d617f9ae4b94e7120ff6d53ca64e2">_mm512_roundscale_pd</link>(__x,&#32;0x04);
2766 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;float,&#32;8&gt;)
2767 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a82f2460ed791e0e1e22436820ffc3778">_mm256_round_ps</link>(__x,&#32;<link linkend="__classes_2lib_2include_2smmintrin_8h_1ae3db935ef2bbfd3c92598f69114d83d0">_MM_FROUND_CUR_DIRECTION</link>);
2768 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_TVT::template&#32;_S_is&lt;double,&#32;4&gt;)
2769 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a903a3ca080847864b051bd3ffc5c56f3">_mm256_round_pd</link>(__x,&#32;<link linkend="__classes_2lib_2include_2smmintrin_8h_1ae3db935ef2bbfd3c92598f69114d83d0">_MM_FROUND_CUR_DIRECTION</link>);
2770 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse4_1&#32;&amp;&amp;&#32;_TVT::template&#32;_S_is&lt;float,&#32;4&gt;)
2771 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2smmintrin_8h_1ae902862ff2eb7b8de2fadd432ca7a947">_mm_round_ps</link>(__x,&#32;<link linkend="__classes_2lib_2include_2smmintrin_8h_1ae3db935ef2bbfd3c92598f69114d83d0">_MM_FROUND_CUR_DIRECTION</link>);
2772 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse4_1&#32;&amp;&amp;&#32;_TVT::template&#32;_S_is&lt;double,&#32;2&gt;)
2773 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2smmintrin_8h_1a37c7e5426ef6d1cac4da15f7b211f303">_mm_round_pd</link>(__x,&#32;<link linkend="__classes_2lib_2include_2smmintrin_8h_1ae3db935ef2bbfd3c92598f69114d83d0">_MM_FROUND_CUR_DIRECTION</link>);
2774 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2775 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_rint(__x);
2776 &#32;&#32;&#32;&#32;&#32;&#32;}
2777 
2778 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2779 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_floor&#32;{{{</emphasis>
2780 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2781 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
2782 &#32;&#32;&#32;&#32;&#32;&#32;_S_floor(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x)
2783 &#32;&#32;&#32;&#32;&#32;&#32;{
2784 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_ps&lt;_Tp,&#32;_Np&gt;())
2785 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1ac8678fe4aafdc6ede3da208b9fa61d50">_mm512_roundscale_ps</link>(__x,&#32;0x09);
2786 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_pd&lt;_Tp,&#32;_Np&gt;())
2787 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a244d617f9ae4b94e7120ff6d53ca64e2">_mm512_roundscale_pd</link>(__x,&#32;0x09);
2788 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx_ps&lt;_Tp,&#32;_Np&gt;())
2789 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a82f2460ed791e0e1e22436820ffc3778">_mm256_round_ps</link>(__x,&#32;0x9);
2790 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx_pd&lt;_Tp,&#32;_Np&gt;())
2791 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a903a3ca080847864b051bd3ffc5c56f3">_mm256_round_pd</link>(__x,&#32;0x9);
2792 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse4_1&#32;&amp;&amp;&#32;__is_sse_ps&lt;_Tp,&#32;_Np&gt;())
2793 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__auto_bitcast(<link linkend="__classes_2lib_2include_2smmintrin_8h_1ae902862ff2eb7b8de2fadd432ca7a947">_mm_round_ps</link>(__to_intrin(__x),&#32;0x9));
2794 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse4_1&#32;&amp;&amp;&#32;__is_sse_pd&lt;_Tp,&#32;_Np&gt;())
2795 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2smmintrin_8h_1a37c7e5426ef6d1cac4da15f7b211f303">_mm_round_pd</link>(__x,&#32;0x9);
2796 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2797 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_floor(__x);
2798 &#32;&#32;&#32;&#32;&#32;&#32;}
2799 
2800 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2801 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_ceil&#32;{{{</emphasis>
2802 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2803 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
2804 &#32;&#32;&#32;&#32;&#32;&#32;_S_ceil(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x)
2805 &#32;&#32;&#32;&#32;&#32;&#32;{
2806 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_ps&lt;_Tp,&#32;_Np&gt;())
2807 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1ac8678fe4aafdc6ede3da208b9fa61d50">_mm512_roundscale_ps</link>(__x,&#32;0x0a);
2808 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_pd&lt;_Tp,&#32;_Np&gt;())
2809 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a244d617f9ae4b94e7120ff6d53ca64e2">_mm512_roundscale_pd</link>(__x,&#32;0x0a);
2810 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx_ps&lt;_Tp,&#32;_Np&gt;())
2811 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a82f2460ed791e0e1e22436820ffc3778">_mm256_round_ps</link>(__x,&#32;0xa);
2812 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx_pd&lt;_Tp,&#32;_Np&gt;())
2813 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a903a3ca080847864b051bd3ffc5c56f3">_mm256_round_pd</link>(__x,&#32;0xa);
2814 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse4_1&#32;&amp;&amp;&#32;__is_sse_ps&lt;_Tp,&#32;_Np&gt;())
2815 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__auto_bitcast(<link linkend="__classes_2lib_2include_2smmintrin_8h_1ae902862ff2eb7b8de2fadd432ca7a947">_mm_round_ps</link>(__to_intrin(__x),&#32;0xa));
2816 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse4_1&#32;&amp;&amp;&#32;__is_sse_pd&lt;_Tp,&#32;_Np&gt;())
2817 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2smmintrin_8h_1a37c7e5426ef6d1cac4da15f7b211f303">_mm_round_pd</link>(__x,&#32;0xa);
2818 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2819 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_ceil(__x);
2820 &#32;&#32;&#32;&#32;&#32;&#32;}
2821 
2822 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2823 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_signbit&#32;{{{</emphasis>
2824 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2825 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_MaskMember&lt;_Tp&gt;
2826 &#32;&#32;&#32;&#32;&#32;&#32;_S_signbit(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x)
2827 &#32;&#32;&#32;&#32;&#32;&#32;{
2828 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_abi&lt;_Abi&gt;()&#32;&amp;&amp;&#32;__have_avx512dq)
2829 &#32;&#32;&#32;&#32;&#32;&#32;{
2830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__x)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
2831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm512_movepi32_mask(
2832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__intrin_bitcast&lt;__m512i&gt;(__x._M_data));
2833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__x)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
2834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm512_movepi64_mask(
2835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__intrin_bitcast&lt;__m512i&gt;(__x._M_data));
2836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__x)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
2837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_movepi32_mask(
2838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__intrin_bitcast&lt;__m256i&gt;(__x._M_data));
2839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__x)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
2840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_movepi64_mask(
2841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__intrin_bitcast&lt;__m256i&gt;(__x._M_data));
2842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__x)&#32;&lt;=&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
2843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_movepi32_mask(__intrin_bitcast&lt;__m128i&gt;(__x._M_data));
2844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__x)&#32;&lt;=&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
2845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_movepi64_mask(__intrin_bitcast&lt;__m128i&gt;(__x._M_data));
2846 &#32;&#32;&#32;&#32;&#32;&#32;}
2847 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_abi&lt;_Abi&gt;())
2848 &#32;&#32;&#32;&#32;&#32;&#32;{
2849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__xi&#32;=&#32;__to_intrin(__x);
2850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__k1
2851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_Abi::template&#32;_S_implicit_mask_intrin&lt;_Tp&gt;();
2852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
2853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_movemask_ps(__xi);
2854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
2855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_movemask_pd(__xi);
2856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
2857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_movemask_ps(__xi);
2858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
2859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_movemask_pd(__xi);
2860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
2861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm512_mask_cmplt_epi32_mask(
2862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__k1,&#32;__intrin_bitcast&lt;__m512i&gt;(__xi),&#32;__m512i());
2863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
2864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm512_mask_cmplt_epi64_mask(
2865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__k1,&#32;__intrin_bitcast&lt;__m512i&gt;(__xi),&#32;__m512i());
2866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
2868 &#32;&#32;&#32;&#32;&#32;&#32;}
2869 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2870 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_signbit(__x);
2871 &#32;&#32;&#32;&#32;<emphasis role="comment">/*{</emphasis>
2872 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;using&#32;_I&#32;=&#32;__int_for_sizeof_t&lt;_Tp&gt;;</emphasis>
2873 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;if&#32;constexpr&#32;(sizeof(__x)&#32;==&#32;64)</emphasis>
2874 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;_S_less(__vector_bitcast&lt;_I&gt;(__x),&#32;_I());</emphasis>
2875 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;else</emphasis>
2876 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
2877 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;auto&#32;__xx&#32;=&#32;__vector_bitcast&lt;_I&gt;(__x._M_data);</emphasis>
2878 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[[maybe_unused]]&#32;constexpr&#32;_I&#32;__signmask&#32;=&#32;__finite_min_v&lt;_I&gt;;</emphasis>
2879 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;constexpr&#32;((sizeof(_Tp)&#32;==&#32;4&#32;&amp;&amp;</emphasis>
2880 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__have_avx2&#32;||&#32;sizeof(__x)&#32;==&#32;16))&#32;||</emphasis>
2881 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__have_avx512vl)</emphasis>
2882 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
2883 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;__vector_bitcast&lt;_Tp&gt;(__xx&#32;&gt;&gt;&#32;__digits_v&lt;_I&gt;);</emphasis>
2884 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
2885 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else&#32;if&#32;constexpr&#32;((__have_avx2&#32;||</emphasis>
2886 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__have_ssse3&#32;&amp;&amp;&#32;sizeof(__x)&#32;==&#32;16)))</emphasis>
2887 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
2888 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;__vector_bitcast&lt;_Tp&gt;((__xx&#32;&amp;&#32;__signmask)&#32;==</emphasis>
2889 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__signmask);</emphasis>
2890 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
2891 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else</emphasis>
2892 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;//&#32;SSE2/3&#32;or&#32;AVX&#32;(w/o&#32;AVX2)</emphasis>
2893 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;constexpr&#32;auto&#32;__one&#32;=&#32;__vector_broadcast&lt;_Np,&#32;_Tp&gt;(1);</emphasis>
2894 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;__vector_bitcast&lt;_Tp&gt;(</emphasis>
2895 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;_Tp&gt;(</emphasis>
2896 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__xx&#32;&amp;&#32;__signmask)&#32;|</emphasis>
2897 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;_I&gt;(__one))&#32;//&#32;-1&#32;or&#32;1</emphasis>
2898 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!=&#32;__one);</emphasis>
2899 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
2900 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
2901 <emphasis role="comment">&#32;&#32;&#32;&#32;}*/</emphasis>
2902 &#32;&#32;&#32;&#32;&#32;&#32;}
2903 
2904 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2905 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_isnonzerovalue_mask&#32;{{{</emphasis>
2906 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(isnormal&#32;|&#32;is&#32;subnormal&#32;==&#32;!isinf&#32;&amp;&#32;!isnan&#32;&amp;&#32;!is&#32;zero)</emphasis>
2907 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2908 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;_S_isnonzerovalue_mask(_Tp&#32;__x)
2909 &#32;&#32;&#32;&#32;&#32;&#32;{
2910 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Traits&#32;=&#32;_VectorTraits&lt;_Tp&gt;;
2911 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq_vl)
2912 &#32;&#32;&#32;&#32;&#32;&#32;{
2913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Traits::template&#32;_S_is&lt;
2914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;float,&#32;2&gt;&#32;||&#32;_Traits::template&#32;_S_is&lt;float,&#32;4&gt;)
2915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_knot_mask8(<link linkend="__classes_2lib_2include_2avx512vldqintrin_8h_1a911a4dde792a25b2365b056fd228fa0d">_mm_fpclass_ps_mask</link>(__to_intrin(__x),&#32;0x9f));
2916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Traits::template&#32;_S_is&lt;float,&#32;8&gt;)
2917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_knot_mask8(<link linkend="__classes_2lib_2include_2avx512vldqintrin_8h_1a635947179bd334ca05efc89674ff1304">_mm256_fpclass_ps_mask</link>(__x,&#32;0x9f));
2918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Traits::template&#32;_S_is&lt;float,&#32;16&gt;)
2919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1adeaea1c182769f14bae68077a413e7b6">_knot_mask16</link>(<link linkend="__classes_2lib_2include_2avx512dqintrin_8h_1a0eea24ca0674ba9a2c92a1efdd7382f8">_mm512_fpclass_ps_mask</link>(__x,&#32;0x9f));
2920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Traits::template&#32;_S_is&lt;double,&#32;2&gt;)
2921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_knot_mask8(<link linkend="__classes_2lib_2include_2avx512vldqintrin_8h_1af2cade1b670597921be0f066dc9cffd7">_mm_fpclass_pd_mask</link>(__x,&#32;0x9f));
2922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Traits::template&#32;_S_is&lt;double,&#32;4&gt;)
2923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_knot_mask8(<link linkend="__classes_2lib_2include_2avx512vldqintrin_8h_1ae18fe8de831b94425486c374025c03be">_mm256_fpclass_pd_mask</link>(__x,&#32;0x9f));
2924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Traits::template&#32;_S_is&lt;double,&#32;8&gt;)
2925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_knot_mask8(<link linkend="__classes_2lib_2include_2avx512dqintrin_8h_1a2cf47f219103b46407641dab59340b73">_mm512_fpclass_pd_mask</link>(__x,&#32;0x9f));
2926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
2928 &#32;&#32;&#32;&#32;&#32;&#32;}
2929 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2930 &#32;&#32;&#32;&#32;&#32;&#32;{
2931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Up&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits::value_type;
2932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&#32;=&#32;_Traits::_S_full_size;
2933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__a&#32;=&#32;__x&#32;*&#32;__infinity_v&lt;_Up&gt;;&#32;<emphasis role="comment">//&#32;NaN&#32;if&#32;__x&#32;==&#32;0</emphasis>
2934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__b&#32;=&#32;__x&#32;*&#32;_Up();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NaN&#32;if&#32;__x&#32;==&#32;inf</emphasis>
2935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512vl&#32;&amp;&amp;&#32;__is_sse_ps&lt;_Up,&#32;_Np&gt;())
2936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1a32d803102a277c01fb194f9a5684526d">_mm_cmp_ps_mask</link>(__to_intrin(__a),&#32;__to_intrin(__b),
2937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a46d362e05e93824e64e84e7de6312176">_CMP_ORD_Q</link>);
2938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f&#32;&amp;&amp;&#32;__is_sse_ps&lt;_Up,&#32;_Np&gt;())
2939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512cdintrin_8h_1a9351fcffd2210999639f467660e32673">__mmask8</link>(0xf
2940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1ab909916aec2094a95687bd4d97871f6d">_mm512_cmp_ps_mask</link>(__auto_bitcast(__a),
2941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__auto_bitcast(__b),
2942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a46d362e05e93824e64e84e7de6312176">_CMP_ORD_Q</link>));
2943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512vl&#32;&amp;&amp;&#32;__is_sse_pd&lt;_Up,&#32;_Np&gt;())
2944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1a8e3d5bc663f304593f330384e0b0b6f9">_mm_cmp_pd_mask</link>(__a,&#32;__b,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a46d362e05e93824e64e84e7de6312176">_CMP_ORD_Q</link>);
2945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f&#32;&amp;&amp;&#32;__is_sse_pd&lt;_Up,&#32;_Np&gt;())
2946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512cdintrin_8h_1a9351fcffd2210999639f467660e32673">__mmask8</link>(0x3
2947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a72c05adea2c29d84f53f9bbc09ba9cff">_mm512_cmp_pd_mask</link>(__auto_bitcast(__a),
2948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__auto_bitcast(__b),
2949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a46d362e05e93824e64e84e7de6312176">_CMP_ORD_Q</link>));
2950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512vl&#32;&amp;&amp;&#32;__is_avx_ps&lt;_Up,&#32;_Np&gt;())
2951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1ae4578252f2905f6e75ea1415d80832c6">_mm256_cmp_ps_mask</link>(__a,&#32;__b,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a46d362e05e93824e64e84e7de6312176">_CMP_ORD_Q</link>);
2952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f&#32;&amp;&amp;&#32;__is_avx_ps&lt;_Up,&#32;_Np&gt;())
2953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512cdintrin_8h_1a9351fcffd2210999639f467660e32673">__mmask8</link>(<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1ab909916aec2094a95687bd4d97871f6d">_mm512_cmp_ps_mask</link>(__auto_bitcast(__a),
2954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__auto_bitcast(__b),
2955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a46d362e05e93824e64e84e7de6312176">_CMP_ORD_Q</link>));
2956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512vl&#32;&amp;&amp;&#32;__is_avx_pd&lt;_Up,&#32;_Np&gt;())
2957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1afa19d79a671ef571280cc326912672b2">_mm256_cmp_pd_mask</link>(__a,&#32;__b,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a46d362e05e93824e64e84e7de6312176">_CMP_ORD_Q</link>);
2958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f&#32;&amp;&amp;&#32;__is_avx_pd&lt;_Up,&#32;_Np&gt;())
2959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512cdintrin_8h_1a9351fcffd2210999639f467660e32673">__mmask8</link>(0xf
2960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a72c05adea2c29d84f53f9bbc09ba9cff">_mm512_cmp_pd_mask</link>(__auto_bitcast(__a),
2961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__auto_bitcast(__b),
2962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a46d362e05e93824e64e84e7de6312176">_CMP_ORD_Q</link>));
2963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_ps&lt;_Up,&#32;_Np&gt;())
2964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1ab909916aec2094a95687bd4d97871f6d">_mm512_cmp_ps_mask</link>(__a,&#32;__b,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a46d362e05e93824e64e84e7de6312176">_CMP_ORD_Q</link>);
2965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_pd&lt;_Up,&#32;_Np&gt;())
2966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a72c05adea2c29d84f53f9bbc09ba9cff">_mm512_cmp_pd_mask</link>(__a,&#32;__b,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a46d362e05e93824e64e84e7de6312176">_CMP_ORD_Q</link>);
2967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
2969 &#32;&#32;&#32;&#32;&#32;&#32;}
2970 &#32;&#32;&#32;&#32;&#32;&#32;}
2971 
2972 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2973 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_isfinite&#32;{{{</emphasis>
2974 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2975 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_MaskMember&lt;_Tp&gt;
2976 &#32;&#32;&#32;&#32;&#32;&#32;_S_isfinite(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x)
2977 &#32;&#32;&#32;&#32;&#32;&#32;{
2978 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_floating_point_v&lt;_Tp&gt;);
2979 <emphasis role="preprocessor">#if&#32;!__FINITE_MATH_ONLY__</emphasis>
2980 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_abi&lt;_Abi&gt;()&#32;&amp;&amp;&#32;__have_avx512dq)
2981 &#32;&#32;&#32;&#32;&#32;&#32;{
2982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__xi&#32;=&#32;__to_intrin(__x);
2983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__k1&#32;=&#32;_Abi::template&#32;_S_implicit_mask_intrin&lt;_Tp&gt;();
2984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
2985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__k1&#32;^&#32;<link linkend="__classes_2lib_2include_2avx512dqintrin_8h_1af1b1e77e2e745c7fe3fe2a1c366f2336">_mm512_mask_fpclass_ps_mask</link>(__k1,&#32;__xi,&#32;0x99);
2986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
2987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__k1&#32;^&#32;<link linkend="__classes_2lib_2include_2avx512dqintrin_8h_1a42555db83fa4e6338ee18895ff5fb698">_mm512_mask_fpclass_pd_mask</link>(__k1,&#32;__xi,&#32;0x99);
2988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
2989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__k1&#32;^&#32;<link linkend="__classes_2lib_2include_2avx512vldqintrin_8h_1a9dfd1641e124f6f8992ce53f238db986">_mm256_mask_fpclass_ps_mask</link>(__k1,&#32;__xi,&#32;0x99);
2990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
2991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__k1&#32;^&#32;<link linkend="__classes_2lib_2include_2avx512vldqintrin_8h_1ab8791eb4be2c7438d8e18b73ee7dcd5c">_mm256_mask_fpclass_pd_mask</link>(__k1,&#32;__xi,&#32;0x99);
2992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
2993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__k1&#32;^&#32;<link linkend="__classes_2lib_2include_2avx512vldqintrin_8h_1a62d3a32d2a9b47a592820d205c0cdaf9">_mm_mask_fpclass_ps_mask</link>(__k1,&#32;__xi,&#32;0x99);
2994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
2995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__k1&#32;^&#32;<link linkend="__classes_2lib_2include_2avx512vldqintrin_8h_1a2b82a064e38f0480cee21f677079b7b9">_mm_mask_fpclass_pd_mask</link>(__k1,&#32;__xi,&#32;0x99);
2996 &#32;&#32;&#32;&#32;&#32;&#32;}
2997 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_abi&lt;_Abi&gt;())
2998 &#32;&#32;&#32;&#32;&#32;&#32;{
2999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;all&#32;exponent&#32;bits&#32;are&#32;set,&#32;__x&#32;is&#32;either&#32;inf&#32;or&#32;NaN</emphasis>
3000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_I&#32;=&#32;__int_for_sizeof_t&lt;_Tp&gt;;
3001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__inf&#32;=&#32;__vector_bitcast&lt;_I&gt;(
3002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_broadcast&lt;_Np&gt;(__infinity_v&lt;_Tp&gt;));
3003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_less&lt;_I,&#32;_Np&gt;(__vector_bitcast&lt;_I&gt;(__x)&#32;&amp;&#32;__inf,&#32;__inf);
3004 &#32;&#32;&#32;&#32;&#32;&#32;}
3005 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3006 <emphasis role="preprocessor">#endif</emphasis>
3007 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_isfinite(__x);
3008 &#32;&#32;&#32;&#32;&#32;&#32;}
3009 
3010 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
3011 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_isinf&#32;{{{</emphasis>
3012 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
3013 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_MaskMember&lt;_Tp&gt;
3014 &#32;&#32;&#32;&#32;&#32;&#32;_S_isinf(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x)
3015 &#32;&#32;&#32;&#32;&#32;&#32;{
3016 <emphasis role="preprocessor">#if&#32;!__FINITE_MATH_ONLY__</emphasis>
3017 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_abi&lt;_Abi&gt;()&#32;&amp;&amp;&#32;__have_avx512dq)
3018 &#32;&#32;&#32;&#32;&#32;&#32;{
3019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__xi&#32;=&#32;__to_intrin(__x);
3020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512dqintrin_8h_1a0eea24ca0674ba9a2c92a1efdd7382f8">_mm512_fpclass_ps_mask</link>(__xi,&#32;0x18);
3022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512dqintrin_8h_1a2cf47f219103b46407641dab59340b73">_mm512_fpclass_pd_mask</link>(__xi,&#32;0x18);
3024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vldqintrin_8h_1a635947179bd334ca05efc89674ff1304">_mm256_fpclass_ps_mask</link>(__xi,&#32;0x18);
3026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vldqintrin_8h_1ae18fe8de831b94425486c374025c03be">_mm256_fpclass_pd_mask</link>(__xi,&#32;0x18);
3028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vldqintrin_8h_1a911a4dde792a25b2365b056fd228fa0d">_mm_fpclass_ps_mask</link>(__xi,&#32;0x18);
3030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vldqintrin_8h_1af2cade1b670597921be0f066dc9cffd7">_mm_fpclass_pd_mask</link>(__xi,&#32;0x18);
3032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
3034 &#32;&#32;&#32;&#32;&#32;&#32;}
3035 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq_vl)
3036 &#32;&#32;&#32;&#32;&#32;&#32;{
3037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_sse_pd&lt;_Tp,&#32;_Np&gt;())
3038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_movm_epi64(<link linkend="__classes_2lib_2include_2avx512vldqintrin_8h_1af2cade1b670597921be0f066dc9cffd7">_mm_fpclass_pd_mask</link>(__x,&#32;0x18));
3039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx_pd&lt;_Tp,&#32;_Np&gt;())
3040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_movm_epi64(<link linkend="__classes_2lib_2include_2avx512vldqintrin_8h_1ae18fe8de831b94425486c374025c03be">_mm256_fpclass_pd_mask</link>(__x,&#32;0x18));
3041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_sse_ps&lt;_Tp,&#32;_Np&gt;())
3042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_movm_epi32(
3043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512vldqintrin_8h_1a911a4dde792a25b2365b056fd228fa0d">_mm_fpclass_ps_mask</link>(__to_intrin(__x),&#32;0x18));
3044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx_ps&lt;_Tp,&#32;_Np&gt;())
3045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_movm_epi32(<link linkend="__classes_2lib_2include_2avx512vldqintrin_8h_1a635947179bd334ca05efc89674ff1304">_mm256_fpclass_ps_mask</link>(__x,&#32;0x18));
3046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
3048 &#32;&#32;&#32;&#32;&#32;&#32;}
3049 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3050 <emphasis role="preprocessor">#endif</emphasis>
3051 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_isinf(__x);
3052 &#32;&#32;&#32;&#32;&#32;&#32;}
3053 
3054 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
3055 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_isnormal&#32;{{{</emphasis>
3056 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
3057 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_MaskMember&lt;_Tp&gt;
3058 &#32;&#32;&#32;&#32;&#32;&#32;_S_isnormal(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x)
3059 &#32;&#32;&#32;&#32;&#32;&#32;{
3060 <emphasis role="preprocessor">#if&#32;__FINITE_MATH_ONLY__</emphasis>
3061 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__mode&#32;=&#32;0x26;
3062 <emphasis role="preprocessor">#else</emphasis>
3063 &#32;&#32;&#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__mode&#32;=&#32;0xbf;
3064 <emphasis role="preprocessor">#endif</emphasis>
3065 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_abi&lt;_Abi&gt;()&#32;&amp;&amp;&#32;__have_avx512dq)
3066 &#32;&#32;&#32;&#32;&#32;&#32;{
3067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__xi&#32;=&#32;__to_intrin(__x);
3068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__k1&#32;=&#32;_Abi::template&#32;_S_implicit_mask_intrin&lt;_Tp&gt;();
3069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__k1&#32;^&#32;<link linkend="__classes_2lib_2include_2avx512dqintrin_8h_1af1b1e77e2e745c7fe3fe2a1c366f2336">_mm512_mask_fpclass_ps_mask</link>(__k1,&#32;__xi,&#32;__mode);
3071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__k1&#32;^&#32;<link linkend="__classes_2lib_2include_2avx512dqintrin_8h_1a42555db83fa4e6338ee18895ff5fb698">_mm512_mask_fpclass_pd_mask</link>(__k1,&#32;__xi,&#32;__mode);
3073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__k1&#32;^&#32;<link linkend="__classes_2lib_2include_2avx512vldqintrin_8h_1a9dfd1641e124f6f8992ce53f238db986">_mm256_mask_fpclass_ps_mask</link>(__k1,&#32;__xi,&#32;__mode);
3075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__k1&#32;^&#32;<link linkend="__classes_2lib_2include_2avx512vldqintrin_8h_1ab8791eb4be2c7438d8e18b73ee7dcd5c">_mm256_mask_fpclass_pd_mask</link>(__k1,&#32;__xi,&#32;__mode);
3077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__k1&#32;^&#32;<link linkend="__classes_2lib_2include_2avx512vldqintrin_8h_1a62d3a32d2a9b47a592820d205c0cdaf9">_mm_mask_fpclass_ps_mask</link>(__k1,&#32;__xi,&#32;__mode);
3079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__k1&#32;^&#32;<link linkend="__classes_2lib_2include_2avx512vldqintrin_8h_1a2b82a064e38f0480cee21f677079b7b9">_mm_mask_fpclass_pd_mask</link>(__k1,&#32;__xi,&#32;__mode);
3081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
3083 &#32;&#32;&#32;&#32;&#32;&#32;}
3084 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq)
3085 &#32;&#32;&#32;&#32;&#32;&#32;{
3086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512vl&#32;&amp;&amp;&#32;__is_sse_ps&lt;_Tp,&#32;_Np&gt;())
3087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_movm_epi32(
3088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_knot_mask8(<link linkend="__classes_2lib_2include_2avx512vldqintrin_8h_1a911a4dde792a25b2365b056fd228fa0d">_mm_fpclass_ps_mask</link>(__to_intrin(__x),&#32;__mode)));
3089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512vl&#32;&amp;&amp;&#32;__is_avx_ps&lt;_Tp,&#32;_Np&gt;())
3090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_movm_epi32(
3091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_knot_mask8(<link linkend="__classes_2lib_2include_2avx512vldqintrin_8h_1a635947179bd334ca05efc89674ff1304">_mm256_fpclass_ps_mask</link>(__x,&#32;__mode)));
3092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_ps&lt;_Tp,&#32;_Np&gt;())
3093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1adeaea1c182769f14bae68077a413e7b6">_knot_mask16</link>(<link linkend="__classes_2lib_2include_2avx512dqintrin_8h_1a0eea24ca0674ba9a2c92a1efdd7382f8">_mm512_fpclass_ps_mask</link>(__x,&#32;__mode));
3094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512vl&#32;&amp;&amp;&#32;__is_sse_pd&lt;_Tp,&#32;_Np&gt;())
3095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_movm_epi64(
3096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_knot_mask8(<link linkend="__classes_2lib_2include_2avx512vldqintrin_8h_1af2cade1b670597921be0f066dc9cffd7">_mm_fpclass_pd_mask</link>(__x,&#32;__mode)));
3097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512vl&#32;&amp;&amp;&#32;__is_avx_pd&lt;_Tp,&#32;_Np&gt;())
3098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_movm_epi64(
3099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_knot_mask8(<link linkend="__classes_2lib_2include_2avx512vldqintrin_8h_1ae18fe8de831b94425486c374025c03be">_mm256_fpclass_pd_mask</link>(__x,&#32;__mode)));
3100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_pd&lt;_Tp,&#32;_Np&gt;())
3101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_knot_mask8(<link linkend="__classes_2lib_2include_2avx512dqintrin_8h_1a2cf47f219103b46407641dab59340b73">_mm512_fpclass_pd_mask</link>(__x,&#32;__mode));
3102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
3104 &#32;&#32;&#32;&#32;&#32;&#32;}
3105 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_abi&lt;_Abi&gt;())
3106 &#32;&#32;&#32;&#32;&#32;&#32;{
3107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_I&#32;=&#32;__int_for_sizeof_t&lt;_Tp&gt;;
3108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;absn&#32;=&#32;__vector_bitcast&lt;_I&gt;(_S_abs(__x));
3109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;minn&#32;=&#32;__vector_bitcast&lt;_I&gt;(
3110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_broadcast&lt;_Np&gt;(__norm_min_v&lt;_Tp&gt;));
3111 <emphasis role="preprocessor">#if&#32;__FINITE_MATH_ONLY__</emphasis>
3112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_less_equal&lt;_I,&#32;_Np&gt;(minn,&#32;absn);
3113 <emphasis role="preprocessor">#else</emphasis>
3114 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;infn
3115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__vector_bitcast&lt;_I&gt;(__vector_broadcast&lt;_Np&gt;(__infinity_v&lt;_Tp&gt;));
3116 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__and(_S_less_equal&lt;_I,&#32;_Np&gt;(minn,&#32;absn),
3117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_less&lt;_I,&#32;_Np&gt;(absn,&#32;infn));
3118 <emphasis role="preprocessor">#endif</emphasis>
3119 &#32;&#32;&#32;&#32;&#32;&#32;}
3120 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3121 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_isnormal(__x);
3122 &#32;&#32;&#32;&#32;&#32;&#32;}
3123 
3124 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
3125 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_isnan&#32;{{{</emphasis>
3126 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
3127 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_MaskMember&lt;_Tp&gt;
3128 &#32;&#32;&#32;&#32;&#32;&#32;_S_isnan(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x)
3129 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_isunordered(__x,&#32;__x);&#32;}
3130 
3131 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
3132 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_isunordered&#32;{{{</emphasis>
3133 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
3134 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_MaskMember&lt;_Tp&gt;
3135 &#32;&#32;&#32;&#32;&#32;&#32;_S_isunordered([[maybe_unused]]&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x,
3136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[[maybe_unused]]&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__y)
3137 &#32;&#32;&#32;&#32;&#32;&#32;{
3138 <emphasis role="preprocessor">#if&#32;__FINITE_MATH_ONLY__</emphasis>
3139 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};&#32;<emphasis role="comment">//&#32;false</emphasis>
3140 <emphasis role="preprocessor">#else</emphasis>
3141 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__xi&#32;=&#32;__to_intrin(__x);
3142 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__yi&#32;=&#32;__to_intrin(__y);
3143 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_abi&lt;_Abi&gt;())
3144 &#32;&#32;&#32;&#32;&#32;&#32;{
3145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__k1&#32;=&#32;_Abi::template&#32;_S_implicit_mask_intrin&lt;_Tp&gt;();
3146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1ca6fffb4f3e5d441ca9a151a3865942">_mm512_mask_cmp_ps_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a2d011afa9bc7d308fbc01189e07dbfcb">_CMP_UNORD_Q</link>);
3148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a72a2791801b39824228b7a57ea3701c7">_mm512_mask_cmp_pd_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a2d011afa9bc7d308fbc01189e07dbfcb">_CMP_UNORD_Q</link>);
3150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1a3fe6c0f31663d0b15529cff1a84bbc75">_mm256_mask_cmp_ps_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a2d011afa9bc7d308fbc01189e07dbfcb">_CMP_UNORD_Q</link>);
3152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1a01355bda4b22419ecafbfbc7c1649bf3">_mm256_mask_cmp_pd_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a2d011afa9bc7d308fbc01189e07dbfcb">_CMP_UNORD_Q</link>);
3154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1a3f3a71c8b952953013acebc46ac267c9">_mm_mask_cmp_ps_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a2d011afa9bc7d308fbc01189e07dbfcb">_CMP_UNORD_Q</link>);
3156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1af2bfae924e7b46bd0aff1e2be600f36e">_mm_mask_cmp_pd_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a2d011afa9bc7d308fbc01189e07dbfcb">_CMP_UNORD_Q</link>);
3158 &#32;&#32;&#32;&#32;&#32;&#32;}
3159 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3160 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__to_masktype(<link linkend="__classes_2lib_2include_2avxintrin_8h_1ae179cd4d25d9f34ffb4afee275fdb7ff">_mm256_cmp_ps</link>(__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a2d011afa9bc7d308fbc01189e07dbfcb">_CMP_UNORD_Q</link>));
3161 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3162 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__to_masktype(<link linkend="__classes_2lib_2include_2avxintrin_8h_1a811715ab7a590e9f91d87f1ef2f6e125">_mm256_cmp_pd</link>(__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a2d011afa9bc7d308fbc01189e07dbfcb">_CMP_UNORD_Q</link>));
3163 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3164 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__auto_bitcast(_mm_cmpunord_ps(__xi,&#32;__yi));
3165 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3166 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__to_masktype(_mm_cmpunord_pd(__xi,&#32;__yi));
3167 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3168 &#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
3169 <emphasis role="preprocessor">#endif</emphasis>
3170 &#32;&#32;&#32;&#32;&#32;&#32;}
3171 
3172 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
3173 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_isgreater&#32;{{{</emphasis>
3174 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
3175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_MaskMember&lt;_Tp&gt;&#32;_S_isgreater(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x,
3176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__y)
3177 &#32;&#32;&#32;&#32;&#32;&#32;{
3178 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__xi&#32;=&#32;__to_intrin(__x);
3179 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__yi&#32;=&#32;__to_intrin(__y);
3180 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_abi&lt;_Abi&gt;())
3181 &#32;&#32;&#32;&#32;&#32;&#32;{
3182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__k1&#32;=&#32;_Abi::template&#32;_S_implicit_mask_intrin&lt;_Tp&gt;();
3183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1ca6fffb4f3e5d441ca9a151a3865942">_mm512_mask_cmp_ps_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a0fc78a0be018de411cbc78ecdbdc42e2">_CMP_GT_OQ</link>);
3185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a72a2791801b39824228b7a57ea3701c7">_mm512_mask_cmp_pd_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a0fc78a0be018de411cbc78ecdbdc42e2">_CMP_GT_OQ</link>);
3187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1a3fe6c0f31663d0b15529cff1a84bbc75">_mm256_mask_cmp_ps_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a0fc78a0be018de411cbc78ecdbdc42e2">_CMP_GT_OQ</link>);
3189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1a01355bda4b22419ecafbfbc7c1649bf3">_mm256_mask_cmp_pd_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a0fc78a0be018de411cbc78ecdbdc42e2">_CMP_GT_OQ</link>);
3191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1a3f3a71c8b952953013acebc46ac267c9">_mm_mask_cmp_ps_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a0fc78a0be018de411cbc78ecdbdc42e2">_CMP_GT_OQ</link>);
3193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1af2bfae924e7b46bd0aff1e2be600f36e">_mm_mask_cmp_pd_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a0fc78a0be018de411cbc78ecdbdc42e2">_CMP_GT_OQ</link>);
3195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
3197 &#32;&#32;&#32;&#32;&#32;&#32;}
3198 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx)
3199 &#32;&#32;&#32;&#32;&#32;&#32;{
3200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__to_masktype(<link linkend="__classes_2lib_2include_2avxintrin_8h_1ae179cd4d25d9f34ffb4afee275fdb7ff">_mm256_cmp_ps</link>(__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a0fc78a0be018de411cbc78ecdbdc42e2">_CMP_GT_OQ</link>));
3202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__to_masktype(<link linkend="__classes_2lib_2include_2avxintrin_8h_1a811715ab7a590e9f91d87f1ef2f6e125">_mm256_cmp_pd</link>(__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a0fc78a0be018de411cbc78ecdbdc42e2">_CMP_GT_OQ</link>));
3204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__auto_bitcast(<link linkend="__classes_2lib_2include_2avxintrin_8h_1ada54743784446f7f235ab09f03a70d15">_mm_cmp_ps</link>(__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a0fc78a0be018de411cbc78ecdbdc42e2">_CMP_GT_OQ</link>));
3206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__to_masktype(<link linkend="__classes_2lib_2include_2avxintrin_8h_1aa4ef2bd8c584a2a8c56f0141ce40fdfe">_mm_cmp_pd</link>(__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a0fc78a0be018de411cbc78ecdbdc42e2">_CMP_GT_OQ</link>));
3208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
3210 &#32;&#32;&#32;&#32;&#32;&#32;}
3211 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse2&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16
3212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3213 &#32;&#32;&#32;&#32;&#32;&#32;{
3214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__xn&#32;=&#32;__vector_bitcast&lt;int&gt;(__xi);
3215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__yn&#32;=&#32;__vector_bitcast&lt;int&gt;(__yi);
3216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__xp&#32;=&#32;__xn&#32;&lt;&#32;0&#32;?&#32;-(__xn&#32;&amp;&#32;0x7fff&apos;ffff)&#32;:&#32;__xn;
3217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__yp&#32;=&#32;__yn&#32;&lt;&#32;0&#32;?&#32;-(__yn&#32;&amp;&#32;0x7fff&apos;ffff)&#32;:&#32;__yn;
3218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__auto_bitcast(
3219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__and(__to_masktype(_mm_cmpord_ps(__xi,&#32;__yi)),&#32;__xp&#32;&gt;&#32;__yp));
3220 &#32;&#32;&#32;&#32;&#32;&#32;}
3221 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse2&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16
3222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3223 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_type_t&lt;__int_with_sizeof_t&lt;8&gt;,&#32;2&gt;{
3224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-_mm_ucomigt_sd(__xi,&#32;__yi),
3225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-_mm_ucomigt_sd(_mm_unpackhi_pd(__xi,&#32;__xi),
3226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpackhi_pd(__yi,&#32;__yi))};
3227 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3228 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_isgreater(__x,&#32;__y);
3229 &#32;&#32;&#32;&#32;&#32;&#32;}
3230 
3231 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
3232 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_isgreaterequal&#32;{{{</emphasis>
3233 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
3234 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_MaskMember&lt;_Tp&gt;
3235 &#32;&#32;&#32;&#32;&#32;&#32;_S_isgreaterequal(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x,&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__y)
3236 &#32;&#32;&#32;&#32;&#32;&#32;{
3237 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__xi&#32;=&#32;__to_intrin(__x);
3238 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__yi&#32;=&#32;__to_intrin(__y);
3239 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_abi&lt;_Abi&gt;())
3240 &#32;&#32;&#32;&#32;&#32;&#32;{
3241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__k1&#32;=&#32;_Abi::template&#32;_S_implicit_mask_intrin&lt;_Tp&gt;();
3242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1ca6fffb4f3e5d441ca9a151a3865942">_mm512_mask_cmp_ps_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1afe856cb5767d9ddc4e4acbb4e15205fb">_CMP_GE_OQ</link>);
3244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a72a2791801b39824228b7a57ea3701c7">_mm512_mask_cmp_pd_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1afe856cb5767d9ddc4e4acbb4e15205fb">_CMP_GE_OQ</link>);
3246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1a3fe6c0f31663d0b15529cff1a84bbc75">_mm256_mask_cmp_ps_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1afe856cb5767d9ddc4e4acbb4e15205fb">_CMP_GE_OQ</link>);
3248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1a01355bda4b22419ecafbfbc7c1649bf3">_mm256_mask_cmp_pd_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1afe856cb5767d9ddc4e4acbb4e15205fb">_CMP_GE_OQ</link>);
3250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1a3f3a71c8b952953013acebc46ac267c9">_mm_mask_cmp_ps_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1afe856cb5767d9ddc4e4acbb4e15205fb">_CMP_GE_OQ</link>);
3252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1af2bfae924e7b46bd0aff1e2be600f36e">_mm_mask_cmp_pd_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1afe856cb5767d9ddc4e4acbb4e15205fb">_CMP_GE_OQ</link>);
3254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
3256 &#32;&#32;&#32;&#32;&#32;&#32;}
3257 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx)
3258 &#32;&#32;&#32;&#32;&#32;&#32;{
3259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__to_masktype(<link linkend="__classes_2lib_2include_2avxintrin_8h_1ae179cd4d25d9f34ffb4afee275fdb7ff">_mm256_cmp_ps</link>(__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1afe856cb5767d9ddc4e4acbb4e15205fb">_CMP_GE_OQ</link>));
3261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__to_masktype(<link linkend="__classes_2lib_2include_2avxintrin_8h_1a811715ab7a590e9f91d87f1ef2f6e125">_mm256_cmp_pd</link>(__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1afe856cb5767d9ddc4e4acbb4e15205fb">_CMP_GE_OQ</link>));
3263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__auto_bitcast(<link linkend="__classes_2lib_2include_2avxintrin_8h_1ada54743784446f7f235ab09f03a70d15">_mm_cmp_ps</link>(__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1afe856cb5767d9ddc4e4acbb4e15205fb">_CMP_GE_OQ</link>));
3265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__to_masktype(<link linkend="__classes_2lib_2include_2avxintrin_8h_1aa4ef2bd8c584a2a8c56f0141ce40fdfe">_mm_cmp_pd</link>(__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1afe856cb5767d9ddc4e4acbb4e15205fb">_CMP_GE_OQ</link>));
3267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
3269 &#32;&#32;&#32;&#32;&#32;&#32;}
3270 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse2&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16
3271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3272 &#32;&#32;&#32;&#32;&#32;&#32;{
3273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__xn&#32;=&#32;__vector_bitcast&lt;int&gt;(__xi);
3274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__yn&#32;=&#32;__vector_bitcast&lt;int&gt;(__yi);
3275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__xp&#32;=&#32;__xn&#32;&lt;&#32;0&#32;?&#32;-(__xn&#32;&amp;&#32;0x7fff&apos;ffff)&#32;:&#32;__xn;
3276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__yp&#32;=&#32;__yn&#32;&lt;&#32;0&#32;?&#32;-(__yn&#32;&amp;&#32;0x7fff&apos;ffff)&#32;:&#32;__yn;
3277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__auto_bitcast(
3278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__and(__to_masktype(_mm_cmpord_ps(__xi,&#32;__yi)),&#32;__xp&#32;&gt;=&#32;__yp));
3279 &#32;&#32;&#32;&#32;&#32;&#32;}
3280 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse2&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16
3281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3282 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_type_t&lt;__int_with_sizeof_t&lt;8&gt;,&#32;2&gt;{
3283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-_mm_ucomige_sd(__xi,&#32;__yi),
3284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-_mm_ucomige_sd(_mm_unpackhi_pd(__xi,&#32;__xi),
3285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpackhi_pd(__yi,&#32;__yi))};
3286 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3287 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_isgreaterequal(__x,&#32;__y);
3288 &#32;&#32;&#32;&#32;&#32;&#32;}
3289 
3290 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
3291 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_isless&#32;{{{</emphasis>
3292 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
3293 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_MaskMember&lt;_Tp&gt;&#32;_S_isless(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x,
3294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__y)
3295 &#32;&#32;&#32;&#32;&#32;&#32;{
3296 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__xi&#32;=&#32;__to_intrin(__x);
3297 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__yi&#32;=&#32;__to_intrin(__y);
3298 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_abi&lt;_Abi&gt;())
3299 &#32;&#32;&#32;&#32;&#32;&#32;{
3300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__k1&#32;=&#32;_Abi::template&#32;_S_implicit_mask_intrin&lt;_Tp&gt;();
3301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1ca6fffb4f3e5d441ca9a151a3865942">_mm512_mask_cmp_ps_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a4c068460fd624d9b56d4c0a9e80674ac">_CMP_LT_OQ</link>);
3303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a72a2791801b39824228b7a57ea3701c7">_mm512_mask_cmp_pd_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a4c068460fd624d9b56d4c0a9e80674ac">_CMP_LT_OQ</link>);
3305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1a3fe6c0f31663d0b15529cff1a84bbc75">_mm256_mask_cmp_ps_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a4c068460fd624d9b56d4c0a9e80674ac">_CMP_LT_OQ</link>);
3307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1a01355bda4b22419ecafbfbc7c1649bf3">_mm256_mask_cmp_pd_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a4c068460fd624d9b56d4c0a9e80674ac">_CMP_LT_OQ</link>);
3309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1a3f3a71c8b952953013acebc46ac267c9">_mm_mask_cmp_ps_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a4c068460fd624d9b56d4c0a9e80674ac">_CMP_LT_OQ</link>);
3311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1af2bfae924e7b46bd0aff1e2be600f36e">_mm_mask_cmp_pd_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a4c068460fd624d9b56d4c0a9e80674ac">_CMP_LT_OQ</link>);
3313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
3315 &#32;&#32;&#32;&#32;&#32;&#32;}
3316 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx)
3317 &#32;&#32;&#32;&#32;&#32;&#32;{
3318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__to_masktype(<link linkend="__classes_2lib_2include_2avxintrin_8h_1ae179cd4d25d9f34ffb4afee275fdb7ff">_mm256_cmp_ps</link>(__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a4c068460fd624d9b56d4c0a9e80674ac">_CMP_LT_OQ</link>));
3320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__to_masktype(<link linkend="__classes_2lib_2include_2avxintrin_8h_1a811715ab7a590e9f91d87f1ef2f6e125">_mm256_cmp_pd</link>(__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a4c068460fd624d9b56d4c0a9e80674ac">_CMP_LT_OQ</link>));
3322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__auto_bitcast(<link linkend="__classes_2lib_2include_2avxintrin_8h_1ada54743784446f7f235ab09f03a70d15">_mm_cmp_ps</link>(__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a4c068460fd624d9b56d4c0a9e80674ac">_CMP_LT_OQ</link>));
3324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__to_masktype(<link linkend="__classes_2lib_2include_2avxintrin_8h_1aa4ef2bd8c584a2a8c56f0141ce40fdfe">_mm_cmp_pd</link>(__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a4c068460fd624d9b56d4c0a9e80674ac">_CMP_LT_OQ</link>));
3326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
3328 &#32;&#32;&#32;&#32;&#32;&#32;}
3329 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse2&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16
3330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3331 &#32;&#32;&#32;&#32;&#32;&#32;{
3332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__xn&#32;=&#32;__vector_bitcast&lt;int&gt;(__xi);
3333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__yn&#32;=&#32;__vector_bitcast&lt;int&gt;(__yi);
3334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__xp&#32;=&#32;__xn&#32;&lt;&#32;0&#32;?&#32;-(__xn&#32;&amp;&#32;0x7fff&apos;ffff)&#32;:&#32;__xn;
3335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__yp&#32;=&#32;__yn&#32;&lt;&#32;0&#32;?&#32;-(__yn&#32;&amp;&#32;0x7fff&apos;ffff)&#32;:&#32;__yn;
3336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__auto_bitcast(
3337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__and(__to_masktype(_mm_cmpord_ps(__xi,&#32;__yi)),&#32;__xp&#32;&lt;&#32;__yp));
3338 &#32;&#32;&#32;&#32;&#32;&#32;}
3339 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse2&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16
3340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3341 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_type_t&lt;__int_with_sizeof_t&lt;8&gt;,&#32;2&gt;{
3342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-_mm_ucomigt_sd(__yi,&#32;__xi),
3343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-_mm_ucomigt_sd(_mm_unpackhi_pd(__yi,&#32;__yi),
3344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpackhi_pd(__xi,&#32;__xi))};
3345 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3346 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_isless(__x,&#32;__y);
3347 &#32;&#32;&#32;&#32;&#32;&#32;}
3348 
3349 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
3350 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_islessequal&#32;{{{</emphasis>
3351 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
3352 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_MaskMember&lt;_Tp&gt;
3353 &#32;&#32;&#32;&#32;&#32;&#32;_S_islessequal(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x,&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__y)
3354 &#32;&#32;&#32;&#32;&#32;&#32;{
3355 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__xi&#32;=&#32;__to_intrin(__x);
3356 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__yi&#32;=&#32;__to_intrin(__y);
3357 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_abi&lt;_Abi&gt;())
3358 &#32;&#32;&#32;&#32;&#32;&#32;{
3359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__k1&#32;=&#32;_Abi::template&#32;_S_implicit_mask_intrin&lt;_Tp&gt;();
3360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1ca6fffb4f3e5d441ca9a151a3865942">_mm512_mask_cmp_ps_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a2cd21a5fa2b6475fddde86ea3c3c2dbd">_CMP_LE_OQ</link>);
3362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a72a2791801b39824228b7a57ea3701c7">_mm512_mask_cmp_pd_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a2cd21a5fa2b6475fddde86ea3c3c2dbd">_CMP_LE_OQ</link>);
3364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1a3fe6c0f31663d0b15529cff1a84bbc75">_mm256_mask_cmp_ps_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a2cd21a5fa2b6475fddde86ea3c3c2dbd">_CMP_LE_OQ</link>);
3366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1a01355bda4b22419ecafbfbc7c1649bf3">_mm256_mask_cmp_pd_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a2cd21a5fa2b6475fddde86ea3c3c2dbd">_CMP_LE_OQ</link>);
3368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1a3f3a71c8b952953013acebc46ac267c9">_mm_mask_cmp_ps_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a2cd21a5fa2b6475fddde86ea3c3c2dbd">_CMP_LE_OQ</link>);
3370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1af2bfae924e7b46bd0aff1e2be600f36e">_mm_mask_cmp_pd_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a2cd21a5fa2b6475fddde86ea3c3c2dbd">_CMP_LE_OQ</link>);
3372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
3374 &#32;&#32;&#32;&#32;&#32;&#32;}
3375 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx)
3376 &#32;&#32;&#32;&#32;&#32;&#32;{
3377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__to_masktype(<link linkend="__classes_2lib_2include_2avxintrin_8h_1ae179cd4d25d9f34ffb4afee275fdb7ff">_mm256_cmp_ps</link>(__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a2cd21a5fa2b6475fddde86ea3c3c2dbd">_CMP_LE_OQ</link>));
3379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__to_masktype(<link linkend="__classes_2lib_2include_2avxintrin_8h_1a811715ab7a590e9f91d87f1ef2f6e125">_mm256_cmp_pd</link>(__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a2cd21a5fa2b6475fddde86ea3c3c2dbd">_CMP_LE_OQ</link>));
3381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__auto_bitcast(<link linkend="__classes_2lib_2include_2avxintrin_8h_1ada54743784446f7f235ab09f03a70d15">_mm_cmp_ps</link>(__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a2cd21a5fa2b6475fddde86ea3c3c2dbd">_CMP_LE_OQ</link>));
3383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__to_masktype(<link linkend="__classes_2lib_2include_2avxintrin_8h_1aa4ef2bd8c584a2a8c56f0141ce40fdfe">_mm_cmp_pd</link>(__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a2cd21a5fa2b6475fddde86ea3c3c2dbd">_CMP_LE_OQ</link>));
3385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
3387 &#32;&#32;&#32;&#32;&#32;&#32;}
3388 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse2&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16
3389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3390 &#32;&#32;&#32;&#32;&#32;&#32;{
3391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__xn&#32;=&#32;__vector_bitcast&lt;int&gt;(__xi);
3392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__yn&#32;=&#32;__vector_bitcast&lt;int&gt;(__yi);
3393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__xp&#32;=&#32;__xn&#32;&lt;&#32;0&#32;?&#32;-(__xn&#32;&amp;&#32;0x7fff&apos;ffff)&#32;:&#32;__xn;
3394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__yp&#32;=&#32;__yn&#32;&lt;&#32;0&#32;?&#32;-(__yn&#32;&amp;&#32;0x7fff&apos;ffff)&#32;:&#32;__yn;
3395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__auto_bitcast(
3396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__and(__to_masktype(_mm_cmpord_ps(__xi,&#32;__yi)),&#32;__xp&#32;&lt;=&#32;__yp));
3397 &#32;&#32;&#32;&#32;&#32;&#32;}
3398 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse2&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16
3399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3400 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_type_t&lt;__int_with_sizeof_t&lt;8&gt;,&#32;2&gt;{
3401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-_mm_ucomige_sd(__yi,&#32;__xi),
3402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-_mm_ucomige_sd(_mm_unpackhi_pd(__yi,&#32;__yi),
3403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpackhi_pd(__xi,&#32;__xi))};
3404 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3405 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_islessequal(__x,&#32;__y);
3406 &#32;&#32;&#32;&#32;&#32;&#32;}
3407 
3408 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
3409 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_islessgreater&#32;{{{</emphasis>
3410 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
3411 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_MaskMember&lt;_Tp&gt;
3412 &#32;&#32;&#32;&#32;&#32;&#32;_S_islessgreater(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x,&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__y)
3413 &#32;&#32;&#32;&#32;&#32;&#32;{
3414 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__xi&#32;=&#32;__to_intrin(__x);
3415 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__yi&#32;=&#32;__to_intrin(__y);
3416 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_abi&lt;_Abi&gt;())
3417 &#32;&#32;&#32;&#32;&#32;&#32;{
3418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__k1&#32;=&#32;_Abi::template&#32;_S_implicit_mask_intrin&lt;_Tp&gt;();
3419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1ca6fffb4f3e5d441ca9a151a3865942">_mm512_mask_cmp_ps_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1abb8269c9390d270fe61447a2dba9a38d">_CMP_NEQ_OQ</link>);
3421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a72a2791801b39824228b7a57ea3701c7">_mm512_mask_cmp_pd_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1abb8269c9390d270fe61447a2dba9a38d">_CMP_NEQ_OQ</link>);
3423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1a3fe6c0f31663d0b15529cff1a84bbc75">_mm256_mask_cmp_ps_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1abb8269c9390d270fe61447a2dba9a38d">_CMP_NEQ_OQ</link>);
3425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1a01355bda4b22419ecafbfbc7c1649bf3">_mm256_mask_cmp_pd_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1abb8269c9390d270fe61447a2dba9a38d">_CMP_NEQ_OQ</link>);
3427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1a3f3a71c8b952953013acebc46ac267c9">_mm_mask_cmp_ps_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1abb8269c9390d270fe61447a2dba9a38d">_CMP_NEQ_OQ</link>);
3429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1af2bfae924e7b46bd0aff1e2be600f36e">_mm_mask_cmp_pd_mask</link>(__k1,&#32;__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1abb8269c9390d270fe61447a2dba9a38d">_CMP_NEQ_OQ</link>);
3431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
3433 &#32;&#32;&#32;&#32;&#32;&#32;}
3434 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx)
3435 &#32;&#32;&#32;&#32;&#32;&#32;{
3436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__to_masktype(<link linkend="__classes_2lib_2include_2avxintrin_8h_1ae179cd4d25d9f34ffb4afee275fdb7ff">_mm256_cmp_ps</link>(__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1abb8269c9390d270fe61447a2dba9a38d">_CMP_NEQ_OQ</link>));
3438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__to_masktype(<link linkend="__classes_2lib_2include_2avxintrin_8h_1a811715ab7a590e9f91d87f1ef2f6e125">_mm256_cmp_pd</link>(__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1abb8269c9390d270fe61447a2dba9a38d">_CMP_NEQ_OQ</link>));
3440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__auto_bitcast(<link linkend="__classes_2lib_2include_2avxintrin_8h_1ada54743784446f7f235ab09f03a70d15">_mm_cmp_ps</link>(__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1abb8269c9390d270fe61447a2dba9a38d">_CMP_NEQ_OQ</link>));
3442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__to_masktype(<link linkend="__classes_2lib_2include_2avxintrin_8h_1aa4ef2bd8c584a2a8c56f0141ce40fdfe">_mm_cmp_pd</link>(__xi,&#32;__yi,&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1abb8269c9390d270fe61447a2dba9a38d">_CMP_NEQ_OQ</link>));
3444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
3446 &#32;&#32;&#32;&#32;&#32;&#32;}
3447 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3448 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__auto_bitcast(
3449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__and(_mm_cmpord_ps(__xi,&#32;__yi),&#32;_mm_cmpneq_ps(__xi,&#32;__yi)));
3450 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3451 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__to_masktype(
3452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__and(_mm_cmpord_pd(__xi,&#32;__yi),&#32;_mm_cmpneq_pd(__xi,&#32;__yi)));
3453 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3454 &#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
3455 &#32;&#32;&#32;&#32;&#32;&#32;}
3456 
3457 &#32;&#32;&#32;&#32;<emphasis role="comment">//}}}&#32;}}}</emphasis>
3458 &#32;&#32;};
3459 
3460 <emphasis role="comment">//&#32;}}}</emphasis>
3461 <emphasis role="comment">//&#32;_MaskImplX86Mixin&#32;{{{</emphasis>
3462 <emphasis role="keyword">struct&#32;</emphasis>_MaskImplX86Mixin
3463 {
3464 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
3465 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_TypeTag&#32;=&#32;_Tp*;
3466 
3467 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base&#32;=&#32;_MaskImplBuiltinMixin;
3468 
3469 &#32;&#32;<emphasis role="comment">//&#32;_S_to_maskvector(bool)&#32;{{{</emphasis>
3470 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_ToN&#32;=&#32;1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
3471 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;
3472 &#32;&#32;&#32;&#32;&#32;&#32;is_same_v&lt;_Tp,&#32;bool&gt;,&#32;_SimdWrapper&lt;_Up,&#32;_ToN&gt;&gt;
3473 &#32;&#32;&#32;&#32;_S_to_maskvector(_Tp&#32;__x)
3474 &#32;&#32;&#32;&#32;{
3475 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same_v&lt;_Up,&#32;__int_for_sizeof_t&lt;_Up&gt;&gt;);
3476 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;?&#32;__vector_type_t&lt;_Up,&#32;_ToN&gt;{~_Up()}
3477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;__vector_type_t&lt;_Up,&#32;_ToN&gt;();
3478 &#32;&#32;&#32;&#32;}
3479 
3480 &#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
3481 &#32;&#32;<emphasis role="comment">//&#32;_S_to_maskvector(_SanitizedBitMask)&#32;{{{</emphasis>
3482 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_UpN&#32;=&#32;0,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,
3483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_ToN&#32;=&#32;_UpN&#32;==&#32;0&#32;?&#32;_Np&#32;:&#32;_UpN&gt;
3484 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;_Up,&#32;_ToN&gt;
3485 &#32;&#32;&#32;&#32;_S_to_maskvector(_SanitizedBitMask&lt;_Np&gt;&#32;__x)
3486 &#32;&#32;&#32;&#32;{
3487 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same_v&lt;_Up,&#32;__int_for_sizeof_t&lt;_Up&gt;&gt;);
3488 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_UV&#32;=&#32;__vector_type_t&lt;_Up,&#32;_ToN&gt;;
3489 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_UI&#32;=&#32;__intrinsic_type_t&lt;_Up,&#32;_ToN&gt;;
3490 &#32;&#32;&#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__k&#32;=&#32;__x._M_to_bits();
3491 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;==&#32;1)
3492 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_to_maskvector&lt;_Up,&#32;_ToN&gt;(__k);
3493 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x._M_is_constprop()&#32;||&#32;__builtin_is_constant_evaluated())
3494 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__generate_from_n_evaluations&lt;std::min(_ToN,&#32;_Np),&#32;_UV&gt;(
3495 &#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;-&gt;&#32;_Up&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;-__x[__i.value];&#32;});
3496 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;1)
3497 &#32;&#32;&#32;&#32;{
3498 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_UI)&#32;==&#32;16)
3499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw_vl)
3501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_UV&gt;(_mm_movm_epi8(__k));
3502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw)
3503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_UV&gt;(__lo128(_mm512_movm_epi8(__k)));
3504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f)
3505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__as32bits&#32;=&#32;_mm512_maskz_mov_epi32(__k,&#32;~__m512i());
3507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__as16bits
3508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__xzyw(_mm256_packs_epi32(__lo256(__as32bits),
3509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__hi256(__as32bits)));
3510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_UV&gt;(
3511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_packs_epi16(__lo128(__as16bits),&#32;__hi128(__as16bits)));
3512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_ssse3)
3514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__bitmask&#32;=&#32;__to_intrin(
3516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__make_vector&lt;_UChar&gt;(1,&#32;2,&#32;4,&#32;8,&#32;16,&#32;32,&#32;64,&#32;128,&#32;1,&#32;2,&#32;4,
3517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;8,&#32;16,&#32;32,&#32;64,&#32;128));
3518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_UV&gt;(
3519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;_Up&gt;(
3520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_shuffle_epi8(__to_intrin(
3521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_type_t&lt;_ULLong,&#32;2&gt;{__k}),
3522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_setr_epi8(0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;1,
3523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1))
3524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&#32;__bitmask)
3525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!=&#32;0);
3526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;else&#32;fall&#32;through</emphasis>
3528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3529 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_UI)&#32;==&#32;32)
3530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw_vl)
3532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(_mm256_movm_epi8(__k));
3533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw)
3534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(__lo256(_mm512_movm_epi8(__k)));
3535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f)
3536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__as16bits&#32;=&#32;<emphasis role="comment">//&#32;0&#32;16&#32;1&#32;17&#32;...&#32;15&#32;31</emphasis>
3538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a4c122abc3b33a5072ace88fc3f69b739">_mm512_srli_epi32</link>(_mm512_maskz_mov_epi32(__k,&#32;~__m512i()),
3539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;16)
3540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a0f4b736fc20c9152428c7258df26d8f3">_mm512_slli_epi32</link>(_mm512_maskz_mov_epi32(__k&#32;&gt;&gt;&#32;16,
3541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~__m512i()),
3542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;16);
3543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__0_16_1_17&#32;=&#32;__xzyw(_mm256_packs_epi16(
3544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lo256(__as16bits),
3545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__hi256(__as16bits))&#32;<emphasis role="comment">//&#32;0&#32;16&#32;1&#32;17&#32;2&#32;18&#32;3&#32;19&#32;8&#32;24&#32;9&#32;25&#32;...</emphasis>
3546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
3547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;deinterleave:</emphasis>
3548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(__xzyw(_mm256_shuffle_epi8(
3549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__0_16_1_17,&#32;<emphasis role="comment">//&#32;0&#32;16&#32;1&#32;17&#32;2&#32;...</emphasis>
3550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_setr_epi8(0,&#32;2,&#32;4,&#32;6,&#32;8,&#32;10,&#32;12,&#32;14,&#32;1,&#32;3,&#32;5,&#32;7,&#32;9,
3551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;11,&#32;13,&#32;15,&#32;0,&#32;2,&#32;4,&#32;6,&#32;8,&#32;10,&#32;12,&#32;14,&#32;1,
3552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;3,&#32;5,&#32;7,&#32;9,&#32;11,&#32;13,
3553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;15))));&#32;<emphasis role="comment">//&#32;0-7&#32;16-23&#32;8-15&#32;24-31&#32;-&gt;&#32;xzyw</emphasis>
3554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0-3&#32;&#32;8-11&#32;16-19&#32;24-27</emphasis>
3555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;4-7&#32;12-15&#32;20-23&#32;28-31</emphasis>
3556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx2)
3558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__bitmask
3560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm256_broadcastsi128_si256(__to_intrin(
3561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__make_vector&lt;_UChar&gt;(1,&#32;2,&#32;4,&#32;8,&#32;16,&#32;32,&#32;64,&#32;128,&#32;1,&#32;2,
3562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;4,&#32;8,&#32;16,&#32;32,&#32;64,&#32;128)));
3563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(
3564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;_Up&gt;(
3565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_shuffle_epi8(
3566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_broadcastsi128_si256(
3567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_intrin(__vector_type_t&lt;_ULLong,&#32;2&gt;{__k})),
3568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_setr_epi8(0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,
3569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1,&#32;1,&#32;1,&#32;2,&#32;2,&#32;2,&#32;2,&#32;2,&#32;2,&#32;2,&#32;2,&#32;3,&#32;3,
3570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;3,&#32;3,&#32;3,&#32;3,&#32;3,&#32;3))
3571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&#32;__bitmask)
3572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!=&#32;0);
3573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;else&#32;fall&#32;through</emphasis>
3575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3576 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_UI)&#32;==&#32;64)
3577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_UV<emphasis role="keyword">&gt;</emphasis>(_mm512_movm_epi8(__k));
3578 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::min(_ToN,&#32;_Np)&#32;&lt;=&#32;4)
3579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&gt;&#32;7)&#32;<emphasis role="comment">//&#32;avoid&#32;overflow</emphasis>
3581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;&amp;=&#32;_SanitizedBitMask&lt;_Np&gt;(0x0f);
3582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_UInt&#32;__char_mask
3583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;((_UInt(__x.to_ulong())&#32;*&#32;0x00204081U)&#32;&amp;&#32;0x01010101ULL)
3584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;0xff;
3585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UV&#32;__r&#32;=&#32;{};
3586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(&amp;__r,&#32;&amp;__char_mask,
3587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::min(<emphasis role="keyword">sizeof</emphasis>(__r),&#32;<emphasis role="keyword">sizeof</emphasis>(__char_mask)));
3588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
3589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3590 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::min(_ToN,&#32;_Np)&#32;&lt;=&#32;7)
3591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&gt;&#32;7)&#32;<emphasis role="comment">//&#32;avoid&#32;overflow</emphasis>
3593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;&amp;=&#32;_SanitizedBitMask&lt;_Np&gt;(0x7f);
3594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_ULLong&#32;__char_mask
3595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;((__x.to_ulong()&#32;*&#32;0x40810204081ULL)&#32;&amp;&#32;0x0101010101010101ULL)
3596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;0xff;
3597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UV&#32;__r&#32;=&#32;{};
3598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(&amp;__r,&#32;&amp;__char_mask,
3599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::min(<emphasis role="keyword">sizeof</emphasis>(__r),&#32;<emphasis role="keyword">sizeof</emphasis>(__char_mask)));
3600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
3601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3602 &#32;&#32;&#32;&#32;}
3603 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;2)
3604 &#32;&#32;&#32;&#32;{
3605 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_UI)&#32;==&#32;16)
3606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw_vl)
3608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_UV&gt;(_mm_movm_epi16(__k));
3609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw)
3610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_UV&gt;(__lo128(_mm512_movm_epi16(__k)));
3611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f)
3612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m256i&#32;__as32bits&#32;=&#32;{};
3614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512vl)
3615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__as32bits&#32;=&#32;_mm256_maskz_mov_epi32(__k,&#32;~__m256i());
3616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__as32bits
3618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__lo256(_mm512_maskz_mov_epi32(__k,&#32;~__m512i()));
3619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_UV&gt;(
3620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_packs_epi32(__lo128(__as32bits),&#32;__hi128(__as32bits)));
3621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;else&#32;fall&#32;through</emphasis>
3623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3624 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_UI)&#32;==&#32;32)
3625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw_vl)
3627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(_mm256_movm_epi16(__k));
3628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw)
3629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(__lo256(_mm512_movm_epi16(__k)));
3630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f)
3631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__as32bits&#32;=&#32;_mm512_maskz_mov_epi32(__k,&#32;~__m512i());
3633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(
3634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__xzyw(_mm256_packs_epi32(__lo256(__as32bits),
3635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__hi256(__as32bits))));
3636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;else&#32;fall&#32;through</emphasis>
3638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3639 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_UI)&#32;==&#32;64)
3640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(_mm512_movm_epi16(__k));
3641 &#32;&#32;&#32;&#32;}
3642 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4)
3643 &#32;&#32;&#32;&#32;{
3644 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_UI)&#32;==&#32;16)
3645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq_vl)
3647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_UV&gt;(_mm_movm_epi32(__k));
3648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq)
3649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_UV&gt;(__lo128(_mm512_movm_epi32(__k)));
3650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512vl)
3651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_UV&gt;(
3652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_maskz_mov_epi32(__k,&#32;~__m128i()));
3653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f)
3654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_UV&gt;(
3655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lo128(_mm512_maskz_mov_epi32(__k,&#32;~__m512i())));
3656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;else&#32;fall&#32;through</emphasis>
3657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3658 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_UI)&#32;==&#32;32)
3659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq_vl)
3661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(_mm256_movm_epi32(__k));
3662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq)
3663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(__lo256(_mm512_movm_epi32(__k)));
3664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512vl)
3665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(
3666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_maskz_mov_epi32(__k,&#32;~__m256i()));
3667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f)
3668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(
3669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lo256(_mm512_maskz_mov_epi32(__k,&#32;~__m512i())));
3670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;else&#32;fall&#32;through</emphasis>
3671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3672 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_UI)&#32;==&#32;64)
3673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(
3674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__have_avx512dq&#32;?&#32;_mm512_movm_epi32(__k)
3675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_mm512_maskz_mov_epi32(__k,&#32;~__m512i()));
3676 &#32;&#32;&#32;&#32;}
3677 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8)
3678 &#32;&#32;&#32;&#32;{
3679 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_UI)&#32;==&#32;16)
3680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq_vl)
3682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(_mm_movm_epi64(__k));
3683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq)
3684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(__lo128(_mm512_movm_epi64(__k)));
3685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512vl)
3686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(
3687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_maskz_mov_epi64(__k,&#32;~__m128i()));
3688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f)
3689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(
3690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lo128(_mm512_maskz_mov_epi64(__k,&#32;~__m512i())));
3691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;else&#32;fall&#32;through</emphasis>
3692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3693 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_UI)&#32;==&#32;32)
3694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq_vl)
3696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(_mm256_movm_epi64(__k));
3697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq)
3698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(__lo256(_mm512_movm_epi64(__k)));
3699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512vl)
3700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(
3701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_maskz_mov_epi64(__k,&#32;~__m256i()));
3702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f)
3703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(
3704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lo256(_mm512_maskz_mov_epi64(__k,&#32;~__m512i())));
3705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;else&#32;fall&#32;through</emphasis>
3706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3707 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_UI)&#32;==&#32;64)
3708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(
3709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__have_avx512dq&#32;?&#32;_mm512_movm_epi64(__k)
3710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_mm512_maskz_mov_epi64(__k,&#32;~__m512i()));
3711 &#32;&#32;&#32;&#32;}
3712 
3713 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_UpUInt&#32;=&#32;make_unsigned_t&lt;_Up&gt;;
3714 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_V&#32;=&#32;__vector_type_t&lt;_UpUInt,&#32;_ToN&gt;;
3715 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__bits_per_element&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;*&#32;__CHAR_BIT__;
3716 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_ToN&#32;==&#32;2)
3717 &#32;&#32;&#32;&#32;{
3718 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(_V{_UpUInt(-__x[0]),&#32;_UpUInt(-__x[1])});
3719 &#32;&#32;&#32;&#32;}
3720 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(!__have_avx2&#32;&amp;&amp;&#32;__have_avx&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_V)&#32;==&#32;32)
3721 &#32;&#32;&#32;&#32;{
3722 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4)
3723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(<link linkend="__classes_2lib_2include_2avxintrin_8h_1ae179cd4d25d9f34ffb4afee275fdb7ff">_mm256_cmp_ps</link>(
3724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_and_ps(_mm256_castsi256_ps(_mm256_set1_epi32(__k)),
3725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_castsi256_ps(_mm256_setr_epi32(
3726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x01,&#32;0x02,&#32;0x04,&#32;0x08,&#32;0x10,&#32;0x20,&#32;0x40,&#32;0x80))),
3727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_setzero_ps(),&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a68f2d5732ae1d80791f0c0196b55ab8f">_CMP_NEQ_UQ</link>));
3728 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8)
3729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(<link linkend="__classes_2lib_2include_2avxintrin_8h_1a811715ab7a590e9f91d87f1ef2f6e125">_mm256_cmp_pd</link>(
3730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_and_pd(_mm256_castsi256_pd(_mm256_set1_epi64x(__k)),
3731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_castsi256_pd(
3732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_setr_epi64x(0x01,&#32;0x02,&#32;0x04,&#32;0x08))),
3733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_setzero_pd(),&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a68f2d5732ae1d80791f0c0196b55ab8f">_CMP_NEQ_UQ</link>));
3734 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Up&gt;();
3736 &#32;&#32;&#32;&#32;}
3737 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__bits_per_element&#32;&gt;=&#32;_ToN)
3738 &#32;&#32;&#32;&#32;{
3739 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__bitmask
3740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__generate_vector&lt;_V&gt;([](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;constexpr-&gt;_UpUInt&#32;{
3741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;__i&#32;&lt;&#32;_ToN&#32;?&#32;1ull&#32;&lt;&lt;&#32;__i&#32;:&#32;0;
3742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
3743 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__bits
3744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__vector_broadcast&lt;_ToN,&#32;_UpUInt&gt;(__k)&#32;&amp;&#32;__bitmask;
3745 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__bits_per_element&#32;&gt;&#32;_ToN)
3746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(__bits)&#32;&gt;&#32;0;
3747 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(__bits&#32;!=&#32;0);
3749 &#32;&#32;&#32;&#32;}
3750 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3751 &#32;&#32;&#32;&#32;{
3752 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_V&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>
3753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__generate_vector&lt;_V&gt;([&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
3754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_UpUInt<emphasis role="keyword">&gt;</emphasis>(
3755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__k&#32;&gt;&gt;&#32;(__bits_per_element&#32;*&#32;(__i&#32;/&#32;__bits_per_element)));
3756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;})
3757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&#32;__generate_vector&lt;_V&gt;([](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
3758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_UpUInt<emphasis role="keyword">&gt;</emphasis>(1ull
3759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;(__i&#32;%&#32;__bits_per_element));
3760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});&#32;<emphasis role="comment">//&#32;mask&#32;bit&#32;index</emphasis>
3761 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_UV&gt;(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;!=&#32;_V());
3762 &#32;&#32;&#32;&#32;}
3763 &#32;&#32;&#32;&#32;}
3764 
3765 &#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
3766 &#32;&#32;<emphasis role="comment">//&#32;_S_to_maskvector(_SimdWrapper)&#32;{{{</emphasis>
3767 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_UpN&#32;=&#32;0,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,
3768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_ToN&#32;=&#32;_UpN&#32;==&#32;0&#32;?&#32;_Np&#32;:&#32;_UpN&gt;
3769 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;_Up,&#32;_ToN&gt;
3770 &#32;&#32;&#32;&#32;_S_to_maskvector(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x)
3771 &#32;&#32;&#32;&#32;{
3772 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same_v&lt;_Up,&#32;__int_for_sizeof_t&lt;_Up&gt;&gt;);
3773 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_TW&#32;=&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;;
3774 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_UW&#32;=&#32;_SimdWrapper&lt;_Up,&#32;_ToN&gt;;
3775 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_UI&#32;=&#32;__intrinsic_type_t&lt;_Up,&#32;_ToN&gt;;
3776 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Tp,&#32;bool&gt;)&#32;<emphasis role="comment">//&#32;bits&#32;-&gt;&#32;vector</emphasis>
3777 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_to_maskvector&lt;_Up,&#32;_ToN&gt;(
3778 &#32;&#32;&#32;&#32;&#32;&#32;_BitMask&lt;_Np&gt;(__x._M_data)._M_sanitized());
3779 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;vector&#32;-&gt;&#32;vector&#32;bitcast</emphasis>
3780 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)
3781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_TW)&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(_UW))
3782 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__wrapper_bitcast&lt;_Up,&#32;_ToN&gt;(
3783 &#32;&#32;&#32;&#32;&#32;&#32;_ToN&#32;&lt;=&#32;_Np
3784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;__x
3785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;simd_abi::_VecBuiltin&lt;sizeof(_Tp)&#32;*&#32;_Np&gt;::_S_masked(__x));
3786 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;vector&#32;-&gt;&#32;vector&#32;{{{</emphasis>
3787 &#32;&#32;&#32;&#32;{
3788 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x._M_is_constprop()&#32;||&#32;__builtin_is_constant_evaluated())
3789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__y&#32;=&#32;__vector_bitcast&lt;__int_for_sizeof_t&lt;_Tp&gt;&gt;(__x);
3791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__generate_from_n_evaluations&lt;std::min(_ToN,&#32;_Np),
3792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_type_t&lt;_Up,&#32;_ToN&gt;&gt;(
3793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;-&gt;&#32;_Up&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__y[__i.value];&#32;});
3794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3795 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_To&#32;=&#32;__vector_type_t&lt;_Up,&#32;_ToN&gt;;
3796 &#32;&#32;&#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_FromN&#32;=&#32;_Np;
3797 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_FromBytes&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp);
3798 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_ToBytes&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(_Up);
3799 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__k&#32;=&#32;__x._M_data;
3800 
3801 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromBytes&#32;==&#32;_ToBytes)
3802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(__k);
3803 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_UI)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__k)&#32;==&#32;16)
3804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;SSE&#32;-&gt;&#32;SSE&#32;{{{</emphasis>
3805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromBytes&#32;==&#32;4&#32;&amp;&amp;&#32;_ToBytes&#32;==&#32;8)
3806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(__interleave128_lo(__k,&#32;__k));
3807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromBytes&#32;==&#32;2&#32;&amp;&amp;&#32;_ToBytes&#32;==&#32;8)
3808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__y
3810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__vector_bitcast&lt;int&gt;(__interleave128_lo(__k,&#32;__k));
3811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(__interleave128_lo(__y,&#32;__y));
3812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromBytes&#32;==&#32;1&#32;&amp;&amp;&#32;_ToBytes&#32;==&#32;8)
3814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__y
3816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__vector_bitcast&lt;short&gt;(__interleave128_lo(__k,&#32;__k));
3817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__z
3818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__vector_bitcast&lt;int&gt;(__interleave128_lo(__y,&#32;__y));
3819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(__interleave128_lo(__z,&#32;__z));
3820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromBytes&#32;==&#32;8&#32;&amp;&amp;&#32;_ToBytes&#32;==&#32;4
3822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__have_sse2)
3823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
3824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_packs_epi32(__vector_bitcast&lt;_LLong&gt;(__k),&#32;__m128i()));
3825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromBytes&#32;==&#32;8&#32;&amp;&amp;&#32;_ToBytes&#32;==&#32;4)
3826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_shuffle&lt;1,&#32;3,&#32;6,&#32;7&gt;(__vector_bitcast&lt;_Up&gt;(__k),
3827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UI());
3828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromBytes&#32;==&#32;2&#32;&amp;&amp;&#32;_ToBytes&#32;==&#32;4)
3829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(__interleave128_lo(__k,&#32;__k));
3830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromBytes&#32;==&#32;1&#32;&amp;&amp;&#32;_ToBytes&#32;==&#32;4)
3831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__y
3833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__vector_bitcast&lt;short&gt;(__interleave128_lo(__k,&#32;__k));
3834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(__interleave128_lo(__y,&#32;__y));
3835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromBytes&#32;==&#32;8&#32;&amp;&amp;&#32;_ToBytes&#32;==&#32;2)
3837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse2&#32;&amp;&amp;&#32;!__have_ssse3)
3839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_packs_epi32(
3840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_packs_epi32(__vector_bitcast&lt;_LLong&gt;(__k),&#32;__m128i()),
3841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i()));
3842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
3844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_permute&lt;3,&#32;7,&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1&gt;(
3845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;_Up&gt;(__k)));
3846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromBytes&#32;==&#32;4&#32;&amp;&amp;&#32;_ToBytes&#32;==&#32;2)
3848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
3849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_packs_epi32(__vector_bitcast&lt;_LLong&gt;(__k),&#32;__m128i()));
3850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromBytes&#32;==&#32;1&#32;&amp;&amp;&#32;_ToBytes&#32;==&#32;2)
3851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(__interleave128_lo(__k,&#32;__k));
3852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromBytes&#32;==&#32;8&#32;&amp;&amp;&#32;_ToBytes&#32;==&#32;1
3853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__have_ssse3)
3854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
3855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_shuffle_epi8(__vector_bitcast&lt;_LLong&gt;(__k),
3856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_setr_epi8(7,&#32;15,&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1,
3857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1,
3858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-1)));
3859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromBytes&#32;==&#32;8&#32;&amp;&amp;&#32;_ToBytes&#32;==&#32;1)
3860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__y
3862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm_packs_epi32(__vector_bitcast&lt;_LLong&gt;(__k),&#32;__m128i());
3863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__y&#32;=&#32;_mm_packs_epi32(__y,&#32;__m128i());
3864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_packs_epi16(__y,&#32;__m128i()));
3865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromBytes&#32;==&#32;4&#32;&amp;&amp;&#32;_ToBytes&#32;==&#32;1
3867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__have_ssse3)
3868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
3869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_shuffle_epi8(__vector_bitcast&lt;_LLong&gt;(__k),
3870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_setr_epi8(3,&#32;7,&#32;11,&#32;15,&#32;-1,&#32;-1,&#32;-1,&#32;-1,
3871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1,
3872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-1)));
3873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromBytes&#32;==&#32;4&#32;&amp;&amp;&#32;_ToBytes&#32;==&#32;1)
3874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__y
3876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm_packs_epi32(__vector_bitcast&lt;_LLong&gt;(__k),&#32;__m128i());
3877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_packs_epi16(__y,&#32;__m128i()));
3878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromBytes&#32;==&#32;2&#32;&amp;&amp;&#32;_ToBytes&#32;==&#32;1)
3880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
3881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_packs_epi16(__vector_bitcast&lt;_LLong&gt;(__k),&#32;__m128i()));
3882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
3884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;}}}</emphasis>
3885 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_UI)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__k)&#32;==&#32;32)
3886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;AVX&#32;-&gt;&#32;AVX&#32;{{{</emphasis>
3887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromBytes&#32;==&#32;_ToBytes)
3888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
3889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromBytes&#32;==&#32;_ToBytes&#32;*&#32;2)
3890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__y&#32;=&#32;__vector_bitcast&lt;_LLong&gt;(__k);
3892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm256_castsi128_si256(
3893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_packs_epi16(__lo128(__y),&#32;__hi128(__y))));
3894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromBytes&#32;==&#32;_ToBytes&#32;*&#32;4)
3896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__y&#32;=&#32;__vector_bitcast&lt;_LLong&gt;(__k);
3898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm256_castsi128_si256(
3899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_packs_epi16(_mm_packs_epi16(__lo128(__y),&#32;__hi128(__y)),
3900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i())));
3901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromBytes&#32;==&#32;_ToBytes&#32;*&#32;8)
3903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__y&#32;=&#32;__vector_bitcast&lt;_LLong&gt;(__k);
3905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
3906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_castsi128_si256(_mm_shuffle_epi8(
3907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_packs_epi16(__lo128(__y),&#32;__hi128(__y)),
3908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_setr_epi8(3,&#32;7,&#32;11,&#32;15,&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1,
3909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1))));
3910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromBytes&#32;*&#32;2&#32;==&#32;_ToBytes)
3912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__y&#32;=&#32;__xzyw(__to_intrin(__k));
3914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_floating_point_v&lt;
3915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp&gt;&#32;||&#32;(!__have_avx2&#32;&amp;&amp;&#32;_FromBytes&#32;==&#32;4))
3916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__yy&#32;=&#32;__vector_bitcast&lt;float&gt;(__y);
3918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
3919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_unpacklo_ps(__yy,&#32;__yy));
3920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
3923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_unpacklo_epi8(__y,&#32;__y));
3924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromBytes&#32;*&#32;4&#32;==&#32;_ToBytes)
3926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__y
3928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm_unpacklo_epi8(__lo128(__vector_bitcast&lt;_LLong&gt;(__k)),
3929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lo128(__vector_bitcast&lt;_LLong&gt;(
3930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__k)));&#32;<emphasis role="comment">//&#32;drops&#32;3/4&#32;of&#32;input</emphasis>
3931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
3932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__concat(_mm_unpacklo_epi16(__y,&#32;__y),
3933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpackhi_epi16(__y,&#32;__y)));
3934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromBytes&#32;==&#32;1&#32;&amp;&amp;&#32;_ToBytes&#32;==&#32;8)
3936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__y
3938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm_unpacklo_epi8(__lo128(__vector_bitcast&lt;_LLong&gt;(__k)),
3939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lo128(__vector_bitcast&lt;_LLong&gt;(
3940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__k)));&#32;<emphasis role="comment">//&#32;drops&#32;3/4&#32;of&#32;input</emphasis>
3941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__y
3942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm_unpacklo_epi16(__y,
3943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__y);&#32;<emphasis role="comment">//&#32;drops&#32;another&#32;1/2&#32;=&gt;&#32;7/8&#32;total</emphasis>
3944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
3945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__concat(_mm_unpacklo_epi32(__y,&#32;__y),
3946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpackhi_epi32(__y,&#32;__y)));
3947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
3950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;}}}</emphasis>
3951 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_UI)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__k)&#32;==&#32;16)
3952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;SSE&#32;-&gt;&#32;AVX&#32;{{{</emphasis>
3953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromBytes&#32;==&#32;_ToBytes)
3954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
3955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__intrinsic_type_t&lt;_Tp,&#32;32&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&gt;(
3956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__zero_extend(__to_intrin(__k))));
3957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromBytes&#32;*&#32;2&#32;==&#32;_ToBytes)
3958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;keep&#32;all</emphasis>
3959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
3960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__concat(_mm_unpacklo_epi8(__vector_bitcast&lt;_LLong&gt;(__k),
3961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;_LLong&gt;(__k)),
3962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpackhi_epi8(__vector_bitcast&lt;_LLong&gt;(__k),
3963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;_LLong&gt;(__k))));
3964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromBytes&#32;*&#32;4&#32;==&#32;_ToBytes)
3966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx2)
3968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm256_shuffle_epi8(
3970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__concat(__vector_bitcast&lt;_LLong&gt;(__k),
3971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;_LLong&gt;(__k)),
3972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_setr_epi8(0,&#32;0,&#32;0,&#32;0,&#32;1,&#32;1,&#32;1,&#32;1,&#32;2,&#32;2,&#32;2,&#32;2,&#32;3,
3973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;3,&#32;3,&#32;3,&#32;4,&#32;4,&#32;4,&#32;4,&#32;5,&#32;5,&#32;5,&#32;5,&#32;6,&#32;6,
3974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;6,&#32;6,&#32;7,&#32;7,&#32;7,&#32;7)));
3975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(__concat(
3979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_shuffle_epi8(__vector_bitcast&lt;_LLong&gt;(__k),
3980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_setr_epi8(0,&#32;0,&#32;0,&#32;0,&#32;1,&#32;1,&#32;1,&#32;1,
3981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;2,&#32;2,&#32;2,&#32;2,&#32;3,&#32;3,&#32;3,&#32;3)),
3982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_shuffle_epi8(__vector_bitcast&lt;_LLong&gt;(__k),
3983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_setr_epi8(4,&#32;4,&#32;4,&#32;4,&#32;5,&#32;5,&#32;5,&#32;5,
3984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;6,&#32;6,&#32;6,&#32;6,&#32;7,&#32;7,&#32;7,
3985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;7))));
3986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromBytes&#32;*&#32;8&#32;==&#32;_ToBytes)
3989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx2)
3991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm256_shuffle_epi8(
3993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__concat(__vector_bitcast&lt;_LLong&gt;(__k),
3994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;_LLong&gt;(__k)),
3995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_setr_epi8(0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,
3996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1,&#32;1,&#32;1,&#32;2,&#32;2,&#32;2,&#32;2,&#32;2,&#32;2,&#32;2,&#32;2,&#32;3,&#32;3,
3997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;3,&#32;3,&#32;3,&#32;3,&#32;3,&#32;3)));
3998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(__concat(
4002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_shuffle_epi8(__vector_bitcast&lt;_LLong&gt;(__k),
4003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_setr_epi8(0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,
4004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1)),
4005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_shuffle_epi8(__vector_bitcast&lt;_LLong&gt;(__k),
4006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_setr_epi8(2,&#32;2,&#32;2,&#32;2,&#32;2,&#32;2,&#32;2,&#32;2,
4007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;3,&#32;3,&#32;3,&#32;3,&#32;3,&#32;3,&#32;3,
4008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;3))));
4009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromBytes&#32;==&#32;_ToBytes&#32;*&#32;2)
4012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(__m256i(__zero_extend(
4013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_packs_epi16(__vector_bitcast&lt;_LLong&gt;(__k),&#32;__m128i()))));
4014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromBytes&#32;==&#32;8&#32;&amp;&amp;&#32;_ToBytes&#32;==&#32;2)
4015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(__m256i(__zero_extend(
4017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_shuffle_epi8(__vector_bitcast&lt;_LLong&gt;(__k),
4018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_setr_epi8(6,&#32;7,&#32;14,&#32;15,&#32;-1,&#32;-1,&#32;-1,&#32;-1,
4019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1,
4020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-1)))));
4021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromBytes&#32;==&#32;4&#32;&amp;&amp;&#32;_ToBytes&#32;==&#32;1)
4023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(__m256i(__zero_extend(
4025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_shuffle_epi8(__vector_bitcast&lt;_LLong&gt;(__k),
4026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_setr_epi8(3,&#32;7,&#32;11,&#32;15,&#32;-1,&#32;-1,&#32;-1,&#32;-1,
4027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1,
4028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-1)))));
4029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromBytes&#32;==&#32;8&#32;&amp;&amp;&#32;_ToBytes&#32;==&#32;1)
4031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(__m256i(__zero_extend(
4033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_shuffle_epi8(__vector_bitcast&lt;_LLong&gt;(__k),
4034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_setr_epi8(7,&#32;15,&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1,
4035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1,
4036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-1,&#32;-1)))));
4037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!is_same_v&lt;_Tp,&#32;_Tp&gt;,&#32;<emphasis role="stringliteral">&quot;should&#32;be&#32;unreachable&quot;</emphasis>);
4040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;}}}</emphasis>
4041 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_UI)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__k)&#32;==&#32;32)
4042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;AVX&#32;-&gt;&#32;SSE&#32;{{{</emphasis>
4043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromBytes&#32;==&#32;_ToBytes)
4044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;keep&#32;low&#32;1/2</emphasis>
4045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(__lo128(__k));
4046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromBytes&#32;==&#32;_ToBytes&#32;*&#32;2)
4048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;keep&#32;all</emphasis>
4049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__y&#32;=&#32;__vector_bitcast&lt;_LLong&gt;(__k);
4050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
4051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_packs_epi16(__lo128(__y),&#32;__hi128(__y)));
4052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromBytes&#32;==&#32;_ToBytes&#32;*&#32;4)
4054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;add&#32;1/2&#32;undef</emphasis>
4055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__y&#32;=&#32;__vector_bitcast&lt;_LLong&gt;(__k);
4056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
4057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_packs_epi16(_mm_packs_epi16(__lo128(__y),&#32;__hi128(__y)),
4058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i()));
4059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromBytes&#32;==&#32;8&#32;&amp;&amp;&#32;_ToBytes&#32;==&#32;1)
4061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;add&#32;3/4&#32;undef</emphasis>
4062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__y&#32;=&#32;__vector_bitcast&lt;_LLong&gt;(__k);
4063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_shuffle_epi8(
4064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_packs_epi16(__lo128(__y),&#32;__hi128(__y)),
4065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_setr_epi8(3,&#32;7,&#32;11,&#32;15,&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1,
4066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-1,&#32;-1,&#32;-1,&#32;-1)));
4067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromBytes&#32;*&#32;2&#32;==&#32;_ToBytes)
4069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;keep&#32;low&#32;1/4</emphasis>
4070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__y&#32;=&#32;__lo128(__vector_bitcast&lt;_LLong&gt;(__k));
4071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_unpacklo_epi8(__y,&#32;__y));
4072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromBytes&#32;*&#32;4&#32;==&#32;_ToBytes)
4074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;keep&#32;low&#32;1/8</emphasis>
4075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__y&#32;=&#32;__lo128(__vector_bitcast&lt;_LLong&gt;(__k));
4076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__y&#32;=&#32;_mm_unpacklo_epi8(__y,&#32;__y);
4077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_unpacklo_epi8(__y,&#32;__y));
4078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FromBytes&#32;*&#32;8&#32;==&#32;_ToBytes)
4080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;keep&#32;low&#32;1/16</emphasis>
4081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__y&#32;=&#32;__lo128(__vector_bitcast&lt;_LLong&gt;(__k));
4082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__y&#32;=&#32;_mm_unpacklo_epi8(__y,&#32;__y);
4083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__y&#32;=&#32;_mm_unpacklo_epi8(__y,&#32;__y);
4084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_unpacklo_epi8(__y,&#32;__y));
4085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!is_same_v&lt;_Tp,&#32;_Tp&gt;,&#32;<emphasis role="stringliteral">&quot;should&#32;be&#32;unreachable&quot;</emphasis>);
4088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;}}}</emphasis>
4089 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::template&#32;_S_to_maskvector&lt;_Up,&#32;_ToN&gt;(__x);
4091 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
4092 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;if&#32;constexpr&#32;(_FromBytes&#32;&gt;&#32;_ToBytes)&#32;{</emphasis>
4093 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;_To&#32;&#32;&#32;&#32;&#32;__y&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__vector_bitcast&lt;_Up&gt;(__k);</emphasis>
4094 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;[&amp;]&#32;&lt;size_t...&#32;_Is&gt;&#32;(index_sequence&lt;_Is...&gt;)&#32;{</emphasis>
4095 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;constexpr&#32;int&#32;_Stride&#32;=&#32;_FromBytes&#32;/&#32;_ToBytes;</emphasis>
4096 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;_To{__y[(_Is&#32;+&#32;1)&#32;*&#32;_Stride&#32;-&#32;1]...};</emphasis>
4097 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}(make_index_sequence&lt;std::min(_ToN,&#32;_FromN)&gt;());</emphasis>
4098 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;}&#32;else&#32;{</emphasis>
4099 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;{0,&#32;0,&#32;1,&#32;1}&#32;(_Dups&#32;=&#32;2,&#32;_Is&lt;4&gt;)</emphasis>
4100 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;{0,&#32;0,&#32;0,&#32;0,&#32;1,&#32;1,&#32;1,&#32;1}&#32;(_Dups&#32;=&#32;4,&#32;_Is&lt;8&gt;)</emphasis>
4101 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;{0,&#32;0,&#32;1,&#32;1,&#32;2,&#32;2,&#32;3,&#32;3}&#32;(_Dups&#32;=&#32;2,&#32;_Is&lt;8&gt;)</emphasis>
4102 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;...</emphasis>
4103 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;[&amp;]&#32;&lt;size_t...&#32;_Is&gt;&#32;(index_sequence&lt;_Is...&gt;)&#32;{</emphasis>
4104 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;constexpr&#32;int&#32;__dup&#32;=&#32;_ToBytes&#32;/&#32;_FromBytes;</emphasis>
4105 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;__intrin_bitcast&lt;_To&gt;(_From{__k[_Is&#32;/&#32;__dup]...});</emphasis>
4106 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}(make_index_sequence&lt;_FromN&gt;());</emphasis>
4107 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
4108 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
4109 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;}}}</emphasis>
4110 &#32;&#32;&#32;&#32;}
4111 
4112 &#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
4113 &#32;&#32;<emphasis role="comment">//&#32;_S_to_bits&#32;{{{</emphasis>
4114 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
4115 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SanitizedBitMask&lt;_Np&gt;
4116 &#32;&#32;&#32;&#32;_S_to_bits(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x)
4117 &#32;&#32;&#32;&#32;{
4118 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Tp,&#32;bool&gt;)
4119 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_BitMask&lt;_Np&gt;(__x._M_data)._M_sanitized();
4120 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4121 &#32;&#32;&#32;&#32;{
4122 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same_v&lt;_Tp,&#32;__int_for_sizeof_t&lt;_Tp&gt;&gt;);
4123 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_is_constant_evaluated()
4124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;__builtin_constant_p(__x._M_data))
4125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__bools&#32;=&#32;-__x._M_data;
4127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_ULLong&#32;__k&#32;=&#32;__call_with_n_evaluations&lt;_Np&gt;(
4128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">auto</emphasis>...&#32;__bits)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__bits&#32;|&#32;...);&#32;},
4129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_ULLong(__bools[+__i])&#32;&lt;&lt;&#32;__i;&#32;});
4130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_is_constant_evaluated()
4131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;__builtin_constant_p(__k))
4132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__k;
4133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4134 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__xi&#32;=&#32;__to_intrin(__x);
4135 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1)
4136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16)
4137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw_vl)
4138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_BitMask&lt;_Np&gt;(_mm_movepi8_mask(__xi));
4139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;implies&#32;SSE2</emphasis>
4140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_BitMask&lt;_Np&gt;(_mm_movemask_epi8(__xi));
4141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32)
4142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw_vl)
4143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_BitMask&lt;_Np&gt;(_mm256_movepi8_mask(__xi));
4144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;implies&#32;AVX2</emphasis>
4145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_BitMask&lt;_Np&gt;(_mm256_movemask_epi8(__xi));
4146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;implies&#32;AVX512BW</emphasis>
4147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_BitMask&lt;_Np&gt;(_mm512_movepi8_mask(__xi));
4148 
4149 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2)
4150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16)
4151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw_vl)
4152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_BitMask&lt;_Np&gt;(_mm_movepi16_mask(__xi));
4153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw)
4154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_BitMask&lt;_Np&gt;(_mm512_movepi16_mask(__zero_extend(__xi)));
4155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;implies&#32;SSE2</emphasis>
4156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_BitMask&lt;_Np&gt;(
4157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_movemask_epi8(_mm_packs_epi16(__xi,&#32;__m128i())));
4158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32)
4159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw_vl)
4160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_BitMask&lt;_Np&gt;(_mm256_movepi16_mask(__xi));
4161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw)
4162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_BitMask&lt;_Np&gt;(_mm512_movepi16_mask(__zero_extend(__xi)));
4163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;implies&#32;SSE2</emphasis>
4164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_BitMask&lt;_Np&gt;(_mm_movemask_epi8(
4165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_packs_epi16(__lo128(__xi),&#32;__hi128(__xi))));
4166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;implies&#32;AVX512BW</emphasis>
4167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_BitMask&lt;_Np&gt;(_mm512_movepi16_mask(__xi));
4168 
4169 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
4170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16)
4171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq_vl)
4172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_BitMask&lt;_Np&gt;(_mm_movepi32_mask(__xi));
4173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512vl)
4174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_BitMask&lt;_Np&gt;(_mm_cmplt_epi32_mask(__xi,&#32;__m128i()));
4175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq)
4176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_BitMask&lt;_Np&gt;(_mm512_movepi32_mask(__zero_extend(__xi)));
4177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f)
4178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_BitMask&lt;_Np&gt;(
4179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_cmplt_epi32_mask(__zero_extend(__xi),&#32;__m512i()));
4180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;implies&#32;SSE</emphasis>
4181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_BitMask&lt;_Np&gt;(
4182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_movemask_ps(<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__m128<emphasis role="keyword">&gt;</emphasis>(__xi)));
4183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32)
4184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq_vl)
4185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_BitMask&lt;_Np&gt;(_mm256_movepi32_mask(__xi));
4186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq)
4187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_BitMask&lt;_Np&gt;(_mm512_movepi32_mask(__zero_extend(__xi)));
4188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512vl)
4189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_BitMask&lt;_Np&gt;(_mm256_cmplt_epi32_mask(__xi,&#32;__m256i()));
4190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f)
4191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_BitMask&lt;_Np&gt;(
4192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_cmplt_epi32_mask(__zero_extend(__xi),&#32;__m512i()));
4193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;implies&#32;AVX</emphasis>
4194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_BitMask&lt;_Np&gt;(
4195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_movemask_ps(<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__m256<emphasis role="keyword">&gt;</emphasis>(__xi)));
4196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;implies&#32;AVX512??</emphasis>
4197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq)
4198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_BitMask&lt;_Np&gt;(_mm512_movepi32_mask(__xi));
4199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;implies&#32;AVX512F</emphasis>
4200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_BitMask&lt;_Np&gt;(_mm512_cmplt_epi32_mask(__xi,&#32;__m512i()));
4201 
4202 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
4203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;16)
4204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq_vl)
4205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_BitMask&lt;_Np&gt;(_mm_movepi64_mask(__xi));
4206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq)
4207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_BitMask&lt;_Np&gt;(_mm512_movepi64_mask(__zero_extend(__xi)));
4208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512vl)
4209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_BitMask&lt;_Np&gt;(_mm_cmplt_epi64_mask(__xi,&#32;__m128i()));
4210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f)
4211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_BitMask&lt;_Np&gt;(
4212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_cmplt_epi64_mask(__zero_extend(__xi),&#32;__m512i()));
4213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;implies&#32;SSE2</emphasis>
4214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_BitMask&lt;_Np&gt;(
4215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_movemask_pd(<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__m128d<emphasis role="keyword">&gt;</emphasis>(__xi)));
4216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__xi)&#32;==&#32;32)
4217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq_vl)
4218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_BitMask&lt;_Np&gt;(_mm256_movepi64_mask(__xi));
4219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq)
4220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_BitMask&lt;_Np&gt;(_mm512_movepi64_mask(__zero_extend(__xi)));
4221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512vl)
4222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_BitMask&lt;_Np&gt;(_mm256_cmplt_epi64_mask(__xi,&#32;__m256i()));
4223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f)
4224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_BitMask&lt;_Np&gt;(
4225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_cmplt_epi64_mask(__zero_extend(__xi),&#32;__m512i()));
4226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;implies&#32;AVX</emphasis>
4227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_BitMask&lt;_Np&gt;(
4228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_movemask_pd(<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__m256d<emphasis role="keyword">&gt;</emphasis>(__xi)));
4229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;implies&#32;AVX512??</emphasis>
4230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq)
4231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_BitMask&lt;_Np&gt;(_mm512_movepi64_mask(__xi));
4232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;implies&#32;AVX512F</emphasis>
4233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_BitMask&lt;_Np&gt;(_mm512_cmplt_epi64_mask(__xi,&#32;__m512i()));
4234 
4235 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
4237 &#32;&#32;&#32;&#32;}
4238 &#32;&#32;&#32;&#32;}
4239 &#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
4240 };
4241 
4242 <emphasis role="comment">//&#32;}}}</emphasis>
4243 <emphasis role="comment">//&#32;_MaskImplX86&#32;{{{</emphasis>
4244 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Abi,&#32;<emphasis role="keyword">typename</emphasis>&gt;
4245 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_MaskImplX86&#32;:&#32;_MaskImplX86Mixin,&#32;_MaskImplBuiltin&lt;_Abi&gt;
4246 &#32;&#32;{
4247 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_MaskImplX86Mixin::_S_to_bits;
4248 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_MaskImplX86Mixin::_S_to_maskvector;
4249 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_MaskImplBuiltin&lt;_Abi&gt;::_S_convert;
4250 
4251 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;member&#32;types&#32;{{{</emphasis>
4252 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
4253 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_SimdMember&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi::template&#32;__traits&lt;_Tp&gt;::_SimdMember;
4254 
4255 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
4256 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_MaskMember&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi::template&#32;_MaskMember&lt;_Tp&gt;;
4257 
4258 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
4259 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_size&#32;=&#32;simd_size_v&lt;_Tp,&#32;_Abi&gt;;
4260 
4261 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base&#32;=&#32;_MaskImplBuiltin&lt;_Abi&gt;;
4262 
4263 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
4264 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_broadcast&#32;{{{</emphasis>
4265 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
4266 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_MaskMember&lt;_Tp&gt;
4267 &#32;&#32;&#32;&#32;&#32;&#32;_S_broadcast(<emphasis role="keywordtype">bool</emphasis>&#32;__x)
4268 &#32;&#32;&#32;&#32;&#32;&#32;{
4269 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_abi&lt;_Abi&gt;())
4270 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;?&#32;_Abi::_S_masked(_MaskMember&lt;_Tp&gt;(-1))
4271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_MaskMember&lt;_Tp&gt;();
4272 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4273 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::template&#32;_S_broadcast&lt;_Tp&gt;(__x);
4274 &#32;&#32;&#32;&#32;&#32;&#32;}
4275 
4276 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
4277 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_load&#32;{{{</emphasis>
4278 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
4279 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_MaskMember&lt;_Tp&gt;
4280 &#32;&#32;&#32;&#32;&#32;&#32;_S_load(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;__mem)
4281 &#32;&#32;&#32;&#32;&#32;&#32;{
4282 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same_v&lt;_Tp,&#32;__int_for_sizeof_t&lt;_Tp&gt;&gt;);
4283 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw)
4284 &#32;&#32;&#32;&#32;&#32;&#32;{
4285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__to_vec_or_bits&#32;=&#32;[](<emphasis role="keyword">auto</emphasis>&#32;__bits)&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)&#32;{
4286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_abi&lt;_Abi&gt;())
4287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__bits;
4288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_to_maskvector&lt;_Tp&gt;(
4290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BitMask&lt;_S_size&lt;_Tp&gt;&gt;(__bits)._M_sanitized());
4291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
4292 
4293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_S_size&lt;_Tp&gt;&#32;&lt;=&#32;16&#32;&amp;&amp;&#32;__have_avx512vl)
4294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i&#32;__a&#32;=&#32;{};
4296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(&amp;__a,&#32;__mem,&#32;_S_size&lt;_Tp&gt;);
4297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__to_vec_or_bits(_mm_test_epi8_mask(__a,&#32;__a));
4298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_S_size&lt;_Tp&gt;&#32;&lt;=&#32;32&#32;&amp;&amp;&#32;__have_avx512vl)
4300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m256i&#32;__a&#32;=&#32;{};
4302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(&amp;__a,&#32;__mem,&#32;_S_size&lt;_Tp&gt;);
4303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__to_vec_or_bits(_mm256_test_epi8_mask(__a,&#32;__a));
4304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_S_size&lt;_Tp&gt;&#32;&lt;=&#32;64)
4306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m512i&#32;__a&#32;=&#32;{};
4308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(&amp;__a,&#32;__mem,&#32;_S_size&lt;_Tp&gt;);
4309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__to_vec_or_bits(_mm512_test_epi8_mask(__a,&#32;__a));
4310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4311 &#32;&#32;&#32;&#32;&#32;&#32;}
4312 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_abi&lt;_Abi&gt;())
4313 &#32;&#32;&#32;&#32;&#32;&#32;{
4314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_S_size&lt;_Tp&gt;&#32;&lt;=&#32;8)
4315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i&#32;__a&#32;=&#32;{};
4317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(&amp;__a,&#32;__mem,&#32;_S_size&lt;_Tp&gt;);
4318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__b&#32;=&#32;_mm512_cvtepi8_epi64(__a);
4319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm512_test_epi64_mask(__b,&#32;__b);
4320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_S_size&lt;_Tp&gt;&#32;&lt;=&#32;16)
4322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i&#32;__a&#32;=&#32;{};
4324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(&amp;__a,&#32;__mem,&#32;_S_size&lt;_Tp&gt;);
4325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__b&#32;=&#32;_mm512_cvtepi8_epi32(__a);
4326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm512_test_epi32_mask(__b,&#32;__b);
4327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_S_size&lt;_Tp&gt;&#32;&lt;=&#32;32)
4329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i&#32;__a&#32;=&#32;{};
4331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(&amp;__a,&#32;__mem,&#32;16);
4332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__b&#32;=&#32;_mm512_cvtepi8_epi32(__a);
4333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(&amp;__a,&#32;__mem&#32;+&#32;16,&#32;_S_size&lt;_Tp&gt;&#32;-&#32;16);
4334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__c&#32;=&#32;_mm512_cvtepi8_epi32(__a);
4335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm512_test_epi32_mask(__b,&#32;__b)
4336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(_mm512_test_epi32_mask(__c,&#32;__c)&#32;&lt;&lt;&#32;16);
4337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_S_size&lt;_Tp&gt;&#32;&lt;=&#32;64)
4339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i&#32;__a&#32;=&#32;{};
4341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(&amp;__a,&#32;__mem,&#32;16);
4342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__b&#32;=&#32;_mm512_cvtepi8_epi32(__a);
4343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(&amp;__a,&#32;__mem&#32;+&#32;16,&#32;16);
4344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__c&#32;=&#32;_mm512_cvtepi8_epi32(__a);
4345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_S_size&lt;_Tp&gt;&#32;&lt;=&#32;48)
4346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(&amp;__a,&#32;__mem&#32;+&#32;32,&#32;_S_size&lt;_Tp&gt;&#32;-&#32;32);
4348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__d&#32;=&#32;_mm512_cvtepi8_epi32(__a);
4349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm512_test_epi32_mask(__b,&#32;__b)
4350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(_mm512_test_epi32_mask(__c,&#32;__c)&#32;&lt;&lt;&#32;16)
4351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(_ULLong(_mm512_test_epi32_mask(__d,&#32;__d))&#32;&lt;&lt;&#32;32);
4352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(&amp;__a,&#32;__mem&#32;+&#32;16,&#32;16);
4356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__d&#32;=&#32;_mm512_cvtepi8_epi32(__a);
4357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(&amp;__a,&#32;__mem&#32;+&#32;32,&#32;_S_size&lt;_Tp&gt;&#32;-&#32;48);
4358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__e&#32;=&#32;_mm512_cvtepi8_epi32(__a);
4359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm512_test_epi32_mask(__b,&#32;__b)
4360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(_mm512_test_epi32_mask(__c,&#32;__c)&#32;&lt;&lt;&#32;16)
4361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(_ULLong(_mm512_test_epi32_mask(__d,&#32;__d))&#32;&lt;&lt;&#32;32)
4362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(_ULLong(_mm512_test_epi32_mask(__e,&#32;__e))&#32;&lt;&lt;&#32;48);
4363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
4367 &#32;&#32;&#32;&#32;&#32;&#32;}
4368 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8&#32;&amp;&amp;&#32;_S_size&lt;_Tp&gt;&#32;==&#32;2)
4369 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Tp&gt;(
4370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_type16_t&lt;int&gt;{-int(__mem[0]),&#32;-int(__mem[0]),
4371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-int(__mem[1]),&#32;-int(__mem[1])});
4372 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8&#32;&amp;&amp;&#32;_S_size&lt;_Tp&gt;&#32;&lt;=&#32;4&#32;&amp;&amp;&#32;__have_avx)
4373 &#32;&#32;&#32;&#32;&#32;&#32;{
4374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;__bool4&#32;=&#32;0;
4375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(&amp;__bool4,&#32;__mem,&#32;_S_size&lt;_Tp&gt;);
4376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__k&#32;=&#32;__to_intrin(
4377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__vector_broadcast&lt;4&gt;(__bool4)
4378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&#32;__make_vector&lt;int&gt;(0x1,&#32;0x100,&#32;0x10000,
4379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_size&lt;_Tp&gt;&#32;==&#32;4&#32;?&#32;0x1000000&#32;:&#32;0))
4380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!=&#32;0);
4381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Tp&gt;(
4382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__concat(_mm_unpacklo_epi32(__k,&#32;__k),
4383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpackhi_epi32(__k,&#32;__k)));
4384 &#32;&#32;&#32;&#32;&#32;&#32;}
4385 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4&#32;&amp;&amp;&#32;_S_size&lt;_Tp&gt;&#32;&lt;=&#32;4)
4386 &#32;&#32;&#32;&#32;&#32;&#32;{
4387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;__bools&#32;=&#32;0;
4388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(&amp;__bools,&#32;__mem,&#32;_S_size&lt;_Tp&gt;);
4389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse2)
4390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i&#32;__k&#32;=&#32;_mm_cvtsi32_si128(__bools);
4392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__k&#32;=&#32;_mm_cmpgt_epi16(_mm_unpacklo_epi8(__k,&#32;__k),&#32;__m128i());
4393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Tp,&#32;_S_size&lt;_Tp&gt;&gt;(
4394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpacklo_epi16(__k,&#32;__k));
4395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128&#32;__k&#32;=&#32;_mm_cvtpi8_ps(_mm_cvtsi32_si64(__bools));
4399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_empty();
4400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Tp,&#32;_S_size&lt;_Tp&gt;&gt;(
4401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_cmpgt_ps(__k,&#32;__m128()));
4402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4403 &#32;&#32;&#32;&#32;&#32;&#32;}
4404 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4&#32;&amp;&amp;&#32;_S_size&lt;_Tp&gt;&#32;&lt;=&#32;8)
4405 &#32;&#32;&#32;&#32;&#32;&#32;{
4406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i&#32;__k&#32;=&#32;{};
4407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(&amp;__k,&#32;__mem,&#32;_S_size&lt;_Tp&gt;);
4408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__k&#32;=&#32;_mm_cmpgt_epi16(_mm_unpacklo_epi8(__k,&#32;__k),&#32;__m128i());
4409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Tp&gt;(
4410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__concat(_mm_unpacklo_epi16(__k,&#32;__k),
4411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpackhi_epi16(__k,&#32;__k)));
4412 &#32;&#32;&#32;&#32;&#32;&#32;}
4413 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2&#32;&amp;&amp;&#32;_S_size&lt;_Tp&gt;&#32;&lt;=&#32;16)
4414 &#32;&#32;&#32;&#32;&#32;&#32;{
4415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i&#32;__k&#32;=&#32;{};
4416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(&amp;__k,&#32;__mem,&#32;_S_size&lt;_Tp&gt;);
4417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__k&#32;=&#32;_mm_cmpgt_epi8(__k,&#32;__m128i());
4418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_S_size&lt;_Tp&gt;&#32;&lt;=&#32;8)
4419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Tp,&#32;_S_size&lt;_Tp&gt;&gt;(
4420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpacklo_epi8(__k,&#32;__k));
4421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__concat(_mm_unpacklo_epi8(__k,&#32;__k),
4423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpackhi_epi8(__k,&#32;__k));
4424 &#32;&#32;&#32;&#32;&#32;&#32;}
4425 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4426 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::template&#32;_S_load&lt;_Tp&gt;(__mem);
4427 &#32;&#32;&#32;&#32;&#32;&#32;}
4428 
4429 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
4430 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_from_bitmask{{{</emphasis>
4431 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
4432 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_MaskMember&lt;_Tp&gt;
4433 &#32;&#32;&#32;&#32;&#32;&#32;_S_from_bitmask(_SanitizedBitMask&lt;_Np&gt;&#32;__bits,&#32;_TypeTag&lt;_Tp&gt;)
4434 &#32;&#32;&#32;&#32;&#32;&#32;{
4435 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same_v&lt;_Tp,&#32;__int_for_sizeof_t&lt;_Tp&gt;&gt;);
4436 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_abi&lt;_Abi&gt;())
4437 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__bits._M_to_bits();
4438 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4439 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_to_maskvector&lt;_Tp,&#32;_S_size&lt;_Tp&gt;&gt;(__bits);
4440 &#32;&#32;&#32;&#32;&#32;&#32;}
4441 
4442 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
4443 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_masked_load&#32;{{{2</emphasis>
4444 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
4445 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
4446 &#32;&#32;&#32;&#32;&#32;&#32;_S_masked_load(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__merge,
4447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__mask,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;__mem)&#32;<emphasis role="keyword">noexcept</emphasis>
4448 &#32;&#32;&#32;&#32;&#32;&#32;{
4449 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_abi&lt;_Abi&gt;())
4450 &#32;&#32;&#32;&#32;&#32;&#32;{
4451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw_vl)
4452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&lt;=&#32;16)
4454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__a
4456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm_mask_loadu_epi8(__m128i(),&#32;__mask,&#32;__mem);
4457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__merge&#32;&amp;&#32;~__mask)&#32;|&#32;_mm_test_epi8_mask(__a,&#32;__a);
4458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&lt;=&#32;32)
4460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__a
4462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm256_mask_loadu_epi8(__m256i(),&#32;__mask,&#32;__mem);
4463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__merge&#32;&amp;&#32;~__mask)
4464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;_mm256_test_epi8_mask(__a,&#32;__a);
4465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&lt;=&#32;64)
4467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__a
4469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm512_mask_loadu_epi8(__m512i(),&#32;__mask,&#32;__mem);
4470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__merge&#32;&amp;&#32;~__mask)
4471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;_mm512_test_epi8_mask(__a,&#32;__a);
4472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
4475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BitOps::_S_bit_iteration(__mask,&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{
4479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__merge._M_set(__i,&#32;__mem[__i]);
4480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
4481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__merge;
4482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4483 &#32;&#32;&#32;&#32;&#32;&#32;}
4484 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw_vl&#32;&amp;&amp;&#32;_Np&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1)
4485 &#32;&#32;&#32;&#32;&#32;&#32;{
4486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__k&#32;=&#32;_S_to_bits(__mask)._M_to_bits();
4487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__merge&#32;=&#32;_mm256_mask_sub_epi8(__to_intrin(__merge),&#32;__k,&#32;__m256i(),
4488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_mask_loadu_epi8(__m256i(),
4489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__k,&#32;__mem));
4490 &#32;&#32;&#32;&#32;&#32;&#32;}
4491 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw_vl&#32;&amp;&amp;&#32;_Np&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1)
4492 &#32;&#32;&#32;&#32;&#32;&#32;{
4493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__k&#32;=&#32;_S_to_bits(__mask)._M_to_bits();
4494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__merge
4495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm_mask_sub_epi8(__vector_bitcast&lt;_LLong&gt;(__merge),&#32;__k,
4496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i(),
4497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_mask_loadu_epi8(__m128i(),&#32;__k,&#32;__mem));
4498 &#32;&#32;&#32;&#32;&#32;&#32;}
4499 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw_vl&#32;&amp;&amp;&#32;_Np&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2)
4500 &#32;&#32;&#32;&#32;&#32;&#32;{
4501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__k&#32;=&#32;_S_to_bits(__mask)._M_to_bits();
4502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__merge&#32;=&#32;_mm256_mask_sub_epi16(
4503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;_LLong&gt;(__merge),&#32;__k,&#32;__m256i(),
4504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_cvtepi8_epi16(_mm_mask_loadu_epi8(__m128i(),&#32;__k,&#32;__mem)));
4505 &#32;&#32;&#32;&#32;&#32;&#32;}
4506 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw_vl&#32;&amp;&amp;&#32;_Np&#32;==&#32;8&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2)
4507 &#32;&#32;&#32;&#32;&#32;&#32;{
4508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__k&#32;=&#32;_S_to_bits(__mask)._M_to_bits();
4509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__merge&#32;=&#32;_mm_mask_sub_epi16(
4510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;_LLong&gt;(__merge),&#32;__k,&#32;__m128i(),
4511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_cvtepi8_epi16(_mm_mask_loadu_epi8(__m128i(),&#32;__k,&#32;__mem)));
4512 &#32;&#32;&#32;&#32;&#32;&#32;}
4513 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw_vl&#32;&amp;&amp;&#32;_Np&#32;==&#32;8&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
4514 &#32;&#32;&#32;&#32;&#32;&#32;{
4515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__k&#32;=&#32;_S_to_bits(__mask)._M_to_bits();
4516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__merge&#32;=&#32;__vector_bitcast&lt;_Tp&gt;(_mm256_mask_sub_epi32(
4517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;_LLong&gt;(__merge),&#32;__k,&#32;__m256i(),
4518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_cvtepi8_epi32(
4519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_mask_loadu_epi8(__m128i(),&#32;__k,&#32;__mem))));
4520 &#32;&#32;&#32;&#32;&#32;&#32;}
4521 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw_vl&#32;&amp;&amp;&#32;_Np&#32;==&#32;4&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
4522 &#32;&#32;&#32;&#32;&#32;&#32;{
4523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__k&#32;=&#32;_S_to_bits(__mask)._M_to_bits();
4524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__merge&#32;=&#32;__vector_bitcast&lt;_Tp&gt;(_mm_mask_sub_epi32(
4525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;_LLong&gt;(__merge),&#32;__k,&#32;__m128i(),
4526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_cvtepi8_epi32(_mm_mask_loadu_epi8(__m128i(),&#32;__k,&#32;__mem))));
4527 &#32;&#32;&#32;&#32;&#32;&#32;}
4528 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw_vl&#32;&amp;&amp;&#32;_Np&#32;==&#32;4&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
4529 &#32;&#32;&#32;&#32;&#32;&#32;{
4530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__k&#32;=&#32;_S_to_bits(__mask)._M_to_bits();
4531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__merge&#32;=&#32;__vector_bitcast&lt;_Tp&gt;(_mm256_mask_sub_epi64(
4532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;_LLong&gt;(__merge),&#32;__k,&#32;__m256i(),
4533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_cvtepi8_epi64(
4534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_mask_loadu_epi8(__m128i(),&#32;__k,&#32;__mem))));
4535 &#32;&#32;&#32;&#32;&#32;&#32;}
4536 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw_vl&#32;&amp;&amp;&#32;_Np&#32;==&#32;2&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
4537 &#32;&#32;&#32;&#32;&#32;&#32;{
4538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__k&#32;=&#32;_S_to_bits(__mask)._M_to_bits();
4539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__merge&#32;=&#32;__vector_bitcast&lt;_Tp&gt;(_mm_mask_sub_epi64(
4540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;_LLong&gt;(__merge),&#32;__k,&#32;__m128i(),
4541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_cvtepi8_epi64(_mm_mask_loadu_epi8(__m128i(),&#32;__k,&#32;__mem))));
4542 &#32;&#32;&#32;&#32;&#32;&#32;}
4543 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4544 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_masked_load(__merge,&#32;__mask,&#32;__mem);
4545 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__merge;
4546 &#32;&#32;&#32;&#32;&#32;&#32;}
4547 
4548 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_store&#32;{{{2</emphasis>
4549 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
4550 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;_S_store(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__v,
4551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;__mem)&#32;<emphasis role="keyword">noexcept</emphasis>
4552 &#32;&#32;&#32;&#32;&#32;&#32;{
4553 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_abi&lt;_Abi&gt;())
4554 &#32;&#32;&#32;&#32;&#32;&#32;{
4555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw_vl)
4556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CommonImplX86::_S_store&lt;_Np&gt;(
4557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;char&gt;([](<emphasis role="keyword">auto</emphasis>&#32;__data)&#32;{
4558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&lt;=&#32;16)
4559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_maskz_set1_epi8(__data,&#32;1);
4560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&lt;=&#32;32)
4561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_maskz_set1_epi8(__data,&#32;1);
4562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm512_maskz_set1_epi8(__data,&#32;1);
4564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}(__v._M_data)),
4565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mem);
4566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&lt;=&#32;8)
4567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CommonImplX86::_S_store&lt;_Np&gt;(
4568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;char&gt;(
4569 #<emphasis role="keywordflow">if</emphasis>&#32;defined&#32;__x86_64__
4570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__make_wrapper&lt;_ULLong&gt;(
4571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_pdep_u64(__v._M_data,&#32;0x0101010101010101ULL),&#32;0ull)
4572 #<emphasis role="keywordflow">else</emphasis>
4573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__make_wrapper&lt;_UInt&gt;(_pdep_u32(__v._M_data,&#32;0x01010101U),
4574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_pdep_u32(__v._M_data&#32;&gt;&gt;&#32;4,
4575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x01010101U))
4576 #endif
4577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;),
4578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mem);
4579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&lt;=&#32;16)
4580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_mask_cvtepi32_storeu_epi8(
4581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mem,&#32;0xffffu&#32;&gt;&gt;&#32;(16&#32;-&#32;_Np),
4582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_maskz_set1_epi32(__v._M_data,&#32;1));
4583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
4585 &#32;&#32;&#32;&#32;&#32;&#32;}
4586 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_sse_abi&lt;_Abi&gt;())&#32;<emphasis role="comment">//{{{</emphasis>
4587 &#32;&#32;&#32;&#32;&#32;&#32;{
4588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;==&#32;2&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
4589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__k&#32;=&#32;__vector_bitcast&lt;int&gt;(__v);
4591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mem[0]&#32;=&#32;-__k[1];
4592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mem[1]&#32;=&#32;-__k[3];
4593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&lt;=&#32;4&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
4595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse2)
4597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;__bool4
4599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__vector_bitcast&lt;_UInt&gt;(_mm_packs_epi16(
4600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_packs_epi32(__intrin_bitcast&lt;__m128i&gt;(
4601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_intrin(__v)),
4602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i()),
4603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i()))[0]
4604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&#32;0x01010101u;
4605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(__mem,&#32;&amp;__bool4,&#32;_Np);
4606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_mmx)
4608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m64&#32;__k&#32;=&#32;_mm_cvtps_pi8(
4610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__and(__to_intrin(__v),&#32;_mm_set1_ps(1.f)));
4611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(__mem,&#32;&amp;__k,&#32;_Np);
4612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_empty();
4613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_store(__v,&#32;__mem);
4616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&lt;=&#32;8&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2)
4618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CommonImplX86::_S_store&lt;_Np&gt;(
4620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;char&gt;(_mm_packs_epi16(
4621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_intrin(__vector_bitcast&lt;_UShort&gt;(__v)&#32;&gt;&gt;&#32;15),
4622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i())),
4623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mem);
4624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&lt;=&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1)
4626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CommonImplX86::_S_store&lt;_Np&gt;(__v._M_data&#32;&amp;&#32;1,&#32;__mem);
4627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
4629 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
4630 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx_abi&lt;_Abi&gt;())&#32;<emphasis role="comment">//&#32;{{{</emphasis>
4631 &#32;&#32;&#32;&#32;&#32;&#32;{
4632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&lt;=&#32;4&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
4633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__k&#32;=&#32;__intrin_bitcast&lt;__m256i&gt;(__to_intrin(__v));
4635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;__bool4;
4636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx2)
4637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__bool4&#32;=&#32;_mm256_movemask_epi8(__k);
4638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__bool4&#32;=&#32;(_mm_movemask_epi8(__lo128(__k))
4640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(_mm_movemask_epi8(__hi128(__k))&#32;&lt;&lt;&#32;16));
4641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__bool4&#32;&amp;=&#32;0x01010101;
4642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(__mem,&#32;&amp;__bool4,&#32;_Np);
4643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&lt;=&#32;8&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
4645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__k&#32;=&#32;__intrin_bitcast&lt;__m256i&gt;(__to_intrin(__v));
4647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__k2
4648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm_srli_epi16(_mm_packs_epi16(__lo128(__k),&#32;__hi128(__k)),
4649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;15);
4650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__k3
4651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__vector_bitcast&lt;char&gt;(_mm_packs_epi16(__k2,&#32;__m128i()));
4652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CommonImplX86::_S_store&lt;_Np&gt;(__k3,&#32;__mem);
4653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&lt;=&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2)
4655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx2)
4657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__x&#32;=&#32;_mm256_srli_epi16(__to_intrin(__v),&#32;15);
4659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__bools&#32;=&#32;__vector_bitcast&lt;char&gt;(
4660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_packs_epi16(__lo128(__x),&#32;__hi128(__x)));
4661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CommonImplX86::_S_store&lt;_Np&gt;(__bools,&#32;__mem);
4662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__bools
4666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;1
4667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&#32;__vector_bitcast&lt;_UChar&gt;(
4668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_packs_epi16(__lo128(__to_intrin(__v)),
4669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__hi128(__to_intrin(__v))));
4670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CommonImplX86::_S_store&lt;_Np&gt;(__bools,&#32;__mem);
4671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&lt;=&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1)
4674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CommonImplX86::_S_store&lt;_Np&gt;(1&#32;&amp;&#32;__v._M_data,&#32;__mem);
4675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
4677 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;}}}</emphasis>
4678 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4679 &#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
4680 &#32;&#32;&#32;&#32;&#32;&#32;}
4681 
4682 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_masked_store&#32;{{{2</emphasis>
4683 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
4684 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
4685 &#32;&#32;&#32;&#32;&#32;&#32;_S_masked_store(<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__v,&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;__mem,
4686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__k)&#32;<emphasis role="keyword">noexcept</emphasis>
4687 &#32;&#32;&#32;&#32;&#32;&#32;{
4688 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_abi&lt;_Abi&gt;())
4689 &#32;&#32;&#32;&#32;&#32;&#32;{
4690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same_v&lt;_Tp,&#32;bool&gt;);
4691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&lt;=&#32;16&#32;&amp;&amp;&#32;__have_avx512bw_vl)
4692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_mask_storeu_epi8(__mem,&#32;__k,&#32;_mm_maskz_set1_epi8(__v,&#32;1));
4693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&lt;=&#32;16)
4694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_mask_cvtepi32_storeu_epi8(__mem,&#32;__k,
4695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_maskz_set1_epi32(__v,&#32;1));
4696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&lt;=&#32;32&#32;&amp;&amp;&#32;__have_avx512bw_vl)
4697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_mask_storeu_epi8(__mem,&#32;__k,
4698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_maskz_set1_epi8(__v,&#32;1));
4699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&lt;=&#32;32&#32;&amp;&amp;&#32;__have_avx512bw)
4700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_mask_storeu_epi8(__mem,&#32;__k,
4701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lo256(_mm512_maskz_set1_epi8(__v,&#32;1)));
4702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&lt;=&#32;64&#32;&amp;&amp;&#32;__have_avx512bw)
4703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_mask_storeu_epi8(__mem,&#32;__k,
4704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_maskz_set1_epi8(__v,&#32;1));
4705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
4707 &#32;&#32;&#32;&#32;&#32;&#32;}
4708 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4709 &#32;&#32;&#32;&#32;&#32;&#32;_Base::_S_masked_store(__v,&#32;__mem,&#32;__k);
4710 &#32;&#32;&#32;&#32;&#32;&#32;}
4711 
4712 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;logical&#32;and&#32;bitwise&#32;operators&#32;{{{2</emphasis>
4713 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
4714 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
4715 &#32;&#32;&#32;&#32;&#32;&#32;_S_logical_and(<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&amp;&#32;__x,
4716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&amp;&#32;__y)
4717 &#32;&#32;&#32;&#32;&#32;&#32;{
4718 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Tp,&#32;bool&gt;)
4719 &#32;&#32;&#32;&#32;&#32;&#32;{
4720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq&#32;&amp;&amp;&#32;_Np&#32;&lt;=&#32;8)
4721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_kand_mask8(__x._M_data,&#32;__y._M_data);
4722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&lt;=&#32;16)
4723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a16d55dfa73a918709ea8a529fa7dcdc1">_kand_mask16</link>(__x._M_data,&#32;__y._M_data);
4724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw&#32;&amp;&amp;&#32;_Np&#32;&lt;=&#32;32)
4725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_kand_mask32(__x._M_data,&#32;__y._M_data);
4726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw&#32;&amp;&amp;&#32;_Np&#32;&lt;=&#32;64)
4727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_kand_mask64(__x._M_data,&#32;__y._M_data);
4728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
4730 &#32;&#32;&#32;&#32;&#32;&#32;}
4731 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4732 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_logical_and(__x,&#32;__y);
4733 &#32;&#32;&#32;&#32;&#32;&#32;}
4734 
4735 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
4736 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
4737 &#32;&#32;&#32;&#32;&#32;&#32;_S_logical_or(<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&amp;&#32;__x,
4738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&amp;&#32;__y)
4739 &#32;&#32;&#32;&#32;&#32;&#32;{
4740 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Tp,&#32;bool&gt;)
4741 &#32;&#32;&#32;&#32;&#32;&#32;{
4742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq&#32;&amp;&amp;&#32;_Np&#32;&lt;=&#32;8)
4743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_kor_mask8(__x._M_data,&#32;__y._M_data);
4744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&lt;=&#32;16)
4745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a5567cbc0b911168d1ca97df9c3cf0f31">_kor_mask16</link>(__x._M_data,&#32;__y._M_data);
4746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw&#32;&amp;&amp;&#32;_Np&#32;&lt;=&#32;32)
4747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_kor_mask32(__x._M_data,&#32;__y._M_data);
4748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw&#32;&amp;&amp;&#32;_Np&#32;&lt;=&#32;64)
4749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_kor_mask64(__x._M_data,&#32;__y._M_data);
4750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
4752 &#32;&#32;&#32;&#32;&#32;&#32;}
4753 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4754 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_logical_or(__x,&#32;__y);
4755 &#32;&#32;&#32;&#32;&#32;&#32;}
4756 
4757 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
4758 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
4759 &#32;&#32;&#32;&#32;&#32;&#32;_S_bit_not(<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&amp;&#32;__x)
4760 &#32;&#32;&#32;&#32;&#32;&#32;{
4761 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Tp,&#32;bool&gt;)
4762 &#32;&#32;&#32;&#32;&#32;&#32;{
4763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq&#32;&amp;&amp;&#32;_Np&#32;&lt;=&#32;8)
4764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_kandn_mask8(__x._M_data,
4765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Abi::template&#32;__implicit_mask_n&lt;_Np&gt;());
4766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&lt;=&#32;16)
4767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1ae30edf02e81beff1b87caa3d60ad19cd">_kandn_mask16</link>(__x._M_data,
4768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Abi::template&#32;__implicit_mask_n&lt;_Np&gt;());
4769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw&#32;&amp;&amp;&#32;_Np&#32;&lt;=&#32;32)
4770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_kandn_mask32(__x._M_data,
4771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Abi::template&#32;__implicit_mask_n&lt;_Np&gt;());
4772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw&#32;&amp;&amp;&#32;_Np&#32;&lt;=&#32;64)
4773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_kandn_mask64(__x._M_data,
4774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Abi::template&#32;__implicit_mask_n&lt;_Np&gt;());
4775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
4777 &#32;&#32;&#32;&#32;&#32;&#32;}
4778 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4779 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_bit_not(__x);
4780 &#32;&#32;&#32;&#32;&#32;&#32;}
4781 
4782 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
4783 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
4784 &#32;&#32;&#32;&#32;&#32;&#32;_S_bit_and(<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&amp;&#32;__x,
4785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&amp;&#32;__y)
4786 &#32;&#32;&#32;&#32;&#32;&#32;{
4787 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Tp,&#32;bool&gt;)
4788 &#32;&#32;&#32;&#32;&#32;&#32;{
4789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq&#32;&amp;&amp;&#32;_Np&#32;&lt;=&#32;8)
4790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_kand_mask8(__x._M_data,&#32;__y._M_data);
4791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&lt;=&#32;16)
4792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a16d55dfa73a918709ea8a529fa7dcdc1">_kand_mask16</link>(__x._M_data,&#32;__y._M_data);
4793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw&#32;&amp;&amp;&#32;_Np&#32;&lt;=&#32;32)
4794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_kand_mask32(__x._M_data,&#32;__y._M_data);
4795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw&#32;&amp;&amp;&#32;_Np&#32;&lt;=&#32;64)
4796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_kand_mask64(__x._M_data,&#32;__y._M_data);
4797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
4799 &#32;&#32;&#32;&#32;&#32;&#32;}
4800 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4801 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_bit_and(__x,&#32;__y);
4802 &#32;&#32;&#32;&#32;&#32;&#32;}
4803 
4804 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
4805 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
4806 &#32;&#32;&#32;&#32;&#32;&#32;_S_bit_or(<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&amp;&#32;__x,
4807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&amp;&#32;__y)
4808 &#32;&#32;&#32;&#32;&#32;&#32;{
4809 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Tp,&#32;bool&gt;)
4810 &#32;&#32;&#32;&#32;&#32;&#32;{
4811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq&#32;&amp;&amp;&#32;_Np&#32;&lt;=&#32;8)
4812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_kor_mask8(__x._M_data,&#32;__y._M_data);
4813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&lt;=&#32;16)
4814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a5567cbc0b911168d1ca97df9c3cf0f31">_kor_mask16</link>(__x._M_data,&#32;__y._M_data);
4815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw&#32;&amp;&amp;&#32;_Np&#32;&lt;=&#32;32)
4816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_kor_mask32(__x._M_data,&#32;__y._M_data);
4817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw&#32;&amp;&amp;&#32;_Np&#32;&lt;=&#32;64)
4818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_kor_mask64(__x._M_data,&#32;__y._M_data);
4819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
4821 &#32;&#32;&#32;&#32;&#32;&#32;}
4822 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4823 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_bit_or(__x,&#32;__y);
4824 &#32;&#32;&#32;&#32;&#32;&#32;}
4825 
4826 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
4827 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
4828 &#32;&#32;&#32;&#32;&#32;&#32;_S_bit_xor(<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&amp;&#32;__x,
4829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&amp;&#32;__y)
4830 &#32;&#32;&#32;&#32;&#32;&#32;{
4831 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Tp,&#32;bool&gt;)
4832 &#32;&#32;&#32;&#32;&#32;&#32;{
4833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq&#32;&amp;&amp;&#32;_Np&#32;&lt;=&#32;8)
4834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_kxor_mask8(__x._M_data,&#32;__y._M_data);
4835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&lt;=&#32;16)
4836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1af3995a82f52b0f7859e14e32b15dd57a">_kxor_mask16</link>(__x._M_data,&#32;__y._M_data);
4837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw&#32;&amp;&amp;&#32;_Np&#32;&lt;=&#32;32)
4838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_kxor_mask32(__x._M_data,&#32;__y._M_data);
4839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw&#32;&amp;&amp;&#32;_Np&#32;&lt;=&#32;64)
4840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_kxor_mask64(__x._M_data,&#32;__y._M_data);
4841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
4843 &#32;&#32;&#32;&#32;&#32;&#32;}
4844 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4845 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_bit_xor(__x,&#32;__y);
4846 &#32;&#32;&#32;&#32;&#32;&#32;}
4847 
4848 &#32;&#32;&#32;&#32;<emphasis role="comment">//}}}2</emphasis>
4849 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_masked_assign{{{</emphasis>
4850 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
4851 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
4852 &#32;&#32;&#32;&#32;&#32;&#32;_S_masked_assign(_SimdWrapper&lt;bool,&#32;_Np&gt;&#32;__k,
4853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdWrapper&lt;bool,&#32;_Np&gt;&amp;&#32;__lhs,
4854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdWrapper&lt;bool,&#32;_Np&gt;&#32;__rhs)
4855 &#32;&#32;&#32;&#32;&#32;&#32;{
4856 &#32;&#32;&#32;&#32;__lhs._M_data
4857 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;(~__k._M_data&#32;&amp;&#32;__lhs._M_data)&#32;|&#32;(__k._M_data&#32;&amp;&#32;__rhs._M_data);
4858 &#32;&#32;&#32;&#32;&#32;&#32;}
4859 
4860 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
4861 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
4862 &#32;&#32;&#32;&#32;&#32;&#32;_S_masked_assign(_SimdWrapper&lt;bool,&#32;_Np&gt;&#32;__k,
4863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdWrapper&lt;bool,&#32;_Np&gt;&amp;&#32;__lhs,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__rhs)
4864 &#32;&#32;&#32;&#32;&#32;&#32;{
4865 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__rhs)
4866 &#32;&#32;&#32;&#32;&#32;&#32;__lhs._M_data&#32;=&#32;__k._M_data&#32;|&#32;__lhs._M_data;
4867 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4868 &#32;&#32;&#32;&#32;&#32;&#32;__lhs._M_data&#32;=&#32;~__k._M_data&#32;&amp;&#32;__lhs._M_data;
4869 &#32;&#32;&#32;&#32;&#32;&#32;}
4870 
4871 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_MaskImplBuiltin&lt;_Abi&gt;::_S_masked_assign;
4872 
4873 &#32;&#32;&#32;&#32;<emphasis role="comment">//}}}</emphasis>
4874 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_all_of&#32;{{{</emphasis>
4875 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
4876 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_S_all_of(simd_mask&lt;_Tp,&#32;_Abi&gt;&#32;__k)
4877 &#32;&#32;&#32;&#32;&#32;&#32;{
4878 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_sse_abi&lt;_Abi&gt;()&#32;||&#32;__is_avx_abi&lt;_Abi&gt;())
4879 &#32;&#32;&#32;&#32;&#32;&#32;{
4880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&#32;=&#32;simd_size_v&lt;_Tp,&#32;_Abi&gt;;
4881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_TI&#32;=&#32;__intrinsic_type_t&lt;_Tp,&#32;_Np&gt;;
4882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_TI&#32;__a&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_TI<emphasis role="keyword">&gt;</emphasis>(__to_intrin(__data(__k)));
4883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse4_1)
4884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_USE_CONSTEXPR&#32;_TI&#32;__b
4886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_Abi::template&#32;_S_implicit_mask_intrin&lt;_Tp&gt;();
4887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0&#32;!=&#32;__testc(__a,&#32;__b);
4888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Tp,&#32;float&gt;)
4890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(_mm_movemask_ps(__a)&#32;&amp;&#32;((1&#32;&lt;&lt;&#32;_Np)&#32;-&#32;1))
4891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;==&#32;(1&#32;&lt;&lt;&#32;_Np)&#32;-&#32;1;
4892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Tp,&#32;double&gt;)
4893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(_mm_movemask_pd(__a)&#32;&amp;&#32;((1&#32;&lt;&lt;&#32;_Np)&#32;-&#32;1))
4894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;==&#32;(1&#32;&lt;&lt;&#32;_Np)&#32;-&#32;1;
4895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(_mm_movemask_epi8(__a)&#32;&amp;&#32;((1&#32;&lt;&lt;&#32;(_Np&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)))&#32;-&#32;1))
4897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;==&#32;(1&#32;&lt;&lt;&#32;(_Np&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)))&#32;-&#32;1;
4898 &#32;&#32;&#32;&#32;&#32;&#32;}
4899 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_abi&lt;_Abi&gt;())
4900 &#32;&#32;&#32;&#32;&#32;&#32;{
4901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;_Mask&#32;=&#32;_Abi::template&#32;_S_implicit_mask&lt;_Tp&gt;();
4902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__kk&#32;=&#32;__k._M_data._M_data;
4903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__kk)&#32;==&#32;1)
4904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq)
4906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_kortestc_mask8_u8(__kk,&#32;_Mask&#32;==&#32;0xff
4907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;__kk
4908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="__classes_2lib_2include_2avx512cdintrin_8h_1a9351fcffd2210999639f467660e32673">__mmask8</link>(~_Mask));
4909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_kortestc_mask16_u8(__kk,&#32;<link linkend="__classes_2lib_2include_2avx512cdintrin_8h_1adc52f2d501b71ebd5df08fa2e0573636">__mmask16</link>(~_Mask));
4911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__kk)&#32;==&#32;2)
4913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_kortestc_mask16_u8(__kk,&#32;_Mask&#32;==&#32;0xffff
4914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;__kk
4915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="__classes_2lib_2include_2avx512cdintrin_8h_1adc52f2d501b71ebd5df08fa2e0573636">__mmask16</link>(~_Mask));
4916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__kk)&#32;==&#32;4&#32;&amp;&amp;&#32;__have_avx512bw)
4917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_kortestc_mask32_u8(__kk,&#32;_Mask&#32;==&#32;0xffffffffU
4918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;__kk
4919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1adfd5d7ee308260ea96d3caf338c2ed75">__mmask32</link>(~_Mask));
4920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__kk)&#32;==&#32;8&#32;&amp;&amp;&#32;__have_avx512bw)
4921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_kortestc_mask64_u8(__kk,&#32;_Mask&#32;==&#32;0xffffffffffffffffULL
4922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;__kk
4923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a910ccf7d2141c4a3b8675e2480cc33ff">__mmask64</link>(~_Mask));
4924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
4926 &#32;&#32;&#32;&#32;&#32;&#32;}
4927 &#32;&#32;&#32;&#32;&#32;&#32;}
4928 
4929 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
4930 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_any_of&#32;{{{</emphasis>
4931 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
4932 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_S_any_of(simd_mask&lt;_Tp,&#32;_Abi&gt;&#32;__k)
4933 &#32;&#32;&#32;&#32;&#32;&#32;{
4934 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_sse_abi&lt;_Abi&gt;()&#32;||&#32;__is_avx_abi&lt;_Abi&gt;())
4935 &#32;&#32;&#32;&#32;&#32;&#32;{
4936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&#32;=&#32;simd_size_v&lt;_Tp,&#32;_Abi&gt;;
4937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_TI&#32;=&#32;__intrinsic_type_t&lt;_Tp,&#32;_Np&gt;;
4938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_TI&#32;__a&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_TI<emphasis role="keyword">&gt;</emphasis>(__to_intrin(__data(__k)));
4939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse4_1)
4940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Abi::template&#32;_S_is_partial&lt;
4942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp&gt;&#32;||&#32;<emphasis role="keyword">sizeof</emphasis>(__k)&#32;&lt;&#32;16)
4943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_USE_CONSTEXPR&#32;_TI&#32;__b
4945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_Abi::template&#32;_S_implicit_mask_intrin&lt;_Tp&gt;();
4946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0&#32;==&#32;__testz(__a,&#32;__b);
4947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0&#32;==&#32;__testz(__a,&#32;__a);
4950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Tp,&#32;float&gt;)
4952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(_mm_movemask_ps(__a)&#32;&amp;&#32;((1&#32;&lt;&lt;&#32;_Np)&#32;-&#32;1))&#32;!=&#32;0;
4953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Tp,&#32;double&gt;)
4954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(_mm_movemask_pd(__a)&#32;&amp;&#32;((1&#32;&lt;&lt;&#32;_Np)&#32;-&#32;1))&#32;!=&#32;0;
4955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(_mm_movemask_epi8(__a)&#32;&amp;&#32;((1&#32;&lt;&lt;&#32;(_Np&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)))&#32;-&#32;1))
4957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!=&#32;0;
4958 &#32;&#32;&#32;&#32;&#32;&#32;}
4959 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_abi&lt;_Abi&gt;())
4960 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__k._M_data._M_data&#32;&amp;&#32;_Abi::template&#32;_S_implicit_mask&lt;_Tp&gt;())
4961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!=&#32;0;
4962 &#32;&#32;&#32;&#32;&#32;&#32;}
4963 
4964 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
4965 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_none_of&#32;{{{</emphasis>
4966 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
4967 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_S_none_of(simd_mask&lt;_Tp,&#32;_Abi&gt;&#32;__k)
4968 &#32;&#32;&#32;&#32;&#32;&#32;{
4969 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_sse_abi&lt;_Abi&gt;()&#32;||&#32;__is_avx_abi&lt;_Abi&gt;())
4970 &#32;&#32;&#32;&#32;&#32;&#32;{
4971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&#32;=&#32;simd_size_v&lt;_Tp,&#32;_Abi&gt;;
4972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_TI&#32;=&#32;__intrinsic_type_t&lt;_Tp,&#32;_Np&gt;;
4973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_TI&#32;__a&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_TI<emphasis role="keyword">&gt;</emphasis>(__to_intrin(__data(__k)));
4974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse4_1)
4975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Abi::template&#32;_S_is_partial&lt;
4977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp&gt;&#32;||&#32;<emphasis role="keyword">sizeof</emphasis>(__k)&#32;&lt;&#32;16)
4978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_USE_CONSTEXPR&#32;_TI&#32;__b
4980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_Abi::template&#32;_S_implicit_mask_intrin&lt;_Tp&gt;();
4981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0&#32;!=&#32;__testz(__a,&#32;__b);
4982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0&#32;!=&#32;__testz(__a,&#32;__a);
4985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Tp,&#32;float&gt;)
4987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__movemask(__a)&#32;&amp;&#32;((1&#32;&lt;&lt;&#32;_Np)&#32;-&#32;1))&#32;==&#32;0;
4988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Tp,&#32;double&gt;)
4989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__movemask(__a)&#32;&amp;&#32;((1&#32;&lt;&lt;&#32;_Np)&#32;-&#32;1))&#32;==&#32;0;
4990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__movemask(__a)&#32;&amp;&#32;int((1ull&#32;&lt;&lt;&#32;(_Np&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)))&#32;-&#32;1))
4992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;==&#32;0;
4993 &#32;&#32;&#32;&#32;&#32;&#32;}
4994 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_abi&lt;_Abi&gt;())
4995 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__k._M_data._M_data&#32;&amp;&#32;_Abi::template&#32;_S_implicit_mask&lt;_Tp&gt;())
4996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;==&#32;0;
4997 &#32;&#32;&#32;&#32;&#32;&#32;}
4998 
4999 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
5000 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_some_of&#32;{{{</emphasis>
5001 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
5002 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_S_some_of(simd_mask&lt;_Tp,&#32;_Abi&gt;&#32;__k)
5003 &#32;&#32;&#32;&#32;&#32;&#32;{
5004 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_sse_abi&lt;_Abi&gt;()&#32;||&#32;__is_avx_abi&lt;_Abi&gt;())
5005 &#32;&#32;&#32;&#32;&#32;&#32;{
5006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&#32;=&#32;simd_size_v&lt;_Tp,&#32;_Abi&gt;;
5007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_TI&#32;=&#32;__intrinsic_type_t&lt;_Tp,&#32;_Np&gt;;
5008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_TI&#32;__a&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_TI<emphasis role="keyword">&gt;</emphasis>(__to_intrin(__data(__k)));
5009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse4_1)
5010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_USE_CONSTEXPR&#32;_TI&#32;__b
5012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_Abi::template&#32;_S_implicit_mask_intrin&lt;_Tp&gt;();
5013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0&#32;!=&#32;__testnzc(__a,&#32;__b);
5014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Tp,&#32;float&gt;)
5016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__allbits&#32;=&#32;(1&#32;&lt;&lt;&#32;_Np)&#32;-&#32;1;
5018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;_mm_movemask_ps(__a)&#32;&amp;&#32;__allbits;
5019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;&gt;&#32;0&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;&lt;&#32;__allbits;
5020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Tp,&#32;double&gt;)
5022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__allbits&#32;=&#32;(1&#32;&lt;&lt;&#32;_Np)&#32;-&#32;1;
5024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;_mm_movemask_pd(__a)&#32;&amp;&#32;__allbits;
5025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;&gt;&#32;0&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;&lt;&#32;__allbits;
5026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__allbits&#32;=&#32;(1&#32;&lt;&lt;&#32;(_Np&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)))&#32;-&#32;1;
5030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;_mm_movemask_epi8(__a)&#32;&amp;&#32;__allbits;
5031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;&gt;&#32;0&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;&lt;&#32;__allbits;
5032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5033 &#32;&#32;&#32;&#32;&#32;&#32;}
5034 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_abi&lt;_Abi&gt;())
5035 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_any_of(__k)&#32;&amp;&amp;&#32;!_S_all_of(__k);
5036 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5037 &#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
5038 &#32;&#32;&#32;&#32;&#32;&#32;}
5039 
5040 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
5041 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_popcount&#32;{{{</emphasis>
5042 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
5043 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_S_popcount(simd_mask&lt;_Tp,&#32;_Abi&gt;&#32;__k)
5044 &#32;&#32;&#32;&#32;&#32;&#32;{
5045 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&#32;=&#32;simd_size_v&lt;_Tp,&#32;_Abi&gt;;
5046 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__kk&#32;=&#32;_Abi::_S_masked(__k._M_data)._M_data;
5047 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_abi&lt;_Abi&gt;())
5048 &#32;&#32;&#32;&#32;&#32;&#32;{
5049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&gt;&#32;32)
5050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_popcountll(__kk);
5051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_popcount(__kk);
5053 &#32;&#32;&#32;&#32;&#32;&#32;}
5054 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5055 &#32;&#32;&#32;&#32;&#32;&#32;{
5056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_popcnt)
5057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;__bits
5059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__movemask(__to_intrin(__vector_bitcast&lt;_Tp&gt;(__kk)));
5060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>&#32;=&#32;__builtin_popcount(__bits);
5061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_integral_v&lt;_Tp&gt;&#32;?&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;:&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>;
5062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;==&#32;2&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
5064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespacemask">mask</link>&#32;=&#32;_mm_movemask_pd(__auto_bitcast(__kk));
5066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacemask">mask</link>&#32;-&#32;(<link linkend="_namespacemask">mask</link>&#32;&gt;&gt;&#32;1);
5067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&lt;=&#32;4&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
5069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__x&#32;=&#32;-(__lo128(__kk)&#32;+&#32;__hi128(__kk));
5071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x[0]&#32;+&#32;__x[1];
5072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&lt;=&#32;4&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
5074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse2)
5076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i&#32;__x&#32;=&#32;__intrin_bitcast&lt;__m128i&gt;(__to_intrin(__kk));
5078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;_mm_add_epi32(
5079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x,&#32;<link linkend="__classes_2lib_2include_2emmintrin_8h_1ac4e4fd624042288e02f3e842e466ed2c">_mm_shuffle_epi32</link>(__x,&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1adf4da55ebbb167407ecb8a9f89909254">_MM_SHUFFLE</link>(0,&#32;1,&#32;2,&#32;3)));
5080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;_mm_add_epi32(
5081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x,&#32;<link linkend="__classes_2lib_2include_2emmintrin_8h_1a20069e7d4536463a1d973e078f6b3b6d">_mm_shufflelo_epi16</link>(__x,&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1adf4da55ebbb167407ecb8a9f89909254">_MM_SHUFFLE</link>(1,&#32;0,&#32;3,&#32;2)));
5082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-_mm_cvtsi128_si32(__x);
5083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_popcount(
5086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_movemask_ps(__auto_bitcast(__kk)));
5087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&lt;=&#32;8&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2)
5089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__x&#32;=&#32;__to_intrin(__kk);
5091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;_mm_add_epi16(__x,
5092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2emmintrin_8h_1ac4e4fd624042288e02f3e842e466ed2c">_mm_shuffle_epi32</link>(__x,
5093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1adf4da55ebbb167407ecb8a9f89909254">_MM_SHUFFLE</link>(0,&#32;1,&#32;2,&#32;3)));
5094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;_mm_add_epi16(
5095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x,&#32;<link linkend="__classes_2lib_2include_2emmintrin_8h_1a20069e7d4536463a1d973e078f6b3b6d">_mm_shufflelo_epi16</link>(__x,&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1adf4da55ebbb167407ecb8a9f89909254">_MM_SHUFFLE</link>(0,&#32;1,&#32;2,&#32;3)));
5096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;_mm_add_epi16(
5097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x,&#32;<link linkend="__classes_2lib_2include_2emmintrin_8h_1a20069e7d4536463a1d973e078f6b3b6d">_mm_shufflelo_epi16</link>(__x,&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1adf4da55ebbb167407ecb8a9f89909254">_MM_SHUFFLE</link>(2,&#32;3,&#32;0,&#32;1)));
5098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-short(<link linkend="__classes_2lib_2include_2emmintrin_8h_1a2380e4b1bfad026b9a78ab376bfd7286">_mm_extract_epi16</link>(__x,&#32;0));
5099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&lt;=&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1)
5101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__x&#32;=&#32;__to_intrin(__kk);
5103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;_mm_add_epi8(__x,
5104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2emmintrin_8h_1ac4e4fd624042288e02f3e842e466ed2c">_mm_shuffle_epi32</link>(__x,
5105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1adf4da55ebbb167407ecb8a9f89909254">_MM_SHUFFLE</link>(0,&#32;1,&#32;2,&#32;3)));
5106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;_mm_add_epi8(__x,
5107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2emmintrin_8h_1a20069e7d4536463a1d973e078f6b3b6d">_mm_shufflelo_epi16</link>(__x,&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1adf4da55ebbb167407ecb8a9f89909254">_MM_SHUFFLE</link>(0,&#32;1,&#32;2,
5108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;3)));
5109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;_mm_add_epi8(__x,
5110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2emmintrin_8h_1a20069e7d4536463a1d973e078f6b3b6d">_mm_shufflelo_epi16</link>(__x,&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1adf4da55ebbb167407ecb8a9f89909254">_MM_SHUFFLE</link>(2,&#32;3,&#32;0,
5111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1)));
5112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__y&#32;=&#32;-__vector_bitcast&lt;_UChar&gt;(__x);
5113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse4_1)
5114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__y[0]&#32;+&#32;__y[1];
5115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;__z&#32;=&#32;<link linkend="__classes_2lib_2include_2emmintrin_8h_1a2380e4b1bfad026b9a78ab376bfd7286">_mm_extract_epi16</link>(__to_intrin(__y),&#32;0);
5118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__z&#32;&amp;&#32;0xff)&#32;+&#32;(__z&#32;&gt;&gt;&#32;8);
5119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__kk)&#32;==&#32;32)
5122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;following&#32;works&#32;only&#32;as&#32;long&#32;as&#32;the&#32;implementations&#32;above</emphasis>
5124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;use&#32;a&#32;summation</emphasis>
5125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_I&#32;=&#32;__int_for_sizeof_t&lt;_Tp&gt;;
5126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__as_int&#32;=&#32;__vector_bitcast&lt;_I&gt;(__kk);
5127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_MaskImplX86&lt;simd_abi::__sse&gt;::_S_popcount(
5128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;simd_mask&lt;_I,&#32;simd_abi::__sse&gt;(__private_init,
5129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lo128(__as_int)
5130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;__hi128(__as_int)));
5131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
5134 &#32;&#32;&#32;&#32;&#32;&#32;}
5135 &#32;&#32;&#32;&#32;&#32;&#32;}
5136 
5137 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
5138 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_find_first_set&#32;{{{</emphasis>
5139 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
5140 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
5141 &#32;&#32;&#32;&#32;&#32;&#32;_S_find_first_set(simd_mask&lt;_Tp,&#32;_Abi&gt;&#32;__k)
5142 &#32;&#32;&#32;&#32;&#32;&#32;{
5143 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_abi&lt;_Abi&gt;())
5144 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__countr_zero(__k._M_data._M_data);
5145 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5146 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_find_first_set(__k);
5147 &#32;&#32;&#32;&#32;&#32;&#32;}
5148 
5149 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
5150 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_find_last_set&#32;{{{</emphasis>
5151 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
5152 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
5153 &#32;&#32;&#32;&#32;&#32;&#32;_S_find_last_set(simd_mask&lt;_Tp,&#32;_Abi&gt;&#32;__k)
5154 &#32;&#32;&#32;&#32;&#32;&#32;{
5155 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_avx512_abi&lt;_Abi&gt;())
5156 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__bit_width(__k._M_data._M_data)&#32;-&#32;1;
5157 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5158 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::_S_find_last_set(__k);
5159 &#32;&#32;&#32;&#32;&#32;&#32;}
5160 
5161 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
5162 &#32;&#32;};
5163 
5164 <emphasis role="comment">//&#32;}}}</emphasis>
5165 
5166 _GLIBCXX_SIMD_END_NAMESPACE
5167 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
5168 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_EXPERIMENTAL_SIMD_X86_H_</emphasis>
5169 
5170 <emphasis role="comment">//&#32;vim:&#32;foldmethod=marker&#32;sw=2&#32;noet&#32;ts=8&#32;sts=2&#32;tw=80</emphasis>
</programlisting></section>
