<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2parallel_2multiway__mergesort_8h_source" xml:lang="en-US">
<title>multiway_mergesort.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/parallel/multiway_mergesort.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2007-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="comment">//&#32;Written&#32;by&#32;Johannes&#32;Singler.</emphasis>
31 
32 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_PARALLEL_MULTIWAY_MERGESORT_H</emphasis>
33 <emphasis role="preprocessor">#define&#32;_GLIBCXX_PARALLEL_MULTIWAY_MERGESORT_H&#32;1</emphasis>
34 
35 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
36 
37 <emphasis role="preprocessor">#include&#32;&lt;parallel/basic_iterator.h&gt;</emphasis>
38 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_algo.h&gt;</emphasis>
39 <emphasis role="preprocessor">#include&#32;&lt;parallel/parallel.h&gt;</emphasis>
40 <emphasis role="preprocessor">#include&#32;&lt;parallel/multiway_merge.h&gt;</emphasis>
41 
42 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__parallel">__gnu_parallel</link>
43 {
45 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_DifferenceTp&gt;
46 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Piece
47 &#32;&#32;&#32;&#32;{
48 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_DifferenceTp&#32;<link linkend="_struct____gnu__parallel_1_1___piece_1a9f0c6c61a9a7533caef59976577b811b">_DifferenceType</link>;
49 
51 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___piece_1a9f0c6c61a9a7533caef59976577b811b">_DifferenceType</link>&#32;<link linkend="_struct____gnu__parallel_1_1___piece_1a6f846c8afc04193f46d5a1a490bd3ee2">_M_begin</link>;
52 
54 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___piece_1a9f0c6c61a9a7533caef59976577b811b">_DifferenceType</link>&#32;<link linkend="_struct____gnu__parallel_1_1___piece_1ab0315ceba623516eccee17cd7650d705">_M_end</link>;
55 &#32;&#32;&#32;&#32;};
56 
60 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter&gt;
61 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data">_PMWMSSortingData</link>
62 &#32;&#32;&#32;&#32;{
63 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::iterator_traits&lt;_RAIter&gt;&#32;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a9bab30fb555c46b53bbd9adf9767a755">_TraitsType</link>;
64 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::value_type&#32;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a431c66184fd23ef25c443a7c6a2434a9">_ValueType</link>;
65 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::difference_type&#32;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1abb95588a57381fb47c7c2f00ced785de">_DifferenceType</link>;
66 
68 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a96502c73cd4bc2be361ec19eb3ff4927">_M_num_threads</link>;
69 
71 &#32;&#32;&#32;&#32;&#32;&#32;_RAIter&#32;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a3a63332260c5462d462764091a404a49">_M_source</link>;
72 
74 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1abb95588a57381fb47c7c2f00ced785de">_DifferenceType</link>*&#32;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a476ce96783723d9b5883a8db45a70300">_M_starts</link>;
75 
77 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a431c66184fd23ef25c443a7c6a2434a9">_ValueType</link>**&#32;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a1495689aa558582a087448226673380b">_M_temporary</link>;
78 
80 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a431c66184fd23ef25c443a7c6a2434a9">_ValueType</link>*&#32;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1afc20a62b7e96102e3ad7013587b76539">_M_samples</link>;
81 
83 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1abb95588a57381fb47c7c2f00ced785de">_DifferenceType</link>*&#32;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a905263695d4a6934445659c285e187a6">_M_offsets</link>;
84 
86 &#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;_Piece&lt;_DifferenceType&gt;&#32;&gt;*&#32;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1ad1e0c6fa5bf53d9291385a9865a5a77d">_M_pieces</link>;
87 &#32;&#32;};
88 
95 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_DifferenceTp&gt;
96 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
97 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a56184d12b3d8f441fc14150b15a091c7">__determine_samples</link>(<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data">_PMWMSSortingData&lt;_RAIter&gt;</link>*&#32;__sd,
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_DifferenceTp&#32;__num_samples)
99 &#32;&#32;&#32;&#32;{
100 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::iterator_traits&lt;_RAIter&gt;&#32;_TraitsType;
101 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::value_type&#32;_ValueType;
102 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_DifferenceTp&#32;_DifferenceType;
103 
104 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__iam&#32;=&#32;<link linkend="__classes_2lib_2include_2omp_8h_1aa03cf372d8266eef024262a68d304e1b">omp_get_thread_num</link>();
105 
106 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType*&#32;__es&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;_DifferenceType[__num_samples&#32;+&#32;2];
107 
108 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1ac799255921e70b0378d145924d673f9c">__equally_split</link>(__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a476ce96783723d9b5883a8db45a70300">_M_starts</link>[__iam&#32;+&#32;1]&#32;-&#32;__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a476ce96783723d9b5883a8db45a70300">_M_starts</link>[__iam],&#32;
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__num_samples&#32;+&#32;1,&#32;__es);
110 
111 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_DifferenceType&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__num_samples;&#32;++__i)
112 &#32;&#32;&#32;&#32;::new(&amp;(__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1afc20a62b7e96102e3ad7013587b76539">_M_samples</link>[__iam&#32;*&#32;__num_samples&#32;+&#32;__i]))
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ValueType(__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a3a63332260c5462d462764091a404a49">_M_source</link>[__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a476ce96783723d9b5883a8db45a70300">_M_starts</link>[__iam]
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;__es[__i&#32;+&#32;1]]);
115 
116 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;__es;
117 &#32;&#32;&#32;&#32;}
118 
120 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;__exact,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_SortingPlacesIterator&gt;
122 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SplitConsistently
123 &#32;&#32;&#32;&#32;{&#32;};
124 
126 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_SortingPlacesIterator&gt;
128 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SplitConsistently&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,&#32;_RAIter,&#32;_Compare,&#32;_SortingPlacesIterator&gt;
129 &#32;&#32;&#32;&#32;{
130 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
131 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___split_consistently_3_01true_00_01___r_a_iter_00_01___compare_00_01___sorting_places_iterator_01_4_1ac4ff1ecd7f975541e8eb6135f922bacd">operator()</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__iam,
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data">_PMWMSSortingData&lt;_RAIter&gt;</link>*&#32;__sd,
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&amp;&#32;__comp,
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::iterator_traits&lt;_RAIter&gt;::difference_type
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__num_samples)<emphasis role="keyword">&#32;const</emphasis>
137 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
138 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;barrier</emphasis>
139 
140 &#32;&#32;&#32;&#32;std::vector&lt;std::pair&lt;_SortingPlacesIterator,
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SortingPlacesIterator&gt;&#32;&gt;
142 &#32;&#32;&#32;&#32;&#32;&#32;__seqs(__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a96502c73cd4bc2be361ec19eb3ff4927">_M_num_threads</link>);
143 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__s&#32;=&#32;0;&#32;__s&#32;&lt;&#32;__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a96502c73cd4bc2be361ec19eb3ff4927">_M_num_threads</link>;&#32;__s++)
144 &#32;&#32;&#32;&#32;&#32;&#32;__seqs[__s]&#32;=&#32;std::make_pair(__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a1495689aa558582a087448226673380b">_M_temporary</link>[__s],
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a1495689aa558582a087448226673380b">_M_temporary</link>[__s]
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;(__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a476ce96783723d9b5883a8db45a70300">_M_starts</link>[__s&#32;+&#32;1]
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a476ce96783723d9b5883a8db45a70300">_M_starts</link>[__s]));
148 
149 &#32;&#32;&#32;&#32;std::vector&lt;_SortingPlacesIterator&gt;&#32;__offsets(__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a96502c73cd4bc2be361ec19eb3ff4927">_M_num_threads</link>);
150 
151 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;not&#32;last&#32;thread</emphasis>
152 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__iam&#32;&lt;&#32;__sd-&gt;_M_num_threads&#32;-&#32;1)
153 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1ade1f4c5da0794c4f1a09465d4aee6c1d">multiseq_partition</link>(__seqs.begin(),&#32;__seqs.end(),
154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a476ce96783723d9b5883a8db45a70300">_M_starts</link>[__iam&#32;+&#32;1],&#32;__offsets.begin(),
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__comp);
156 
157 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__seq&#32;=&#32;0;&#32;__seq&#32;&lt;&#32;__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a96502c73cd4bc2be361ec19eb3ff4927">_M_num_threads</link>;&#32;__seq++)
158 &#32;&#32;&#32;&#32;&#32;&#32;{
159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;each&#32;sequence</emphasis>
160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__iam&#32;&lt;&#32;(__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a96502c73cd4bc2be361ec19eb3ff4927">_M_num_threads</link>&#32;-&#32;1))
161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1ad1e0c6fa5bf53d9291385a9865a5a77d">_M_pieces</link>[__iam][__seq]._M_end
162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__offsets[__seq]&#32;-&#32;__seqs[__seq].first;
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;very&#32;end&#32;of&#32;this&#32;sequence</emphasis>
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1ad1e0c6fa5bf53d9291385a9865a5a77d">_M_pieces</link>[__iam][__seq]._M_end&#32;=
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a476ce96783723d9b5883a8db45a70300">_M_starts</link>[__seq&#32;+&#32;1]&#32;-&#32;__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a476ce96783723d9b5883a8db45a70300">_M_starts</link>[__seq];
167 &#32;&#32;&#32;&#32;&#32;&#32;}
168 
169 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;barrier</emphasis>
170 
171 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__seq&#32;=&#32;0;&#32;__seq&#32;&lt;&#32;__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a96502c73cd4bc2be361ec19eb3ff4927">_M_num_threads</link>;&#32;__seq++)
172 &#32;&#32;&#32;&#32;&#32;&#32;{
173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;each&#32;sequence.</emphasis>
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__iam&#32;&gt;&#32;0)
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1ad1e0c6fa5bf53d9291385a9865a5a77d">_M_pieces</link>[__iam][__seq]._M_begin&#32;=
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1ad1e0c6fa5bf53d9291385a9865a5a77d">_M_pieces</link>[__iam&#32;-&#32;1][__seq]._M_end;
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Absolute&#32;beginning.</emphasis>
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1ad1e0c6fa5bf53d9291385a9865a5a77d">_M_pieces</link>[__iam][__seq]._M_begin&#32;=&#32;0;
180 &#32;&#32;&#32;&#32;&#32;&#32;}
181 &#32;&#32;&#32;&#32;&#32;&#32;}
182 &#32;&#32;};
183 
185 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,
186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_SortingPlacesIterator&gt;
187 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SplitConsistently&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>,&#32;_RAIter,&#32;_Compare,&#32;_SortingPlacesIterator&gt;
188 &#32;&#32;&#32;&#32;{
189 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
190 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___split_consistently_3_01false_00_01___r_a_iter_00_01___compare_00_02e8a2baf2019ec7bfe13dbc6d2774065_1a9bce2d3f03bdc60e1de14c2b79544a32">operator()</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__iam,
191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data">_PMWMSSortingData&lt;_RAIter&gt;</link>*&#32;__sd,
192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&amp;&#32;__comp,
193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>
194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::iterator_traits&lt;_RAIter&gt;::difference_type
195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__num_samples)<emphasis role="keyword">&#32;const</emphasis>
196 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
197 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::iterator_traits&lt;_RAIter&gt;&#32;_TraitsType;
198 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::value_type&#32;_ValueType;
199 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::difference_type&#32;_DifferenceType;
200 
201 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a56184d12b3d8f441fc14150b15a091c7">__determine_samples</link>(__sd,&#32;__num_samples);
202 
203 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;barrier</emphasis>
204 
205 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;single</emphasis>
206 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">__gnu_sequential::sort</link>(__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1afc20a62b7e96102e3ad7013587b76539">_M_samples</link>,
207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1afc20a62b7e96102e3ad7013587b76539">_M_samples</link>
208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;(__num_samples&#32;*&#32;__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a96502c73cd4bc2be361ec19eb3ff4927">_M_num_threads</link>),
209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__comp);
210 
211 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;barrier</emphasis>
212 
213 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__s&#32;=&#32;0;&#32;__s&#32;&lt;&#32;__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a96502c73cd4bc2be361ec19eb3ff4927">_M_num_threads</link>;&#32;++__s)
214 &#32;&#32;&#32;&#32;&#32;&#32;{
215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;each&#32;sequence.</emphasis>
216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__num_samples&#32;*&#32;__iam&#32;&gt;&#32;0)
217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1ad1e0c6fa5bf53d9291385a9865a5a77d">_M_pieces</link>[__iam][__s]._M_begin&#32;=
218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::lower_bound(__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a1495689aa558582a087448226673380b">_M_temporary</link>[__s],
219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a1495689aa558582a087448226673380b">_M_temporary</link>[__s]
220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;(__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a476ce96783723d9b5883a8db45a70300">_M_starts</link>[__s&#32;+&#32;1]
221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a476ce96783723d9b5883a8db45a70300">_M_starts</link>[__s]),
222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1afc20a62b7e96102e3ad7013587b76539">_M_samples</link>[__num_samples&#32;*&#32;__iam],
223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__comp)
224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a1495689aa558582a087448226673380b">_M_temporary</link>[__s];
225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Absolute&#32;beginning.</emphasis>
227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1ad1e0c6fa5bf53d9291385a9865a5a77d">_M_pieces</link>[__iam][__s]._M_begin&#32;=&#32;0;
228 
229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((__num_samples&#32;*&#32;(__iam&#32;+&#32;1))&#32;&lt;
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__num_samples&#32;*&#32;__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a96502c73cd4bc2be361ec19eb3ff4927">_M_num_threads</link>))
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1ad1e0c6fa5bf53d9291385a9865a5a77d">_M_pieces</link>[__iam][__s]._M_end&#32;=
232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::lower_bound(__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a1495689aa558582a087448226673380b">_M_temporary</link>[__s],
233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a1495689aa558582a087448226673380b">_M_temporary</link>[__s]
234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;(__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a476ce96783723d9b5883a8db45a70300">_M_starts</link>[__s&#32;+&#32;1]
235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a476ce96783723d9b5883a8db45a70300">_M_starts</link>[__s]),
236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1afc20a62b7e96102e3ad7013587b76539">_M_samples</link>[__num_samples&#32;*&#32;(__iam&#32;+&#32;1)],
237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__comp)
238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a1495689aa558582a087448226673380b">_M_temporary</link>[__s];
239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Absolute&#32;end.</emphasis>
241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1ad1e0c6fa5bf53d9291385a9865a5a77d">_M_pieces</link>[__iam][__s]._M_end&#32;=&#32;(__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a476ce96783723d9b5883a8db45a70300">_M_starts</link>[__s&#32;+&#32;1]
242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;__sd-&gt;<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data_1a476ce96783723d9b5883a8db45a70300">_M_starts</link>[__s]);
243 &#32;&#32;&#32;&#32;&#32;&#32;}
244 &#32;&#32;&#32;&#32;&#32;&#32;}
245 &#32;&#32;};
246 &#32;&#32;
247 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;__stable,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
248 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__possibly_stable_sort
249 &#32;&#32;&#32;&#32;{&#32;};
250 
251 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
252 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__possibly_stable_sort&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,&#32;_RAIter,&#32;_Compare&gt;
253 &#32;&#32;&#32;&#32;{
254 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct____gnu__parallel_1_1____possibly__stable__sort_3_01true_00_01___r_a_iter_00_01___compare_01_4_1ab21dd43fd2180bea33a7d262a4ccf2e6">operator()</link>(<emphasis role="keyword">const</emphasis>&#32;_RAIter&amp;&#32;__begin,
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_RAIter&amp;&#32;__end,&#32;_Compare&amp;&#32;__comp)<emphasis role="keyword">&#32;const</emphasis>
256 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<link linkend="_namespacestd_1ac4ae475114c7f06297db807234405f8a">__gnu_sequential::stable_sort</link>(__begin,&#32;__end,&#32;__comp);&#32;}
257 &#32;&#32;&#32;&#32;};
258 
259 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
260 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__possibly_stable_sort&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>,&#32;_RAIter,&#32;_Compare&gt;
261 &#32;&#32;&#32;&#32;{
262 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct____gnu__parallel_1_1____possibly__stable__sort_3_01false_00_01___r_a_iter_00_01___compare_01_4_1ac5c180e0fedda5af0385ab97ebd75d1c">operator()</link>(<emphasis role="keyword">const</emphasis>&#32;_RAIter&#32;__begin,
263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_RAIter&#32;__end,&#32;_Compare&amp;&#32;__comp)<emphasis role="keyword">&#32;const</emphasis>
264 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">__gnu_sequential::sort</link>(__begin,&#32;__end,&#32;__comp);&#32;}
265 &#32;&#32;&#32;&#32;};
266 
267 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;__stable,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Seq_RAIter,
268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,
269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_DiffType&gt;
270 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__possibly_stable_multiway_merge
271 &#32;&#32;&#32;&#32;{&#32;};
272 
273 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Seq_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,
274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_DiffType&gt;
275 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__possibly_stable_multiway_merge&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,&#32;_Seq_RAIter,
276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter,&#32;_Compare,&#32;_DiffType&gt;
277 &#32;&#32;&#32;&#32;{
278 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct____gnu__parallel_1_1____possibly__stable__multiway__merge_3_01true_00_01___seq___r_a_iter2ecdcf729effea6ea63a4538fbabf431_1a962d987934439281004114a414348ed1">operator()</link>(<emphasis role="keyword">const</emphasis>&#32;_Seq_RAIter&amp;&#32;__seqs_begin,
279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Seq_RAIter&amp;&#32;__seqs_end,
280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_RAIter&amp;&#32;__target,
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&amp;&#32;__comp,
282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_DiffType&#32;__length_am)<emphasis role="keyword">&#32;const</emphasis>
283 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<link linkend="_namespace____gnu__parallel_1a27f5da3fdd4d5f56eecd6a078ec7bae2">stable_multiway_merge</link>(__seqs_begin,&#32;__seqs_end,&#32;__target,
284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__length_am,&#32;__comp,&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">sequential_tag</link>());&#32;}
285 &#32;&#32;&#32;&#32;};
286 
287 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Seq_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,
288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_DiffType&gt;
289 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__possibly_stable_multiway_merge&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>,&#32;_Seq_RAIter,
290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter,&#32;_Compare,&#32;_DiffType&gt;
291 &#32;&#32;&#32;&#32;{
292 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct____gnu__parallel_1_1____possibly__stable__multiway__merge_3_01false_00_01___seq___r_a_itebbe515fc6f7648d1418c8d56e63df41f_1a499ffcbf43662c47ba9e330e7374afb2">operator()</link>(<emphasis role="keyword">const</emphasis>&#32;_Seq_RAIter&amp;&#32;__seqs_begin,
293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Seq_RAIter&amp;&#32;__seqs_end,
294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_RAIter&amp;&#32;__target,
295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&amp;&#32;__comp,
296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_DiffType&#32;__length_am)<emphasis role="keyword">&#32;const</emphasis>
297 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<link linkend="_namespace____gnu__parallel_1a25294b0a47406aefa9ebc5e0c151d0ce">multiway_merge</link>(__seqs_begin,&#32;__seqs_end,&#32;__target,&#32;__length_am,
298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__comp,&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">sequential_tag</link>());&#32;}
299 &#32;&#32;&#32;&#32;};
300 
305 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;__stable,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__exact,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,
306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
307 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
308 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1aaf84903cd78722fcd19b20ccb69c47e4">parallel_sort_mwms_pu</link>(_PMWMSSortingData&lt;_RAIter&gt;*&#32;__sd,
309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&amp;&#32;__comp)
310 &#32;&#32;&#32;&#32;{
311 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::iterator_traits&lt;_RAIter&gt;&#32;_TraitsType;
312 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::value_type&#32;_ValueType;
313 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::difference_type&#32;_DifferenceType;
314 
315 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__iam&#32;=&#32;<link linkend="__classes_2lib_2include_2omp_8h_1aa03cf372d8266eef024262a68d304e1b">omp_get_thread_num</link>();
316 
317 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Length&#32;of&#32;this&#32;thread&apos;s&#32;chunk,&#32;before&#32;merging.</emphasis>
318 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__length_local&#32;=
319 &#32;&#32;&#32;&#32;__sd-&gt;_M_starts[__iam&#32;+&#32;1]&#32;-&#32;__sd-&gt;_M_starts[__iam];
320 
321 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Sort&#32;in&#32;temporary&#32;storage,&#32;leave&#32;space&#32;for&#32;sentinel.</emphasis>
322 
323 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_ValueType*&#32;_SortingPlacesIterator;
324 
325 &#32;&#32;&#32;&#32;&#32;&#32;__sd-&gt;_M_temporary[__iam]&#32;=
326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_ValueType*<emphasis role="keyword">&gt;</emphasis>(::operator&#32;<emphasis role="keyword">new</emphasis>(<emphasis role="keyword">sizeof</emphasis>(_ValueType)
327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;(__length_local&#32;+&#32;1)));
328 
329 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Copy&#32;there.</emphasis>
330 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ae8f76360bfad6375b33b57235ca96d97">std::uninitialized_copy</link>(__sd-&gt;_M_source&#32;+&#32;__sd-&gt;_M_starts[__iam],
331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sd-&gt;_M_source&#32;+&#32;__sd-&gt;_M_starts[__iam]
332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;__length_local,
333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sd-&gt;_M_temporary[__iam]);
334 
335 &#32;&#32;&#32;&#32;&#32;&#32;__possibly_stable_sort&lt;__stable,&#32;_SortingPlacesIterator,&#32;_Compare&gt;()
336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__sd-&gt;_M_temporary[__iam],
337 &#32;&#32;&#32;&#32;&#32;__sd-&gt;_M_temporary[__iam]&#32;+&#32;__length_local,
338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__comp);
339 
340 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Invariant:&#32;locally&#32;sorted&#32;subsequence&#32;in&#32;sd-&gt;_M_temporary[__iam],</emphasis>
341 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__sd-&gt;_M_temporary[__iam]&#32;+&#32;__length_local.</emphasis>
342 
343 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;barrier&#32;here:&#32;Synchronization&#32;is&#32;done&#32;by&#32;the&#32;splitting&#32;routine.</emphasis>
344 
345 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__num_samples&#32;=
346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___settings_1adf11d9453707f1145a9e221ab7630bd3">_Settings::get</link>().<link linkend="_struct____gnu__parallel_1_1___settings_1a0f435bbb73735fb8fdec296eed3c5996">sort_mwms_oversampling</link>&#32;*&#32;__sd-&gt;_M_num_threads&#32;-&#32;1;
347 &#32;&#32;&#32;&#32;&#32;&#32;_SplitConsistently&lt;__exact,&#32;_RAIter,&#32;_Compare,&#32;_SortingPlacesIterator&gt;()
348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__iam,&#32;__sd,&#32;__comp,&#32;__num_samples);
349 
350 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Offset&#32;from&#32;__target&#32;__begin,&#32;__length&#32;after&#32;merging.</emphasis>
351 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__offset&#32;=&#32;0,&#32;__length_am&#32;=&#32;0;
352 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__s&#32;=&#32;0;&#32;__s&#32;&lt;&#32;__sd-&gt;_M_num_threads;&#32;__s++)
353 &#32;&#32;&#32;&#32;{
354 &#32;&#32;&#32;&#32;&#32;&#32;__length_am&#32;+=&#32;(__sd-&gt;_M_pieces[__iam][__s]._M_end
355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;__sd-&gt;_M_pieces[__iam][__s]._M_begin);
356 &#32;&#32;&#32;&#32;&#32;&#32;__offset&#32;+=&#32;__sd-&gt;_M_pieces[__iam][__s]._M_begin;
357 &#32;&#32;&#32;&#32;}
358 
359 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::vector&lt;
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;_SortingPlacesIterator,&#32;_SortingPlacesIterator&gt;&#32;&gt;
361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SeqVector;
362 &#32;&#32;&#32;&#32;&#32;&#32;_SeqVector&#32;__seqs(__sd-&gt;_M_num_threads);
363 
364 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__s&#32;=&#32;0;&#32;__s&#32;&lt;&#32;__sd-&gt;_M_num_threads;&#32;++__s)
365 &#32;&#32;&#32;&#32;{
366 &#32;&#32;&#32;&#32;&#32;&#32;__seqs[__s]&#32;=
367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::make_pair(__sd-&gt;_M_temporary[__s]
368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;__sd-&gt;_M_pieces[__iam][__s]._M_begin,
369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sd-&gt;_M_temporary[__s]
370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;__sd-&gt;_M_pieces[__iam][__s]._M_end);
371 &#32;&#32;&#32;&#32;}
372 
373 &#32;&#32;&#32;&#32;&#32;&#32;__possibly_stable_multiway_merge&lt;
374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__stable,&#32;<emphasis role="keyword">typename</emphasis>&#32;_SeqVector::iterator,
375 &#32;&#32;&#32;&#32;_RAIter,&#32;_Compare,&#32;_DifferenceType&gt;()(__seqs.begin(),&#32;__seqs.end(),
376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sd-&gt;_M_source&#32;+&#32;__offset,&#32;__comp,
377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__length_am);
378 
379 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;barrier</emphasis>
380 
381 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_DifferenceType&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__length_local;&#32;++__i)
382 &#32;&#32;&#32;&#32;__sd-&gt;_M_temporary[__iam][__i].~_ValueType();
383 &#32;&#32;&#32;&#32;&#32;&#32;::operator&#32;<emphasis role="keyword">delete</emphasis>(__sd-&gt;_M_temporary[__iam]);
384 &#32;&#32;&#32;&#32;}
385 
392 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;__stable,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__exact,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,
393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
394 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
395 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1ae193ac43730550b537828a117dd2797f">parallel_sort_mwms</link>(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp,
397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__num_threads)
398 &#32;&#32;&#32;&#32;{
399 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2compiletime__settings_8h_1a77fb93c9cecec331ccee755972695128">_GLIBCXX_CALL</link>(__end&#32;-&#32;__begin)
400 
401 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::iterator_traits&lt;_RAIter&gt;&#32;_TraitsType;
402 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::value_type&#32;_ValueType;
403 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::difference_type&#32;_DifferenceType;
404 
405 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__n&#32;=&#32;__end&#32;-&#32;__begin;
406 
407 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&lt;=&#32;1)
408 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
409 
410 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;at&#32;least&#32;one&#32;element&#32;per&#32;thread</emphasis>
411 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__num_threads&#32;&gt;&#32;__n)
412 &#32;&#32;&#32;&#32;__num_threads&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link><emphasis role="keyword">&gt;</emphasis>(__n);
413 
414 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;shared&#32;variables</emphasis>
415 &#32;&#32;&#32;&#32;&#32;&#32;_PMWMSSortingData&lt;_RAIter&gt;&#32;__sd;
416 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType*&#32;__starts;
417 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__size;
418 
419 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;parallel&#32;num_threads(__num_threads)</emphasis>
420 &#32;&#32;&#32;&#32;&#32;&#32;{
421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__num_threads&#32;=&#32;<link linkend="__classes_2lib_2include_2omp_8h_1ac42ead04531fd33507e3d3a6f648b200">omp_get_num_threads</link>();&#32;<emphasis role="comment">//no&#32;more&#32;threads&#32;than&#32;requested</emphasis>
422 
423 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;single</emphasis>
424 &#32;&#32;&#32;&#32;{
425 &#32;&#32;&#32;&#32;&#32;&#32;__sd._M_num_threads&#32;=&#32;__num_threads;
426 &#32;&#32;&#32;&#32;&#32;&#32;__sd._M_source&#32;=&#32;__begin;
427 &#32;&#32;&#32;&#32;&#32;&#32;
428 &#32;&#32;&#32;&#32;&#32;&#32;__sd._M_temporary&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;_ValueType*[__num_threads];
429 
430 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__exact)
431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__size&#32;=
433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<link linkend="_struct____gnu__parallel_1_1___settings_1adf11d9453707f1145a9e221ab7630bd3">_Settings::get</link>().<link linkend="_struct____gnu__parallel_1_1___settings_1a0f435bbb73735fb8fdec296eed3c5996">sort_mwms_oversampling</link>&#32;*&#32;__num_threads&#32;-&#32;1)
434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;__num_threads;
435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sd._M_samples&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_ValueType*<emphasis role="keyword">&gt;</emphasis>
436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(::operator&#32;<emphasis role="keyword">new</emphasis>(__size&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_ValueType)));
437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
438 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sd._M_samples&#32;=&#32;0;
440 
441 &#32;&#32;&#32;&#32;&#32;&#32;__sd._M_offsets&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;_DifferenceType[__num_threads&#32;-&#32;1];
442 &#32;&#32;&#32;&#32;&#32;&#32;__sd._M_pieces
443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;std::vector&lt;_Piece&lt;_DifferenceType&gt;&#32;&gt;[__num_threads];
444 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__s&#32;=&#32;0;&#32;__s&#32;&lt;&#32;__num_threads;&#32;++__s)
445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sd._M_pieces[__s].resize(__num_threads);
446 &#32;&#32;&#32;&#32;&#32;&#32;__starts&#32;=&#32;__sd._M_starts&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;_DifferenceType[__num_threads&#32;+&#32;1];
447 
448 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__chunk_length&#32;=&#32;__n&#32;/&#32;__num_threads;
449 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;<link linkend="_namespace____pstl_1_1____tbb__backend_1a412bd21d61e578eab6a5afe510c8f07d">__split</link>&#32;=&#32;__n&#32;%&#32;__num_threads;
450 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__pos&#32;=&#32;0;
451 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__num_threads;&#32;++__i)
452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__starts[__i]&#32;=&#32;__pos;
454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pos&#32;+=&#32;((__i&#32;&lt;&#32;<link linkend="_namespace____pstl_1_1____tbb__backend_1a412bd21d61e578eab6a5afe510c8f07d">__split</link>)
455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;(__chunk_length&#32;+&#32;1)&#32;:&#32;__chunk_length);
456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
457 &#32;&#32;&#32;&#32;&#32;&#32;__starts[__num_threads]&#32;=&#32;__pos;
458 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//single</emphasis>
459 
460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Now&#32;sort&#32;in&#32;parallel.</emphasis>
461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parallel_sort_mwms_pu&lt;__stable,&#32;__exact&gt;(&amp;__sd,&#32;__comp);
462 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//parallel</emphasis>
463 
464 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;__starts;
465 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;__sd._M_temporary;
466 
467 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__exact)
468 &#32;&#32;&#32;&#32;{
469 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_DifferenceType&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__size;&#32;++__i)
470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sd._M_samples[__i].~_ValueType();
471 &#32;&#32;&#32;&#32;&#32;&#32;::operator&#32;<emphasis role="keyword">delete</emphasis>(__sd._M_samples);
472 &#32;&#32;&#32;&#32;}
473 
474 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;__sd._M_offsets;
475 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;__sd._M_pieces;
476 &#32;&#32;&#32;&#32;}
477 
478 }&#32;<emphasis role="comment">//namespace&#32;__gnu_parallel</emphasis>
479 
480 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_GLIBCXX_PARALLEL_MULTIWAY_MERGESORT_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
