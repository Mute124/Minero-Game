<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2bits_2stl__multiset_8h" xml:lang="en-US">
<title>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/bits/stl_multiset.h File Reference</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/bits/stl_multiset.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &lt;bits/concept_check.h&gt;<?linebreak?></programlisting>Include dependency graph for stl_multiset.h:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="_old_2_classes_2lib_2include_2c_09_09_2bits_2stl__multiset_8h__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Functions    </title>
<simplesect><title></title>
        <itemizedlist>
            <listitem><para>namespace std <link linkend="__old_2_classes_2lib_2include_2c_09_09_2bits_2stl__multiset_8h_1a544d74b2d5d0dd2197f5fd6f02691de0">_GLIBCXX_VISIBILITY</link> (default)</para>
</listitem>
        </itemizedlist>
</simplesect>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="__old_2_classes_2lib_2include_2c_09_09_2bits_2stl__multiset_8h_1a544d74b2d5d0dd2197f5fd6f02691de0"/><section>
    <title>_GLIBCXX_VISIBILITY()</title>
<indexterm><primary>_GLIBCXX_VISIBILITY</primary><secondary>stl_multiset.h</secondary></indexterm>
<indexterm><primary>stl_multiset.h</primary><secondary>_GLIBCXX_VISIBILITY</secondary></indexterm>
<para><computeroutput>namespace std _GLIBCXX_VISIBILITY (default )</computeroutput></para>
<para>A standard container made up of elements, which can be retrieved in logarithmic time.</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>_Key</entry><entry>
<para>Type of key objects. </para>
</entry>
                            </row>
                            <row>
<entry>_Compare</entry><entry>
<para>Comparison function object type, defaults to less&lt;_Key&gt;. </para>
</entry>
                            </row>
                            <row>
<entry>_Alloc</entry><entry>
<para>Allocator type, defaults to allocator&lt;_Key&gt;.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Meets the requirements of a <link xlink:href="tables.html#65">container</link>, a <link xlink:href="tables.html#66">reversible container</link>, and an <link xlink:href="tables.html#69">associative container</link> (using equivalent keys). For a <computeroutput>multiset&lt;Key&gt;</computeroutput> the key_type and value_type are Key.</para>

<para>Multisets support bidirectional iterators.</para>

<para>The private tree data is declared exactly the same way for set and multiset; the distinction is made entirely in how the tree functions are called (*_unique versus *_equal, same as the standard).</para>

<para>This turns a red-black tree into a [multi]set.</para>

<para>The actual tree structure.</para>

<para>Default constructor creates no elements.</para>

<para>Creates a multiset with no elements. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__comp</entry><entry>
<para>Comparator to use. </para>
</entry>
                            </row>
                            <row>
<entry>__a</entry><entry>
<para>An allocator object.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Builds a multiset from a range. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__first</entry><entry>
<para>An input iterator. </para>
</entry>
                            </row>
                            <row>
<entry>__last</entry><entry>
<para>An input iterator.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Create a multiset consisting of copies of the elements from [first,last). This is linear in N if the range is already sorted, and NlogN otherwise (where N is distance(__first,__last)).</para>

<para>Builds a multiset from a range. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__first</entry><entry>
<para>An input iterator. </para>
</entry>
                            </row>
                            <row>
<entry>__last</entry><entry>
<para>An input iterator. </para>
</entry>
                            </row>
                            <row>
<entry>__comp</entry><entry>
<para>A comparison functor. </para>
</entry>
                            </row>
                            <row>
<entry>__a</entry><entry>
<para>An allocator object.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Create a multiset consisting of copies of the elements from [__first,__last). This is linear in N if the range is already sorted, and NlogN otherwise (where N is distance(__first,__last)).</para>

<para>Multiset copy constructor.</para>

<para>Whether the allocator is copied depends on the allocator traits.</para>

<para>Multiset assignment operator.</para>

<para>Whether the allocator is copied depends on the allocator traits.</para>

<para>Returns the comparison object.</para>

<para>Returns the comparison object.</para>

<para>Returns the memory allocation object.</para>

<para>Returns a read-only (constant) iterator that points to the first element in the multiset. Iteration is done in ascending order according to the keys.</para>

<para>Returns a read-only (constant) iterator that points one past the last element in the multiset. Iteration is done in ascending order according to the keys.</para>

<para>Returns a read-only (constant) reverse iterator that points to the last element in the multiset. Iteration is done in descending order according to the keys.</para>

<para>Returns a read-only (constant) reverse iterator that points to the last element in the multiset. Iteration is done in descending order according to the keys.</para>

<para>Returns true if the set is empty.</para>

<para>Returns the size of the set.</para>

<para>Returns the maximum size of the set.</para>

<para>Swaps data with another multiset. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__x</entry><entry>
<para>A multiset of the same element and allocator types.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                This exchanges the elements between two multisets in constant time. (It is only swapping a pointer, an integer, and an instance of the <computeroutput>Compare</computeroutput> type (which itself is often stateless and empty), so it should be quite fast.) Note that the global <link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap()</link> function is specialized such that std::swap(s1,s2) will feed to this function.</para>

<para>Whether the allocators are swapped depends on the allocator traits.</para>

<para>Inserts an element into the multiset. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__x</entry><entry>
<para>Element to be inserted. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>An iterator that points to the inserted element.</para>
</formalpara>
This function inserts an element into the multiset. Contrary to a std::set the multiset does not rely on unique keys and thus multiple copies of the same element can be inserted.</para>

<para>Insertion requires logarithmic time.</para>

<para>Inserts an element into the multiset. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__position</entry><entry>
<para>An iterator that serves as a hint as to where the element should be inserted. </para>
</entry>
                            </row>
                            <row>
<entry>__x</entry><entry>
<para>Element to be inserted. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>An iterator that points to the inserted element.</para>
</formalpara>
This function inserts an element into the multiset. Contrary to a std::set the multiset does not rely on unique keys and thus multiple copies of the same element can be inserted.</para>

<para>Note that the first parameter is only a hint and can potentially improve the performance of the insertion process. A bad hint would cause no gains in efficiency.</para>

<para>See <link xlink:href="https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints">https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints</link> for more on <emphasis>hinting</emphasis>.</para>

<para>Insertion requires logarithmic time (if the hint is not taken).</para>

<para>A template function that tries to insert a range of elements. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__first</entry><entry>
<para>Iterator pointing to the start of the range to be inserted. </para>
</entry>
                            </row>
                            <row>
<entry>__last</entry><entry>
<para>Iterator pointing to the end of the range.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Complexity similar to that of the range constructor.</para>

<para>Erases an element from a multiset. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__position</entry><entry>
<para>An iterator pointing to the element to be erased.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                This function erases an element, pointed to by the given iterator, from a multiset. Note that this function only erases the element, and that if the element is itself a pointer, the pointed-to memory is not touched in any way. Managing the pointer is the user&apos;s responsibility.</para>

<para>Erases elements according to the provided key. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__x</entry><entry>
<para>Key of element to be erased. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The number of elements erased.</para>
</formalpara>
This function erases all elements located by the given key from a multiset. Note that this function only erases the element, and that if the element is itself a pointer, the pointed-to memory is not touched in any way. Managing the pointer is the user&apos;s responsibility.</para>

<para>Erases a [first,last) range of elements from a multiset. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>first</entry><entry>
<para>Iterator pointing to the start of the range to be erased. </para>
</entry>
                            </row>
                            <row>
<entry>last</entry><entry>
<para>Iterator pointing to the end of the range to be erased.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                This function erases a sequence of elements from a multiset. Note that this function only erases the elements, and that if the elements themselves are pointers, the pointed-to memory is not touched in any way. Managing the pointer is the user&apos;s responsibility.</para>

<para>Erases all elements in a multiset. Note that this function only erases the elements, and that if the elements themselves are pointers, the pointed-to memory is not touched in any way. Managing the pointer is the user&apos;s responsibility.</para>

<para>Finds the number of elements with given key. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__x</entry><entry>
<para>Key of elements to be located. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Number of elements with specified key.</para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="_old_2_classes_2lib_2include_2c_09_09_2bits_2stl__multiset_8h_a544d74b2d5d0dd2197f5fd6f02691de0_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
</section>
