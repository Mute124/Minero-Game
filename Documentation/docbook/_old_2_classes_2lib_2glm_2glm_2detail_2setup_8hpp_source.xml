<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2glm_2glm_2detail_2setup_8hpp_source" xml:lang="en-US">
<title>setup.hpp</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/glm/glm/detail/setup.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="preprocessor">#ifndef&#32;GLM_SETUP_INCLUDED</emphasis>
2 
3 <emphasis role="preprocessor">#include&#32;&lt;cassert&gt;</emphasis>
4 <emphasis role="preprocessor">#include&#32;&lt;cstddef&gt;</emphasis>
5 
6 <emphasis role="preprocessor">#define&#32;GLM_VERSION_MAJOR&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0</emphasis>
7 <emphasis role="preprocessor">#define&#32;GLM_VERSION_MINOR&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;9</emphasis>
8 <emphasis role="preprocessor">#define&#32;GLM_VERSION_PATCH&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;9</emphasis>
9 <emphasis role="preprocessor">#define&#32;GLM_VERSION_REVISION&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;8</emphasis>
10 <emphasis role="preprocessor">#define&#32;GLM_VERSION&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;998</emphasis>
11 <emphasis role="preprocessor">#define&#32;GLM_VERSION_MESSAGE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;GLM:&#32;version&#32;0.9.9.8&quot;</emphasis>
12 
13 <emphasis role="preprocessor">#define&#32;GLM_SETUP_INCLUDED&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GLM_VERSION</emphasis>
14 
16 <emphasis role="comment">//&#32;Active&#32;states</emphasis>
17 
18 <emphasis role="preprocessor">#define&#32;GLM_DISABLE&#32;&#32;&#32;&#32;&#32;0</emphasis>
19 <emphasis role="preprocessor">#define&#32;GLM_ENABLE&#32;&#32;&#32;&#32;&#32;&#32;1</emphasis>
20 
22 <emphasis role="comment">//&#32;Messages</emphasis>
23 
24 <emphasis role="preprocessor">#if&#32;defined(GLM_FORCE_MESSAGES)</emphasis>
25 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_MESSAGES&#32;GLM_ENABLE</emphasis>
26 <emphasis role="preprocessor">#else</emphasis>
27 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_MESSAGES&#32;GLM_DISABLE</emphasis>
28 <emphasis role="preprocessor">#endif</emphasis>
29 
31 <emphasis role="comment">//&#32;Detect&#32;the&#32;platform</emphasis>
32 
33 <emphasis role="preprocessor">#include&#32;&quot;../simd/platform.h&quot;</emphasis>
34 
36 <emphasis role="comment">//&#32;Build&#32;model</emphasis>
37 
38 <emphasis role="preprocessor">#if&#32;defined(_M_ARM64)&#32;||&#32;defined(__LP64__)&#32;||&#32;defined(_M_X64)&#32;||&#32;defined(__ppc64__)&#32;||&#32;defined(__x86_64__)</emphasis>
39 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_MODEL&#32;&#32;&#32;&#32;GLM_MODEL_64</emphasis>
40 <emphasis role="preprocessor">#elif&#32;defined(__i386__)&#32;||&#32;defined(__ppc__)&#32;||&#32;defined(__ILP32__)&#32;||&#32;defined(_M_ARM)</emphasis>
41 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_MODEL&#32;&#32;&#32;&#32;GLM_MODEL_32</emphasis>
42 <emphasis role="preprocessor">#else</emphasis>
43 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_MODEL&#32;&#32;&#32;&#32;GLM_MODEL_32</emphasis>
44 <emphasis role="preprocessor">#endif</emphasis><emphasis role="comment">//</emphasis>
45 
46 <emphasis role="preprocessor">#if&#32;!defined(GLM_MODEL)&#32;&amp;&amp;&#32;GLM_COMPILER&#32;!=&#32;0</emphasis>
47 <emphasis role="preprocessor">#&#32;&#32;&#32;error&#32;&quot;GLM_MODEL&#32;undefined,&#32;your&#32;compiler&#32;may&#32;not&#32;be&#32;supported&#32;by&#32;GLM.&#32;Add&#32;#define&#32;GLM_MODEL&#32;0&#32;to&#32;ignore&#32;this&#32;message.&quot;</emphasis>
48 <emphasis role="preprocessor">#endif</emphasis><emphasis role="comment">//GLM_MODEL</emphasis>
49 
51 <emphasis role="comment">//&#32;C++&#32;Version</emphasis>
52 
53 <emphasis role="comment">//&#32;User&#32;defines:&#32;GLM_FORCE_CXX98,&#32;GLM_FORCE_CXX03,&#32;GLM_FORCE_CXX11,&#32;GLM_FORCE_CXX14,&#32;GLM_FORCE_CXX17,&#32;GLM_FORCE_CXX2A</emphasis>
54 
55 <emphasis role="preprocessor">#define&#32;GLM_LANG_CXX98_FLAG&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;1)</emphasis>
56 <emphasis role="preprocessor">#define&#32;GLM_LANG_CXX03_FLAG&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;2)</emphasis>
57 <emphasis role="preprocessor">#define&#32;GLM_LANG_CXX0X_FLAG&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;3)</emphasis>
58 <emphasis role="preprocessor">#define&#32;GLM_LANG_CXX11_FLAG&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;4)</emphasis>
59 <emphasis role="preprocessor">#define&#32;GLM_LANG_CXX14_FLAG&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;5)</emphasis>
60 <emphasis role="preprocessor">#define&#32;GLM_LANG_CXX17_FLAG&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;6)</emphasis>
61 <emphasis role="preprocessor">#define&#32;GLM_LANG_CXX2A_FLAG&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;7)</emphasis>
62 <emphasis role="preprocessor">#define&#32;GLM_LANG_CXXMS_FLAG&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;8)</emphasis>
63 <emphasis role="preprocessor">#define&#32;GLM_LANG_CXXGNU_FLAG&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;9)</emphasis>
64 
65 <emphasis role="preprocessor">#define&#32;GLM_LANG_CXX98&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GLM_LANG_CXX98_FLAG</emphasis>
66 <emphasis role="preprocessor">#define&#32;GLM_LANG_CXX03&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(GLM_LANG_CXX98&#32;|&#32;GLM_LANG_CXX03_FLAG)</emphasis>
67 <emphasis role="preprocessor">#define&#32;GLM_LANG_CXX0X&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(GLM_LANG_CXX03&#32;|&#32;GLM_LANG_CXX0X_FLAG)</emphasis>
68 <emphasis role="preprocessor">#define&#32;GLM_LANG_CXX11&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(GLM_LANG_CXX0X&#32;|&#32;GLM_LANG_CXX11_FLAG)</emphasis>
69 <emphasis role="preprocessor">#define&#32;GLM_LANG_CXX14&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(GLM_LANG_CXX11&#32;|&#32;GLM_LANG_CXX14_FLAG)</emphasis>
70 <emphasis role="preprocessor">#define&#32;GLM_LANG_CXX17&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(GLM_LANG_CXX14&#32;|&#32;GLM_LANG_CXX17_FLAG)</emphasis>
71 <emphasis role="preprocessor">#define&#32;GLM_LANG_CXX2A&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(GLM_LANG_CXX17&#32;|&#32;GLM_LANG_CXX2A_FLAG)</emphasis>
72 <emphasis role="preprocessor">#define&#32;GLM_LANG_CXXMS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GLM_LANG_CXXMS_FLAG</emphasis>
73 <emphasis role="preprocessor">#define&#32;GLM_LANG_CXXGNU&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GLM_LANG_CXXGNU_FLAG</emphasis>
74 
75 <emphasis role="preprocessor">#if&#32;(defined(_MSC_EXTENSIONS))</emphasis>
76 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_LANG_EXT&#32;GLM_LANG_CXXMS_FLAG</emphasis>
77 <emphasis role="preprocessor">#elif&#32;((GLM_COMPILER&#32;&amp;&#32;(GLM_COMPILER_CLANG&#32;|&#32;GLM_COMPILER_GCC))&#32;&amp;&amp;&#32;(GLM_ARCH&#32;&amp;&#32;GLM_ARCH_SIMD_BIT))</emphasis>
78 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_LANG_EXT&#32;GLM_LANG_CXXMS_FLAG</emphasis>
79 <emphasis role="preprocessor">#else</emphasis>
80 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_LANG_EXT&#32;0</emphasis>
81 <emphasis role="preprocessor">#endif</emphasis>
82 
83 <emphasis role="preprocessor">#if&#32;(defined(GLM_FORCE_CXX_UNKNOWN))</emphasis>
84 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_LANG&#32;0</emphasis>
85 <emphasis role="preprocessor">#elif&#32;defined(GLM_FORCE_CXX2A)</emphasis>
86 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_LANG&#32;(GLM_LANG_CXX2A&#32;|&#32;GLM_LANG_EXT)</emphasis>
87 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_LANG_STL11_FORCED</emphasis>
88 <emphasis role="preprocessor">#elif&#32;defined(GLM_FORCE_CXX17)</emphasis>
89 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_LANG&#32;(GLM_LANG_CXX17&#32;|&#32;GLM_LANG_EXT)</emphasis>
90 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_LANG_STL11_FORCED</emphasis>
91 <emphasis role="preprocessor">#elif&#32;defined(GLM_FORCE_CXX14)</emphasis>
92 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_LANG&#32;(GLM_LANG_CXX14&#32;|&#32;GLM_LANG_EXT)</emphasis>
93 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_LANG_STL11_FORCED</emphasis>
94 <emphasis role="preprocessor">#elif&#32;defined(GLM_FORCE_CXX11)</emphasis>
95 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_LANG&#32;(GLM_LANG_CXX11&#32;|&#32;GLM_LANG_EXT)</emphasis>
96 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_LANG_STL11_FORCED</emphasis>
97 <emphasis role="preprocessor">#elif&#32;defined(GLM_FORCE_CXX03)</emphasis>
98 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_LANG&#32;(GLM_LANG_CXX03&#32;|&#32;GLM_LANG_EXT)</emphasis>
99 <emphasis role="preprocessor">#elif&#32;defined(GLM_FORCE_CXX98)</emphasis>
100 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_LANG&#32;(GLM_LANG_CXX98&#32;|&#32;GLM_LANG_EXT)</emphasis>
101 <emphasis role="preprocessor">#else</emphasis>
102 <emphasis role="preprocessor">#&#32;&#32;&#32;if&#32;GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_VC&#32;&amp;&amp;&#32;defined(_MSVC_LANG)</emphasis>
103 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;GLM_COMPILER&#32;&gt;=&#32;GLM_COMPILER_VC15_7</emphasis>
104 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_LANG_PLATFORM&#32;_MSVC_LANG</emphasis>
105 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;elif&#32;GLM_COMPILER&#32;&gt;=&#32;GLM_COMPILER_VC15</emphasis>
106 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;_MSVC_LANG&#32;&gt;&#32;201402L</emphasis>
107 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_LANG_PLATFORM&#32;201402L</emphasis>
108 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else</emphasis>
109 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_LANG_PLATFORM&#32;_MSVC_LANG</emphasis>
110 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;endif</emphasis>
111 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;else</emphasis>
112 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_LANG_PLATFORM&#32;0</emphasis>
113 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;endif</emphasis>
114 <emphasis role="preprocessor">#&#32;&#32;&#32;else</emphasis>
115 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_LANG_PLATFORM&#32;0</emphasis>
116 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis>
117 
118 <emphasis role="preprocessor">#&#32;&#32;&#32;if&#32;__cplusplus&#32;&gt;&#32;201703L&#32;||&#32;GLM_LANG_PLATFORM&#32;&gt;&#32;201703L</emphasis>
119 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_LANG&#32;(GLM_LANG_CXX2A&#32;|&#32;GLM_LANG_EXT)</emphasis>
120 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;__cplusplus&#32;==&#32;201703L&#32;||&#32;GLM_LANG_PLATFORM&#32;==&#32;201703L</emphasis>
121 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_LANG&#32;(GLM_LANG_CXX17&#32;|&#32;GLM_LANG_EXT)</emphasis>
122 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;__cplusplus&#32;==&#32;201402L&#32;||&#32;__cplusplus&#32;==&#32;201500L&#32;||&#32;GLM_LANG_PLATFORM&#32;==&#32;201402L</emphasis>
123 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_LANG&#32;(GLM_LANG_CXX14&#32;|&#32;GLM_LANG_EXT)</emphasis>
124 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;__cplusplus&#32;==&#32;201103L&#32;||&#32;GLM_LANG_PLATFORM&#32;==&#32;201103L</emphasis>
125 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_LANG&#32;(GLM_LANG_CXX11&#32;|&#32;GLM_LANG_EXT)</emphasis>
126 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;defined(__INTEL_CXX11_MODE__)&#32;||&#32;defined(_MSC_VER)&#32;||&#32;defined(__GXX_EXPERIMENTAL_CXX0X__)</emphasis>
127 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_LANG&#32;(GLM_LANG_CXX0X&#32;|&#32;GLM_LANG_EXT)</emphasis>
128 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;__cplusplus&#32;==&#32;199711L</emphasis>
129 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_LANG&#32;(GLM_LANG_CXX98&#32;|&#32;GLM_LANG_EXT)</emphasis>
130 <emphasis role="preprocessor">#&#32;&#32;&#32;else</emphasis>
131 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_LANG&#32;(0&#32;|&#32;GLM_LANG_EXT)</emphasis>
132 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis>
133 <emphasis role="preprocessor">#endif</emphasis>
134 
136 <emphasis role="comment">//&#32;Has&#32;of&#32;C++&#32;features</emphasis>
137 
138 <emphasis role="comment">//&#32;http://clang.llvm.org/cxx_status.html</emphasis>
139 <emphasis role="comment">//&#32;http://gcc.gnu.org/projects/cxx0x.html</emphasis>
140 <emphasis role="comment">//&#32;http://msdn.microsoft.com/en-us/library/vstudio/hh567368(v=vs.120).aspx</emphasis>
141 
142 <emphasis role="comment">//&#32;Android&#32;has&#32;multiple&#32;STLs&#32;but&#32;C++11&#32;STL&#32;detection&#32;doesn&apos;t&#32;always&#32;work&#32;#284&#32;#564</emphasis>
143 <emphasis role="preprocessor">#if&#32;GLM_PLATFORM&#32;==&#32;GLM_PLATFORM_ANDROID&#32;&amp;&amp;&#32;!defined(GLM_LANG_STL11_FORCED)</emphasis>
144 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_CXX11_STL&#32;0</emphasis>
145 <emphasis role="preprocessor">#elif&#32;GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_CLANG</emphasis>
146 <emphasis role="preprocessor">#&#32;&#32;&#32;if&#32;(defined(_LIBCPP_VERSION)&#32;||&#32;(GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX11_FLAG)&#32;||&#32;defined(GLM_LANG_STL11_FORCED))</emphasis>
147 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_HAS_CXX11_STL&#32;1</emphasis>
148 <emphasis role="preprocessor">#&#32;&#32;&#32;else</emphasis>
149 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_HAS_CXX11_STL&#32;0</emphasis>
150 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis>
151 <emphasis role="preprocessor">#elif&#32;GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX11_FLAG</emphasis>
152 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_CXX11_STL&#32;1</emphasis>
153 <emphasis role="preprocessor">#else</emphasis>
154 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_CXX11_STL&#32;((GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX0X_FLAG)&#32;&amp;&amp;&#32;(\</emphasis>
155 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_GCC)&#32;&amp;&amp;&#32;(GLM_COMPILER&#32;&gt;=&#32;GLM_COMPILER_GCC48))&#32;||&#32;\</emphasis>
156 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_VC)&#32;&amp;&amp;&#32;(GLM_COMPILER&#32;&gt;=&#32;GLM_COMPILER_VC12))&#32;||&#32;\</emphasis>
157 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((GLM_PLATFORM&#32;!=&#32;GLM_PLATFORM_WINDOWS)&#32;&amp;&amp;&#32;(GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_INTEL)&#32;&amp;&amp;&#32;(GLM_COMPILER&#32;&gt;=&#32;GLM_COMPILER_INTEL15))))</emphasis>
158 <emphasis role="preprocessor">#endif</emphasis>
159 
160 <emphasis role="comment">//&#32;N1720</emphasis>
161 <emphasis role="preprocessor">#if&#32;GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_CLANG</emphasis>
162 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_STATIC_ASSERT&#32;__has_feature(cxx_static_assert)</emphasis>
163 <emphasis role="preprocessor">#elif&#32;GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX11_FLAG</emphasis>
164 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_STATIC_ASSERT&#32;1</emphasis>
165 <emphasis role="preprocessor">#else</emphasis>
166 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_STATIC_ASSERT&#32;((GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX0X_FLAG)&#32;&amp;&amp;&#32;(\</emphasis>
167 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_CUDA))&#32;||&#32;\</emphasis>
168 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_VC))))</emphasis>
169 <emphasis role="preprocessor">#endif</emphasis>
170 
171 <emphasis role="comment">//&#32;N1988</emphasis>
172 <emphasis role="preprocessor">#if&#32;GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX11_FLAG</emphasis>
173 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_EXTENDED_INTEGER_TYPE&#32;1</emphasis>
174 <emphasis role="preprocessor">#else</emphasis>
175 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_EXTENDED_INTEGER_TYPE&#32;(\</emphasis>
176 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX0X_FLAG)&#32;&amp;&amp;&#32;(GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_VC))&#32;||&#32;\</emphasis>
177 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX0X_FLAG)&#32;&amp;&amp;&#32;(GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_CUDA))&#32;||&#32;\</emphasis>
178 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX0X_FLAG)&#32;&amp;&amp;&#32;(GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_CLANG)))</emphasis>
179 <emphasis role="preprocessor">#endif</emphasis>
180 
181 <emphasis role="comment">//&#32;N2672&#32;Initializer&#32;lists&#32;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2672.htm</emphasis>
182 <emphasis role="preprocessor">#if&#32;GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_CLANG</emphasis>
183 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_INITIALIZER_LISTS&#32;__has_feature(cxx_generalized_initializers)</emphasis>
184 <emphasis role="preprocessor">#elif&#32;GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX11_FLAG</emphasis>
185 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_INITIALIZER_LISTS&#32;1</emphasis>
186 <emphasis role="preprocessor">#else</emphasis>
187 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_INITIALIZER_LISTS&#32;((GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX0X_FLAG)&#32;&amp;&amp;&#32;(\</emphasis>
188 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_VC)&#32;&amp;&amp;&#32;(GLM_COMPILER&#32;&gt;=&#32;GLM_COMPILER_VC15))&#32;||&#32;\</emphasis>
189 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_INTEL)&#32;&amp;&amp;&#32;(GLM_COMPILER&#32;&gt;=&#32;GLM_COMPILER_INTEL14))&#32;||&#32;\</emphasis>
190 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_CUDA))))</emphasis>
191 <emphasis role="preprocessor">#endif</emphasis>
192 
193 <emphasis role="comment">//&#32;N2544&#32;Unrestricted&#32;unions&#32;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2544.pdf</emphasis>
194 <emphasis role="preprocessor">#if&#32;GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_CLANG</emphasis>
195 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_UNRESTRICTED_UNIONS&#32;__has_feature(cxx_unrestricted_unions)</emphasis>
196 <emphasis role="preprocessor">#elif&#32;GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX11_FLAG</emphasis>
197 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_UNRESTRICTED_UNIONS&#32;1</emphasis>
198 <emphasis role="preprocessor">#else</emphasis>
199 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_UNRESTRICTED_UNIONS&#32;(GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX0X_FLAG)&#32;&amp;&amp;&#32;(\</emphasis>
200 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_VC)&#32;||&#32;\</emphasis>
201 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_CUDA)))</emphasis>
202 <emphasis role="preprocessor">#endif</emphasis>
203 
204 <emphasis role="comment">//&#32;N2346</emphasis>
205 <emphasis role="preprocessor">#if&#32;GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_CLANG</emphasis>
206 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_DEFAULTED_FUNCTIONS&#32;__has_feature(cxx_defaulted_functions)</emphasis>
207 <emphasis role="preprocessor">#elif&#32;GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX11_FLAG</emphasis>
208 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_DEFAULTED_FUNCTIONS&#32;1</emphasis>
209 <emphasis role="preprocessor">#else</emphasis>
210 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_DEFAULTED_FUNCTIONS&#32;((GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX0X_FLAG)&#32;&amp;&amp;&#32;(\</emphasis>
211 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_VC)&#32;&amp;&amp;&#32;(GLM_COMPILER&#32;&gt;=&#32;GLM_COMPILER_VC12))&#32;||&#32;\</emphasis>
212 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_INTEL))&#32;||&#32;\</emphasis>
213 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_CUDA)))</emphasis>
214 <emphasis role="preprocessor">#endif</emphasis>
215 
216 <emphasis role="comment">//&#32;N2118</emphasis>
217 <emphasis role="preprocessor">#if&#32;GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_CLANG</emphasis>
218 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_RVALUE_REFERENCES&#32;__has_feature(cxx_rvalue_references)</emphasis>
219 <emphasis role="preprocessor">#elif&#32;GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX11_FLAG</emphasis>
220 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_RVALUE_REFERENCES&#32;1</emphasis>
221 <emphasis role="preprocessor">#else</emphasis>
222 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_RVALUE_REFERENCES&#32;((GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX0X_FLAG)&#32;&amp;&amp;&#32;(\</emphasis>
223 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_VC))&#32;||&#32;\</emphasis>
224 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_CUDA))))</emphasis>
225 <emphasis role="preprocessor">#endif</emphasis>
226 
227 <emphasis role="comment">//&#32;N2437&#32;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2437.pdf</emphasis>
228 <emphasis role="preprocessor">#if&#32;GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_CLANG</emphasis>
229 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_EXPLICIT_CONVERSION_OPERATORS&#32;__has_feature(cxx_explicit_conversions)</emphasis>
230 <emphasis role="preprocessor">#elif&#32;GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX11_FLAG</emphasis>
231 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_EXPLICIT_CONVERSION_OPERATORS&#32;1</emphasis>
232 <emphasis role="preprocessor">#else</emphasis>
233 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_EXPLICIT_CONVERSION_OPERATORS&#32;((GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX0X_FLAG)&#32;&amp;&amp;&#32;(\</emphasis>
234 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_INTEL)&#32;&amp;&amp;&#32;(GLM_COMPILER&#32;&gt;=&#32;GLM_COMPILER_INTEL14))&#32;||&#32;\</emphasis>
235 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_VC)&#32;&amp;&amp;&#32;(GLM_COMPILER&#32;&gt;=&#32;GLM_COMPILER_VC12))&#32;||&#32;\</emphasis>
236 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_CUDA))))</emphasis>
237 <emphasis role="preprocessor">#endif</emphasis>
238 
239 <emphasis role="comment">//&#32;N2258&#32;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2258.pdf</emphasis>
240 <emphasis role="preprocessor">#if&#32;GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_CLANG</emphasis>
241 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_TEMPLATE_ALIASES&#32;__has_feature(cxx_alias_templates)</emphasis>
242 <emphasis role="preprocessor">#elif&#32;GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX11_FLAG</emphasis>
243 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_TEMPLATE_ALIASES&#32;1</emphasis>
244 <emphasis role="preprocessor">#else</emphasis>
245 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_TEMPLATE_ALIASES&#32;((GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX0X_FLAG)&#32;&amp;&amp;&#32;(\</emphasis>
246 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_INTEL))&#32;||&#32;\</emphasis>
247 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_VC)&#32;&amp;&amp;&#32;(GLM_COMPILER&#32;&gt;=&#32;GLM_COMPILER_VC12))&#32;||&#32;\</emphasis>
248 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_CUDA))))</emphasis>
249 <emphasis role="preprocessor">#endif</emphasis>
250 
251 <emphasis role="comment">//&#32;N2930&#32;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2930.html</emphasis>
252 <emphasis role="preprocessor">#if&#32;GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_CLANG</emphasis>
253 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_RANGE_FOR&#32;__has_feature(cxx_range_for)</emphasis>
254 <emphasis role="preprocessor">#elif&#32;GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX11_FLAG</emphasis>
255 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_RANGE_FOR&#32;1</emphasis>
256 <emphasis role="preprocessor">#else</emphasis>
257 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_RANGE_FOR&#32;((GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX0X_FLAG)&#32;&amp;&amp;&#32;(\</emphasis>
258 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_INTEL))&#32;||&#32;\</emphasis>
259 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_VC))&#32;||&#32;\</emphasis>
260 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_CUDA))))</emphasis>
261 <emphasis role="preprocessor">#endif</emphasis>
262 
263 <emphasis role="comment">//&#32;N2341&#32;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2341.pdf</emphasis>
264 <emphasis role="preprocessor">#if&#32;GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_CLANG</emphasis>
265 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_ALIGNOF&#32;__has_feature(cxx_alignas)</emphasis>
266 <emphasis role="preprocessor">#elif&#32;GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX11_FLAG</emphasis>
267 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_ALIGNOF&#32;1</emphasis>
268 <emphasis role="preprocessor">#else</emphasis>
269 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_ALIGNOF&#32;((GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX0X_FLAG)&#32;&amp;&amp;&#32;(\</emphasis>
270 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_INTEL)&#32;&amp;&amp;&#32;(GLM_COMPILER&#32;&gt;=&#32;GLM_COMPILER_INTEL15))&#32;||&#32;\</emphasis>
271 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_VC)&#32;&amp;&amp;&#32;(GLM_COMPILER&#32;&gt;=&#32;GLM_COMPILER_VC14))&#32;||&#32;\</emphasis>
272 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_CUDA))))</emphasis>
273 <emphasis role="preprocessor">#endif</emphasis>
274 
275 <emphasis role="comment">//&#32;N2235&#32;Generalized&#32;Constant&#32;Expressions&#32;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2235.pdf</emphasis>
276 <emphasis role="comment">//&#32;N3652&#32;Extended&#32;Constant&#32;Expressions&#32;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3652.html</emphasis>
277 <emphasis role="preprocessor">#if&#32;(GLM_ARCH&#32;&amp;&#32;GLM_ARCH_SIMD_BIT)&#32;</emphasis><emphasis role="comment">//&#32;Compiler&#32;SIMD&#32;intrinsics&#32;don&apos;t&#32;support&#32;constexpr...</emphasis>
278 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_CONSTEXPR&#32;0</emphasis>
279 <emphasis role="preprocessor">#elif&#32;(GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_CLANG)</emphasis>
280 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_CONSTEXPR&#32;__has_feature(cxx_relaxed_constexpr)</emphasis>
281 <emphasis role="preprocessor">#elif&#32;(GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX14_FLAG)</emphasis>
282 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_CONSTEXPR&#32;1</emphasis>
283 <emphasis role="preprocessor">#else</emphasis>
284 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_CONSTEXPR&#32;((GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX0X_FLAG)&#32;&amp;&amp;&#32;GLM_HAS_INITIALIZER_LISTS&#32;&amp;&amp;&#32;(\</emphasis>
285 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_INTEL)&#32;&amp;&amp;&#32;(GLM_COMPILER&#32;&gt;=&#32;GLM_COMPILER_INTEL17))&#32;||&#32;\</emphasis>
286 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_VC)&#32;&amp;&amp;&#32;(GLM_COMPILER&#32;&gt;=&#32;GLM_COMPILER_VC15))))</emphasis>
287 <emphasis role="preprocessor">#endif</emphasis>
288 
289 <emphasis role="preprocessor">#if&#32;GLM_HAS_CONSTEXPR</emphasis>
290 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONSTEXPR&#32;constexpr</emphasis>
291 <emphasis role="preprocessor">#else</emphasis>
292 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONSTEXPR</emphasis>
293 <emphasis role="preprocessor">#endif</emphasis>
294 
295 <emphasis role="comment">//</emphasis>
296 <emphasis role="preprocessor">#if&#32;GLM_HAS_CONSTEXPR</emphasis>
297 <emphasis role="preprocessor">#&#32;if&#32;(GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_CLANG)</emphasis>
298 <emphasis role="preprocessor">#&#32;&#32;&#32;if&#32;__has_feature(cxx_if_constexpr)</emphasis>
299 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_HAS_IF_CONSTEXPR&#32;1</emphasis>
300 <emphasis role="preprocessor">#&#32;&#32;&#32;else</emphasis>
301 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_HAS_IF_CONSTEXPR&#32;0</emphasis>
302 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis>
303 <emphasis role="preprocessor">#&#32;elif&#32;(GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX17_FLAG)</emphasis>
304 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_IF_CONSTEXPR&#32;1</emphasis>
305 <emphasis role="preprocessor">#&#32;else</emphasis>
306 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_IF_CONSTEXPR&#32;0</emphasis>
307 <emphasis role="preprocessor">#&#32;endif</emphasis>
308 <emphasis role="preprocessor">#else</emphasis>
309 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_IF_CONSTEXPR&#32;0</emphasis>
310 <emphasis role="preprocessor">#endif</emphasis>
311 
312 <emphasis role="preprocessor">#if&#32;GLM_HAS_IF_CONSTEXPR</emphasis>
313 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_IF_CONSTEXPR&#32;if&#32;constexpr</emphasis>
314 <emphasis role="preprocessor">#else</emphasis>
315 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_IF_CONSTEXPR&#32;if</emphasis>
316 <emphasis role="preprocessor">#endif</emphasis>
317 
318 <emphasis role="comment">//</emphasis>
319 <emphasis role="preprocessor">#if&#32;GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX11_FLAG</emphasis>
320 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_ASSIGNABLE&#32;1</emphasis>
321 <emphasis role="preprocessor">#else</emphasis>
322 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_ASSIGNABLE&#32;((GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX0X_FLAG)&#32;&amp;&amp;&#32;(\</emphasis>
323 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_VC)&#32;&amp;&amp;&#32;(GLM_COMPILER&#32;&gt;=&#32;GLM_COMPILER_VC15))&#32;||&#32;\</emphasis>
324 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_GCC)&#32;&amp;&amp;&#32;(GLM_COMPILER&#32;&gt;=&#32;GLM_COMPILER_GCC49))))</emphasis>
325 <emphasis role="preprocessor">#endif</emphasis>
326 
327 <emphasis role="comment">//</emphasis>
328 <emphasis role="preprocessor">#define&#32;GLM_HAS_TRIVIAL_QUERIES&#32;0</emphasis>
329 
330 <emphasis role="comment">//</emphasis>
331 <emphasis role="preprocessor">#if&#32;GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX11_FLAG</emphasis>
332 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_MAKE_SIGNED&#32;1</emphasis>
333 <emphasis role="preprocessor">#else</emphasis>
334 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_MAKE_SIGNED&#32;((GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX0X_FLAG)&#32;&amp;&amp;&#32;(\</emphasis>
335 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_VC)&#32;&amp;&amp;&#32;(GLM_COMPILER&#32;&gt;=&#32;GLM_COMPILER_VC12))&#32;||&#32;\</emphasis>
336 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_CUDA))))</emphasis>
337 <emphasis role="preprocessor">#endif</emphasis>
338 
339 <emphasis role="comment">//</emphasis>
340 <emphasis role="preprocessor">#if&#32;defined(GLM_FORCE_INTRINSICS)</emphasis>
341 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_BITSCAN_WINDOWS&#32;((GLM_PLATFORM&#32;&amp;&#32;GLM_PLATFORM_WINDOWS)&#32;&amp;&amp;&#32;(\</emphasis>
342 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_INTEL))&#32;||&#32;\</emphasis>
343 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_VC)&#32;&amp;&amp;&#32;(GLM_COMPILER&#32;&gt;=&#32;GLM_COMPILER_VC14)&#32;&amp;&amp;&#32;(GLM_ARCH&#32;&amp;&#32;GLM_ARCH_X86_BIT))))</emphasis>
344 <emphasis role="preprocessor">#else</emphasis>
345 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_BITSCAN_WINDOWS&#32;0</emphasis>
346 <emphasis role="preprocessor">#endif</emphasis>
347 
349 <emphasis role="comment">//&#32;OpenMP</emphasis>
350 <emphasis role="preprocessor">#ifdef&#32;_OPENMP</emphasis>
351 <emphasis role="preprocessor">#&#32;&#32;&#32;if&#32;GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_GCC</emphasis>
352 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;GLM_COMPILER&#32;&gt;=&#32;GLM_COMPILER_GCC61</emphasis>
353 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_HAS_OPENMP&#32;45</emphasis>
354 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;elif&#32;GLM_COMPILER&#32;&gt;=&#32;GLM_COMPILER_GCC49</emphasis>
355 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_HAS_OPENMP&#32;40</emphasis>
356 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;elif&#32;GLM_COMPILER&#32;&gt;=&#32;GLM_COMPILER_GCC47</emphasis>
357 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_HAS_OPENMP&#32;31</emphasis>
358 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;else</emphasis>
359 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_HAS_OPENMP&#32;0</emphasis>
360 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;endif</emphasis>
361 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_CLANG</emphasis>
362 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;GLM_COMPILER&#32;&gt;=&#32;GLM_COMPILER_CLANG38</emphasis>
363 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_HAS_OPENMP&#32;31</emphasis>
364 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;else</emphasis>
365 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_HAS_OPENMP&#32;0</emphasis>
366 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;endif</emphasis>
367 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_VC</emphasis>
368 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_HAS_OPENMP&#32;20</emphasis>
369 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_INTEL</emphasis>
370 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;GLM_COMPILER&#32;&gt;=&#32;GLM_COMPILER_INTEL16</emphasis>
371 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_HAS_OPENMP&#32;40</emphasis>
372 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;else</emphasis>
373 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_HAS_OPENMP&#32;0</emphasis>
374 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;endif</emphasis>
375 <emphasis role="preprocessor">#&#32;&#32;&#32;else</emphasis>
376 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_HAS_OPENMP&#32;0</emphasis>
377 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis>
378 <emphasis role="preprocessor">#else</emphasis>
379 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_HAS_OPENMP&#32;0</emphasis>
380 <emphasis role="preprocessor">#endif</emphasis>
381 
383 <emphasis role="comment">//&#32;nullptr</emphasis>
384 
385 <emphasis role="preprocessor">#if&#32;GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX0X_FLAG</emphasis>
386 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_NULLPTR&#32;GLM_ENABLE</emphasis>
387 <emphasis role="preprocessor">#else</emphasis>
388 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_NULLPTR&#32;GLM_DISABLE</emphasis>
389 <emphasis role="preprocessor">#endif</emphasis>
390 
391 <emphasis role="preprocessor">#if&#32;GLM_CONFIG_NULLPTR&#32;==&#32;GLM_ENABLE</emphasis>
392 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_NULLPTR&#32;nullptr</emphasis>
393 <emphasis role="preprocessor">#else</emphasis>
394 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_NULLPTR&#32;0</emphasis>
395 <emphasis role="preprocessor">#endif</emphasis>
396 
398 <emphasis role="comment">//&#32;Static&#32;assert</emphasis>
399 
400 <emphasis role="preprocessor">#if&#32;GLM_HAS_STATIC_ASSERT</emphasis>
401 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_STATIC_ASSERT(x,&#32;message)&#32;static_assert(x,&#32;message)</emphasis>
402 <emphasis role="preprocessor">#elif&#32;GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_VC</emphasis>
403 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_STATIC_ASSERT(x,&#32;message)&#32;typedef&#32;char&#32;__CASSERT__##__LINE__[(x)&#32;?&#32;1&#32;:&#32;-1]</emphasis>
404 <emphasis role="preprocessor">#else</emphasis>
405 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_STATIC_ASSERT(x,&#32;message)&#32;assert(x)</emphasis>
406 <emphasis role="preprocessor">#endif</emphasis><emphasis role="comment">//GLM_LANG</emphasis>
407 
409 <emphasis role="comment">//&#32;Qualifiers</emphasis>
410 
411 <emphasis role="preprocessor">#if&#32;GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_CUDA</emphasis>
412 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CUDA_FUNC_DEF&#32;__device__&#32;__host__</emphasis>
413 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CUDA_FUNC_DECL&#32;__device__&#32;__host__</emphasis>
414 <emphasis role="preprocessor">#else</emphasis>
415 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CUDA_FUNC_DEF</emphasis>
416 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CUDA_FUNC_DECL</emphasis>
417 <emphasis role="preprocessor">#endif</emphasis>
418 
419 <emphasis role="preprocessor">#if&#32;defined(GLM_FORCE_INLINE)</emphasis>
420 <emphasis role="preprocessor">#&#32;&#32;&#32;if&#32;GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_VC</emphasis>
421 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_INLINE&#32;__forceinline</emphasis>
422 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_NEVER_INLINE&#32;__declspec((noinline))</emphasis>
423 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;GLM_COMPILER&#32;&amp;&#32;(GLM_COMPILER_GCC&#32;|&#32;GLM_COMPILER_CLANG)</emphasis>
424 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_INLINE&#32;inline&#32;__attribute__((__always_inline__))</emphasis>
425 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_NEVER_INLINE&#32;__attribute__((__noinline__))</emphasis>
426 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_CUDA</emphasis>
427 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_INLINE&#32;__forceinline__</emphasis>
428 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_NEVER_INLINE&#32;__noinline__</emphasis>
429 <emphasis role="preprocessor">#&#32;&#32;&#32;else</emphasis>
430 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_INLINE&#32;inline</emphasis>
431 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_NEVER_INLINE</emphasis>
432 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis><emphasis role="comment">//GLM_COMPILER</emphasis>
433 <emphasis role="preprocessor">#else</emphasis>
434 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_INLINE&#32;inline</emphasis>
435 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_NEVER_INLINE</emphasis>
436 <emphasis role="preprocessor">#endif</emphasis><emphasis role="comment">//defined(GLM_FORCE_INLINE)</emphasis>
437 
438 <emphasis role="preprocessor">#define&#32;GLM_FUNC_DECL&#32;GLM_CUDA_FUNC_DECL</emphasis>
439 <emphasis role="preprocessor">#define&#32;GLM_FUNC_QUALIFIER&#32;GLM_CUDA_FUNC_DEF&#32;GLM_INLINE</emphasis>
440 
442 <emphasis role="comment">//&#32;Swizzle&#32;operators</emphasis>
443 
444 <emphasis role="comment">//&#32;User&#32;defines:&#32;GLM_FORCE_SWIZZLE</emphasis>
445 
446 <emphasis role="preprocessor">#define&#32;GLM_SWIZZLE_DISABLED&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0</emphasis>
447 <emphasis role="preprocessor">#define&#32;GLM_SWIZZLE_OPERATOR&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1</emphasis>
448 <emphasis role="preprocessor">#define&#32;GLM_SWIZZLE_FUNCTION&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;2</emphasis>
449 
450 <emphasis role="preprocessor">#if&#32;defined(GLM_FORCE_XYZW_ONLY)</emphasis>
451 <emphasis role="preprocessor">#&#32;&#32;&#32;undef&#32;GLM_FORCE_SWIZZLE</emphasis>
452 <emphasis role="preprocessor">#endif</emphasis>
453 
454 <emphasis role="preprocessor">#if&#32;defined(GLM_SWIZZLE)</emphasis>
455 <emphasis role="preprocessor">#&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;GLM_SWIZZLE&#32;is&#32;deprecated,&#32;use&#32;GLM_FORCE_SWIZZLE&#32;instead.&quot;)</emphasis>
456 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_FORCE_SWIZZLE</emphasis>
457 <emphasis role="preprocessor">#endif</emphasis>
458 
459 <emphasis role="preprocessor">#if&#32;defined(GLM_FORCE_SWIZZLE)&#32;&amp;&amp;&#32;(GLM_LANG&#32;&amp;&#32;GLM_LANG_CXXMS_FLAG)</emphasis>
460 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_SWIZZLE&#32;GLM_SWIZZLE_OPERATOR</emphasis>
461 <emphasis role="preprocessor">#elif&#32;defined(GLM_FORCE_SWIZZLE)</emphasis>
462 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_SWIZZLE&#32;GLM_SWIZZLE_FUNCTION</emphasis>
463 <emphasis role="preprocessor">#else</emphasis>
464 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_SWIZZLE&#32;GLM_SWIZZLE_DISABLED</emphasis>
465 <emphasis role="preprocessor">#endif</emphasis>
466 
468 <emphasis role="comment">//&#32;Allows&#32;using&#32;not&#32;basic&#32;types&#32;as&#32;genType</emphasis>
469 
470 <emphasis role="comment">//&#32;#define&#32;GLM_FORCE_UNRESTRICTED_GENTYPE</emphasis>
471 
472 <emphasis role="preprocessor">#ifdef&#32;GLM_FORCE_UNRESTRICTED_GENTYPE</emphasis>
473 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_UNRESTRICTED_GENTYPE&#32;GLM_ENABLE</emphasis>
474 <emphasis role="preprocessor">#else</emphasis>
475 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_UNRESTRICTED_GENTYPE&#32;GLM_DISABLE</emphasis>
476 <emphasis role="preprocessor">#endif</emphasis>
477 
479 <emphasis role="comment">//&#32;Clip&#32;control,&#32;define&#32;GLM_FORCE_DEPTH_ZERO_TO_ONE&#32;before&#32;including&#32;GLM</emphasis>
480 <emphasis role="comment">//&#32;to&#32;use&#32;a&#32;clip&#32;space&#32;between&#32;0&#32;to&#32;1.</emphasis>
481 <emphasis role="comment">//&#32;Coordinate&#32;system,&#32;define&#32;GLM_FORCE_LEFT_HANDED&#32;before&#32;including&#32;GLM</emphasis>
482 <emphasis role="comment">//&#32;to&#32;use&#32;left&#32;handed&#32;coordinate&#32;system&#32;by&#32;default.</emphasis>
483 
484 <emphasis role="preprocessor">#define&#32;GLM_CLIP_CONTROL_ZO_BIT&#32;&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;0)&#32;</emphasis><emphasis role="comment">//&#32;ZERO_TO_ONE</emphasis>
485 <emphasis role="preprocessor">#define&#32;GLM_CLIP_CONTROL_NO_BIT&#32;&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;1)&#32;</emphasis><emphasis role="comment">//&#32;NEGATIVE_ONE_TO_ONE</emphasis>
486 <emphasis role="preprocessor">#define&#32;GLM_CLIP_CONTROL_LH_BIT&#32;&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;2)&#32;</emphasis><emphasis role="comment">//&#32;LEFT_HANDED,&#32;For&#32;DirectX,&#32;Metal,&#32;Vulkan</emphasis>
487 <emphasis role="preprocessor">#define&#32;GLM_CLIP_CONTROL_RH_BIT&#32;&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;3)&#32;</emphasis><emphasis role="comment">//&#32;RIGHT_HANDED,&#32;For&#32;OpenGL,&#32;default&#32;in&#32;GLM</emphasis>
488 
489 <emphasis role="preprocessor">#define&#32;GLM_CLIP_CONTROL_LH_ZO&#32;(GLM_CLIP_CONTROL_LH_BIT&#32;|&#32;GLM_CLIP_CONTROL_ZO_BIT)</emphasis>
490 <emphasis role="preprocessor">#define&#32;GLM_CLIP_CONTROL_LH_NO&#32;(GLM_CLIP_CONTROL_LH_BIT&#32;|&#32;GLM_CLIP_CONTROL_NO_BIT)</emphasis>
491 <emphasis role="preprocessor">#define&#32;GLM_CLIP_CONTROL_RH_ZO&#32;(GLM_CLIP_CONTROL_RH_BIT&#32;|&#32;GLM_CLIP_CONTROL_ZO_BIT)</emphasis>
492 <emphasis role="preprocessor">#define&#32;GLM_CLIP_CONTROL_RH_NO&#32;(GLM_CLIP_CONTROL_RH_BIT&#32;|&#32;GLM_CLIP_CONTROL_NO_BIT)</emphasis>
493 
494 <emphasis role="preprocessor">#ifdef&#32;GLM_FORCE_DEPTH_ZERO_TO_ONE</emphasis>
495 <emphasis role="preprocessor">#&#32;&#32;&#32;ifdef&#32;GLM_FORCE_LEFT_HANDED</emphasis>
496 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_CONFIG_CLIP_CONTROL&#32;GLM_CLIP_CONTROL_LH_ZO</emphasis>
497 <emphasis role="preprocessor">#&#32;&#32;&#32;else</emphasis>
498 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_CONFIG_CLIP_CONTROL&#32;GLM_CLIP_CONTROL_RH_ZO</emphasis>
499 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis>
500 <emphasis role="preprocessor">#else</emphasis>
501 <emphasis role="preprocessor">#&#32;&#32;&#32;ifdef&#32;GLM_FORCE_LEFT_HANDED</emphasis>
502 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_CONFIG_CLIP_CONTROL&#32;GLM_CLIP_CONTROL_LH_NO</emphasis>
503 <emphasis role="preprocessor">#&#32;&#32;&#32;else</emphasis>
504 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_CONFIG_CLIP_CONTROL&#32;GLM_CLIP_CONTROL_RH_NO</emphasis>
505 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis>
506 <emphasis role="preprocessor">#endif</emphasis>
507 
509 <emphasis role="comment">//&#32;Qualifiers</emphasis>
510 
511 <emphasis role="preprocessor">#if&#32;(GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_VC)&#32;||&#32;((GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_INTEL)&#32;&amp;&amp;&#32;(GLM_PLATFORM&#32;&amp;&#32;GLM_PLATFORM_WINDOWS))</emphasis>
512 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_DEPRECATED&#32;__declspec(deprecated)</emphasis>
513 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_ALIGNED_TYPEDEF(type,&#32;name,&#32;alignment)&#32;typedef&#32;__declspec(align(alignment))&#32;type&#32;name</emphasis>
514 <emphasis role="preprocessor">#elif&#32;GLM_COMPILER&#32;&amp;&#32;(GLM_COMPILER_GCC&#32;|&#32;GLM_COMPILER_CLANG&#32;|&#32;GLM_COMPILER_INTEL)</emphasis>
515 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_DEPRECATED&#32;__attribute__((__deprecated__))</emphasis>
516 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_ALIGNED_TYPEDEF(type,&#32;name,&#32;alignment)&#32;typedef&#32;type&#32;name&#32;__attribute__((aligned(alignment)))</emphasis>
517 <emphasis role="preprocessor">#elif&#32;GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_CUDA</emphasis>
518 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_DEPRECATED</emphasis>
519 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_ALIGNED_TYPEDEF(type,&#32;name,&#32;alignment)&#32;typedef&#32;type&#32;name&#32;__align__(x)</emphasis>
520 <emphasis role="preprocessor">#else</emphasis>
521 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_DEPRECATED</emphasis>
522 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_ALIGNED_TYPEDEF(type,&#32;name,&#32;alignment)&#32;typedef&#32;type&#32;name</emphasis>
523 <emphasis role="preprocessor">#endif</emphasis>
524 
526 
527 <emphasis role="preprocessor">#ifdef&#32;GLM_FORCE_EXPLICIT_CTOR</emphasis>
528 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_EXPLICIT&#32;explicit</emphasis>
529 <emphasis role="preprocessor">#else</emphasis>
530 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_EXPLICIT</emphasis>
531 <emphasis role="preprocessor">#endif</emphasis>
532 
534 <emphasis role="comment">//&#32;SYCL</emphasis>
535 
536 <emphasis role="preprocessor">#if&#32;GLM_COMPILER==GLM_COMPILER_SYCL</emphasis>
537 
538 <emphasis role="preprocessor">#include&#32;&lt;CL/sycl.hpp&gt;</emphasis>
539 <emphasis role="preprocessor">#include&#32;&lt;limits&gt;</emphasis>
540 
541 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceglm">glm</link>&#32;{
542 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;{
543 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Import&#32;SYCL&apos;s&#32;functions&#32;into&#32;the&#32;namespace&#32;glm::std&#32;to&#32;force&#32;their&#32;usages.</emphasis>
544 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;It&apos;s&#32;important&#32;to&#32;use&#32;the&#32;math&#32;built-in&#32;function&#32;(sin,&#32;exp,&#32;...)</emphasis>
545 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;of&#32;SYCL&#32;instead&#32;the&#32;std&#32;ones.</emphasis>
546 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>cl::sycl;
547 
549 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Import&#32;some&#32;&quot;harmless&quot;&#32;std&apos;s&#32;stuffs&#32;used&#32;by&#32;glm&#32;into</emphasis>
550 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;new&#32;glm::std&#32;namespace.</emphasis>
551 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
552 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>numeric_limits&#32;=&#32;::std::numeric_limits&lt;T&gt;;
553 
554 &#32;&#32;&#32;&#32;using&#32;::std::size_t;
555 
556 &#32;&#32;&#32;&#32;using&#32;::std::uint8_t;
557 &#32;&#32;&#32;&#32;using&#32;::std::uint16_t;
558 &#32;&#32;&#32;&#32;using&#32;::std::uint32_t;
559 &#32;&#32;&#32;&#32;using&#32;::std::uint64_t;
560 
561 &#32;&#32;&#32;&#32;using&#32;::std::int8_t;
562 &#32;&#32;&#32;&#32;using&#32;::std::int16_t;
563 &#32;&#32;&#32;&#32;using&#32;::std::int32_t;
564 &#32;&#32;&#32;&#32;using&#32;::std::int64_t;
565 
566 &#32;&#32;&#32;&#32;using&#32;::std::make_unsigned;
568 }&#32;<emphasis role="comment">//namespace&#32;std</emphasis>
569 }&#32;<emphasis role="comment">//namespace&#32;glm</emphasis>
570 
571 <emphasis role="preprocessor">#endif</emphasis>
572 
574 
576 <emphasis role="comment">//&#32;Length&#32;type:&#32;all&#32;length&#32;functions&#32;returns&#32;a&#32;length_t&#32;type.</emphasis>
577 <emphasis role="comment">//&#32;When&#32;GLM_FORCE_SIZE_T_LENGTH&#32;is&#32;defined,&#32;length_t&#32;is&#32;a&#32;typedef&#32;of&#32;size_t&#32;otherwise</emphasis>
578 <emphasis role="comment">//&#32;length_t&#32;is&#32;a&#32;typedef&#32;of&#32;int&#32;like&#32;GLSL&#32;defines&#32;it.</emphasis>
579 
580 <emphasis role="preprocessor">#define&#32;GLM_LENGTH_INT&#32;&#32;&#32;&#32;&#32;&#32;1</emphasis>
581 <emphasis role="preprocessor">#define&#32;GLM_LENGTH_SIZE_T&#32;&#32;&#32;2</emphasis>
582 
583 <emphasis role="preprocessor">#ifdef&#32;GLM_FORCE_SIZE_T_LENGTH</emphasis>
584 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_LENGTH_TYPE&#32;&#32;&#32;&#32;&#32;&#32;&#32;GLM_LENGTH_SIZE_T</emphasis>
585 <emphasis role="preprocessor">#else</emphasis>
586 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_LENGTH_TYPE&#32;&#32;&#32;&#32;&#32;&#32;&#32;GLM_LENGTH_INT</emphasis>
587 <emphasis role="preprocessor">#endif</emphasis>
588 
589 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceglm">glm</link>
590 {
591 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::size_t;
592 <emphasis role="preprocessor">#&#32;&#32;&#32;if&#32;GLM_CONFIG_LENGTH_TYPE&#32;==&#32;GLM_LENGTH_SIZE_T</emphasis>
593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_namespaceglm_1a090a0de2260835bee80e71a702492ed9">length_t</link>;
594 <emphasis role="preprocessor">#&#32;&#32;&#32;else</emphasis>
595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespaceglm_1a090a0de2260835bee80e71a702492ed9">length_t</link>;
596 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis>
597 }<emphasis role="comment">//namespace&#32;glm</emphasis>
598 
600 <emphasis role="comment">//&#32;constexpr</emphasis>
601 
602 <emphasis role="preprocessor">#if&#32;GLM_HAS_CONSTEXPR</emphasis>
603 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_CONSTEXP&#32;GLM_ENABLE</emphasis>
604 
605 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceglm">glm</link>
606 &#32;&#32;&#32;&#32;{
607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;std::<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;
608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;std::size_t&#32;countof(T&#32;<emphasis role="keyword">const</emphasis>&#32;(&amp;)[N])
609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;N;
611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
612 &#32;&#32;&#32;&#32;}<emphasis role="comment">//namespace&#32;glm</emphasis>
613 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_COUNTOF(arr)&#32;glm::countof(arr)</emphasis>
614 <emphasis role="preprocessor">#elif&#32;defined(_MSC_VER)</emphasis>
615 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_CONSTEXP&#32;GLM_DISABLE</emphasis>
616 
617 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_COUNTOF(arr)&#32;_countof(arr)</emphasis>
618 <emphasis role="preprocessor">#else</emphasis>
619 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_CONSTEXP&#32;GLM_DISABLE</emphasis>
620 
621 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_COUNTOF(arr)&#32;sizeof(arr)&#32;/&#32;sizeof(arr[0])</emphasis>
622 <emphasis role="preprocessor">#endif</emphasis>
623 
625 <emphasis role="comment">//&#32;uint</emphasis>
626 
627 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceglm">glm</link>{
628 <emphasis role="keyword">namespace&#32;</emphasis>detail
629 {
630 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
631 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>is_int
632 &#32;&#32;&#32;&#32;{
633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="_structglm_1_1detail_1_1is__int_1a6a1d15bd1184bc07664114fa30199e01">test</link>&#32;{<link linkend="_classvalue">value</link>&#32;=&#32;0};
634 &#32;&#32;&#32;&#32;};
635 
636 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
637 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>is_int&lt;unsigned&#32;int&gt;
638 &#32;&#32;&#32;&#32;{
639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="_structglm_1_1detail_1_1is__int_3_01unsigned_01int_01_4_1a17721f91cbccb63ddd4241630b5b76da">test</link>&#32;{<link linkend="_classvalue">value</link>&#32;=&#32;~0};
640 &#32;&#32;&#32;&#32;};
641 
642 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
643 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>is_int&lt;signed&#32;int&gt;
644 &#32;&#32;&#32;&#32;{
645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="_structglm_1_1detail_1_1is__int_3_01signed_01int_01_4_1a0631dd968af7bbbff58104895e14f9d9">test</link>&#32;{<link linkend="_classvalue">value</link>&#32;=&#32;~0};
646 &#32;&#32;&#32;&#32;};
647 }<emphasis role="comment">//namespace&#32;detail</emphasis>
648 
649 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link>;
650 }<emphasis role="comment">//namespace&#32;glm</emphasis>
651 
653 <emphasis role="comment">//&#32;64-bit&#32;int</emphasis>
654 
655 <emphasis role="preprocessor">#if&#32;GLM_HAS_EXTENDED_INTEGER_TYPE</emphasis>
656 <emphasis role="preprocessor">#&#32;&#32;&#32;include&#32;&lt;cstdint&gt;</emphasis>
657 <emphasis role="preprocessor">#endif</emphasis>
658 
659 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceglm">glm</link>{
660 <emphasis role="keyword">namespace&#32;</emphasis>detail
661 {
662 <emphasis role="preprocessor">#&#32;&#32;&#32;if&#32;GLM_HAS_EXTENDED_INTEGER_TYPE</emphasis>
663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::uint64_t&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1_1detail_1ae110ab7b33b51165e9b99e03abe3947e">uint64</link>;
664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::int64_t&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1_1detail_1a427e1ba144685539c0efb4c89e97a277">int64</link>;
665 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;(defined(__STDC_VERSION__)&#32;&amp;&amp;&#32;(__STDC_VERSION__&#32;&gt;=&#32;199901L))&#32;</emphasis><emphasis role="comment">//&#32;C99&#32;detected,&#32;64&#32;bit&#32;types&#32;available</emphasis>
666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1_1detail_1ae110ab7b33b51165e9b99e03abe3947e">uint64</link>;
667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1_1detail_1a427e1ba144685539c0efb4c89e97a277">int64</link>;
668 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_VC</emphasis>
669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;__int64&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1_1detail_1ae110ab7b33b51165e9b99e03abe3947e">uint64</link>;
670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">signed</emphasis>&#32;__int64&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1_1detail_1a427e1ba144685539c0efb4c89e97a277">int64</link>;
671 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_GCC</emphasis>
672 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wlong-long&quot;</emphasis>
673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__extension__&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1_1detail_1ae110ab7b33b51165e9b99e03abe3947e">uint64</link>;
674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__extension__&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">signed</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1_1detail_1a427e1ba144685539c0efb4c89e97a277">int64</link>;
675 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;(GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_CLANG)</emphasis>
676 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;clang&#32;diagnostic&#32;ignored&#32;&quot;-Wc++11-long-long&quot;</emphasis>
677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1_1detail_1ae110ab7b33b51165e9b99e03abe3947e">uint64</link>;
678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">signed</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1_1detail_1a427e1ba144685539c0efb4c89e97a277">int64</link>;
679 <emphasis role="preprocessor">#&#32;&#32;&#32;else</emphasis><emphasis role="comment">//unknown&#32;compiler</emphasis>
680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1_1detail_1ae110ab7b33b51165e9b99e03abe3947e">uint64</link>;
681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">signed</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1_1detail_1a427e1ba144685539c0efb4c89e97a277">int64</link>;
682 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis>
683 }<emphasis role="comment">//namespace&#32;detail</emphasis>
684 }<emphasis role="comment">//namespace&#32;glm</emphasis>
685 
687 <emphasis role="comment">//&#32;make_unsigned</emphasis>
688 
689 <emphasis role="preprocessor">#if&#32;GLM_HAS_MAKE_SIGNED</emphasis>
690 <emphasis role="preprocessor">#&#32;&#32;&#32;include&#32;&lt;type_traits&gt;</emphasis>
691 
692 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceglm">glm</link>{
693 <emphasis role="keyword">namespace&#32;</emphasis>detail
694 {
695 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::make_unsigned;
696 }<emphasis role="comment">//namespace&#32;detail</emphasis>
697 }<emphasis role="comment">//namespace&#32;glm</emphasis>
698 
699 <emphasis role="preprocessor">#else</emphasis>
700 
701 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceglm">glm</link>{
702 <emphasis role="keyword">namespace&#32;</emphasis>detail
703 {
704 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;genType&gt;
705 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>make_unsigned
706 &#32;&#32;&#32;&#32;{};
707 
708 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
709 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>make_unsigned&lt;char&gt;
710 &#32;&#32;&#32;&#32;{
711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_structglm_1_1detail_1_1make__unsigned_3_01char_01_4_1a473f89289be25f14bdc7c459e4be4fed">type</link>;
712 &#32;&#32;&#32;&#32;};
713 
714 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
715 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structglm_1_1detail_1_1make__unsigned">make_unsigned</link>&lt;signed&#32;char&gt;
716 &#32;&#32;&#32;&#32;{
717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_structglm_1_1detail_1_1make__unsigned_3_01signed_01char_01_4_1af25906396e11879f5afccec2572dae4b">type</link>;
718 &#32;&#32;&#32;&#32;};
719 
720 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
721 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structglm_1_1detail_1_1make__unsigned">make_unsigned</link>&lt;short&gt;
722 &#32;&#32;&#32;&#32;{
723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&#32;<link linkend="_structglm_1_1detail_1_1make__unsigned_3_01short_01_4_1a58861091aca3a68acc085131cc6fefa4">type</link>;
724 &#32;&#32;&#32;&#32;};
725 
726 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
727 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structglm_1_1detail_1_1make__unsigned">make_unsigned</link>&lt;int&gt;
728 &#32;&#32;&#32;&#32;{
729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_structglm_1_1detail_1_1make__unsigned_3_01int_01_4_1ac3fd57ed35c0305bbe941009a84139c1">type</link>;
730 &#32;&#32;&#32;&#32;};
731 
732 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
733 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structglm_1_1detail_1_1make__unsigned">make_unsigned</link>&lt;long&gt;
734 &#32;&#32;&#32;&#32;{
735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_structglm_1_1detail_1_1make__unsigned_3_01long_01_4_1ade0cc74f63e30969e7d7b42eb6ac8289">type</link>;
736 &#32;&#32;&#32;&#32;};
737 
738 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
739 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structglm_1_1detail_1_1make__unsigned">make_unsigned</link>&lt;<link linkend="_namespaceglm_1_1detail_1a427e1ba144685539c0efb4c89e97a277">int64</link>&gt;
740 &#32;&#32;&#32;&#32;{
741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_namespaceglm_1_1detail_1ae110ab7b33b51165e9b99e03abe3947e">uint64</link>&#32;<link linkend="_structglm_1_1detail_1_1make__unsigned_3_01int64_01_4_1aeeb029429302e342830dc565c3223920">type</link>;
742 &#32;&#32;&#32;&#32;};
743 
744 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
745 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structglm_1_1detail_1_1make__unsigned">make_unsigned</link>&lt;unsigned&#32;char&gt;
746 &#32;&#32;&#32;&#32;{
747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_structglm_1_1detail_1_1make__unsigned_3_01unsigned_01char_01_4_1a783a55dc0559d4b972a0d85cf08256f2">type</link>;
748 &#32;&#32;&#32;&#32;};
749 
750 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
751 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structglm_1_1detail_1_1make__unsigned">make_unsigned</link>&lt;unsigned&#32;short&gt;
752 &#32;&#32;&#32;&#32;{
753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&#32;<link linkend="_structglm_1_1detail_1_1make__unsigned_3_01unsigned_01short_01_4_1a42829000435f69c3a00675b6914f0d33">type</link>;
754 &#32;&#32;&#32;&#32;};
755 
756 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
757 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structglm_1_1detail_1_1make__unsigned">make_unsigned</link>&lt;unsigned&#32;int&gt;
758 &#32;&#32;&#32;&#32;{
759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_structglm_1_1detail_1_1make__unsigned_3_01unsigned_01int_01_4_1aea3e796456b317dd2247889d3fbb9d68">type</link>;
760 &#32;&#32;&#32;&#32;};
761 
762 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
763 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structglm_1_1detail_1_1make__unsigned">make_unsigned</link>&lt;unsigned&#32;long&gt;
764 &#32;&#32;&#32;&#32;{
765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_structglm_1_1detail_1_1make__unsigned_3_01unsigned_01long_01_4_1a8894ccd179135bda131b42cf10e58362">type</link>;
766 &#32;&#32;&#32;&#32;};
767 
768 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
769 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structglm_1_1detail_1_1make__unsigned">make_unsigned</link>&lt;<link linkend="_namespaceglm_1_1detail_1ae110ab7b33b51165e9b99e03abe3947e">uint64</link>&gt;
770 &#32;&#32;&#32;&#32;{
771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_namespaceglm_1_1detail_1ae110ab7b33b51165e9b99e03abe3947e">uint64</link>&#32;<link linkend="_structglm_1_1detail_1_1make__unsigned_3_01uint64_01_4_1a0ceebb2bde34bd4325b8e35697c0da6f">type</link>;
772 &#32;&#32;&#32;&#32;};
773 }<emphasis role="comment">//namespace&#32;detail</emphasis>
774 }<emphasis role="comment">//namespace&#32;glm</emphasis>
775 <emphasis role="preprocessor">#endif</emphasis>
776 
778 <emphasis role="comment">//&#32;Only&#32;use&#32;x,&#32;y,&#32;z,&#32;w&#32;as&#32;vector&#32;type&#32;components</emphasis>
779 
780 <emphasis role="preprocessor">#ifdef&#32;GLM_FORCE_XYZW_ONLY</emphasis>
781 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_XYZW_ONLY&#32;GLM_ENABLE</emphasis>
782 <emphasis role="preprocessor">#else</emphasis>
783 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_XYZW_ONLY&#32;GLM_DISABLE</emphasis>
784 <emphasis role="preprocessor">#endif</emphasis>
785 
787 <emphasis role="comment">//&#32;Configure&#32;the&#32;use&#32;of&#32;defaulted&#32;initialized&#32;types</emphasis>
788 
789 <emphasis role="preprocessor">#define&#32;GLM_CTOR_INIT_DISABLE&#32;&#32;&#32;&#32;&#32;&#32;&#32;0</emphasis>
790 <emphasis role="preprocessor">#define&#32;GLM_CTOR_INITIALIZER_LIST&#32;&#32;&#32;1</emphasis>
791 <emphasis role="preprocessor">#define&#32;GLM_CTOR_INITIALISATION&#32;&#32;&#32;&#32;&#32;2</emphasis>
792 
793 <emphasis role="preprocessor">#if&#32;defined(GLM_FORCE_CTOR_INIT)&#32;&amp;&amp;&#32;GLM_HAS_INITIALIZER_LISTS</emphasis>
794 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_CTOR_INIT&#32;GLM_CTOR_INITIALIZER_LIST</emphasis>
795 <emphasis role="preprocessor">#elif&#32;defined(GLM_FORCE_CTOR_INIT)&#32;&amp;&amp;&#32;!GLM_HAS_INITIALIZER_LISTS</emphasis>
796 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_CTOR_INIT&#32;GLM_CTOR_INITIALISATION</emphasis>
797 <emphasis role="preprocessor">#else</emphasis>
798 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_CTOR_INIT&#32;GLM_CTOR_INIT_DISABLE</emphasis>
799 <emphasis role="preprocessor">#endif</emphasis>
800 
802 <emphasis role="comment">//&#32;Use&#32;SIMD&#32;instruction&#32;sets</emphasis>
803 
804 <emphasis role="preprocessor">#if&#32;GLM_HAS_ALIGNOF&#32;&amp;&amp;&#32;(GLM_LANG&#32;&amp;&#32;GLM_LANG_CXXMS_FLAG)&#32;&amp;&amp;&#32;(GLM_ARCH&#32;&amp;&#32;GLM_ARCH_SIMD_BIT)</emphasis>
805 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_SIMD&#32;GLM_ENABLE</emphasis>
806 <emphasis role="preprocessor">#else</emphasis>
807 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_SIMD&#32;GLM_DISABLE</emphasis>
808 <emphasis role="preprocessor">#endif</emphasis>
809 
811 <emphasis role="comment">//&#32;Configure&#32;the&#32;use&#32;of&#32;defaulted&#32;function</emphasis>
812 
813 <emphasis role="preprocessor">#if&#32;GLM_HAS_DEFAULTED_FUNCTIONS&#32;&amp;&amp;&#32;GLM_CONFIG_CTOR_INIT&#32;==&#32;GLM_CTOR_INIT_DISABLE</emphasis>
814 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_DEFAULTED_FUNCTIONS&#32;GLM_ENABLE</emphasis>
815 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_DEFAULT&#32;=&#32;default</emphasis>
816 <emphasis role="preprocessor">#else</emphasis>
817 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_DEFAULTED_FUNCTIONS&#32;GLM_DISABLE</emphasis>
818 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_DEFAULT</emphasis>
819 <emphasis role="preprocessor">#endif</emphasis>
820 
822 <emphasis role="comment">//&#32;Configure&#32;the&#32;use&#32;of&#32;aligned&#32;gentypes</emphasis>
823 
824 <emphasis role="preprocessor">#ifdef&#32;GLM_FORCE_ALIGNED&#32;</emphasis><emphasis role="comment">//&#32;Legacy&#32;define</emphasis>
825 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_FORCE_DEFAULT_ALIGNED_GENTYPES</emphasis>
826 <emphasis role="preprocessor">#endif</emphasis>
827 
828 <emphasis role="preprocessor">#ifdef&#32;GLM_FORCE_DEFAULT_ALIGNED_GENTYPES</emphasis>
829 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_FORCE_ALIGNED_GENTYPES</emphasis>
830 <emphasis role="preprocessor">#endif</emphasis>
831 
832 <emphasis role="preprocessor">#if&#32;GLM_HAS_ALIGNOF&#32;&amp;&amp;&#32;(GLM_LANG&#32;&amp;&#32;GLM_LANG_CXXMS_FLAG)&#32;&amp;&amp;&#32;(defined(GLM_FORCE_ALIGNED_GENTYPES)&#32;||&#32;(GLM_CONFIG_SIMD&#32;==&#32;GLM_ENABLE))</emphasis>
833 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_ALIGNED_GENTYPES&#32;GLM_ENABLE</emphasis>
834 <emphasis role="preprocessor">#else</emphasis>
835 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_ALIGNED_GENTYPES&#32;GLM_DISABLE</emphasis>
836 <emphasis role="preprocessor">#endif</emphasis>
837 
839 <emphasis role="comment">//&#32;Configure&#32;the&#32;use&#32;of&#32;anonymous&#32;structure&#32;as&#32;implementation&#32;detail</emphasis>
840 
841 <emphasis role="preprocessor">#if&#32;((GLM_CONFIG_SIMD&#32;==&#32;GLM_ENABLE)&#32;||&#32;(GLM_CONFIG_SWIZZLE&#32;==&#32;GLM_SWIZZLE_OPERATOR)&#32;||&#32;(GLM_CONFIG_ALIGNED_GENTYPES&#32;==&#32;GLM_ENABLE))</emphasis>
842 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_ANONYMOUS_STRUCT&#32;GLM_ENABLE</emphasis>
843 <emphasis role="preprocessor">#else</emphasis>
844 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_ANONYMOUS_STRUCT&#32;GLM_DISABLE</emphasis>
845 <emphasis role="preprocessor">#endif</emphasis>
846 
848 <emphasis role="comment">//&#32;Silent&#32;warnings</emphasis>
849 
850 <emphasis role="preprocessor">#ifdef&#32;GLM_FORCE_SILENT_WARNINGS</emphasis>
851 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_SILENT_WARNINGS&#32;GLM_ENABLE</emphasis>
852 <emphasis role="preprocessor">#else</emphasis>
853 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_SILENT_WARNINGS&#32;GLM_DISABLE</emphasis>
854 <emphasis role="preprocessor">#endif</emphasis>
855 
857 <emphasis role="comment">//&#32;Precision</emphasis>
858 
859 <emphasis role="preprocessor">#define&#32;GLM_HIGHP&#32;&#32;&#32;&#32;&#32;&#32;&#32;1</emphasis>
860 <emphasis role="preprocessor">#define&#32;GLM_MEDIUMP&#32;&#32;&#32;&#32;&#32;2</emphasis>
861 <emphasis role="preprocessor">#define&#32;GLM_LOWP&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;3</emphasis>
862 
863 <emphasis role="preprocessor">#if&#32;defined(GLM_FORCE_PRECISION_HIGHP_BOOL)&#32;||&#32;defined(GLM_PRECISION_HIGHP_BOOL)</emphasis>
864 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_PRECISION_BOOL&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GLM_HIGHP</emphasis>
865 <emphasis role="preprocessor">#elif&#32;defined(GLM_FORCE_PRECISION_MEDIUMP_BOOL)&#32;||&#32;defined(GLM_PRECISION_MEDIUMP_BOOL)</emphasis>
866 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_PRECISION_BOOL&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GLM_MEDIUMP</emphasis>
867 <emphasis role="preprocessor">#elif&#32;defined(GLM_FORCE_PRECISION_LOWP_BOOL)&#32;||&#32;defined(GLM_PRECISION_LOWP_BOOL)</emphasis>
868 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_PRECISION_BOOL&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GLM_LOWP</emphasis>
869 <emphasis role="preprocessor">#else</emphasis>
870 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_PRECISION_BOOL&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GLM_HIGHP</emphasis>
871 <emphasis role="preprocessor">#endif</emphasis>
872 
873 <emphasis role="preprocessor">#if&#32;defined(GLM_FORCE_PRECISION_HIGHP_INT)&#32;||&#32;defined(GLM_PRECISION_HIGHP_INT)</emphasis>
874 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_PRECISION_INT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GLM_HIGHP</emphasis>
875 <emphasis role="preprocessor">#elif&#32;defined(GLM_FORCE_PRECISION_MEDIUMP_INT)&#32;||&#32;defined(GLM_PRECISION_MEDIUMP_INT)</emphasis>
876 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_PRECISION_INT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GLM_MEDIUMP</emphasis>
877 <emphasis role="preprocessor">#elif&#32;defined(GLM_FORCE_PRECISION_LOWP_INT)&#32;||&#32;defined(GLM_PRECISION_LOWP_INT)</emphasis>
878 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_PRECISION_INT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GLM_LOWP</emphasis>
879 <emphasis role="preprocessor">#else</emphasis>
880 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_PRECISION_INT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GLM_HIGHP</emphasis>
881 <emphasis role="preprocessor">#endif</emphasis>
882 
883 <emphasis role="preprocessor">#if&#32;defined(GLM_FORCE_PRECISION_HIGHP_UINT)&#32;||&#32;defined(GLM_PRECISION_HIGHP_UINT)</emphasis>
884 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_PRECISION_UINT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GLM_HIGHP</emphasis>
885 <emphasis role="preprocessor">#elif&#32;defined(GLM_FORCE_PRECISION_MEDIUMP_UINT)&#32;||&#32;defined(GLM_PRECISION_MEDIUMP_UINT)</emphasis>
886 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_PRECISION_UINT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GLM_MEDIUMP</emphasis>
887 <emphasis role="preprocessor">#elif&#32;defined(GLM_FORCE_PRECISION_LOWP_UINT)&#32;||&#32;defined(GLM_PRECISION_LOWP_UINT)</emphasis>
888 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_PRECISION_UINT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GLM_LOWP</emphasis>
889 <emphasis role="preprocessor">#else</emphasis>
890 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_PRECISION_UINT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GLM_HIGHP</emphasis>
891 <emphasis role="preprocessor">#endif</emphasis>
892 
893 <emphasis role="preprocessor">#if&#32;defined(GLM_FORCE_PRECISION_HIGHP_FLOAT)&#32;||&#32;defined(GLM_PRECISION_HIGHP_FLOAT)</emphasis>
894 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_PRECISION_FLOAT&#32;&#32;&#32;&#32;&#32;&#32;&#32;GLM_HIGHP</emphasis>
895 <emphasis role="preprocessor">#elif&#32;defined(GLM_FORCE_PRECISION_MEDIUMP_FLOAT)&#32;||&#32;defined(GLM_PRECISION_MEDIUMP_FLOAT)</emphasis>
896 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_PRECISION_FLOAT&#32;&#32;&#32;&#32;&#32;&#32;&#32;GLM_MEDIUMP</emphasis>
897 <emphasis role="preprocessor">#elif&#32;defined(GLM_FORCE_PRECISION_LOWP_FLOAT)&#32;||&#32;defined(GLM_PRECISION_LOWP_FLOAT)</emphasis>
898 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_PRECISION_FLOAT&#32;&#32;&#32;&#32;&#32;&#32;&#32;GLM_LOWP</emphasis>
899 <emphasis role="preprocessor">#else</emphasis>
900 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_PRECISION_FLOAT&#32;&#32;&#32;&#32;&#32;&#32;&#32;GLM_HIGHP</emphasis>
901 <emphasis role="preprocessor">#endif</emphasis>
902 
903 <emphasis role="preprocessor">#if&#32;defined(GLM_FORCE_PRECISION_HIGHP_DOUBLE)&#32;||&#32;defined(GLM_PRECISION_HIGHP_DOUBLE)</emphasis>
904 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_PRECISION_DOUBLE&#32;&#32;&#32;&#32;&#32;&#32;GLM_HIGHP</emphasis>
905 <emphasis role="preprocessor">#elif&#32;defined(GLM_FORCE_PRECISION_MEDIUMP_DOUBLE)&#32;||&#32;defined(GLM_PRECISION_MEDIUMP_DOUBLE)</emphasis>
906 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_PRECISION_DOUBLE&#32;&#32;&#32;&#32;&#32;&#32;GLM_MEDIUMP</emphasis>
907 <emphasis role="preprocessor">#elif&#32;defined(GLM_FORCE_PRECISION_LOWP_DOUBLE)&#32;||&#32;defined(GLM_PRECISION_LOWP_DOUBLE)</emphasis>
908 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_PRECISION_DOUBLE&#32;&#32;&#32;&#32;&#32;&#32;GLM_LOWP</emphasis>
909 <emphasis role="preprocessor">#else</emphasis>
910 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_CONFIG_PRECISION_DOUBLE&#32;&#32;&#32;&#32;&#32;&#32;GLM_HIGHP</emphasis>
911 <emphasis role="preprocessor">#endif</emphasis>
912 
914 <emphasis role="comment">//&#32;Check&#32;inclusions&#32;of&#32;different&#32;versions&#32;of&#32;GLM</emphasis>
915 
916 <emphasis role="preprocessor">#elif&#32;((GLM_SETUP_INCLUDED&#32;!=&#32;GLM_VERSION)&#32;&amp;&amp;&#32;!defined(GLM_FORCE_IGNORE_VERSION))</emphasis>
917 <emphasis role="preprocessor">#&#32;&#32;&#32;error&#32;&quot;GLM&#32;error:&#32;A&#32;different&#32;version&#32;of&#32;GLM&#32;is&#32;already&#32;included.&#32;Define&#32;GLM_FORCE_IGNORE_VERSION&#32;before&#32;including&#32;GLM&#32;headers&#32;to&#32;ignore&#32;this&#32;error.&quot;</emphasis>
918 <emphasis role="preprocessor">#elif&#32;GLM_SETUP_INCLUDED&#32;==&#32;GLM_VERSION</emphasis>
919 
921 <emphasis role="comment">//&#32;Messages</emphasis>
922 
923 <emphasis role="preprocessor">#if&#32;GLM_MESSAGES&#32;==&#32;GLM_ENABLE&#32;&amp;&amp;&#32;!defined(GLM_MESSAGE_DISPLAYED)</emphasis>
924 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;GLM_MESSAGE_DISPLAYED</emphasis>
925 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_STR_HELPER(x)&#32;#x</emphasis>
926 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;GLM_STR(x)&#32;GLM_STR_HELPER(x)</emphasis>
927 
928 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Report&#32;GLM&#32;version</emphasis>
929 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message&#32;(GLM_STR(GLM_VERSION_MESSAGE))</emphasis>
930 
931 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Report&#32;C++&#32;language</emphasis>
932 <emphasis role="preprocessor">#&#32;&#32;&#32;if&#32;(GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX2A_FLAG)&#32;&amp;&amp;&#32;(GLM_LANG&#32;&amp;&#32;GLM_LANG_EXT)</emphasis>
933 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;C++&#32;2A&#32;with&#32;extensions&quot;)</emphasis>
934 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;(GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX2A_FLAG)</emphasis>
935 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;C++&#32;2A&quot;)</emphasis>
936 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;(GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX17_FLAG)&#32;&amp;&amp;&#32;(GLM_LANG&#32;&amp;&#32;GLM_LANG_EXT)</emphasis>
937 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;C++&#32;17&#32;with&#32;extensions&quot;)</emphasis>
938 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;(GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX17_FLAG)</emphasis>
939 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;C++&#32;17&quot;)</emphasis>
940 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;(GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX14_FLAG)&#32;&amp;&amp;&#32;(GLM_LANG&#32;&amp;&#32;GLM_LANG_EXT)</emphasis>
941 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;C++&#32;14&#32;with&#32;extensions&quot;)</emphasis>
942 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;(GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX14_FLAG)</emphasis>
943 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;C++&#32;14&quot;)</emphasis>
944 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;(GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX11_FLAG)&#32;&amp;&amp;&#32;(GLM_LANG&#32;&amp;&#32;GLM_LANG_EXT)</emphasis>
945 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;C++&#32;11&#32;with&#32;extensions&quot;)</emphasis>
946 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;(GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX11_FLAG)</emphasis>
947 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;C++&#32;11&quot;)</emphasis>
948 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;(GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX0X_FLAG)&#32;&amp;&amp;&#32;(GLM_LANG&#32;&amp;&#32;GLM_LANG_EXT)</emphasis>
949 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;C++&#32;0x&#32;with&#32;extensions&quot;)</emphasis>
950 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;(GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX0X_FLAG)</emphasis>
951 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;C++&#32;0x&quot;)</emphasis>
952 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;(GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX03_FLAG)&#32;&amp;&amp;&#32;(GLM_LANG&#32;&amp;&#32;GLM_LANG_EXT)</emphasis>
953 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;C++&#32;03&#32;with&#32;extensions&quot;)</emphasis>
954 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;(GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX03_FLAG)</emphasis>
955 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;C++&#32;03&quot;)</emphasis>
956 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;(GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX98_FLAG)&#32;&amp;&amp;&#32;(GLM_LANG&#32;&amp;&#32;GLM_LANG_EXT)</emphasis>
957 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;C++&#32;98&#32;with&#32;extensions&quot;)</emphasis>
958 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;(GLM_LANG&#32;&amp;&#32;GLM_LANG_CXX98_FLAG)</emphasis>
959 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;C++&#32;98&quot;)</emphasis>
960 <emphasis role="preprocessor">#&#32;&#32;&#32;else</emphasis>
961 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;C++&#32;language&#32;undetected&quot;)</emphasis>
962 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis><emphasis role="comment">//GLM_LANG</emphasis>
963 
964 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Report&#32;compiler&#32;detection</emphasis>
965 <emphasis role="preprocessor">#&#32;&#32;&#32;if&#32;GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_CUDA</emphasis>
966 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;CUDA&#32;compiler&#32;detected&quot;)</emphasis>
967 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_VC</emphasis>
968 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;Visual&#32;C++&#32;compiler&#32;detected&quot;)</emphasis>
969 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_CLANG</emphasis>
970 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;Clang&#32;compiler&#32;detected&quot;)</emphasis>
971 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_INTEL</emphasis>
972 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;Intel&#32;Compiler&#32;detected&quot;)</emphasis>
973 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_GCC</emphasis>
974 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;GCC&#32;compiler&#32;detected&quot;)</emphasis>
975 <emphasis role="preprocessor">#&#32;&#32;&#32;else</emphasis>
976 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;Compiler&#32;not&#32;detected&quot;)</emphasis>
977 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis>
978 
979 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Report&#32;build&#32;target</emphasis>
980 <emphasis role="preprocessor">#&#32;&#32;&#32;if&#32;(GLM_ARCH&#32;&amp;&#32;GLM_ARCH_AVX2_BIT)&#32;&amp;&amp;&#32;(GLM_MODEL&#32;==&#32;GLM_MODEL_64)</emphasis>
981 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;x86&#32;64&#32;bits&#32;with&#32;AVX2&#32;instruction&#32;set&#32;build&#32;target&quot;)</emphasis>
982 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;(GLM_ARCH&#32;&amp;&#32;GLM_ARCH_AVX2_BIT)&#32;&amp;&amp;&#32;(GLM_MODEL&#32;==&#32;GLM_MODEL_32)</emphasis>
983 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;x86&#32;32&#32;bits&#32;with&#32;AVX2&#32;instruction&#32;set&#32;build&#32;target&quot;)</emphasis>
984 
985 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;(GLM_ARCH&#32;&amp;&#32;GLM_ARCH_AVX_BIT)&#32;&amp;&amp;&#32;(GLM_MODEL&#32;==&#32;GLM_MODEL_64)</emphasis>
986 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;x86&#32;64&#32;bits&#32;with&#32;AVX&#32;instruction&#32;set&#32;build&#32;target&quot;)</emphasis>
987 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;(GLM_ARCH&#32;&amp;&#32;GLM_ARCH_AVX_BIT)&#32;&amp;&amp;&#32;(GLM_MODEL&#32;==&#32;GLM_MODEL_32)</emphasis>
988 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;x86&#32;32&#32;bits&#32;with&#32;AVX&#32;instruction&#32;set&#32;build&#32;target&quot;)</emphasis>
989 
990 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;(GLM_ARCH&#32;&amp;&#32;GLM_ARCH_SSE42_BIT)&#32;&amp;&amp;&#32;(GLM_MODEL&#32;==&#32;GLM_MODEL_64)</emphasis>
991 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;x86&#32;64&#32;bits&#32;with&#32;SSE4.2&#32;instruction&#32;set&#32;build&#32;target&quot;)</emphasis>
992 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;(GLM_ARCH&#32;&amp;&#32;GLM_ARCH_SSE42_BIT)&#32;&amp;&amp;&#32;(GLM_MODEL&#32;==&#32;GLM_MODEL_32)</emphasis>
993 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;x86&#32;32&#32;bits&#32;with&#32;SSE4.2&#32;instruction&#32;set&#32;build&#32;target&quot;)</emphasis>
994 
995 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;(GLM_ARCH&#32;&amp;&#32;GLM_ARCH_SSE41_BIT)&#32;&amp;&amp;&#32;(GLM_MODEL&#32;==&#32;GLM_MODEL_64)</emphasis>
996 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;x86&#32;64&#32;bits&#32;with&#32;SSE4.1&#32;instruction&#32;set&#32;build&#32;target&quot;)</emphasis>
997 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;(GLM_ARCH&#32;&amp;&#32;GLM_ARCH_SSE41_BIT)&#32;&amp;&amp;&#32;(GLM_MODEL&#32;==&#32;GLM_MODEL_32)</emphasis>
998 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;x86&#32;32&#32;bits&#32;with&#32;SSE4.1&#32;instruction&#32;set&#32;build&#32;target&quot;)</emphasis>
999 
1000 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;(GLM_ARCH&#32;&amp;&#32;GLM_ARCH_SSSE3_BIT)&#32;&amp;&amp;&#32;(GLM_MODEL&#32;==&#32;GLM_MODEL_64)</emphasis>
1001 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;x86&#32;64&#32;bits&#32;with&#32;SSSE3&#32;instruction&#32;set&#32;build&#32;target&quot;)</emphasis>
1002 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;(GLM_ARCH&#32;&amp;&#32;GLM_ARCH_SSSE3_BIT)&#32;&amp;&amp;&#32;(GLM_MODEL&#32;==&#32;GLM_MODEL_32)</emphasis>
1003 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;x86&#32;32&#32;bits&#32;with&#32;SSSE3&#32;instruction&#32;set&#32;build&#32;target&quot;)</emphasis>
1004 
1005 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;(GLM_ARCH&#32;&amp;&#32;GLM_ARCH_SSE3_BIT)&#32;&amp;&amp;&#32;(GLM_MODEL&#32;==&#32;GLM_MODEL_64)</emphasis>
1006 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;x86&#32;64&#32;bits&#32;with&#32;SSE3&#32;instruction&#32;set&#32;build&#32;target&quot;)</emphasis>
1007 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;(GLM_ARCH&#32;&amp;&#32;GLM_ARCH_SSE3_BIT)&#32;&amp;&amp;&#32;(GLM_MODEL&#32;==&#32;GLM_MODEL_32)</emphasis>
1008 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;x86&#32;32&#32;bits&#32;with&#32;SSE3&#32;instruction&#32;set&#32;build&#32;target&quot;)</emphasis>
1009 
1010 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;(GLM_ARCH&#32;&amp;&#32;GLM_ARCH_SSE2_BIT)&#32;&amp;&amp;&#32;(GLM_MODEL&#32;==&#32;GLM_MODEL_64)</emphasis>
1011 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;x86&#32;64&#32;bits&#32;with&#32;SSE2&#32;instruction&#32;set&#32;build&#32;target&quot;)</emphasis>
1012 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;(GLM_ARCH&#32;&amp;&#32;GLM_ARCH_SSE2_BIT)&#32;&amp;&amp;&#32;(GLM_MODEL&#32;==&#32;GLM_MODEL_32)</emphasis>
1013 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;x86&#32;32&#32;bits&#32;with&#32;SSE2&#32;instruction&#32;set&#32;build&#32;target&quot;)</emphasis>
1014 
1015 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;(GLM_ARCH&#32;&amp;&#32;GLM_ARCH_X86_BIT)&#32;&amp;&amp;&#32;(GLM_MODEL&#32;==&#32;GLM_MODEL_64)</emphasis>
1016 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;x86&#32;64&#32;bits&#32;build&#32;target&quot;)</emphasis>
1017 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;(GLM_ARCH&#32;&amp;&#32;GLM_ARCH_X86_BIT)&#32;&amp;&amp;&#32;(GLM_MODEL&#32;==&#32;GLM_MODEL_32)</emphasis>
1018 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;x86&#32;32&#32;bits&#32;build&#32;target&quot;)</emphasis>
1019 
1020 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;(GLM_ARCH&#32;&amp;&#32;GLM_ARCH_NEON_BIT)&#32;&amp;&amp;&#32;(GLM_MODEL&#32;==&#32;GLM_MODEL_64)</emphasis>
1021 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;ARM&#32;64&#32;bits&#32;with&#32;Neon&#32;instruction&#32;set&#32;build&#32;target&quot;)</emphasis>
1022 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;(GLM_ARCH&#32;&amp;&#32;GLM_ARCH_NEON_BIT)&#32;&amp;&amp;&#32;(GLM_MODEL&#32;==&#32;GLM_MODEL_32)</emphasis>
1023 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;ARM&#32;32&#32;bits&#32;with&#32;Neon&#32;instruction&#32;set&#32;build&#32;target&quot;)</emphasis>
1024 
1025 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;(GLM_ARCH&#32;&amp;&#32;GLM_ARCH_ARM_BIT)&#32;&amp;&amp;&#32;(GLM_MODEL&#32;==&#32;GLM_MODEL_64)</emphasis>
1026 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;ARM&#32;64&#32;bits&#32;build&#32;target&quot;)</emphasis>
1027 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;(GLM_ARCH&#32;&amp;&#32;GLM_ARCH_ARM_BIT)&#32;&amp;&amp;&#32;(GLM_MODEL&#32;==&#32;GLM_MODEL_32)</emphasis>
1028 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;ARM&#32;32&#32;bits&#32;build&#32;target&quot;)</emphasis>
1029 
1030 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;(GLM_ARCH&#32;&amp;&#32;GLM_ARCH_MIPS_BIT)&#32;&amp;&amp;&#32;(GLM_MODEL&#32;==&#32;GLM_MODEL_64)</emphasis>
1031 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;MIPS&#32;64&#32;bits&#32;build&#32;target&quot;)</emphasis>
1032 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;(GLM_ARCH&#32;&amp;&#32;GLM_ARCH_MIPS_BIT)&#32;&amp;&amp;&#32;(GLM_MODEL&#32;==&#32;GLM_MODEL_32)</emphasis>
1033 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;MIPS&#32;32&#32;bits&#32;build&#32;target&quot;)</emphasis>
1034 
1035 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;(GLM_ARCH&#32;&amp;&#32;GLM_ARCH_PPC_BIT)&#32;&amp;&amp;&#32;(GLM_MODEL&#32;==&#32;GLM_MODEL_64)</emphasis>
1036 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;PowerPC&#32;64&#32;bits&#32;build&#32;target&quot;)</emphasis>
1037 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;(GLM_ARCH&#32;&amp;&#32;GLM_ARCH_PPC_BIT)&#32;&amp;&amp;&#32;(GLM_MODEL&#32;==&#32;GLM_MODEL_32)</emphasis>
1038 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;PowerPC&#32;32&#32;bits&#32;build&#32;target&quot;)</emphasis>
1039 <emphasis role="preprocessor">#&#32;&#32;&#32;else</emphasis>
1040 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;Unknown&#32;build&#32;target&quot;)</emphasis>
1041 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis><emphasis role="comment">//GLM_ARCH</emphasis>
1042 
1043 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Report&#32;platform&#32;name</emphasis>
1044 <emphasis role="preprocessor">#&#32;&#32;&#32;if(GLM_PLATFORM&#32;&amp;&#32;GLM_PLATFORM_QNXNTO)</emphasis>
1045 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;QNX&#32;platform&#32;detected&quot;)</emphasis>
1046 <emphasis role="comment">//#&#32;elif(GLM_PLATFORM&#32;&amp;&#32;GLM_PLATFORM_IOS)</emphasis>
1047 <emphasis role="comment">//#&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;iOS&#32;platform&#32;detected&quot;)</emphasis>
1048 <emphasis role="preprocessor">#&#32;&#32;&#32;elif(GLM_PLATFORM&#32;&amp;&#32;GLM_PLATFORM_APPLE)</emphasis>
1049 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;Apple&#32;platform&#32;detected&quot;)</emphasis>
1050 <emphasis role="preprocessor">#&#32;&#32;&#32;elif(GLM_PLATFORM&#32;&amp;&#32;GLM_PLATFORM_WINCE)</emphasis>
1051 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;WinCE&#32;platform&#32;detected&quot;)</emphasis>
1052 <emphasis role="preprocessor">#&#32;&#32;&#32;elif(GLM_PLATFORM&#32;&amp;&#32;GLM_PLATFORM_WINDOWS)</emphasis>
1053 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;Windows&#32;platform&#32;detected&quot;)</emphasis>
1054 <emphasis role="preprocessor">#&#32;&#32;&#32;elif(GLM_PLATFORM&#32;&amp;&#32;GLM_PLATFORM_CHROME_NACL)</emphasis>
1055 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;Native&#32;Client&#32;detected&quot;)</emphasis>
1056 <emphasis role="preprocessor">#&#32;&#32;&#32;elif(GLM_PLATFORM&#32;&amp;&#32;GLM_PLATFORM_ANDROID)</emphasis>
1057 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;Android&#32;platform&#32;detected&quot;)</emphasis>
1058 <emphasis role="preprocessor">#&#32;&#32;&#32;elif(GLM_PLATFORM&#32;&amp;&#32;GLM_PLATFORM_LINUX)</emphasis>
1059 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;Linux&#32;platform&#32;detected&quot;)</emphasis>
1060 <emphasis role="preprocessor">#&#32;&#32;&#32;elif(GLM_PLATFORM&#32;&amp;&#32;GLM_PLATFORM_UNIX)</emphasis>
1061 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;UNIX&#32;platform&#32;detected&quot;)</emphasis>
1062 <emphasis role="preprocessor">#&#32;&#32;&#32;elif(GLM_PLATFORM&#32;&amp;&#32;GLM_PLATFORM_UNKNOWN)</emphasis>
1063 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;platform&#32;unknown&quot;)</emphasis>
1064 <emphasis role="preprocessor">#&#32;&#32;&#32;else</emphasis>
1065 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;platform&#32;not&#32;detected&quot;)</emphasis>
1066 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis>
1067 
1068 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Report&#32;whether&#32;only&#32;xyzw&#32;component&#32;are&#32;used</emphasis>
1069 <emphasis role="preprocessor">#&#32;&#32;&#32;if&#32;defined&#32;GLM_FORCE_XYZW_ONLY</emphasis>
1070 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;GLM_FORCE_XYZW_ONLY&#32;is&#32;defined.&#32;Only&#32;x,&#32;y,&#32;z&#32;and&#32;w&#32;component&#32;are&#32;available&#32;in&#32;vector&#32;type.&#32;This&#32;define&#32;disables&#32;swizzle&#32;operators&#32;and&#32;SIMD&#32;instruction&#32;sets.&quot;)</emphasis>
1071 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis>
1072 
1073 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Report&#32;swizzle&#32;operator&#32;support</emphasis>
1074 <emphasis role="preprocessor">#&#32;&#32;&#32;if&#32;GLM_CONFIG_SWIZZLE&#32;==&#32;GLM_SWIZZLE_OPERATOR</emphasis>
1075 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;GLM_FORCE_SWIZZLE&#32;is&#32;defined,&#32;swizzling&#32;operators&#32;enabled.&quot;)</emphasis>
1076 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;GLM_CONFIG_SWIZZLE&#32;==&#32;GLM_SWIZZLE_FUNCTION</emphasis>
1077 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;GLM_FORCE_SWIZZLE&#32;is&#32;defined,&#32;swizzling&#32;functions&#32;enabled.&#32;Enable&#32;compiler&#32;C++&#32;language&#32;extensions&#32;to&#32;enable&#32;swizzle&#32;operators.&quot;)</emphasis>
1078 <emphasis role="preprocessor">#&#32;&#32;&#32;else</emphasis>
1079 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;GLM_FORCE_SWIZZLE&#32;is&#32;undefined.&#32;swizzling&#32;functions&#32;or&#32;operators&#32;are&#32;disabled.&quot;)</emphasis>
1080 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis>
1081 
1082 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Report&#32;.length()&#32;type</emphasis>
1083 <emphasis role="preprocessor">#&#32;&#32;&#32;if&#32;GLM_CONFIG_LENGTH_TYPE&#32;==&#32;GLM_LENGTH_SIZE_T</emphasis>
1084 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;GLM_FORCE_SIZE_T_LENGTH&#32;is&#32;defined.&#32;.length()&#32;returns&#32;a&#32;glm::length_t,&#32;a&#32;typedef&#32;of&#32;std::size_t.&quot;)</emphasis>
1085 <emphasis role="preprocessor">#&#32;&#32;&#32;else</emphasis>
1086 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;GLM_FORCE_SIZE_T_LENGTH&#32;is&#32;undefined.&#32;.length()&#32;returns&#32;a&#32;glm::length_t,&#32;a&#32;typedef&#32;of&#32;int&#32;following&#32;GLSL.&quot;)</emphasis>
1087 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis>
1088 
1089 <emphasis role="preprocessor">#&#32;&#32;&#32;if&#32;GLM_CONFIG_UNRESTRICTED_GENTYPE&#32;==&#32;GLM_ENABLE</emphasis>
1090 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;GLM_FORCE_UNRESTRICTED_GENTYPE&#32;is&#32;defined.&#32;Removes&#32;GLSL&#32;restrictions&#32;on&#32;valid&#32;function&#32;genTypes.&quot;)</emphasis>
1091 <emphasis role="preprocessor">#&#32;&#32;&#32;else</emphasis>
1092 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;GLM_FORCE_UNRESTRICTED_GENTYPE&#32;is&#32;undefined.&#32;Follows&#32;strictly&#32;GLSL&#32;on&#32;valid&#32;function&#32;genTypes.&quot;)</emphasis>
1093 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis>
1094 
1095 <emphasis role="preprocessor">#&#32;&#32;&#32;if&#32;GLM_SILENT_WARNINGS&#32;==&#32;GLM_ENABLE</emphasis>
1096 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;GLM_FORCE_SILENT_WARNINGS&#32;is&#32;defined.&#32;Ignores&#32;C++&#32;warnings&#32;from&#32;using&#32;C++&#32;language&#32;extensions.&quot;)</emphasis>
1097 <emphasis role="preprocessor">#&#32;&#32;&#32;else</emphasis>
1098 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;GLM_FORCE_SILENT_WARNINGS&#32;is&#32;undefined.&#32;Shows&#32;C++&#32;warnings&#32;from&#32;using&#32;C++&#32;language&#32;extensions.&quot;)</emphasis>
1099 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis>
1100 
1101 <emphasis role="preprocessor">#&#32;&#32;&#32;ifdef&#32;GLM_FORCE_SINGLE_ONLY</emphasis>
1102 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;GLM_FORCE_SINGLE_ONLY&#32;is&#32;defined.&#32;Using&#32;only&#32;single&#32;precision&#32;floating-point&#32;types.&quot;)</emphasis>
1103 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis>
1104 
1105 <emphasis role="preprocessor">#&#32;&#32;&#32;if&#32;defined(GLM_FORCE_ALIGNED_GENTYPES)&#32;&amp;&amp;&#32;(GLM_CONFIG_ALIGNED_GENTYPES&#32;==&#32;GLM_ENABLE)</emphasis>
1106 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;undef&#32;GLM_FORCE_ALIGNED_GENTYPES</emphasis>
1107 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;GLM_FORCE_ALIGNED_GENTYPES&#32;is&#32;defined,&#32;allowing&#32;aligned&#32;types.&#32;This&#32;prevents&#32;the&#32;use&#32;of&#32;C++&#32;constexpr.&quot;)</emphasis>
1108 <emphasis role="preprocessor">#&#32;&#32;&#32;elif&#32;defined(GLM_FORCE_ALIGNED_GENTYPES)&#32;&amp;&amp;&#32;(GLM_CONFIG_ALIGNED_GENTYPES&#32;==&#32;GLM_DISABLE)</emphasis>
1109 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;undef&#32;GLM_FORCE_ALIGNED_GENTYPES</emphasis>
1110 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;GLM_FORCE_ALIGNED_GENTYPES&#32;is&#32;defined&#32;but&#32;is&#32;disabled.&#32;It&#32;requires&#32;C++11&#32;and&#32;language&#32;extensions.&quot;)</emphasis>
1111 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis>
1112 
1113 <emphasis role="preprocessor">#&#32;&#32;&#32;if&#32;defined(GLM_FORCE_DEFAULT_ALIGNED_GENTYPES)</emphasis>
1114 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;GLM_CONFIG_ALIGNED_GENTYPES&#32;==&#32;GLM_DISABLE</emphasis>
1115 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;undef&#32;GLM_FORCE_DEFAULT_ALIGNED_GENTYPES</emphasis>
1116 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;GLM_FORCE_DEFAULT_ALIGNED_GENTYPES&#32;is&#32;defined&#32;but&#32;is&#32;disabled.&#32;It&#32;requires&#32;C++11&#32;and&#32;language&#32;extensions.&quot;)</emphasis>
1117 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;elif&#32;GLM_CONFIG_ALIGNED_GENTYPES&#32;==&#32;GLM_ENABLE</emphasis>
1118 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;GLM_FORCE_DEFAULT_ALIGNED_GENTYPES&#32;is&#32;defined.&#32;All&#32;gentypes&#32;(e.g.&#32;vec3)&#32;will&#32;be&#32;aligned&#32;and&#32;padded&#32;by&#32;default.&quot;)</emphasis>
1119 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;endif</emphasis>
1120 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis>
1121 
1122 <emphasis role="preprocessor">#&#32;&#32;&#32;if&#32;GLM_CONFIG_CLIP_CONTROL&#32;&amp;&#32;GLM_CLIP_CONTROL_ZO_BIT</emphasis>
1123 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;GLM_FORCE_DEPTH_ZERO_TO_ONE&#32;is&#32;defined.&#32;Using&#32;zero&#32;to&#32;one&#32;depth&#32;clip&#32;space.&quot;)</emphasis>
1124 <emphasis role="preprocessor">#&#32;&#32;&#32;else</emphasis>
1125 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;GLM_FORCE_DEPTH_ZERO_TO_ONE&#32;is&#32;undefined.&#32;Using&#32;negative&#32;one&#32;to&#32;one&#32;depth&#32;clip&#32;space.&quot;)</emphasis>
1126 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis>
1127 
1128 <emphasis role="preprocessor">#&#32;&#32;&#32;if&#32;GLM_CONFIG_CLIP_CONTROL&#32;&amp;&#32;GLM_CLIP_CONTROL_LH_BIT</emphasis>
1129 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;GLM_FORCE_LEFT_HANDED&#32;is&#32;defined.&#32;Using&#32;left&#32;handed&#32;coordinate&#32;system.&quot;)</emphasis>
1130 <emphasis role="preprocessor">#&#32;&#32;&#32;else</emphasis>
1131 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;message(&quot;GLM:&#32;GLM_FORCE_LEFT_HANDED&#32;is&#32;undefined.&#32;Using&#32;right&#32;handed&#32;coordinate&#32;system.&quot;)</emphasis>
1132 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis>
1133 <emphasis role="preprocessor">#endif</emphasis><emphasis role="comment">//GLM_MESSAGES</emphasis>
1134 
1135 <emphasis role="preprocessor">#endif</emphasis><emphasis role="comment">//GLM_SETUP_INCLUDED</emphasis>
</programlisting></section>
