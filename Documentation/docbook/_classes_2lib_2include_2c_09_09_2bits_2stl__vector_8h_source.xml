<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2bits_2stl__vector_8h_source" xml:lang="en-US">
<title>stl_vector.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/bits/stl_vector.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Vector&#32;implementation&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2001-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">/*</emphasis>
26 <emphasis role="comment">&#32;*</emphasis>
27 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1994</emphasis>
28 <emphasis role="comment">&#32;*&#32;Hewlett-Packard&#32;Company</emphasis>
29 <emphasis role="comment">&#32;*</emphasis>
30 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
31 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
32 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
33 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
34 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Hewlett-Packard&#32;Company&#32;makes&#32;no</emphasis>
35 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
36 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
37 <emphasis role="comment">&#32;*</emphasis>
38 <emphasis role="comment">&#32;*</emphasis>
39 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1996</emphasis>
40 <emphasis role="comment">&#32;*&#32;Silicon&#32;Graphics&#32;Computer&#32;Systems,&#32;Inc.</emphasis>
41 <emphasis role="comment">&#32;*</emphasis>
42 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
43 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
44 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
45 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
46 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Silicon&#32;Graphics&#32;makes&#32;no</emphasis>
47 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;&#32;software&#32;for&#32;any</emphasis>
48 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
49 <emphasis role="comment">&#32;*/</emphasis>
50 
56 <emphasis role="preprocessor">#ifndef&#32;_STL_VECTOR_H</emphasis>
57 <emphasis role="preprocessor">#define&#32;_STL_VECTOR_H&#32;1</emphasis>
58 
59 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_iterator_base_funcs.h&gt;</emphasis>
60 <emphasis role="preprocessor">#include&#32;&lt;bits/functexcept.h&gt;</emphasis>
61 <emphasis role="preprocessor">#include&#32;&lt;bits/concept_check.h&gt;</emphasis>
62 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
63 <emphasis role="preprocessor">#include&#32;&lt;initializer_list&gt;</emphasis>
64 <emphasis role="preprocessor">#endif</emphasis>
65 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;202002L</emphasis>
66 <emphasis role="preprocessor">#&#32;include&#32;&lt;compare&gt;</emphasis>
67 <emphasis role="preprocessor">#define&#32;__cpp_lib_constexpr_vector&#32;201907L</emphasis>
68 <emphasis role="preprocessor">#endif</emphasis>
69 
70 <emphasis role="preprocessor">#include&#32;&lt;debug/assertions.h&gt;</emphasis>
71 
72 <emphasis role="preprocessor">#if&#32;_GLIBCXX_SANITIZE_STD_ALLOCATOR&#32;&amp;&amp;&#32;_GLIBCXX_SANITIZE_VECTOR</emphasis>
73 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="stringliteral">&quot;C&quot;</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
74 __sanitizer_annotate_contiguous_container(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*,
75 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*);
76 <emphasis role="preprocessor">#endif</emphasis>
77 
78 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
79 {
80 _GLIBCXX_BEGIN_NAMESPACE_VERSION
81 _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
82 
84 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
85 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Vector_base
86 &#32;&#32;&#32;&#32;{
87 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Alloc&gt;::template
88 &#32;&#32;&#32;&#32;rebind&lt;_Tp&gt;::other&#32;_Tp_alloc_type;
89 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Tp_alloc_type&gt;::pointer
90 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
91 
92 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Vector_impl_data
93 &#32;&#32;&#32;&#32;&#32;&#32;{
94 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;_M_start;
95 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;_M_finish;
96 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;_M_end_of_storage;
97 
98 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
99 &#32;&#32;&#32;&#32;_Vector_impl_data()&#32;_GLIBCXX_NOEXCEPT
100 &#32;&#32;&#32;&#32;:&#32;_M_start(),&#32;_M_finish(),&#32;_M_end_of_storage()
101 &#32;&#32;&#32;&#32;{&#32;}
102 
103 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
104 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
105 &#32;&#32;&#32;&#32;_Vector_impl_data(_Vector_impl_data&amp;&amp;&#32;__x)&#32;noexcept
106 &#32;&#32;&#32;&#32;:&#32;_M_start(__x._M_start),&#32;_M_finish(__x._M_finish),
107 &#32;&#32;&#32;&#32;&#32;&#32;_M_end_of_storage(__x._M_end_of_storage)
108 &#32;&#32;&#32;&#32;{&#32;__x._M_start&#32;=&#32;__x._M_finish&#32;=&#32;__x._M_end_of_storage&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>();&#32;}
109 <emphasis role="preprocessor">#endif</emphasis>
110 
111 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
112 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
113 &#32;&#32;&#32;&#32;_M_copy_data(_Vector_impl_data&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;__x)&#32;_GLIBCXX_NOEXCEPT
114 &#32;&#32;&#32;&#32;{
115 &#32;&#32;&#32;&#32;&#32;&#32;_M_start&#32;=&#32;__x._M_start;
116 &#32;&#32;&#32;&#32;&#32;&#32;_M_finish&#32;=&#32;__x._M_finish;
117 &#32;&#32;&#32;&#32;&#32;&#32;_M_end_of_storage&#32;=&#32;__x._M_end_of_storage;
118 &#32;&#32;&#32;&#32;}
119 
120 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
121 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
122 &#32;&#32;&#32;&#32;_M_swap_data(_Vector_impl_data&amp;&#32;__x)&#32;_GLIBCXX_NOEXCEPT
123 &#32;&#32;&#32;&#32;{
124 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Do&#32;not&#32;use&#32;std::swap(_M_start,&#32;__x._M_start),&#32;etc&#32;as&#32;it&#32;loses</emphasis>
125 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;information&#32;used&#32;by&#32;TBAA.</emphasis>
126 &#32;&#32;&#32;&#32;&#32;&#32;_Vector_impl_data&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
127 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>._M_copy_data(*<emphasis role="keyword">this</emphasis>);
128 &#32;&#32;&#32;&#32;&#32;&#32;_M_copy_data(__x);
129 &#32;&#32;&#32;&#32;&#32;&#32;__x._M_copy_data(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
130 &#32;&#32;&#32;&#32;}
131 &#32;&#32;&#32;&#32;&#32;&#32;};
132 
133 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Vector_impl
134 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Tp_alloc_type,&#32;<emphasis role="keyword">public</emphasis>&#32;_Vector_impl_data
135 &#32;&#32;&#32;&#32;&#32;&#32;{
136 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
137 &#32;&#32;&#32;&#32;_Vector_impl()&#32;_GLIBCXX_NOEXCEPT_IF(
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_nothrow_default_constructible&lt;_Tp_alloc_type&gt;::value)
139 &#32;&#32;&#32;&#32;:&#32;_Tp_alloc_type()
140 &#32;&#32;&#32;&#32;{&#32;}
141 
142 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
143 &#32;&#32;&#32;&#32;_Vector_impl(_Tp_alloc_type&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;__a)&#32;_GLIBCXX_NOEXCEPT
144 &#32;&#32;&#32;&#32;:&#32;_Tp_alloc_type(__a)
145 &#32;&#32;&#32;&#32;{&#32;}
146 
147 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
148 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Not&#32;defaulted,&#32;to&#32;enforce&#32;noexcept(true)&#32;even&#32;when</emphasis>
149 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;!is_nothrow_move_constructible&lt;_Tp_alloc_type&gt;.</emphasis>
150 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
151 &#32;&#32;&#32;&#32;_Vector_impl(_Vector_impl&amp;&amp;&#32;__x)&#32;noexcept
152 &#32;&#32;&#32;&#32;:&#32;_Tp_alloc_type(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x)),&#32;_Vector_impl_data(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x))
153 &#32;&#32;&#32;&#32;{&#32;}
154 
155 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
156 &#32;&#32;&#32;&#32;_Vector_impl(_Tp_alloc_type&amp;&amp;&#32;__a)&#32;noexcept
157 &#32;&#32;&#32;&#32;:&#32;_Tp_alloc_type(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__a))
158 &#32;&#32;&#32;&#32;{&#32;}
159 
160 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
161 &#32;&#32;&#32;&#32;_Vector_impl(_Tp_alloc_type&amp;&amp;&#32;__a,&#32;_Vector_impl&amp;&amp;&#32;__rv)&#32;noexcept
162 &#32;&#32;&#32;&#32;:&#32;_Tp_alloc_type(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__a)),&#32;_Vector_impl_data(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__rv))
163 &#32;&#32;&#32;&#32;{&#32;}
164 <emphasis role="preprocessor">#endif</emphasis>
165 
166 <emphasis role="preprocessor">#if&#32;_GLIBCXX_SANITIZE_STD_ALLOCATOR&#32;&amp;&amp;&#32;_GLIBCXX_SANITIZE_VECTOR</emphasis>
167 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_Tp_alloc_type&gt;
168 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Asan
169 &#32;&#32;&#32;&#32;&#32;&#32;{
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Tp_alloc_type&gt;
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::size_type&#32;size_type;
172 
173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;<emphasis role="keywordtype">void</emphasis>
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_shrink(_Vector_impl&amp;,&#32;size_type)&#32;{&#32;}
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;<emphasis role="keywordtype">void</emphasis>
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_on_dealloc(_Vector_impl&amp;)&#32;{&#32;}
177 
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Vector_impl&amp;&#32;_Reinit;
179 
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Grow
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR&#32;_Grow(_Vector_impl&amp;,&#32;size_type)&#32;{&#32;}
183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_grew(size_type)&#32;{&#32;}
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
185 &#32;&#32;&#32;&#32;&#32;&#32;};
186 
187 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Enable&#32;ASan&#32;annotations&#32;for&#32;memory&#32;obtained&#32;from&#32;std::allocator.</emphasis>
188 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
189 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Asan&lt;allocator&lt;_Up&gt;&#32;&gt;
190 &#32;&#32;&#32;&#32;&#32;&#32;{
191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Tp_alloc_type&gt;
192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::size_type&#32;size_type;
193 
194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Adjust&#32;ASan&#32;annotation&#32;for&#32;[_M_start,&#32;_M_end_of_storage)&#32;to</emphasis>
195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;mark&#32;end&#32;of&#32;valid&#32;region&#32;as&#32;__curr&#32;instead&#32;of&#32;__prev.</emphasis>
196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;<emphasis role="keywordtype">void</emphasis>
197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_adjust(_Vector_impl&amp;&#32;__impl,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__prev,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__curr)
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
199 <emphasis role="preprocessor">#if&#32;__cpp_lib_is_constant_evaluated</emphasis>
200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::is_constant_evaluated())
201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
202 <emphasis role="preprocessor">#endif</emphasis>
203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sanitizer_annotate_contiguous_container(__impl._M_start,
204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__impl._M_end_of_storage,&#32;__prev,&#32;__curr);
205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
206 
207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;<emphasis role="keywordtype">void</emphasis>
208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_grow(_Vector_impl&amp;&#32;__impl,&#32;size_type&#32;__n)
209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;_S_adjust(__impl,&#32;__impl._M_finish,&#32;__impl._M_finish&#32;+&#32;__n);&#32;}
210 
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;<emphasis role="keywordtype">void</emphasis>
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_shrink(_Vector_impl&amp;&#32;__impl,&#32;size_type&#32;__n)
213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;_S_adjust(__impl,&#32;__impl._M_finish&#32;+&#32;__n,&#32;__impl._M_finish);&#32;}
214 
215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;<emphasis role="keywordtype">void</emphasis>
216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_on_dealloc(_Vector_impl&amp;&#32;__impl)
217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__impl._M_start)
219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_adjust(__impl,&#32;__impl._M_finish,&#32;__impl._M_end_of_storage);
220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
221 
222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Used&#32;on&#32;reallocation&#32;to&#32;tell&#32;ASan&#32;unused&#32;capacity&#32;is&#32;invalid.</emphasis>
223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Reinit
224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;_GLIBCXX20_CONSTEXPR
226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Reinit(_Vector_impl&amp;&#32;__impl)&#32;:&#32;_M_impl(__impl)
227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Mark&#32;unused&#32;capacity&#32;as&#32;valid&#32;again&#32;before&#32;deallocating&#32;it.</emphasis>
229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_on_dealloc(_M_impl);
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
231 
232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~_Reinit()
234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Mark&#32;unused&#32;capacity&#32;as&#32;invalid&#32;after&#32;reallocation.</emphasis>
236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_impl._M_start)
237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_adjust(_M_impl,&#32;_M_impl._M_end_of_storage,
238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_impl._M_finish);
239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
240 
241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Vector_impl&amp;&#32;_M_impl;
242 
243 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Reinit(<emphasis role="keyword">const</emphasis>&#32;_Reinit&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Reinit&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;_Reinit&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
246 <emphasis role="preprocessor">#endif</emphasis>
247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
248 
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Tell&#32;ASan&#32;when&#32;unused&#32;capacity&#32;is&#32;initialized&#32;to&#32;be&#32;valid.</emphasis>
250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Grow
251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Grow(_Vector_impl&amp;&#32;__impl,&#32;size_type&#32;__n)
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_impl(__impl),&#32;_M_n(__n)
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;_S_grow(_M_impl,&#32;__n);&#32;}
256 
257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~_Grow()&#32;{&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_n)&#32;_S_shrink(_M_impl,&#32;_M_n);&#32;}
259 
260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_grew(size_type&#32;__n)&#32;{&#32;_M_n&#32;-=&#32;__n;&#32;}
262 
263 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Grow(<emphasis role="keyword">const</emphasis>&#32;_Grow&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Grow&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;_Grow&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
266 <emphasis role="preprocessor">#endif</emphasis>
267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Vector_impl&amp;&#32;_M_impl;
269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;_M_n;
270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
271 &#32;&#32;&#32;&#32;&#32;&#32;};
272 
273 <emphasis role="preprocessor">#define&#32;_GLIBCXX_ASAN_ANNOTATE_REINIT&#32;\</emphasis>
274 <emphasis role="preprocessor">&#32;&#32;typename&#32;_Base::_Vector_impl::template&#32;_Asan&lt;&gt;::_Reinit&#32;const&#32;\</emphasis>
275 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__attribute__((__unused__))&#32;__reinit_guard(this-&gt;_M_impl)</emphasis>
276 <emphasis role="preprocessor">#define&#32;_GLIBCXX_ASAN_ANNOTATE_GROW(n)&#32;\</emphasis>
277 <emphasis role="preprocessor">&#32;&#32;typename&#32;_Base::_Vector_impl::template&#32;_Asan&lt;&gt;::_Grow&#32;\</emphasis>
278 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__attribute__((__unused__))&#32;__grow_guard(this-&gt;_M_impl,&#32;(n))</emphasis>
279 <emphasis role="preprocessor">#define&#32;_GLIBCXX_ASAN_ANNOTATE_GREW(n)&#32;__grow_guard._M_grew(n)</emphasis>
280 <emphasis role="preprocessor">#define&#32;_GLIBCXX_ASAN_ANNOTATE_SHRINK(n)&#32;\</emphasis>
281 <emphasis role="preprocessor">&#32;&#32;_Base::_Vector_impl::template&#32;_Asan&lt;&gt;::_S_shrink(this-&gt;_M_impl,&#32;n)</emphasis>
282 <emphasis role="preprocessor">#define&#32;_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC&#32;\</emphasis>
283 <emphasis role="preprocessor">&#32;&#32;_Base::_Vector_impl::template&#32;_Asan&lt;&gt;::_S_on_dealloc(this-&gt;_M_impl)</emphasis>
284 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;!&#32;(_GLIBCXX_SANITIZE_STD_ALLOCATOR&#32;&amp;&amp;&#32;_GLIBCXX_SANITIZE_VECTOR)</emphasis>
285 <emphasis role="preprocessor">#define&#32;_GLIBCXX_ASAN_ANNOTATE_REINIT</emphasis>
286 <emphasis role="preprocessor">#define&#32;_GLIBCXX_ASAN_ANNOTATE_GROW(n)</emphasis>
287 <emphasis role="preprocessor">#define&#32;_GLIBCXX_ASAN_ANNOTATE_GREW(n)</emphasis>
288 <emphasis role="preprocessor">#define&#32;_GLIBCXX_ASAN_ANNOTATE_SHRINK(n)</emphasis>
289 <emphasis role="preprocessor">#define&#32;_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC</emphasis>
290 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_SANITIZE_STD_ALLOCATOR&#32;&amp;&amp;&#32;_GLIBCXX_SANITIZE_VECTOR</emphasis>
291 &#32;&#32;&#32;&#32;&#32;&#32;};
292 
293 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
294 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Alloc&#32;allocator_type;
295 
296 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
297 &#32;&#32;&#32;&#32;&#32;&#32;_Tp_alloc_type&amp;
298 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_Tp_allocator()&#32;_GLIBCXX_NOEXCEPT
299 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_impl;&#32;}
300 
301 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
302 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp_alloc_type&amp;
303 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_Tp_allocator()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
304 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_impl;&#32;}
305 
306 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
307 &#32;&#32;&#32;&#32;&#32;&#32;allocator_type
308 &#32;&#32;&#32;&#32;&#32;&#32;get_allocator()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
309 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;allocator_type(_M_get_Tp_allocator());&#32;}
310 
311 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
312 &#32;&#32;&#32;&#32;&#32;&#32;_Vector_base()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
313 <emphasis role="preprocessor">#else</emphasis>
314 &#32;&#32;&#32;&#32;&#32;&#32;_Vector_base()&#32;{&#32;}
315 <emphasis role="preprocessor">#endif</emphasis>
316 
317 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
318 &#32;&#32;&#32;&#32;&#32;&#32;_Vector_base(<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)&#32;_GLIBCXX_NOEXCEPT
319 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_impl(__a)&#32;{&#32;}
320 
321 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Kept&#32;for&#32;ABI&#32;compatibility.</emphasis>
322 <emphasis role="preprocessor">#if&#32;!_GLIBCXX_INLINE_VERSION</emphasis>
323 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
324 &#32;&#32;&#32;&#32;&#32;&#32;_Vector_base(<emphasis role="keywordtype">size_t</emphasis>&#32;__n)
325 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_impl()
326 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_create_storage(__n);&#32;}
327 <emphasis role="preprocessor">#endif</emphasis>
328 
329 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
330 &#32;&#32;&#32;&#32;&#32;&#32;_Vector_base(<emphasis role="keywordtype">size_t</emphasis>&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
331 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_impl(__a)
332 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_create_storage(__n);&#32;}
333 
334 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
335 &#32;&#32;&#32;&#32;&#32;&#32;_Vector_base(_Vector_base&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
336 
337 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Kept&#32;for&#32;ABI&#32;compatibility.</emphasis>
338 <emphasis role="preprocessor">#&#32;if&#32;!_GLIBCXX_INLINE_VERSION</emphasis>
339 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
340 &#32;&#32;&#32;&#32;&#32;&#32;_Vector_base(_Tp_alloc_type&amp;&amp;&#32;__a)&#32;noexcept
341 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_impl(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__a))&#32;{&#32;}
342 
343 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
344 &#32;&#32;&#32;&#32;&#32;&#32;_Vector_base(_Vector_base&amp;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
345 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_impl(__a)
346 &#32;&#32;&#32;&#32;&#32;&#32;{
347 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x.get_allocator()&#32;==&#32;__a)
348 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_swap_data(__x._M_impl);
349 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
350 &#32;&#32;&#32;&#32;&#32;&#32;{
351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n&#32;=&#32;__x._M_impl._M_finish&#32;-&#32;__x._M_impl._M_start;
352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_create_storage(__n);
353 &#32;&#32;&#32;&#32;&#32;&#32;}
354 &#32;&#32;&#32;&#32;&#32;&#32;}
355 <emphasis role="preprocessor">#&#32;endif</emphasis>
356 
357 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
358 &#32;&#32;&#32;&#32;&#32;&#32;_Vector_base(<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a,&#32;_Vector_base&amp;&amp;&#32;__x)
359 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_impl(_Tp_alloc_type(__a),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x._M_impl))
360 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
361 <emphasis role="preprocessor">#endif</emphasis>
362 
363 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
364 &#32;&#32;&#32;&#32;&#32;&#32;~_Vector_base()&#32;_GLIBCXX_NOEXCEPT
365 &#32;&#32;&#32;&#32;&#32;&#32;{
366 &#32;&#32;&#32;&#32;_M_deallocate(_M_impl._M_start,
367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_impl._M_end_of_storage&#32;-&#32;_M_impl._M_start);
368 &#32;&#32;&#32;&#32;&#32;&#32;}
369 
370 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
371 &#32;&#32;&#32;&#32;&#32;&#32;_Vector_impl&#32;_M_impl;
372 
373 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
374 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
375 &#32;&#32;&#32;&#32;&#32;&#32;_M_allocate(<emphasis role="keywordtype">size_t</emphasis>&#32;__n)
376 &#32;&#32;&#32;&#32;&#32;&#32;{
377 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Tp_alloc_type&gt;&#32;_Tr;
378 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__n&#32;!=&#32;0&#32;?&#32;_Tr::allocate(_M_impl,&#32;__n)&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>();
379 &#32;&#32;&#32;&#32;&#32;&#32;}
380 
381 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
382 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
383 &#32;&#32;&#32;&#32;&#32;&#32;_M_deallocate(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__p,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n)
384 &#32;&#32;&#32;&#32;&#32;&#32;{
385 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Tp_alloc_type&gt;&#32;_Tr;
386 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__p)
387 &#32;&#32;&#32;&#32;&#32;&#32;_Tr::deallocate(_M_impl,&#32;__p,&#32;__n);
388 &#32;&#32;&#32;&#32;&#32;&#32;}
389 
390 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
391 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
392 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
393 &#32;&#32;&#32;&#32;&#32;&#32;_M_create_storage(<emphasis role="keywordtype">size_t</emphasis>&#32;__n)
394 &#32;&#32;&#32;&#32;&#32;&#32;{
395 &#32;&#32;&#32;&#32;this-&gt;_M_impl._M_start&#32;=&#32;this-&gt;_M_allocate(__n);
396 &#32;&#32;&#32;&#32;this-&gt;_M_impl._M_finish&#32;=&#32;this-&gt;_M_impl._M_start;
397 &#32;&#32;&#32;&#32;this-&gt;_M_impl._M_end_of_storage&#32;=&#32;this-&gt;_M_impl._M_start&#32;+&#32;__n;
398 &#32;&#32;&#32;&#32;&#32;&#32;}
399 &#32;&#32;&#32;&#32;};
400 
422 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&#32;=&#32;std::allocator&lt;_Tp&gt;&#32;&gt;
423 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>vector&#32;:&#32;<emphasis role="keyword">protected</emphasis>&#32;_Vector_base&lt;_Tp,&#32;_Alloc&gt;
424 &#32;&#32;&#32;&#32;{
425 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_CONCEPT_CHECKS</emphasis>
426 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Concept&#32;requirements.</emphasis>
427 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc::value_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Alloc_value_type;
428 <emphasis role="preprocessor">#&#32;if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
429 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ae4dc1beb74b88e6b1215e05c397fc7a2">__glibcxx_class_requires</link>(_Tp,&#32;_SGIAssignableConcept)
430 <emphasis role="preprocessor">#&#32;endif</emphasis>
431 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ae97aa7f8b95f5fdb311dc98ff0c31c72">__glibcxx_class_requires2</link>(_Tp,&#32;_Alloc_value_type,&#32;_SameTypeConcept)
432 <emphasis role="preprocessor">#endif</emphasis>
433 
434 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
435 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same&lt;typename&#32;remove_cv&lt;_Tp&gt;::type,&#32;_Tp&gt;<link linkend="_classvalue">::value</link>,
436 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;std::vector&#32;must&#32;have&#32;a&#32;non-const,&#32;non-volatile&#32;value_type&quot;</emphasis>);
437 <emphasis role="preprocessor">#&#32;if&#32;__cplusplus&#32;&gt;&#32;201703L&#32;||&#32;defined&#32;__STRICT_ANSI__</emphasis>
438 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same&lt;typename&#32;_Alloc::value_type,&#32;_Tp&gt;::value,
439 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;std::vector&#32;must&#32;have&#32;the&#32;same&#32;value_type&#32;as&#32;its&#32;allocator&quot;</emphasis>);
440 <emphasis role="preprocessor">#&#32;endif</emphasis>
441 <emphasis role="preprocessor">#endif</emphasis>
442 
443 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Vector_base&lt;_Tp,&#32;_Alloc&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Base;
444 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::_Tp_alloc_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp_alloc_type;
445 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Tp_alloc_type&gt;&#32;_Alloc_traits;
446 
447 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
448 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
449 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::pointer&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
450 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::const_pointer&#32;const_pointer;
451 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::reference&#32;&#32;&#32;&#32;&#32;reference;
452 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::const_reference&#32;&#32;&#32;const_reference;
453 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__gnu_cxx::__normal_iterator&lt;pointer,&#32;vector&gt;&#32;iterator;
454 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__gnu_cxx::__normal_iterator&lt;const_pointer,&#32;vector&gt;
455 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator;
456 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::reverse_iterator&lt;const_iterator&gt;&#32;const_reverse_iterator;
457 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::reverse_iterator&lt;iterator&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator;
458 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type;
459 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;difference_type;
460 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Alloc&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator_type;
461 
462 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
463 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
464 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
465 &#32;&#32;&#32;&#32;&#32;&#32;_S_nothrow_relocate(true_type)
466 &#32;&#32;&#32;&#32;&#32;&#32;{
467 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>(std::__relocate_a(std::declval&lt;pointer&gt;(),
468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::declval&lt;pointer&gt;(),
469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::declval&lt;pointer&gt;(),
470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::declval&lt;_Tp_alloc_type&amp;&gt;()));
471 &#32;&#32;&#32;&#32;&#32;&#32;}
472 
473 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
474 &#32;&#32;&#32;&#32;&#32;&#32;_S_nothrow_relocate(false_type)
475 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;}
476 
477 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
478 &#32;&#32;&#32;&#32;&#32;&#32;_S_use_relocate()
479 &#32;&#32;&#32;&#32;&#32;&#32;{
480 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Instantiating&#32;std::__relocate_a&#32;might&#32;cause&#32;an&#32;error&#32;outside&#32;the</emphasis>
481 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;immediate&#32;context&#32;(in&#32;__relocate_object_a&apos;s&#32;noexcept-specifier),</emphasis>
482 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;so&#32;only&#32;do&#32;it&#32;if&#32;we&#32;know&#32;the&#32;type&#32;can&#32;be&#32;move-inserted&#32;into&#32;*this.</emphasis>
483 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_nothrow_relocate(__is_move_insertable&lt;_Tp_alloc_type&gt;{});
484 &#32;&#32;&#32;&#32;&#32;&#32;}
485 
486 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
487 &#32;&#32;&#32;&#32;&#32;&#32;_S_do_relocate(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__first,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__last,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__result,
488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp_alloc_type&amp;&#32;__alloc,&#32;true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
489 &#32;&#32;&#32;&#32;&#32;&#32;{
490 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__relocate_a(__first,&#32;__last,&#32;__result,&#32;__alloc);
491 &#32;&#32;&#32;&#32;&#32;&#32;}
492 
493 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
494 &#32;&#32;&#32;&#32;&#32;&#32;_S_do_relocate(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__result,
495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp_alloc_type&amp;,&#32;false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
496 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;&#32;}
497 
498 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
499 &#32;&#32;&#32;&#32;&#32;&#32;_S_relocate(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__first,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__last,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__result,
500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp_alloc_type&amp;&#32;__alloc)&#32;<emphasis role="keyword">noexcept</emphasis>
501 &#32;&#32;&#32;&#32;&#32;&#32;{
502 <emphasis role="preprocessor">#if&#32;__cpp_if_constexpr</emphasis>
503 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;All&#32;callers&#32;have&#32;already&#32;checked&#32;_S_use_relocate()&#32;so&#32;just&#32;do&#32;it.</emphasis>
504 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__relocate_a(__first,&#32;__last,&#32;__result,&#32;__alloc);
505 <emphasis role="preprocessor">#else</emphasis>
506 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__do_it&#32;=&#32;__bool_constant&lt;_S_use_relocate()&gt;;
507 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_do_relocate(__first,&#32;__last,&#32;__result,&#32;__alloc,&#32;__do_it{});
508 <emphasis role="preprocessor">#endif</emphasis>
509 &#32;&#32;&#32;&#32;&#32;&#32;}
510 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
511 
512 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
513 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::_M_allocate;
514 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::_M_deallocate;
515 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::_M_impl;
516 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::_M_get_Tp_allocator;
517 
518 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
519 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[23.2.4.1]&#32;construct/copy/destroy</emphasis>
520 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(assign()&#32;and&#32;get_allocator()&#32;are&#32;also&#32;listed&#32;in&#32;this&#32;section)</emphasis>
521 
525 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
526 &#32;&#32;&#32;&#32;&#32;&#32;vector()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
527 <emphasis role="preprocessor">#else</emphasis>
528 &#32;&#32;&#32;&#32;&#32;&#32;vector()&#32;{&#32;}
529 <emphasis role="preprocessor">#endif</emphasis>
530 
535 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
536 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
537 &#32;&#32;&#32;&#32;&#32;&#32;vector(<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)&#32;_GLIBCXX_NOEXCEPT
538 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__a)&#32;{&#32;}
539 
540 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
549 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
550 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
551 &#32;&#32;&#32;&#32;&#32;&#32;vector(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
552 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(_S_check_init_len(__n,&#32;__a),&#32;__a)
553 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_default_initialize(__n);&#32;}
554 
563 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
564 &#32;&#32;&#32;&#32;&#32;&#32;vector(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__value,
565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
566 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(_S_check_init_len(__n,&#32;__a),&#32;__a)
567 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_fill_initialize(__n,&#32;__value);&#32;}
568 <emphasis role="preprocessor">#else</emphasis>
577 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
578 &#32;&#32;&#32;&#32;&#32;&#32;vector(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__value&#32;=&#32;value_type(),
579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
580 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(_S_check_init_len(__n,&#32;__a),&#32;__a)
581 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_fill_initialize(__n,&#32;__value);&#32;}
582 <emphasis role="preprocessor">#endif</emphasis>
583 
595 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
596 &#32;&#32;&#32;&#32;&#32;&#32;vector(<emphasis role="keyword">const</emphasis>&#32;vector&amp;&#32;__x)
597 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__x.size(),
598 &#32;&#32;&#32;&#32;_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
599 &#32;&#32;&#32;&#32;&#32;&#32;{
600 &#32;&#32;&#32;&#32;this-&gt;_M_impl._M_finish&#32;=
601 &#32;&#32;&#32;&#32;&#32;&#32;std::__uninitialized_copy_a(__x.begin(),&#32;__x.end(),
602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_start,
603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_get_Tp_allocator());
604 &#32;&#32;&#32;&#32;&#32;&#32;}
605 
606 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
615 &#32;&#32;&#32;&#32;&#32;&#32;vector(vector&amp;&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
616 
618 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
619 &#32;&#32;&#32;&#32;&#32;&#32;vector(<emphasis role="keyword">const</emphasis>&#32;vector&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;__type_identity_t&lt;allocator_type&gt;&amp;&#32;__a)
620 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__x.size(),&#32;__a)
621 &#32;&#32;&#32;&#32;&#32;&#32;{
622 &#32;&#32;&#32;&#32;this-&gt;_M_impl._M_finish&#32;=
623 &#32;&#32;&#32;&#32;&#32;&#32;std::__uninitialized_copy_a(__x.begin(),&#32;__x.end(),
624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_start,
625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_get_Tp_allocator());
626 &#32;&#32;&#32;&#32;&#32;&#32;}
627 
628 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
629 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
630 &#32;&#32;&#32;&#32;&#32;&#32;vector(vector&amp;&amp;&#32;__rv,&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__m,&#32;true_type)&#32;noexcept
631 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__m,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__rv))
632 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
633 
634 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
635 &#32;&#32;&#32;&#32;&#32;&#32;vector(vector&amp;&amp;&#32;__rv,&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__m,&#32;false_type)
636 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__m)
637 &#32;&#32;&#32;&#32;&#32;&#32;{
638 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__rv.get_allocator()&#32;==&#32;__m)
639 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_swap_data(__rv._M_impl);
640 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__rv.empty())
641 &#32;&#32;&#32;&#32;&#32;&#32;{
642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_create_storage(__rv.size());
643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_finish&#32;=
644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__uninitialized_move_a(__rv.begin(),&#32;__rv.end(),
645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_start,
646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_get_Tp_allocator());
647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__rv.clear();
648 &#32;&#32;&#32;&#32;&#32;&#32;}
649 &#32;&#32;&#32;&#32;&#32;&#32;}
650 
651 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
653 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
654 &#32;&#32;&#32;&#32;&#32;&#32;vector(vector&amp;&amp;&#32;__rv,&#32;<emphasis role="keyword">const</emphasis>&#32;__type_identity_t&lt;allocator_type&gt;&amp;&#32;__m)
655 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(&#32;<emphasis role="keyword">noexcept</emphasis>(
656 &#32;&#32;&#32;&#32;vector(std::declval&lt;vector&amp;&amp;&gt;(),&#32;std::declval&lt;const&#32;allocator_type&amp;&gt;(),
657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::declval&lt;typename&#32;_Alloc_traits::is_always_equal&gt;()))&#32;)
658 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;vector(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__rv),&#32;__m,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::is_always_equal{})
659 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
660 
672 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
673 &#32;&#32;&#32;&#32;&#32;&#32;vector(initializer_list&lt;value_type&gt;&#32;__l,
674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
675 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__a)
676 &#32;&#32;&#32;&#32;&#32;&#32;{
677 &#32;&#32;&#32;&#32;_M_range_initialize(__l.begin(),&#32;__l.end(),
678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag());
679 &#32;&#32;&#32;&#32;&#32;&#32;}
680 <emphasis role="preprocessor">#endif</emphasis>
681 
698 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
699 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;std::_RequireInputIter&lt;_InputIterator&gt;&gt;
701 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
702 &#32;&#32;&#32;&#32;vector(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
704 &#32;&#32;&#32;&#32;:&#32;_Base(__a)
705 &#32;&#32;&#32;&#32;{
706 &#32;&#32;&#32;&#32;&#32;&#32;_M_range_initialize(__first,&#32;__last,
707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__first));
708 &#32;&#32;&#32;&#32;}
709 <emphasis role="preprocessor">#else</emphasis>
710 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
711 &#32;&#32;&#32;&#32;vector(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
713 &#32;&#32;&#32;&#32;:&#32;_Base(__a)
714 &#32;&#32;&#32;&#32;{
715 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;whether&#32;it&apos;s&#32;an&#32;integral&#32;type.&#32;&#32;If&#32;so,&#32;it&apos;s&#32;not&#32;an&#32;iterator.</emphasis>
716 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::__is_integer&lt;_InputIterator&gt;::__type&#32;_Integral;
717 &#32;&#32;&#32;&#32;&#32;&#32;_M_initialize_dispatch(__first,&#32;__last,&#32;_Integral());
718 &#32;&#32;&#32;&#32;}
719 <emphasis role="preprocessor">#endif</emphasis>
720 
727 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
728 &#32;&#32;&#32;&#32;&#32;&#32;~vector()&#32;_GLIBCXX_NOEXCEPT
729 &#32;&#32;&#32;&#32;&#32;&#32;{
730 &#32;&#32;&#32;&#32;std::_Destroy(this-&gt;_M_impl._M_start,&#32;this-&gt;_M_impl._M_finish,
731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_get_Tp_allocator());
732 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2stl__vector_8h_1a0e67ec4b674538c407d702fbaec0527b">_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC</link>;
733 &#32;&#32;&#32;&#32;&#32;&#32;}
734 
744 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
745 &#32;&#32;&#32;&#32;&#32;&#32;vector&amp;
746 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;vector&amp;&#32;__x);
747 
748 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
759 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
760 &#32;&#32;&#32;&#32;&#32;&#32;vector&amp;
761 &#32;&#32;&#32;&#32;&#32;&#32;operator=(vector&amp;&amp;&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>(_Alloc_traits::_S_nothrow_move())
762 &#32;&#32;&#32;&#32;&#32;&#32;{
763 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__move_storage&#32;=
764 &#32;&#32;&#32;&#32;&#32;&#32;_Alloc_traits::_S_propagate_on_move_assign()
765 &#32;&#32;&#32;&#32;&#32;&#32;||&#32;_Alloc_traits::_S_always_equal();
766 &#32;&#32;&#32;&#32;_M_move_assign(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x),&#32;__bool_constant&lt;__move_storage&gt;());
767 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
768 &#32;&#32;&#32;&#32;&#32;&#32;}
769 
781 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
782 &#32;&#32;&#32;&#32;&#32;&#32;vector&amp;
783 &#32;&#32;&#32;&#32;&#32;&#32;operator=(initializer_list&lt;value_type&gt;&#32;__l)
784 &#32;&#32;&#32;&#32;&#32;&#32;{
785 &#32;&#32;&#32;&#32;this-&gt;_M_assign_aux(__l.begin(),&#32;__l.end(),
786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag());
787 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
788 &#32;&#32;&#32;&#32;&#32;&#32;}
789 <emphasis role="preprocessor">#endif</emphasis>
790 
801 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
802 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
803 &#32;&#32;&#32;&#32;&#32;&#32;assign(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
804 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_fill_assign(__n,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);&#32;}
805 
818 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
819 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;std::_RequireInputIter&lt;_InputIterator&gt;&gt;
821 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
822 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
823 &#32;&#32;&#32;&#32;assign(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
824 &#32;&#32;&#32;&#32;{&#32;_M_assign_dispatch(__first,&#32;__last,&#32;__false_type());&#32;}
825 <emphasis role="preprocessor">#else</emphasis>
826 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
827 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
828 &#32;&#32;&#32;&#32;assign(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
829 &#32;&#32;&#32;&#32;{
830 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;whether&#32;it&apos;s&#32;an&#32;integral&#32;type.&#32;&#32;If&#32;so,&#32;it&apos;s&#32;not&#32;an&#32;iterator.</emphasis>
831 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::__is_integer&lt;_InputIterator&gt;::__type&#32;_Integral;
832 &#32;&#32;&#32;&#32;&#32;&#32;_M_assign_dispatch(__first,&#32;__last,&#32;_Integral());
833 &#32;&#32;&#32;&#32;}
834 <emphasis role="preprocessor">#endif</emphasis>
835 
836 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
848 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
849 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
850 &#32;&#32;&#32;&#32;&#32;&#32;assign(initializer_list&lt;value_type&gt;&#32;__l)
851 &#32;&#32;&#32;&#32;&#32;&#32;{
852 &#32;&#32;&#32;&#32;this-&gt;_M_assign_aux(__l.begin(),&#32;__l.end(),
853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag());
854 &#32;&#32;&#32;&#32;&#32;&#32;}
855 <emphasis role="preprocessor">#endif</emphasis>
856 
858 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::get_allocator;
859 
860 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;iterators</emphasis>
866 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
867 &#32;&#32;&#32;&#32;&#32;&#32;iterator
868 &#32;&#32;&#32;&#32;&#32;&#32;begin()&#32;_GLIBCXX_NOEXCEPT
869 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(this-&gt;_M_impl._M_start);&#32;}
870 
876 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
877 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
878 &#32;&#32;&#32;&#32;&#32;&#32;begin()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
879 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(this-&gt;_M_impl._M_start);&#32;}
880 
886 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
887 &#32;&#32;&#32;&#32;&#32;&#32;iterator
888 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;_GLIBCXX_NOEXCEPT
889 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(this-&gt;_M_impl._M_finish);&#32;}
890 
896 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
897 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
898 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
899 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(this-&gt;_M_impl._M_finish);&#32;}
900 
906 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
907 &#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator
908 &#32;&#32;&#32;&#32;&#32;&#32;rbegin()&#32;_GLIBCXX_NOEXCEPT
909 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;reverse_iterator(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());&#32;}
910 
916 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
917 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
918 &#32;&#32;&#32;&#32;&#32;&#32;rbegin()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
919 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_reverse_iterator(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());&#32;}
920 
926 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
927 &#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator
928 &#32;&#32;&#32;&#32;&#32;&#32;rend()&#32;_GLIBCXX_NOEXCEPT
929 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;reverse_iterator(begin());&#32;}
930 
936 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
937 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
938 &#32;&#32;&#32;&#32;&#32;&#32;rend()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
939 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_reverse_iterator(begin());&#32;}
940 
941 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
947 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]&#32;_GLIBCXX20_CONSTEXPR
948 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
949 &#32;&#32;&#32;&#32;&#32;&#32;cbegin()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
950 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(this-&gt;_M_impl._M_start);&#32;}
951 
957 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]&#32;_GLIBCXX20_CONSTEXPR
958 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
959 &#32;&#32;&#32;&#32;&#32;&#32;cend()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
960 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(this-&gt;_M_impl._M_finish);&#32;}
961 
967 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]&#32;_GLIBCXX20_CONSTEXPR
968 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
969 &#32;&#32;&#32;&#32;&#32;&#32;crbegin()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
970 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_reverse_iterator(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());&#32;}
971 
977 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]&#32;_GLIBCXX20_CONSTEXPR
978 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
979 &#32;&#32;&#32;&#32;&#32;&#32;crend()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
980 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_reverse_iterator(begin());&#32;}
981 <emphasis role="preprocessor">#endif</emphasis>
982 
983 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[23.2.4.2]&#32;capacity</emphasis>
985 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
986 &#32;&#32;&#32;&#32;&#32;&#32;size_type
987 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
988 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;size_type(this-&gt;_M_impl._M_finish&#32;-&#32;this-&gt;_M_impl._M_start);&#32;}
989 
991 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
992 &#32;&#32;&#32;&#32;&#32;&#32;size_type
993 &#32;&#32;&#32;&#32;&#32;&#32;max_size()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
994 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_max_size(_M_get_Tp_allocator());&#32;}
995 
996 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1006 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1007 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1008 &#32;&#32;&#32;&#32;&#32;&#32;resize(size_type&#32;__new_size)
1009 &#32;&#32;&#32;&#32;&#32;&#32;{
1010 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__new_size&#32;&gt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>())
1011 &#32;&#32;&#32;&#32;&#32;&#32;_M_default_append(__new_size&#32;-&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>());
1012 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__new_size&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>())
1013 &#32;&#32;&#32;&#32;&#32;&#32;_M_erase_at_end(this-&gt;_M_impl._M_start&#32;+&#32;__new_size);
1014 &#32;&#32;&#32;&#32;&#32;&#32;}
1015 
1027 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1028 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1029 &#32;&#32;&#32;&#32;&#32;&#32;resize(size_type&#32;__new_size,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
1030 &#32;&#32;&#32;&#32;&#32;&#32;{
1031 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__new_size&#32;&gt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>())
1032 &#32;&#32;&#32;&#32;&#32;&#32;_M_fill_insert(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(),&#32;__new_size&#32;-&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>(),&#32;__x);
1033 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__new_size&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>())
1034 &#32;&#32;&#32;&#32;&#32;&#32;_M_erase_at_end(this-&gt;_M_impl._M_start&#32;+&#32;__new_size);
1035 &#32;&#32;&#32;&#32;&#32;&#32;}
1036 <emphasis role="preprocessor">#else</emphasis>
1048 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1049 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1050 &#32;&#32;&#32;&#32;&#32;&#32;resize(size_type&#32;__new_size,&#32;value_type&#32;__x&#32;=&#32;value_type())
1051 &#32;&#32;&#32;&#32;&#32;&#32;{
1052 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__new_size&#32;&gt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>())
1053 &#32;&#32;&#32;&#32;&#32;&#32;_M_fill_insert(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(),&#32;__new_size&#32;-&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>(),&#32;__x);
1054 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__new_size&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>())
1055 &#32;&#32;&#32;&#32;&#32;&#32;_M_erase_at_end(this-&gt;_M_impl._M_start&#32;+&#32;__new_size);
1056 &#32;&#32;&#32;&#32;&#32;&#32;}
1057 <emphasis role="preprocessor">#endif</emphasis>
1058 
1059 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1061 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1062 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1063 &#32;&#32;&#32;&#32;&#32;&#32;shrink_to_fit()
1064 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_shrink_to_fit();&#32;}
1065 <emphasis role="preprocessor">#endif</emphasis>
1066 
1071 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
1072 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1073 &#32;&#32;&#32;&#32;&#32;&#32;capacity()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1074 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;size_type(this-&gt;_M_impl._M_end_of_storage
1075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;this-&gt;_M_impl._M_start);&#32;}
1076 
1081 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
1082 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1083 &#32;&#32;&#32;&#32;&#32;&#32;empty()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1084 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;begin()&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();&#32;}
1085 
1103 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1104 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1105 &#32;&#32;&#32;&#32;&#32;&#32;reserve(size_type&#32;__n);
1106 
1107 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;element&#32;access</emphasis>
1119 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
1120 &#32;&#32;&#32;&#32;&#32;&#32;reference
1121 &#32;&#32;&#32;&#32;&#32;&#32;operator[](size_type&#32;__n)&#32;_GLIBCXX_NOEXCEPT
1122 &#32;&#32;&#32;&#32;&#32;&#32;{
1123 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1ab8d8aa1a9d4e3e7b8dbee295f1a9f115">__glibcxx_requires_subscript</link>(__n);
1124 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*(this-&gt;_M_impl._M_start&#32;+&#32;__n);
1125 &#32;&#32;&#32;&#32;&#32;&#32;}
1126 
1138 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
1139 &#32;&#32;&#32;&#32;&#32;&#32;const_reference
1140 &#32;&#32;&#32;&#32;&#32;&#32;operator[](size_type&#32;__n)&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1141 &#32;&#32;&#32;&#32;&#32;&#32;{
1142 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1ab8d8aa1a9d4e3e7b8dbee295f1a9f115">__glibcxx_requires_subscript</link>(__n);
1143 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*(this-&gt;_M_impl._M_start&#32;+&#32;__n);
1144 &#32;&#32;&#32;&#32;&#32;&#32;}
1145 
1146 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
1148 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1149 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1150 &#32;&#32;&#32;&#32;&#32;&#32;_M_range_check(size_type&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
1151 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
1152 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&gt;=&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>())
1153 &#32;&#32;&#32;&#32;&#32;&#32;__throw_out_of_range_fmt(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ad90b1fa000da1666f104c4dd9c0d7f9b">__N</link>(<emphasis role="stringliteral">&quot;vector::_M_range_check:&#32;__n&#32;&quot;</emphasis>
1154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;(which&#32;is&#32;%zu)&#32;&gt;=&#32;this-&gt;size()&#32;&quot;</emphasis>
1155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;(which&#32;is&#32;%zu)&quot;</emphasis>),
1156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__n,&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>());
1157 &#32;&#32;&#32;&#32;&#32;&#32;}
1158 
1159 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1171 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1172 &#32;&#32;&#32;&#32;&#32;&#32;reference
1173 &#32;&#32;&#32;&#32;&#32;&#32;at(size_type&#32;__n)
1174 &#32;&#32;&#32;&#32;&#32;&#32;{
1175 &#32;&#32;&#32;&#32;_M_range_check(__n);
1176 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)[__n];
1177 &#32;&#32;&#32;&#32;&#32;&#32;}
1178 
1190 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1191 &#32;&#32;&#32;&#32;&#32;&#32;const_reference
1192 &#32;&#32;&#32;&#32;&#32;&#32;at(size_type&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
1193 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
1194 &#32;&#32;&#32;&#32;_M_range_check(__n);
1195 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)[__n];
1196 &#32;&#32;&#32;&#32;&#32;&#32;}
1197 
1202 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
1203 &#32;&#32;&#32;&#32;&#32;&#32;reference
1204 &#32;&#32;&#32;&#32;&#32;&#32;front()&#32;_GLIBCXX_NOEXCEPT
1205 &#32;&#32;&#32;&#32;&#32;&#32;{
1206 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a208d3b3e6bd58e9f7f62942c3261fc9b">__glibcxx_requires_nonempty</link>();
1207 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*begin();
1208 &#32;&#32;&#32;&#32;&#32;&#32;}
1209 
1214 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
1215 &#32;&#32;&#32;&#32;&#32;&#32;const_reference
1216 &#32;&#32;&#32;&#32;&#32;&#32;front()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1217 &#32;&#32;&#32;&#32;&#32;&#32;{
1218 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a208d3b3e6bd58e9f7f62942c3261fc9b">__glibcxx_requires_nonempty</link>();
1219 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*begin();
1220 &#32;&#32;&#32;&#32;&#32;&#32;}
1221 
1226 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
1227 &#32;&#32;&#32;&#32;&#32;&#32;reference
1228 &#32;&#32;&#32;&#32;&#32;&#32;back()&#32;_GLIBCXX_NOEXCEPT
1229 &#32;&#32;&#32;&#32;&#32;&#32;{
1230 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a208d3b3e6bd58e9f7f62942c3261fc9b">__glibcxx_requires_nonempty</link>();
1231 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;-&#32;1);
1232 &#32;&#32;&#32;&#32;&#32;&#32;}
1233 
1238 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
1239 &#32;&#32;&#32;&#32;&#32;&#32;const_reference
1240 &#32;&#32;&#32;&#32;&#32;&#32;back()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1241 &#32;&#32;&#32;&#32;&#32;&#32;{
1242 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a208d3b3e6bd58e9f7f62942c3261fc9b">__glibcxx_requires_nonempty</link>();
1243 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;-&#32;1);
1244 &#32;&#32;&#32;&#32;&#32;&#32;}
1245 
1246 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
1247 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;DR&#32;464.&#32;Suggestion&#32;for&#32;new&#32;member&#32;functions&#32;in&#32;standard&#32;containers.</emphasis>
1248 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;data&#32;access</emphasis>
1253 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
1254 &#32;&#32;&#32;&#32;&#32;&#32;_Tp*
1255 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>()&#32;_GLIBCXX_NOEXCEPT
1256 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data_ptr(this-&gt;_M_impl._M_start);&#32;}
1257 
1258 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
1259 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*
1260 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1261 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data_ptr(this-&gt;_M_impl._M_start);&#32;}
1262 
1263 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[23.2.4.3]&#32;modifiers</emphasis>
1274 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1275 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1276 &#32;&#32;&#32;&#32;&#32;&#32;push_back(<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
1277 &#32;&#32;&#32;&#32;&#32;&#32;{
1278 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;_M_impl._M_finish&#32;!=&#32;this-&gt;_M_impl._M_end_of_storage)
1279 &#32;&#32;&#32;&#32;&#32;&#32;{
1280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2stl__vector_8h_1af9af1ca13b28516f3368a403193e082c">_GLIBCXX_ASAN_ANNOTATE_GROW</link>(1);
1281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Alloc_traits::construct(this-&gt;_M_impl,&#32;this-&gt;_M_impl._M_finish,
1282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x);
1283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++this-&gt;_M_impl._M_finish;
1284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2stl__vector_8h_1a666ff63412e58ea7c05bc60aa5028331">_GLIBCXX_ASAN_ANNOTATE_GREW</link>(1);
1285 &#32;&#32;&#32;&#32;&#32;&#32;}
1286 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1287 &#32;&#32;&#32;&#32;&#32;&#32;_M_realloc_insert(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(),&#32;__x);
1288 &#32;&#32;&#32;&#32;&#32;&#32;}
1289 
1290 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1291 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1292 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1293 &#32;&#32;&#32;&#32;&#32;&#32;push_back(value_type&amp;&amp;&#32;__x)
1294 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;emplace_back(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x));&#32;}
1295 
1296 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
1297 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
1298 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1299 &#32;&#32;&#32;&#32;reference
1300 <emphasis role="preprocessor">#else</emphasis>
1301 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1302 <emphasis role="preprocessor">#endif</emphasis>
1303 &#32;&#32;&#32;&#32;emplace_back(_Args&amp;&amp;...&#32;__args);
1304 <emphasis role="preprocessor">#endif</emphasis>
1305 
1315 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1316 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1317 &#32;&#32;&#32;&#32;&#32;&#32;pop_back()&#32;_GLIBCXX_NOEXCEPT
1318 &#32;&#32;&#32;&#32;&#32;&#32;{
1319 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a208d3b3e6bd58e9f7f62942c3261fc9b">__glibcxx_requires_nonempty</link>();
1320 &#32;&#32;&#32;&#32;--this-&gt;_M_impl._M_finish;
1321 &#32;&#32;&#32;&#32;_Alloc_traits::destroy(this-&gt;_M_impl,&#32;this-&gt;_M_impl._M_finish);
1322 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2stl__vector_8h_1a3a22afe977388d5925115680ecf92e8b">_GLIBCXX_ASAN_ANNOTATE_SHRINK</link>(1);
1323 &#32;&#32;&#32;&#32;&#32;&#32;}
1324 
1325 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1338 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
1339 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1340 &#32;&#32;&#32;&#32;iterator
1341 &#32;&#32;&#32;&#32;emplace(const_iterator&#32;__position,&#32;_Args&amp;&amp;...&#32;__args)
1342 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_emplace_aux(__position,&#32;std::forward&lt;_Args&gt;(__args)...);&#32;}
1343 
1355 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1356 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1357 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__position,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x);
1358 <emphasis role="preprocessor">#else</emphasis>
1370 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1371 &#32;&#32;&#32;&#32;&#32;&#32;insert(iterator&#32;__position,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x);
1372 <emphasis role="preprocessor">#endif</emphasis>
1373 
1374 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1386 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1387 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1388 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__position,&#32;value_type&amp;&amp;&#32;__x)
1389 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_insert_rval(__position,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x));&#32;}
1390 
1404 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1405 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1406 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__position,&#32;initializer_list&lt;value_type&gt;&#32;__l)
1407 &#32;&#32;&#32;&#32;&#32;&#32;{
1408 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__offset&#32;=&#32;__position&#32;-&#32;cbegin();
1409 &#32;&#32;&#32;&#32;_M_range_insert(begin()&#32;+&#32;__offset,&#32;__l.begin(),&#32;__l.end(),
1410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::random_access_iterator_tag());
1411 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;begin()&#32;+&#32;__offset;
1412 &#32;&#32;&#32;&#32;&#32;&#32;}
1413 <emphasis role="preprocessor">#endif</emphasis>
1414 
1415 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1430 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1431 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1432 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__position,&#32;size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
1433 &#32;&#32;&#32;&#32;&#32;&#32;{
1434 &#32;&#32;&#32;&#32;difference_type&#32;__offset&#32;=&#32;__position&#32;-&#32;cbegin();
1435 &#32;&#32;&#32;&#32;_M_fill_insert(begin()&#32;+&#32;__offset,&#32;__n,&#32;__x);
1436 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;begin()&#32;+&#32;__offset;
1437 &#32;&#32;&#32;&#32;&#32;&#32;}
1438 <emphasis role="preprocessor">#else</emphasis>
1452 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1453 &#32;&#32;&#32;&#32;&#32;&#32;insert(iterator&#32;__position,&#32;size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
1454 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_fill_insert(__position,&#32;__n,&#32;__x);&#32;}
1455 <emphasis role="preprocessor">#endif</emphasis>
1456 
1457 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1473 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
1474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;std::_RequireInputIter&lt;_InputIterator&gt;&gt;
1475 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1476 &#32;&#32;&#32;&#32;iterator
1477 &#32;&#32;&#32;&#32;insert(const_iterator&#32;__position,&#32;_InputIterator&#32;__first,
1478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator&#32;__last)
1479 &#32;&#32;&#32;&#32;{
1480 &#32;&#32;&#32;&#32;&#32;&#32;difference_type&#32;__offset&#32;=&#32;__position&#32;-&#32;cbegin();
1481 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert_dispatch(begin()&#32;+&#32;__offset,
1482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first,&#32;__last,&#32;__false_type());
1483 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;begin()&#32;+&#32;__offset;
1484 &#32;&#32;&#32;&#32;}
1485 <emphasis role="preprocessor">#else</emphasis>
1500 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1501 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1502 &#32;&#32;&#32;&#32;insert(iterator&#32;__position,&#32;_InputIterator&#32;__first,
1503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator&#32;__last)
1504 &#32;&#32;&#32;&#32;{
1505 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;whether&#32;it&apos;s&#32;an&#32;integral&#32;type.&#32;&#32;If&#32;so,&#32;it&apos;s&#32;not&#32;an&#32;iterator.</emphasis>
1506 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::__is_integer&lt;_InputIterator&gt;::__type&#32;_Integral;
1507 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert_dispatch(__position,&#32;__first,&#32;__last,&#32;_Integral());
1508 &#32;&#32;&#32;&#32;}
1509 <emphasis role="preprocessor">#endif</emphasis>
1510 
1526 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1527 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1528 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1529 &#32;&#32;&#32;&#32;&#32;&#32;erase(const_iterator&#32;__position)
1530 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_erase(begin()&#32;+&#32;(__position&#32;-&#32;cbegin()));&#32;}
1531 <emphasis role="preprocessor">#else</emphasis>
1532 &#32;&#32;&#32;&#32;&#32;&#32;erase(iterator&#32;__position)
1533 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_erase(__position);&#32;}
1534 <emphasis role="preprocessor">#endif</emphasis>
1535 
1554 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1555 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1556 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1557 &#32;&#32;&#32;&#32;&#32;&#32;erase(const_iterator&#32;__first,&#32;const_iterator&#32;__last)
1558 &#32;&#32;&#32;&#32;&#32;&#32;{
1559 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__beg&#32;=&#32;begin();
1560 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__cbeg&#32;=&#32;cbegin();
1561 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_erase(__beg&#32;+&#32;(__first&#32;-&#32;__cbeg),&#32;__beg&#32;+&#32;(__last&#32;-&#32;__cbeg));
1562 &#32;&#32;&#32;&#32;&#32;&#32;}
1563 <emphasis role="preprocessor">#else</emphasis>
1564 &#32;&#32;&#32;&#32;&#32;&#32;erase(iterator&#32;__first,&#32;iterator&#32;__last)
1565 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_erase(__first,&#32;__last);&#32;}
1566 <emphasis role="preprocessor">#endif</emphasis>
1567 
1579 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1580 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1581 &#32;&#32;&#32;&#32;&#32;&#32;swap(vector&amp;&#32;__x)&#32;_GLIBCXX_NOEXCEPT
1582 &#32;&#32;&#32;&#32;&#32;&#32;{
1583 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1584 &#32;&#32;&#32;&#32;__glibcxx_assert(_Alloc_traits::propagate_on_container_swap::value
1585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;_M_get_Tp_allocator()&#32;==&#32;__x._M_get_Tp_allocator());
1586 <emphasis role="preprocessor">#endif</emphasis>
1587 &#32;&#32;&#32;&#32;this-&gt;_M_impl._M_swap_data(__x._M_impl);
1588 &#32;&#32;&#32;&#32;_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
1589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x._M_get_Tp_allocator());
1590 &#32;&#32;&#32;&#32;&#32;&#32;}
1591 
1598 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1599 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1600 &#32;&#32;&#32;&#32;&#32;&#32;clear()&#32;_GLIBCXX_NOEXCEPT
1601 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_erase_at_end(this-&gt;_M_impl._M_start);&#32;}
1602 
1603 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
1608 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
1609 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1610 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
1611 &#32;&#32;&#32;&#32;_M_allocate_and_copy(size_type&#32;__n,
1612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last)
1613 &#32;&#32;&#32;&#32;{
1614 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__result&#32;=&#32;this-&gt;_M_allocate(__n);
1615 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
1616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__uninitialized_copy_a(__first,&#32;__last,&#32;__result,
1618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_get_Tp_allocator());
1619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
1620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1621 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
1622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_deallocate(__result,&#32;__n);
1624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
1625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1626 &#32;&#32;&#32;&#32;}
1627 
1628 
1629 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Internal&#32;constructor&#32;functions&#32;follow.</emphasis>
1630 
1631 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;the&#32;range&#32;constructor&#32;to&#32;implement&#32;[23.1.1]/9</emphasis>
1632 
1633 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
1634 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
1635 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;438.&#32;Ambiguity&#32;in&#32;the&#32;&quot;do&#32;the&#32;right&#32;thing&quot;&#32;clause</emphasis>
1636 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Integer&gt;
1637 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1638 &#32;&#32;&#32;&#32;_M_initialize_dispatch(_Integer&#32;__n,&#32;_Integer&#32;__value,&#32;__true_type)
1639 &#32;&#32;&#32;&#32;{
1640 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_start&#32;=&#32;_M_allocate(_S_check_init_len(
1641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>size_type<emphasis role="keyword">&gt;</emphasis>(__n),&#32;_M_get_Tp_allocator()));
1642 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_end_of_storage&#32;=
1643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_start&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis>size_type<emphasis role="keyword">&gt;</emphasis>(__n);
1644 &#32;&#32;&#32;&#32;&#32;&#32;_M_fill_initialize(<emphasis role="keyword">static_cast&lt;</emphasis>size_type<emphasis role="keyword">&gt;</emphasis>(__n),&#32;__value);
1645 &#32;&#32;&#32;&#32;}
1646 
1647 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;the&#32;range&#32;constructor&#32;to&#32;implement&#32;[23.1.1]/9</emphasis>
1648 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1649 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1650 &#32;&#32;&#32;&#32;_M_initialize_dispatch(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
1651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__false_type)
1652 &#32;&#32;&#32;&#32;{
1653 &#32;&#32;&#32;&#32;&#32;&#32;_M_range_initialize(__first,&#32;__last,
1654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__first));
1655 &#32;&#32;&#32;&#32;}
1656 <emphasis role="preprocessor">#endif</emphasis>
1657 
1658 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;the&#32;second&#32;initialize_dispatch&#32;above</emphasis>
1659 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1660 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1661 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1662 &#32;&#32;&#32;&#32;_M_range_initialize(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
1663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::input_iterator_tag)
1664 &#32;&#32;&#32;&#32;{
1665 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>&#32;{
1666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
1667 #<emphasis role="keywordflow">if</emphasis>&#32;__cplusplus&#32;&gt;=&#32;201103L
1668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;emplace_back(*__first);
1669 <emphasis role="preprocessor">#else</emphasis>
1670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;push_back(*__first);
1671 <emphasis role="preprocessor">#endif</emphasis>
1672 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)&#32;{
1673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;clear();
1674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
1675 &#32;&#32;&#32;&#32;&#32;&#32;}
1676 &#32;&#32;&#32;&#32;}
1677 
1678 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;the&#32;second&#32;initialize_dispatch&#32;above</emphasis>
1679 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
1680 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1681 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1682 &#32;&#32;&#32;&#32;_M_range_initialize(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
1683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward_iterator_tag)
1684 &#32;&#32;&#32;&#32;{
1685 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__n&#32;=&#32;std::distance(__first,&#32;__last);
1686 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_start
1687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;this-&gt;_M_allocate(_S_check_init_len(__n,&#32;_M_get_Tp_allocator()));
1688 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_end_of_storage&#32;=&#32;this-&gt;_M_impl._M_start&#32;+&#32;__n;
1689 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_finish&#32;=
1690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__uninitialized_copy_a(__first,&#32;__last,
1691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_start,
1692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_get_Tp_allocator());
1693 &#32;&#32;&#32;&#32;}
1694 
1695 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;the&#32;first&#32;initialize_dispatch&#32;above&#32;and&#32;by&#32;the</emphasis>
1696 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;vector(n,value,a)&#32;constructor.</emphasis>
1697 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1698 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1699 &#32;&#32;&#32;&#32;&#32;&#32;_M_fill_initialize(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__value)
1700 &#32;&#32;&#32;&#32;&#32;&#32;{
1701 &#32;&#32;&#32;&#32;this-&gt;_M_impl._M_finish&#32;=
1702 &#32;&#32;&#32;&#32;&#32;&#32;std::__uninitialized_fill_n_a(this-&gt;_M_impl._M_start,&#32;__n,&#32;__value,
1703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_get_Tp_allocator());
1704 &#32;&#32;&#32;&#32;&#32;&#32;}
1705 
1706 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1707 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;the&#32;vector(n)&#32;constructor.</emphasis>
1708 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1709 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1710 &#32;&#32;&#32;&#32;&#32;&#32;_M_default_initialize(size_type&#32;__n)
1711 &#32;&#32;&#32;&#32;&#32;&#32;{
1712 &#32;&#32;&#32;&#32;this-&gt;_M_impl._M_finish&#32;=
1713 &#32;&#32;&#32;&#32;&#32;&#32;std::__uninitialized_default_n_a(this-&gt;_M_impl._M_start,&#32;__n,
1714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_get_Tp_allocator());
1715 &#32;&#32;&#32;&#32;&#32;&#32;}
1716 <emphasis role="preprocessor">#endif</emphasis>
1717 
1718 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Internal&#32;assign&#32;functions&#32;follow.&#32;&#32;The&#32;*_aux&#32;functions&#32;do&#32;the&#32;actual</emphasis>
1719 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;assignment&#32;work&#32;for&#32;the&#32;range&#32;versions.</emphasis>
1720 
1721 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;the&#32;range&#32;assign&#32;to&#32;implement&#32;[23.1.1]/9</emphasis>
1722 
1723 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
1724 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;438.&#32;Ambiguity&#32;in&#32;the&#32;&quot;do&#32;the&#32;right&#32;thing&quot;&#32;clause</emphasis>
1725 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Integer&gt;
1726 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1727 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1728 &#32;&#32;&#32;&#32;_M_assign_dispatch(_Integer&#32;__n,&#32;_Integer&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;__true_type)
1729 &#32;&#32;&#32;&#32;{&#32;_M_fill_assign(__n,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);&#32;}
1730 
1731 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;the&#32;range&#32;assign&#32;to&#32;implement&#32;[23.1.1]/9</emphasis>
1732 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1733 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1734 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1735 &#32;&#32;&#32;&#32;_M_assign_dispatch(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
1736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__false_type)
1737 &#32;&#32;&#32;&#32;{&#32;_M_assign_aux(__first,&#32;__last,&#32;std::__iterator_category(__first));&#32;}
1738 
1739 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;the&#32;second&#32;assign_dispatch&#32;above</emphasis>
1740 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1741 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1742 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1743 &#32;&#32;&#32;&#32;_M_assign_aux(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
1744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::input_iterator_tag);
1745 
1746 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;the&#32;second&#32;assign_dispatch&#32;above</emphasis>
1747 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
1748 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1749 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1750 &#32;&#32;&#32;&#32;_M_assign_aux(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
1751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward_iterator_tag);
1752 
1753 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;assign(n,t),&#32;and&#32;the&#32;range&#32;assign&#32;when&#32;it&#32;turns&#32;out</emphasis>
1754 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;to&#32;be&#32;the&#32;same&#32;thing.</emphasis>
1755 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1756 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1757 &#32;&#32;&#32;&#32;&#32;&#32;_M_fill_assign(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
1758 
1759 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Internal&#32;insert&#32;functions&#32;follow.</emphasis>
1760 
1761 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;the&#32;range&#32;insert&#32;to&#32;implement&#32;[23.1.1]/9</emphasis>
1762 
1763 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
1764 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;438.&#32;Ambiguity&#32;in&#32;the&#32;&quot;do&#32;the&#32;right&#32;thing&quot;&#32;clause</emphasis>
1765 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Integer&gt;
1766 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1767 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1768 &#32;&#32;&#32;&#32;_M_insert_dispatch(iterator&#32;__pos,&#32;_Integer&#32;__n,&#32;_Integer&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,
1769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__true_type)
1770 &#32;&#32;&#32;&#32;{&#32;_M_fill_insert(__pos,&#32;__n,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);&#32;}
1771 
1772 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;the&#32;range&#32;insert&#32;to&#32;implement&#32;[23.1.1]/9</emphasis>
1773 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1774 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1775 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1776 &#32;&#32;&#32;&#32;_M_insert_dispatch(iterator&#32;__pos,&#32;_InputIterator&#32;__first,
1777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator&#32;__last,&#32;__false_type)
1778 &#32;&#32;&#32;&#32;{
1779 &#32;&#32;&#32;&#32;&#32;&#32;_M_range_insert(__pos,&#32;__first,&#32;__last,
1780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__first));
1781 &#32;&#32;&#32;&#32;}
1782 
1783 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;the&#32;second&#32;insert_dispatch&#32;above</emphasis>
1784 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1785 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1786 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1787 &#32;&#32;&#32;&#32;_M_range_insert(iterator&#32;__pos,&#32;_InputIterator&#32;__first,
1788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator&#32;__last,&#32;std::input_iterator_tag);
1789 
1790 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;the&#32;second&#32;insert_dispatch&#32;above</emphasis>
1791 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
1792 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1793 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1794 &#32;&#32;&#32;&#32;_M_range_insert(iterator&#32;__pos,&#32;_ForwardIterator&#32;__first,
1795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__last,&#32;std::forward_iterator_tag);
1796 
1797 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;insert(p,n,x),&#32;and&#32;the&#32;range&#32;insert&#32;when&#32;it&#32;turns&#32;out&#32;to&#32;be</emphasis>
1798 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;same&#32;thing.</emphasis>
1799 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1800 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1801 &#32;&#32;&#32;&#32;&#32;&#32;_M_fill_insert(iterator&#32;__pos,&#32;size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x);
1802 
1803 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1804 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;resize(n).</emphasis>
1805 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1806 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1807 &#32;&#32;&#32;&#32;&#32;&#32;_M_default_append(size_type&#32;__n);
1808 
1809 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1810 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1811 &#32;&#32;&#32;&#32;&#32;&#32;_M_shrink_to_fit();
1812 <emphasis role="preprocessor">#endif</emphasis>
1813 
1814 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
1815 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;insert(p,x)</emphasis>
1816 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1817 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert_aux(iterator&#32;__position,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x);
1818 
1819 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1820 &#32;&#32;&#32;&#32;&#32;&#32;_M_realloc_insert(iterator&#32;__position,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x);
1821 <emphasis role="preprocessor">#else</emphasis>
1822 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;A&#32;value_type&#32;object&#32;constructed&#32;with&#32;_Alloc_traits::construct()</emphasis>
1823 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;and&#32;destroyed&#32;with&#32;_Alloc_traits::destroy().</emphasis>
1824 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Temporary_value
1825 &#32;&#32;&#32;&#32;&#32;&#32;{
1826 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
1827 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR&#32;<emphasis role="keyword">explicit</emphasis>
1828 &#32;&#32;&#32;&#32;&#32;&#32;_Temporary_value(vector*&#32;__vec,&#32;_Args&amp;&amp;...&#32;__args)&#32;:&#32;_M_this(__vec)
1829 &#32;&#32;&#32;&#32;&#32;&#32;{
1830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Alloc_traits::construct(_M_this-&gt;_M_impl,&#32;_M_ptr(),
1831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Args&gt;(__args)...);
1832 &#32;&#32;&#32;&#32;&#32;&#32;}
1833 
1834 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1835 &#32;&#32;&#32;&#32;~_Temporary_value()
1836 &#32;&#32;&#32;&#32;{&#32;_Alloc_traits::destroy(_M_this-&gt;_M_impl,&#32;_M_ptr());&#32;}
1837 
1838 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR&#32;value_type&amp;
1839 &#32;&#32;&#32;&#32;_M_val()&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_storage._M_val;&#32;}
1840 
1841 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1842 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR&#32;_Tp*
1843 &#32;&#32;&#32;&#32;_M_ptr()&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__addressof(_M_storage._M_val);&#32;}
1844 
1845 &#32;&#32;&#32;&#32;<emphasis role="keyword">union&#32;</emphasis>_Storage
1846 &#32;&#32;&#32;&#32;{
1847 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Storage()&#32;:&#32;_M_byte()&#32;{&#32;}
1848 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR&#32;~_Storage()&#32;{&#32;}
1849 &#32;&#32;&#32;&#32;&#32;&#32;_Storage&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;_Storage&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
1850 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;_M_byte;
1851 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;_M_val;
1852 &#32;&#32;&#32;&#32;};
1853 
1854 &#32;&#32;&#32;&#32;vector*&#32;&#32;_M_this;
1855 &#32;&#32;&#32;&#32;_Storage&#32;_M_storage;
1856 &#32;&#32;&#32;&#32;&#32;&#32;};
1857 
1858 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;insert(p,x)&#32;and&#32;other&#32;functions&#32;when&#32;insertion&#32;needs&#32;to</emphasis>
1859 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;reallocate&#32;or&#32;move&#32;existing&#32;elements.&#32;_Arg&#32;is&#32;either&#32;_Tp&amp;&#32;or&#32;_Tp.</emphasis>
1860 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Arg&gt;
1861 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1862 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1863 &#32;&#32;&#32;&#32;_M_insert_aux(iterator&#32;__position,&#32;_Arg&amp;&amp;&#32;__arg);
1864 
1865 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
1866 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1867 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1868 &#32;&#32;&#32;&#32;_M_realloc_insert(iterator&#32;__position,&#32;_Args&amp;&amp;...&#32;__args);
1869 
1870 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Either&#32;move-construct&#32;at&#32;the&#32;end,&#32;or&#32;forward&#32;to&#32;_M_insert_aux.</emphasis>
1871 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1872 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1873 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert_rval(const_iterator&#32;__position,&#32;value_type&amp;&amp;&#32;__v);
1874 
1875 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Try&#32;to&#32;emplace&#32;at&#32;the&#32;end,&#32;otherwise&#32;forward&#32;to&#32;_M_insert_aux.</emphasis>
1876 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
1877 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1878 &#32;&#32;&#32;&#32;iterator
1879 &#32;&#32;&#32;&#32;_M_emplace_aux(const_iterator&#32;__position,&#32;_Args&amp;&amp;...&#32;__args);
1880 
1881 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Emplacing&#32;an&#32;rvalue&#32;of&#32;the&#32;correct&#32;type&#32;can&#32;use&#32;_M_insert_rval.</emphasis>
1882 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1883 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1884 &#32;&#32;&#32;&#32;&#32;&#32;_M_emplace_aux(const_iterator&#32;__position,&#32;value_type&amp;&amp;&#32;__v)
1885 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_insert_rval(__position,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__v));&#32;}
1886 <emphasis role="preprocessor">#endif</emphasis>
1887 
1888 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;_M_fill_insert,&#32;_M_insert_aux&#32;etc.</emphasis>
1889 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1890 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1891 &#32;&#32;&#32;&#32;&#32;&#32;_M_check_len(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__s)<emphasis role="keyword">&#32;const</emphasis>
1892 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
1893 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(max_size()&#32;-&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;&lt;&#32;__n)
1894 &#32;&#32;&#32;&#32;&#32;&#32;__throw_length_error(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ad90b1fa000da1666f104c4dd9c0d7f9b">__N</link>(__s));
1895 
1896 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__len&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;+&#32;(std::max)(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>(),&#32;__n);
1897 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__len&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;||&#32;__len&#32;&gt;&#32;max_size())&#32;?&#32;max_size()&#32;:&#32;__len;
1898 &#32;&#32;&#32;&#32;&#32;&#32;}
1899 
1900 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;constructors&#32;to&#32;check&#32;initial&#32;size.</emphasis>
1901 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;size_type
1902 &#32;&#32;&#32;&#32;&#32;&#32;_S_check_init_len(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
1903 &#32;&#32;&#32;&#32;&#32;&#32;{
1904 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&gt;&#32;_S_max_size(_Tp_alloc_type(__a)))
1905 &#32;&#32;&#32;&#32;&#32;&#32;__throw_length_error(
1906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ad90b1fa000da1666f104c4dd9c0d7f9b">__N</link>(<emphasis role="stringliteral">&quot;cannot&#32;create&#32;std::vector&#32;larger&#32;than&#32;max_size()&quot;</emphasis>));
1907 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__n;
1908 &#32;&#32;&#32;&#32;&#32;&#32;}
1909 
1910 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;size_type
1911 &#32;&#32;&#32;&#32;&#32;&#32;_S_max_size(<emphasis role="keyword">const</emphasis>&#32;_Tp_alloc_type&amp;&#32;__a)&#32;_GLIBCXX_NOEXCEPT
1912 &#32;&#32;&#32;&#32;&#32;&#32;{
1913 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::distance(begin(),&#32;end())&#32;cannot&#32;be&#32;greater&#32;than&#32;PTRDIFF_MAX,</emphasis>
1914 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;and&#32;realistically&#32;we&#32;can&apos;t&#32;store&#32;more&#32;than&#32;PTRDIFF_MAX/sizeof(T)</emphasis>
1915 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(even&#32;if&#32;std::allocator_traits::max_size&#32;says&#32;we&#32;can).</emphasis>
1916 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__diffmax
1917 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__gnu_cxx::__numeric_traits&lt;ptrdiff_t&gt;::__max&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp);
1918 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__allocmax&#32;=&#32;_Alloc_traits::max_size(__a);
1919 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(std::min)(__diffmax,&#32;__allocmax);
1920 &#32;&#32;&#32;&#32;&#32;&#32;}
1921 
1922 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Internal&#32;erase&#32;functions&#32;follow.</emphasis>
1923 
1924 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;erase(q1,q2),&#32;clear(),&#32;resize(),&#32;_M_fill_assign,</emphasis>
1925 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_M_assign_aux.</emphasis>
1926 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1927 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1928 &#32;&#32;&#32;&#32;&#32;&#32;_M_erase_at_end(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__pos)&#32;_GLIBCXX_NOEXCEPT
1929 &#32;&#32;&#32;&#32;&#32;&#32;{
1930 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size_type&#32;__n&#32;=&#32;this-&gt;_M_impl._M_finish&#32;-&#32;__pos)
1931 &#32;&#32;&#32;&#32;&#32;&#32;{
1932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::_Destroy(__pos,&#32;this-&gt;_M_impl._M_finish,
1933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_get_Tp_allocator());
1934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_finish&#32;=&#32;__pos;
1935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2stl__vector_8h_1a3a22afe977388d5925115680ecf92e8b">_GLIBCXX_ASAN_ANNOTATE_SHRINK</link>(__n);
1936 &#32;&#32;&#32;&#32;&#32;&#32;}
1937 &#32;&#32;&#32;&#32;&#32;&#32;}
1938 
1939 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1940 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1941 &#32;&#32;&#32;&#32;&#32;&#32;_M_erase(iterator&#32;__position);
1942 
1943 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1944 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1945 &#32;&#32;&#32;&#32;&#32;&#32;_M_erase(iterator&#32;__first,&#32;iterator&#32;__last);
1946 
1947 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1948 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1949 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Constant-time&#32;move&#32;assignment&#32;when&#32;source&#32;object&apos;s&#32;memory&#32;can&#32;be</emphasis>
1950 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;moved,&#32;either&#32;because&#32;the&#32;source&apos;s&#32;allocator&#32;will&#32;move&#32;too</emphasis>
1951 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;or&#32;because&#32;the&#32;allocators&#32;are&#32;equal.</emphasis>
1952 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1953 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1954 &#32;&#32;&#32;&#32;&#32;&#32;_M_move_assign(vector&amp;&amp;&#32;__x,&#32;true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1955 &#32;&#32;&#32;&#32;&#32;&#32;{
1956 &#32;&#32;&#32;&#32;vector&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>(get_allocator());
1957 &#32;&#32;&#32;&#32;this-&gt;_M_impl._M_swap_data(__x._M_impl);
1958 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>._M_impl._M_swap_data(__x._M_impl);
1959 &#32;&#32;&#32;&#32;std::__alloc_on_move(_M_get_Tp_allocator(),&#32;__x._M_get_Tp_allocator());
1960 &#32;&#32;&#32;&#32;&#32;&#32;}
1961 
1962 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Do&#32;move&#32;assignment&#32;when&#32;it&#32;might&#32;not&#32;be&#32;possible&#32;to&#32;move&#32;source</emphasis>
1963 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;object&apos;s&#32;memory,&#32;resulting&#32;in&#32;a&#32;linear-time&#32;operation.</emphasis>
1964 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1965 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1966 &#32;&#32;&#32;&#32;&#32;&#32;_M_move_assign(vector&amp;&amp;&#32;__x,&#32;false_type)
1967 &#32;&#32;&#32;&#32;&#32;&#32;{
1968 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x._M_get_Tp_allocator()&#32;==&#32;this-&gt;_M_get_Tp_allocator())
1969 &#32;&#32;&#32;&#32;&#32;&#32;_M_move_assign(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x),&#32;true_type());
1970 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1971 &#32;&#32;&#32;&#32;&#32;&#32;{
1972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;rvalue&apos;s&#32;allocator&#32;cannot&#32;be&#32;moved&#32;and&#32;is&#32;not&#32;equal,</emphasis>
1973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;so&#32;we&#32;need&#32;to&#32;individually&#32;move&#32;each&#32;element.</emphasis>
1974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_assign_aux(std::make_move_iterator(__x.begin()),
1975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::make_move_iterator(__x.end()),
1976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::random_access_iterator_tag());
1977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x.clear();
1978 &#32;&#32;&#32;&#32;&#32;&#32;}
1979 &#32;&#32;&#32;&#32;&#32;&#32;}
1980 <emphasis role="preprocessor">#endif</emphasis>
1981 
1982 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
1983 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1984 &#32;&#32;&#32;&#32;_Up*
1985 &#32;&#32;&#32;&#32;_M_data_ptr(_Up*&#32;__ptr)&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1986 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ptr;&#32;}
1987 
1988 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1989 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ptr&gt;
1990 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1991 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::pointer_traits&lt;_Ptr&gt;::element_type*
1992 &#32;&#32;&#32;&#32;_M_data_ptr(_Ptr&#32;__ptr)<emphasis role="keyword">&#32;const</emphasis>
1993 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;empty()&#32;?&#32;nullptr&#32;:&#32;std::__to_address(__ptr);&#32;}
1994 <emphasis role="preprocessor">#else</emphasis>
1995 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
1996 &#32;&#32;&#32;&#32;_Up*
1997 &#32;&#32;&#32;&#32;_M_data_ptr(_Up*&#32;__ptr)&#32;_GLIBCXX_NOEXCEPT
1998 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ptr;&#32;}
1999 
2000 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ptr&gt;
2001 &#32;&#32;&#32;&#32;value_type*
2002 &#32;&#32;&#32;&#32;_M_data_ptr(_Ptr&#32;__ptr)
2003 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;empty()&#32;?&#32;(value_type*)0&#32;:&#32;__ptr.operator-&gt;();&#32;}
2004 
2005 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ptr&gt;
2006 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;value_type*
2007 &#32;&#32;&#32;&#32;_M_data_ptr(_Ptr&#32;__ptr)<emphasis role="keyword">&#32;const</emphasis>
2008 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;empty()&#32;?&#32;(<emphasis role="keyword">const</emphasis>&#32;value_type*)0&#32;:&#32;__ptr.operator-&gt;();&#32;}
2009 <emphasis role="preprocessor">#endif</emphasis>
2010 &#32;&#32;&#32;&#32;};
2011 
2012 <emphasis role="preprocessor">#if&#32;__cpp_deduction_guides&#32;&gt;=&#32;201606</emphasis>
2013 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ValT
2014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type,
2015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&#32;=&#32;allocator&lt;_ValT&gt;,
2016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;,
2017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
2018 &#32;&#32;&#32;&#32;vector(_InputIterator,&#32;_InputIterator,&#32;_Allocator&#32;=&#32;_Allocator())
2019 &#32;&#32;&#32;&#32;&#32;&#32;-&gt;&#32;vector&lt;_ValT,&#32;_Allocator&gt;;
2020 <emphasis role="preprocessor">#endif</emphasis>
2021 
2032 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2033 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2034 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2035 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;vector&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;vector&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__y)
2036 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__x.size()&#32;==&#32;__y.size()
2037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="_namespacestd_1a94ada91841cca21a2327b0235f9a82cd">std::equal</link>(__x.begin(),&#32;__x.end(),&#32;__y.begin()));&#32;}
2038 
2039 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
2051 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2052 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2053 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;__detail::__synth3way_t&lt;_Tp&gt;
2054 &#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;vector&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;vector&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__y)
2055 &#32;&#32;&#32;&#32;{
2056 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::lexicographical_compare_three_way(__x.begin(),&#32;__x.end(),
2057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__y.begin(),&#32;__y.end(),
2058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::__synth3way);
2059 &#32;&#32;&#32;&#32;}
2060 <emphasis role="preprocessor">#else</emphasis>
2072 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2073 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2074 &#32;&#32;&#32;&#32;operator&lt;(<emphasis role="keyword">const</emphasis>&#32;vector&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;vector&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__y)
2075 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a076cfce541233dc2534e44d067d41ad4">std::lexicographical_compare</link>(__x.begin(),&#32;__x.end(),
2076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__y.begin(),&#32;__y.end());&#32;}
2077 
2079 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2080 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2081 &#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;vector&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;vector&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__y)
2082 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__x&#32;==&#32;__y);&#32;}
2083 
2085 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2086 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2087 &#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;vector&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;vector&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__y)
2088 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__y&#32;&lt;&#32;__x;&#32;}
2089 
2091 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2092 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2093 &#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;vector&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;vector&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__y)
2094 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__y&#32;&lt;&#32;__x);&#32;}
2095 
2097 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2098 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2099 &#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;vector&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;vector&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__y)
2100 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__x&#32;&lt;&#32;__y);&#32;}
2101 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;three-way&#32;comparison</emphasis>
2102 
2104 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2105 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2106 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
2107 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(vector&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__x,&#32;vector&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__y)
2108 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT_IF(<emphasis role="keyword">noexcept</emphasis>(__x.swap(__y)))
2109 &#32;&#32;&#32;&#32;{&#32;__x.swap(__y);&#32;}
2110 
2111 _GLIBCXX_END_NAMESPACE_CONTAINER
2112 
2113 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
2114 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>__detail::__variant
2115 &#32;&#32;{
2116 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Never_valueless_alt;&#32;<emphasis role="comment">//&#32;see&#32;&lt;variant&gt;</emphasis>
2117 
2118 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Provide&#32;the&#32;strong&#32;exception-safety&#32;guarantee&#32;when&#32;emplacing&#32;a</emphasis>
2119 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;vector&#32;into&#32;a&#32;variant,&#32;but&#32;only&#32;if&#32;move&#32;assignment&#32;cannot&#32;throw.</emphasis>
2120 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2121 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Never_valueless_alt&lt;_GLIBCXX_STD_C::vector&lt;_Tp,&#32;_Alloc&gt;&gt;
2122 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;std::is_nothrow_move_assignable&lt;_GLIBCXX_STD_C::vector&lt;_Tp,&#32;_Alloc&gt;&gt;
2123 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;};
2124 &#32;&#32;}&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;__detail::__variant</emphasis>
2125 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
2126 
2127 _GLIBCXX_END_NAMESPACE_VERSION
2128 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
2129 
2130 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_STL_VECTOR_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
