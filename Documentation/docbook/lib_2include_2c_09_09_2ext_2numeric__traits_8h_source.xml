<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2ext_2numeric__traits_8h_source" xml:lang="en-US">
<title>numeric_traits.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/ext/numeric_traits.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2007-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
29 <emphasis role="preprocessor">#ifndef&#32;_EXT_NUMERIC_TRAITS</emphasis>
30 <emphasis role="preprocessor">#define&#32;_EXT_NUMERIC_TRAITS&#32;1</emphasis>
31 
32 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
33 
34 <emphasis role="preprocessor">#include&#32;&lt;bits/cpp_type_traits.h&gt;</emphasis>
35 <emphasis role="preprocessor">#include&#32;&lt;ext/type_traits.h&gt;</emphasis>
36 
37 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__cxx">__gnu_cxx</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
38 {
39 _GLIBCXX_BEGIN_NAMESPACE_VERSION
40 
41 &#32;&#32;<emphasis role="comment">//&#32;Compile&#32;time&#32;constants&#32;for&#32;builtin&#32;types.</emphasis>
42 &#32;&#32;<emphasis role="comment">//&#32;In&#32;C++98&#32;std::numeric_limits&#32;member&#32;functions&#32;are&#32;not&#32;constant&#32;expressions</emphasis>
43 &#32;&#32;<emphasis role="comment">//&#32;(that&#32;changed&#32;in&#32;C++11&#32;with&#32;the&#32;addition&#32;of&#32;&apos;constexpr&apos;).</emphasis>
44 &#32;&#32;<emphasis role="comment">//&#32;Even&#32;for&#32;C++11,&#32;this&#32;header&#32;is&#32;smaller&#32;than&#32;&lt;limits&gt;&#32;and&#32;can&#32;be&#32;used</emphasis>
45 &#32;&#32;<emphasis role="comment">//&#32;when&#32;only&#32;is_signed,&#32;digits,&#32;min,&#32;or&#32;max&#32;values&#32;are&#32;needed&#32;for&#32;integers,</emphasis>
46 &#32;&#32;<emphasis role="comment">//&#32;or&#32;is_signed,&#32;digits10,&#32;max_digits10,&#32;or&#32;max_exponent10&#32;for&#32;floats.</emphasis>
47 
48 &#32;&#32;<emphasis role="comment">//&#32;Unlike&#32;__is_integer&#32;(and&#32;std::is_integral)&#32;this&#32;trait&#32;is&#32;true&#32;for</emphasis>
49 &#32;&#32;<emphasis role="comment">//&#32;non-standard&#32;built-in&#32;integer&#32;types&#32;such&#32;as&#32;__int128&#32;and&#32;__int20.</emphasis>
50 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
51 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_integer_nonstrict
52 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;std::__is_integer&lt;_Tp&gt;
53 &#32;&#32;&#32;&#32;{
54 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::__is_integer&lt;_Tp&gt;::__value;
55 
56 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;number&#32;of&#32;bits&#32;in&#32;the&#32;value&#32;representation.</emphasis>
57 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__width&#32;=&#32;__value&#32;?&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;*&#32;__CHAR_BIT__&#32;:&#32;0&#32;};
58 &#32;&#32;&#32;&#32;};
59 
60 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Value&gt;
61 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__numeric_traits_integer
62 &#32;&#32;&#32;&#32;{
63 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
64 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__is_integer_nonstrict&lt;_Value&gt;::__value,
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;invalid&#32;specialization&quot;</emphasis>);
66 <emphasis role="preprocessor">#endif</emphasis>
67 
68 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NB:&#32;these&#32;two&#32;are&#32;also&#32;available&#32;in&#32;std::numeric_limits&#32;as&#32;compile</emphasis>
69 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;time&#32;constants,&#32;but&#32;&lt;limits&gt;&#32;is&#32;big&#32;and&#32;we&#32;can&#32;avoid&#32;including&#32;it.</emphasis>
70 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_signed&#32;=&#32;(_Value)(-1)&#32;&lt;&#32;0;
71 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__digits
72 &#32;&#32;&#32;&#32;=&#32;__is_integer_nonstrict&lt;_Value&gt;::__width&#32;-&#32;__is_signed;
73 
74 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;initializers&#32;must&#32;be&#32;constants&#32;so&#32;that&#32;__max&#32;and&#32;__min&#32;are&#32;too.</emphasis>
75 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Value&#32;__max&#32;=&#32;__is_signed
76 &#32;&#32;&#32;&#32;?&#32;(((((_Value)1&#32;&lt;&lt;&#32;(__digits&#32;-&#32;1))&#32;-&#32;1)&#32;&lt;&lt;&#32;1)&#32;+&#32;1)
77 &#32;&#32;&#32;&#32;:&#32;~(_Value)0;
78 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Value&#32;__min&#32;=&#32;__is_signed&#32;?&#32;-__max&#32;-&#32;1&#32;:&#32;(_Value)0;
79 &#32;&#32;&#32;&#32;};
80 
81 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Value&gt;
82 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Value&#32;__numeric_traits_integer&lt;_Value&gt;::__min;
83 
84 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Value&gt;
85 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Value&#32;__numeric_traits_integer&lt;_Value&gt;::__max;
86 
87 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Value&gt;
88 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__numeric_traits_integer&lt;_Value&gt;::__is_signed;
89 
90 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Value&gt;
91 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__numeric_traits_integer&lt;_Value&gt;::__digits;
92 
93 &#32;&#32;<emphasis role="comment">//&#32;Enable&#32;__numeric_traits_integer&#32;for&#32;types&#32;where&#32;the&#32;__is_integer_nonstrict</emphasis>
94 &#32;&#32;<emphasis role="comment">//&#32;primary&#32;template&#32;doesn&apos;t&#32;give&#32;the&#32;right&#32;answer.</emphasis>
95 <emphasis role="preprocessor">#define&#32;_GLIBCXX_INT_N_TRAITS(T,&#32;WIDTH)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
96 <emphasis role="preprocessor">&#32;&#32;__extension__&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
97 <emphasis role="preprocessor">&#32;&#32;template&lt;&gt;&#32;struct&#32;__is_integer_nonstrict&lt;T&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
98 <emphasis role="preprocessor">&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
99 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;enum&#32;{&#32;__value&#32;=&#32;1&#32;};&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
100 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;typedef&#32;std::__true_type&#32;__type;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
101 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;enum&#32;{&#32;__width&#32;=&#32;WIDTH&#32;};&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
102 <emphasis role="preprocessor">&#32;&#32;};&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
103 <emphasis role="preprocessor">&#32;&#32;__extension__&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
104 <emphasis role="preprocessor">&#32;&#32;template&lt;&gt;&#32;struct&#32;__is_integer_nonstrict&lt;unsigned&#32;T&gt;&#32;&#32;\</emphasis>
105 <emphasis role="preprocessor">&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
106 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;enum&#32;{&#32;__value&#32;=&#32;1&#32;};&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
107 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;typedef&#32;std::__true_type&#32;__type;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
108 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;enum&#32;{&#32;__width&#32;=&#32;WIDTH&#32;};&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
109 <emphasis role="preprocessor">&#32;&#32;};</emphasis>
110 
111 &#32;&#32;<emphasis role="comment">//&#32;We&#32;need&#32;to&#32;specify&#32;the&#32;width&#32;for&#32;some&#32;__intNN&#32;types&#32;because&#32;they</emphasis>
112 &#32;&#32;<emphasis role="comment">//&#32;have&#32;padding&#32;bits,&#32;e.g.&#32;the&#32;object&#32;representation&#32;of&#32;__int20&#32;has&#32;32&#32;bits,</emphasis>
113 &#32;&#32;<emphasis role="comment">//&#32;but&#32;its&#32;width&#32;(number&#32;of&#32;bits&#32;in&#32;the&#32;value&#32;representation)&#32;is&#32;only&#32;20.</emphasis>
114 <emphasis role="preprocessor">#if&#32;defined&#32;__GLIBCXX_TYPE_INT_N_0&#32;&amp;&amp;&#32;__GLIBCXX_BITSIZE_INT_N_0&#32;%&#32;__CHAR_BIT__</emphasis>
115 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2numeric__traits_8h_1ad39099fd478607370484eea45c565301">_GLIBCXX_INT_N_TRAITS</link>(__GLIBCXX_TYPE_INT_N_0,&#32;__GLIBCXX_BITSIZE_INT_N_0)
116 <emphasis role="preprocessor">#endif</emphasis>
117 <emphasis role="preprocessor">#if&#32;defined&#32;__GLIBCXX_TYPE_INT_N_1&#32;&amp;&amp;&#32;__GLIBCXX_BITSIZE_INT_N_1&#32;%&#32;__CHAR_BIT__</emphasis>
118 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2numeric__traits_8h_1ad39099fd478607370484eea45c565301">_GLIBCXX_INT_N_TRAITS</link>(__GLIBCXX_TYPE_INT_N_1,&#32;__GLIBCXX_BITSIZE_INT_N_1)
119 <emphasis role="preprocessor">#endif</emphasis>
120 <emphasis role="preprocessor">#if&#32;defined&#32;__GLIBCXX_TYPE_INT_N_2&#32;&amp;&amp;&#32;__GLIBCXX_BITSIZE_INT_N_2&#32;%&#32;__CHAR_BIT__</emphasis>
121 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2numeric__traits_8h_1ad39099fd478607370484eea45c565301">_GLIBCXX_INT_N_TRAITS</link>(__GLIBCXX_TYPE_INT_N_2,&#32;__GLIBCXX_BITSIZE_INT_N_2)
122 <emphasis role="preprocessor">#endif</emphasis>
123 <emphasis role="preprocessor">#if&#32;defined&#32;__GLIBCXX_TYPE_INT_N_3&#32;&amp;&amp;&#32;__GLIBCXX_BITSIZE_INT_N_3&#32;%&#32;__CHAR_BIT__</emphasis>
124 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2numeric__traits_8h_1ad39099fd478607370484eea45c565301">_GLIBCXX_INT_N_TRAITS</link>(__GLIBCXX_TYPE_INT_N_3,&#32;__GLIBCXX_BITSIZE_INT_N_3)
125 <emphasis role="preprocessor">#endif</emphasis>
126 
127 <emphasis role="preprocessor">#if&#32;defined&#32;__STRICT_ANSI__&#32;&amp;&amp;&#32;defined&#32;__SIZEOF_INT128__</emphasis>
128 &#32;&#32;<emphasis role="comment">//&#32;In&#32;strict&#32;modes&#32;__is_integer&lt;__int128&gt;&#32;is&#32;false,</emphasis>
129 &#32;&#32;<emphasis role="comment">//&#32;but&#32;we&#32;still&#32;want&#32;to&#32;define&#32;__numeric_traits_integer&lt;__int128&gt;.</emphasis>
130 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2numeric__traits_8h_1ad39099fd478607370484eea45c565301">_GLIBCXX_INT_N_TRAITS</link>(__int128,&#32;128)
131 <emphasis role="preprocessor">#endif</emphasis>
132 
133 <emphasis role="preprocessor">#undef&#32;_GLIBCXX_INT_N_TRAITS</emphasis>
134 
135 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
137 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
138 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__int_traits&#32;=&#32;__numeric_traits_integer&lt;_Tp&gt;;
139 <emphasis role="preprocessor">#endif</emphasis>
140 
141 <emphasis role="preprocessor">#define&#32;__glibcxx_floating(_Tp,&#32;_Fval,&#32;_Dval,&#32;_LDval)&#32;\</emphasis>
142 <emphasis role="preprocessor">&#32;&#32;(std::__are_same&lt;_Tp,&#32;float&gt;::__value&#32;?&#32;_Fval&#32;\</emphasis>
143 <emphasis role="preprocessor">&#32;&#32;&#32;:&#32;std::__are_same&lt;_Tp,&#32;double&gt;::__value&#32;?&#32;_Dval&#32;:&#32;_LDval)</emphasis>
144 
145 <emphasis role="preprocessor">#define&#32;__glibcxx_max_digits10(_Tp)&#32;\</emphasis>
146 <emphasis role="preprocessor">&#32;&#32;(2&#32;+&#32;__glibcxx_floating(_Tp,&#32;__FLT_MANT_DIG__,&#32;__DBL_MANT_DIG__,&#32;\</emphasis>
147 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__LDBL_MANT_DIG__)&#32;*&#32;643L&#32;/&#32;2136)</emphasis>
148 
149 <emphasis role="preprocessor">#define&#32;__glibcxx_digits10(_Tp)&#32;\</emphasis>
150 <emphasis role="preprocessor">&#32;&#32;__glibcxx_floating(_Tp,&#32;__FLT_DIG__,&#32;__DBL_DIG__,&#32;__LDBL_DIG__)</emphasis>
151 
152 <emphasis role="preprocessor">#define&#32;__glibcxx_max_exponent10(_Tp)&#32;\</emphasis>
153 <emphasis role="preprocessor">&#32;&#32;__glibcxx_floating(_Tp,&#32;__FLT_MAX_10_EXP__,&#32;__DBL_MAX_10_EXP__,&#32;\</emphasis>
154 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__LDBL_MAX_10_EXP__)</emphasis>
155 
156 &#32;&#32;<emphasis role="comment">//&#32;N.B.&#32;this&#32;only&#32;supports&#32;float,&#32;double&#32;and&#32;long&#32;double&#32;(no&#32;__float128&#32;etc.)</emphasis>
157 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Value&gt;
158 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__numeric_traits_floating
159 &#32;&#32;&#32;&#32;{
160 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Only&#32;floating&#32;point&#32;types.&#32;See&#32;N1822.</emphasis>
161 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__max_digits10&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2numeric__traits_8h_1ac4846860ec6978efe523a9dd792bd0a5">__glibcxx_max_digits10</link>(_Value);
162 
163 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;See&#32;above&#32;comment...</emphasis>
164 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_signed&#32;=&#32;<emphasis role="keyword">true</emphasis>;
165 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__digits10&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2numeric__traits_8h_1a5bc28d892495ae9435759fd88369855e">__glibcxx_digits10</link>(_Value);
166 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__max_exponent10&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2numeric__traits_8h_1a67a753bcd7a9a7215af8fa57adbc8b0c">__glibcxx_max_exponent10</link>(_Value);
167 &#32;&#32;&#32;&#32;};
168 
169 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Value&gt;
170 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__numeric_traits_floating&lt;_Value&gt;::__max_digits10;
171 
172 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Value&gt;
173 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__numeric_traits_floating&lt;_Value&gt;::__is_signed;
174 
175 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Value&gt;
176 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__numeric_traits_floating&lt;_Value&gt;::__digits10;
177 
178 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Value&gt;
179 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__numeric_traits_floating&lt;_Value&gt;::__max_exponent10;
180 
181 <emphasis role="preprocessor">#undef&#32;__glibcxx_floating</emphasis>
182 <emphasis role="preprocessor">#undef&#32;__glibcxx_max_digits10</emphasis>
183 <emphasis role="preprocessor">#undef&#32;__glibcxx_digits10</emphasis>
184 <emphasis role="preprocessor">#undef&#32;__glibcxx_max_exponent10</emphasis>
185 
186 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Value&gt;
187 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__numeric_traits
188 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__numeric_traits_integer&lt;_Value&gt;
189 &#32;&#32;&#32;&#32;{&#32;};
190 
191 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
192 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__numeric_traits&lt;float&gt;
193 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__numeric_traits_floating&lt;float&gt;
194 &#32;&#32;&#32;&#32;{&#32;};
195 
196 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
197 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__numeric_traits&lt;double&gt;
198 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__numeric_traits_floating&lt;double&gt;
199 &#32;&#32;&#32;&#32;{&#32;};
200 
201 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
202 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__numeric_traits&lt;long&#32;double&gt;
203 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__numeric_traits_floating&lt;long&#32;double&gt;
204 &#32;&#32;&#32;&#32;{&#32;};
205 
206 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_LONG_DOUBLE_ALT128_COMPAT</emphasis>
207 <emphasis role="preprocessor">#&#32;if&#32;defined&#32;__LONG_DOUBLE_IEEE128__</emphasis>
208 &#32;&#32;<emphasis role="comment">//&#32;long&#32;double&#32;is&#32;__ieee128,&#32;define&#32;traits&#32;for&#32;__ibm128</emphasis>
209 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
210 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__numeric_traits_floating&lt;__ibm128&gt;
211 &#32;&#32;&#32;&#32;{
212 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__max_digits10&#32;=&#32;33;
213 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_signed&#32;=&#32;<emphasis role="keyword">true</emphasis>;
214 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__digits10&#32;=&#32;31;
215 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__max_exponent10&#32;=&#32;308;
216 &#32;&#32;&#32;&#32;};
217 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
218 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__numeric_traits&lt;__ibm128&gt;
219 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__numeric_traits_floating&lt;__ibm128&gt;
220 &#32;&#32;&#32;&#32;{&#32;};
221 <emphasis role="preprocessor">#&#32;elif&#32;defined&#32;__LONG_DOUBLE_IBM128__</emphasis>
222 &#32;&#32;<emphasis role="comment">//&#32;long&#32;double&#32;is&#32;__ibm128,&#32;define&#32;traits&#32;for&#32;__ieee128</emphasis>
223 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
224 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__numeric_traits_floating&lt;__ieee128&gt;
225 &#32;&#32;&#32;&#32;{
226 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__max_digits10&#32;=&#32;36;
227 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_signed&#32;=&#32;<emphasis role="keyword">true</emphasis>;
228 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__digits10&#32;=&#32;33;
229 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__max_exponent10&#32;=&#32;4932;
230 &#32;&#32;&#32;&#32;};
231 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
232 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__numeric_traits&lt;__ieee128&gt;
233 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__numeric_traits_floating&lt;__ieee128&gt;
234 &#32;&#32;&#32;&#32;{&#32;};
235 <emphasis role="preprocessor">#&#32;endif</emphasis>
236 <emphasis role="preprocessor">#endif</emphasis>
237 
238 _GLIBCXX_END_NAMESPACE_VERSION
239 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
240 
241 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
