<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2rb__tree__map___2erase__fn__imps_8hpp_source" xml:lang="en-US">
<title>erase_fn_imps.hpp</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/ext/pb_ds/detail/rb_tree_map_/erase_fn_imps.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2005-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2004&#32;Ami&#32;Tavory&#32;and&#32;Vladimir&#32;Dreizin,&#32;IBM-HRL.</emphasis>
26 
27 <emphasis role="comment">//&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;sell,&#32;and&#32;distribute&#32;this&#32;software</emphasis>
28 <emphasis role="comment">//&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,&#32;provided&#32;that&#32;the&#32;above&#32;copyright</emphasis>
29 <emphasis role="comment">//&#32;notice&#32;appears&#32;in&#32;all&#32;copies,&#32;and&#32;that&#32;both&#32;that&#32;copyright&#32;notice</emphasis>
30 <emphasis role="comment">//&#32;and&#32;this&#32;permission&#32;notice&#32;appear&#32;in&#32;supporting&#32;documentation.&#32;None</emphasis>
31 <emphasis role="comment">//&#32;of&#32;the&#32;above&#32;authors,&#32;nor&#32;IBM&#32;Haifa&#32;Research&#32;Laboratories,&#32;make&#32;any</emphasis>
32 <emphasis role="comment">//&#32;representation&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
33 <emphasis role="comment">//&#32;purpose.&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied</emphasis>
34 <emphasis role="comment">//&#32;warranty.</emphasis>
35 
41 <emphasis role="preprocessor">#ifdef&#32;PB_DS_CLASS_C_DEC</emphasis>
42 
43 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
44 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
45 PB_DS_CLASS_C_DEC::
46 erase(key_const_reference&#32;r_key)
47 {
48 &#32;&#32;point_iterator&#32;it&#32;=&#32;this-&gt;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(r_key);
49 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(it&#32;==&#32;base_type::end())
50 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
51 &#32;&#32;erase(it);
52 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
53 }
54 
55 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
56 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::iterator
57 PB_DS_CLASS_C_DEC::
58 erase(iterator&#32;it)
59 {
60 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
61 &#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(it&#32;==&#32;base_type::<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>())
62 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;it;
63 
64 &#32;&#32;iterator&#32;ret_it&#32;=&#32;it;
65 &#32;&#32;++ret_it;
66 &#32;&#32;erase_node(it.m_p_nd);
67 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*this))
68 &#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;ret_it;
69 }
70 
71 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
72 inline&#32;typename&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::reverse_iterator
73 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::
74 erase(reverse_iterator&#32;it)
75 {
76 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
77 &#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(it.m_p_nd&#32;==&#32;base_type::m_p_head)
78 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;it;
79 
80 &#32;&#32;reverse_iterator&#32;ret_it&#32;=&#32;it;
81 &#32;&#32;++ret_it;
82 &#32;&#32;erase_node(it.m_p_nd);
83 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*this))
84 &#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;ret_it;
85 }
86 
87 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
88 template&lt;typename&#32;Pred&gt;
89 inline&#32;typename&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::size_type
90 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::
91 erase_if(Pred&#32;pred)
92 {
93 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
94 &#32;&#32;size_type&#32;num_ersd&#32;=&#32;0;
95 &#32;&#32;iterator&#32;it&#32;=&#32;base_type::begin();
96 &#32;&#32;while&#32;(it&#32;!=&#32;base_type::<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>())
97 &#32;&#32;&#32;&#32;{
98 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pred(*it))
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
100 &#32;&#32;&#32;&#32;&#32;&#32;++num_ersd;
101 &#32;&#32;&#32;&#32;&#32;&#32;it&#32;=&#32;erase(it);
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
104 &#32;&#32;&#32;&#32;++it;
105 &#32;&#32;&#32;&#32;}
106 
107 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
108 &#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;num_ersd;
109 }
110 
111 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
112 <emphasis role="keywordtype">void</emphasis>
113 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::
114 erase_node(node_pointer&#32;p_nd)
115 {
116 &#32;&#32;remove_node(p_nd);
117 &#32;&#32;base_type::actual_erase_node(p_nd);
118 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
119 }
120 
121 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
122 <emphasis role="keywordtype">void</emphasis>
123 PB_DS_CLASS_C_DEC::
124 remove_node(node_pointer&#32;p_z)
125 {
126 &#32;&#32;this-&gt;update_min_max_for_erased_node(p_z);
127 &#32;&#32;node_pointer&#32;p_y&#32;=&#32;p_z;
128 &#32;&#32;node_pointer&#32;p_x&#32;=&#32;0;
129 &#32;&#32;node_pointer&#32;p_new_x_parent&#32;=&#32;0;
130 
131 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_y-&gt;m_p_left&#32;==&#32;0)
132 &#32;&#32;&#32;&#32;p_x&#32;=&#32;p_y-&gt;m_p_right;
133 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_y-&gt;m_p_right&#32;==&#32;0)
134 &#32;&#32;&#32;&#32;p_x&#32;=&#32;p_y-&gt;m_p_left;
135 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
136 &#32;&#32;&#32;&#32;{
137 &#32;&#32;&#32;&#32;&#32;&#32;p_y&#32;=&#32;p_y-&gt;m_p_right;
138 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(p_y-&gt;m_p_left&#32;!=&#32;0)
139 &#32;&#32;&#32;&#32;p_y&#32;=&#32;p_y-&gt;m_p_left;
140 &#32;&#32;&#32;&#32;&#32;&#32;p_x&#32;=&#32;p_y-&gt;m_p_right;
141 &#32;&#32;&#32;&#32;}
142 
143 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_y&#32;==&#32;p_z)
144 &#32;&#32;&#32;&#32;{
145 &#32;&#32;&#32;&#32;&#32;&#32;p_new_x_parent&#32;=&#32;p_y-&gt;m_p_parent;
146 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_x&#32;!=&#32;0)
147 &#32;&#32;&#32;&#32;p_x-&gt;m_p_parent&#32;=&#32;p_y-&gt;m_p_parent;
148 
149 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(base_type::m_p_head-&gt;m_p_parent&#32;==&#32;p_z)
150 &#32;&#32;&#32;&#32;base_type::m_p_head-&gt;m_p_parent&#32;=&#32;p_x;
151 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_z-&gt;m_p_parent-&gt;m_p_left&#32;==&#32;p_z)
152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
153 &#32;&#32;&#32;&#32;&#32;&#32;p_y-&gt;m_p_left&#32;=&#32;p_z-&gt;m_p_parent;
154 &#32;&#32;&#32;&#32;&#32;&#32;p_z-&gt;m_p_parent-&gt;m_p_left&#32;=&#32;p_x;
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
156 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
158 &#32;&#32;&#32;&#32;&#32;&#32;p_y-&gt;m_p_left&#32;=&#32;0;
159 &#32;&#32;&#32;&#32;&#32;&#32;p_z-&gt;m_p_parent-&gt;m_p_right&#32;=&#32;p_x;
160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
161 &#32;&#32;&#32;&#32;}
162 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
163 &#32;&#32;&#32;&#32;{
164 &#32;&#32;&#32;&#32;&#32;&#32;p_z-&gt;m_p_left-&gt;m_p_parent&#32;=&#32;p_y;
165 &#32;&#32;&#32;&#32;&#32;&#32;p_y-&gt;m_p_left&#32;=&#32;p_z-&gt;m_p_left;
166 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_y&#32;!=&#32;p_z-&gt;m_p_right)
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
168 &#32;&#32;&#32;&#32;&#32;&#32;p_new_x_parent&#32;=&#32;p_y-&gt;m_p_parent;
169 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_x&#32;!=&#32;0)
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_x-&gt;m_p_parent&#32;=&#32;p_y-&gt;m_p_parent;
171 &#32;&#32;&#32;&#32;&#32;&#32;p_y-&gt;m_p_parent-&gt;m_p_left&#32;=&#32;p_x;
172 &#32;&#32;&#32;&#32;&#32;&#32;p_y-&gt;m_p_right&#32;=&#32;p_z-&gt;m_p_right;
173 &#32;&#32;&#32;&#32;&#32;&#32;p_z-&gt;m_p_right-&gt;m_p_parent&#32;=&#32;p_y;
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
176 &#32;&#32;&#32;&#32;p_new_x_parent&#32;=&#32;p_y;
177 
178 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(base_type::m_p_head-&gt;m_p_parent&#32;==&#32;p_z)
179 &#32;&#32;&#32;&#32;base_type::m_p_head-&gt;m_p_parent&#32;=&#32;p_y;
180 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_z-&gt;m_p_parent-&gt;m_p_left&#32;==&#32;p_z)
181 &#32;&#32;&#32;&#32;p_z-&gt;m_p_parent-&gt;m_p_left&#32;=&#32;p_y;
182 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
183 &#32;&#32;&#32;&#32;p_z-&gt;m_p_parent-&gt;m_p_right&#32;=&#32;p_y;
184 
185 &#32;&#32;&#32;&#32;&#32;&#32;p_y-&gt;m_p_parent&#32;=&#32;p_z-&gt;m_p_parent;
186 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(p_y-&gt;m_red,&#32;p_z-&gt;m_red);
187 &#32;&#32;&#32;&#32;&#32;&#32;p_y&#32;=&#32;p_z;
188 &#32;&#32;&#32;&#32;}
189 
190 &#32;&#32;this-&gt;update_to_top(p_new_x_parent,&#32;(node_update*&#32;)<emphasis role="keyword">this</emphasis>);
191 
192 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_y-&gt;m_red)
193 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
194 
195 &#32;&#32;remove_fixup(p_x,&#32;p_new_x_parent);
196 }
197 
198 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
199 <emphasis role="keywordtype">void</emphasis>
200 PB_DS_CLASS_C_DEC::
201 remove_fixup(node_pointer&#32;p_x,&#32;node_pointer&#32;p_new_x_parent)
202 {
203 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_x&#32;==&#32;0&#32;||&#32;p_x-&gt;m_p_parent&#32;==&#32;p_new_x_parent);
204 
205 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(p_x&#32;!=&#32;base_type::m_p_head-&gt;m_p_parent&#32;&amp;&amp;&#32;is_effectively_black(p_x))
206 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_x&#32;==&#32;p_new_x_parent-&gt;m_p_left)
207 &#32;&#32;&#32;&#32;&#32;&#32;{
208 &#32;&#32;&#32;&#32;node_pointer&#32;p_w&#32;=&#32;p_new_x_parent-&gt;m_p_right;
209 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_w-&gt;m_red)
210 &#32;&#32;&#32;&#32;&#32;&#32;{
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_w-&gt;m_red&#32;=&#32;<emphasis role="keyword">false</emphasis>;
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_new_x_parent-&gt;m_red&#32;=&#32;<emphasis role="keyword">true</emphasis>;
213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;base_type::rotate_left(p_new_x_parent);
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_w&#32;=&#32;p_new_x_parent-&gt;m_p_right;
215 &#32;&#32;&#32;&#32;&#32;&#32;}
216 
217 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is_effectively_black(p_w-&gt;m_p_left)&#32;
218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_effectively_black(p_w-&gt;m_p_right))
219 &#32;&#32;&#32;&#32;&#32;&#32;{
220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_w-&gt;m_red&#32;=&#32;<emphasis role="keyword">true</emphasis>;
221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_x&#32;=&#32;p_new_x_parent;
222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_new_x_parent&#32;=&#32;p_new_x_parent-&gt;m_p_parent;
223 &#32;&#32;&#32;&#32;&#32;&#32;}
224 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
225 &#32;&#32;&#32;&#32;&#32;&#32;{
226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is_effectively_black(p_w-&gt;m_p_right))
227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_w-&gt;m_p_left&#32;!=&#32;0)
229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_w-&gt;m_p_left-&gt;m_red&#32;=&#32;<emphasis role="keyword">false</emphasis>;
230 
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_w-&gt;m_red&#32;=&#32;<emphasis role="keyword">true</emphasis>;
232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;base_type::rotate_right(p_w);
233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_w&#32;=&#32;p_new_x_parent-&gt;m_p_right;
234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
235 
236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_w-&gt;m_red&#32;=&#32;p_new_x_parent-&gt;m_red;
237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_new_x_parent-&gt;m_red&#32;=&#32;<emphasis role="keyword">false</emphasis>;
238 
239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_w-&gt;m_p_right&#32;!=&#32;0)
240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_w-&gt;m_p_right-&gt;m_red&#32;=&#32;<emphasis role="keyword">false</emphasis>;
241 
242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;base_type::rotate_left(p_new_x_parent);
243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;update_to_top(p_new_x_parent,&#32;(node_update*&#32;)<emphasis role="keyword">this</emphasis>);
244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
245 &#32;&#32;&#32;&#32;&#32;&#32;}
246 &#32;&#32;&#32;&#32;&#32;&#32;}
247 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
248 &#32;&#32;&#32;&#32;&#32;&#32;{
249 &#32;&#32;&#32;&#32;node_pointer&#32;p_w&#32;=&#32;p_new_x_parent-&gt;m_p_left;
250 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_w-&gt;m_red&#32;==&#32;<emphasis role="keyword">true</emphasis>)
251 &#32;&#32;&#32;&#32;&#32;&#32;{
252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_w-&gt;m_red&#32;=&#32;<emphasis role="keyword">false</emphasis>;
253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_new_x_parent-&gt;m_red&#32;=&#32;<emphasis role="keyword">true</emphasis>;
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;base_type::rotate_right(p_new_x_parent);
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_w&#32;=&#32;p_new_x_parent-&gt;m_p_left;
256 &#32;&#32;&#32;&#32;&#32;&#32;}
257 
258 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is_effectively_black(p_w-&gt;m_p_right)&#32;
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_effectively_black(p_w-&gt;m_p_left))
260 &#32;&#32;&#32;&#32;&#32;&#32;{
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_w-&gt;m_red&#32;=&#32;<emphasis role="keyword">true</emphasis>;
262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_x&#32;=&#32;p_new_x_parent;
263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_new_x_parent&#32;=&#32;p_new_x_parent-&gt;m_p_parent;
264 &#32;&#32;&#32;&#32;&#32;&#32;}
265 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
266 &#32;&#32;&#32;&#32;&#32;&#32;{
267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is_effectively_black(p_w-&gt;m_p_left))
268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_w-&gt;m_p_right&#32;!=&#32;0)
270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_w-&gt;m_p_right-&gt;m_red&#32;=&#32;<emphasis role="keyword">false</emphasis>;
271 
272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_w-&gt;m_red&#32;=&#32;<emphasis role="keyword">true</emphasis>;
273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;base_type::rotate_left(p_w);
274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_w&#32;=&#32;p_new_x_parent-&gt;m_p_left;
275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
276 
277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_w-&gt;m_red&#32;=&#32;p_new_x_parent-&gt;m_red;
278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_new_x_parent-&gt;m_red&#32;=&#32;<emphasis role="keyword">false</emphasis>;
279 
280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_w-&gt;m_p_left&#32;!=&#32;0)
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_w-&gt;m_p_left-&gt;m_red&#32;=&#32;<emphasis role="keyword">false</emphasis>;
282 
283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;base_type::rotate_right(p_new_x_parent);
284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;update_to_top(p_new_x_parent,&#32;(node_update*&#32;)<emphasis role="keyword">this</emphasis>);
285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
286 &#32;&#32;&#32;&#32;&#32;&#32;}
287 &#32;&#32;&#32;&#32;&#32;&#32;}
288 
289 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_x&#32;!=&#32;0)
290 &#32;&#32;&#32;&#32;p_x-&gt;m_red&#32;=&#32;<emphasis role="keyword">false</emphasis>;
291 }
292 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
