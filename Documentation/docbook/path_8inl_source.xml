<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_path_8inl_source" xml:lang="en-US">
<title>path.inl</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/include/toml++/impl/path.inl</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//#&#32;This&#32;file&#32;is&#32;a&#32;part&#32;of&#32;toml++&#32;and&#32;is&#32;subject&#32;to&#32;the&#32;the&#32;terms&#32;of&#32;the&#32;MIT&#32;license.</emphasis>
2 <emphasis role="comment">//#&#32;Copyright&#32;(c)&#32;Mark&#32;Gillard&#32;&lt;mark.gillard@outlook.com.au&gt;</emphasis>
3 <emphasis role="comment">//#&#32;See&#32;https://github.com/marzer/tomlplusplus/blob/master/LICENSE&#32;for&#32;the&#32;full&#32;license&#32;text.</emphasis>
4 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;MIT</emphasis>
5 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
6 
7 <emphasis role="comment">//#&#32;{{</emphasis>
8 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_preprocessor_8h">preprocessor.h</link>&quot;</emphasis>
9 <emphasis role="preprocessor">#if&#32;!TOML_IMPLEMENTATION</emphasis>
10 <emphasis role="preprocessor">#error&#32;This&#32;is&#32;an&#32;implementation-only&#32;header.</emphasis>
11 <emphasis role="preprocessor">#endif</emphasis>
12 <emphasis role="comment">//#&#32;}}</emphasis>
13 
14 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_path_8h">path.h</link>&quot;</emphasis>
15 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_at__path_8h">at_path.h</link>&quot;</emphasis>
16 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_print__to__stream_8h">print_to_stream.h</link>&quot;</emphasis>
17 <link linkend="_path_8inl_1a6c2a5b158c0a6d208edd992229d91d78">TOML_DISABLE_WARNINGS</link>;
18 <emphasis role="preprocessor">#if&#32;TOML_INT_CHARCONV</emphasis>
19 <emphasis role="preprocessor">#include&#32;&lt;charconv&gt;</emphasis>
20 <emphasis role="preprocessor">#endif</emphasis>
21 <emphasis role="preprocessor">#include&#32;&lt;sstream&gt;</emphasis>
22 <link linkend="_path_8inl_1a4e1f9eaceb60becba33cd64d3a85e3ed">TOML_ENABLE_WARNINGS</link>;
23 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_header__start_8h">header_start.h</link>&quot;</emphasis>
24 
25 <emphasis role="comment">//#=====================================================================================================================</emphasis>
26 <emphasis role="comment">//#&#32;toml::path_component</emphasis>
27 <emphasis role="comment">//#=====================================================================================================================</emphasis>
28 
29 <link linkend="_path_8inl_1a24e5c42f7e94b0b0f3212744874731e6">TOML_NAMESPACE_START</link>
30 {
31 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
32 &#32;&#32;&#32;&#32;<link linkend="_classpath__component_1a04c4df82cb6dc36db572e7a21a1b9819">path_component::path_component</link>()&#32;<emphasis role="comment">//</emphasis>
33 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;type_{&#32;path_component_type::key&#32;}
34 &#32;&#32;&#32;&#32;{
35 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;store_key(<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;value_storage_);
36 &#32;&#32;&#32;&#32;}
37 
38 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
39 &#32;&#32;&#32;&#32;<link linkend="_classpath__component_1a04c4df82cb6dc36db572e7a21a1b9819">path_component::path_component</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
40 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;type_(path_component_type::array_index)
41 &#32;&#32;&#32;&#32;{
42 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;store_index(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>,&#32;value_storage_);
43 &#32;&#32;&#32;&#32;}
44 
45 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
46 &#32;&#32;&#32;&#32;<link linkend="_classpath__component_1a04c4df82cb6dc36db572e7a21a1b9819">path_component::path_component</link>(std::string_view&#32;key)&#32;<emphasis role="comment">//</emphasis>
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;type_(path_component_type::key)
48 &#32;&#32;&#32;&#32;{
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;store_key(key,&#32;value_storage_);
50 &#32;&#32;&#32;&#32;}
51 
52 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
53 
54 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
55 &#32;&#32;&#32;&#32;<link linkend="_classpath__component_1a04c4df82cb6dc36db572e7a21a1b9819">path_component::path_component</link>(std::wstring_view&#32;key)&#32;<emphasis role="comment">//</emphasis>
56 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classpath__component">path_component</link>(impl::narrow(key))
57 &#32;&#32;&#32;&#32;{}
58 
59 <emphasis role="preprocessor">#endif</emphasis>
60 
61 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
62 &#32;&#32;&#32;&#32;<link linkend="_classpath__component_1a04c4df82cb6dc36db572e7a21a1b9819">path_component::path_component</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;pc)&#32;<emphasis role="comment">//</emphasis>
63 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;type_{&#32;pc.type_&#32;}
64 &#32;&#32;&#32;&#32;{
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(type_&#32;==&#32;path_component_type::array_index)
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;store_index(pc.<link linkend="_classpath__component_1a89eb0855bfc3761316939641c4b10807">index</link>(),&#32;value_storage_);
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;store_key(pc.<link linkend="_classpath__component_1a43675807336b25e9bc5e7b895ecf0dff">key</link>(),&#32;value_storage_);
69 &#32;&#32;&#32;&#32;}
70 
71 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
72 &#32;&#32;&#32;&#32;<link linkend="_classpath__component_1a04c4df82cb6dc36db572e7a21a1b9819">path_component::path_component</link>(<link linkend="_classpath__component">path_component</link>&#32;&amp;&amp;&#32;pc)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;type_{&#32;pc.type_&#32;}
74 &#32;&#32;&#32;&#32;{
75 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(type_&#32;==&#32;path_component_type::array_index)
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;store_index(pc.index_ref(),&#32;value_storage_);
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;store_key(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(pc.key_ref()),&#32;value_storage_);
79 &#32;&#32;&#32;&#32;}
80 
81 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
82 &#32;&#32;&#32;&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;<link linkend="_classpath__component_1a293a74d51a88f91ccda3105427496a2c">path_component::operator=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;rhs)
83 &#32;&#32;&#32;&#32;{
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(type_&#32;!=&#32;rhs.type_)
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;destroy();
87 
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;type_&#32;=&#32;rhs.type_;
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(type_&#32;==&#32;path_component_type::array_index)
90 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;store_index(rhs.<link linkend="_classpath__component_1a89eb0855bfc3761316939641c4b10807">index</link>(),&#32;value_storage_);
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;store_key(rhs.<link linkend="_classpath__component_1a43675807336b25e9bc5e7b895ecf0dff">key</link>(),&#32;value_storage_);
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(type_&#32;==&#32;path_component_type::array_index)
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;index_ref()&#32;=&#32;rhs.<link linkend="_classpath__component_1a89eb0855bfc3761316939641c4b10807">index</link>();
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_ref()&#32;=&#32;rhs.<link linkend="_classpath__component_1a43675807336b25e9bc5e7b895ecf0dff">key</link>();
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
102 &#32;&#32;&#32;&#32;}
103 
104 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
105 &#32;&#32;&#32;&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;<link linkend="_classpath__component_1a293a74d51a88f91ccda3105427496a2c">path_component::operator=</link>(<link linkend="_classpath__component">path_component</link>&amp;&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
106 &#32;&#32;&#32;&#32;{
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(type_&#32;!=&#32;rhs.type_)
108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;destroy();
110 
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;type_&#32;=&#32;rhs.type_;
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(type_&#32;==&#32;path_component_type::array_index)
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;store_index(rhs.<link linkend="_classpath__component_1a89eb0855bfc3761316939641c4b10807">index</link>(),&#32;value_storage_);
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;store_key(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(rhs.key_ref()),&#32;value_storage_);
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(type_&#32;==&#32;path_component_type::array_index)
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;index_ref()&#32;=&#32;rhs.<link linkend="_classpath__component_1a89eb0855bfc3761316939641c4b10807">index</link>();
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_ref()&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(rhs.key_ref());
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
125 &#32;&#32;&#32;&#32;}
126 
127 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
128 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
129 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;path_component::equal(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
130 &#32;&#32;&#32;&#32;{
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Different&#32;comparison&#32;depending&#32;on&#32;contents</emphasis>
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs.type_&#32;!=&#32;rhs.type_)
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
134 
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs.type_&#32;==&#32;path_component_type::array_index)
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.<link linkend="_classpath__component_1a89eb0855bfc3761316939641c4b10807">index</link>()&#32;==&#32;rhs.<link linkend="_classpath__component_1a89eb0855bfc3761316939641c4b10807">index</link>();
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;path_component_type::key</emphasis>
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.<link linkend="_classpath__component_1a43675807336b25e9bc5e7b895ecf0dff">key</link>()&#32;==&#32;rhs.<link linkend="_classpath__component_1a43675807336b25e9bc5e7b895ecf0dff">key</link>();
139 &#32;&#32;&#32;&#32;}
140 
141 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
142 &#32;&#32;&#32;&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;<link linkend="_classpath__component_1a293a74d51a88f91ccda3105427496a2c">path_component::operator=</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;new_index)&#32;<emphasis role="keyword">noexcept</emphasis>
143 &#32;&#32;&#32;&#32;{
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;currently&#32;a&#32;key,&#32;string&#32;will&#32;need&#32;to&#32;be&#32;destroyed&#32;regardless</emphasis>
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;destroy();
146 
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;type_&#32;=&#32;path_component_type::array_index;
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;store_index(new_index,&#32;value_storage_);
149 
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
151 &#32;&#32;&#32;&#32;}
152 
153 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
154 &#32;&#32;&#32;&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;<link linkend="_classpath__component_1a293a74d51a88f91ccda3105427496a2c">path_component::operator=</link>(std::string_view&#32;new_key)
155 &#32;&#32;&#32;&#32;{
156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(type_&#32;==&#32;path_component_type::key)
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_ref()&#32;=&#32;new_key;
158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;type_&#32;=&#32;path_component_type::key;
161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;store_key(new_key,&#32;value_storage_);
162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
163 
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
165 &#32;&#32;&#32;&#32;}
166 
167 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
168 
169 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
170 &#32;&#32;&#32;&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;<link linkend="_classpath__component_1a293a74d51a88f91ccda3105427496a2c">path_component::operator=</link>(std::wstring_view&#32;new_key)
171 &#32;&#32;&#32;&#32;{
172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(type_&#32;==&#32;path_component_type::key)
173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_ref()&#32;=&#32;impl::narrow(new_key);
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;type_&#32;=&#32;path_component_type::key;
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;store_key(impl::narrow(new_key),&#32;value_storage_);
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
179 
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
181 &#32;&#32;&#32;&#32;}
182 
183 <emphasis role="preprocessor">#endif</emphasis>
184 }
185 <link linkend="_preprocessor_8h_1aab40a6832fe11707ab2cc1b83d8a1270">TOML_NAMESPACE_END</link>;
186 
187 <emphasis role="comment">//#=====================================================================================================================</emphasis>
188 <emphasis role="comment">//#&#32;toml::path</emphasis>
189 <emphasis role="comment">//#=====================================================================================================================</emphasis>
190 
191 <link linkend="_path_8inl_1a3e6bf84af897e30e783c8365170eb278">TOML_ANON_NAMESPACE_START</link>
192 {
193 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a31ffc2d7129c04c13914b97c0a6e8417">TOML_INTERNAL_LINKAGE</link>
194 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;parse_path_into(std::string_view&#32;path_str,&#32;std::vector&lt;path_component&gt;&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a452b9ab10170c96a9bef2657c036a2c0">components</link>)
195 &#32;&#32;&#32;&#32;{
196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>components_type&#32;=&#32;std::remove_reference_t&lt;<emphasis role="keyword">decltype</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a452b9ab10170c96a9bef2657c036a2c0">components</link>)&gt;;
197 
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;original_size&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a452b9ab10170c96a9bef2657c036a2c0">components</link>.size();
199 
200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;on_key&#32;=&#32;[](<emphasis role="keywordtype">void</emphasis>*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>,&#32;std::string_view&#32;key)&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>
201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;comps&#32;=&#32;*<emphasis role="keyword">static_cast&lt;</emphasis>components_type*<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>);
203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;comps.emplace_back(key);
204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
206 
207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;on_index&#32;=&#32;[](<emphasis role="keywordtype">void</emphasis>*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>)&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>
208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;comps&#32;=&#32;*<emphasis role="keyword">static_cast&lt;</emphasis>components_type*<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>);
210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;comps.emplace_back(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>);
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
213 
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!impl::parse_path(path_str,&#32;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a452b9ab10170c96a9bef2657c036a2c0">components</link>,&#32;on_key,&#32;on_index))
215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a452b9ab10170c96a9bef2657c036a2c0">components</link>.resize(original_size);
217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
219 
220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
221 &#32;&#32;&#32;&#32;}
222 }
223 <link linkend="_preprocessor_8h_1a0385295454ae473a68d194eaffaf597c">TOML_ANON_NAMESPACE_END</link>;
224 
225 <link linkend="_path_8inl_1a24e5c42f7e94b0b0f3212744874731e6">TOML_NAMESPACE_START</link>
226 {
227 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
228 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;path::print_to(std::ostream&#32;&amp;&#32;os)<emphasis role="keyword">&#32;const</emphasis>
229 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespaceversion_1ab64fdd4f88cc81edfc86738fbae8bb9a">root</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;component&#32;:&#32;components_)
232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(component.type()&#32;==&#32;path_component_type::key)&#32;<emphasis role="comment">//&#32;key</emphasis>
234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!root)
236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(os,&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>);
237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(os,&#32;component.key());
238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(component.type()&#32;==&#32;path_component_type::array_index)&#32;<emphasis role="comment">//&#32;array</emphasis>
240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(os,&#32;<emphasis role="charliteral">&apos;[&apos;</emphasis>);
242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(os,&#32;component.index());
243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(os,&#32;<emphasis role="charliteral">&apos;]&apos;</emphasis>);
244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceversion_1ab64fdd4f88cc81edfc86738fbae8bb9a">root</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
247 &#32;&#32;&#32;&#32;}
248 
249 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
250 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
251 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;path::equal(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
252 &#32;&#32;&#32;&#32;{
253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.components_&#32;==&#32;rhs.components_;
254 &#32;&#32;&#32;&#32;}
255 
256 &#32;&#32;&#32;&#32;<emphasis role="comment">//#===&#32;constructors&#32;=================================================</emphasis>
257 
258 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
259 &#32;&#32;&#32;&#32;<link linkend="_classpath_1a67032008d5e8b7d05a67eb20688ec27c">path::path</link>(std::string_view&#32;str)&#32;<emphasis role="comment">//</emphasis>
260 &#32;&#32;&#32;&#32;{
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_ANON_NAMESPACE::parse_path_into(<link linkend="_classpath_1a57d9527113e1c8a12d75f2a56e7d0ae7">str</link>,&#32;components_);
262 &#32;&#32;&#32;&#32;}
263 
264 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
265 
266 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
267 &#32;&#32;&#32;&#32;<link linkend="_classpath_1a67032008d5e8b7d05a67eb20688ec27c">path::path</link>(std::wstring_view&#32;str)&#32;<emphasis role="comment">//</emphasis>
268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classpath">path</link>(impl::narrow(str))
269 &#32;&#32;&#32;&#32;{}
270 
271 <emphasis role="preprocessor">#endif</emphasis>
272 
273 &#32;&#32;&#32;&#32;<emphasis role="comment">//#===&#32;assignment&#32;=================================================</emphasis>
274 
275 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
276 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1ae994d06e46e0f0fa99dd861af3695ded">path::operator=</link>(std::string_view&#32;rhs)
277 &#32;&#32;&#32;&#32;{
278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;components_.clear();
279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_ANON_NAMESPACE::parse_path_into(rhs,&#32;components_);
280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
281 &#32;&#32;&#32;&#32;}
282 
283 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
284 
285 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
286 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1ae994d06e46e0f0fa99dd861af3695ded">path::operator=</link>(std::wstring_view&#32;rhs)
287 &#32;&#32;&#32;&#32;{
288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classpath_1ace78199ce6abac6d6476bfb5e09de398">assign</link>(impl::narrow(rhs));
289 &#32;&#32;&#32;&#32;}
290 
291 <emphasis role="preprocessor">#endif</emphasis>
292 
293 &#32;&#32;&#32;&#32;<emphasis role="comment">//#===&#32;appending&#32;=================================================</emphasis>
294 
295 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
296 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1ac4088e42d302fc936f17befaf31b13cd">path::operator+=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;rhs)
297 &#32;&#32;&#32;&#32;{
298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;components_.insert(components_.cend(),&#32;rhs.<link linkend="_classpath_1a82d976c5118224f5c69f543a4f32af38">begin</link>(),&#32;rhs.<link linkend="_classpath_1a337c19aa6a1a9ea9f505a166038b6e14">end</link>());
299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
300 &#32;&#32;&#32;&#32;}
301 
302 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
303 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1ac4088e42d302fc936f17befaf31b13cd">path::operator+=</link>(<link linkend="_classpath">path</link>&amp;&amp;&#32;rhs)
304 &#32;&#32;&#32;&#32;{
305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;components_.insert(components_.end(),
306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::make_move_iterator(rhs.components_.begin()),
307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::make_move_iterator(rhs.components_.end()));
308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
309 &#32;&#32;&#32;&#32;}
310 
311 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
312 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1ac4088e42d302fc936f17befaf31b13cd">path::operator+=</link>(std::string_view&#32;str)
313 &#32;&#32;&#32;&#32;{
314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_ANON_NAMESPACE::parse_path_into(<link linkend="_classpath_1a57d9527113e1c8a12d75f2a56e7d0ae7">str</link>,&#32;components_);
315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
316 &#32;&#32;&#32;&#32;}
317 
318 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
319 
320 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
321 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1ac4088e42d302fc936f17befaf31b13cd">path::operator+=</link>(std::wstring_view&#32;str)
322 &#32;&#32;&#32;&#32;{
323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;+=&#32;impl::narrow(<link linkend="_classpath_1a57d9527113e1c8a12d75f2a56e7d0ae7">str</link>);
324 &#32;&#32;&#32;&#32;}
325 
326 <emphasis role="preprocessor">#endif</emphasis>
327 
328 &#32;&#32;&#32;&#32;<emphasis role="comment">//#===&#32;prepending&#32;=================================================</emphasis>
329 
330 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
331 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1aa660d65893eeb1a91dada668633bc6fd">path::prepend</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>)
332 &#32;&#32;&#32;&#32;{
333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;components_.insert(components_.begin(),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>.components_.begin(),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>.components_.end());
334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
335 &#32;&#32;&#32;&#32;}
336 
337 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
338 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1aa660d65893eeb1a91dada668633bc6fd">path::prepend</link>(<link linkend="_classpath">path</link>&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>)
339 &#32;&#32;&#32;&#32;{
340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;components_.insert(components_.begin(),
341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::make_move_iterator(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>.components_.begin()),
342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::make_move_iterator(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>.components_.end()));
343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
344 &#32;&#32;&#32;&#32;}
345 
346 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
347 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1aa660d65893eeb1a91dada668633bc6fd">path::prepend</link>(std::string_view&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>)
348 &#32;&#32;&#32;&#32;{
349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classpath_1aa660d65893eeb1a91dada668633bc6fd">prepend</link>(<link linkend="_classpath">path</link>{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>&#32;});
350 &#32;&#32;&#32;&#32;}
351 
352 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
353 
354 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
355 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1aa660d65893eeb1a91dada668633bc6fd">path::prepend</link>(std::wstring_view&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>)
356 &#32;&#32;&#32;&#32;{
357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classpath_1aa660d65893eeb1a91dada668633bc6fd">prepend</link>(impl::narrow(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>));
358 &#32;&#32;&#32;&#32;}
359 
360 <emphasis role="preprocessor">#endif</emphasis>
361 
362 &#32;&#32;&#32;&#32;<emphasis role="comment">//#===&#32;string&#32;conversion&#32;=================================================</emphasis>
363 
364 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
365 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_classpath_1a57d9527113e1c8a12d75f2a56e7d0ae7">path::str</link>()<emphasis role="keyword">&#32;const</emphasis>
366 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classpath_1acab74ce9c17856e48dfaa538d69d5d00">empty</link>())
368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
369 
370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ostringstream&#32;ss;
371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_to(ss);
372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(ss).str();
373 &#32;&#32;&#32;&#32;}
374 
375 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
376 
377 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
378 &#32;&#32;&#32;&#32;std::wstring&#32;<link linkend="_classpath_1a0927a2cb65d7b1ef4305898276b2ca4a">path::wide_str</link>()<emphasis role="keyword">&#32;const</emphasis>
379 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;impl::widen(<link linkend="_classpath_1a57d9527113e1c8a12d75f2a56e7d0ae7">str</link>());
381 &#32;&#32;&#32;&#32;}
382 
383 <emphasis role="preprocessor">#endif</emphasis>
384 
385 &#32;&#32;&#32;&#32;<emphasis role="comment">//#===&#32;equality&#32;and&#32;comparison&#32;=================================================</emphasis>
386 
387 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
388 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classpath_1a0aba473e525c6bd36f429c34eb105de3">path::clear</link>()&#32;noexcept
389 &#32;&#32;&#32;&#32;{
390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;components_.clear();
391 &#32;&#32;&#32;&#32;}
392 
393 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
394 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1a167b26b6e68446fd12e06a6f64dad850">path::truncate</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;n)
395 &#32;&#32;&#32;&#32;{
396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n&#32;=&#32;n&#32;&gt;&#32;components_.size()&#32;?&#32;components_.size()&#32;:&#32;n;
397 
398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;it_end&#32;=&#32;components_.end();
399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;components_.erase(it_end&#32;-&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(n),&#32;it_end);
400 
401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
402 &#32;&#32;&#32;&#32;}
403 
404 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
405 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;<link linkend="_classpath_1a263cf395cbe7c79a04333d80e9b5f7ba">path::truncated</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;n)<emphasis role="keyword">&#32;const</emphasis>
406 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;truncated_path{};
408 
409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n&#32;=&#32;n&#32;&gt;&#32;components_.size()&#32;?&#32;components_.size()&#32;:&#32;n;
410 
411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Copy&#32;all&#32;components&#32;except&#32;one</emphasis>
412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Need&#32;at&#32;least&#32;two&#32;path&#32;components&#32;to&#32;have&#32;a&#32;parent,&#32;since&#32;if&#32;there&#32;is</emphasis>
413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;only&#32;one&#32;path&#32;component,&#32;the&#32;parent&#32;is&#32;the&#32;root/null&#32;path&#32;&quot;&quot;</emphasis>
414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;truncated_path.components_.insert(truncated_path.components_.begin(),
415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;components_.begin(),
416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;components_.end()&#32;-&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(n));
417 
418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;truncated_path;
419 &#32;&#32;&#32;&#32;}
420 
421 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
422 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;<link linkend="_classpath_1a0e6eb582abfb5ecbc3378f18a581e2a0">path::parent</link>()<emphasis role="keyword">&#32;const</emphasis>
423 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classpath_1a263cf395cbe7c79a04333d80e9b5f7ba">truncated</link>(1);
425 &#32;&#32;&#32;&#32;}
426 
427 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
428 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;<link linkend="_classpath_1acba8ae5b25b11f25ffcc6a30226f98e9">path::leaf</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;n)<emphasis role="keyword">&#32;const</emphasis>
429 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;leaf_path{};
431 
432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n&#32;=&#32;n&#32;&gt;&#32;components_.size()&#32;?&#32;components_.size()&#32;:&#32;n;
433 
434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;&gt;&#32;0)
435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;leaf_path.components_.insert(leaf_path.components_.begin(),
437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;components_.end()&#32;-&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(n),
438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;components_.end());
439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
440 
441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;leaf_path;
442 &#32;&#32;&#32;&#32;}
443 
444 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
445 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;<link linkend="_classpath_1af550d277cd6628ce830315fd95c2ee18">path::subpath</link>(std::vector&lt;path_component&gt;::const_iterator&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>,
446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;path_component&gt;::const_iterator&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>)<emphasis role="keyword">&#32;const</emphasis>
447 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>&#32;&gt;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>)
449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
450 
451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;<link linkend="_classpath_1af550d277cd6628ce830315fd95c2ee18">subpath</link>;
452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath_1af550d277cd6628ce830315fd95c2ee18">subpath</link>.components_.insert(<link linkend="_classpath_1af550d277cd6628ce830315fd95c2ee18">subpath</link>.components_.begin(),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>);
453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classpath_1af550d277cd6628ce830315fd95c2ee18">subpath</link>;
454 &#32;&#32;&#32;&#32;}
455 
456 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
457 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;<link linkend="_classpath_1af550d277cd6628ce830315fd95c2ee18">path::subpath</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_namespacelength">length</link>)<emphasis role="keyword">&#32;const</emphasis>
458 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classpath_1af550d277cd6628ce830315fd95c2ee18">subpath</link>(<link linkend="_classpath_1a82d976c5118224f5c69f543a4f32af38">begin</link>()&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>),&#32;<link linkend="_classpath_1a82d976c5118224f5c69f543a4f32af38">begin</link>()&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>&#32;+&#32;<link linkend="_namespacelength">length</link>));
460 &#32;&#32;&#32;&#32;}
461 }
462 <link linkend="_preprocessor_8h_1aab40a6832fe11707ab2cc1b83d8a1270">TOML_NAMESPACE_END</link>;
463 
464 <emphasis role="comment">//#=====================================================================================================================</emphasis>
465 <emphasis role="comment">//#&#32;at_path()&#32;overloads&#32;for&#32;toml::path</emphasis>
466 <emphasis role="comment">//#=====================================================================================================================</emphasis>
467 
468 <link linkend="_path_8inl_1a24e5c42f7e94b0b0f3212744874731e6">TOML_NAMESPACE_START</link>
469 {
470 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
471 &#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_at__path_8h_1a8fd45f603d445b914dc921213e6f2dc0">at_path</link>(node&#32;&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;toml::path&amp;&#32;<link linkend="_classpath">path</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
472 &#32;&#32;&#32;&#32;{
473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;early-exit&#32;sanity-checks</emphasis>
474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_namespaceversion_1ab64fdd4f88cc81edfc86738fbae8bb9a">root</link>.is_value())
475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;tbl&#32;=&#32;<link linkend="_namespaceversion_1ab64fdd4f88cc81edfc86738fbae8bb9a">root</link>.as_table();&#32;tbl&#32;&amp;&amp;&#32;tbl-&gt;empty())
477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;arr&#32;=&#32;<link linkend="_namespaceversion_1ab64fdd4f88cc81edfc86738fbae8bb9a">root</link>.as_array();&#32;arr&#32;&amp;&amp;&#32;arr-&gt;empty())
479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
480 
481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node*&#32;current&#32;=&#32;&amp;<link linkend="_namespaceversion_1ab64fdd4f88cc81edfc86738fbae8bb9a">root</link>;
482 
483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;component&#32;:&#32;<link linkend="_classpath">path</link>)
484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;component.type();
486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;==&#32;path_component_type::array_index)
487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;current_array&#32;=&#32;current-&gt;as&lt;<link linkend="_classarray">array</link>&gt;();
489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!current_array)
490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};&#32;<emphasis role="comment">//&#32;not&#32;an&#32;array,&#32;using&#32;array&#32;index&#32;doesn&apos;t&#32;work</emphasis>
491 
492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;current&#32;=&#32;current_array-&gt;<link linkend="_classarray_1a0b94266548e749456885847091128b5d">get</link>(component.index());
493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;==&#32;path_component_type::key)
495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;current_table&#32;=&#32;current-&gt;as&lt;<link linkend="_classtable">table</link>&gt;();
497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!current_table)
498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
499 
500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;current&#32;=&#32;current_table-&gt;<link linkend="_classtable_1a3a338dc69074b9f155ca52f044ef0b07">get</link>(component.key());
501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Error:&#32;invalid&#32;component</emphasis>
505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
507 
508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!current)
509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};&#32;<emphasis role="comment">//&#32;not&#32;found</emphasis>
510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
511 
512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnode__view">node_view</link>{&#32;current&#32;};
513 &#32;&#32;&#32;&#32;}
514 
515 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
516 &#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_at__path_8h_1a8fd45f603d445b914dc921213e6f2dc0">at_path</link>(<emphasis role="keyword">const</emphasis>&#32;node&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;toml::path&amp;&#32;<link linkend="_classpath">path</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
517 &#32;&#32;&#32;&#32;{
518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>{&#32;<link linkend="_at__path_8h_1a8fd45f603d445b914dc921213e6f2dc0">at_path</link>(<emphasis role="keyword">const_cast&lt;</emphasis>node&amp;<emphasis role="keyword">&gt;</emphasis>(root),&#32;<link linkend="_classpath">path</link>).node()&#32;};
519 &#32;&#32;&#32;&#32;}
520 }
521 <link linkend="_preprocessor_8h_1aab40a6832fe11707ab2cc1b83d8a1270">TOML_NAMESPACE_END</link>;
522 
523 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_header__end_8h">header_end.h</link>&quot;</emphasis>
</programlisting></section>
