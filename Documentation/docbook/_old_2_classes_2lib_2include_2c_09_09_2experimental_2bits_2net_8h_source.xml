<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2experimental_2bits_2net_8h_source" xml:lang="en-US">
<title>net.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/experimental/bits/net.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Networking&#32;implementation&#32;details&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2015-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_EXPERIMENTAL_NET_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_GLIBCXX_EXPERIMENTAL_NET_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
34 
35 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201402L</emphasis>
36 
37 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>
38 <emphasis role="preprocessor">#include&#32;&lt;system_error&gt;</emphasis>
39 <emphasis role="preprocessor">#include&#32;&lt;experimental/netfwd&gt;</emphasis>
40 
41 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
42 <emphasis role="preprocessor">#&#32;include&#32;&lt;concepts&gt;</emphasis>
43 <emphasis role="preprocessor">#endif</emphasis>
44 
45 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
46 {
47 _GLIBCXX_BEGIN_NAMESPACE_VERSION
48 <emphasis role="keyword">namespace&#32;</emphasis>experimental
49 {
50 <emphasis role="keyword">namespace&#32;</emphasis>net
51 {
52 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">namespace&#32;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0779c3b73f9aa3a0ac5b0139b5d291d9">v1</link>
53 {
54 
59 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CompletionToken,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Signature,&#32;<emphasis role="keyword">typename</emphasis>&gt;
60 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>async_result;
61 
63 
64 &#32;&#32;<emphasis role="comment">//&#32;A&#32;type&#32;denoted&#32;by&#32;DEDUCED&#32;in&#32;the&#32;TS.</emphasis>
65 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CompletionToken,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Signature&gt;
66 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__deduced_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>
67 &#32;&#32;&#32;&#32;&#32;&#32;async_result&lt;decay_t&lt;_CompletionToken&gt;,&#32;_Signature,&#32;<emphasis role="keywordtype">void</emphasis>&gt;::return_type;
68 
69 &#32;&#32;<emphasis role="comment">//&#32;Trait&#32;to&#32;check&#32;for&#32;construction&#32;from&#32;const/non-const&#32;lvalue/rvalue.</emphasis>
70 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
71 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__is_value_constructible&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__and_&lt;
72 &#32;&#32;&#32;&#32;&#32;&#32;is_copy_constructible&lt;_Tp&gt;,&#32;is_move_constructible&lt;_Tp&gt;,
73 &#32;&#32;&#32;&#32;&#32;&#32;is_constructible&lt;_Tp,&#32;_Tp&amp;&gt;,&#32;is_constructible&lt;_Tp,&#32;const&#32;_Tp&amp;&amp;&gt;
74 &#32;&#32;&#32;&#32;&#32;&#32;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
75 
76 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__throw_on_error
77 &#32;&#32;{
78 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
79 &#32;&#32;&#32;&#32;__throw_on_error(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__msg)&#32;:&#32;_M_msg(__msg)&#32;{&#32;}
80 
81 &#32;&#32;&#32;&#32;~__throw_on_error()&#32;noexcept(<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)
82 &#32;&#32;&#32;&#32;{
83 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_ec)
84 &#32;&#32;&#32;&#32;_GLIBCXX_THROW_OR_ABORT(system_error(_M_ec,&#32;_M_msg));
85 &#32;&#32;&#32;&#32;}
86 
87 &#32;&#32;&#32;&#32;__throw_on_error(<emphasis role="keyword">const</emphasis>&#32;__throw_on_error&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
88 &#32;&#32;&#32;&#32;__throw_on_error&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;__throw_on_error&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
89 
90 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;error_code&amp;()&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_ec;&#32;}
91 
92 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;_M_msg;
93 &#32;&#32;&#32;&#32;error_code&#32;_M_ec;
94 &#32;&#32;};
95 
97 
98 &#32;&#32;<emphasis role="comment">//&#32;Base&#32;class&#32;for&#32;types&#32;meeting&#32;both&#32;GettableSocketOption&#32;and</emphasis>
99 &#32;&#32;<emphasis role="comment">//&#32;SettableSocketOption&#32;requirements.</emphasis>
100 &#32;&#32;<emphasis role="comment">//&#32;The&#32;bool&#32;parameter&#32;allows&#32;__sockopt_base&lt;bool&gt;&#32;to&#32;have&#32;a</emphasis>
101 &#32;&#32;<emphasis role="comment">//&#32;__sockopt_base&lt;int,&#32;B&gt;&#32;base&#32;class&#32;(so&#32;that&#32;its&#32;_M_value&#32;is&#32;an&#32;int)</emphasis>
102 &#32;&#32;<emphasis role="comment">//&#32;but&#32;to&#32;have&#32;that&#32;be&#32;a&#32;distinct&#32;type&#32;from&#32;__sockopt_base&lt;int&gt;.</emphasis>
103 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;=&#32;true&gt;
104 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__sockopt_base
105 &#32;&#32;&#32;&#32;{
106 &#32;&#32;&#32;&#32;&#32;&#32;__sockopt_base()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
107 
108 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
109 &#32;&#32;&#32;&#32;&#32;&#32;__sockopt_base(_Tp&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(_Tp(std::declval&lt;_Tp&amp;&gt;())))
110 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_value(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
111 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
112 
113 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Protocol&gt;
114 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*
115 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>(<emphasis role="keyword">const</emphasis>&#32;_Protocol&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>
116 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::addressof(_M_value);&#32;}
117 
118 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Protocol&gt;
119 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*
120 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>(<emphasis role="keyword">const</emphasis>&#32;_Protocol&amp;)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
121 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::addressof(_M_value);&#32;}
122 
123 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Protocol&gt;
124 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>
125 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>(<emphasis role="keyword">const</emphasis>&#32;_Protocol&amp;)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
126 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">sizeof</emphasis>(_M_value);&#32;}
127 
128 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Protocol&gt;
129 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
130 &#32;&#32;&#32;&#32;resize(<emphasis role="keyword">const</emphasis>&#32;_Protocol&amp;,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__s)
131 &#32;&#32;&#32;&#32;{
132 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__s&#32;!=&#32;<emphasis role="keyword">sizeof</emphasis>(_M_value))
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__throw_length_error(<emphasis role="stringliteral">&quot;invalid&#32;value&#32;for&#32;socket&#32;option&#32;resize&quot;</emphasis>);
134 &#32;&#32;&#32;&#32;}
135 
136 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
137 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;_M_value&#32;{&#32;};
138 &#32;&#32;&#32;&#32;};
139 
140 &#32;&#32;<emphasis role="comment">//&#32;Base&#32;class&#32;for&#32;types&#32;meeting&#32;BooleanSocketOption&#32;requirements.</emphasis>
141 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
142 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__sockopt_base&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>&gt;&#32;:&#32;__sockopt_base&lt;int,&#32;false&gt;
143 &#32;&#32;&#32;&#32;{
144 &#32;&#32;&#32;&#32;&#32;&#32;__sockopt_base()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
145 
146 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
147 &#32;&#32;&#32;&#32;&#32;&#32;__sockopt_base(<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)&#32;noexcept
148 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;__sockopt_base&lt;int,&#32;false&gt;(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
149 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
150 
151 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classvalue">value</link>()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_value;&#32;}
152 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classvalue">value</link>();&#32;}
153 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator!()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!<link linkend="_classvalue">value</link>();&#32;}
154 &#32;&#32;&#32;&#32;};
155 
156 &#32;&#32;<emphasis role="comment">//&#32;Base&#32;class&#32;for&#32;types&#32;meeting&#32;IntegerSocketOption&#32;requirements.</emphasis>
157 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
158 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__sockopt_base&lt;int&gt;&#32;:&#32;__sockopt_base&lt;int,&#32;false&gt;
159 &#32;&#32;&#32;&#32;{
160 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__sockopt_base&lt;int,&#32;<emphasis role="keyword">false</emphasis>&gt;::__sockopt_base;
161 
162 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classvalue">value</link>()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_value;&#32;}
163 &#32;&#32;&#32;&#32;};
164 
165 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Derived,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&#32;=&#32;<emphasis role="keywordtype">int</emphasis>&gt;
166 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__sockopt_crtp&#32;:&#32;__sockopt_base&lt;_Tp&gt;
167 &#32;&#32;&#32;&#32;{
168 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__sockopt_base&lt;_Tp&gt;::__sockopt_base;
169 
170 &#32;&#32;&#32;&#32;&#32;&#32;_Derived&amp;
171 &#32;&#32;&#32;&#32;&#32;&#32;operator=(_Tp&#32;__value)&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(__value&#32;=&#32;__value))
172 &#32;&#32;&#32;&#32;&#32;&#32;{
173 &#32;&#32;&#32;&#32;__sockopt_base&lt;_Tp&gt;::_M_value&#32;=&#32;__value;
174 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Derived&amp;<emphasis role="keyword">&gt;</emphasis>(*this);
175 &#32;&#32;&#32;&#32;&#32;&#32;}
176 
177 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Protocol&gt;
178 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>
179 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a2424d012241ecec8ab2763eddf543736">level</link>(<emphasis role="keyword">const</emphasis>&#32;_Protocol&amp;)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
180 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Derived::_S_level;&#32;}
181 
182 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Protocol&gt;
183 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>
184 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>(<emphasis role="keyword">const</emphasis>&#32;_Protocol&amp;)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
185 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Derived::_S_name;&#32;}
186 &#32;&#32;&#32;&#32;};
187 
188 <emphasis role="keyword">namespace&#32;</emphasis>__detail
189 {
190 <emphasis role="preprocessor">#if&#32;__cpp_lib_concepts</emphasis>
191 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
192 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__protocol_like
193 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;copyable&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">requires</emphasis>&#32;{&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::endpoint;&#32;};
194 
195 &#32;&#32;<emphasis role="comment">//&#32;Endpoint&#32;requirements&#32;for&#32;non-extensible&#32;implementations.</emphasis>
196 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
197 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__endpoint_base&#32;=&#32;semiregular&lt;_Tp&gt;
198 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">requires</emphasis>&#32;&#32;{&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::protocol_type;&#32;}
199 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__protocol_like&lt;typename&#32;_Tp::protocol_type&gt;
200 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">requires</emphasis>(<emphasis role="keyword">const</emphasis>&#32;_Tp&#32;__a)&#32;{
201 &#32;&#32;&#32;&#32;{&#32;__a.protocol()&#32;}&#32;-&gt;&#32;same_as&lt;typename&#32;_Tp::protocol_type&gt;;
202 &#32;&#32;&#32;&#32;&#32;&#32;};
203 
204 &#32;&#32;<emphasis role="comment">//&#32;Endpoint&#32;requirements&#32;for&#32;extensible&#32;implementations.</emphasis>
205 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
206 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__endpoint&#32;=&#32;__endpoint_base&lt;_Tp&gt;
207 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">requires</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__a,&#32;_Tp&amp;&#32;__b,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__s)
208 &#32;&#32;&#32;&#32;&#32;&#32;{
209 &#32;&#32;&#32;&#32;{&#32;__a.data()&#32;}&#32;-&gt;&#32;same_as&lt;const&#32;void*&gt;;
210 &#32;&#32;&#32;&#32;{&#32;__b.data()&#32;}&#32;-&gt;&#32;same_as&lt;void*&gt;;
211 &#32;&#32;&#32;&#32;{&#32;__b.size()&#32;}&#32;-&gt;&#32;same_as&lt;size_t&gt;;
212 &#32;&#32;&#32;&#32;__b.resize(__s);
213 &#32;&#32;&#32;&#32;{&#32;__a.capacity()&#32;}&#32;-&gt;&#32;same_as&lt;size_t&gt;;
214 &#32;&#32;&#32;&#32;&#32;&#32;};
215 
216 &#32;&#32;<emphasis role="comment">//&#32;Protocol&#32;requirements&#32;for&#32;non-extensible&#32;implementations.</emphasis>
217 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
218 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__protocol_base&#32;=&#32;__protocol_like&lt;_Tp&gt;
219 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__endpoint_base&lt;typename&#32;_Tp::endpoint&gt;
220 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;same_as&lt;typename&#32;_Tp::endpoint::protocol_type,&#32;_Tp&gt;;
221 
222 &#32;&#32;<emphasis role="comment">//&#32;Protocol&#32;requirements&#32;for&#32;extensible&#32;implementations.</emphasis>
223 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
224 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__protocol&#32;=&#32;&#32;__protocol_base&lt;_Tp&gt;
225 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__endpoint&lt;typename&#32;_Tp::endpoint&gt;
226 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">requires</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;_Tp&#32;__a)&#32;{
227 &#32;&#32;&#32;&#32;{&#32;__a.family()&#32;}&#32;-&gt;&#32;same_as&lt;int&gt;;
228 &#32;&#32;&#32;&#32;{&#32;__a.type()&#32;}&#32;-&gt;&#32;same_as&lt;int&gt;;
229 &#32;&#32;&#32;&#32;{&#32;__a.protocol()&#32;}&#32;-&gt;&#32;same_as&lt;int&gt;;
230 &#32;&#32;&#32;&#32;&#32;&#32;};
231 
232 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
233 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__acceptable_protocol&#32;=&#32;__protocol&lt;_Tp&gt;
234 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">requires</emphasis>&#32;{&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::socket;&#32;}
235 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;move_constructible&lt;typename&#32;_Tp::socket&gt;
236 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;derived_from&lt;typename&#32;_Tp::socket,&#32;basic_socket&lt;_Tp&gt;&gt;;
237 
238 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
239 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__inet_protocol&#32;=&#32;__acceptable_protocol&lt;_Tp&gt;
240 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;equality_comparable&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">requires</emphasis>&#32;{
241 &#32;&#32;&#32;&#32;{&#32;_Tp::v4()&#32;}&#32;-&gt;&#32;same_as&lt;_Tp&gt;;
242 &#32;&#32;&#32;&#32;{&#32;_Tp::v6()&#32;}&#32;-&gt;&#32;same_as&lt;_Tp&gt;;
243 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::resolver;
244 &#32;&#32;&#32;&#32;&#32;&#32;}
245 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;same_as&lt;typename&#32;_Tp::resolver,&#32;ip::basic_resolver&lt;_Tp&gt;&gt;;
246 
247 <emphasis role="preprocessor">#else</emphasis>
248 &#32;&#32;<emphasis role="comment">//&#32;Check&#32;Endpoint&#32;requirements&#32;for&#32;extensible&#32;implementations</emphasis>
249 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
250 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_endpoint&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a05db727ae5396f8d8518969cd59fff55">false_type</link>
251 &#32;&#32;&#32;&#32;{&#32;};
252 
253 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
254 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
255 &#32;&#32;&#32;&#32;__endpoint_reqs(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__a&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>,&#32;_Tp*&#32;__b&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>)
256 &#32;&#32;&#32;&#32;-&gt;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;__and_&lt;
257 &#32;&#32;&#32;&#32;&#32;&#32;is_default_constructible&lt;_Tp&gt;,&#32;__is_value_constructible&lt;_Tp&gt;,
258 &#32;&#32;&#32;&#32;&#32;&#32;is_same&lt;<emphasis role="keyword">decltype</emphasis>(__a-&gt;protocol()),&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::protocol_type&gt;,
259 &#32;&#32;&#32;&#32;&#32;&#32;is_same&lt;<emphasis role="keyword">decltype</emphasis>(__a-&gt;data()),&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&gt;,
260 &#32;&#32;&#32;&#32;&#32;&#32;is_same&lt;<emphasis role="keyword">decltype</emphasis>(__b-&gt;data()),&#32;<emphasis role="keywordtype">void</emphasis>*&gt;,
261 &#32;&#32;&#32;&#32;&#32;&#32;is_same&lt;<emphasis role="keyword">decltype</emphasis>(__a-&gt;size()),&#32;<emphasis role="keywordtype">size_t</emphasis>&gt;,
262 &#32;&#32;&#32;&#32;&#32;&#32;is_same&lt;<emphasis role="keyword">decltype</emphasis>(__a-&gt;capacity()),&#32;<emphasis role="keywordtype">size_t</emphasis>&gt;
263 &#32;&#32;&#32;&#32;&#32;&#32;&gt;<link linkend="_classvalue">::value</link>,
264 &#32;&#32;&#32;&#32;__void_t&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::protocol_type::endpoint,
265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(__b-&gt;resize(std::declval&lt;size_t&gt;()))&#32;&gt;&gt;;
266 
267 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
268 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_endpoint&lt;_Tp,&#32;decltype(__detail::__endpoint_reqs&lt;_Tp&gt;())&gt;
269 &#32;&#32;&#32;&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a6bd7131856cf31c3caa443a674400ab1">true_type</link>
270 &#32;&#32;&#32;&#32;{&#32;};
271 
272 &#32;&#32;<emphasis role="comment">//&#32;Check&#32;Protocol&#32;requirements&#32;for&#32;extensible&#32;implementations.</emphasis>
273 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
274 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_protocol
275 &#32;&#32;&#32;&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a05db727ae5396f8d8518969cd59fff55">false_type</link>&#32;{&#32;};
276 
277 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
278 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
279 &#32;&#32;&#32;&#32;__protocol_reqs(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__a&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>)
280 &#32;&#32;&#32;&#32;-&gt;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;__and_&lt;
281 &#32;&#32;&#32;&#32;&#32;&#32;is_copy_constructible&lt;_Tp&gt;,&#32;is_copy_assignable&lt;_Tp&gt;,
282 &#32;&#32;&#32;&#32;&#32;&#32;__is_endpoint&lt;typename&#32;_Tp::endpoint&gt;,
283 &#32;&#32;&#32;&#32;&#32;&#32;is_same&lt;<emphasis role="keyword">decltype</emphasis>(__a-&gt;family()),&#32;<emphasis role="keywordtype">int</emphasis>&gt;,
284 &#32;&#32;&#32;&#32;&#32;&#32;is_same&lt;<emphasis role="keyword">decltype</emphasis>(__a-&gt;type()),&#32;<emphasis role="keywordtype">int</emphasis>&gt;,
285 &#32;&#32;&#32;&#32;&#32;&#32;is_same&lt;<emphasis role="keyword">decltype</emphasis>(__a-&gt;protocol()),&#32;<emphasis role="keywordtype">int</emphasis>&gt;
286 &#32;&#32;&#32;&#32;&#32;&#32;&gt;<link linkend="_classvalue">::value</link>&gt;;
287 
288 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
289 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_protocol&lt;_Tp,&#32;decltype(__detail::__protocol_reqs&lt;_Tp&gt;())&gt;
290 &#32;&#32;&#32;&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a6bd7131856cf31c3caa443a674400ab1">true_type</link>
291 &#32;&#32;&#32;&#32;{&#32;};
292 
293 &#32;&#32;<emphasis role="comment">//&#32;Check&#32;AcceptableProtocol&#32;requirements</emphasis>
294 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
295 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_acceptable_protocol
296 &#32;&#32;&#32;&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a05db727ae5396f8d8518969cd59fff55">false_type</link>&#32;{&#32;};
297 
298 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
299 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_acceptable_protocol&lt;_Tp,&#32;__void_t&lt;typename&#32;_Tp::socket&gt;&gt;
300 &#32;&#32;&#32;&#32;:&#32;__and_&lt;__is_protocol&lt;_Tp&gt;,&#32;is_move_constructible&lt;typename&#32;_Tp::socket&gt;,
301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_convertible&lt;typename&#32;_Tp::socket*,&#32;basic_socket&lt;_Tp&gt;*&gt;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>
302 &#32;&#32;&#32;&#32;{&#32;};
303 
304 &#32;&#32;<emphasis role="comment">//&#32;Check&#32;InternetProtocol&#32;requirements</emphasis>
305 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
306 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_inet_protocol
307 &#32;&#32;&#32;&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a05db727ae5396f8d8518969cd59fff55">false_type</link>&#32;{&#32;};
308 
309 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
310 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
311 &#32;&#32;&#32;&#32;__inet_proto_reqs(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__a&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>)
312 &#32;&#32;&#32;&#32;-&gt;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;__and_&lt;
313 &#32;&#32;&#32;&#32;&#32;&#32;__is_acceptable_protocol&lt;_Tp&gt;,
314 &#32;&#32;&#32;&#32;&#32;&#32;is_same&lt;typename&#32;_Tp::resolver,&#32;ip::basic_resolver&lt;_Tp&gt;&gt;,
315 &#32;&#32;&#32;&#32;&#32;&#32;is_same&lt;<emphasis role="keyword">decltype</emphasis>(_Tp::v4()),&#32;_Tp&gt;,
316 &#32;&#32;&#32;&#32;&#32;&#32;is_same&lt;<emphasis role="keyword">decltype</emphasis>(_Tp::v6()),&#32;_Tp&gt;,
317 &#32;&#32;&#32;&#32;&#32;&#32;is_convertible&lt;<emphasis role="keyword">decltype</emphasis>(*__a&#32;==&#32;*__a),&#32;<emphasis role="keywordtype">bool</emphasis>&gt;,
318 &#32;&#32;&#32;&#32;&#32;&#32;is_convertible&lt;<emphasis role="keyword">decltype</emphasis>(*__a&#32;!=&#32;*__a),&#32;<emphasis role="keywordtype">bool</emphasis>&gt;
319 &#32;&#32;&#32;&#32;&#32;&#32;&gt;<link linkend="_classvalue">::value</link>&gt;;
320 
321 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
322 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_inet_protocol&lt;_Tp,&#32;decltype(__inet_proto_reqs&lt;_Tp&gt;())&gt;
323 &#32;&#32;&#32;&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a6bd7131856cf31c3caa443a674400ab1">true_type</link>&#32;{&#32;};
324 
325 &#32;&#32;<emphasis role="comment">//&#32;Variable&#32;templates&#32;for&#32;requirements&#32;(with&#32;same&#32;names&#32;as&#32;concepts&#32;above).</emphasis>
326 
327 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
328 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__endpoint&#32;=&#32;__is_endpoint&lt;_Tp&gt;::value;
329 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
330 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__protocol&#32;=&#32;__is_protocol&lt;_Tp&gt;::value;
331 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
332 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__acceptable_protocol&#32;=&#32;__is_acceptable_protocol&lt;_Tp&gt;::value;
333 <emphasis role="preprocessor">#endif</emphasis>
334 }&#32;<emphasis role="comment">//&#32;namespace&#32;__detail</emphasis>
335 
337 
338 }&#32;<emphasis role="comment">//&#32;namespace&#32;v1</emphasis>
339 }&#32;<emphasis role="comment">//&#32;namespace&#32;net</emphasis>
340 }&#32;<emphasis role="comment">//&#32;namespace&#32;experimental</emphasis>
341 _GLIBCXX_END_NAMESPACE_VERSION
342 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
343 
344 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++14</emphasis>
345 
346 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_EXPERIMENTAL_NET_H</emphasis>
</programlisting></section>
