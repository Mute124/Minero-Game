<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2bits_2stl__iterator__base__funcs_8h" xml:lang="en-US">
<title>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/bits/stl_iterator_base_funcs.h File Reference</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/bits/stl_iterator_base_funcs.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &lt;bits/concept_check.h&gt;<?linebreak?>#include &lt;debug/assertions.h&gt;<?linebreak?>#include &lt;bits/stl_iterator_base_types.h&gt;<?linebreak?></programlisting>Include dependency graph for stl_iterator_base_funcs.h:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="_classes_2lib_2include_2c_09_09_2bits_2stl__iterator__base__funcs_8h__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>namespace std <link linkend="__classes_2lib_2include_2c_09_09_2bits_2stl__iterator__base__funcs_8h_1a544d74b2d5d0dd2197f5fd6f02691de0">_GLIBCXX_VISIBILITY</link> (default)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="__classes_2lib_2include_2c_09_09_2bits_2stl__iterator__base__funcs_8h_1a544d74b2d5d0dd2197f5fd6f02691de0"/><section>
    <title>_GLIBCXX_VISIBILITY()</title>
<indexterm><primary>_GLIBCXX_VISIBILITY</primary><secondary>stl_iterator_base_funcs.h</secondary></indexterm>
<indexterm><primary>stl_iterator_base_funcs.h</primary><secondary>_GLIBCXX_VISIBILITY</secondary></indexterm>
<para><computeroutput>namespace std _GLIBCXX_VISIBILITY (default )</computeroutput></para>
<para>A generalization of pointer arithmetic. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__first</entry><entry>
<para>An input iterator. </para>
</entry>
                            </row>
                            <row>
<entry>__last</entry><entry>
<para>An input iterator. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The distance between them.</para>
</formalpara>
Returns <computeroutput>n</computeroutput> such that __first + n == __last. This requires that <computeroutput>__last</computeroutput> must be reachable from <computeroutput>__first</computeroutput>. Note that <computeroutput>n</computeroutput> may be negative.</para>

<para>For random access iterators, this uses their <computeroutput>+</computeroutput> and <computeroutput>-</computeroutput> operations and are constant time. For other iterator classes they are linear time.</para>

<para>A generalization of pointer arithmetic. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__i</entry><entry>
<para>An input iterator. </para>
</entry>
                            </row>
                            <row>
<entry>__n</entry><entry>
<para>The <emphasis>delta</emphasis> by which to change <computeroutput>__i</computeroutput>. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Nothing.</para>
</formalpara>
This increments <computeroutput>i</computeroutput> by <computeroutput>n</computeroutput>. For bidirectional and random access iterators, <computeroutput>__n</computeroutput> may be negative, in which case <computeroutput>__i</computeroutput> is decremented.</para>

<para>For random access iterators, this uses their <computeroutput>+</computeroutput> and <computeroutput>-</computeroutput> operations and are constant time. For other iterator classes they are linear time.</para>
</section>
</section>
</section>
