<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2parallel_2multiseq__selection_8h_source" xml:lang="en-US">
<title>multiseq_selection.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/parallel/multiseq_selection.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2007-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
39 <emphasis role="comment">//&#32;Written&#32;by&#32;Johannes&#32;Singler.</emphasis>
40 
41 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_PARALLEL_MULTISEQ_SELECTION_H</emphasis>
42 <emphasis role="preprocessor">#define&#32;_GLIBCXX_PARALLEL_MULTISEQ_SELECTION_H&#32;1</emphasis>
43 
44 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
45 <emphasis role="preprocessor">#include&#32;&lt;queue&gt;</emphasis>
46 
47 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_algo.h&gt;</emphasis>
48 
49 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__parallel">__gnu_parallel</link>
50 {
52 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
53 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class____gnu__parallel_1_1___lexicographic">_Lexicographic</link>
54 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;std::binary_function&lt;std::pair&lt;_T1,&#32;_T2&gt;,
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;_T1,&#32;_T2&gt;,&#32;bool&gt;
56 &#32;&#32;&#32;&#32;{
57 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
58 &#32;&#32;&#32;&#32;&#32;&#32;_Compare&amp;&#32;_M_comp;
59 
60 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
61 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1___lexicographic_1a817d3d5fce2ae6352e239310ab0b8333">_Lexicographic</link>(_Compare&amp;&#32;__comp)&#32;:&#32;_M_comp(__comp)&#32;{&#32;}
62 
63 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
64 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1___lexicographic_1aa60a1ad0f152e8351f8297a7e3c63a51">operator()</link>(<emphasis role="keyword">const</emphasis>&#32;std::pair&lt;_T1,&#32;_T2&gt;&amp;&#32;__p1,
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::pair&lt;_T1,&#32;_T2&gt;&amp;&#32;__p2)<emphasis role="keyword">&#32;const</emphasis>
66 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_comp(__p1.first,&#32;__p2.first))
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
69 
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_comp(__p2.first,&#32;__p1.first))
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
72 
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Firsts&#32;are&#32;equal.</emphasis>
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__p1.second&#32;&lt;&#32;__p2.second;
75 &#32;&#32;&#32;&#32;&#32;&#32;}
76 &#32;&#32;&#32;&#32;};
77 
79 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
80 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class____gnu__parallel_1_1___lexicographic_reverse">_LexicographicReverse</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;std::binary_function&lt;_T1,&#32;_T2,&#32;bool&gt;
81 &#32;&#32;&#32;&#32;{
82 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
83 &#32;&#32;&#32;&#32;&#32;&#32;_Compare&amp;&#32;_M_comp;
84 
85 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
86 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1___lexicographic_reverse_1a2ae474b31d5ee5e5eb1ce979a3c6b495">_LexicographicReverse</link>(_Compare&amp;&#32;__comp)&#32;:&#32;_M_comp(__comp)&#32;{&#32;}
87 
88 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
89 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1___lexicographic_reverse_1a29de24fd2ccedbadc7f9eda683b21612">operator()</link>(<emphasis role="keyword">const</emphasis>&#32;std::pair&lt;_T1,&#32;_T2&gt;&amp;&#32;__p1,
90 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::pair&lt;_T1,&#32;_T2&gt;&amp;&#32;__p2)<emphasis role="keyword">&#32;const</emphasis>
91 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_comp(__p2.first,&#32;__p1.first))
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
94 
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_comp(__p1.first,&#32;__p2.first))
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
97 
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Firsts&#32;are&#32;equal.</emphasis>
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__p2.second&#32;&lt;&#32;__p1.second;
100 &#32;&#32;&#32;&#32;&#32;&#32;}
101 &#32;&#32;&#32;&#32;};
102 
119 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RanSeqs,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RankType,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RankIterator,
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
121 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
122 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1ade1f4c5da0794c4f1a09465d4aee6c1d">multiseq_partition</link>(_RanSeqs&#32;__begin_seqs,&#32;_RanSeqs&#32;__end_seqs,
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RankType&#32;__rank,
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RankIterator&#32;__begin_offsets,
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp&#32;=&#32;std::less&lt;
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;<emphasis role="keyword">typename</emphasis>
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::iterator_traits&lt;_RanSeqs&gt;::value_type::
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;first_type&gt;::value_type&gt;())&#32;<emphasis role="comment">//&#32;std::less&lt;_Tp&gt;</emphasis>
129 &#32;&#32;&#32;&#32;{
130 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2compiletime__settings_8h_1a77fb93c9cecec331ccee755972695128">_GLIBCXX_CALL</link>(__end_seqs&#32;-&#32;__begin_seqs)
131 
132 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_RanSeqs&gt;::value_type::first_type
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_It;
134 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_RanSeqs&gt;::difference_type
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SeqNumber;
136 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_It&gt;::difference_type
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType;
138 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_It&gt;::value_type&#32;_ValueType;
139 
140 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1___lexicographic">_Lexicographic&lt;_ValueType, _SeqNumber, _Compare&gt;</link>&#32;__lcomp(__comp);
141 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1___lexicographic_reverse">_LexicographicReverse&lt;_ValueType, _SeqNumber, _Compare&gt;</link>&#32;__lrcomp(__comp);
142 
143 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Number&#32;of&#32;sequences,&#32;number&#32;of&#32;elements&#32;in&#32;total&#32;(possibly</emphasis>
144 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;including&#32;padding).</emphasis>
145 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__m&#32;=&#32;std::distance(__begin_seqs,&#32;__end_seqs),&#32;__nn&#32;=&#32;0,
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__nmax,&#32;__n,&#32;__r;
147 
148 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_SeqNumber&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__m;&#32;__i++)
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__nn&#32;+=&#32;std::distance(__begin_seqs[__i].<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin_seqs[__i].second);
152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2base_8h_1acff27ea0a7532ee31661cbd47a95d3de">_GLIBCXX_PARALLEL_ASSERT</link>(
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::distance(__begin_seqs[__i].<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,
154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin_seqs[__i].second)&#32;&gt;&#32;0);
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
156 
157 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__rank&#32;==&#32;__nn)
158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_SeqNumber&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__m;&#32;__i++)
160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin_offsets[__i]&#32;=&#32;__begin_seqs[__i].second;&#32;<emphasis role="comment">//&#32;Very&#32;end.</emphasis>
161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Return&#32;__m&#32;-&#32;1;</emphasis>
162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
164 
165 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2base_8h_1acff27ea0a7532ee31661cbd47a95d3de">_GLIBCXX_PARALLEL_ASSERT</link>(__m&#32;!=&#32;0);
166 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2base_8h_1acff27ea0a7532ee31661cbd47a95d3de">_GLIBCXX_PARALLEL_ASSERT</link>(__nn&#32;!=&#32;0);
167 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2base_8h_1acff27ea0a7532ee31661cbd47a95d3de">_GLIBCXX_PARALLEL_ASSERT</link>(__rank&#32;&gt;=&#32;0);
168 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2base_8h_1acff27ea0a7532ee31661cbd47a95d3de">_GLIBCXX_PARALLEL_ASSERT</link>(__rank&#32;&lt;&#32;__nn);
169 
170 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType*&#32;__ns&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;_DifferenceType[__m];
171 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType*&#32;__a&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;_DifferenceType[__m];
172 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType*&#32;__b&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;_DifferenceType[__m];
173 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__l;
174 
175 &#32;&#32;&#32;&#32;&#32;&#32;__ns[0]&#32;=&#32;std::distance(__begin_seqs[0].<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;__begin_seqs[0].second);
176 &#32;&#32;&#32;&#32;&#32;&#32;__nmax&#32;=&#32;__ns[0];
177 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_SeqNumber&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__m;&#32;__i++)
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ns[__i]&#32;=&#32;std::distance(__begin_seqs[__i].<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin_seqs[__i].second);
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__nmax&#32;=&#32;std::max(__nmax,&#32;__ns[__i]);
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
183 
184 &#32;&#32;&#32;&#32;&#32;&#32;__r&#32;=&#32;<link linkend="_namespace____gnu__parallel_1ae8e1f6dc07de01f28bf591339cf8aa9c">__rd_log2</link>(__nmax)&#32;+&#32;1;
185 
186 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Pad&#32;all&#32;lists&#32;to&#32;this&#32;length,&#32;at&#32;least&#32;as&#32;long&#32;as&#32;any&#32;ns[__i],</emphasis>
187 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;equality&#32;iff&#32;__nmax&#32;=&#32;2^__k&#32;-&#32;1.</emphasis>
188 &#32;&#32;&#32;&#32;&#32;&#32;__l&#32;=&#32;(1ULL&#32;&lt;&lt;&#32;__r)&#32;-&#32;1;
189 
190 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_SeqNumber&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__m;&#32;__i++)
191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a[__i]&#32;=&#32;0;
193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__b[__i]&#32;=&#32;__l;
194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
195 &#32;&#32;&#32;&#32;&#32;&#32;__n&#32;=&#32;__l&#32;/&#32;2;
196 
197 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Invariants:</emphasis>
198 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0&#32;&lt;=&#32;__a[__i]&#32;&lt;=&#32;__ns[__i],&#32;0&#32;&lt;=&#32;__b[__i]&#32;&lt;=&#32;__l</emphasis>
199 
200 <emphasis role="preprocessor">#define&#32;__S(__i)&#32;(__begin_seqs[__i].first)</emphasis>
201 
202 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Initial&#32;partition.</emphasis>
203 &#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::pair&lt;_ValueType,&#32;_SeqNumber&gt;&#32;&gt;&#32;__sample;
204 
205 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_SeqNumber&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__m;&#32;__i++)
206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&lt;&#32;__ns[__i])&#32;&#32;&#32;&#32;<emphasis role="comment">//__sequence&#32;long&#32;enough</emphasis>
207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sample.push_back(std::make_pair(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2multiseq__selection_8h_1a3b62a50de6f447fc735249345ae3a3da">__S</link>(__i)[__n],&#32;__i));
208 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">__gnu_sequential::sort</link>(__sample.begin(),&#32;__sample.end(),&#32;__lcomp);
209 
210 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_SeqNumber&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__m;&#32;__i++)&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//conceptual&#32;infinity</emphasis>
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&gt;=&#32;__ns[__i])&#32;&#32;&#32;<emphasis role="comment">//__sequence&#32;too&#32;short,&#32;conceptual&#32;infinity</emphasis>
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sample.push_back(
213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::make_pair(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2multiseq__selection_8h_1a3b62a50de6f447fc735249345ae3a3da">__S</link>(__i)[0]&#32;<emphasis role="comment">/*__dummy&#32;element*/</emphasis>,&#32;__i));
214 
215 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__localrank&#32;=&#32;__rank&#32;/&#32;__l;
216 
217 &#32;&#32;&#32;&#32;&#32;&#32;_SeqNumber&#32;__j;
218 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(__j&#32;=&#32;0;
219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__j&#32;&lt;&#32;__localrank&#32;&amp;&amp;&#32;((__n&#32;+&#32;1)&#32;&lt;=&#32;__ns[__sample[__j].second]);
220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__j)
221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a[__sample[__j].second]&#32;+=&#32;__n&#32;+&#32;1;
222 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__j&#32;&lt;&#32;__m;&#32;__j++)
223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__b[__sample[__j].second]&#32;-=&#32;__n&#32;+&#32;1;
224 &#32;&#32;&#32;&#32;&#32;&#32;
225 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Further&#32;refinement.</emphasis>
226 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__n&#32;&gt;&#32;0)
227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__n&#32;/=&#32;2;
229 
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SeqNumber&#32;__lmax_seq&#32;=&#32;-1;&#32;&#32;<emphasis role="comment">//&#32;to&#32;avoid&#32;warning</emphasis>
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_ValueType*&#32;__lmax&#32;=&#32;0;&#32;<emphasis role="comment">//&#32;impossible&#32;to&#32;avoid&#32;the&#32;warning?</emphasis>
232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_SeqNumber&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__m;&#32;__i++)
233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__a[__i]&#32;&gt;&#32;0)
235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__lmax)
237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lmax&#32;=&#32;&amp;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2multiseq__selection_8h_1a3b62a50de6f447fc735249345ae3a3da">__S</link>(__i)[__a[__i]&#32;-&#32;1]);
239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lmax_seq&#32;=&#32;__i;
240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Max,&#32;favor&#32;rear&#32;sequences.</emphasis>
244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__comp(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2multiseq__selection_8h_1a3b62a50de6f447fc735249345ae3a3da">__S</link>(__i)[__a[__i]&#32;-&#32;1],&#32;*__lmax))
245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lmax&#32;=&#32;&amp;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2multiseq__selection_8h_1a3b62a50de6f447fc735249345ae3a3da">__S</link>(__i)[__a[__i]&#32;-&#32;1]);
247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lmax_seq&#32;=&#32;__i;
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
252 
253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SeqNumber&#32;__i;
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__m;&#32;__i++)
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__middle&#32;=&#32;(__b[__i]&#32;+&#32;__a[__i])&#32;/&#32;2;
257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__lmax&#32;&amp;&amp;&#32;__middle&#32;&lt;&#32;__ns[__i]&#32;&amp;&amp;
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lcomp(std::make_pair(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2multiseq__selection_8h_1a3b62a50de6f447fc735249345ae3a3da">__S</link>(__i)[__middle],&#32;__i),
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::make_pair(*__lmax,&#32;__lmax_seq)))
260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a[__i]&#32;=&#32;std::min(__a[__i]&#32;+&#32;__n&#32;+&#32;1,&#32;__ns[__i]);
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__b[__i]&#32;-=&#32;__n&#32;+&#32;1;
263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
264 
265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__leftsize&#32;=&#32;0;
266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_SeqNumber&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__m;&#32;__i++)
267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__leftsize&#32;+=&#32;__a[__i]&#32;/&#32;(__n&#32;+&#32;1);
268 
269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__skew&#32;=&#32;__rank&#32;/&#32;(__n&#32;+&#32;1)&#32;-&#32;__leftsize;
270 
271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__skew&#32;&gt;&#32;0)
272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Move&#32;to&#32;the&#32;left,&#32;find&#32;smallest.</emphasis>
274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::priority_queue&lt;std::pair&lt;_ValueType,&#32;_SeqNumber&gt;,
275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::pair&lt;_ValueType,&#32;_SeqNumber&gt;&#32;&gt;,
276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1___lexicographic_reverse">_LexicographicReverse&lt;_ValueType, _SeqNumber, _Compare&gt;</link>&#32;&gt;
277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pq(__lrcomp);
278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_SeqNumber&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__m;&#32;__i++)
280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__b[__i]&#32;&lt;&#32;__ns[__i])
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pq.push(std::make_pair(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2multiseq__selection_8h_1a3b62a50de6f447fc735249345ae3a3da">__S</link>(__i)[__b[__i]],&#32;__i));
282 
283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__skew&#32;!=&#32;0&#32;&amp;&amp;&#32;!__pq.empty();&#32;--__skew)
284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SeqNumber&#32;__source&#32;=&#32;__pq.top().second;
286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pq.pop();
287 
288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a[__source]
289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::min(__a[__source]&#32;+&#32;__n&#32;+&#32;1,&#32;__ns[__source]);
290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__b[__source]&#32;+=&#32;__n&#32;+&#32;1;
291 
292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__b[__source]&#32;&lt;&#32;__ns[__source])
293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pq.push(
294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::make_pair(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2multiseq__selection_8h_1a3b62a50de6f447fc735249345ae3a3da">__S</link>(__source)[__b[__source]],&#32;__source));
295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__skew&#32;&lt;&#32;0)
298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Move&#32;to&#32;the&#32;right,&#32;find&#32;greatest.</emphasis>
300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::priority_queue&lt;std::pair&lt;_ValueType,&#32;_SeqNumber&gt;,
301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::pair&lt;_ValueType,&#32;_SeqNumber&gt;&#32;&gt;,
302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1___lexicographic">_Lexicographic&lt;_ValueType, _SeqNumber, _Compare&gt;</link>&#32;&gt;
303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pq(__lcomp);
304 
305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_SeqNumber&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__m;&#32;__i++)
306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__a[__i]&#32;&gt;&#32;0)
307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pq.push(std::make_pair(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2multiseq__selection_8h_1a3b62a50de6f447fc735249345ae3a3da">__S</link>(__i)[__a[__i]&#32;-&#32;1],&#32;__i));
308 
309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__skew&#32;!=&#32;0;&#32;++__skew)
310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SeqNumber&#32;__source&#32;=&#32;__pq.top().second;
312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pq.pop();
313 
314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a[__source]&#32;-=&#32;__n&#32;+&#32;1;
315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__b[__source]&#32;-=&#32;__n&#32;+&#32;1;
316 
317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__a[__source]&#32;&gt;&#32;0)
318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pq.push(std::make_pair(
319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2multiseq__selection_8h_1a3b62a50de6f447fc735249345ae3a3da">__S</link>(__source)[__a[__source]&#32;-&#32;1],&#32;__source));
320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
323 
324 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Postconditions:</emphasis>
325 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__a[__i]&#32;==&#32;__b[__i]&#32;in&#32;most&#32;cases,&#32;except&#32;when&#32;__a[__i]&#32;has&#32;been</emphasis>
326 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clamped&#32;because&#32;of&#32;having&#32;reached&#32;the&#32;boundary</emphasis>
327 
328 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Now&#32;return&#32;the&#32;result,&#32;calculate&#32;the&#32;offset.</emphasis>
329 
330 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Compare&#32;the&#32;keys&#32;on&#32;both&#32;edges&#32;of&#32;the&#32;border.</emphasis>
331 
332 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Maximum&#32;of&#32;left&#32;edge,&#32;minimum&#32;of&#32;right&#32;edge.</emphasis>
333 &#32;&#32;&#32;&#32;&#32;&#32;_ValueType*&#32;__maxleft&#32;=&#32;0;
334 &#32;&#32;&#32;&#32;&#32;&#32;_ValueType*&#32;__minright&#32;=&#32;0;
335 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_SeqNumber&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__m;&#32;__i++)
336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__a[__i]&#32;&gt;&#32;0)
338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__maxleft)
340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__maxleft&#32;=&#32;&amp;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2multiseq__selection_8h_1a3b62a50de6f447fc735249345ae3a3da">__S</link>(__i)[__a[__i]&#32;-&#32;1]);
341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Max,&#32;favor&#32;rear&#32;sequences.</emphasis>
344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__comp(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2multiseq__selection_8h_1a3b62a50de6f447fc735249345ae3a3da">__S</link>(__i)[__a[__i]&#32;-&#32;1],&#32;*__maxleft))
345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__maxleft&#32;=&#32;&amp;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2multiseq__selection_8h_1a3b62a50de6f447fc735249345ae3a3da">__S</link>(__i)[__a[__i]&#32;-&#32;1]);
346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__b[__i]&#32;&lt;&#32;__ns[__i])
349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__minright)
351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__minright&#32;=&#32;&amp;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2multiseq__selection_8h_1a3b62a50de6f447fc735249345ae3a3da">__S</link>(__i)[__b[__i]]);
352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Min,&#32;favor&#32;fore&#32;sequences.</emphasis>
355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2multiseq__selection_8h_1a3b62a50de6f447fc735249345ae3a3da">__S</link>(__i)[__b[__i]],&#32;*__minright))
356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__minright&#32;=&#32;&amp;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2multiseq__selection_8h_1a3b62a50de6f447fc735249345ae3a3da">__S</link>(__i)[__b[__i]]);
357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
360 
361 &#32;&#32;&#32;&#32;&#32;&#32;_SeqNumber&#32;__seq&#32;=&#32;0;
362 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_SeqNumber&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__m;&#32;__i++)
363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin_offsets[__i]&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2multiseq__selection_8h_1a3b62a50de6f447fc735249345ae3a3da">__S</link>(__i)&#32;+&#32;__a[__i];
364 
365 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;__ns;
366 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;__a;
367 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;__b;
368 &#32;&#32;&#32;&#32;}
369 
370 
385 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RanSeqs,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RankType,
386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
387 &#32;&#32;&#32;&#32;_Tp
388 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a68f665a2f83172d9e12b8332ce573d5d">multiseq_selection</link>(_RanSeqs&#32;__begin_seqs,&#32;_RanSeqs&#32;__end_seqs,
389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RankType&#32;__rank,
390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RankType&amp;&#32;__offset,&#32;_Compare&#32;__comp&#32;=&#32;std::less&lt;_Tp&gt;())
391 &#32;&#32;&#32;&#32;{
392 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2compiletime__settings_8h_1a77fb93c9cecec331ccee755972695128">_GLIBCXX_CALL</link>(__end_seqs&#32;-&#32;__begin_seqs)
393 
394 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_RanSeqs&gt;::value_type::first_type
395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_It;
396 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_RanSeqs&gt;::difference_type
397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SeqNumber;
398 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_It&gt;::difference_type
399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType;
400 
401 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1___lexicographic">_Lexicographic&lt;_Tp, _SeqNumber, _Compare&gt;</link>&#32;__lcomp(__comp);
402 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1___lexicographic_reverse">_LexicographicReverse&lt;_Tp, _SeqNumber, _Compare&gt;</link>&#32;__lrcomp(__comp);
403 
404 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Number&#32;of&#32;sequences,&#32;number&#32;of&#32;elements&#32;in&#32;total&#32;(possibly</emphasis>
405 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;including&#32;padding).</emphasis>
406 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__m&#32;=&#32;std::distance(__begin_seqs,&#32;__end_seqs);
407 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__nn&#32;=&#32;0;
408 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__nmax,&#32;__n,&#32;__r;
409 
410 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_SeqNumber&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__m;&#32;__i++)
411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__nn&#32;+=&#32;std::distance(__begin_seqs[__i].<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,
412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin_seqs[__i].second);
413 
414 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__m&#32;==&#32;0&#32;||&#32;__nn&#32;==&#32;0&#32;||&#32;__rank&#32;&lt;&#32;0&#32;||&#32;__rank&#32;&gt;=&#32;__nn)
415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;result&#32;undefined&#32;if&#32;there&#32;is&#32;no&#32;data&#32;or&#32;__rank&#32;is&#32;outside&#32;bounds</emphasis>
417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<link linkend="_classstd_1_1exception">std::exception</link>();
418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
419 
420 
421 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType*&#32;__ns&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;_DifferenceType[__m];
422 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType*&#32;__a&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;_DifferenceType[__m];
423 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType*&#32;__b&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;_DifferenceType[__m];
424 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__l;
425 
426 &#32;&#32;&#32;&#32;&#32;&#32;__ns[0]&#32;=&#32;std::distance(__begin_seqs[0].<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;__begin_seqs[0].second);
427 &#32;&#32;&#32;&#32;&#32;&#32;__nmax&#32;=&#32;__ns[0];
428 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_SeqNumber&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__m;&#32;++__i)
429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ns[__i]&#32;=&#32;std::distance(__begin_seqs[__i].<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,
431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin_seqs[__i].second);
432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__nmax&#32;=&#32;std::max(__nmax,&#32;__ns[__i]);
433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
434 
435 &#32;&#32;&#32;&#32;&#32;&#32;__r&#32;=&#32;<link linkend="_namespace____gnu__parallel_1ae8e1f6dc07de01f28bf591339cf8aa9c">__rd_log2</link>(__nmax)&#32;+&#32;1;
436 
437 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Pad&#32;all&#32;lists&#32;to&#32;this&#32;length,&#32;at&#32;least&#32;as&#32;long&#32;as&#32;any&#32;ns[__i],</emphasis>
438 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;equality&#32;iff&#32;__nmax&#32;=&#32;2^__k&#32;-&#32;1</emphasis>
439 &#32;&#32;&#32;&#32;&#32;&#32;__l&#32;=&#32;<link linkend="_namespace____gnu__parallel_1a9105a85041ac81dba62d60dc669ec169">__round_up_to_pow2</link>(__r)&#32;-&#32;1;
440 
441 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_SeqNumber&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__m;&#32;++__i)
442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a[__i]&#32;=&#32;0;
444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__b[__i]&#32;=&#32;__l;
445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
446 &#32;&#32;&#32;&#32;&#32;&#32;__n&#32;=&#32;__l&#32;/&#32;2;
447 
448 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Invariants:</emphasis>
449 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0&#32;&lt;=&#32;__a[__i]&#32;&lt;=&#32;__ns[__i],&#32;0&#32;&lt;=&#32;__b[__i]&#32;&lt;=&#32;__l</emphasis>
450 
451 <emphasis role="preprocessor">#define&#32;__S(__i)&#32;(__begin_seqs[__i].first)</emphasis>
452 
453 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Initial&#32;partition.</emphasis>
454 &#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::pair&lt;_Tp,&#32;_SeqNumber&gt;&#32;&gt;&#32;__sample;
455 
456 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_SeqNumber&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__m;&#32;__i++)
457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&lt;&#32;__ns[__i])
458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sample.push_back(std::make_pair(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2multiseq__selection_8h_1a3b62a50de6f447fc735249345ae3a3da">__S</link>(__i)[__n],&#32;__i));
459 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">__gnu_sequential::sort</link>(__sample.begin(),&#32;__sample.end(),
460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lcomp,&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">sequential_tag</link>());
461 
462 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Conceptual&#32;infinity.</emphasis>
463 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_SeqNumber&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__m;&#32;__i++)
464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&gt;=&#32;__ns[__i])
465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sample.push_back(
466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::make_pair(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2multiseq__selection_8h_1a3b62a50de6f447fc735249345ae3a3da">__S</link>(__i)[0]&#32;<emphasis role="comment">/*__dummy&#32;element*/</emphasis>,&#32;__i));
467 
468 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__localrank&#32;=&#32;__rank&#32;/&#32;__l;
469 
470 &#32;&#32;&#32;&#32;&#32;&#32;_SeqNumber&#32;__j;
471 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(__j&#32;=&#32;0;
472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__j&#32;&lt;&#32;__localrank&#32;&amp;&amp;&#32;((__n&#32;+&#32;1)&#32;&lt;=&#32;__ns[__sample[__j].second]);
473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__j)
474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a[__sample[__j].second]&#32;+=&#32;__n&#32;+&#32;1;
475 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__j&#32;&lt;&#32;__m;&#32;++__j)
476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__b[__sample[__j].second]&#32;-=&#32;__n&#32;+&#32;1;
477 
478 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Further&#32;refinement.</emphasis>
479 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__n&#32;&gt;&#32;0)
480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__n&#32;/=&#32;2;
482 
483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__lmax&#32;=&#32;0;
484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_SeqNumber&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__m;&#32;++__i)
485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__a[__i]&#32;&gt;&#32;0)
487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__lmax)
489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lmax&#32;=&#32;&amp;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2multiseq__selection_8h_1a3b62a50de6f447fc735249345ae3a3da">__S</link>(__i)[__a[__i]&#32;-&#32;1]);
490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(*__lmax,&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2multiseq__selection_8h_1a3b62a50de6f447fc735249345ae3a3da">__S</link>(__i)[__a[__i]&#32;-&#32;1]))&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//max</emphasis>
493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lmax&#32;=&#32;&amp;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2multiseq__selection_8h_1a3b62a50de6f447fc735249345ae3a3da">__S</link>(__i)[__a[__i]&#32;-&#32;1]);
494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
497 
498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SeqNumber&#32;__i;
499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__m;&#32;__i++)
500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__middle&#32;=&#32;(__b[__i]&#32;+&#32;__a[__i])&#32;/&#32;2;
502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__lmax&#32;&amp;&amp;&#32;__middle&#32;&lt;&#32;__ns[__i]
503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__comp(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2multiseq__selection_8h_1a3b62a50de6f447fc735249345ae3a3da">__S</link>(__i)[__middle],&#32;*__lmax))
504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a[__i]&#32;=&#32;std::min(__a[__i]&#32;+&#32;__n&#32;+&#32;1,&#32;__ns[__i]);
505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__b[__i]&#32;-=&#32;__n&#32;+&#32;1;
507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
508 
509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__leftsize&#32;=&#32;0;
510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_SeqNumber&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__m;&#32;++__i)
511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__leftsize&#32;+=&#32;__a[__i]&#32;/&#32;(__n&#32;+&#32;1);
512 
513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__skew&#32;=&#32;__rank&#32;/&#32;(__n&#32;+&#32;1)&#32;-&#32;__leftsize;
514 
515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__skew&#32;&gt;&#32;0)
516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Move&#32;to&#32;the&#32;left,&#32;find&#32;smallest.</emphasis>
518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::priority_queue&lt;std::pair&lt;_Tp,&#32;_SeqNumber&gt;,
519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::pair&lt;_Tp,&#32;_SeqNumber&gt;&#32;&gt;,
520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1___lexicographic_reverse">_LexicographicReverse&lt;_Tp, _SeqNumber, _Compare&gt;</link>&#32;&gt;
521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pq(__lrcomp);
522 
523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_SeqNumber&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__m;&#32;++__i)
524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__b[__i]&#32;&lt;&#32;__ns[__i])
525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pq.push(std::make_pair(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2multiseq__selection_8h_1a3b62a50de6f447fc735249345ae3a3da">__S</link>(__i)[__b[__i]],&#32;__i));
526 
527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__skew&#32;!=&#32;0&#32;&amp;&amp;&#32;!__pq.empty();&#32;--__skew)
528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SeqNumber&#32;__source&#32;=&#32;__pq.top().second;
530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pq.pop();
531 
532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a[__source]
533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::min(__a[__source]&#32;+&#32;__n&#32;+&#32;1,&#32;__ns[__source]);
534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__b[__source]&#32;+=&#32;__n&#32;+&#32;1;
535 
536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__b[__source]&#32;&lt;&#32;__ns[__source])
537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pq.push(
538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::make_pair(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2multiseq__selection_8h_1a3b62a50de6f447fc735249345ae3a3da">__S</link>(__source)[__b[__source]],&#32;__source));
539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__skew&#32;&lt;&#32;0)
542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Move&#32;to&#32;the&#32;right,&#32;find&#32;greatest.</emphasis>
544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::priority_queue&lt;std::pair&lt;_Tp,&#32;_SeqNumber&gt;,
545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::pair&lt;_Tp,&#32;_SeqNumber&gt;&#32;&gt;,
546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1___lexicographic">_Lexicographic&lt;_Tp, _SeqNumber, _Compare&gt;</link>&#32;&gt;&#32;__pq(__lcomp);
547 
548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_SeqNumber&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__m;&#32;++__i)
549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__a[__i]&#32;&gt;&#32;0)
550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pq.push(std::make_pair(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2multiseq__selection_8h_1a3b62a50de6f447fc735249345ae3a3da">__S</link>(__i)[__a[__i]&#32;-&#32;1],&#32;__i));
551 
552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__skew&#32;!=&#32;0;&#32;++__skew)
553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SeqNumber&#32;__source&#32;=&#32;__pq.top().second;
555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pq.pop();
556 
557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a[__source]&#32;-=&#32;__n&#32;+&#32;1;
558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__b[__source]&#32;-=&#32;__n&#32;+&#32;1;
559 
560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__a[__source]&#32;&gt;&#32;0)
561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pq.push(std::make_pair(
562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2multiseq__selection_8h_1a3b62a50de6f447fc735249345ae3a3da">__S</link>(__source)[__a[__source]&#32;-&#32;1],&#32;__source));
563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
566 
567 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Postconditions:</emphasis>
568 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__a[__i]&#32;==&#32;__b[__i]&#32;in&#32;most&#32;cases,&#32;except&#32;when&#32;__a[__i]&#32;has&#32;been</emphasis>
569 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clamped&#32;because&#32;of&#32;having&#32;reached&#32;the&#32;boundary</emphasis>
570 
571 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Now&#32;return&#32;the&#32;result,&#32;calculate&#32;the&#32;offset.</emphasis>
572 
573 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Compare&#32;the&#32;keys&#32;on&#32;both&#32;edges&#32;of&#32;the&#32;border.</emphasis>
574 
575 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Maximum&#32;of&#32;left&#32;edge,&#32;minimum&#32;of&#32;right&#32;edge.</emphasis>
576 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__maxleftset&#32;=&#32;<emphasis role="keyword">false</emphasis>,&#32;__minrightset&#32;=&#32;<emphasis role="keyword">false</emphasis>;
577 
578 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Impossible&#32;to&#32;avoid&#32;the&#32;warning?</emphasis>
579 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;__maxleft,&#32;__minright;
580 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_SeqNumber&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__m;&#32;++__i)
581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__a[__i]&#32;&gt;&#32;0)
583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__maxleftset)
585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__maxleft&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2multiseq__selection_8h_1a3b62a50de6f447fc735249345ae3a3da">__S</link>(__i)[__a[__i]&#32;-&#32;1];
587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__maxleftset&#32;=&#32;<emphasis role="keyword">true</emphasis>;
588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Max.</emphasis>
592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__maxleft,&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2multiseq__selection_8h_1a3b62a50de6f447fc735249345ae3a3da">__S</link>(__i)[__a[__i]&#32;-&#32;1]))
593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__maxleft&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2multiseq__selection_8h_1a3b62a50de6f447fc735249345ae3a3da">__S</link>(__i)[__a[__i]&#32;-&#32;1];
594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__b[__i]&#32;&lt;&#32;__ns[__i])
597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__minrightset)
599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__minright&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2multiseq__selection_8h_1a3b62a50de6f447fc735249345ae3a3da">__S</link>(__i)[__b[__i]];
601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__minrightset&#32;=&#32;<emphasis role="keyword">true</emphasis>;
602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Min.</emphasis>
606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2multiseq__selection_8h_1a3b62a50de6f447fc735249345ae3a3da">__S</link>(__i)[__b[__i]],&#32;__minright))
607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__minright&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2multiseq__selection_8h_1a3b62a50de6f447fc735249345ae3a3da">__S</link>(__i)[__b[__i]];
608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
610 &#32;&#32;&#32;&#32;&#32;&#32;}
611 
612 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Minright&#32;is&#32;the&#32;__splitter,&#32;in&#32;any&#32;case.</emphasis>
613 
614 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__maxleftset&#32;||&#32;__comp(__minright,&#32;__maxleft))
615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Good&#32;luck,&#32;everything&#32;is&#32;split&#32;unambiguously.</emphasis>
617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__offset&#32;=&#32;0;
618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
619 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;have&#32;to&#32;calculate&#32;an&#32;offset.</emphasis>
622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__offset&#32;=&#32;0;
623 
624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_SeqNumber&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__m;&#32;++__i)
625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;lb
627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::lower_bound(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2multiseq__selection_8h_1a3b62a50de6f447fc735249345ae3a3da">__S</link>(__i),&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2multiseq__selection_8h_1a3b62a50de6f447fc735249345ae3a3da">__S</link>(__i)&#32;+&#32;__ns[__i],
628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__minright,
629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__comp)&#32;-&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2multiseq__selection_8h_1a3b62a50de6f447fc735249345ae3a3da">__S</link>(__i);
630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__offset&#32;+=&#32;__a[__i]&#32;-&#32;lb;
631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
633 
634 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;__ns;
635 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;__a;
636 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;__b;
637 
638 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__minright;
639 &#32;&#32;&#32;&#32;}
640 }
641 
642 <emphasis role="preprocessor">#undef&#32;__S</emphasis>
643 
644 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_GLIBCXX_PARALLEL_MULTISEQ_SELECTION_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
