<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2bits_2cow__string_8h_source" xml:lang="en-US">
<title>cow_string.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/bits/cow_string.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Definition&#32;of&#32;gcc4-compatible&#32;Copy-on-Write&#32;basic_string&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;1997-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
32 <emphasis role="preprocessor">#ifndef&#32;_COW_STRING_H</emphasis>
33 <emphasis role="preprocessor">#define&#32;_COW_STRING_H&#32;1</emphasis>
34 
35 <emphasis role="preprocessor">#if&#32;!&#32;_GLIBCXX_USE_CXX11_ABI</emphasis>
36 
37 <emphasis role="preprocessor">#include&#32;&lt;ext/atomicity.h&gt;</emphasis>&#32;<emphasis role="comment">//&#32;_Atomic_word,&#32;__is_single_threaded</emphasis>
38 
39 <emphasis role="preprocessor">#ifdef&#32;__cpp_lib_is_constant_evaluated</emphasis>
40 <emphasis role="comment">//&#32;Support&#32;P1032R1&#32;in&#32;C++20&#32;(but&#32;not&#32;P0980R1&#32;for&#32;COW&#32;strings).</emphasis>
41 <emphasis role="preprocessor">#&#32;define&#32;__cpp_lib_constexpr_string&#32;201811L</emphasis>
42 <emphasis role="preprocessor">#elif&#32;__cplusplus&#32;&gt;=&#32;201703L&#32;&amp;&amp;&#32;_GLIBCXX_HAVE_IS_CONSTANT_EVALUATED</emphasis>
43 <emphasis role="comment">//&#32;Support&#32;P0426R1&#32;changes&#32;to&#32;char_traits&#32;in&#32;C++17.</emphasis>
44 <emphasis role="preprocessor">#&#32;define&#32;__cpp_lib_constexpr_string&#32;201611L</emphasis>
45 <emphasis role="preprocessor">#endif</emphasis>
46 
47 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
48 {
49 _GLIBCXX_BEGIN_NAMESPACE_VERSION
50 
112 &#32;&#32;<emphasis role="comment">//&#32;21.3&#32;&#32;Template&#32;class&#32;basic_string</emphasis>
113 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
114 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classbasic__string">basic_string</link>
115 &#32;&#32;&#32;&#32;{
116 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Alloc&gt;::template
117 &#32;&#32;&#32;&#32;rebind&lt;_CharT&gt;::other&#32;_CharT_alloc_type;
118 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_CharT_alloc_type&gt;&#32;_CharT_alloc_traits;
119 
120 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Types:</emphasis>
121 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
122 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Traits&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits_type;
123 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits::char_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
124 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Alloc&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator_type;
125 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT_alloc_traits::size_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type;
126 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT_alloc_traits::difference_type&#32;difference_type;
127 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
128 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT_alloc_type::reference&#32;&#32;&#32;&#32;&#32;reference;
129 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT_alloc_type::const_reference&#32;&#32;&#32;const_reference;
130 <emphasis role="preprocessor">#else</emphasis>
131 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;value_type&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference;
132 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_reference;
133 <emphasis role="preprocessor">#endif</emphasis>
134 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT_alloc_traits::pointer&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
135 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT_alloc_traits::const_pointer&#32;&#32;&#32;const_pointer;
136 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__gnu_cxx::__normal_iterator&lt;pointer,&#32;basic_string&gt;&#32;&#32;iterator;
137 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__gnu_cxx::__normal_iterator&lt;const_pointer,&#32;basic_string&gt;
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_iterator;
139 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::reverse_iterator&lt;const_iterator&gt;&#32;const_reverse_iterator;
140 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::reverse_iterator&lt;iterator&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator;
141 
142 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
143 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;type&#32;used&#32;for&#32;positions&#32;in&#32;insert,&#32;erase&#32;etc.</emphasis>
144 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;iterator&#32;__const_iterator;
145 
146 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
147 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_Rep:&#32;string&#32;representation</emphasis>
148 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;Invariants:</emphasis>
149 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;1.&#32;String&#32;really&#32;contains&#32;_M_length&#32;+&#32;1&#32;characters:&#32;due&#32;to&#32;21.3.4</emphasis>
150 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;must&#32;be&#32;kept&#32;null-terminated.</emphasis>
151 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;2.&#32;_M_capacity&#32;&gt;=&#32;_M_length</emphasis>
152 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;Allocated&#32;memory&#32;is&#32;always&#32;(_M_capacity&#32;+&#32;1)&#32;*&#32;sizeof(_CharT).</emphasis>
153 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;3.&#32;_M_refcount&#32;has&#32;three&#32;states:</emphasis>
154 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;-1:&#32;leaked,&#32;one&#32;reference,&#32;no&#32;ref-copies&#32;allowed,&#32;non-const.</emphasis>
155 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;0:&#32;one&#32;reference,&#32;non-const.</emphasis>
156 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;n&gt;0:&#32;n&#32;+&#32;1&#32;references,&#32;operations&#32;require&#32;a&#32;lock,&#32;const.</emphasis>
157 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;4.&#32;All&#32;fields==0&#32;is&#32;an&#32;empty&#32;string,&#32;given&#32;the&#32;extra&#32;storage</emphasis>
158 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;beyond-the-end&#32;for&#32;a&#32;null&#32;terminator;&#32;thus,&#32;the&#32;shared</emphasis>
159 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;empty&#32;string&#32;representation&#32;needs&#32;no&#32;constructor.</emphasis>
160 
161 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Rep_base
162 &#32;&#32;&#32;&#32;&#32;&#32;{
163 &#32;&#32;&#32;&#32;size_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_length;
164 &#32;&#32;&#32;&#32;size_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_capacity;
165 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2atomic__word_8h_1a0c6f0003af1fd2cb9e6926596bf158bc">_Atomic_word</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_refcount;
166 &#32;&#32;&#32;&#32;&#32;&#32;};
167 
168 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Rep&#32;:&#32;_Rep_base
169 &#32;&#32;&#32;&#32;&#32;&#32;{
170 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Types:</emphasis>
171 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Alloc&gt;::template
172 &#32;&#32;&#32;&#32;&#32;&#32;rebind&lt;char&gt;::other&#32;_Raw_bytes_alloc;
173 
174 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(Public)&#32;Data&#32;members:</emphasis>
175 
176 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;maximum&#32;number&#32;of&#32;individual&#32;char_type&#32;elements&#32;of&#32;an</emphasis>
177 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;individual&#32;string&#32;is&#32;determined&#32;by&#32;_S_max_size.&#32;This&#32;is&#32;the</emphasis>
178 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;value&#32;that&#32;will&#32;be&#32;returned&#32;by&#32;max_size().&#32;&#32;(Whereas&#32;npos</emphasis>
179 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;is&#32;the&#32;maximum&#32;number&#32;of&#32;bytes&#32;the&#32;allocator&#32;can&#32;allocate.)</emphasis>
180 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;one&#32;was&#32;to&#32;divvy&#32;up&#32;the&#32;theoretical&#32;largest&#32;size&#32;string,</emphasis>
181 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;with&#32;a&#32;terminating&#32;character&#32;and&#32;m&#32;_CharT&#32;elements,&#32;it&apos;d</emphasis>
182 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;look&#32;like&#32;this:</emphasis>
183 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;npos&#32;=&#32;sizeof(_Rep)&#32;+&#32;(m&#32;*&#32;sizeof(_CharT))&#32;+&#32;sizeof(_CharT)</emphasis>
184 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Solving&#32;for&#32;m:</emphasis>
185 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;m&#32;=&#32;((npos&#32;-&#32;sizeof(_Rep))/sizeof(CharT))&#32;-&#32;1</emphasis>
186 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;In&#32;addition,&#32;this&#32;implementation&#32;quarters&#32;this&#32;amount.</emphasis>
187 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;&#32;_S_max_size;
188 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT&#32;_S_terminal;
189 
190 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;following&#32;storage&#32;is&#32;init&apos;d&#32;to&#32;0&#32;by&#32;the&#32;linker,&#32;resulting</emphasis>
191 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(carefully)&#32;in&#32;an&#32;empty&#32;string&#32;with&#32;one&#32;reference.</emphasis>
192 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;size_type&#32;_S_empty_rep_storage[];
193 
194 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Rep&amp;
195 &#32;&#32;&#32;&#32;_S_empty_rep()&#32;_GLIBCXX_NOEXCEPT
196 &#32;&#32;&#32;&#32;{
197 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NB:&#32;Mild&#32;hack&#32;to&#32;avoid&#32;strict-aliasing&#32;warnings.&#32;&#32;Note&#32;that</emphasis>
198 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_empty_rep_storage&#32;is&#32;never&#32;modified&#32;and&#32;the&#32;punning&#32;should</emphasis>
199 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;be&#32;reasonably&#32;safe&#32;in&#32;this&#32;case.</emphasis>
200 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*&#32;__p&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(&amp;_S_empty_rep_storage);
201 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_Rep*<emphasis role="keyword">&gt;</emphasis>(__p);
202 &#32;&#32;&#32;&#32;}
203 
204 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
205 &#32;&#32;&#32;&#32;_M_is_leaked()&#32;const&#32;_GLIBCXX_NOEXCEPT
206 &#32;&#32;&#32;&#32;{
207 <emphasis role="preprocessor">#if&#32;defined(__GTHREADS)</emphasis>
208 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_M_refcount&#32;is&#32;mutated&#32;concurrently&#32;by&#32;_M_refcopy/_M_dispose,</emphasis>
209 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;so&#32;we&#32;need&#32;to&#32;use&#32;an&#32;atomic&#32;load.&#32;However,&#32;_M_is_leaked</emphasis>
210 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;predicate&#32;does&#32;not&#32;change&#32;concurrently&#32;(i.e.&#32;the&#32;string&#32;is&#32;either</emphasis>
211 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;leaked&#32;or&#32;not),&#32;so&#32;a&#32;relaxed&#32;load&#32;is&#32;enough.</emphasis>
212 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_load_n(&amp;this-&gt;_M_refcount,&#32;__ATOMIC_RELAXED)&#32;&lt;&#32;0;
213 <emphasis role="preprocessor">#else</emphasis>
214 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_refcount&#32;&lt;&#32;0;
215 <emphasis role="preprocessor">#endif</emphasis>
216 &#32;&#32;&#32;&#32;}
217 
218 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
219 &#32;&#32;&#32;&#32;_M_is_shared()&#32;const&#32;_GLIBCXX_NOEXCEPT
220 &#32;&#32;&#32;&#32;{
221 <emphasis role="preprocessor">#if&#32;defined(__GTHREADS)</emphasis>
222 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_M_refcount&#32;is&#32;mutated&#32;concurrently&#32;by&#32;_M_refcopy/_M_dispose,</emphasis>
223 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;so&#32;we&#32;need&#32;to&#32;use&#32;an&#32;atomic&#32;load.&#32;Another&#32;thread&#32;can&#32;drop&#32;last</emphasis>
224 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;but&#32;one&#32;reference&#32;concurrently&#32;with&#32;this&#32;check,&#32;so&#32;we&#32;need&#32;this</emphasis>
225 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;load&#32;to&#32;be&#32;acquire&#32;to&#32;synchronize&#32;with&#32;release&#32;fetch_and_add&#32;in</emphasis>
226 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_M_dispose.</emphasis>
227 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__gnu_cxx::__is_single_threaded())
228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_load_n(&amp;this-&gt;_M_refcount,&#32;__ATOMIC_ACQUIRE)&#32;&gt;&#32;0;
229 <emphasis role="preprocessor">#endif</emphasis>
230 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_refcount&#32;&gt;&#32;0;
231 &#32;&#32;&#32;&#32;}
232 
233 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
234 &#32;&#32;&#32;&#32;_M_set_leaked()&#32;_GLIBCXX_NOEXCEPT
235 &#32;&#32;&#32;&#32;{&#32;this-&gt;_M_refcount&#32;=&#32;-1;&#32;}
236 
237 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
238 &#32;&#32;&#32;&#32;_M_set_sharable()&#32;_GLIBCXX_NOEXCEPT
239 &#32;&#32;&#32;&#32;{&#32;this-&gt;_M_refcount&#32;=&#32;0;&#32;}
240 
241 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
242 &#32;&#32;&#32;&#32;_M_set_length_and_sharable(size_type&#32;__n)&#32;_GLIBCXX_NOEXCEPT
243 &#32;&#32;&#32;&#32;{
244 <emphasis role="preprocessor">#if&#32;_GLIBCXX_FULLY_DYNAMIC_STRING&#32;==&#32;0</emphasis>
245 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_expect(<emphasis role="keyword">this</emphasis>&#32;!=&#32;&amp;_S_empty_rep(),&#32;<emphasis role="keyword">false</emphasis>))
246 <emphasis role="preprocessor">#endif</emphasis>
247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_set_sharable();&#32;&#32;<emphasis role="comment">//&#32;One&#32;reference.</emphasis>
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_length&#32;=&#32;__n;
250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits_type::assign(this-&gt;_M_refdata()[__n],&#32;_S_terminal);
251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;grrr.&#32;(per&#32;21.3.4)</emphasis>
252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;You&#32;cannot&#32;leave&#32;those&#32;LWG&#32;people&#32;alone&#32;for&#32;a&#32;second.</emphasis>
253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
254 &#32;&#32;&#32;&#32;}
255 
256 &#32;&#32;&#32;&#32;_CharT*
257 &#32;&#32;&#32;&#32;_M_refdata()&#32;throw()
258 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_CharT*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>&#32;+&#32;1);&#32;}
259 
260 &#32;&#32;&#32;&#32;_CharT*
261 &#32;&#32;&#32;&#32;_M_grab(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__alloc1,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__alloc2)
262 &#32;&#32;&#32;&#32;{
263 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(!_M_is_leaked()&#32;&amp;&amp;&#32;__alloc1&#32;==&#32;__alloc2)
264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;_M_refcopy()&#32;:&#32;_M_clone(__alloc1);
265 &#32;&#32;&#32;&#32;}
266 
267 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;&amp;&#32;Destroy</emphasis>
268 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Rep*
269 &#32;&#32;&#32;&#32;_S_create(size_type,&#32;size_type,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;);
270 
271 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
272 &#32;&#32;&#32;&#32;_M_dispose(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)&#32;_GLIBCXX_NOEXCEPT
273 &#32;&#32;&#32;&#32;{
274 <emphasis role="preprocessor">#if&#32;_GLIBCXX_FULLY_DYNAMIC_STRING&#32;==&#32;0</emphasis>
275 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_expect(<emphasis role="keyword">this</emphasis>&#32;!=&#32;&amp;_S_empty_rep(),&#32;<emphasis role="keyword">false</emphasis>))
276 <emphasis role="preprocessor">#endif</emphasis>
277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Be&#32;race-detector-friendly.&#32;&#32;For&#32;more&#32;info&#32;see&#32;bits/c++config.</emphasis>
279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&amp;this-&gt;_M_refcount);
280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Decrement&#32;of&#32;_M_refcount&#32;is&#32;acq_rel,&#32;because:</emphasis>
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-&#32;all&#32;but&#32;last&#32;decrements&#32;need&#32;to&#32;release&#32;to&#32;synchronize&#32;with</emphasis>
282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;the&#32;last&#32;decrement&#32;that&#32;will&#32;delete&#32;the&#32;object.</emphasis>
283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-&#32;the&#32;last&#32;decrement&#32;needs&#32;to&#32;acquire&#32;to&#32;synchronize&#32;with</emphasis>
284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;all&#32;the&#32;previous&#32;decrements.</emphasis>
285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-&#32;last&#32;but&#32;one&#32;decrement&#32;needs&#32;to&#32;release&#32;to&#32;synchronize&#32;with</emphasis>
286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;the&#32;acquire&#32;load&#32;in&#32;_M_is_shared&#32;that&#32;will&#32;conclude&#32;that</emphasis>
287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;the&#32;object&#32;is&#32;not&#32;shared&#32;anymore.</emphasis>
288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gnu_cxx::__exchange_and_add_dispatch(&amp;this-&gt;_M_refcount,
289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-1)&#32;&lt;=&#32;0)
290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&amp;this-&gt;_M_refcount);
292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_destroy(__a);
293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
295 &#32;&#32;&#32;&#32;}&#32;&#32;<emphasis role="comment">//&#32;XXX&#32;MT</emphasis>
296 
297 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
298 &#32;&#32;&#32;&#32;_M_destroy(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;)&#32;<emphasis role="keywordflow">throw</emphasis>();
299 
300 &#32;&#32;&#32;&#32;_CharT*
301 &#32;&#32;&#32;&#32;_M_refcopy()&#32;throw()
302 &#32;&#32;&#32;&#32;{
303 <emphasis role="preprocessor">#if&#32;_GLIBCXX_FULLY_DYNAMIC_STRING&#32;==&#32;0</emphasis>
304 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_expect(<emphasis role="keyword">this</emphasis>&#32;!=&#32;&amp;_S_empty_rep(),&#32;<emphasis role="keyword">false</emphasis>))
305 <emphasis role="preprocessor">#endif</emphasis>
306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__gnu_cxx::__atomic_add_dispatch(&amp;this-&gt;_M_refcount,&#32;1);
307 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_refdata();
308 &#32;&#32;&#32;&#32;}&#32;&#32;<emphasis role="comment">//&#32;XXX&#32;MT</emphasis>
309 
310 &#32;&#32;&#32;&#32;_CharT*
311 &#32;&#32;&#32;&#32;_M_clone(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;,&#32;size_type&#32;__res&#32;=&#32;0);
312 &#32;&#32;&#32;&#32;&#32;&#32;};
313 
314 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Use&#32;empty-base&#32;optimization:&#32;http://www.cantrip.org/emptyopt.html</emphasis>
315 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Alloc_hider&#32;:&#32;_Alloc
316 &#32;&#32;&#32;&#32;&#32;&#32;{
317 &#32;&#32;&#32;&#32;_Alloc_hider(_CharT*&#32;__dat,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)&#32;_GLIBCXX_NOEXCEPT
318 &#32;&#32;&#32;&#32;:&#32;_Alloc(__a),&#32;_M_p(__dat)&#32;{&#32;}
319 
320 &#32;&#32;&#32;&#32;_CharT*&#32;_M_p;&#32;<emphasis role="comment">//&#32;The&#32;actual&#32;data.</emphasis>
321 &#32;&#32;&#32;&#32;&#32;&#32;};
322 
323 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
324 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Data&#32;Members&#32;(public):</emphasis>
325 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NB:&#32;This&#32;is&#32;an&#32;unsigned&#32;type,&#32;and&#32;thus&#32;represents&#32;the&#32;maximum</emphasis>
326 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;size&#32;that&#32;the&#32;allocator&#32;can&#32;hold.</emphasis>
328 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;&#32;&#32;&#32;npos&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>size_type<emphasis role="keyword">&gt;</emphasis>(-1);
329 
330 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
331 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Data&#32;Members&#32;(private):</emphasis>
332 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;_Alloc_hider&#32;&#32;_M_dataplus;
333 
334 &#32;&#32;&#32;&#32;&#32;&#32;_CharT*
335 &#32;&#32;&#32;&#32;&#32;&#32;_M_data()&#32;const&#32;_GLIBCXX_NOEXCEPT
336 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;&#32;_M_dataplus._M_p;&#32;}
337 
338 &#32;&#32;&#32;&#32;&#32;&#32;_CharT*
339 &#32;&#32;&#32;&#32;&#32;&#32;_M_data(_CharT*&#32;__p)&#32;_GLIBCXX_NOEXCEPT
340 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(_M_dataplus._M_p&#32;=&#32;__p);&#32;}
341 
342 &#32;&#32;&#32;&#32;&#32;&#32;_Rep*
343 &#32;&#32;&#32;&#32;&#32;&#32;_M_rep()&#32;const&#32;_GLIBCXX_NOEXCEPT
344 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;((<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_Rep*<emphasis role="keyword">&gt;</emphasis>&#32;(_M_data()))[-1]);&#32;}
345 
346 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;the&#32;internal&#32;use&#32;we&#32;have&#32;functions&#32;similar&#32;to&#32;`begin&apos;/`end&apos;</emphasis>
347 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;but&#32;they&#32;do&#32;not&#32;call&#32;_M_leak.</emphasis>
348 &#32;&#32;&#32;&#32;&#32;&#32;iterator
349 &#32;&#32;&#32;&#32;&#32;&#32;_M_ibegin()&#32;const&#32;_GLIBCXX_NOEXCEPT
350 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(_M_data());&#32;}
351 
352 &#32;&#32;&#32;&#32;&#32;&#32;iterator
353 &#32;&#32;&#32;&#32;&#32;&#32;_M_iend()&#32;const&#32;_GLIBCXX_NOEXCEPT
354 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(_M_data()&#32;+&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>());&#32;}
355 
356 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
357 &#32;&#32;&#32;&#32;&#32;&#32;_M_leak()&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;use&#32;in&#32;begin()&#32;&amp;&#32;non-const&#32;op[]</emphasis>
358 &#32;&#32;&#32;&#32;&#32;&#32;{
359 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_rep()-&gt;_M_is_leaked())
360 &#32;&#32;&#32;&#32;&#32;&#32;_M_leak_hard();
361 &#32;&#32;&#32;&#32;&#32;&#32;}
362 
363 &#32;&#32;&#32;&#32;&#32;&#32;size_type
364 &#32;&#32;&#32;&#32;&#32;&#32;_M_check(size_type&#32;__pos,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__s)<emphasis role="keyword">&#32;const</emphasis>
365 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
366 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pos&#32;&gt;&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>())
367 &#32;&#32;&#32;&#32;&#32;&#32;__throw_out_of_range_fmt(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ad90b1fa000da1666f104c4dd9c0d7f9b">__N</link>(<emphasis role="stringliteral">&quot;%s:&#32;__pos&#32;(which&#32;is&#32;%zu)&#32;&gt;&#32;&quot;</emphasis>
368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;this-&gt;size()&#32;(which&#32;is&#32;%zu)&quot;</emphasis>),
369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__s,&#32;__pos,&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>());
370 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__pos;
371 &#32;&#32;&#32;&#32;&#32;&#32;}
372 
373 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
374 &#32;&#32;&#32;&#32;&#32;&#32;_M_check_length(size_type&#32;__n1,&#32;size_type&#32;__n2,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__s)<emphasis role="keyword">&#32;const</emphasis>
375 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
376 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;max_size()&#32;-&#32;(this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;-&#32;__n1)&#32;&lt;&#32;__n2)
377 &#32;&#32;&#32;&#32;&#32;&#32;__throw_length_error(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ad90b1fa000da1666f104c4dd9c0d7f9b">__N</link>(__s));
378 &#32;&#32;&#32;&#32;&#32;&#32;}
379 
380 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NB:&#32;_M_limit&#32;doesn&apos;t&#32;check&#32;for&#32;a&#32;bad&#32;__pos&#32;value.</emphasis>
381 &#32;&#32;&#32;&#32;&#32;&#32;size_type
382 &#32;&#32;&#32;&#32;&#32;&#32;_M_limit(size_type&#32;__pos,&#32;size_type&#32;__off)&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
383 &#32;&#32;&#32;&#32;&#32;&#32;{
384 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__testoff&#32;=&#32;&#32;__off&#32;&lt;&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;-&#32;__pos;
385 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__testoff&#32;?&#32;__off&#32;:&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;-&#32;__pos;
386 &#32;&#32;&#32;&#32;&#32;&#32;}
387 
388 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;True&#32;if&#32;_Rep&#32;and&#32;source&#32;do&#32;not&#32;overlap.</emphasis>
389 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
390 &#32;&#32;&#32;&#32;&#32;&#32;_M_disjunct(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s)&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
391 &#32;&#32;&#32;&#32;&#32;&#32;{
392 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(less&lt;const&#32;_CharT*&gt;()(__s,&#32;_M_data())
393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;less&lt;const&#32;_CharT*&gt;()(_M_data()&#32;+&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>(),&#32;__s));
394 &#32;&#32;&#32;&#32;&#32;&#32;}
395 
396 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;When&#32;__n&#32;=&#32;1&#32;way&#32;faster&#32;than&#32;the&#32;general&#32;multichar</emphasis>
397 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;traits_type::copy/move/assign.</emphasis>
398 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
399 &#32;&#32;&#32;&#32;&#32;&#32;_M_copy(_CharT*&#32;__d,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__n)&#32;_GLIBCXX_NOEXCEPT
400 &#32;&#32;&#32;&#32;&#32;&#32;{
401 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;1)
402 &#32;&#32;&#32;&#32;&#32;&#32;traits_type::assign(*__d,&#32;*__s);
403 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
404 &#32;&#32;&#32;&#32;&#32;&#32;traits_type::copy(__d,&#32;__s,&#32;__n);
405 &#32;&#32;&#32;&#32;&#32;&#32;}
406 
407 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
408 &#32;&#32;&#32;&#32;&#32;&#32;_M_move(_CharT*&#32;__d,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__n)&#32;_GLIBCXX_NOEXCEPT
409 &#32;&#32;&#32;&#32;&#32;&#32;{
410 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;1)
411 &#32;&#32;&#32;&#32;&#32;&#32;traits_type::assign(*__d,&#32;*__s);
412 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
413 &#32;&#32;&#32;&#32;&#32;&#32;traits_type::move(__d,&#32;__s,&#32;__n);
414 &#32;&#32;&#32;&#32;&#32;&#32;}
415 
416 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
417 &#32;&#32;&#32;&#32;&#32;&#32;_M_assign(_CharT*&#32;__d,&#32;size_type&#32;__n,&#32;_CharT&#32;__c)&#32;_GLIBCXX_NOEXCEPT
418 &#32;&#32;&#32;&#32;&#32;&#32;{
419 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;1)
420 &#32;&#32;&#32;&#32;&#32;&#32;traits_type::assign(*__d,&#32;__c);
421 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
422 &#32;&#32;&#32;&#32;&#32;&#32;traits_type::assign(__d,&#32;__n,&#32;__c);
423 &#32;&#32;&#32;&#32;&#32;&#32;}
424 
425 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_copy_chars&#32;is&#32;a&#32;separate&#32;template&#32;to&#32;permit&#32;specialization</emphasis>
426 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;to&#32;optimize&#32;for&#32;the&#32;common&#32;case&#32;of&#32;pointers&#32;as&#32;iterators.</emphasis>
427 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Iterator&gt;
428 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
429 &#32;&#32;&#32;&#32;_S_copy_chars(_CharT*&#32;__p,&#32;_Iterator&#32;__k1,&#32;_Iterator&#32;__k2)
430 &#32;&#32;&#32;&#32;{
431 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__k1&#32;!=&#32;__k2;&#32;++__k1,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)++__p)
432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits_type::assign(*__p,&#32;*__k1);&#32;<emphasis role="comment">//&#32;These&#32;types&#32;are&#32;off.</emphasis>
433 &#32;&#32;&#32;&#32;}
434 
435 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
436 &#32;&#32;&#32;&#32;&#32;&#32;_S_copy_chars(_CharT*&#32;__p,&#32;iterator&#32;__k1,&#32;iterator&#32;__k2)&#32;_GLIBCXX_NOEXCEPT
437 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_S_copy_chars(__p,&#32;__k1.base(),&#32;__k2.base());&#32;}
438 
439 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
440 &#32;&#32;&#32;&#32;&#32;&#32;_S_copy_chars(_CharT*&#32;__p,&#32;const_iterator&#32;__k1,&#32;const_iterator&#32;__k2)
441 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
442 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_S_copy_chars(__p,&#32;__k1.base(),&#32;__k2.base());&#32;}
443 
444 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
445 &#32;&#32;&#32;&#32;&#32;&#32;_S_copy_chars(_CharT*&#32;__p,&#32;_CharT*&#32;__k1,&#32;_CharT*&#32;__k2)&#32;_GLIBCXX_NOEXCEPT
446 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_copy(__p,&#32;__k1,&#32;__k2&#32;-&#32;__k1);&#32;}
447 
448 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
449 &#32;&#32;&#32;&#32;&#32;&#32;_S_copy_chars(_CharT*&#32;__p,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__k1,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__k2)
450 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
451 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_copy(__p,&#32;__k1,&#32;__k2&#32;-&#32;__k1);&#32;}
452 
453 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
454 &#32;&#32;&#32;&#32;&#32;&#32;_S_compare(size_type&#32;__n1,&#32;size_type&#32;__n2)&#32;_GLIBCXX_NOEXCEPT
455 &#32;&#32;&#32;&#32;&#32;&#32;{
456 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;difference_type&#32;__d&#32;=&#32;difference_type(__n1&#32;-&#32;__n2);
457 
458 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__d&#32;&gt;&#32;__gnu_cxx::__numeric_traits&lt;int&gt;::__max)
459 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::__numeric_traits&lt;int&gt;::__max;
460 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__d&#32;&lt;&#32;__gnu_cxx::__numeric_traits&lt;int&gt;::__min)
461 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::__numeric_traits&lt;int&gt;::__min;
462 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
463 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;int(__d);
464 &#32;&#32;&#32;&#32;&#32;&#32;}
465 
466 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
467 &#32;&#32;&#32;&#32;&#32;&#32;_M_mutate(size_type&#32;__pos,&#32;size_type&#32;__len1,&#32;size_type&#32;__len2);
468 
469 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
470 &#32;&#32;&#32;&#32;&#32;&#32;_M_leak_hard();
471 
472 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Rep&amp;
473 &#32;&#32;&#32;&#32;&#32;&#32;_S_empty_rep()&#32;_GLIBCXX_NOEXCEPT
474 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Rep::_S_empty_rep();&#32;}
475 
476 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
477 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;A&#32;helper&#32;type&#32;for&#32;avoiding&#32;boiler-plate.</emphasis>
478 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;basic_string_view&lt;_CharT,&#32;_Traits&gt;&#32;__sv_type;
479 
480 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Res&gt;
481 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_If_sv&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;
482 &#32;&#32;&#32;&#32;&#32;&#32;__and_&lt;is_convertible&lt;const&#32;_Tp&amp;,&#32;__sv_type&gt;,
483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__not_&lt;is_convertible&lt;const&#32;_Tp*,&#32;const&#32;basic_string*&gt;&gt;,
484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__not_&lt;is_convertible&lt;const&#32;_Tp&amp;,&#32;const&#32;_CharT*&gt;&gt;&gt;<link linkend="_classvalue">::value</link>,
485 &#32;&#32;&#32;&#32;&#32;&#32;_Res&gt;;
486 
487 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Allows&#32;an&#32;implicit&#32;conversion&#32;to&#32;__sv_type.</emphasis>
488 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;__sv_type
489 &#32;&#32;&#32;&#32;&#32;&#32;_S_to_string_view(__sv_type&#32;__svt)&#32;<emphasis role="keyword">noexcept</emphasis>
490 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__svt;&#32;}
491 
492 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Wraps&#32;a&#32;string_view&#32;by&#32;explicit&#32;conversion&#32;and&#32;thus</emphasis>
493 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;allows&#32;to&#32;add&#32;an&#32;internal&#32;constructor&#32;that&#32;does&#32;not</emphasis>
494 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;participate&#32;in&#32;overload&#32;resolution&#32;when&#32;a&#32;string_view</emphasis>
495 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;is&#32;provided.</emphasis>
496 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__sv_wrapper
497 &#32;&#32;&#32;&#32;&#32;&#32;{
498 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;__sv_wrapper(__sv_type&#32;__sv)&#32;noexcept&#32;:&#32;_M_sv(__sv)&#32;{&#32;}
499 &#32;&#32;&#32;&#32;__sv_type&#32;_M_sv;
500 &#32;&#32;&#32;&#32;&#32;&#32;};
501 
508 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
509 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>(__sv_wrapper&#32;__svw,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
510 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classbasic__string">basic_string</link>(__svw._M_sv.<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>(),&#32;__svw._M_sv.<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>(),&#32;__a)&#32;{&#32;}
511 <emphasis role="preprocessor">#endif</emphasis>
512 
513 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
514 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Construct/copy/destroy:</emphasis>
515 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NB:&#32;We&#32;overload&#32;ctors&#32;in&#32;some&#32;cases&#32;instead&#32;of&#32;using&#32;default</emphasis>
516 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;arguments,&#32;per&#32;17.4.4.4&#32;para.&#32;2&#32;item&#32;2.</emphasis>
517 
521 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>()
522 <emphasis role="preprocessor">#if&#32;_GLIBCXX_FULLY_DYNAMIC_STRING&#32;==&#32;0</emphasis>
523 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
524 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_dataplus(_S_empty_rep()._M_refdata(),&#32;_Alloc())
525 <emphasis role="preprocessor">#else</emphasis>
526 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_dataplus(_S_construct(size_type(),&#32;_CharT(),&#32;_Alloc()),&#32;_Alloc())
527 <emphasis role="preprocessor">#endif</emphasis>
528 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
529 
533 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
534 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
535 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_dataplus(_S_construct(size_type(),&#32;_CharT(),&#32;__a),&#32;__a)
536 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
537 
538 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NB:&#32;per&#32;LWG&#32;issue&#32;42,&#32;semantics&#32;different&#32;from&#32;IS:</emphasis>
543 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str)
544 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_dataplus(__str._M_rep()-&gt;_M_grab(_Alloc(__str.get_allocator()),
545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__str.get_allocator()),
546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__str.get_allocator())
547 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
548 
549 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
550 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2583.&#32;no&#32;way&#32;to&#32;supply&#32;an&#32;allocator&#32;for&#32;basic_string(str,&#32;pos)</emphasis>
557 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str,&#32;size_type&#32;__pos,
558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a&#32;=&#32;_Alloc());
559 
566 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str,&#32;size_type&#32;__pos,
567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n);
575 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str,&#32;size_type&#32;__pos,
576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a);
577 
587 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__n,
588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a&#32;=&#32;_Alloc())
589 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_dataplus(_S_construct(__s,&#32;__s&#32;+&#32;__n,&#32;__a),&#32;__a)
590 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
591 
597 <emphasis role="preprocessor">#if&#32;__cpp_deduction_guides&#32;&amp;&amp;&#32;!&#32;defined&#32;_GLIBCXX_DEFINING_STRING_INSTANTIATIONS</emphasis>
598 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
599 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;3076.&#32;basic_string&#32;CTAD&#32;ambiguity</emphasis>
600 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Alloc&gt;&gt;
601 <emphasis role="preprocessor">#endif</emphasis>
602 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a&#32;=&#32;_Alloc())
603 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_dataplus(_S_construct(__s,&#32;__s&#32;?&#32;__s&#32;+&#32;traits_type::<link linkend="_namespacelength">length</link>(__s)&#32;:
604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__s&#32;+&#32;npos,&#32;__a),&#32;__a)
605 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
606 
613 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>(size_type&#32;__n,&#32;_CharT&#32;__c,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a&#32;=&#32;_Alloc())
614 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_dataplus(_S_construct(__n,&#32;__c,&#32;__a),&#32;__a)
615 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
616 
617 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
625 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>(<link linkend="_classbasic__string">basic_string</link>&amp;&amp;&#32;__str)&#32;noexcept
626 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_dataplus(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__str._M_dataplus))
627 &#32;&#32;&#32;&#32;&#32;&#32;{
628 <emphasis role="preprocessor">#if&#32;_GLIBCXX_FULLY_DYNAMIC_STRING&#32;==&#32;0</emphasis>
629 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Make&#32;__str&#32;use&#32;the&#32;shared&#32;empty&#32;string&#32;rep.</emphasis>
630 &#32;&#32;&#32;&#32;__str._M_data(_S_empty_rep()._M_refdata());
631 <emphasis role="preprocessor">#else</emphasis>
632 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Rather&#32;than&#32;allocate&#32;an&#32;empty&#32;string&#32;for&#32;the&#32;rvalue&#32;string,</emphasis>
633 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;just&#32;share&#32;ownership&#32;with&#32;it&#32;by&#32;incrementing&#32;the&#32;reference&#32;count.</emphasis>
634 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;the&#32;rvalue&#32;string&#32;was&#32;the&#32;unique&#32;owner&#32;then&#32;there&#32;are&#32;exactly</emphasis>
635 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;two&#32;owners&#32;now.</emphasis>
636 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_rep()-&gt;_M_is_shared())
637 &#32;&#32;&#32;&#32;&#32;&#32;__gnu_cxx::__atomic_add_dispatch(&amp;_M_rep()-&gt;_M_refcount,&#32;1);
638 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
639 &#32;&#32;&#32;&#32;&#32;&#32;_M_rep()-&gt;_M_refcount&#32;=&#32;1;
640 <emphasis role="preprocessor">#endif</emphasis>
641 &#32;&#32;&#32;&#32;&#32;&#32;}
642 
648 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>(initializer_list&lt;_CharT&gt;&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a&#32;=&#32;_Alloc())
649 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_dataplus(_S_construct(__l.<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>(),&#32;__l.<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(),&#32;__a),&#32;__a)
650 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
651 
652 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
653 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_dataplus(__str._M_rep()-&gt;_M_grab(__a,&#32;__str.get_allocator()),&#32;__a)
654 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
655 
656 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>(<link linkend="_classbasic__string">basic_string</link>&amp;&amp;&#32;__str,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
657 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_dataplus(__str._M_data(),&#32;__a)
658 &#32;&#32;&#32;&#32;&#32;&#32;{
659 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__a&#32;==&#32;__str.get_allocator())
660 &#32;&#32;&#32;&#32;&#32;&#32;{
661 <emphasis role="preprocessor">#if&#32;_GLIBCXX_FULLY_DYNAMIC_STRING&#32;==&#32;0</emphasis>
662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__str._M_data(_S_empty_rep()._M_refdata());
663 <emphasis role="preprocessor">#else</emphasis>
664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__str._M_data(_S_construct(size_type(),&#32;_CharT(),&#32;__a));
665 <emphasis role="preprocessor">#endif</emphasis>
666 &#32;&#32;&#32;&#32;&#32;&#32;}
667 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
668 &#32;&#32;&#32;&#32;&#32;&#32;_M_dataplus._M_p&#32;=&#32;_S_construct(__str.begin(),&#32;__str.end(),&#32;__a);
669 &#32;&#32;&#32;&#32;&#32;&#32;}
670 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
671 
672 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;202100L</emphasis>
673 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>(nullptr_t)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
674 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;operator=(nullptr_t)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
675 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++23</emphasis>
676 
683 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_InputIterator&gt;
684 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>(_InputIterator&#32;__beg,&#32;_InputIterator&#32;__end,
685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a&#32;=&#32;_Alloc())
686 &#32;&#32;&#32;&#32;:&#32;_M_dataplus(_S_construct(__beg,&#32;__end,&#32;__a),&#32;__a)
687 &#32;&#32;&#32;&#32;{&#32;}
688 
689 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
697 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;enable_if_t&lt;is_convertible_v&lt;const&#32;_Tp&amp;,&#32;__sv_type&gt;&gt;&gt;
699 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__t,&#32;size_type&#32;__pos,&#32;size_type&#32;__n,
700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a&#32;=&#32;_Alloc())
701 &#32;&#32;&#32;&#32;:&#32;<link linkend="_classbasic__string">basic_string</link>(_S_to_string_view(__t).substr(__pos,&#32;__n),&#32;__a)&#32;{&#32;}
702 
708 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_If_sv&lt;_Tp,&#32;<emphasis role="keywordtype">void</emphasis>&gt;&gt;
709 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
710 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__t,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a&#32;=&#32;_Alloc())
711 &#32;&#32;&#32;&#32;:&#32;<link linkend="_classbasic__string">basic_string</link>(__sv_wrapper(_S_to_string_view(__t)),&#32;__a)&#32;{&#32;}
712 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
713 
717 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">~basic_string</link>()&#32;_GLIBCXX_NOEXCEPT
718 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_rep()-&gt;_M_dispose(this-&gt;get_allocator());&#32;}
719 
724 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
725 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str)
726 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;assign(__str);&#32;}
727 
732 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
733 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s)
734 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;assign(__s);&#32;}
735 
743 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
744 &#32;&#32;&#32;&#32;&#32;&#32;operator=(_CharT&#32;__c)
745 &#32;&#32;&#32;&#32;&#32;&#32;{
746 &#32;&#32;&#32;&#32;this-&gt;assign(1,&#32;__c);
747 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
748 &#32;&#32;&#32;&#32;&#32;&#32;}
749 
750 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
758 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
759 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<link linkend="_classbasic__string">basic_string</link>&amp;&amp;&#32;__str)
760 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT_IF(allocator_traits&lt;_Alloc&gt;::is_always_equal::value)
761 &#32;&#32;&#32;&#32;&#32;&#32;{
762 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NB:&#32;DR&#32;1204.</emphasis>
763 &#32;&#32;&#32;&#32;this-&gt;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(__str);
764 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
765 &#32;&#32;&#32;&#32;&#32;&#32;}
766 
771 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
772 &#32;&#32;&#32;&#32;&#32;&#32;operator=(initializer_list&lt;_CharT&gt;&#32;__l)
773 &#32;&#32;&#32;&#32;&#32;&#32;{
774 &#32;&#32;&#32;&#32;this-&gt;assign(__l.begin(),&#32;__l.size());
775 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
776 &#32;&#32;&#32;&#32;&#32;&#32;}
777 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
778 
779 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
784 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
785 &#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;basic_string&amp;&gt;
786 &#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt)
787 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;assign(__svt);&#32;}
788 
793 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;__sv_type()&#32;const&#32;noexcept
794 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__sv_type(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>(),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>());&#32;}
795 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
796 
797 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Iterators:</emphasis>
802 &#32;&#32;&#32;&#32;&#32;&#32;iterator
803 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>()&#32;<emphasis role="comment">//&#32;FIXME&#32;C++11:&#32;should&#32;be&#32;noexcept.</emphasis>
804 &#32;&#32;&#32;&#32;&#32;&#32;{
805 &#32;&#32;&#32;&#32;_M_leak();
806 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(_M_data());
807 &#32;&#32;&#32;&#32;&#32;&#32;}
808 
813 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
814 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>()&#32;const&#32;_GLIBCXX_NOEXCEPT
815 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(_M_data());&#32;}
816 
821 &#32;&#32;&#32;&#32;&#32;&#32;iterator
822 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;<emphasis role="comment">//&#32;FIXME&#32;C++11:&#32;should&#32;be&#32;noexcept.</emphasis>
823 &#32;&#32;&#32;&#32;&#32;&#32;{
824 &#32;&#32;&#32;&#32;_M_leak();
825 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(_M_data()&#32;+&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>());
826 &#32;&#32;&#32;&#32;&#32;&#32;}
827 
832 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
833 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;const&#32;_GLIBCXX_NOEXCEPT
834 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(_M_data()&#32;+&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>());&#32;}
835 
841 &#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator
842 &#32;&#32;&#32;&#32;&#32;&#32;rbegin()&#32;<emphasis role="comment">//&#32;FIXME&#32;C++11:&#32;should&#32;be&#32;noexcept.</emphasis>
843 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;reverse_iterator(this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());&#32;}
844 
850 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
851 &#32;&#32;&#32;&#32;&#32;&#32;rbegin()&#32;const&#32;_GLIBCXX_NOEXCEPT
852 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_reverse_iterator(this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());&#32;}
853 
859 &#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator
860 &#32;&#32;&#32;&#32;&#32;&#32;rend()&#32;<emphasis role="comment">//&#32;FIXME&#32;C++11:&#32;should&#32;be&#32;noexcept.</emphasis>
861 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;reverse_iterator(this-&gt;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>());&#32;}
862 
868 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
869 &#32;&#32;&#32;&#32;&#32;&#32;rend()&#32;const&#32;_GLIBCXX_NOEXCEPT
870 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_reverse_iterator(this-&gt;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>());&#32;}
871 
872 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
877 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
878 &#32;&#32;&#32;&#32;&#32;&#32;cbegin()&#32;const&#32;noexcept
879 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(this-&gt;_M_data());&#32;}
880 
885 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
886 &#32;&#32;&#32;&#32;&#32;&#32;cend()&#32;const&#32;noexcept
887 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(this-&gt;_M_data()&#32;+&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>());&#32;}
888 
894 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
895 &#32;&#32;&#32;&#32;&#32;&#32;crbegin()&#32;const&#32;noexcept
896 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_reverse_iterator(this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());&#32;}
897 
903 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
904 &#32;&#32;&#32;&#32;&#32;&#32;crend()&#32;const&#32;noexcept
905 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_reverse_iterator(this-&gt;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>());&#32;}
906 <emphasis role="preprocessor">#endif</emphasis>
907 
908 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
909 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Capacity:</emphasis>
912 &#32;&#32;&#32;&#32;&#32;&#32;size_type
913 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;const&#32;_GLIBCXX_NOEXCEPT
914 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_rep()-&gt;_M_length;&#32;}
915 
918 &#32;&#32;&#32;&#32;&#32;&#32;size_type
919 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelength">length</link>()&#32;const&#32;_GLIBCXX_NOEXCEPT
920 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_rep()-&gt;_M_length;&#32;}
921 
923 &#32;&#32;&#32;&#32;&#32;&#32;size_type
924 &#32;&#32;&#32;&#32;&#32;&#32;max_size()&#32;const&#32;_GLIBCXX_NOEXCEPT
925 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Rep::_S_max_size;&#32;}
926 
937 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
938 &#32;&#32;&#32;&#32;&#32;&#32;resize(size_type&#32;__n,&#32;_CharT&#32;__c);
939 
950 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
951 &#32;&#32;&#32;&#32;&#32;&#32;resize(size_type&#32;__n)
952 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;this-&gt;resize(__n,&#32;_CharT());&#32;}
953 
954 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
955 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
956 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wdeprecated-declarations&quot;</emphasis>
958 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
959 &#32;&#32;&#32;&#32;&#32;&#32;shrink_to_fit()&#32;noexcept
960 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;reserve();&#32;}
961 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
962 <emphasis role="preprocessor">#endif</emphasis>
963 
968 &#32;&#32;&#32;&#32;&#32;&#32;size_type
969 &#32;&#32;&#32;&#32;&#32;&#32;capacity()&#32;const&#32;_GLIBCXX_NOEXCEPT
970 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_rep()-&gt;_M_capacity;&#32;}
971 
989 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
990 &#32;&#32;&#32;&#32;&#32;&#32;reserve(size_type&#32;__res_arg);
991 
993 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
994 &#32;&#32;&#32;&#32;&#32;&#32;[[deprecated(<emphasis role="stringliteral">&quot;use&#32;shrink_to_fit()&#32;instead&quot;</emphasis>)]]
995 <emphasis role="preprocessor">#endif</emphasis>
996 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
997 &#32;&#32;&#32;&#32;&#32;&#32;reserve();
998 
1002 <emphasis role="preprocessor">#if&#32;_GLIBCXX_FULLY_DYNAMIC_STRING&#32;==&#32;0</emphasis>
1003 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1004 &#32;&#32;&#32;&#32;&#32;&#32;clear()&#32;_GLIBCXX_NOEXCEPT
1005 &#32;&#32;&#32;&#32;&#32;&#32;{
1006 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_rep()-&gt;_M_is_shared())
1007 &#32;&#32;&#32;&#32;&#32;&#32;{
1008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_rep()-&gt;_M_dispose(this-&gt;get_allocator());
1009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_data(_S_empty_rep()._M_refdata());
1010 &#32;&#32;&#32;&#32;&#32;&#32;}
1011 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1012 &#32;&#32;&#32;&#32;&#32;&#32;_M_rep()-&gt;_M_set_length_and_sharable(0);
1013 &#32;&#32;&#32;&#32;&#32;&#32;}
1014 <emphasis role="preprocessor">#else</emphasis>
1015 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;PR&#32;56166:&#32;this&#32;should&#32;not&#32;throw.</emphasis>
1016 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1017 &#32;&#32;&#32;&#32;&#32;&#32;clear()
1018 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_mutate(0,&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>(),&#32;0);&#32;}
1019 <emphasis role="preprocessor">#endif</emphasis>
1020 
1025 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;<emphasis role="keywordtype">bool</emphasis>
1026 &#32;&#32;&#32;&#32;&#32;&#32;empty()&#32;const&#32;_GLIBCXX_NOEXCEPT
1027 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;==&#32;0;&#32;}
1028 
1029 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Element&#32;access:</emphasis>
1040 &#32;&#32;&#32;&#32;&#32;&#32;const_reference
1041 &#32;&#32;&#32;&#32;&#32;&#32;operator[]&#32;(size_type&#32;__pos)&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1042 &#32;&#32;&#32;&#32;&#32;&#32;{
1043 &#32;&#32;&#32;&#32;__glibcxx_assert(__pos&#32;&lt;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>());
1044 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data()[__pos];
1045 &#32;&#32;&#32;&#32;&#32;&#32;}
1046 
1057 &#32;&#32;&#32;&#32;&#32;&#32;reference
1058 &#32;&#32;&#32;&#32;&#32;&#32;operator[](size_type&#32;__pos)
1059 &#32;&#32;&#32;&#32;&#32;&#32;{
1060 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Allow&#32;pos&#32;==&#32;size()&#32;both&#32;in&#32;C++98&#32;mode,&#32;as&#32;v3&#32;extension,</emphasis>
1061 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;and&#32;in&#32;C++11&#32;mode.</emphasis>
1062 &#32;&#32;&#32;&#32;__glibcxx_assert(__pos&#32;&lt;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>());
1063 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;In&#32;pedantic&#32;mode&#32;be&#32;strict&#32;in&#32;C++98&#32;mode.</emphasis>
1064 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a6f2ef543506606e8ea3dbf0c52e61c5d">_GLIBCXX_DEBUG_PEDASSERT</link>(__cplusplus&#32;&gt;=&#32;201103L&#32;||&#32;__pos&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>());
1065 &#32;&#32;&#32;&#32;_M_leak();
1066 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data()[__pos];
1067 &#32;&#32;&#32;&#32;&#32;&#32;}
1068 
1079 &#32;&#32;&#32;&#32;&#32;&#32;const_reference
1080 &#32;&#32;&#32;&#32;&#32;&#32;at(size_type&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
1081 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
1082 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&gt;=&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>())
1083 &#32;&#32;&#32;&#32;&#32;&#32;__throw_out_of_range_fmt(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ad90b1fa000da1666f104c4dd9c0d7f9b">__N</link>(<emphasis role="stringliteral">&quot;basic_string::at:&#32;__n&#32;&quot;</emphasis>
1084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;(which&#32;is&#32;%zu)&#32;&gt;=&#32;this-&gt;size()&#32;&quot;</emphasis>
1085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;(which&#32;is&#32;%zu)&quot;</emphasis>),
1086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__n,&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>());
1087 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data()[__n];
1088 &#32;&#32;&#32;&#32;&#32;&#32;}
1089 
1101 &#32;&#32;&#32;&#32;&#32;&#32;reference
1102 &#32;&#32;&#32;&#32;&#32;&#32;at(size_type&#32;__n)
1103 &#32;&#32;&#32;&#32;&#32;&#32;{
1104 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&gt;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>())
1105 &#32;&#32;&#32;&#32;&#32;&#32;__throw_out_of_range_fmt(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ad90b1fa000da1666f104c4dd9c0d7f9b">__N</link>(<emphasis role="stringliteral">&quot;basic_string::at:&#32;__n&#32;&quot;</emphasis>
1106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;(which&#32;is&#32;%zu)&#32;&gt;=&#32;this-&gt;size()&#32;&quot;</emphasis>
1107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;(which&#32;is&#32;%zu)&quot;</emphasis>),
1108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__n,&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>());
1109 &#32;&#32;&#32;&#32;_M_leak();
1110 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data()[__n];
1111 &#32;&#32;&#32;&#32;&#32;&#32;}
1112 
1113 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1118 &#32;&#32;&#32;&#32;&#32;&#32;reference
1119 &#32;&#32;&#32;&#32;&#32;&#32;front()
1120 &#32;&#32;&#32;&#32;&#32;&#32;{
1121 &#32;&#32;&#32;&#32;__glibcxx_assert(!empty());
1122 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;operator[](0);
1123 &#32;&#32;&#32;&#32;&#32;&#32;}
1124 
1129 &#32;&#32;&#32;&#32;&#32;&#32;const_reference
1130 &#32;&#32;&#32;&#32;&#32;&#32;front()&#32;const&#32;noexcept
1131 &#32;&#32;&#32;&#32;&#32;&#32;{
1132 &#32;&#32;&#32;&#32;__glibcxx_assert(!empty());
1133 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;operator[](0);
1134 &#32;&#32;&#32;&#32;&#32;&#32;}
1135 
1140 &#32;&#32;&#32;&#32;&#32;&#32;reference
1141 &#32;&#32;&#32;&#32;&#32;&#32;back()
1142 &#32;&#32;&#32;&#32;&#32;&#32;{
1143 &#32;&#32;&#32;&#32;__glibcxx_assert(!empty());
1144 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;operator[](this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;-&#32;1);
1145 &#32;&#32;&#32;&#32;&#32;&#32;}
1146 
1151 &#32;&#32;&#32;&#32;&#32;&#32;const_reference
1152 &#32;&#32;&#32;&#32;&#32;&#32;back()&#32;const&#32;noexcept
1153 &#32;&#32;&#32;&#32;&#32;&#32;{
1154 &#32;&#32;&#32;&#32;__glibcxx_assert(!empty());
1155 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;operator[](this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;-&#32;1);
1156 &#32;&#32;&#32;&#32;&#32;&#32;}
1157 <emphasis role="preprocessor">#endif</emphasis>
1158 
1159 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Modifiers:</emphasis>
1165 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1166 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str)
1167 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;append(__str);&#32;}
1168 
1174 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1175 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s)
1176 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;append(__s);&#32;}
1177 
1183 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1184 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(_CharT&#32;__c)
1185 &#32;&#32;&#32;&#32;&#32;&#32;{
1186 &#32;&#32;&#32;&#32;this-&gt;push_back(__c);
1187 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1188 &#32;&#32;&#32;&#32;&#32;&#32;}
1189 
1190 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1196 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1197 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(initializer_list&lt;_CharT&gt;&#32;__l)
1198 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;append(__l.begin(),&#32;__l.size());&#32;}
1199 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
1200 
1201 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
1207 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1208 &#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;basic_string&amp;&gt;
1209 &#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt)
1210 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;append(__svt);&#32;}
1211 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
1212 
1218 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1219 &#32;&#32;&#32;&#32;&#32;&#32;append(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str);
1220 
1234 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1235 &#32;&#32;&#32;&#32;&#32;&#32;append(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str,&#32;size_type&#32;__pos,&#32;size_type&#32;__n&#32;=&#32;npos);
1236 
1243 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1244 &#32;&#32;&#32;&#32;&#32;&#32;append(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__n);
1245 
1251 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1252 &#32;&#32;&#32;&#32;&#32;&#32;append(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s)
1253 &#32;&#32;&#32;&#32;&#32;&#32;{
1254 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a1cbaa8fb8f312c4e1a134758fff21231">__glibcxx_requires_string</link>(__s);
1255 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;append(__s,&#32;traits_type::length(__s));
1256 &#32;&#32;&#32;&#32;&#32;&#32;}
1257 
1266 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1267 &#32;&#32;&#32;&#32;&#32;&#32;append(size_type&#32;__n,&#32;_CharT&#32;__c);
1268 
1269 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1275 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1276 &#32;&#32;&#32;&#32;&#32;&#32;append(initializer_list&lt;_CharT&gt;&#32;__l)
1277 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;append(__l.begin(),&#32;__l.size());&#32;}
1278 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
1279 
1288 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_InputIterator&gt;
1289 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1290 &#32;&#32;&#32;&#32;append(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
1291 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(_M_iend(),&#32;_M_iend(),&#32;__first,&#32;__last);&#32;}
1292 
1293 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
1299 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1300 &#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;basic_string&amp;&gt;
1301 &#32;&#32;&#32;&#32;append(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt)
1302 &#32;&#32;&#32;&#32;{
1303 &#32;&#32;&#32;&#32;&#32;&#32;__sv_type&#32;__sv&#32;=&#32;__svt;
1304 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;append(__sv.data(),&#32;__sv.size());
1305 &#32;&#32;&#32;&#32;}
1306 
1315 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1316 &#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;basic_string&amp;&gt;
1317 &#32;&#32;&#32;&#32;append(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt,&#32;size_type&#32;__pos,&#32;size_type&#32;__n&#32;=&#32;npos)
1318 &#32;&#32;&#32;&#32;{
1319 &#32;&#32;&#32;&#32;&#32;&#32;__sv_type&#32;__sv&#32;=&#32;__svt;
1320 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;append(__sv.data()
1321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;std::__sv_check(__sv.size(),&#32;__pos,&#32;<emphasis role="stringliteral">&quot;basic_string::append&quot;</emphasis>),
1322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__sv_limit(__sv.size(),&#32;__pos,&#32;__n));
1323 &#32;&#32;&#32;&#32;}
1324 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
1325 
1330 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1331 &#32;&#32;&#32;&#32;&#32;&#32;push_back(_CharT&#32;__c)
1332 &#32;&#32;&#32;&#32;&#32;&#32;{
1333 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__len&#32;=&#32;1&#32;+&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>();
1334 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__len&#32;&gt;&#32;this-&gt;capacity()&#32;||&#32;_M_rep()-&gt;_M_is_shared())
1335 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;reserve(__len);
1336 &#32;&#32;&#32;&#32;traits_type::assign(_M_data()[this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()],&#32;__c);
1337 &#32;&#32;&#32;&#32;_M_rep()-&gt;_M_set_length_and_sharable(__len);
1338 &#32;&#32;&#32;&#32;&#32;&#32;}
1339 
1345 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1346 &#32;&#32;&#32;&#32;&#32;&#32;assign(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str);
1347 
1348 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1357 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1358 &#32;&#32;&#32;&#32;&#32;&#32;assign(<link linkend="_classbasic__string">basic_string</link>&amp;&amp;&#32;__str)
1359 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(allocator_traits&lt;_Alloc&gt;::is_always_equal::value)
1360 &#32;&#32;&#32;&#32;&#32;&#32;{
1361 &#32;&#32;&#32;&#32;this-&gt;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(__str);
1362 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1363 &#32;&#32;&#32;&#32;&#32;&#32;}
1364 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
1365 
1379 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1380 &#32;&#32;&#32;&#32;&#32;&#32;assign(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str,&#32;size_type&#32;__pos,&#32;size_type&#32;__n&#32;=&#32;npos)
1381 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;assign(__str._M_data()
1382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;__str._M_check(__pos,&#32;<emphasis role="stringliteral">&quot;basic_string::assign&quot;</emphasis>),
1383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__str._M_limit(__pos,&#32;__n));&#32;}
1384 
1395 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1396 &#32;&#32;&#32;&#32;&#32;&#32;assign(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__n);
1397 
1407 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1408 &#32;&#32;&#32;&#32;&#32;&#32;assign(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s)
1409 &#32;&#32;&#32;&#32;&#32;&#32;{
1410 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a1cbaa8fb8f312c4e1a134758fff21231">__glibcxx_requires_string</link>(__s);
1411 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;assign(__s,&#32;traits_type::length(__s));
1412 &#32;&#32;&#32;&#32;&#32;&#32;}
1413 
1423 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1424 &#32;&#32;&#32;&#32;&#32;&#32;assign(size_type&#32;__n,&#32;_CharT&#32;__c)
1425 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_replace_aux(size_type(0),&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>(),&#32;__n,&#32;__c);&#32;}
1426 
1435 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_InputIterator&gt;
1436 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1437 &#32;&#32;&#32;&#32;assign(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
1438 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(_M_ibegin(),&#32;_M_iend(),&#32;__first,&#32;__last);&#32;}
1439 
1440 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1446 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1447 &#32;&#32;&#32;&#32;&#32;&#32;assign(initializer_list&lt;_CharT&gt;&#32;__l)
1448 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;assign(__l.begin(),&#32;__l.size());&#32;}
1449 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
1450 
1451 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
1457 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1458 &#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;basic_string&amp;&gt;
1459 &#32;&#32;&#32;&#32;assign(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt)
1460 &#32;&#32;&#32;&#32;{
1461 &#32;&#32;&#32;&#32;&#32;&#32;__sv_type&#32;__sv&#32;=&#32;__svt;
1462 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;assign(__sv.data(),&#32;__sv.size());
1463 &#32;&#32;&#32;&#32;}
1464 
1472 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1473 &#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;basic_string&amp;&gt;
1474 &#32;&#32;&#32;&#32;assign(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt,&#32;size_type&#32;__pos,&#32;size_type&#32;__n&#32;=&#32;npos)
1475 &#32;&#32;&#32;&#32;{
1476 &#32;&#32;&#32;&#32;&#32;&#32;__sv_type&#32;__sv&#32;=&#32;__svt;
1477 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;assign(__sv.data()
1478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;std::__sv_check(__sv.size(),&#32;__pos,&#32;<emphasis role="stringliteral">&quot;basic_string::assign&quot;</emphasis>),
1479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__sv_limit(__sv.size(),&#32;__pos,&#32;__n));
1480 &#32;&#32;&#32;&#32;}
1481 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
1482 
1496 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1497 &#32;&#32;&#32;&#32;&#32;&#32;insert(iterator&#32;__p,&#32;size_type&#32;__n,&#32;_CharT&#32;__c)
1498 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(__p,&#32;__p,&#32;__n,&#32;__c);&#32;&#32;}
1499 
1512 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_InputIterator&gt;
1513 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1514 &#32;&#32;&#32;&#32;insert(iterator&#32;__p,&#32;_InputIterator&#32;__beg,&#32;_InputIterator&#32;__end)
1515 &#32;&#32;&#32;&#32;{&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(__p,&#32;__p,&#32;__beg,&#32;__end);&#32;}
1516 
1517 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1524 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1525 &#32;&#32;&#32;&#32;&#32;&#32;insert(iterator&#32;__p,&#32;initializer_list&lt;_CharT&gt;&#32;__l)
1526 &#32;&#32;&#32;&#32;&#32;&#32;{
1527 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a6f2ef543506606e8ea3dbf0c52e61c5d">_GLIBCXX_DEBUG_PEDASSERT</link>(__p&#32;&gt;=&#32;_M_ibegin()&#32;&amp;&amp;&#32;__p&#32;&lt;=&#32;_M_iend());
1528 &#32;&#32;&#32;&#32;this-&gt;insert(__p&#32;-&#32;_M_ibegin(),&#32;__l.begin(),&#32;__l.size());
1529 &#32;&#32;&#32;&#32;&#32;&#32;}
1530 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
1531 
1544 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1545 &#32;&#32;&#32;&#32;&#32;&#32;insert(size_type&#32;__pos1,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str)
1546 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;insert(__pos1,&#32;__str,&#32;size_type(0),&#32;__str.size());&#32;}
1547 
1566 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1567 &#32;&#32;&#32;&#32;&#32;&#32;insert(size_type&#32;__pos1,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str,
1568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__pos2,&#32;size_type&#32;__n&#32;=&#32;npos)
1569 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;insert(__pos1,&#32;__str._M_data()
1570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;__str._M_check(__pos2,&#32;<emphasis role="stringliteral">&quot;basic_string::insert&quot;</emphasis>),
1571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__str._M_limit(__pos2,&#32;__n));&#32;}
1572 
1589 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1590 &#32;&#32;&#32;&#32;&#32;&#32;insert(size_type&#32;__pos,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__n);
1591 
1607 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1608 &#32;&#32;&#32;&#32;&#32;&#32;insert(size_type&#32;__pos,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s)
1609 &#32;&#32;&#32;&#32;&#32;&#32;{
1610 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a1cbaa8fb8f312c4e1a134758fff21231">__glibcxx_requires_string</link>(__s);
1611 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;insert(__pos,&#32;__s,&#32;traits_type::length(__s));
1612 &#32;&#32;&#32;&#32;&#32;&#32;}
1613 
1630 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1631 &#32;&#32;&#32;&#32;&#32;&#32;insert(size_type&#32;__pos,&#32;size_type&#32;__n,&#32;_CharT&#32;__c)
1632 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_replace_aux(_M_check(__pos,&#32;<emphasis role="stringliteral">&quot;basic_string::insert&quot;</emphasis>),
1633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type(0),&#32;__n,&#32;__c);&#32;}
1634 
1648 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1649 &#32;&#32;&#32;&#32;&#32;&#32;insert(iterator&#32;__p,&#32;_CharT&#32;__c)
1650 &#32;&#32;&#32;&#32;&#32;&#32;{
1651 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a6f2ef543506606e8ea3dbf0c52e61c5d">_GLIBCXX_DEBUG_PEDASSERT</link>(__p&#32;&gt;=&#32;_M_ibegin()&#32;&amp;&amp;&#32;__p&#32;&lt;=&#32;_M_iend());
1652 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__pos&#32;=&#32;__p&#32;-&#32;_M_ibegin();
1653 &#32;&#32;&#32;&#32;_M_replace_aux(__pos,&#32;size_type(0),&#32;size_type(1),&#32;__c);
1654 &#32;&#32;&#32;&#32;_M_rep()-&gt;_M_set_leaked();
1655 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(_M_data()&#32;+&#32;__pos);
1656 &#32;&#32;&#32;&#32;&#32;&#32;}
1657 
1658 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
1665 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1666 &#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;basic_string&amp;&gt;
1667 &#32;&#32;&#32;&#32;insert(size_type&#32;__pos,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt)
1668 &#32;&#32;&#32;&#32;{
1669 &#32;&#32;&#32;&#32;&#32;&#32;__sv_type&#32;__sv&#32;=&#32;__svt;
1670 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;insert(__pos,&#32;__sv.data(),&#32;__sv.size());
1671 &#32;&#32;&#32;&#32;}
1672 
1681 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1682 &#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;basic_string&amp;&gt;
1683 &#32;&#32;&#32;&#32;insert(size_type&#32;__pos1,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt,
1684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__pos2,&#32;size_type&#32;__n&#32;=&#32;npos)
1685 &#32;&#32;&#32;&#32;{
1686 &#32;&#32;&#32;&#32;&#32;&#32;__sv_type&#32;__sv&#32;=&#32;__svt;
1687 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(__pos1,&#32;size_type(0),&#32;__sv.data()
1688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;std::__sv_check(__sv.size(),&#32;__pos2,&#32;<emphasis role="stringliteral">&quot;basic_string::insert&quot;</emphasis>),
1689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__sv_limit(__sv.size(),&#32;__pos2,&#32;__n));
1690 &#32;&#32;&#32;&#32;}
1691 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
1692 
1708 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1709 &#32;&#32;&#32;&#32;&#32;&#32;erase(size_type&#32;__pos&#32;=&#32;0,&#32;size_type&#32;__n&#32;=&#32;npos)
1710 &#32;&#32;&#32;&#32;&#32;&#32;{
1711 &#32;&#32;&#32;&#32;_M_mutate(_M_check(__pos,&#32;<emphasis role="stringliteral">&quot;basic_string::erase&quot;</emphasis>),
1712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_limit(__pos,&#32;__n),&#32;size_type(0));
1713 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1714 &#32;&#32;&#32;&#32;&#32;&#32;}
1715 
1724 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1725 &#32;&#32;&#32;&#32;&#32;&#32;erase(iterator&#32;__position)
1726 &#32;&#32;&#32;&#32;&#32;&#32;{
1727 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a6f2ef543506606e8ea3dbf0c52e61c5d">_GLIBCXX_DEBUG_PEDASSERT</link>(__position&#32;&gt;=&#32;_M_ibegin()
1728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__position&#32;&lt;&#32;_M_iend());
1729 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__pos&#32;=&#32;__position&#32;-&#32;_M_ibegin();
1730 &#32;&#32;&#32;&#32;_M_mutate(__pos,&#32;size_type(1),&#32;size_type(0));
1731 &#32;&#32;&#32;&#32;_M_rep()-&gt;_M_set_leaked();
1732 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(_M_data()&#32;+&#32;__pos);
1733 &#32;&#32;&#32;&#32;&#32;&#32;}
1734 
1744 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1745 &#32;&#32;&#32;&#32;&#32;&#32;erase(iterator&#32;__first,&#32;iterator&#32;__last);
1746 
1747 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1753 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1754 &#32;&#32;&#32;&#32;&#32;&#32;pop_back()&#32;<emphasis role="comment">//&#32;FIXME&#32;C++11:&#32;should&#32;be&#32;noexcept.</emphasis>
1755 &#32;&#32;&#32;&#32;&#32;&#32;{
1756 &#32;&#32;&#32;&#32;__glibcxx_assert(!empty());
1757 &#32;&#32;&#32;&#32;erase(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;-&#32;1,&#32;1);
1758 &#32;&#32;&#32;&#32;&#32;&#32;}
1759 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
1760 
1778 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1779 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(size_type&#32;__pos,&#32;size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str)
1780 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(__pos,&#32;__n,&#32;__str._M_data(),&#32;__str.size());&#32;}
1781 
1800 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1801 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(size_type&#32;__pos1,&#32;size_type&#32;__n1,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str,
1802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__pos2,&#32;size_type&#32;__n2&#32;=&#32;npos)
1803 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(__pos1,&#32;__n1,&#32;__str._M_data()
1804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;__str._M_check(__pos2,&#32;<emphasis role="stringliteral">&quot;basic_string::replace&quot;</emphasis>),
1805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__str._M_limit(__pos2,&#32;__n2));&#32;}
1806 
1825 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1826 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(size_type&#32;__pos,&#32;size_type&#32;__n1,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,
1827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n2);
1828 
1845 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1846 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(size_type&#32;__pos,&#32;size_type&#32;__n1,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s)
1847 &#32;&#32;&#32;&#32;&#32;&#32;{
1848 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a1cbaa8fb8f312c4e1a134758fff21231">__glibcxx_requires_string</link>(__s);
1849 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(__pos,&#32;__n1,&#32;__s,&#32;traits_type::length(__s));
1850 &#32;&#32;&#32;&#32;&#32;&#32;}
1851 
1869 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1870 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(size_type&#32;__pos,&#32;size_type&#32;__n1,&#32;size_type&#32;__n2,&#32;_CharT&#32;__c)
1871 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_replace_aux(_M_check(__pos,&#32;<emphasis role="stringliteral">&quot;basic_string::replace&quot;</emphasis>),
1872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_limit(__pos,&#32;__n1),&#32;__n2,&#32;__c);&#32;}
1873 
1887 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1888 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(iterator&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;iterator&#32;__i2,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str)
1889 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__i2,&#32;__str._M_data(),&#32;__str.size());&#32;}
1890 
1906 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1907 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(iterator&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;iterator&#32;__i2,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__n)
1908 &#32;&#32;&#32;&#32;&#32;&#32;{
1909 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a6f2ef543506606e8ea3dbf0c52e61c5d">_GLIBCXX_DEBUG_PEDASSERT</link>(_M_ibegin()&#32;&lt;=&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;&lt;=&#32;__i2
1910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__i2&#32;&lt;=&#32;_M_iend());
1911 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;-&#32;_M_ibegin(),&#32;__i2&#32;-&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__s,&#32;__n);
1912 &#32;&#32;&#32;&#32;&#32;&#32;}
1913 
1927 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1928 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(iterator&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;iterator&#32;__i2,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s)
1929 &#32;&#32;&#32;&#32;&#32;&#32;{
1930 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a1cbaa8fb8f312c4e1a134758fff21231">__glibcxx_requires_string</link>(__s);
1931 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__i2,&#32;__s,&#32;traits_type::length(__s));
1932 &#32;&#32;&#32;&#32;&#32;&#32;}
1933 
1948 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1949 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(iterator&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;iterator&#32;__i2,&#32;size_type&#32;__n,&#32;_CharT&#32;__c)
1950 &#32;&#32;&#32;&#32;&#32;&#32;{
1951 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a6f2ef543506606e8ea3dbf0c52e61c5d">_GLIBCXX_DEBUG_PEDASSERT</link>(_M_ibegin()&#32;&lt;=&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;&lt;=&#32;__i2
1952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__i2&#32;&lt;=&#32;_M_iend());
1953 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_replace_aux(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;-&#32;_M_ibegin(),&#32;__i2&#32;-&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__n,&#32;__c);
1954 &#32;&#32;&#32;&#32;&#32;&#32;}
1955 
1971 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_InputIterator&gt;
1972 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1973 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(iterator&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;iterator&#32;__i2,
1974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator&#32;__k1,&#32;_InputIterator&#32;__k2)
1975 &#32;&#32;&#32;&#32;{
1976 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a6f2ef543506606e8ea3dbf0c52e61c5d">_GLIBCXX_DEBUG_PEDASSERT</link>(_M_ibegin()&#32;&lt;=&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;&lt;=&#32;__i2
1977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__i2&#32;&lt;=&#32;_M_iend());
1978 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__k1,&#32;__k2);
1979 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::__is_integer&lt;_InputIterator&gt;::__type&#32;_Integral;
1980 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_replace_dispatch(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__i2,&#32;__k1,&#32;__k2,&#32;_Integral());
1981 &#32;&#32;&#32;&#32;}
1982 
1983 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Specializations&#32;for&#32;the&#32;common&#32;case&#32;of&#32;pointer&#32;and&#32;iterator:</emphasis>
1984 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;useful&#32;to&#32;avoid&#32;the&#32;overhead&#32;of&#32;temporary&#32;buffering&#32;in&#32;_M_replace.</emphasis>
1985 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1986 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(iterator&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;iterator&#32;__i2,&#32;_CharT*&#32;__k1,&#32;_CharT*&#32;__k2)
1987 &#32;&#32;&#32;&#32;&#32;&#32;{
1988 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a6f2ef543506606e8ea3dbf0c52e61c5d">_GLIBCXX_DEBUG_PEDASSERT</link>(_M_ibegin()&#32;&lt;=&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;&lt;=&#32;__i2
1989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__i2&#32;&lt;=&#32;_M_iend());
1990 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__k1,&#32;__k2);
1991 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;-&#32;_M_ibegin(),&#32;__i2&#32;-&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,
1992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__k1,&#32;__k2&#32;-&#32;__k1);
1993 &#32;&#32;&#32;&#32;&#32;&#32;}
1994 
1995 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1996 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(iterator&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;iterator&#32;__i2,
1997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__k1,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__k2)
1998 &#32;&#32;&#32;&#32;&#32;&#32;{
1999 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a6f2ef543506606e8ea3dbf0c52e61c5d">_GLIBCXX_DEBUG_PEDASSERT</link>(_M_ibegin()&#32;&lt;=&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;&lt;=&#32;__i2
2000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__i2&#32;&lt;=&#32;_M_iend());
2001 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__k1,&#32;__k2);
2002 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;-&#32;_M_ibegin(),&#32;__i2&#32;-&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,
2003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__k1,&#32;__k2&#32;-&#32;__k1);
2004 &#32;&#32;&#32;&#32;&#32;&#32;}
2005 
2006 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
2007 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(iterator&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;iterator&#32;__i2,&#32;iterator&#32;__k1,&#32;iterator&#32;__k2)
2008 &#32;&#32;&#32;&#32;&#32;&#32;{
2009 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a6f2ef543506606e8ea3dbf0c52e61c5d">_GLIBCXX_DEBUG_PEDASSERT</link>(_M_ibegin()&#32;&lt;=&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;&lt;=&#32;__i2
2010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__i2&#32;&lt;=&#32;_M_iend());
2011 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__k1,&#32;__k2);
2012 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;-&#32;_M_ibegin(),&#32;__i2&#32;-&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,
2013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__k1.base(),&#32;__k2&#32;-&#32;__k1);
2014 &#32;&#32;&#32;&#32;&#32;&#32;}
2015 
2016 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
2017 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(iterator&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;iterator&#32;__i2,
2018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_iterator&#32;__k1,&#32;const_iterator&#32;__k2)
2019 &#32;&#32;&#32;&#32;&#32;&#32;{
2020 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a6f2ef543506606e8ea3dbf0c52e61c5d">_GLIBCXX_DEBUG_PEDASSERT</link>(_M_ibegin()&#32;&lt;=&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;&lt;=&#32;__i2
2021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__i2&#32;&lt;=&#32;_M_iend());
2022 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__k1,&#32;__k2);
2023 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;-&#32;_M_ibegin(),&#32;__i2&#32;-&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,
2024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__k1.base(),&#32;__k2&#32;-&#32;__k1);
2025 &#32;&#32;&#32;&#32;&#32;&#32;}
2026 
2027 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
2042 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(iterator&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;iterator&#32;__i2,
2043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;initializer_list&lt;_CharT&gt;&#32;__l)
2044 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__i2,&#32;__l.begin(),&#32;__l.end());&#32;}
2045 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
2046 
2047 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
2055 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2056 &#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;basic_string&amp;&gt;
2057 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(size_type&#32;__pos,&#32;size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt)
2058 &#32;&#32;&#32;&#32;{
2059 &#32;&#32;&#32;&#32;&#32;&#32;__sv_type&#32;__sv&#32;=&#32;__svt;
2060 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(__pos,&#32;__n,&#32;__sv.data(),&#32;__sv.size());
2061 &#32;&#32;&#32;&#32;}
2062 
2072 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2073 &#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;basic_string&amp;&gt;
2074 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(size_type&#32;__pos1,&#32;size_type&#32;__n1,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt,
2075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__pos2,&#32;size_type&#32;__n2&#32;=&#32;npos)
2076 &#32;&#32;&#32;&#32;{
2077 &#32;&#32;&#32;&#32;&#32;&#32;__sv_type&#32;__sv&#32;=&#32;__svt;
2078 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(__pos1,&#32;__n1,
2079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sv.data()
2080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;std::__sv_check(__sv.size(),&#32;__pos2,&#32;<emphasis role="stringliteral">&quot;basic_string::replace&quot;</emphasis>),
2081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__sv_limit(__sv.size(),&#32;__pos2,&#32;__n2));
2082 &#32;&#32;&#32;&#32;}
2083 
2093 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2094 &#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;basic_string&amp;&gt;
2095 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(const_iterator&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;const_iterator&#32;__i2,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt)
2096 &#32;&#32;&#32;&#32;{
2097 &#32;&#32;&#32;&#32;&#32;&#32;__sv_type&#32;__sv&#32;=&#32;__svt;
2098 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;-&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>(),&#32;__i2&#32;-&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__sv);
2099 &#32;&#32;&#32;&#32;}
2100 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
2101 
2102 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
2103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Integer&gt;
2104 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
2105 &#32;&#32;&#32;&#32;_M_replace_dispatch(iterator&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;iterator&#32;__i2,&#32;_Integer&#32;__n,
2106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Integer&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;__true_type)
2107 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_replace_aux(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;-&#32;_M_ibegin(),&#32;__i2&#32;-&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__n,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);&#32;}
2108 
2109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_InputIterator&gt;
2110 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
2111 &#32;&#32;&#32;&#32;_M_replace_dispatch(iterator&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;iterator&#32;__i2,&#32;_InputIterator&#32;__k1,
2112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator&#32;__k2,&#32;__false_type);
2113 
2114 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
2115 &#32;&#32;&#32;&#32;&#32;&#32;_M_replace_aux(size_type&#32;__pos1,&#32;size_type&#32;__n1,&#32;size_type&#32;__n2,
2116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CharT&#32;__c);
2117 
2118 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
2119 &#32;&#32;&#32;&#32;&#32;&#32;_M_replace_safe(size_type&#32;__pos1,&#32;size_type&#32;__n1,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,
2120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n2);
2121 
2122 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_construct_aux&#32;is&#32;used&#32;to&#32;implement&#32;the&#32;21.3.1&#32;para&#32;15&#32;which</emphasis>
2123 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;requires&#32;special&#32;behaviour&#32;if&#32;_InIter&#32;is&#32;an&#32;integral&#32;type</emphasis>
2124 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_InIterator&gt;
2125 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_CharT*
2126 &#32;&#32;&#32;&#32;_S_construct_aux(_InIterator&#32;__beg,&#32;_InIterator&#32;__end,
2127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a,&#32;__false_type)
2128 &#32;&#32;&#32;&#32;{
2129 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InIterator&gt;::iterator_category&#32;_Tag;
2130 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_construct(__beg,&#32;__end,&#32;__a,&#32;_Tag());
2131 &#32;&#32;&#32;&#32;}
2132 
2133 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
2134 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;438.&#32;Ambiguity&#32;in&#32;the&#32;&quot;do&#32;the&#32;right&#32;thing&quot;&#32;clause</emphasis>
2135 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Integer&gt;
2136 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_CharT*
2137 &#32;&#32;&#32;&#32;_S_construct_aux(_Integer&#32;__beg,&#32;_Integer&#32;__end,
2138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a,&#32;__true_type)
2139 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_construct_aux_2(<emphasis role="keyword">static_cast&lt;</emphasis>size_type<emphasis role="keyword">&gt;</emphasis>(__beg),
2140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__end,&#32;__a);&#32;}
2141 
2142 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_CharT*
2143 &#32;&#32;&#32;&#32;&#32;&#32;_S_construct_aux_2(size_type&#32;__req,&#32;_CharT&#32;__c,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
2144 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_construct(__req,&#32;__c,&#32;__a);&#32;}
2145 
2146 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_InIterator&gt;
2147 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_CharT*
2148 &#32;&#32;&#32;&#32;_S_construct(_InIterator&#32;__beg,&#32;_InIterator&#32;__end,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
2149 &#32;&#32;&#32;&#32;{
2150 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::__is_integer&lt;_InIterator&gt;::__type&#32;_Integral;
2151 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_construct_aux(__beg,&#32;__end,&#32;__a,&#32;_Integral());
2152 &#32;&#32;&#32;&#32;}
2153 
2154 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;Input&#32;Iterators,&#32;used&#32;in&#32;istreambuf_iterators,&#32;etc.</emphasis>
2155 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_InIterator&gt;
2156 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_CharT*
2157 &#32;&#32;&#32;&#32;&#32;_S_construct(_InIterator&#32;__beg,&#32;_InIterator&#32;__end,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a,
2158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input_iterator_tag);
2159 
2160 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;forward_iterators&#32;up&#32;to&#32;random_access_iterators,&#32;used&#32;for</emphasis>
2161 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;string::iterator,&#32;_CharT*,&#32;etc.</emphasis>
2162 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_FwdIterator&gt;
2163 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_CharT*
2164 &#32;&#32;&#32;&#32;_S_construct(_FwdIterator&#32;__beg,&#32;_FwdIterator&#32;__end,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a,
2165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;forward_iterator_tag);
2166 
2167 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_CharT*
2168 &#32;&#32;&#32;&#32;&#32;&#32;_S_construct(size_type&#32;__req,&#32;_CharT&#32;__c,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a);
2169 
2170 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
2171 
2184 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2185 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">copy</link>(_CharT*&#32;__s,&#32;size_type&#32;__n,&#32;size_type&#32;__pos&#32;=&#32;0)&#32;<emphasis role="keyword">const</emphasis>;
2186 
2194 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2195 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__s)
2196 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT_IF(allocator_traits&lt;_Alloc&gt;::is_always_equal::value);
2197 
2198 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;String&#32;operations:</emphasis>
2205 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*
2206 &#32;&#32;&#32;&#32;&#32;&#32;c_str()&#32;const&#32;_GLIBCXX_NOEXCEPT
2207 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data();&#32;}
2208 
2217 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*
2218 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>()&#32;const&#32;_GLIBCXX_NOEXCEPT
2219 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data();&#32;}
2220 
2221 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
2228 &#32;&#32;&#32;&#32;&#32;&#32;_CharT*
2229 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>()&#32;noexcept
2230 &#32;&#32;&#32;&#32;&#32;&#32;{
2231 &#32;&#32;&#32;&#32;_M_leak();
2232 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data();
2233 &#32;&#32;&#32;&#32;&#32;&#32;}
2234 <emphasis role="preprocessor">#endif</emphasis>
2235 
2239 &#32;&#32;&#32;&#32;&#32;&#32;allocator_type
2240 &#32;&#32;&#32;&#32;&#32;&#32;get_allocator()&#32;const&#32;_GLIBCXX_NOEXCEPT
2241 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_dataplus;&#32;}
2242 
2255 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2256 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__pos,&#32;size_type&#32;__n)&#32;<emphasis role="keyword">const</emphasis>
2257 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT;
2258 
2269 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2270 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str,&#32;size_type&#32;__pos&#32;=&#32;0)&#32;const
2271 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
2272 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(__str.data(),&#32;__pos,&#32;__str.size());&#32;}
2273 
2284 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2285 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__pos&#32;=&#32;0)&#32;const&#32;_GLIBCXX_NOEXCEPT
2286 &#32;&#32;&#32;&#32;&#32;&#32;{
2287 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a1cbaa8fb8f312c4e1a134758fff21231">__glibcxx_requires_string</link>(__s);
2288 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(__s,&#32;__pos,&#32;traits_type::length(__s));
2289 &#32;&#32;&#32;&#32;&#32;&#32;}
2290 
2301 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2302 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(_CharT&#32;__c,&#32;size_type&#32;__pos&#32;=&#32;0)&#32;const&#32;_GLIBCXX_NOEXCEPT;
2303 
2304 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
2311 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2312 &#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;size_type&gt;
2313 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt,&#32;size_type&#32;__pos&#32;=&#32;0)&#32;const
2314 &#32;&#32;&#32;&#32;noexcept(is_same&lt;_Tp,&#32;__sv_type&gt;::<link linkend="_classvalue">value</link>)
2315 &#32;&#32;&#32;&#32;{
2316 &#32;&#32;&#32;&#32;&#32;&#32;__sv_type&#32;__sv&#32;=&#32;__svt;
2317 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(__sv.data(),&#32;__pos,&#32;__sv.size());
2318 &#32;&#32;&#32;&#32;}
2319 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
2320 
2331 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2332 &#32;&#32;&#32;&#32;&#32;&#32;rfind(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str,&#32;size_type&#32;__pos&#32;=&#32;npos)&#32;<emphasis role="keyword">const</emphasis>
2333 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
2334 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;rfind(__str.data(),&#32;__pos,&#32;__str.size());&#32;}
2335 
2348 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2349 &#32;&#32;&#32;&#32;&#32;&#32;rfind(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__pos,&#32;size_type&#32;__n)&#32;<emphasis role="keyword">const</emphasis>
2350 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT;
2351 
2362 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2363 &#32;&#32;&#32;&#32;&#32;&#32;rfind(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__pos&#32;=&#32;npos)&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
2364 &#32;&#32;&#32;&#32;&#32;&#32;{
2365 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a1cbaa8fb8f312c4e1a134758fff21231">__glibcxx_requires_string</link>(__s);
2366 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;rfind(__s,&#32;__pos,&#32;traits_type::length(__s));
2367 &#32;&#32;&#32;&#32;&#32;&#32;}
2368 
2379 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2380 &#32;&#32;&#32;&#32;&#32;&#32;rfind(_CharT&#32;__c,&#32;size_type&#32;__pos&#32;=&#32;npos)&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT;
2381 
2382 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
2389 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2390 &#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;size_type&gt;
2391 &#32;&#32;&#32;&#32;rfind(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt,&#32;size_type&#32;__pos&#32;=&#32;npos)&#32;<emphasis role="keyword">const</emphasis>
2392 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(is_same&lt;_Tp,&#32;__sv_type&gt;::value)
2393 &#32;&#32;&#32;&#32;{
2394 &#32;&#32;&#32;&#32;&#32;&#32;__sv_type&#32;__sv&#32;=&#32;__svt;
2395 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;rfind(__sv.data(),&#32;__pos,&#32;__sv.size());
2396 &#32;&#32;&#32;&#32;}
2397 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
2398 
2410 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2411 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1af918ddff6ab7ea6140872b65660e9b16">find_first_of</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str,&#32;size_type&#32;__pos&#32;=&#32;0)&#32;const
2412 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
2413 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1af918ddff6ab7ea6140872b65660e9b16">find_first_of</link>(__str.data(),&#32;__pos,&#32;__str.size());&#32;}
2414 
2427 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2428 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1af918ddff6ab7ea6140872b65660e9b16">find_first_of</link>(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__pos,&#32;size_type&#32;__n)&#32;<emphasis role="keyword">const</emphasis>
2429 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT;
2430 
2441 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2442 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1af918ddff6ab7ea6140872b65660e9b16">find_first_of</link>(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__pos&#32;=&#32;0)&#32;const
2443 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
2444 &#32;&#32;&#32;&#32;&#32;&#32;{
2445 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a1cbaa8fb8f312c4e1a134758fff21231">__glibcxx_requires_string</link>(__s);
2446 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1af918ddff6ab7ea6140872b65660e9b16">find_first_of</link>(__s,&#32;__pos,&#32;traits_type::length(__s));
2447 &#32;&#32;&#32;&#32;&#32;&#32;}
2448 
2461 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2462 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1af918ddff6ab7ea6140872b65660e9b16">find_first_of</link>(_CharT&#32;__c,&#32;size_type&#32;__pos&#32;=&#32;0)&#32;const&#32;_GLIBCXX_NOEXCEPT
2463 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(__c,&#32;__pos);&#32;}
2464 
2465 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
2473 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2474 &#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;size_type&gt;
2475 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1af918ddff6ab7ea6140872b65660e9b16">find_first_of</link>(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt,&#32;size_type&#32;__pos&#32;=&#32;0)&#32;const
2476 &#32;&#32;&#32;&#32;noexcept(is_same&lt;_Tp,&#32;__sv_type&gt;::<link linkend="_classvalue">value</link>)
2477 &#32;&#32;&#32;&#32;{
2478 &#32;&#32;&#32;&#32;&#32;&#32;__sv_type&#32;__sv&#32;=&#32;__svt;
2479 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1af918ddff6ab7ea6140872b65660e9b16">find_first_of</link>(__sv.data(),&#32;__pos,&#32;__sv.size());
2480 &#32;&#32;&#32;&#32;}
2481 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
2482 
2494 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2495 &#32;&#32;&#32;&#32;&#32;&#32;find_last_of(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str,&#32;size_type&#32;__pos&#32;=&#32;npos)&#32;<emphasis role="keyword">const</emphasis>
2496 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
2497 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;find_last_of(__str.data(),&#32;__pos,&#32;__str.size());&#32;}
2498 
2511 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2512 &#32;&#32;&#32;&#32;&#32;&#32;find_last_of(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__pos,&#32;size_type&#32;__n)&#32;<emphasis role="keyword">const</emphasis>
2513 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT;
2514 
2525 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2526 &#32;&#32;&#32;&#32;&#32;&#32;find_last_of(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__pos&#32;=&#32;npos)&#32;<emphasis role="keyword">const</emphasis>
2527 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
2528 &#32;&#32;&#32;&#32;&#32;&#32;{
2529 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a1cbaa8fb8f312c4e1a134758fff21231">__glibcxx_requires_string</link>(__s);
2530 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;find_last_of(__s,&#32;__pos,&#32;traits_type::length(__s));
2531 &#32;&#32;&#32;&#32;&#32;&#32;}
2532 
2545 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2546 &#32;&#32;&#32;&#32;&#32;&#32;find_last_of(_CharT&#32;__c,&#32;size_type&#32;__pos&#32;=&#32;npos)&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
2547 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;rfind(__c,&#32;__pos);&#32;}
2548 
2549 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
2557 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2558 &#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;size_type&gt;
2559 &#32;&#32;&#32;&#32;find_last_of(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt,&#32;size_type&#32;__pos&#32;=&#32;npos)&#32;<emphasis role="keyword">const</emphasis>
2560 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(is_same&lt;_Tp,&#32;__sv_type&gt;::value)
2561 &#32;&#32;&#32;&#32;{
2562 &#32;&#32;&#32;&#32;&#32;&#32;__sv_type&#32;__sv&#32;=&#32;__svt;
2563 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;find_last_of(__sv.data(),&#32;__pos,&#32;__sv.size());
2564 &#32;&#32;&#32;&#32;}
2565 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
2566 
2577 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2578 &#32;&#32;&#32;&#32;&#32;&#32;find_first_not_of(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str,&#32;size_type&#32;__pos&#32;=&#32;0)&#32;const
2579 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
2580 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;find_first_not_of(__str.data(),&#32;__pos,&#32;__str.size());&#32;}
2581 
2594 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2595 &#32;&#32;&#32;&#32;&#32;&#32;find_first_not_of(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__pos,
2596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n)&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT;
2597 
2608 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2609 &#32;&#32;&#32;&#32;&#32;&#32;find_first_not_of(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__pos&#32;=&#32;0)&#32;const
2610 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
2611 &#32;&#32;&#32;&#32;&#32;&#32;{
2612 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a1cbaa8fb8f312c4e1a134758fff21231">__glibcxx_requires_string</link>(__s);
2613 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;find_first_not_of(__s,&#32;__pos,&#32;traits_type::length(__s));
2614 &#32;&#32;&#32;&#32;&#32;&#32;}
2615 
2626 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2627 &#32;&#32;&#32;&#32;&#32;&#32;find_first_not_of(_CharT&#32;__c,&#32;size_type&#32;__pos&#32;=&#32;0)&#32;const
2628 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT;
2629 
2630 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
2638 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2639 &#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;size_type&gt;
2640 &#32;&#32;&#32;&#32;find_first_not_of(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt,&#32;size_type&#32;__pos&#32;=&#32;0)&#32;const
2641 &#32;&#32;&#32;&#32;noexcept(is_same&lt;_Tp,&#32;__sv_type&gt;::<link linkend="_classvalue">value</link>)
2642 &#32;&#32;&#32;&#32;{
2643 &#32;&#32;&#32;&#32;&#32;&#32;__sv_type&#32;__sv&#32;=&#32;__svt;
2644 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;find_first_not_of(__sv.data(),&#32;__pos,&#32;__sv.size());
2645 &#32;&#32;&#32;&#32;}
2646 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
2647 
2659 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2660 &#32;&#32;&#32;&#32;&#32;&#32;find_last_not_of(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str,&#32;size_type&#32;__pos&#32;=&#32;npos)&#32;<emphasis role="keyword">const</emphasis>
2661 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
2662 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;find_last_not_of(__str.data(),&#32;__pos,&#32;__str.size());&#32;}
2663 
2676 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2677 &#32;&#32;&#32;&#32;&#32;&#32;find_last_not_of(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__pos,
2678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n)&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT;
2690 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2691 &#32;&#32;&#32;&#32;&#32;&#32;find_last_not_of(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__pos&#32;=&#32;npos)&#32;<emphasis role="keyword">const</emphasis>
2692 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
2693 &#32;&#32;&#32;&#32;&#32;&#32;{
2694 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a1cbaa8fb8f312c4e1a134758fff21231">__glibcxx_requires_string</link>(__s);
2695 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;find_last_not_of(__s,&#32;__pos,&#32;traits_type::length(__s));
2696 &#32;&#32;&#32;&#32;&#32;&#32;}
2697 
2708 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2709 &#32;&#32;&#32;&#32;&#32;&#32;find_last_not_of(_CharT&#32;__c,&#32;size_type&#32;__pos&#32;=&#32;npos)&#32;<emphasis role="keyword">const</emphasis>
2710 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT;
2711 
2712 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
2720 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2721 &#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;size_type&gt;
2722 &#32;&#32;&#32;&#32;find_last_not_of(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt,&#32;size_type&#32;__pos&#32;=&#32;npos)&#32;<emphasis role="keyword">const</emphasis>
2723 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(is_same&lt;_Tp,&#32;__sv_type&gt;::value)
2724 &#32;&#32;&#32;&#32;{
2725 &#32;&#32;&#32;&#32;&#32;&#32;__sv_type&#32;__sv&#32;=&#32;__svt;
2726 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;find_last_not_of(__sv.data(),&#32;__pos,&#32;__sv.size());
2727 &#32;&#32;&#32;&#32;}
2728 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
2729 
2742 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>
2743 &#32;&#32;&#32;&#32;&#32;&#32;substr(size_type&#32;__pos&#32;=&#32;0,&#32;size_type&#32;__n&#32;=&#32;npos)<emphasis role="keyword">&#32;const</emphasis>
2744 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>(*<emphasis role="keyword">this</emphasis>,
2745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_check(__pos,&#32;<emphasis role="stringliteral">&quot;basic_string::substr&quot;</emphasis>),&#32;__n);&#32;}
2746 
2761 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>
2762 &#32;&#32;&#32;&#32;&#32;&#32;compare(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str)<emphasis role="keyword">&#32;const</emphasis>
2763 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
2764 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__size&#32;=&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>();
2765 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__osize&#32;=&#32;__str.size();
2766 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__len&#32;=&#32;std::min(__size,&#32;__osize);
2767 
2768 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;__r&#32;=&#32;traits_type::compare(_M_data(),&#32;__str.data(),&#32;__len);
2769 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__r)
2770 &#32;&#32;&#32;&#32;&#32;&#32;__r&#32;=&#32;_S_compare(__size,&#32;__osize);
2771 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
2772 &#32;&#32;&#32;&#32;&#32;&#32;}
2773 
2774 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
2780 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2781 &#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;int&gt;
2782 &#32;&#32;&#32;&#32;compare(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt)&#32;<emphasis role="keyword">const</emphasis>
2783 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(is_same&lt;_Tp,&#32;__sv_type&gt;::value)
2784 &#32;&#32;&#32;&#32;{
2785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;__sv_type&#32;__sv&#32;=&#32;__svt;
2786 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__size&#32;=&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>();
2787 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__osize&#32;=&#32;__sv.size();
2788 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__len&#32;=&#32;std::min(__size,&#32;__osize);
2789 
2790 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;__r&#32;=&#32;traits_type::compare(_M_data(),&#32;__sv.data(),&#32;__len);
2791 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__r)
2792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__r&#32;=&#32;_S_compare(__size,&#32;__osize);
2793 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
2794 &#32;&#32;&#32;&#32;}
2795 
2804 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2805 &#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;int&gt;
2806 &#32;&#32;&#32;&#32;compare(size_type&#32;__pos,&#32;size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt)&#32;<emphasis role="keyword">const</emphasis>
2807 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(is_same&lt;_Tp,&#32;__sv_type&gt;::value)
2808 &#32;&#32;&#32;&#32;{
2809 &#32;&#32;&#32;&#32;&#32;&#32;__sv_type&#32;__sv&#32;=&#32;__svt;
2810 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__sv_type(*this).substr(__pos,&#32;__n).compare(__sv);
2811 &#32;&#32;&#32;&#32;}
2812 
2823 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2824 &#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;int&gt;
2825 &#32;&#32;&#32;&#32;compare(size_type&#32;__pos1,&#32;size_type&#32;__n1,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt,
2826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__pos2,&#32;size_type&#32;__n2&#32;=&#32;npos)&#32;<emphasis role="keyword">const</emphasis>
2827 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(is_same&lt;_Tp,&#32;__sv_type&gt;::value)
2828 &#32;&#32;&#32;&#32;{
2829 &#32;&#32;&#32;&#32;&#32;&#32;__sv_type&#32;__sv&#32;=&#32;__svt;
2830 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__sv_type(*<emphasis role="keyword">this</emphasis>)
2831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.substr(__pos1,&#32;__n1).compare(__sv.substr(__pos2,&#32;__n2));
2832 &#32;&#32;&#32;&#32;}
2833 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
2834 
2854 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>
2855 &#32;&#32;&#32;&#32;&#32;&#32;compare(size_type&#32;__pos,&#32;size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str)&#32;<emphasis role="keyword">const</emphasis>;
2856 
2880 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>
2881 &#32;&#32;&#32;&#32;&#32;&#32;compare(size_type&#32;__pos1,&#32;size_type&#32;__n1,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str,
2882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__pos2,&#32;size_type&#32;__n2&#32;=&#32;npos)&#32;<emphasis role="keyword">const</emphasis>;
2883 
2898 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>
2899 &#32;&#32;&#32;&#32;&#32;&#32;compare(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s)&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT;
2900 
2901 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
2902 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;5&#32;String::compare&#32;specification&#32;questionable</emphasis>
2922 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>
2923 &#32;&#32;&#32;&#32;&#32;&#32;compare(size_type&#32;__pos,&#32;size_type&#32;__n1,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s)&#32;<emphasis role="keyword">const</emphasis>;
2924 
2949 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>
2950 &#32;&#32;&#32;&#32;&#32;&#32;compare(size_type&#32;__pos,&#32;size_type&#32;__n1,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,
2951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n2)&#32;<emphasis role="keyword">const</emphasis>;
2952 
2953 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
2954 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
2955 &#32;&#32;&#32;&#32;&#32;&#32;starts_with(basic_string_view&lt;_CharT,&#32;_Traits&gt;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
2956 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__sv_type(this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>(),&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()).starts_with(__x);&#32;}
2957 
2958 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
2959 &#32;&#32;&#32;&#32;&#32;&#32;starts_with(_CharT&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
2960 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__sv_type(this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>(),&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()).starts_with(__x);&#32;}
2961 
2962 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
2963 &#32;&#32;&#32;&#32;&#32;&#32;starts_with(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
2964 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__sv_type(this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>(),&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()).starts_with(__x);&#32;}
2965 
2966 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
2967 &#32;&#32;&#32;&#32;&#32;&#32;ends_with(basic_string_view&lt;_CharT,&#32;_Traits&gt;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
2968 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__sv_type(this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>(),&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()).ends_with(__x);&#32;}
2969 
2970 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
2971 &#32;&#32;&#32;&#32;&#32;&#32;ends_with(_CharT&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
2972 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__sv_type(this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>(),&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()).ends_with(__x);&#32;}
2973 
2974 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
2975 &#32;&#32;&#32;&#32;&#32;&#32;ends_with(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
2976 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__sv_type(this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>(),&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()).ends_with(__x);&#32;}
2977 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++20</emphasis>
2978 
2979 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;202011L</emphasis>
2980 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
2981 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1aa52974b0e426e7e2fbd725a900e9c36e">contains</link>(basic_string_view&lt;_CharT,&#32;_Traits&gt;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
2982 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__sv_type(this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>(),&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()).contains(__x);&#32;}
2983 
2984 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
2985 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1aa52974b0e426e7e2fbd725a900e9c36e">contains</link>(_CharT&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
2986 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__sv_type(this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>(),&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()).contains(__x);&#32;}
2987 
2988 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
2989 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1aa52974b0e426e7e2fbd725a900e9c36e">contains</link>(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
2990 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__sv_type(this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>(),&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()).contains(__x);&#32;}
2991 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++23</emphasis>
2992 
2993 <emphasis role="preprocessor">#&#32;ifdef&#32;_GLIBCXX_TM_TS_INTERNAL</emphasis>
2994 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;void
2995 &#32;&#32;&#32;&#32;&#32;&#32;::_txnal_cow_string_C1_for_exceptions(<emphasis role="keywordtype">void</emphasis>*&#32;that,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;s,
2996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*&#32;exc);
2997 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*
2998 &#32;&#32;&#32;&#32;&#32;&#32;::_txnal_cow_string_c_str(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*that);
2999 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;void
3000 &#32;&#32;&#32;&#32;&#32;&#32;::_txnal_cow_string_D1(<emphasis role="keywordtype">void</emphasis>&#32;*that);
3001 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;void
3002 &#32;&#32;&#32;&#32;&#32;&#32;::_txnal_cow_string_D1_commit(<emphasis role="keywordtype">void</emphasis>&#32;*that);
3003 <emphasis role="preprocessor">#&#32;endif</emphasis>
3004 &#32;&#32;};
3005 
3006 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3007 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;::size_type</link>
3008 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>::
3009 &#32;&#32;&#32;&#32;_Rep::_S_max_size&#32;=&#32;(((npos&#32;-&#32;<emphasis role="keyword">sizeof</emphasis>(_Rep_base))/<emphasis role="keyword">sizeof</emphasis>(_CharT))&#32;-&#32;1)&#32;/&#32;4;
3010 
3011 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3012 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT
3013 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>::
3014 &#32;&#32;&#32;&#32;_Rep::_S_terminal&#32;=&#32;_CharT();
3015 
3016 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3017 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;::size_type</link>
3018 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;::npos</link>;
3019 
3020 &#32;&#32;<emphasis role="comment">//&#32;Linker&#32;sets&#32;_S_empty_rep_storage&#32;to&#32;all&#32;0s&#32;(one&#32;reference,&#32;empty&#32;string)</emphasis>
3021 &#32;&#32;<emphasis role="comment">//&#32;at&#32;static&#32;init&#32;time&#32;(before&#32;static&#32;ctors&#32;are&#32;run).</emphasis>
3022 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3023 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;::size_type</link>
3024 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;::_Rep::_S_empty_rep_storage</link>[
3025 &#32;&#32;&#32;&#32;(<emphasis role="keyword">sizeof</emphasis>(_Rep_base)&#32;+&#32;<emphasis role="keyword">sizeof</emphasis>(_CharT)&#32;+&#32;<emphasis role="keyword">sizeof</emphasis>(size_type)&#32;-&#32;1)&#32;/
3026 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">sizeof</emphasis>(size_type)];
3027 
3028 &#32;&#32;<emphasis role="comment">//&#32;NB:&#32;This&#32;is&#32;the&#32;special&#32;case&#32;for&#32;Input&#32;Iterators,&#32;used&#32;in</emphasis>
3029 &#32;&#32;<emphasis role="comment">//&#32;istreambuf_iterators,&#32;etc.</emphasis>
3030 &#32;&#32;<emphasis role="comment">//&#32;Input&#32;Iterators&#32;have&#32;a&#32;cost&#32;structure&#32;very&#32;different&#32;from</emphasis>
3031 &#32;&#32;<emphasis role="comment">//&#32;pointers,&#32;calling&#32;for&#32;a&#32;different&#32;coding&#32;style.</emphasis>
3032 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3033 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InIterator&gt;
3034 &#32;&#32;&#32;&#32;&#32;&#32;_CharT*
3035 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;::</link>
3036 <link linkend="_classbasic__string">      _S_construct</link>(_InIterator&#32;__beg,&#32;_InIterator&#32;__end,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a,
3037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input_iterator_tag)
3038 &#32;&#32;&#32;&#32;&#32;&#32;{
3039 <emphasis role="preprocessor">#if&#32;_GLIBCXX_FULLY_DYNAMIC_STRING&#32;==&#32;0</emphasis>
3040 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__beg&#32;==&#32;__end&#32;&amp;&amp;&#32;__a&#32;==&#32;_Alloc())
3041 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_empty_rep()._M_refdata();
3042 <emphasis role="preprocessor">#endif</emphasis>
3043 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Avoid&#32;reallocation&#32;for&#32;common&#32;case.</emphasis>
3044 &#32;&#32;&#32;&#32;_CharT&#32;__buf[128];
3045 &#32;&#32;&#32;&#32;size_type&#32;__len&#32;=&#32;0;
3046 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__beg&#32;!=&#32;__end&#32;&amp;&amp;&#32;__len&#32;&lt;&#32;<emphasis role="keyword">sizeof</emphasis>(__buf)&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_CharT))
3047 &#32;&#32;&#32;&#32;&#32;&#32;{
3048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__buf[__len++]&#32;=&#32;*__beg;
3049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__beg;
3050 &#32;&#32;&#32;&#32;&#32;&#32;}
3051 &#32;&#32;&#32;&#32;_Rep*&#32;__r&#32;=&#32;_Rep::_S_create(__len,&#32;size_type(0),&#32;__a);
3052 &#32;&#32;&#32;&#32;_M_copy(__r-&gt;_M_refdata(),&#32;__buf,&#32;__len);
3053 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
3054 &#32;&#32;&#32;&#32;&#32;&#32;{
3055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__beg&#32;!=&#32;__end)
3056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__len&#32;==&#32;__r-&gt;_M_capacity)
3058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Allocate&#32;more&#32;space.</emphasis>
3060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Rep*&#32;__another&#32;=&#32;_Rep::_S_create(__len&#32;+&#32;1,&#32;__len,&#32;__a);
3061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_copy(__another-&gt;_M_refdata(),&#32;__r-&gt;_M_refdata(),&#32;__len);
3062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__r-&gt;_M_destroy(__a);
3063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__r&#32;=&#32;__another;
3064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__r-&gt;_M_refdata()[__len++]&#32;=&#32;*__beg;
3066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__beg;
3067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3068 &#32;&#32;&#32;&#32;&#32;&#32;}
3069 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
3070 &#32;&#32;&#32;&#32;&#32;&#32;{
3071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__r-&gt;_M_destroy(__a);
3072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
3073 &#32;&#32;&#32;&#32;&#32;&#32;}
3074 &#32;&#32;&#32;&#32;__r-&gt;_M_set_length_and_sharable(__len);
3075 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r-&gt;_M_refdata();
3076 &#32;&#32;&#32;&#32;&#32;&#32;}
3077 
3078 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3079 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_InIterator&gt;
3080 &#32;&#32;&#32;&#32;&#32;&#32;_CharT*
3081 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;::</link>
3082 <link linkend="_classbasic__string">      _S_construct</link>(_InIterator&#32;__beg,&#32;_InIterator&#32;__end,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a,
3083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;forward_iterator_tag)
3084 &#32;&#32;&#32;&#32;&#32;&#32;{
3085 <emphasis role="preprocessor">#if&#32;_GLIBCXX_FULLY_DYNAMIC_STRING&#32;==&#32;0</emphasis>
3086 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__beg&#32;==&#32;__end&#32;&amp;&amp;&#32;__a&#32;==&#32;_Alloc())
3087 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_empty_rep()._M_refdata();
3088 <emphasis role="preprocessor">#endif</emphasis>
3089 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NB:&#32;Not&#32;required,&#32;but&#32;considered&#32;best&#32;practice.</emphasis>
3090 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gnu_cxx::__is_null_pointer(__beg)&#32;&amp;&amp;&#32;__beg&#32;!=&#32;__end)
3091 &#32;&#32;&#32;&#32;&#32;&#32;__throw_logic_error(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ad90b1fa000da1666f104c4dd9c0d7f9b">__N</link>(<emphasis role="stringliteral">&quot;basic_string::_S_construct&#32;null&#32;not&#32;valid&quot;</emphasis>));
3092 
3093 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__dnew&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>size_type<emphasis role="keyword">&gt;</emphasis>(std::distance(__beg,
3094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__end));
3095 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;for&#32;out_of_range&#32;and&#32;length_error&#32;exceptions.</emphasis>
3096 &#32;&#32;&#32;&#32;_Rep*&#32;__r&#32;=&#32;_Rep::_S_create(__dnew,&#32;size_type(0),&#32;__a);
3097 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
3098 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_S_copy_chars(__r-&gt;_M_refdata(),&#32;__beg,&#32;__end);&#32;}
3099 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
3100 &#32;&#32;&#32;&#32;&#32;&#32;{
3101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__r-&gt;_M_destroy(__a);
3102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
3103 &#32;&#32;&#32;&#32;&#32;&#32;}
3104 &#32;&#32;&#32;&#32;__r-&gt;_M_set_length_and_sharable(__dnew);
3105 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r-&gt;_M_refdata();
3106 &#32;&#32;&#32;&#32;&#32;&#32;}
3107 
3108 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3109 &#32;&#32;&#32;&#32;_CharT*
3110 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;::</link>
3111 <link linkend="_classbasic__string">    _S_construct</link>(size_type&#32;__n,&#32;_CharT&#32;__c,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
3112 &#32;&#32;&#32;&#32;{
3113 <emphasis role="preprocessor">#if&#32;_GLIBCXX_FULLY_DYNAMIC_STRING&#32;==&#32;0</emphasis>
3114 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;0&#32;&amp;&amp;&#32;__a&#32;==&#32;_Alloc())
3115 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_empty_rep()._M_refdata();
3116 <emphasis role="preprocessor">#endif</emphasis>
3117 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;for&#32;out_of_range&#32;and&#32;length_error&#32;exceptions.</emphasis>
3118 &#32;&#32;&#32;&#32;&#32;&#32;_Rep*&#32;__r&#32;=&#32;_Rep::_S_create(__n,&#32;size_type(0),&#32;__a);
3119 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n)
3120 &#32;&#32;&#32;&#32;_M_assign(__r-&gt;_M_refdata(),&#32;__n,&#32;__c);
3121 
3122 &#32;&#32;&#32;&#32;&#32;&#32;__r-&gt;_M_set_length_and_sharable(__n);
3123 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r-&gt;_M_refdata();
3124 &#32;&#32;&#32;&#32;}
3125 
3126 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3127 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;::</link>
3128 <link linkend="_classbasic__string">    basic_string</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str,&#32;size_type&#32;__pos,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
3129 &#32;&#32;&#32;&#32;:&#32;_M_dataplus(_S_construct(__str._M_data()
3130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;__str._M_check(__pos,
3131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;basic_string::basic_string&quot;</emphasis>),
3132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__str._M_data()&#32;+&#32;__str._M_limit(__pos,&#32;npos)
3133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;__pos,&#32;__a),&#32;__a)
3134 &#32;&#32;&#32;&#32;{&#32;}
3135 
3136 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3137 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;::</link>
3138 <link linkend="_classbasic__string">    basic_string</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str,&#32;size_type&#32;__pos,&#32;size_type&#32;__n)
3139 &#32;&#32;&#32;&#32;:&#32;_M_dataplus(_S_construct(__str._M_data()
3140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;__str._M_check(__pos,
3141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;basic_string::basic_string&quot;</emphasis>),
3142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__str._M_data()&#32;+&#32;__str._M_limit(__pos,&#32;__n)
3143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;__pos,&#32;_Alloc()),&#32;_Alloc())
3144 &#32;&#32;&#32;&#32;{&#32;}
3145 
3146 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3147 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;::</link>
3148 <link linkend="_classbasic__string">    basic_string</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str,&#32;size_type&#32;__pos,
3149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
3150 &#32;&#32;&#32;&#32;:&#32;_M_dataplus(_S_construct(__str._M_data()
3151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;__str._M_check(__pos,
3152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;basic_string::basic_string&quot;</emphasis>),
3153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__str._M_data()&#32;+&#32;__str._M_limit(__pos,&#32;__n)
3154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;__pos,&#32;__a),&#32;__a)
3155 &#32;&#32;&#32;&#32;{&#32;}
3156 
3157 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3158 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;
3159 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;::</link>
3160 <link linkend="_classbasic__string">    assign</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str)
3161 &#32;&#32;&#32;&#32;{
3162 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_rep()&#32;!=&#32;__str._M_rep())
3163 &#32;&#32;&#32;&#32;{
3164 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;XXX&#32;MT</emphasis>
3165 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&#32;__a&#32;=&#32;this-&gt;get_allocator();
3166 &#32;&#32;&#32;&#32;&#32;&#32;_CharT*&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__str._M_rep()-&gt;_M_grab(__a,&#32;__str.get_allocator());
3167 &#32;&#32;&#32;&#32;&#32;&#32;_M_rep()-&gt;_M_dispose(__a);
3168 &#32;&#32;&#32;&#32;&#32;&#32;_M_data(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
3169 &#32;&#32;&#32;&#32;}
3170 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
3171 &#32;&#32;&#32;&#32;}
3172 
3173 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3174 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;
3175 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;::</link>
3176 <link linkend="_classbasic__string">    assign</link>(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__n)
3177 &#32;&#32;&#32;&#32;{
3178 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a91cfe307287e81114000d301d59830e0">__glibcxx_requires_string_len</link>(__s,&#32;__n);
3179 &#32;&#32;&#32;&#32;&#32;&#32;_M_check_length(this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>(),&#32;__n,&#32;<emphasis role="stringliteral">&quot;basic_string::assign&quot;</emphasis>);
3180 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_disjunct(__s)&#32;||&#32;_M_rep()-&gt;_M_is_shared())
3181 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_replace_safe(size_type(0),&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>(),&#32;__s,&#32;__n);
3182 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3183 &#32;&#32;&#32;&#32;{
3184 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Work&#32;in-place.</emphasis>
3185 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__pos&#32;=&#32;__s&#32;-&#32;_M_data();
3186 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pos&#32;&gt;=&#32;__n)
3187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_copy(_M_data(),&#32;__s,&#32;__n);
3188 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pos)
3189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_move(_M_data(),&#32;__s,&#32;__n);
3190 &#32;&#32;&#32;&#32;&#32;&#32;_M_rep()-&gt;_M_set_length_and_sharable(__n);
3191 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
3192 &#32;&#32;&#32;&#32;}
3193 &#32;&#32;&#32;&#32;&#32;}
3194 
3195 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3196 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;
3197 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;::</link>
3198 <link linkend="_classbasic__string">    append</link>(size_type&#32;__n,&#32;_CharT&#32;__c)
3199 &#32;&#32;&#32;&#32;{
3200 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n)
3201 &#32;&#32;&#32;&#32;{
3202 &#32;&#32;&#32;&#32;&#32;&#32;_M_check_length(size_type(0),&#32;__n,&#32;<emphasis role="stringliteral">&quot;basic_string::append&quot;</emphasis>);
3203 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__len&#32;=&#32;__n&#32;+&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>();
3204 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__len&#32;&gt;&#32;this-&gt;capacity()&#32;||&#32;_M_rep()-&gt;_M_is_shared())
3205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;reserve(__len);
3206 &#32;&#32;&#32;&#32;&#32;&#32;_M_assign(_M_data()&#32;+&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>(),&#32;__n,&#32;__c);
3207 &#32;&#32;&#32;&#32;&#32;&#32;_M_rep()-&gt;_M_set_length_and_sharable(__len);
3208 &#32;&#32;&#32;&#32;}
3209 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
3210 &#32;&#32;&#32;&#32;}
3211 
3212 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3213 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;
3214 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;::</link>
3215 <link linkend="_classbasic__string">    append</link>(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__n)
3216 &#32;&#32;&#32;&#32;{
3217 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a91cfe307287e81114000d301d59830e0">__glibcxx_requires_string_len</link>(__s,&#32;__n);
3218 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n)
3219 &#32;&#32;&#32;&#32;{
3220 &#32;&#32;&#32;&#32;&#32;&#32;_M_check_length(size_type(0),&#32;__n,&#32;<emphasis role="stringliteral">&quot;basic_string::append&quot;</emphasis>);
3221 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__len&#32;=&#32;__n&#32;+&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>();
3222 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__len&#32;&gt;&#32;this-&gt;capacity()&#32;||&#32;_M_rep()-&gt;_M_is_shared())
3223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_disjunct(__s))
3225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;reserve(__len);
3226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__off&#32;=&#32;__s&#32;-&#32;_M_data();
3229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;reserve(__len);
3230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__s&#32;=&#32;_M_data()&#32;+&#32;__off;
3231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3233 &#32;&#32;&#32;&#32;&#32;&#32;_M_copy(_M_data()&#32;+&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>(),&#32;__s,&#32;__n);
3234 &#32;&#32;&#32;&#32;&#32;&#32;_M_rep()-&gt;_M_set_length_and_sharable(__len);
3235 &#32;&#32;&#32;&#32;}
3236 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
3237 &#32;&#32;&#32;&#32;}
3238 
3239 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3240 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;
3241 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;::</link>
3242 <link linkend="_classbasic__string">    append</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str)
3243 &#32;&#32;&#32;&#32;{
3244 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__size&#32;=&#32;__str.size();
3245 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__size)
3246 &#32;&#32;&#32;&#32;{
3247 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__len&#32;=&#32;__size&#32;+&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>();
3248 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__len&#32;&gt;&#32;this-&gt;capacity()&#32;||&#32;_M_rep()-&gt;_M_is_shared())
3249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;reserve(__len);
3250 &#32;&#32;&#32;&#32;&#32;&#32;_M_copy(_M_data()&#32;+&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>(),&#32;__str._M_data(),&#32;__size);
3251 &#32;&#32;&#32;&#32;&#32;&#32;_M_rep()-&gt;_M_set_length_and_sharable(__len);
3252 &#32;&#32;&#32;&#32;}
3253 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
3254 &#32;&#32;&#32;&#32;}
3255 
3256 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3257 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;
3258 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;::</link>
3259 <link linkend="_classbasic__string">    append</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str,&#32;size_type&#32;__pos,&#32;size_type&#32;__n)
3260 &#32;&#32;&#32;&#32;{
3261 &#32;&#32;&#32;&#32;&#32;&#32;__str._M_check(__pos,&#32;<emphasis role="stringliteral">&quot;basic_string::append&quot;</emphasis>);
3262 &#32;&#32;&#32;&#32;&#32;&#32;__n&#32;=&#32;__str._M_limit(__pos,&#32;__n);
3263 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n)
3264 &#32;&#32;&#32;&#32;{
3265 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__len&#32;=&#32;__n&#32;+&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>();
3266 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__len&#32;&gt;&#32;this-&gt;capacity()&#32;||&#32;_M_rep()-&gt;_M_is_shared())
3267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;reserve(__len);
3268 &#32;&#32;&#32;&#32;&#32;&#32;_M_copy(_M_data()&#32;+&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>(),&#32;__str._M_data()&#32;+&#32;__pos,&#32;__n);
3269 &#32;&#32;&#32;&#32;&#32;&#32;_M_rep()-&gt;_M_set_length_and_sharable(__len);
3270 &#32;&#32;&#32;&#32;}
3271 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
3272 &#32;&#32;&#32;&#32;}
3273 
3274 &#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3275 &#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;
3276 &#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;::</link>
3277 <link linkend="_classbasic__string">     insert</link>(size_type&#32;__pos,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__n)
3278 &#32;&#32;&#32;&#32;&#32;{
3279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a91cfe307287e81114000d301d59830e0">__glibcxx_requires_string_len</link>(__s,&#32;__n);
3280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_check(__pos,&#32;<emphasis role="stringliteral">&quot;basic_string::insert&quot;</emphasis>);
3281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_check_length(size_type(0),&#32;__n,&#32;<emphasis role="stringliteral">&quot;basic_string::insert&quot;</emphasis>);
3282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_disjunct(__s)&#32;||&#32;_M_rep()-&gt;_M_is_shared())
3283 &#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_replace_safe(__pos,&#32;size_type(0),&#32;__s,&#32;__n);
3284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3285 &#32;&#32;&#32;&#32;&#32;{
3286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Work&#32;in-place.</emphasis>
3287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__off&#32;=&#32;__s&#32;-&#32;_M_data();
3288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_mutate(__pos,&#32;0,&#32;__n);
3289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;__s&#32;=&#32;_M_data()&#32;+&#32;__off;
3290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_CharT*&#32;__p&#32;=&#32;_M_data()&#32;+&#32;__pos;
3291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__s&#32;&#32;+&#32;__n&#32;&lt;=&#32;__p)
3292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_copy(__p,&#32;__s,&#32;__n);
3293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__s&#32;&gt;=&#32;__p)
3294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_copy(__p,&#32;__s&#32;+&#32;__n,&#32;__n);
3295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__nleft&#32;=&#32;__p&#32;-&#32;__s;
3298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_copy(__p,&#32;__s,&#32;__nleft);
3299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_copy(__p&#32;+&#32;__nleft,&#32;__p&#32;+&#32;__n,&#32;__n&#32;-&#32;__nleft);
3300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
3302 &#32;&#32;&#32;&#32;&#32;}
3303 &#32;&#32;&#32;&#32;&#32;}
3304 
3305 &#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3306 &#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;::iterator</link>
3307 &#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;::</link>
3308 <link linkend="_classbasic__string">     erase</link>(iterator&#32;__first,&#32;iterator&#32;__last)
3309 &#32;&#32;&#32;&#32;&#32;{
3310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a6f2ef543506606e8ea3dbf0c52e61c5d">_GLIBCXX_DEBUG_PEDASSERT</link>(__first&#32;&gt;=&#32;_M_ibegin()&#32;&amp;&amp;&#32;__first&#32;&lt;=&#32;__last
3311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__last&#32;&lt;=&#32;_M_iend());
3312 
3313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NB:&#32;This&#32;isn&apos;t&#32;just&#32;an&#32;optimization&#32;(bail&#32;out&#32;early&#32;when</emphasis>
3314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;there&#32;is&#32;nothing&#32;to&#32;do,&#32;really),&#32;it&apos;s&#32;also&#32;a&#32;correctness</emphasis>
3315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;issue&#32;vs&#32;MT,&#32;see&#32;libstdc++/40518.</emphasis>
3316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__size&#32;=&#32;__last&#32;-&#32;__first;
3317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__size)
3318 &#32;&#32;&#32;&#32;&#32;{
3319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__pos&#32;=&#32;__first&#32;-&#32;_M_ibegin();
3320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_mutate(__pos,&#32;__size,&#32;size_type(0));
3321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_rep()-&gt;_M_set_leaked();
3322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(_M_data()&#32;+&#32;__pos);
3323 &#32;&#32;&#32;&#32;&#32;}
3324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3325 &#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
3326 &#32;&#32;&#32;&#32;&#32;}
3327 
3328 &#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3329 &#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;
3330 &#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;::</link>
3331 <link linkend="_classbasic__string">     replace</link>(size_type&#32;__pos,&#32;size_type&#32;__n1,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,
3332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n2)
3333 &#32;&#32;&#32;&#32;&#32;{
3334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a91cfe307287e81114000d301d59830e0">__glibcxx_requires_string_len</link>(__s,&#32;__n2);
3335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_check(__pos,&#32;<emphasis role="stringliteral">&quot;basic_string::replace&quot;</emphasis>);
3336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;__n1&#32;=&#32;_M_limit(__pos,&#32;__n1);
3337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_check_length(__n1,&#32;__n2,&#32;<emphasis role="stringliteral">&quot;basic_string::replace&quot;</emphasis>);
3338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__left;
3339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_disjunct(__s)&#32;||&#32;_M_rep()-&gt;_M_is_shared())
3340 &#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_replace_safe(__pos,&#32;__n1,&#32;__s,&#32;__n2);
3341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;((__left&#32;=&#32;__s&#32;+&#32;__n2&#32;&lt;=&#32;_M_data()&#32;+&#32;__pos)
3342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;_M_data()&#32;+&#32;__pos&#32;+&#32;__n1&#32;&lt;=&#32;__s)
3343 &#32;&#32;&#32;&#32;&#32;{
3344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Work&#32;in-place:&#32;non-overlapping&#32;case.</emphasis>
3345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__off&#32;=&#32;__s&#32;-&#32;_M_data();
3346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;__left&#32;?&#32;__off&#32;:&#32;(__off&#32;+=&#32;__n2&#32;-&#32;__n1);
3347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_mutate(__pos,&#32;__n1,&#32;__n2);
3348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_copy(_M_data()&#32;+&#32;__pos,&#32;_M_data()&#32;+&#32;__off,&#32;__n2);
3349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
3350 &#32;&#32;&#32;&#32;&#32;}
3351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3352 &#32;&#32;&#32;&#32;&#32;{
3353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Todo:&#32;overlapping&#32;case.</emphasis>
3354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>(__s,&#32;__n2);
3355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_replace_safe(__pos,&#32;__n1,&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>._M_data(),&#32;__n2);
3356 &#32;&#32;&#32;&#32;&#32;}
3357 &#32;&#32;&#32;&#32;&#32;}
3358 
3359 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3360 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
3361 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;::_Rep::</link>
3362 <link linkend="_classbasic__string">    _M_destroy</link>(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)&#32;<emphasis role="keywordflow">throw</emphasis>&#32;()
3363 &#32;&#32;&#32;&#32;{
3364 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__size&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(_Rep_base)
3365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;(this-&gt;_M_capacity&#32;+&#32;1)&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_CharT);
3366 &#32;&#32;&#32;&#32;&#32;&#32;_Raw_bytes_alloc(__a).deallocate(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>),&#32;__size);
3367 &#32;&#32;&#32;&#32;}
3368 
3369 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3370 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
3371 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;::</link>
3372 <link linkend="_classbasic__string">    _M_leak_hard</link>()
3373 &#32;&#32;&#32;&#32;{
3374 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;need&#32;to&#32;create&#32;a&#32;new&#32;copy&#32;of&#32;an&#32;empty&#32;string&#32;when&#32;a&#32;non-const</emphasis>
3375 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;reference/pointer/iterator&#32;into&#32;it&#32;is&#32;obtained.&#32;Modifying&#32;the</emphasis>
3376 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;trailing&#32;null&#32;character&#32;is&#32;undefined,&#32;so&#32;the&#32;ref/pointer/iterator</emphasis>
3377 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;is&#32;effectively&#32;const&#32;anyway.</emphasis>
3378 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;empty())
3379 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
3380 
3381 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_rep()-&gt;_M_is_shared())
3382 &#32;&#32;&#32;&#32;_M_mutate(0,&#32;0,&#32;0);
3383 &#32;&#32;&#32;&#32;&#32;&#32;_M_rep()-&gt;_M_set_leaked();
3384 &#32;&#32;&#32;&#32;}
3385 
3386 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3387 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
3388 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;::</link>
3389 <link linkend="_classbasic__string">    _M_mutate</link>(size_type&#32;__pos,&#32;size_type&#32;__len1,&#32;size_type&#32;__len2)
3390 &#32;&#32;&#32;&#32;{
3391 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__old_size&#32;=&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>();
3392 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__new_size&#32;=&#32;__old_size&#32;+&#32;__len2&#32;-&#32;__len1;
3393 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__how_much&#32;=&#32;__old_size&#32;-&#32;__pos&#32;-&#32;__len1;
3394 
3395 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__new_size&#32;&gt;&#32;this-&gt;capacity()&#32;||&#32;_M_rep()-&gt;_M_is_shared())
3396 &#32;&#32;&#32;&#32;{
3397 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Must&#32;reallocate.</emphasis>
3398 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&#32;__a&#32;=&#32;get_allocator();
3399 &#32;&#32;&#32;&#32;&#32;&#32;_Rep*&#32;__r&#32;=&#32;_Rep::_S_create(__new_size,&#32;this-&gt;capacity(),&#32;__a);
3400 
3401 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pos)
3402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_copy(__r-&gt;_M_refdata(),&#32;_M_data(),&#32;__pos);
3403 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__how_much)
3404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_copy(__r-&gt;_M_refdata()&#32;+&#32;__pos&#32;+&#32;__len2,
3405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_data()&#32;+&#32;__pos&#32;+&#32;__len1,&#32;__how_much);
3406 
3407 &#32;&#32;&#32;&#32;&#32;&#32;_M_rep()-&gt;_M_dispose(__a);
3408 &#32;&#32;&#32;&#32;&#32;&#32;_M_data(__r-&gt;_M_refdata());
3409 &#32;&#32;&#32;&#32;}
3410 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__how_much&#32;&amp;&amp;&#32;__len1&#32;!=&#32;__len2)
3411 &#32;&#32;&#32;&#32;{
3412 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Work&#32;in-place.</emphasis>
3413 &#32;&#32;&#32;&#32;&#32;&#32;_M_move(_M_data()&#32;+&#32;__pos&#32;+&#32;__len2,
3414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_data()&#32;+&#32;__pos&#32;+&#32;__len1,&#32;__how_much);
3415 &#32;&#32;&#32;&#32;}
3416 &#32;&#32;&#32;&#32;&#32;&#32;_M_rep()-&gt;_M_set_length_and_sharable(__new_size);
3417 &#32;&#32;&#32;&#32;}
3418 
3419 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3420 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
3421 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;::</link>
3422 <link linkend="_classbasic__string">    reserve</link>(size_type&#32;__res)
3423 &#32;&#32;&#32;&#32;{
3424 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__capacity&#32;=&#32;capacity();
3425 
3426 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
3427 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2968.&#32;Inconsistencies&#32;between&#32;basic_string&#32;reserve&#32;and</emphasis>
3428 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;vector/unordered_map/unordered_set&#32;reserve&#32;functions</emphasis>
3429 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;P0966&#32;reserve&#32;should&#32;not&#32;shrink</emphasis>
3430 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__res&#32;&lt;=&#32;__capacity)
3431 &#32;&#32;&#32;&#32;{
3432 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_rep()-&gt;_M_is_shared())
3433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
3434 
3435 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;unshare,&#32;but&#32;keep&#32;same&#32;capacity</emphasis>
3436 &#32;&#32;&#32;&#32;&#32;&#32;__res&#32;=&#32;__capacity;
3437 &#32;&#32;&#32;&#32;}
3438 
3439 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&#32;__a&#32;=&#32;get_allocator();
3440 &#32;&#32;&#32;&#32;&#32;&#32;_CharT*&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;_M_rep()-&gt;_M_clone(__a,&#32;__res&#32;-&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>());
3441 &#32;&#32;&#32;&#32;&#32;&#32;_M_rep()-&gt;_M_dispose(__a);
3442 &#32;&#32;&#32;&#32;&#32;&#32;_M_data(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
3443 &#32;&#32;&#32;&#32;}
3444 
3445 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3446 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
3447 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;::</link>
3448 <link linkend="_classbasic__string">    swap</link>(<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__s)
3449 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT_IF(allocator_traits&lt;_Alloc&gt;::is_always_equal::value)
3450 &#32;&#32;&#32;&#32;{
3451 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_rep()-&gt;_M_is_leaked())
3452 &#32;&#32;&#32;&#32;_M_rep()-&gt;_M_set_sharable();
3453 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__s._M_rep()-&gt;_M_is_leaked())
3454 &#32;&#32;&#32;&#32;__s._M_rep()-&gt;_M_set_sharable();
3455 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;get_allocator()&#32;==&#32;__s.get_allocator())
3456 &#32;&#32;&#32;&#32;{
3457 &#32;&#32;&#32;&#32;&#32;&#32;_CharT*&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;_M_data();
3458 &#32;&#32;&#32;&#32;&#32;&#32;_M_data(__s._M_data());
3459 &#32;&#32;&#32;&#32;&#32;&#32;__s._M_data(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
3460 &#32;&#32;&#32;&#32;}
3461 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;code&#32;below&#32;can&#32;usually&#32;be&#32;optimized&#32;away.</emphasis>
3462 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3463 &#32;&#32;&#32;&#32;{
3464 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&#32;__tmp1(_M_ibegin(),&#32;_M_iend(),
3465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__s.get_allocator());
3466 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&#32;__tmp2(__s._M_ibegin(),&#32;__s._M_iend(),
3467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;get_allocator());
3468 &#32;&#32;&#32;&#32;&#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;__tmp2;
3469 &#32;&#32;&#32;&#32;&#32;&#32;__s&#32;=&#32;__tmp1;
3470 &#32;&#32;&#32;&#32;}
3471 &#32;&#32;&#32;&#32;}
3472 
3473 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3474 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;::_Rep</link>*
3475 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;::_Rep::</link>
3476 <link linkend="_classbasic__string">    _S_create</link>(size_type&#32;__capacity,&#32;size_type&#32;__old_capacity,
3477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__alloc)
3478 &#32;&#32;&#32;&#32;{
3479 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
3480 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;83.&#32;&#32;String::npos&#32;vs.&#32;string::max_size()</emphasis>
3481 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__capacity&#32;&gt;&#32;_S_max_size)
3482 &#32;&#32;&#32;&#32;__throw_length_error(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ad90b1fa000da1666f104c4dd9c0d7f9b">__N</link>(<emphasis role="stringliteral">&quot;basic_string::_S_create&quot;</emphasis>));
3483 
3484 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;standard&#32;places&#32;no&#32;restriction&#32;on&#32;allocating&#32;more&#32;memory</emphasis>
3485 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;than&#32;is&#32;strictly&#32;needed&#32;within&#32;this&#32;layer&#32;at&#32;the&#32;moment&#32;or&#32;as</emphasis>
3486 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;requested&#32;by&#32;an&#32;explicit&#32;application&#32;call&#32;to&#32;reserve(n).</emphasis>
3487 
3488 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Many&#32;malloc&#32;implementations&#32;perform&#32;quite&#32;poorly&#32;when&#32;an</emphasis>
3489 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;application&#32;attempts&#32;to&#32;allocate&#32;memory&#32;in&#32;a&#32;stepwise&#32;fashion</emphasis>
3490 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;growing&#32;each&#32;allocation&#32;size&#32;by&#32;only&#32;1&#32;char.&#32;&#32;Additionally,</emphasis>
3491 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;it&#32;makes&#32;little&#32;sense&#32;to&#32;allocate&#32;less&#32;linear&#32;memory&#32;than&#32;the</emphasis>
3492 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;natural&#32;blocking&#32;size&#32;of&#32;the&#32;malloc&#32;implementation.</emphasis>
3493 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Unfortunately,&#32;we&#32;would&#32;need&#32;a&#32;somewhat&#32;low-level&#32;calculation</emphasis>
3494 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;with&#32;tuned&#32;parameters&#32;to&#32;get&#32;this&#32;perfect&#32;for&#32;any&#32;particular</emphasis>
3495 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;malloc&#32;implementation.&#32;&#32;Fortunately,&#32;generalizations&#32;about</emphasis>
3496 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;common&#32;features&#32;seen&#32;among&#32;implementations&#32;seems&#32;to&#32;suffice.</emphasis>
3497 
3498 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__pagesize&#32;need&#32;not&#32;match&#32;the&#32;actual&#32;VM&#32;page&#32;size&#32;for&#32;good</emphasis>
3499 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;results&#32;in&#32;practice,&#32;thus&#32;we&#32;pick&#32;a&#32;common&#32;value&#32;on&#32;the&#32;low</emphasis>
3500 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;side.&#32;&#32;__malloc_header_size&#32;is&#32;an&#32;estimate&#32;of&#32;the&#32;amount&#32;of</emphasis>
3501 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;overhead&#32;per&#32;memory&#32;allocation&#32;(in&#32;practice&#32;seen&#32;N&#32;*&#32;sizeof</emphasis>
3502 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(void*)&#32;where&#32;N&#32;is&#32;0,&#32;2&#32;or&#32;4).&#32;&#32;According&#32;to&#32;folklore,</emphasis>
3503 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;picking&#32;this&#32;value&#32;on&#32;the&#32;high&#32;side&#32;is&#32;better&#32;than</emphasis>
3504 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;low-balling&#32;it&#32;(especially&#32;when&#32;this&#32;algorithm&#32;is&#32;used&#32;with</emphasis>
3505 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;malloc&#32;implementations&#32;that&#32;allocate&#32;memory&#32;blocks&#32;rounded&#32;up</emphasis>
3506 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;to&#32;a&#32;size&#32;which&#32;is&#32;a&#32;power&#32;of&#32;2).</emphasis>
3507 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__pagesize&#32;=&#32;4096;
3508 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__malloc_header_size&#32;=&#32;4&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">void</emphasis>*);
3509 
3510 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;below&#32;implements&#32;an&#32;exponential&#32;growth&#32;policy,&#32;necessary&#32;to</emphasis>
3511 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;meet&#32;amortized&#32;linear&#32;time&#32;requirements&#32;of&#32;the&#32;library:&#32;see</emphasis>
3512 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;http://gcc.gnu.org/ml/libstdc++/2001-07/msg00085.html.</emphasis>
3513 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;It&apos;s&#32;active&#32;for&#32;allocations&#32;requiring&#32;an&#32;amount&#32;of&#32;memory&#32;above</emphasis>
3514 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;system&#32;pagesize.&#32;This&#32;is&#32;consistent&#32;with&#32;the&#32;requirements&#32;of&#32;the</emphasis>
3515 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;standard:&#32;http://gcc.gnu.org/ml/libstdc++/2001-07/msg00130.html</emphasis>
3516 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__capacity&#32;&gt;&#32;__old_capacity&#32;&amp;&amp;&#32;__capacity&#32;&lt;&#32;2&#32;*&#32;__old_capacity)
3517 &#32;&#32;&#32;&#32;__capacity&#32;=&#32;2&#32;*&#32;__old_capacity;
3518 
3519 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NB:&#32;Need&#32;an&#32;array&#32;of&#32;char_type[__capacity],&#32;plus&#32;a&#32;terminating</emphasis>
3520 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;null&#32;char_type()&#32;element,&#32;plus&#32;enough&#32;for&#32;the&#32;_Rep&#32;data&#32;structure.</emphasis>
3521 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Whew.&#32;Seemingly&#32;so&#32;needy,&#32;yet&#32;so&#32;elemental.</emphasis>
3522 &#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__size&#32;=&#32;(__capacity&#32;+&#32;1)&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_CharT)&#32;+&#32;<emphasis role="keyword">sizeof</emphasis>(_Rep);
3523 
3524 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__adj_size&#32;=&#32;__size&#32;+&#32;__malloc_header_size;
3525 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__adj_size&#32;&gt;&#32;__pagesize&#32;&amp;&amp;&#32;__capacity&#32;&gt;&#32;__old_capacity)
3526 &#32;&#32;&#32;&#32;{
3527 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__extra&#32;=&#32;__pagesize&#32;-&#32;__adj_size&#32;%&#32;__pagesize;
3528 &#32;&#32;&#32;&#32;&#32;&#32;__capacity&#32;+=&#32;__extra&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_CharT);
3529 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Never&#32;allocate&#32;a&#32;string&#32;bigger&#32;than&#32;_S_max_size.</emphasis>
3530 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__capacity&#32;&gt;&#32;_S_max_size)
3531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__capacity&#32;=&#32;_S_max_size;
3532 &#32;&#32;&#32;&#32;&#32;&#32;__size&#32;=&#32;(__capacity&#32;+&#32;1)&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_CharT)&#32;+&#32;<emphasis role="keyword">sizeof</emphasis>(_Rep);
3533 &#32;&#32;&#32;&#32;}
3534 
3535 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NB:&#32;Might&#32;throw,&#32;but&#32;no&#32;worries&#32;about&#32;a&#32;leak,&#32;mate:&#32;_Rep()</emphasis>
3536 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;does&#32;not&#32;throw.</emphasis>
3537 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*&#32;__place&#32;=&#32;_Raw_bytes_alloc(__alloc).allocate(__size);
3538 &#32;&#32;&#32;&#32;&#32;&#32;_Rep&#32;*__p&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;(__place)&#32;_Rep;
3539 &#32;&#32;&#32;&#32;&#32;&#32;__p-&gt;_M_capacity&#32;=&#32;__capacity;
3540 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ABI&#32;compatibility&#32;-&#32;3.4.x&#32;set&#32;in&#32;_S_create&#32;both</emphasis>
3541 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_M_refcount&#32;and&#32;_M_length.&#32;&#32;All&#32;callers&#32;of&#32;_S_create</emphasis>
3542 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;in&#32;basic_string.tcc&#32;then&#32;set&#32;just&#32;_M_length.</emphasis>
3543 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;In&#32;4.0.x&#32;and&#32;later&#32;both&#32;_M_refcount&#32;and&#32;_M_length</emphasis>
3544 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;are&#32;initialized&#32;in&#32;the&#32;callers,&#32;unfortunately&#32;we&#32;can</emphasis>
3545 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;have&#32;3.4.x&#32;compiled&#32;code&#32;with&#32;_S_create&#32;callers&#32;inlined</emphasis>
3546 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;calling&#32;4.0.x+&#32;_S_create.</emphasis>
3547 &#32;&#32;&#32;&#32;&#32;&#32;__p-&gt;_M_set_sharable();
3548 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__p;
3549 &#32;&#32;&#32;&#32;}
3550 
3551 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3552 &#32;&#32;&#32;&#32;_CharT*
3553 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;::_Rep::</link>
3554 <link linkend="_classbasic__string">    _M_clone</link>(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__alloc,&#32;size_type&#32;__res)
3555 &#32;&#32;&#32;&#32;{
3556 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Requested&#32;capacity&#32;of&#32;the&#32;clone.</emphasis>
3557 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__requested_cap&#32;=&#32;this-&gt;_M_length&#32;+&#32;__res;
3558 &#32;&#32;&#32;&#32;&#32;&#32;_Rep*&#32;__r&#32;=&#32;_Rep::_S_create(__requested_cap,&#32;this-&gt;_M_capacity,
3559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__alloc);
3560 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;_M_length)
3561 &#32;&#32;&#32;&#32;_M_copy(__r-&gt;_M_refdata(),&#32;_M_refdata(),&#32;this-&gt;_M_length);
3562 
3563 &#32;&#32;&#32;&#32;&#32;&#32;__r-&gt;_M_set_length_and_sharable(this-&gt;_M_length);
3564 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r-&gt;_M_refdata();
3565 &#32;&#32;&#32;&#32;}
3566 
3567 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3568 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
3569 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;::</link>
3570 <link linkend="_classbasic__string">    resize</link>(size_type&#32;__n,&#32;_CharT&#32;__c)
3571 &#32;&#32;&#32;&#32;{
3572 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__size&#32;=&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>();
3573 &#32;&#32;&#32;&#32;&#32;&#32;_M_check_length(__size,&#32;__n,&#32;<emphasis role="stringliteral">&quot;basic_string::resize&quot;</emphasis>);
3574 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__size&#32;&lt;&#32;__n)
3575 &#32;&#32;&#32;&#32;this-&gt;append(__n&#32;-&#32;__size,&#32;__c);
3576 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&lt;&#32;__size)
3577 &#32;&#32;&#32;&#32;this-&gt;erase(__n);
3578 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;else&#32;nothing&#32;(in&#32;particular,&#32;avoid&#32;calling&#32;_M_mutate()&#32;unnecessarily.)</emphasis>
3579 &#32;&#32;&#32;&#32;}
3580 
3581 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3582 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
3583 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;
3584 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;::</link>
3585 <link linkend="_classbasic__string">      _M_replace_dispatch</link>(iterator&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;iterator&#32;__i2,&#32;_InputIterator&#32;__k1,
3586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator&#32;__k2,&#32;__false_type)
3587 &#32;&#32;&#32;&#32;&#32;&#32;{
3588 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&#32;__s(__k1,&#32;__k2);
3589 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__n1&#32;=&#32;__i2&#32;-&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>;
3590 &#32;&#32;&#32;&#32;_M_check_length(__n1,&#32;__s.size(),&#32;<emphasis role="stringliteral">&quot;basic_string::_M_replace_dispatch&quot;</emphasis>);
3591 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_replace_safe(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;-&#32;_M_ibegin(),&#32;__n1,&#32;__s._M_data(),
3592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__s.size());
3593 &#32;&#32;&#32;&#32;&#32;&#32;}
3594 
3595 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3596 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;
3597 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;::</link>
3598 <link linkend="_classbasic__string">    _M_replace_aux</link>(size_type&#32;__pos1,&#32;size_type&#32;__n1,&#32;size_type&#32;__n2,
3599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CharT&#32;__c)
3600 &#32;&#32;&#32;&#32;{
3601 &#32;&#32;&#32;&#32;&#32;&#32;_M_check_length(__n1,&#32;__n2,&#32;<emphasis role="stringliteral">&quot;basic_string::_M_replace_aux&quot;</emphasis>);
3602 &#32;&#32;&#32;&#32;&#32;&#32;_M_mutate(__pos1,&#32;__n1,&#32;__n2);
3603 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n2)
3604 &#32;&#32;&#32;&#32;_M_assign(_M_data()&#32;+&#32;__pos1,&#32;__n2,&#32;__c);
3605 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
3606 &#32;&#32;&#32;&#32;}
3607 
3608 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3609 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;
3610 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;::</link>
3611 <link linkend="_classbasic__string">    _M_replace_safe</link>(size_type&#32;__pos1,&#32;size_type&#32;__n1,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,
3612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n2)
3613 &#32;&#32;&#32;&#32;{
3614 &#32;&#32;&#32;&#32;&#32;&#32;_M_mutate(__pos1,&#32;__n1,&#32;__n2);
3615 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n2)
3616 &#32;&#32;&#32;&#32;_M_copy(_M_data()&#32;+&#32;__pos1,&#32;__s,&#32;__n2);
3617 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
3618 &#32;&#32;&#32;&#32;}
3619 
3620 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3621 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
3622 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;::</link>
3623 <link linkend="_classbasic__string">    reserve</link>()
3624 &#32;&#32;&#32;&#32;{
3625 <emphasis role="preprocessor">#if&#32;__cpp_exceptions</emphasis>
3626 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_namespacelength">length</link>()&#32;&lt;&#32;capacity()&#32;||&#32;_M_rep()-&gt;_M_is_shared())
3627 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>
3628 &#32;&#32;&#32;&#32;&#32;&#32;{
3629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&#32;__a&#32;=&#32;get_allocator();
3630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CharT*&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;_M_rep()-&gt;_M_clone(__a);
3631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_rep()-&gt;_M_dispose(__a);
3632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_data(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
3633 &#32;&#32;&#32;&#32;&#32;&#32;}
3634 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;__cxxabiv1::__forced_unwind&amp;)
3635 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">throw</emphasis>;&#32;}
3636 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(...)
3637 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">/*&#32;swallow&#32;the&#32;exception&#32;*/</emphasis>&#32;}
3638 <emphasis role="preprocessor">#endif</emphasis>
3639 &#32;&#32;&#32;&#32;}
3640 
3641 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3642 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;::size_type</link>
3643 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;::</link>
3644 <link linkend="_classbasic__string">    copy</link>(_CharT*&#32;__s,&#32;size_type&#32;__n,&#32;size_type&#32;__pos)<emphasis role="keyword">&#32;const</emphasis>
3645 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
3646 &#32;&#32;&#32;&#32;&#32;&#32;_M_check(__pos,&#32;<emphasis role="stringliteral">&quot;basic_string::copy&quot;</emphasis>);
3647 &#32;&#32;&#32;&#32;&#32;&#32;__n&#32;=&#32;_M_limit(__pos,&#32;__n);
3648 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a91cfe307287e81114000d301d59830e0">__glibcxx_requires_string_len</link>(__s,&#32;__n);
3649 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n)
3650 &#32;&#32;&#32;&#32;_M_copy(__s,&#32;_M_data()&#32;+&#32;__pos,&#32;__n);
3651 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;21.3.5.7&#32;par&#32;3:&#32;do&#32;not&#32;append&#32;null.&#32;&#32;(good.)</emphasis>
3652 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__n;
3653 &#32;&#32;&#32;&#32;}
3654 _GLIBCXX_END_NAMESPACE_VERSION
3655 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
3656 <emphasis role="preprocessor">#endif&#32;&#32;</emphasis><emphasis role="comment">//&#32;!&#32;_GLIBCXX_USE_CXX11_ABI</emphasis>
3657 <emphasis role="preprocessor">#endif&#32;&#32;</emphasis><emphasis role="comment">//&#32;_COW_STRING_H</emphasis>
</programlisting></section>
