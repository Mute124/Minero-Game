<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2bits_2random_8h_source" xml:lang="en-US">
<title>random.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/bits/random.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;random&#32;number&#32;generation&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2009-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
31 <emphasis role="preprocessor">#ifndef&#32;_RANDOM_H</emphasis>
32 <emphasis role="preprocessor">#define&#32;_RANDOM_H&#32;1</emphasis>
33 
34 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
35 <emphasis role="preprocessor">#include&#32;&lt;bits/uniform_int_dist.h&gt;</emphasis>
36 
37 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
38 {
39 _GLIBCXX_BEGIN_NAMESPACE_VERSION
40 
41 &#32;&#32;<emphasis role="comment">//&#32;[26.4]&#32;Random&#32;number&#32;generation</emphasis>
42 
51 &#32;&#32;<emphasis role="comment">//&#32;std::uniform_random_bit_generator&#32;is&#32;defined&#32;in&#32;&lt;bits/uniform_int_dist.h&gt;</emphasis>
52 
58 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__bits,
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
60 &#32;&#32;&#32;&#32;_RealType
61 &#32;&#32;&#32;&#32;generate_canonical(_UniformRandomNumberGenerator&amp;&#32;__g);
62 
64 &#32;&#32;<emphasis role="comment">//&#32;Implementation-space&#32;details.</emphasis>
65 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>__detail
66 &#32;&#32;{
67 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UIntType,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__w,
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;=&#32;__w&#32;&lt;&#32;static_cast&lt;size_t&gt;
69 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(std::numeric_limits&lt;_UIntType&gt;::digits)&gt;
70 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Shift
71 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_UIntType&#32;__value&#32;=&#32;0;&#32;};
72 
73 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UIntType,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__w&gt;
74 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Shift&lt;_UIntType,&#32;__w,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
75 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_UIntType&#32;__value&#32;=&#32;_UIntType(1)&#32;&lt;&lt;&#32;__w;&#32;};
76 
77 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">int</emphasis>&#32;__s,
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;__which&#32;=&#32;((__s&#32;&lt;=&#32;__CHAR_BIT__&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>&#32;(int))
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;(__s&#32;&lt;=&#32;__CHAR_BIT__&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>&#32;(long))
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;(__s&#32;&lt;=&#32;__CHAR_BIT__&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>&#32;(<emphasis role="keywordtype">long</emphasis>&#32;long))
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;assume&#32;long&#32;long&#32;no&#32;bigger&#32;than&#32;__int128&#32;*/</emphasis>
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;(__s&#32;&lt;=&#32;128))&gt;
83 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Select_uint_least_t
84 &#32;&#32;&#32;&#32;&#32;&#32;{
85 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__which&#32;&lt;&#32;0,&#32;<emphasis role="comment">/*&#32;needs&#32;to&#32;be&#32;dependent&#32;*/</emphasis>
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;sorry,&#32;would&#32;be&#32;too&#32;much&#32;trouble&#32;for&#32;a&#32;slow&#32;result&quot;</emphasis>);
87 &#32;&#32;&#32;&#32;&#32;&#32;};
88 
89 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">int</emphasis>&#32;__s&gt;
90 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Select_uint_least_t&lt;__s,&#32;4&gt;
91 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;int;&#32;};
92 
93 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">int</emphasis>&#32;__s&gt;
94 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Select_uint_least_t&lt;__s,&#32;3&gt;
95 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;long;&#32;};
96 
97 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">int</emphasis>&#32;__s&gt;
98 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Select_uint_least_t&lt;__s,&#32;2&gt;
99 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;long;&#32;};
100 
101 <emphasis role="preprocessor">#if&#32;__SIZEOF_INT128__&#32;&gt;&#32;__SIZEOF_LONG_LONG__</emphasis>
102 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">int</emphasis>&#32;__s&gt;
103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Select_uint_least_t&lt;__s,&#32;1&gt;
104 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__extension__&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;__int128;&#32;};
105 <emphasis role="preprocessor">#endif</emphasis>
106 
107 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assume&#32;a&#32;!=&#32;0,&#32;a&#32;&lt;&#32;m,&#32;c&#32;&lt;&#32;m,&#32;x&#32;&lt;&#32;m.</emphasis>
108 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Tp&#32;__m,&#32;_Tp&#32;__a,&#32;_Tp&#32;__c,
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__big_enough&#32;=&#32;(!(__m&#32;&amp;&#32;(__m&#32;-&#32;1))
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;(_Tp(-1)&#32;-&#32;__c)&#32;/&#32;__a&#32;&gt;=&#32;__m&#32;-&#32;1),
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__schrage_ok&#32;=&#32;__m&#32;%&#32;__a&#32;&lt;&#32;__m&#32;/&#32;__a&gt;
112 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Mod
113 &#32;&#32;&#32;&#32;&#32;&#32;{
114 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Tp
115 &#32;&#32;&#32;&#32;__calc(_Tp&#32;__x)
116 &#32;&#32;&#32;&#32;{
117 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp2
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Select_uint_least_t&lt;std::__lg(__a)
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;std::__lg(__m)&#32;+&#32;2&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
120 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>((_Tp2(__a)&#32;*&#32;__x&#32;+&#32;__c)&#32;%&#32;__m);
121 &#32;&#32;&#32;&#32;}
122 &#32;&#32;&#32;&#32;&#32;&#32;};
123 
124 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Schrage.</emphasis>
125 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Tp&#32;__m,&#32;_Tp&#32;__a,&#32;_Tp&#32;__c&gt;
126 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Mod&lt;_Tp,&#32;__m,&#32;__a,&#32;__c,&#32;false,&#32;true&gt;
127 &#32;&#32;&#32;&#32;&#32;&#32;{
128 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Tp
129 &#32;&#32;&#32;&#32;__calc(_Tp&#32;__x);
130 &#32;&#32;&#32;&#32;&#32;&#32;};
131 
132 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Special&#32;cases:</emphasis>
133 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-&#32;for&#32;m&#32;==&#32;2^n&#32;or&#32;m&#32;==&#32;0,&#32;unsigned&#32;integer&#32;overflow&#32;is&#32;safe.</emphasis>
134 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-&#32;a&#32;*&#32;(m&#32;-&#32;1)&#32;+&#32;c&#32;fits&#32;in&#32;_Tp,&#32;there&#32;is&#32;no&#32;overflow.</emphasis>
135 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Tp&#32;__m,&#32;_Tp&#32;__a,&#32;_Tp&#32;__c,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__s&gt;
136 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Mod&lt;_Tp,&#32;__m,&#32;__a,&#32;__c,&#32;true,&#32;__s&gt;
137 &#32;&#32;&#32;&#32;&#32;&#32;{
138 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Tp
139 &#32;&#32;&#32;&#32;__calc(_Tp&#32;__x)
140 &#32;&#32;&#32;&#32;{
141 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;__res&#32;=&#32;__a&#32;*&#32;__x&#32;+&#32;__c;
142 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__m)
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__res&#32;%=&#32;__m;
144 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__res;
145 &#32;&#32;&#32;&#32;}
146 &#32;&#32;&#32;&#32;&#32;&#32;};
147 
148 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Tp&#32;__m,&#32;_Tp&#32;__a&#32;=&#32;1,&#32;_Tp&#32;__c&#32;=&#32;0&gt;
149 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_Tp
150 &#32;&#32;&#32;&#32;&#32;&#32;__mod(_Tp&#32;__x)
151 &#32;&#32;&#32;&#32;&#32;&#32;{
152 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;(__a&#32;==&#32;0)
153 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;__c;
154 &#32;&#32;&#32;&#32;else
155 &#32;&#32;&#32;&#32;&#32;&#32;{
156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_Mod&#32;must&#32;not&#32;be&#32;instantiated&#32;with&#32;a&#32;==&#32;0</emphasis>
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&#32;__a1&#32;=&#32;__a&#32;?&#32;__a&#32;:&#32;1;
158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Mod&lt;_Tp,&#32;__m,&#32;__a1,&#32;__c&gt;::__calc(__x);
159 &#32;&#32;&#32;&#32;&#32;&#32;}
160 &#32;&#32;&#32;&#32;&#32;&#32;}
161 
162 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
163 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;An&#32;adaptor&#32;class&#32;for&#32;converting&#32;the&#32;output&#32;of&#32;any&#32;Generator&#32;into</emphasis>
164 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;the&#32;input&#32;for&#32;a&#32;specific&#32;Distribution.</emphasis>
165 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
166 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Engine,&#32;<emphasis role="keyword">typename</emphasis>&#32;_DInputType&gt;
167 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Adaptor
168 &#32;&#32;&#32;&#32;&#32;&#32;{
169 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_floating_point&lt;_DInputType&gt;::value,
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;template&#32;argument&#32;must&#32;be&#32;a&#32;floating&#32;point&#32;type&quot;</emphasis>);
171 
172 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
173 &#32;&#32;&#32;&#32;_Adaptor(_Engine&amp;&#32;__g)
174 &#32;&#32;&#32;&#32;:&#32;_M_g(__g)&#32;{&#32;}
175 
176 &#32;&#32;&#32;&#32;_DInputType
177 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>()<emphasis role="keyword">&#32;const</emphasis>
178 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_DInputType(0);&#32;}
179 
180 &#32;&#32;&#32;&#32;_DInputType
181 &#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>()<emphasis role="keyword">&#32;const</emphasis>
182 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_DInputType(1);&#32;}
183 
184 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
185 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Converts&#32;a&#32;value&#32;generated&#32;by&#32;the&#32;adapted&#32;random&#32;number&#32;generator</emphasis>
186 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;into&#32;a&#32;value&#32;in&#32;the&#32;input&#32;domain&#32;for&#32;the&#32;dependent&#32;random&#32;number</emphasis>
187 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;distribution.</emphasis>
188 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
189 &#32;&#32;&#32;&#32;_DInputType
190 &#32;&#32;&#32;&#32;operator()()
191 &#32;&#32;&#32;&#32;{
192 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::generate_canonical&lt;_DInputType,
193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::numeric_limits&lt;_DInputType&gt;::digits,
194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Engine&gt;(_M_g);
195 &#32;&#32;&#32;&#32;}
196 
197 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
198 &#32;&#32;&#32;&#32;_Engine&amp;&#32;_M_g;
199 &#32;&#32;&#32;&#32;&#32;&#32;};
200 
201 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Sseq&gt;
202 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__seed_seq_generate_t&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(
203 &#32;&#32;&#32;&#32;&#32;&#32;std::declval&lt;_Sseq&amp;&gt;().generate(std::declval&lt;uint_least32_t*&gt;(),
204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::declval&lt;uint_least32_t*&gt;()));
205 
206 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Detect&#32;whether&#32;_Sseq&#32;is&#32;a&#32;valid&#32;seed&#32;sequence&#32;for</emphasis>
207 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;a&#32;random&#32;number&#32;engine&#32;_Engine&#32;with&#32;result&#32;type&#32;_Res.</emphasis>
208 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Sseq,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Engine,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Res,
209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_GenerateCheck&#32;=&#32;__seed_seq_generate_t&lt;_Sseq&gt;&gt;
210 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__is_seed_seq&#32;=&#32;__and_&lt;
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__not_&lt;is_same&lt;__remove_cvref_t&lt;_Sseq&gt;,&#32;_Engine&gt;&gt;,
212 &#32;&#32;&#32;&#32;is_unsigned&lt;typename&#32;_Sseq::result_type&gt;,
213 &#32;&#32;&#32;&#32;__not_&lt;is_convertible&lt;_Sseq,&#32;_Res&gt;&gt;
214 &#32;&#32;&#32;&#32;&#32;&#32;&gt;;
215 
216 &#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;__detail</emphasis>
218 
257 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UIntType,&#32;_UIntType&#32;__a,&#32;_UIntType&#32;__c,&#32;_UIntType&#32;__m&gt;
258 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>linear_congruential_engine
259 &#32;&#32;&#32;&#32;{
260 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_unsigned&lt;_UIntType&gt;::value,
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;result_type&#32;must&#32;be&#32;an&#32;unsigned&#32;integral&#32;type&quot;</emphasis>);
262 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__m&#32;==&#32;0<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>&#32;||&#32;(__a&#32;&lt;&#32;__m&#32;&amp;&amp;&#32;__c&#32;&lt;&#32;__m),
263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;template&#32;argument&#32;substituting&#32;__m&#32;out&#32;of&#32;bounds&quot;</emphasis>);
264 
265 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Sseq&gt;
266 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_If_seed_seq&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;enable_if&lt;__detail::__is_seed_seq&lt;
267 &#32;&#32;&#32;&#32;&#32;&#32;_Sseq,&#32;linear_congruential_engine,&#32;_UIntType&gt;<link linkend="_classvalue">::value</link>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
268 
269 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
271 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_UIntType&#32;result_type;
272 
274 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;result_type&#32;multiplier&#32;&#32;&#32;=&#32;__a;
276 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;result_type&#32;increment&#32;&#32;&#32;&#32;=&#32;__c;
278 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;result_type&#32;modulus&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__m;
279 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;result_type&#32;default_seed&#32;=&#32;1u;
280 
285 &#32;&#32;&#32;&#32;&#32;&#32;linear_congruential_engine()&#32;:&#32;linear_congruential_engine(default_seed)
286 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
287 
295 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
296 &#32;&#32;&#32;&#32;&#32;&#32;linear_congruential_engine(result_type&#32;__s)
297 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link>(__s);&#32;}
298 
305 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Sseq,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_If_seed_seq&lt;_Sseq&gt;&gt;
306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;linear_congruential_engine(_Sseq&amp;&#32;__q)
308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link>(__q);&#32;}
309 
316 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
317 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link>(result_type&#32;__s&#32;=&#32;default_seed);
318 
326 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Sseq&gt;
327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_If_seed_seq&lt;_Sseq&gt;
328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link>(_Sseq&amp;&#32;__q);
329 
336 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;result_type
337 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>()
338 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__c&#32;==&#32;0<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>&#32;?&#32;1u&#32;:&#32;0<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>;&#32;}
339 
343 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;result_type
344 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>()
345 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__m&#32;-&#32;1u;&#32;}
346 
350 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
351 &#32;&#32;&#32;&#32;&#32;&#32;discard(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;__z)
352 &#32;&#32;&#32;&#32;&#32;&#32;{
353 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__z&#32;!=&#32;0ULL;&#32;--__z)
354 &#32;&#32;&#32;&#32;&#32;&#32;(*<emphasis role="keyword">this</emphasis>)();
355 &#32;&#32;&#32;&#32;&#32;&#32;}
356 
360 &#32;&#32;&#32;&#32;&#32;&#32;result_type
361 &#32;&#32;&#32;&#32;&#32;&#32;operator()()
362 &#32;&#32;&#32;&#32;&#32;&#32;{
363 &#32;&#32;&#32;&#32;_M_x&#32;=&#32;__detail::__mod&lt;_UIntType,&#32;__m,&#32;__a,&#32;__c&gt;(_M_x);
364 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_x;
365 &#32;&#32;&#32;&#32;&#32;&#32;}
366 
378 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
379 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;linear_congruential_engine&amp;&#32;__lhs,
380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;linear_congruential_engine&amp;&#32;__rhs)
381 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs._M_x&#32;==&#32;__rhs._M_x;&#32;}
382 
391 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UIntType1,&#32;_UIntType1&#32;__a1,&#32;_UIntType1&#32;__c1,
392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UIntType1&#32;__m1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
393 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;
394 &#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__os,
395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::linear_congruential_engine&lt;_UIntType1,
396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a1,&#32;__c1,&#32;__m1&gt;&amp;&#32;__lcr);
397 
411 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UIntType1,&#32;_UIntType1&#32;__a1,&#32;_UIntType1&#32;__c1,
412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UIntType1&#32;__m1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
413 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;
414 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a4560e59cc4f5ddaf0ec23d1a7050b611">operator&gt;&gt;</link>(std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__is,
415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::linear_congruential_engine&lt;_UIntType1,&#32;__a1,
416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__c1,&#32;__m1&gt;&amp;&#32;__lcr);
417 
418 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
419 &#32;&#32;&#32;&#32;&#32;&#32;_UIntType&#32;_M_x;
420 &#32;&#32;&#32;&#32;};
421 
433 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UIntType,&#32;_UIntType&#32;__a,&#32;_UIntType&#32;__c,&#32;_UIntType&#32;__m&gt;
434 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
435 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;std::linear_congruential_engine&lt;_UIntType,&#32;__a,
436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__c,&#32;__m&gt;&amp;&#32;__lhs,
437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::linear_congruential_engine&lt;_UIntType,&#32;__a,
438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__c,&#32;__m&gt;&amp;&#32;__rhs)
439 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__lhs&#32;==&#32;__rhs);&#32;}
440 
441 
470 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UIntType,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__w,
471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__m,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__r,
472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_UIntType&#32;__a,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__u,&#32;_UIntType&#32;__d,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__s,
473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_UIntType&#32;__b,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__t,
474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_UIntType&#32;__c,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__l,&#32;_UIntType&#32;__f&gt;
475 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>mersenne_twister_engine
476 &#32;&#32;&#32;&#32;{
477 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_unsigned&lt;_UIntType&gt;::value,
478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;result_type&#32;must&#32;be&#32;an&#32;unsigned&#32;integral&#32;type&quot;</emphasis>);
479 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(1u&#32;&lt;=&#32;__m&#32;&amp;&amp;&#32;__m&#32;&lt;=&#32;__n,
480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;template&#32;argument&#32;substituting&#32;__m&#32;out&#32;of&#32;bounds&quot;</emphasis>);
481 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__r&#32;&lt;=&#32;__w,&#32;<emphasis role="stringliteral">&quot;template&#32;argument&#32;substituting&#32;&quot;</emphasis>
482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;__r&#32;out&#32;of&#32;bound&quot;</emphasis>);
483 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__u&#32;&lt;=&#32;__w,&#32;<emphasis role="stringliteral">&quot;template&#32;argument&#32;substituting&#32;&quot;</emphasis>
484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;__u&#32;out&#32;of&#32;bound&quot;</emphasis>);
485 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__s&#32;&lt;=&#32;__w,&#32;<emphasis role="stringliteral">&quot;template&#32;argument&#32;substituting&#32;&quot;</emphasis>
486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;__s&#32;out&#32;of&#32;bound&quot;</emphasis>);
487 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__t&#32;&lt;=&#32;__w,&#32;<emphasis role="stringliteral">&quot;template&#32;argument&#32;substituting&#32;&quot;</emphasis>
488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;__t&#32;out&#32;of&#32;bound&quot;</emphasis>);
489 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__l&#32;&lt;=&#32;__w,&#32;<emphasis role="stringliteral">&quot;template&#32;argument&#32;substituting&#32;&quot;</emphasis>
490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;__l&#32;out&#32;of&#32;bound&quot;</emphasis>);
491 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__w&#32;&lt;=&#32;std::numeric_limits&lt;_UIntType&gt;::digits,
492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;template&#32;argument&#32;substituting&#32;__w&#32;out&#32;of&#32;bound&quot;</emphasis>);
493 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__a&#32;&lt;=&#32;(__detail::_Shift&lt;_UIntType,&#32;__w&gt;::__value&#32;-&#32;1),
494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;template&#32;argument&#32;substituting&#32;__a&#32;out&#32;of&#32;bound&quot;</emphasis>);
495 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__b&#32;&lt;=&#32;(__detail::_Shift&lt;_UIntType,&#32;__w&gt;::__value&#32;-&#32;1),
496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;template&#32;argument&#32;substituting&#32;__b&#32;out&#32;of&#32;bound&quot;</emphasis>);
497 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__c&#32;&lt;=&#32;(__detail::_Shift&lt;_UIntType,&#32;__w&gt;::__value&#32;-&#32;1),
498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;template&#32;argument&#32;substituting&#32;__c&#32;out&#32;of&#32;bound&quot;</emphasis>);
499 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__d&#32;&lt;=&#32;(__detail::_Shift&lt;_UIntType,&#32;__w&gt;::__value&#32;-&#32;1),
500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;template&#32;argument&#32;substituting&#32;__d&#32;out&#32;of&#32;bound&quot;</emphasis>);
501 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__f&#32;&lt;=&#32;(__detail::_Shift&lt;_UIntType,&#32;__w&gt;::__value&#32;-&#32;1),
502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;template&#32;argument&#32;substituting&#32;__f&#32;out&#32;of&#32;bound&quot;</emphasis>);
503 
504 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Sseq&gt;
505 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_If_seed_seq&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;enable_if&lt;__detail::__is_seed_seq&lt;
506 &#32;&#32;&#32;&#32;&#32;&#32;_Sseq,&#32;mersenne_twister_engine,&#32;_UIntType&gt;<link linkend="_classvalue">::value</link>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
507 
508 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
510 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_UIntType&#32;result_type;
511 
512 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;parameter&#32;values</emphasis>
513 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;word_size&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__w;
514 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;state_size&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__n;
515 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;shift_size&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__m;
516 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;mask_bits&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__r;
517 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;result_type&#32;xor_mask&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__a;
518 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;tempering_u&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__u;
519 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;result_type&#32;tempering_d&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__d;
520 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;tempering_s&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__s;
521 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;result_type&#32;tempering_b&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__b;
522 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;tempering_t&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__t;
523 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;result_type&#32;tempering_c&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__c;
524 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;tempering_l&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__l;
525 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;result_type&#32;initialization_multiplier&#32;=&#32;__f;
526 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;result_type&#32;default_seed&#32;=&#32;5489u;
527 
528 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;constructors&#32;and&#32;member&#32;functions</emphasis>
529 
530 &#32;&#32;&#32;&#32;&#32;&#32;mersenne_twister_engine()&#32;:&#32;mersenne_twister_engine(default_seed)&#32;{&#32;}
531 
532 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
533 &#32;&#32;&#32;&#32;&#32;&#32;mersenne_twister_engine(result_type&#32;__sd)
534 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link>(__sd);&#32;}
535 
542 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Sseq,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_If_seed_seq&lt;_Sseq&gt;&gt;
543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mersenne_twister_engine(_Sseq&amp;&#32;__q)
545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link>(__q);&#32;}
546 
547 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
548 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link>(result_type&#32;__sd&#32;=&#32;default_seed);
549 
550 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Sseq&gt;
551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_If_seed_seq&lt;_Sseq&gt;
552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link>(_Sseq&amp;&#32;__q);
553 
557 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;result_type
558 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>()
559 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;}
560 
564 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;result_type
565 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>()
566 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__detail::_Shift&lt;_UIntType,&#32;__w&gt;::__value&#32;-&#32;1;&#32;}
567 
571 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
572 &#32;&#32;&#32;&#32;&#32;&#32;discard(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;__z);
573 
574 &#32;&#32;&#32;&#32;&#32;&#32;result_type
575 &#32;&#32;&#32;&#32;&#32;&#32;operator()();
576 
589 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
590 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;mersenne_twister_engine&amp;&#32;__lhs,
591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;mersenne_twister_engine&amp;&#32;__rhs)
592 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_namespacestd_1a94ada91841cca21a2327b0235f9a82cd">std::equal</link>(__lhs._M_x,&#32;__lhs._M_x&#32;+&#32;state_size,&#32;__rhs._M_x)
593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__lhs._M_p&#32;==&#32;__rhs._M_p);&#32;}
594 
607 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UIntType1,
608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1ae699a9d1d9f4fd4bc4a4b4b7127a5510">__w1</link>,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n1,
609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__m1,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__r1,
610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UIntType1&#32;__a1,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__u1,
611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UIntType1&#32;__d1,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__s1,
612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UIntType1&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a0fb905920e6321601ec1c0650ce4944d">__b1</link>,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__t1,
613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UIntType1&#32;__c1,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__l1,&#32;_UIntType1&#32;__f1,
614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
615 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;
616 &#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__os,
617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::mersenne_twister_engine&lt;_UIntType1,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1ae699a9d1d9f4fd4bc4a4b4b7127a5510">__w1</link>,&#32;__n1,
618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m1,&#32;__r1,&#32;__a1,&#32;__u1,&#32;__d1,&#32;__s1,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a0fb905920e6321601ec1c0650ce4944d">__b1</link>,&#32;__t1,&#32;__c1,
619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__l1,&#32;__f1&gt;&amp;&#32;__x);
620 
633 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UIntType1,
634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1ae699a9d1d9f4fd4bc4a4b4b7127a5510">__w1</link>,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n1,
635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__m1,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__r1,
636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UIntType1&#32;__a1,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__u1,
637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UIntType1&#32;__d1,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__s1,
638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UIntType1&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a0fb905920e6321601ec1c0650ce4944d">__b1</link>,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__t1,
639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UIntType1&#32;__c1,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__l1,&#32;_UIntType1&#32;__f1,
640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
641 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;
642 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a4560e59cc4f5ddaf0ec23d1a7050b611">operator&gt;&gt;</link>(std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__is,
643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::mersenne_twister_engine&lt;_UIntType1,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1ae699a9d1d9f4fd4bc4a4b4b7127a5510">__w1</link>,&#32;__n1,&#32;__m1,
644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__r1,&#32;__a1,&#32;__u1,&#32;__d1,&#32;__s1,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a0fb905920e6321601ec1c0650ce4944d">__b1</link>,&#32;__t1,&#32;__c1,
645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__l1,&#32;__f1&gt;&amp;&#32;__x);
646 
647 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
648 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_gen_rand();
649 
650 &#32;&#32;&#32;&#32;&#32;&#32;_UIntType&#32;_M_x[state_size];
651 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;_M_p;
652 &#32;&#32;&#32;&#32;};
653 
666 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UIntType,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__w,
667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__m,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__r,
668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_UIntType&#32;__a,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__u,&#32;_UIntType&#32;__d,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__s,
669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_UIntType&#32;__b,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__t,
670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_UIntType&#32;__c,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__l,&#32;_UIntType&#32;__f&gt;
671 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
672 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;std::mersenne_twister_engine&lt;_UIntType,&#32;__w,&#32;__n,&#32;__m,
673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__r,&#32;__a,&#32;__u,&#32;__d,&#32;__s,&#32;__b,&#32;__t,&#32;__c,&#32;__l,&#32;__f&gt;&amp;&#32;__lhs,
674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::mersenne_twister_engine&lt;_UIntType,&#32;__w,&#32;__n,&#32;__m,
675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__r,&#32;__a,&#32;__u,&#32;__d,&#32;__s,&#32;__b,&#32;__t,&#32;__c,&#32;__l,&#32;__f&gt;&amp;&#32;__rhs)
676 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__lhs&#32;==&#32;__rhs);&#32;}
677 
678 
694 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UIntType,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__w,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__r&gt;
695 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>subtract_with_carry_engine
696 &#32;&#32;&#32;&#32;{
697 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_unsigned&lt;_UIntType&gt;::value,
698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;result_type&#32;must&#32;be&#32;an&#32;unsigned&#32;integral&#32;type&quot;</emphasis>);
699 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(0<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>&#32;&lt;&#32;__s&#32;&amp;&amp;&#32;__s&#32;&lt;&#32;__r,
700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;0&#32;&lt;&#32;s&#32;&lt;&#32;r&quot;</emphasis>);
701 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(0u&#32;&lt;&#32;__w&#32;&amp;&amp;&#32;__w&#32;&lt;=&#32;std::numeric_limits&lt;_UIntType&gt;::digits,
702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;template&#32;argument&#32;substituting&#32;__w&#32;out&#32;of&#32;bounds&quot;</emphasis>);
703 
704 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Sseq&gt;
705 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_If_seed_seq&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;enable_if&lt;__detail::__is_seed_seq&lt;
706 &#32;&#32;&#32;&#32;&#32;&#32;_Sseq,&#32;subtract_with_carry_engine,&#32;_UIntType&gt;<link linkend="_classvalue">::value</link>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
707 
708 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
710 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_UIntType&#32;result_type;
711 
712 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;parameter&#32;values</emphasis>
713 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;word_size&#32;&#32;&#32;&#32;=&#32;__w;
714 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;short_lag&#32;&#32;&#32;&#32;=&#32;__s;
715 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;long_lag&#32;&#32;&#32;&#32;&#32;=&#32;__r;
716 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;result_type&#32;default_seed&#32;=&#32;19780503u;
717 
718 &#32;&#32;&#32;&#32;&#32;&#32;subtract_with_carry_engine()&#32;:&#32;subtract_with_carry_engine(default_seed)
719 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
720 
725 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
726 &#32;&#32;&#32;&#32;&#32;&#32;subtract_with_carry_engine(result_type&#32;__sd)
727 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link>(__sd);&#32;}
728 
735 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Sseq,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_If_seed_seq&lt;_Sseq&gt;&gt;
736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;subtract_with_carry_engine(_Sseq&amp;&#32;__q)
738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link>(__q);&#32;}
739 
752 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
753 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link>(result_type&#32;__sd&#32;=&#32;default_seed);
754 
759 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Sseq&gt;
760 &#32;&#32;&#32;&#32;_If_seed_seq&lt;_Sseq&gt;
761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link>(_Sseq&amp;&#32;__q);
762 
767 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;result_type
768 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>()
769 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;}
770 
775 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;result_type
776 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>()
777 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__detail::_Shift&lt;_UIntType,&#32;__w&gt;::__value&#32;-&#32;1;&#32;}
778 
782 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
783 &#32;&#32;&#32;&#32;&#32;&#32;discard(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;__z)
784 &#32;&#32;&#32;&#32;&#32;&#32;{
785 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__z&#32;!=&#32;0ULL;&#32;--__z)
786 &#32;&#32;&#32;&#32;&#32;&#32;(*<emphasis role="keyword">this</emphasis>)();
787 &#32;&#32;&#32;&#32;&#32;&#32;}
788 
792 &#32;&#32;&#32;&#32;&#32;&#32;result_type
793 &#32;&#32;&#32;&#32;&#32;&#32;operator()();
794 
807 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
808 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;subtract_with_carry_engine&amp;&#32;__lhs,
809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;subtract_with_carry_engine&amp;&#32;__rhs)
810 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_namespacestd_1a94ada91841cca21a2327b0235f9a82cd">std::equal</link>(__lhs._M_x,&#32;__lhs._M_x&#32;+&#32;long_lag,&#32;__rhs._M_x)
811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__lhs._M_carry&#32;==&#32;__rhs._M_carry
812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__lhs._M_p&#32;==&#32;__rhs._M_p);&#32;}
813 
826 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UIntType1,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1ae699a9d1d9f4fd4bc4a4b4b7127a5510">__w1</link>,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__s1,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__r1,
827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
828 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;
829 &#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__os,
830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::subtract_with_carry_engine&lt;_UIntType1,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1ae699a9d1d9f4fd4bc4a4b4b7127a5510">__w1</link>,
831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__s1,&#32;__r1&gt;&amp;&#32;__x);
832 
845 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UIntType1,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1ae699a9d1d9f4fd4bc4a4b4b7127a5510">__w1</link>,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__s1,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__r1,
846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
847 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;
848 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a4560e59cc4f5ddaf0ec23d1a7050b611">operator&gt;&gt;</link>(std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__is,
849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::subtract_with_carry_engine&lt;_UIntType1,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1ae699a9d1d9f4fd4bc4a4b4b7127a5510">__w1</link>,
850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__s1,&#32;__r1&gt;&amp;&#32;__x);
851 
852 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
854 &#32;&#32;&#32;&#32;&#32;&#32;_UIntType&#32;&#32;_M_x[long_lag];
855 &#32;&#32;&#32;&#32;&#32;&#32;_UIntType&#32;&#32;_M_carry;&#32;&#32;&#32;&#32;&#32;&#32;
856 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;_M_p;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
857 &#32;&#32;&#32;&#32;};
858 
871 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UIntType,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__w,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__r&gt;
872 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
873 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;std::subtract_with_carry_engine&lt;_UIntType,&#32;__w,
874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__s,&#32;__r&gt;&amp;&#32;__lhs,
875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::subtract_with_carry_engine&lt;_UIntType,&#32;__w,
876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__s,&#32;__r&gt;&amp;&#32;__rhs)
877 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__lhs&#32;==&#32;__rhs);&#32;}
878 
879 
886 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomNumberEngine,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__p,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__r&gt;
887 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>discard_block_engine
888 &#32;&#32;&#32;&#32;{
889 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(1&#32;&lt;=&#32;__r&#32;&amp;&amp;&#32;__r&#32;&lt;=&#32;__p,
890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;template&#32;argument&#32;substituting&#32;__r&#32;out&#32;of&#32;bounds&quot;</emphasis>);
891 
892 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
894 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomNumberEngine::result_type&#32;result_type;
895 
896 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Sseq&gt;
897 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_If_seed_seq&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;enable_if&lt;__detail::__is_seed_seq&lt;
898 &#32;&#32;&#32;&#32;&#32;&#32;_Sseq,&#32;discard_block_engine,&#32;result_type&gt;<link linkend="_classvalue">::value</link>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
899 
900 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;parameter&#32;values</emphasis>
901 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;block_size&#32;=&#32;__p;
902 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;used_block&#32;=&#32;__r;
903 
909 &#32;&#32;&#32;&#32;&#32;&#32;discard_block_engine()
910 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_b(),&#32;_M_n(0)&#32;{&#32;}
911 
918 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
919 &#32;&#32;&#32;&#32;&#32;&#32;discard_block_engine(<emphasis role="keyword">const</emphasis>&#32;_RandomNumberEngine&amp;&#32;__rng)
920 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_b(__rng),&#32;_M_n(0)&#32;{&#32;}
921 
928 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
929 &#32;&#32;&#32;&#32;&#32;&#32;discard_block_engine(_RandomNumberEngine&amp;&amp;&#32;__rng)
930 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_b(<link linkend="_namespacestd">std</link>::<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(__rng)),&#32;_M_n(0)&#32;{&#32;}
931 
938 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
939 &#32;&#32;&#32;&#32;&#32;&#32;discard_block_engine(result_type&#32;__s)
940 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_b(__s),&#32;_M_n(0)&#32;{&#32;}
941 
947 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Sseq,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_If_seed_seq&lt;_Sseq&gt;&gt;
948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;discard_block_engine(_Sseq&amp;&#32;__q)
950 &#32;&#32;&#32;&#32;:&#32;_M_b(__q),&#32;_M_n(0)
951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
952 
957 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
958 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link>()
959 &#32;&#32;&#32;&#32;&#32;&#32;{
960 &#32;&#32;&#32;&#32;_M_b.seed();
961 &#32;&#32;&#32;&#32;_M_n&#32;=&#32;0;
962 &#32;&#32;&#32;&#32;&#32;&#32;}
963 
968 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
969 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link>(result_type&#32;__s)
970 &#32;&#32;&#32;&#32;&#32;&#32;{
971 &#32;&#32;&#32;&#32;_M_b.seed(__s);
972 &#32;&#32;&#32;&#32;_M_n&#32;=&#32;0;
973 &#32;&#32;&#32;&#32;&#32;&#32;}
974 
980 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Sseq&gt;
981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_If_seed_seq&lt;_Sseq&gt;
982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link>(_Sseq&amp;&#32;__q)
983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
984 &#32;&#32;&#32;&#32;&#32;&#32;_M_b.seed(__q);
985 &#32;&#32;&#32;&#32;&#32;&#32;_M_n&#32;=&#32;0;
986 &#32;&#32;&#32;&#32;}
987 
992 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_RandomNumberEngine&amp;
993 &#32;&#32;&#32;&#32;&#32;&#32;base()&#32;const&#32;noexcept
994 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_b;&#32;}
995 
999 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;result_type
1000 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>()
1001 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_RandomNumberEngine::min();&#32;}
1002 
1006 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;result_type
1007 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>()
1008 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_RandomNumberEngine::max();&#32;}
1009 
1013 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1014 &#32;&#32;&#32;&#32;&#32;&#32;discard(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;__z)
1015 &#32;&#32;&#32;&#32;&#32;&#32;{
1016 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__z&#32;!=&#32;0ULL;&#32;--__z)
1017 &#32;&#32;&#32;&#32;&#32;&#32;(*<emphasis role="keyword">this</emphasis>)();
1018 &#32;&#32;&#32;&#32;&#32;&#32;}
1019 
1023 &#32;&#32;&#32;&#32;&#32;&#32;result_type
1024 &#32;&#32;&#32;&#32;&#32;&#32;operator()();
1025 
1037 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1038 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;discard_block_engine&amp;&#32;__lhs,
1039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;discard_block_engine&amp;&#32;__rhs)
1040 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs._M_b&#32;==&#32;__rhs._M_b&#32;&amp;&amp;&#32;__lhs._M_n&#32;==&#32;__rhs._M_n;&#32;}
1041 
1053 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomNumberEngine1,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__p1,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__r1,
1054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
1055 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;
1056 &#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__os,
1057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::discard_block_engine&lt;_RandomNumberEngine1,
1058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__p1,&#32;__r1&gt;&amp;&#32;__x);
1059 
1071 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomNumberEngine1,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__p1,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__r1,
1072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
1073 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;
1074 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a4560e59cc4f5ddaf0ec23d1a7050b611">operator&gt;&gt;</link>(std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__is,
1075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::discard_block_engine&lt;_RandomNumberEngine1,
1076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__p1,&#32;__r1&gt;&amp;&#32;__x);
1077 
1078 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1079 &#32;&#32;&#32;&#32;&#32;&#32;_RandomNumberEngine&#32;_M_b;
1080 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_M_n;
1081 &#32;&#32;&#32;&#32;};
1082 
1094 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomNumberEngine,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__p,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__r&gt;
1095 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1096 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;std::discard_block_engine&lt;_RandomNumberEngine,&#32;__p,
1097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__r&gt;&amp;&#32;__lhs,
1098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::discard_block_engine&lt;_RandomNumberEngine,&#32;__p,
1099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__r&gt;&amp;&#32;__rhs)
1100 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__lhs&#32;==&#32;__rhs);&#32;}
1101 
1102 
1107 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomNumberEngine,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__w,&#32;<emphasis role="keyword">typename</emphasis>&#32;_UIntType&gt;
1108 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>independent_bits_engine
1109 &#32;&#32;&#32;&#32;{
1110 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_unsigned&lt;_UIntType&gt;::value,
1111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;result_type&#32;must&#32;be&#32;an&#32;unsigned&#32;integral&#32;type&quot;</emphasis>);
1112 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(0u&#32;&lt;&#32;__w&#32;&amp;&amp;&#32;__w&#32;&lt;=&#32;std::numeric_limits&lt;_UIntType&gt;::digits,
1113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;template&#32;argument&#32;substituting&#32;__w&#32;out&#32;of&#32;bounds&quot;</emphasis>);
1114 
1115 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Sseq&gt;
1116 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_If_seed_seq&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;enable_if&lt;__detail::__is_seed_seq&lt;
1117 &#32;&#32;&#32;&#32;&#32;&#32;_Sseq,&#32;independent_bits_engine,&#32;_UIntType&gt;<link linkend="_classvalue">::value</link>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
1118 
1119 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1121 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_UIntType&#32;result_type;
1122 
1128 &#32;&#32;&#32;&#32;&#32;&#32;independent_bits_engine()
1129 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_b()&#32;{&#32;}
1130 
1137 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1138 &#32;&#32;&#32;&#32;&#32;&#32;independent_bits_engine(<emphasis role="keyword">const</emphasis>&#32;_RandomNumberEngine&amp;&#32;__rng)
1139 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_b(__rng)&#32;{&#32;}
1140 
1147 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1148 &#32;&#32;&#32;&#32;&#32;&#32;independent_bits_engine(_RandomNumberEngine&amp;&amp;&#32;__rng)
1149 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_b(<link linkend="_namespacestd">std</link>::<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(__rng))&#32;{&#32;}
1150 
1157 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1158 &#32;&#32;&#32;&#32;&#32;&#32;independent_bits_engine(result_type&#32;__s)
1159 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_b(__s)&#32;{&#32;}
1160 
1166 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Sseq,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_If_seed_seq&lt;_Sseq&gt;&gt;
1167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;independent_bits_engine(_Sseq&amp;&#32;__q)
1169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_b(__q)
1170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
1171 
1176 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1177 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link>()
1178 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_b.seed();&#32;}
1179 
1184 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1185 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link>(result_type&#32;__s)
1186 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_b.seed(__s);&#32;}
1187 
1193 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Sseq&gt;
1194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_If_seed_seq&lt;_Sseq&gt;
1195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link>(_Sseq&amp;&#32;__q)
1196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_b.seed(__q);&#32;}
1197 
1202 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_RandomNumberEngine&amp;
1203 &#32;&#32;&#32;&#32;&#32;&#32;base()&#32;const&#32;noexcept
1204 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_b;&#32;}
1205 
1209 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;result_type
1210 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>()
1211 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;0U;&#32;}
1212 
1216 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;result_type
1217 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>()
1218 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__detail::_Shift&lt;_UIntType,&#32;__w&gt;::__value&#32;-&#32;1;&#32;}
1219 
1223 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1224 &#32;&#32;&#32;&#32;&#32;&#32;discard(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;__z)
1225 &#32;&#32;&#32;&#32;&#32;&#32;{
1226 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__z&#32;!=&#32;0ULL;&#32;--__z)
1227 &#32;&#32;&#32;&#32;&#32;&#32;(*<emphasis role="keyword">this</emphasis>)();
1228 &#32;&#32;&#32;&#32;&#32;&#32;}
1229 
1233 &#32;&#32;&#32;&#32;&#32;&#32;result_type
1234 &#32;&#32;&#32;&#32;&#32;&#32;operator()();
1235 
1248 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1249 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;independent_bits_engine&amp;&#32;__lhs,
1250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;independent_bits_engine&amp;&#32;__rhs)
1251 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs._M_b&#32;==&#32;__rhs._M_b;&#32;}
1252 
1265 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
1266 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;
1267 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a4560e59cc4f5ddaf0ec23d1a7050b611">operator&gt;&gt;</link>(std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__is,
1268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::independent_bits_engine&lt;_RandomNumberEngine,
1269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__w,&#32;_UIntType&gt;&amp;&#32;__x)
1270 &#32;&#32;&#32;&#32;{
1271 &#32;&#32;&#32;&#32;&#32;&#32;__is&#32;&gt;&gt;&#32;__x._M_b;
1272 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__is;
1273 &#32;&#32;&#32;&#32;}
1274 
1275 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1276 &#32;&#32;&#32;&#32;&#32;&#32;_RandomNumberEngine&#32;_M_b;
1277 &#32;&#32;&#32;&#32;};
1278 
1291 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomNumberEngine,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__w,&#32;<emphasis role="keyword">typename</emphasis>&#32;_UIntType&gt;
1292 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1293 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;std::independent_bits_engine&lt;_RandomNumberEngine,&#32;__w,
1294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UIntType&gt;&amp;&#32;__lhs,
1295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::independent_bits_engine&lt;_RandomNumberEngine,&#32;__w,
1296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UIntType&gt;&amp;&#32;__rhs)
1297 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__lhs&#32;==&#32;__rhs);&#32;}
1298 
1309 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomNumberEngine,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__w,&#32;<emphasis role="keyword">typename</emphasis>&#32;_UIntType,
1310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
1311 &#32;&#32;&#32;&#32;std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;
1312 &#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__os,
1313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::independent_bits_engine&lt;_RandomNumberEngine,
1314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__w,&#32;_UIntType&gt;&amp;&#32;__x)
1315 &#32;&#32;&#32;&#32;{
1316 &#32;&#32;&#32;&#32;&#32;&#32;__os&#32;&lt;&lt;&#32;__x.base();
1317 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__os;
1318 &#32;&#32;&#32;&#32;}
1319 
1320 
1328 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomNumberEngine,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__k&gt;
1329 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>shuffle_order_engine
1330 &#32;&#32;&#32;&#32;{
1331 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(1u&#32;&lt;=&#32;__k,&#32;<emphasis role="stringliteral">&quot;template&#32;argument&#32;substituting&#32;&quot;</emphasis>
1332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;__k&#32;out&#32;of&#32;bound&quot;</emphasis>);
1333 
1334 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1336 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomNumberEngine::result_type&#32;result_type;
1337 
1338 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Sseq&gt;
1339 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_If_seed_seq&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;enable_if&lt;__detail::__is_seed_seq&lt;
1340 &#32;&#32;&#32;&#32;&#32;&#32;_Sseq,&#32;shuffle_order_engine,&#32;result_type&gt;<link linkend="_classvalue">::value</link>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
1341 
1342 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;table_size&#32;=&#32;__k;
1343 
1349 &#32;&#32;&#32;&#32;&#32;&#32;shuffle_order_engine()
1350 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_b()
1351 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_initialize();&#32;}
1352 
1359 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1360 &#32;&#32;&#32;&#32;&#32;&#32;shuffle_order_engine(<emphasis role="keyword">const</emphasis>&#32;_RandomNumberEngine&amp;&#32;__rng)
1361 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_b(__rng)
1362 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_initialize();&#32;}
1363 
1370 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1371 &#32;&#32;&#32;&#32;&#32;&#32;shuffle_order_engine(_RandomNumberEngine&amp;&amp;&#32;__rng)
1372 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_b(<link linkend="_namespacestd">std</link>::<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(__rng))
1373 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_initialize();&#32;}
1374 
1381 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1382 &#32;&#32;&#32;&#32;&#32;&#32;shuffle_order_engine(result_type&#32;__s)
1383 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_b(__s)
1384 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_initialize();&#32;}
1385 
1391 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Sseq,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_If_seed_seq&lt;_Sseq&gt;&gt;
1392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shuffle_order_engine(_Sseq&amp;&#32;__q)
1394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_b(__q)
1395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_initialize();&#32;}
1396 
1401 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1402 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link>()
1403 &#32;&#32;&#32;&#32;&#32;&#32;{
1404 &#32;&#32;&#32;&#32;_M_b.seed();
1405 &#32;&#32;&#32;&#32;_M_initialize();
1406 &#32;&#32;&#32;&#32;&#32;&#32;}
1407 
1412 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1413 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link>(result_type&#32;__s)
1414 &#32;&#32;&#32;&#32;&#32;&#32;{
1415 &#32;&#32;&#32;&#32;_M_b.seed(__s);
1416 &#32;&#32;&#32;&#32;_M_initialize();
1417 &#32;&#32;&#32;&#32;&#32;&#32;}
1418 
1424 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Sseq&gt;
1425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_If_seed_seq&lt;_Sseq&gt;
1426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link>(_Sseq&amp;&#32;__q)
1427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1428 &#32;&#32;&#32;&#32;&#32;&#32;_M_b.seed(__q);
1429 &#32;&#32;&#32;&#32;&#32;&#32;_M_initialize();
1430 &#32;&#32;&#32;&#32;}
1431 
1435 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_RandomNumberEngine&amp;
1436 &#32;&#32;&#32;&#32;&#32;&#32;base()&#32;const&#32;noexcept
1437 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_b;&#32;}
1438 
1442 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;result_type
1443 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>()
1444 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_RandomNumberEngine::min();&#32;}
1445 
1449 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;result_type
1450 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>()
1451 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_RandomNumberEngine::max();&#32;}
1452 
1456 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1457 &#32;&#32;&#32;&#32;&#32;&#32;discard(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;__z)
1458 &#32;&#32;&#32;&#32;&#32;&#32;{
1459 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__z&#32;!=&#32;0ULL;&#32;--__z)
1460 &#32;&#32;&#32;&#32;&#32;&#32;(*<emphasis role="keyword">this</emphasis>)();
1461 &#32;&#32;&#32;&#32;&#32;&#32;}
1462 
1466 &#32;&#32;&#32;&#32;&#32;&#32;result_type
1467 &#32;&#32;&#32;&#32;&#32;&#32;operator()();
1468 
1480 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1481 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;shuffle_order_engine&amp;&#32;__lhs,
1482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;shuffle_order_engine&amp;&#32;__rhs)
1483 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__lhs._M_b&#32;==&#32;__rhs._M_b
1484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="_namespacestd_1a94ada91841cca21a2327b0235f9a82cd">std::equal</link>(__lhs._M_v,&#32;__lhs._M_v&#32;+&#32;__k,&#32;__rhs._M_v)
1485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__lhs._M_y&#32;==&#32;__rhs._M_y);&#32;}
1486 
1498 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomNumberEngine1,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__k1,
1499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
1500 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;
1501 &#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__os,
1502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::shuffle_order_engine&lt;_RandomNumberEngine1,
1503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__k1&gt;&amp;&#32;__x);
1504 
1516 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomNumberEngine1,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__k1,
1517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
1518 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;
1519 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a4560e59cc4f5ddaf0ec23d1a7050b611">operator&gt;&gt;</link>(std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__is,
1520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::shuffle_order_engine&lt;_RandomNumberEngine1,&#32;__k1&gt;&amp;&#32;__x);
1521 
1522 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1523 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_initialize()
1524 &#32;&#32;&#32;&#32;&#32;&#32;{
1525 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__k;&#32;++__i)
1526 &#32;&#32;&#32;&#32;&#32;&#32;_M_v[__i]&#32;=&#32;_M_b();
1527 &#32;&#32;&#32;&#32;_M_y&#32;=&#32;_M_b();
1528 &#32;&#32;&#32;&#32;&#32;&#32;}
1529 
1530 &#32;&#32;&#32;&#32;&#32;&#32;_RandomNumberEngine&#32;_M_b;
1531 &#32;&#32;&#32;&#32;&#32;&#32;result_type&#32;_M_v[__k];
1532 &#32;&#32;&#32;&#32;&#32;&#32;result_type&#32;_M_y;
1533 &#32;&#32;&#32;&#32;};
1534 
1546 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomNumberEngine,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__k&gt;
1547 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1548 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;std::shuffle_order_engine&lt;_RandomNumberEngine,
1549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__k&gt;&amp;&#32;__lhs,
1550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::shuffle_order_engine&lt;_RandomNumberEngine,
1551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__k&gt;&amp;&#32;__rhs)
1552 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__lhs&#32;==&#32;__rhs);&#32;}
1553 
1554 
1558 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;linear_congruential_engine&lt;uint_fast32_t,&#32;16807UL,&#32;0UL,&#32;2147483647UL&gt;
1559 &#32;&#32;minstd_rand0;
1560 
1564 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;linear_congruential_engine&lt;uint_fast32_t,&#32;48271UL,&#32;0UL,&#32;2147483647UL&gt;
1565 &#32;&#32;minstd_rand;
1566 
1575 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;mersenne_twister_engine&lt;
1576 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a8f075c759c74e109e8184306c663809d">uint_fast32_t</link>,
1577 &#32;&#32;&#32;&#32;32,&#32;624,&#32;397,&#32;31,
1578 &#32;&#32;&#32;&#32;0x9908b0dfUL,&#32;11,
1579 &#32;&#32;&#32;&#32;0xffffffffUL,&#32;7,
1580 &#32;&#32;&#32;&#32;0x9d2c5680UL,&#32;15,
1581 &#32;&#32;&#32;&#32;0xefc60000UL,&#32;18,&#32;1812433253UL&gt;&#32;mt19937;
1582 
1586 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;mersenne_twister_engine&lt;
1587 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a6fd055dddb7d91fab0635146851af8d5">uint_fast64_t</link>,
1588 &#32;&#32;&#32;&#32;64,&#32;312,&#32;156,&#32;31,
1589 &#32;&#32;&#32;&#32;0xb5026f5aa96619e9ULL,&#32;29,
1590 &#32;&#32;&#32;&#32;0x5555555555555555ULL,&#32;17,
1591 &#32;&#32;&#32;&#32;0x71d67fffeda60000ULL,&#32;37,
1592 &#32;&#32;&#32;&#32;0xfff7eee000000000ULL,&#32;43,
1593 &#32;&#32;&#32;&#32;6364136223846793005ULL&gt;&#32;mt19937_64;
1594 
1595 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;subtract_with_carry_engine&lt;uint_fast32_t,&#32;24,&#32;10,&#32;24&gt;
1596 &#32;&#32;&#32;&#32;ranlux24_base;
1597 
1598 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;subtract_with_carry_engine&lt;uint_fast64_t,&#32;48,&#32;5,&#32;12&gt;
1599 &#32;&#32;&#32;&#32;ranlux48_base;
1600 
1601 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;discard_block_engine&lt;ranlux24_base,&#32;223,&#32;23&gt;&#32;ranlux24;
1602 
1603 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;discard_block_engine&lt;ranlux48_base,&#32;389,&#32;11&gt;&#32;ranlux48;
1604 
1605 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;shuffle_order_engine&lt;minstd_rand0,&#32;256&gt;&#32;knuth_b;
1606 
1607 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;minstd_rand0&#32;default_random_engine;
1608 
1613 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>random_device
1614 &#32;&#32;{
1615 &#32;&#32;<emphasis role="keyword">public</emphasis>:
1617 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;result_type;
1618 
1619 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;constructors,&#32;destructors&#32;and&#32;member&#32;functions</emphasis>
1620 
1621 &#32;&#32;&#32;&#32;random_device()&#32;{&#32;_M_init(<emphasis role="stringliteral">&quot;default&quot;</emphasis>);&#32;}
1622 
1623 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1624 &#32;&#32;&#32;&#32;random_device(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;__token)&#32;{&#32;_M_init(__token);&#32;}
1625 
1626 <emphasis role="preprocessor">#if&#32;defined&#32;_GLIBCXX_USE_DEV_RANDOM</emphasis>
1627 &#32;&#32;&#32;&#32;~random_device()
1628 &#32;&#32;&#32;&#32;{&#32;_M_fini();&#32;}
1629 <emphasis role="preprocessor">#endif</emphasis>
1630 
1631 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;result_type
1632 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>()
1633 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::numeric_limits&lt;result_type&gt;::min();&#32;}
1634 
1635 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;result_type
1636 &#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>()
1637 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::numeric_limits&lt;result_type&gt;::max();&#32;}
1638 
1639 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>
1640 &#32;&#32;&#32;&#32;entropy()&#32;const&#32;noexcept
1641 &#32;&#32;&#32;&#32;{
1642 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_DEV_RANDOM</emphasis>
1643 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_getentropy();
1644 <emphasis role="preprocessor">#else</emphasis>
1645 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0.0;
1646 <emphasis role="preprocessor">#endif</emphasis>
1647 &#32;&#32;&#32;&#32;}
1648 
1649 &#32;&#32;&#32;&#32;result_type
1650 &#32;&#32;&#32;&#32;operator()()
1651 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_getval();&#32;}
1652 
1653 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;copy&#32;functions.</emphasis>
1654 &#32;&#32;&#32;&#32;random_device(<emphasis role="keyword">const</emphasis>&#32;random_device&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
1655 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;random_device&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
1656 
1657 &#32;&#32;<emphasis role="keyword">private</emphasis>:
1658 
1659 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_init(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;__token);
1660 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_init_pretr1(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;__token);
1661 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_fini();
1662 
1663 &#32;&#32;&#32;&#32;result_type&#32;_M_getval();
1664 &#32;&#32;&#32;&#32;result_type&#32;_M_getval_pretr1();
1665 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;_M_getentropy()&#32;const&#32;noexcept;
1666 
1667 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_init(const&#32;<emphasis role="keywordtype">char</emphasis>*,&#32;<emphasis role="keywordtype">size_t</emphasis>);&#32;<emphasis role="comment">//&#32;not&#32;exported&#32;from&#32;the&#32;shared&#32;library</emphasis>
1668 
1669 &#32;&#32;&#32;&#32;__extension__&#32;union
1670 &#32;&#32;&#32;&#32;{
1671 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>
1672 &#32;&#32;&#32;&#32;&#32;&#32;{
1673 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*&#32;&#32;&#32;&#32;&#32;&#32;_M_file;
1674 &#32;&#32;&#32;&#32;result_type&#32;(*_M_func)(<emphasis role="keywordtype">void</emphasis>*);
1675 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;_M_fd;
1676 &#32;&#32;&#32;&#32;&#32;&#32;};
1677 &#32;&#32;&#32;&#32;&#32;&#32;mt19937&#32;&#32;&#32;&#32;_M_mt;
1678 &#32;&#32;&#32;&#32;};
1679 &#32;&#32;};
1680 
1682 
1695 &#32;&#32;<emphasis role="comment">//&#32;std::uniform_int_distribution&#32;is&#32;defined&#32;in&#32;&lt;bits/uniform_int_dist.h&gt;</emphasis>
1696 
1701 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IntType&gt;
1702 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1703 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;std::uniform_int_distribution&lt;_IntType&gt;&amp;&#32;__d1,
1704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::uniform_int_distribution&lt;_IntType&gt;&amp;&#32;__d2)
1705 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__d1&#32;==&#32;__d2);&#32;}
1706 
1717 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IntType,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
1718 &#32;&#32;&#32;&#32;std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;
1719 &#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;,
1720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::uniform_int_distribution&lt;_IntType&gt;&amp;);
1721 
1731 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IntType,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
1732 &#32;&#32;&#32;&#32;std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;
1733 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a4560e59cc4f5ddaf0ec23d1a7050b611">operator&gt;&gt;</link>(std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;,
1734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uniform_int_distribution&lt;_IntType&gt;&amp;);
1735 
1736 
1744 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType&#32;=&#32;<emphasis role="keywordtype">double</emphasis>&gt;
1745 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>uniform_real_distribution
1746 &#32;&#32;&#32;&#32;{
1747 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_floating_point&lt;_RealType&gt;::value,
1748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;result_type&#32;must&#32;be&#32;a&#32;floating&#32;point&#32;type&quot;</emphasis>);
1749 
1750 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1752 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_RealType&#32;result_type;
1753 
1755 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>param_type
1756 &#32;&#32;&#32;&#32;&#32;&#32;{
1757 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;uniform_real_distribution&lt;_RealType&gt;&#32;distribution_type;
1758 
1759 &#32;&#32;&#32;&#32;param_type()&#32;:&#32;param_type(0)&#32;{&#32;}
1760 
1761 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1762 &#32;&#32;&#32;&#32;param_type(_RealType&#32;__a,&#32;_RealType&#32;__b&#32;=&#32;_RealType(1))
1763 &#32;&#32;&#32;&#32;:&#32;_M_a(__a),&#32;_M_b(__b)
1764 &#32;&#32;&#32;&#32;{
1765 &#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(_M_a&#32;&lt;=&#32;_M_b);
1766 &#32;&#32;&#32;&#32;}
1767 
1768 &#32;&#32;&#32;&#32;result_type
1769 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>()<emphasis role="keyword">&#32;const</emphasis>
1770 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_a;&#32;}
1771 
1772 &#32;&#32;&#32;&#32;result_type
1773 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>()<emphasis role="keyword">&#32;const</emphasis>
1774 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_b;&#32;}
1775 
1776 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1777 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p2)
1778 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__p1._M_a&#32;==&#32;__p2._M_a&#32;&amp;&amp;&#32;__p1._M_b&#32;==&#32;__p2._M_b;&#32;}
1779 
1780 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1781 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p2)
1782 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__p1&#32;==&#32;__p2);&#32;}
1783 
1784 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1785 &#32;&#32;&#32;&#32;_RealType&#32;_M_a;
1786 &#32;&#32;&#32;&#32;_RealType&#32;_M_b;
1787 &#32;&#32;&#32;&#32;&#32;&#32;};
1788 
1789 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1795 &#32;&#32;&#32;&#32;&#32;&#32;uniform_real_distribution()&#32;:&#32;uniform_real_distribution(0.0)&#32;{&#32;}
1796 
1803 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1804 &#32;&#32;&#32;&#32;&#32;&#32;uniform_real_distribution(_RealType&#32;__a,&#32;_RealType&#32;__b&#32;=&#32;_RealType(1))
1805 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_param(__a,&#32;__b)
1806 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
1807 
1808 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1809 &#32;&#32;&#32;&#32;&#32;&#32;uniform_real_distribution(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
1810 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_param(__p)
1811 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
1812 
1818 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1819 &#32;&#32;&#32;&#32;&#32;&#32;reset()&#32;{&#32;}
1820 
1821 &#32;&#32;&#32;&#32;&#32;&#32;result_type
1822 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>()<emphasis role="keyword">&#32;const</emphasis>
1823 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param.a();&#32;}
1824 
1825 &#32;&#32;&#32;&#32;&#32;&#32;result_type
1826 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>()<emphasis role="keyword">&#32;const</emphasis>
1827 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param.b();&#32;}
1828 
1832 &#32;&#32;&#32;&#32;&#32;&#32;param_type
1833 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>()<emphasis role="keyword">&#32;const</emphasis>
1834 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param;&#32;}
1835 
1840 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1841 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__param)
1842 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_param&#32;=&#32;__param;&#32;}
1843 
1847 &#32;&#32;&#32;&#32;&#32;&#32;result_type
1848 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>()<emphasis role="keyword">&#32;const</emphasis>
1849 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>();&#32;}
1850 
1854 &#32;&#32;&#32;&#32;&#32;&#32;result_type
1855 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>()<emphasis role="keyword">&#32;const</emphasis>
1856 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>();&#32;}
1857 
1861 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
1862 &#32;&#32;&#32;&#32;result_type
1863 &#32;&#32;&#32;&#32;operator()(_UniformRandomNumberGenerator&amp;&#32;__urng)
1864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;operator()(__urng,&#32;_M_param);&#32;}
1865 
1866 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
1867 &#32;&#32;&#32;&#32;result_type
1868 &#32;&#32;&#32;&#32;operator()(_UniformRandomNumberGenerator&amp;&#32;__urng,
1869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
1870 &#32;&#32;&#32;&#32;{
1871 &#32;&#32;&#32;&#32;&#32;&#32;__detail::_Adaptor&lt;_UniformRandomNumberGenerator,&#32;result_type&gt;
1872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__aurng(__urng);
1873 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__aurng()&#32;*&#32;(__p.b()&#32;-&#32;__p.a()))&#32;+&#32;__p.a();
1874 &#32;&#32;&#32;&#32;}
1875 
1876 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
1877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
1878 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1879 &#32;&#32;&#32;&#32;__generate(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
1880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng)
1881 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate(__f,&#32;__t,&#32;__urng,&#32;_M_param);&#32;}
1882 
1883 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
1884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
1885 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1886 &#32;&#32;&#32;&#32;__generate(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
1887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
1888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
1889 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng,&#32;__p);&#32;}
1890 
1891 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
1892 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1893 &#32;&#32;&#32;&#32;__generate(result_type*&#32;__f,&#32;result_type*&#32;__t,
1894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
1895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
1896 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng,&#32;__p);&#32;}
1897 
1902 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1903 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;uniform_real_distribution&amp;&#32;__d1,
1904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uniform_real_distribution&amp;&#32;__d2)
1905 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__d1._M_param&#32;==&#32;__d2._M_param;&#32;}
1906 
1907 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1908 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
1909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
1910 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1911 &#32;&#32;&#32;&#32;__generate_impl(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
1912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
1913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p);
1914 
1915 &#32;&#32;&#32;&#32;&#32;&#32;param_type&#32;_M_param;
1916 &#32;&#32;&#32;&#32;};
1917 
1922 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IntType&gt;
1923 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1924 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;std::uniform_real_distribution&lt;_IntType&gt;&amp;&#32;__d1,
1925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::uniform_real_distribution&lt;_IntType&gt;&amp;&#32;__d2)
1926 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__d1&#32;==&#32;__d2);&#32;}
1927 
1938 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
1939 &#32;&#32;&#32;&#32;std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;
1940 &#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;,
1941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::uniform_real_distribution&lt;_RealType&gt;&amp;);
1942 
1952 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
1953 &#32;&#32;&#32;&#32;std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;
1954 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a4560e59cc4f5ddaf0ec23d1a7050b611">operator&gt;&gt;</link>(std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;,
1955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uniform_real_distribution&lt;_RealType&gt;&amp;);
1956 
1958 
1974 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType&#32;=&#32;<emphasis role="keywordtype">double</emphasis>&gt;
1975 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>normal_distribution
1976 &#32;&#32;&#32;&#32;{
1977 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_floating_point&lt;_RealType&gt;::value,
1978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;result_type&#32;must&#32;be&#32;a&#32;floating&#32;point&#32;type&quot;</emphasis>);
1979 
1980 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1982 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_RealType&#32;result_type;
1983 
1985 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>param_type
1986 &#32;&#32;&#32;&#32;&#32;&#32;{
1987 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;normal_distribution&lt;_RealType&gt;&#32;distribution_type;
1988 
1989 &#32;&#32;&#32;&#32;param_type()&#32;:&#32;param_type(0.0)&#32;{&#32;}
1990 
1991 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1992 &#32;&#32;&#32;&#32;param_type(_RealType&#32;__mean,&#32;_RealType&#32;__stddev&#32;=&#32;_RealType(1))
1993 &#32;&#32;&#32;&#32;:&#32;_M_mean(__mean),&#32;_M_stddev(__stddev)
1994 &#32;&#32;&#32;&#32;{
1995 &#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(_M_stddev&#32;&gt;&#32;_RealType(0));
1996 &#32;&#32;&#32;&#32;}
1997 
1998 &#32;&#32;&#32;&#32;_RealType
1999 &#32;&#32;&#32;&#32;mean()<emphasis role="keyword">&#32;const</emphasis>
2000 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_mean;&#32;}
2001 
2002 &#32;&#32;&#32;&#32;_RealType
2003 &#32;&#32;&#32;&#32;stddev()<emphasis role="keyword">&#32;const</emphasis>
2004 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_stddev;&#32;}
2005 
2006 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2007 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p2)
2008 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__p1._M_mean&#32;==&#32;__p2._M_mean
2009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__p1._M_stddev&#32;==&#32;__p2._M_stddev);&#32;}
2010 
2011 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2012 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p2)
2013 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__p1&#32;==&#32;__p2);&#32;}
2014 
2015 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
2016 &#32;&#32;&#32;&#32;_RealType&#32;_M_mean;
2017 &#32;&#32;&#32;&#32;_RealType&#32;_M_stddev;
2018 &#32;&#32;&#32;&#32;&#32;&#32;};
2019 
2020 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
2021 &#32;&#32;&#32;&#32;&#32;&#32;normal_distribution()&#32;:&#32;normal_distribution(0.0)&#32;{&#32;}
2022 
2027 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
2028 &#32;&#32;&#32;&#32;&#32;&#32;normal_distribution(result_type&#32;__mean,
2029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result_type&#32;__stddev&#32;=&#32;result_type(1))
2030 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_param(__mean,&#32;__stddev)
2031 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
2032 
2033 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
2034 &#32;&#32;&#32;&#32;&#32;&#32;normal_distribution(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
2035 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_param(__p)
2036 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
2037 
2041 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2042 &#32;&#32;&#32;&#32;&#32;&#32;reset()
2043 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_saved_available&#32;=&#32;<emphasis role="keyword">false</emphasis>;&#32;}
2044 
2048 &#32;&#32;&#32;&#32;&#32;&#32;_RealType
2049 &#32;&#32;&#32;&#32;&#32;&#32;mean()<emphasis role="keyword">&#32;const</emphasis>
2050 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param.mean();&#32;}
2051 
2055 &#32;&#32;&#32;&#32;&#32;&#32;_RealType
2056 &#32;&#32;&#32;&#32;&#32;&#32;stddev()<emphasis role="keyword">&#32;const</emphasis>
2057 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param.stddev();&#32;}
2058 
2062 &#32;&#32;&#32;&#32;&#32;&#32;param_type
2063 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>()<emphasis role="keyword">&#32;const</emphasis>
2064 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param;&#32;}
2065 
2070 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2071 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__param)
2072 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_param&#32;=&#32;__param;&#32;}
2073 
2077 &#32;&#32;&#32;&#32;&#32;&#32;result_type
2078 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>()<emphasis role="keyword">&#32;const</emphasis>
2079 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::numeric_limits&lt;result_type&gt;::lowest();&#32;}
2080 
2084 &#32;&#32;&#32;&#32;&#32;&#32;result_type
2085 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>()<emphasis role="keyword">&#32;const</emphasis>
2086 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::numeric_limits&lt;result_type&gt;::max();&#32;}
2087 
2091 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
2092 &#32;&#32;&#32;&#32;result_type
2093 &#32;&#32;&#32;&#32;operator()(_UniformRandomNumberGenerator&amp;&#32;__urng)
2094 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;operator()(__urng,&#32;_M_param);&#32;}
2095 
2096 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
2097 &#32;&#32;&#32;&#32;result_type
2098 &#32;&#32;&#32;&#32;operator()(_UniformRandomNumberGenerator&amp;&#32;__urng,
2099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p);
2100 
2101 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
2102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
2103 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2104 &#32;&#32;&#32;&#32;__generate(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
2105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng)
2106 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate(__f,&#32;__t,&#32;__urng,&#32;_M_param);&#32;}
2107 
2108 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
2109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
2110 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2111 &#32;&#32;&#32;&#32;__generate(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
2112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
2113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
2114 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng,&#32;__p);&#32;}
2115 
2116 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
2117 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2118 &#32;&#32;&#32;&#32;__generate(result_type*&#32;__f,&#32;result_type*&#32;__t,
2119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
2120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
2121 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng,&#32;__p);&#32;}
2122 
2128 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType1&gt;
2129 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;std::normal_distribution&lt;_RealType1&gt;&amp;&#32;__d1,
2131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::normal_distribution&lt;_RealType1&gt;&amp;&#32;__d2);
2132 
2143 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
2144 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;
2145 &#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__os,
2146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::normal_distribution&lt;_RealType1&gt;&amp;&#32;__x);
2147 
2158 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
2159 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;
2160 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a4560e59cc4f5ddaf0ec23d1a7050b611">operator&gt;&gt;</link>(std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__is,
2161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::normal_distribution&lt;_RealType1&gt;&amp;&#32;__x);
2162 
2163 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
2164 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
2165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
2166 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2167 &#32;&#32;&#32;&#32;__generate_impl(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
2168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
2169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p);
2170 
2171 &#32;&#32;&#32;&#32;&#32;&#32;param_type&#32;&#32;_M_param;
2172 &#32;&#32;&#32;&#32;&#32;&#32;result_type&#32;_M_saved&#32;=&#32;0;
2173 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_saved_available&#32;=&#32;<emphasis role="keyword">false</emphasis>;
2174 &#32;&#32;&#32;&#32;};
2175 
2179 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType&gt;
2180 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2181 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;std::normal_distribution&lt;_RealType&gt;&amp;&#32;__d1,
2182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::normal_distribution&lt;_RealType&gt;&amp;&#32;__d2)
2183 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__d1&#32;==&#32;__d2);&#32;}
2184 
2185 
2195 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType&#32;=&#32;<emphasis role="keywordtype">double</emphasis>&gt;
2196 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>lognormal_distribution
2197 &#32;&#32;&#32;&#32;{
2198 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_floating_point&lt;_RealType&gt;::value,
2199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;result_type&#32;must&#32;be&#32;a&#32;floating&#32;point&#32;type&quot;</emphasis>);
2200 
2201 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
2203 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_RealType&#32;result_type;
2204 
2206 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>param_type
2207 &#32;&#32;&#32;&#32;&#32;&#32;{
2208 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;lognormal_distribution&lt;_RealType&gt;&#32;distribution_type;
2209 
2210 &#32;&#32;&#32;&#32;param_type()&#32;:&#32;param_type(0.0)&#32;{&#32;}
2211 
2212 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
2213 &#32;&#32;&#32;&#32;param_type(_RealType&#32;__m,&#32;_RealType&#32;__s&#32;=&#32;_RealType(1))
2214 &#32;&#32;&#32;&#32;:&#32;_M_m(__m),&#32;_M_s(__s)
2215 &#32;&#32;&#32;&#32;{&#32;}
2216 
2217 &#32;&#32;&#32;&#32;_RealType
2218 &#32;&#32;&#32;&#32;m()<emphasis role="keyword">&#32;const</emphasis>
2219 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_m;&#32;}
2220 
2221 &#32;&#32;&#32;&#32;_RealType
2222 &#32;&#32;&#32;&#32;s()<emphasis role="keyword">&#32;const</emphasis>
2223 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_s;&#32;}
2224 
2225 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2226 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p2)
2227 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__p1._M_m&#32;==&#32;__p2._M_m&#32;&amp;&amp;&#32;__p1._M_s&#32;==&#32;__p2._M_s;&#32;}
2228 
2229 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2230 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p2)
2231 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__p1&#32;==&#32;__p2);&#32;}
2232 
2233 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
2234 &#32;&#32;&#32;&#32;_RealType&#32;_M_m;
2235 &#32;&#32;&#32;&#32;_RealType&#32;_M_s;
2236 &#32;&#32;&#32;&#32;&#32;&#32;};
2237 
2238 &#32;&#32;&#32;&#32;&#32;&#32;lognormal_distribution()&#32;:&#32;lognormal_distribution(0.0)&#32;{&#32;}
2239 
2240 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
2241 &#32;&#32;&#32;&#32;&#32;&#32;lognormal_distribution(_RealType&#32;__m,&#32;_RealType&#32;__s&#32;=&#32;_RealType(1))
2242 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_param(__m,&#32;__s),&#32;_M_nd()
2243 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
2244 
2245 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
2246 &#32;&#32;&#32;&#32;&#32;&#32;lognormal_distribution(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
2247 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_param(__p),&#32;_M_nd()
2248 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
2249 
2253 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2254 &#32;&#32;&#32;&#32;&#32;&#32;reset()
2255 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_nd.reset();&#32;}
2256 
2260 &#32;&#32;&#32;&#32;&#32;&#32;_RealType
2261 &#32;&#32;&#32;&#32;&#32;&#32;m()<emphasis role="keyword">&#32;const</emphasis>
2262 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param.m();&#32;}
2263 
2264 &#32;&#32;&#32;&#32;&#32;&#32;_RealType
2265 &#32;&#32;&#32;&#32;&#32;&#32;s()<emphasis role="keyword">&#32;const</emphasis>
2266 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param.s();&#32;}
2267 
2271 &#32;&#32;&#32;&#32;&#32;&#32;param_type
2272 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>()<emphasis role="keyword">&#32;const</emphasis>
2273 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param;&#32;}
2274 
2279 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2280 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__param)
2281 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_param&#32;=&#32;__param;&#32;}
2282 
2286 &#32;&#32;&#32;&#32;&#32;&#32;result_type
2287 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>()<emphasis role="keyword">&#32;const</emphasis>
2288 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;result_type(0);&#32;}
2289 
2293 &#32;&#32;&#32;&#32;&#32;&#32;result_type
2294 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>()<emphasis role="keyword">&#32;const</emphasis>
2295 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::numeric_limits&lt;result_type&gt;::max();&#32;}
2296 
2300 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
2301 &#32;&#32;&#32;&#32;result_type
2302 &#32;&#32;&#32;&#32;operator()(_UniformRandomNumberGenerator&amp;&#32;__urng)
2303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;operator()(__urng,&#32;_M_param);&#32;}
2304 
2305 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
2306 &#32;&#32;&#32;&#32;result_type
2307 &#32;&#32;&#32;&#32;operator()(_UniformRandomNumberGenerator&amp;&#32;__urng,
2308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
2309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::exp(__p.s()&#32;*&#32;_M_nd(__urng)&#32;+&#32;__p.m());&#32;}
2310 
2311 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
2312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
2313 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2314 &#32;&#32;&#32;&#32;__generate(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
2315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng)
2316 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate(__f,&#32;__t,&#32;__urng,&#32;_M_param);&#32;}
2317 
2318 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
2319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
2320 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2321 &#32;&#32;&#32;&#32;__generate(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
2322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
2323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
2324 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng,&#32;__p);&#32;}
2325 
2326 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
2327 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2328 &#32;&#32;&#32;&#32;__generate(result_type*&#32;__f,&#32;result_type*&#32;__t,
2329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
2330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
2331 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng,&#32;__p);&#32;}
2332 
2338 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2339 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;lognormal_distribution&amp;&#32;__d1,
2340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;lognormal_distribution&amp;&#32;__d2)
2341 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__d1._M_param&#32;==&#32;__d2._M_param
2342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__d1._M_nd&#32;==&#32;__d2._M_nd);&#32;}
2343 
2354 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
2355 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;
2356 &#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__os,
2357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::lognormal_distribution&lt;_RealType1&gt;&amp;&#32;__x);
2358 
2369 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
2370 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;
2371 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a4560e59cc4f5ddaf0ec23d1a7050b611">operator&gt;&gt;</link>(std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__is,
2372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::lognormal_distribution&lt;_RealType1&gt;&amp;&#32;__x);
2373 
2374 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
2375 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
2376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
2377 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2378 &#32;&#32;&#32;&#32;__generate_impl(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
2379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
2380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p);
2381 
2382 &#32;&#32;&#32;&#32;&#32;&#32;param_type&#32;_M_param;
2383 
2384 &#32;&#32;&#32;&#32;&#32;&#32;std::normal_distribution&lt;result_type&gt;&#32;_M_nd;
2385 &#32;&#32;&#32;&#32;};
2386 
2390 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType&gt;
2391 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2392 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;std::lognormal_distribution&lt;_RealType&gt;&amp;&#32;__d1,
2393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::lognormal_distribution&lt;_RealType&gt;&amp;&#32;__d2)
2394 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__d1&#32;==&#32;__d2);&#32;}
2395 
2396 
2406 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType&#32;=&#32;<emphasis role="keywordtype">double</emphasis>&gt;
2407 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>gamma_distribution
2408 &#32;&#32;&#32;&#32;{
2409 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_floating_point&lt;_RealType&gt;::value,
2410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;result_type&#32;must&#32;be&#32;a&#32;floating&#32;point&#32;type&quot;</emphasis>);
2411 
2412 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
2414 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_RealType&#32;result_type;
2415 
2417 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>param_type
2418 &#32;&#32;&#32;&#32;&#32;&#32;{
2419 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;gamma_distribution&lt;_RealType&gt;&#32;distribution_type;
2420 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>gamma_distribution&lt;_RealType&gt;;
2421 
2422 &#32;&#32;&#32;&#32;param_type()&#32;:&#32;param_type(1.0)&#32;{&#32;}
2423 
2424 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
2425 &#32;&#32;&#32;&#32;param_type(_RealType&#32;__alpha_val,&#32;_RealType&#32;__beta_val&#32;=&#32;_RealType(1))
2426 &#32;&#32;&#32;&#32;:&#32;_M_alpha(__alpha_val),&#32;_M_beta(__beta_val)
2427 &#32;&#32;&#32;&#32;{
2428 &#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(_M_alpha&#32;&gt;&#32;_RealType(0));
2429 &#32;&#32;&#32;&#32;&#32;&#32;_M_initialize();
2430 &#32;&#32;&#32;&#32;}
2431 
2432 &#32;&#32;&#32;&#32;_RealType
2433 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a090ebe65994a3ee4bb60ae3472abffc5">alpha</link>()<emphasis role="keyword">&#32;const</emphasis>
2434 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_alpha;&#32;}
2435 
2436 &#32;&#32;&#32;&#32;_RealType
2437 &#32;&#32;&#32;&#32;beta()<emphasis role="keyword">&#32;const</emphasis>
2438 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_beta;&#32;}
2439 
2440 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2441 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p2)
2442 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__p1._M_alpha&#32;==&#32;__p2._M_alpha
2443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__p1._M_beta&#32;==&#32;__p2._M_beta);&#32;}
2444 
2445 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2446 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p2)
2447 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__p1&#32;==&#32;__p2);&#32;}
2448 
2449 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
2450 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2451 &#32;&#32;&#32;&#32;_M_initialize();
2452 
2453 &#32;&#32;&#32;&#32;_RealType&#32;_M_alpha;
2454 &#32;&#32;&#32;&#32;_RealType&#32;_M_beta;
2455 
2456 &#32;&#32;&#32;&#32;_RealType&#32;_M_malpha,&#32;_M_a2;
2457 &#32;&#32;&#32;&#32;&#32;&#32;};
2458 
2459 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
2463 &#32;&#32;&#32;&#32;&#32;&#32;gamma_distribution()&#32;:&#32;gamma_distribution(1.0)&#32;{&#32;}
2464 
2469 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
2470 &#32;&#32;&#32;&#32;&#32;&#32;gamma_distribution(_RealType&#32;__alpha_val,
2471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RealType&#32;__beta_val&#32;=&#32;_RealType(1))
2472 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_param(__alpha_val,&#32;__beta_val),&#32;_M_nd()
2473 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
2474 
2475 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
2476 &#32;&#32;&#32;&#32;&#32;&#32;gamma_distribution(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
2477 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_param(__p),&#32;_M_nd()
2478 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
2479 
2483 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2484 &#32;&#32;&#32;&#32;&#32;&#32;reset()
2485 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_nd.reset();&#32;}
2486 
2490 &#32;&#32;&#32;&#32;&#32;&#32;_RealType
2491 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a090ebe65994a3ee4bb60ae3472abffc5">alpha</link>()<emphasis role="keyword">&#32;const</emphasis>
2492 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param.alpha();&#32;}
2493 
2497 &#32;&#32;&#32;&#32;&#32;&#32;_RealType
2498 &#32;&#32;&#32;&#32;&#32;&#32;beta()<emphasis role="keyword">&#32;const</emphasis>
2499 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param.beta();&#32;}
2500 
2504 &#32;&#32;&#32;&#32;&#32;&#32;param_type
2505 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>()<emphasis role="keyword">&#32;const</emphasis>
2506 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param;&#32;}
2507 
2512 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2513 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__param)
2514 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_param&#32;=&#32;__param;&#32;}
2515 
2519 &#32;&#32;&#32;&#32;&#32;&#32;result_type
2520 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>()<emphasis role="keyword">&#32;const</emphasis>
2521 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;result_type(0);&#32;}
2522 
2526 &#32;&#32;&#32;&#32;&#32;&#32;result_type
2527 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>()<emphasis role="keyword">&#32;const</emphasis>
2528 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::numeric_limits&lt;result_type&gt;::max();&#32;}
2529 
2533 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
2534 &#32;&#32;&#32;&#32;result_type
2535 &#32;&#32;&#32;&#32;operator()(_UniformRandomNumberGenerator&amp;&#32;__urng)
2536 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;operator()(__urng,&#32;_M_param);&#32;}
2537 
2538 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
2539 &#32;&#32;&#32;&#32;result_type
2540 &#32;&#32;&#32;&#32;operator()(_UniformRandomNumberGenerator&amp;&#32;__urng,
2541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p);
2542 
2543 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
2544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
2545 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2546 &#32;&#32;&#32;&#32;__generate(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
2547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng)
2548 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate(__f,&#32;__t,&#32;__urng,&#32;_M_param);&#32;}
2549 
2550 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
2551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
2552 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2553 &#32;&#32;&#32;&#32;__generate(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
2554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
2555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
2556 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng,&#32;__p);&#32;}
2557 
2558 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
2559 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2560 &#32;&#32;&#32;&#32;__generate(result_type*&#32;__f,&#32;result_type*&#32;__t,
2561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
2562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
2563 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng,&#32;__p);&#32;}
2564 
2570 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2571 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;gamma_distribution&amp;&#32;__d1,
2572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;gamma_distribution&amp;&#32;__d2)
2573 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__d1._M_param&#32;==&#32;__d2._M_param
2574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__d1._M_nd&#32;==&#32;__d2._M_nd);&#32;}
2575 
2586 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
2587 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;
2588 &#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__os,
2589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::gamma_distribution&lt;_RealType1&gt;&amp;&#32;__x);
2590 
2600 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
2601 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;
2602 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a4560e59cc4f5ddaf0ec23d1a7050b611">operator&gt;&gt;</link>(std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__is,
2603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::gamma_distribution&lt;_RealType1&gt;&amp;&#32;__x);
2604 
2605 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
2606 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
2607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
2608 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2609 &#32;&#32;&#32;&#32;__generate_impl(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
2610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
2611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p);
2612 
2613 &#32;&#32;&#32;&#32;&#32;&#32;param_type&#32;_M_param;
2614 
2615 &#32;&#32;&#32;&#32;&#32;&#32;std::normal_distribution&lt;result_type&gt;&#32;_M_nd;
2616 &#32;&#32;&#32;&#32;};
2617 
2621 &#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType&gt;
2622 &#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2623 &#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;std::gamma_distribution&lt;_RealType&gt;&amp;&#32;__d1,
2624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::gamma_distribution&lt;_RealType&gt;&amp;&#32;__d2)
2625 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__d1&#32;==&#32;__d2);&#32;}
2626 
2627 
2634 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType&#32;=&#32;<emphasis role="keywordtype">double</emphasis>&gt;
2635 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>chi_squared_distribution
2636 &#32;&#32;&#32;&#32;{
2637 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_floating_point&lt;_RealType&gt;::value,
2638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;result_type&#32;must&#32;be&#32;a&#32;floating&#32;point&#32;type&quot;</emphasis>);
2639 
2640 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
2642 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_RealType&#32;result_type;
2643 
2645 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>param_type
2646 &#32;&#32;&#32;&#32;&#32;&#32;{
2647 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;chi_squared_distribution&lt;_RealType&gt;&#32;distribution_type;
2648 
2649 &#32;&#32;&#32;&#32;param_type()&#32;:&#32;param_type(1)&#32;{&#32;}
2650 
2651 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
2652 &#32;&#32;&#32;&#32;param_type(_RealType&#32;__n)
2653 &#32;&#32;&#32;&#32;:&#32;_M_n(__n)
2654 &#32;&#32;&#32;&#32;{&#32;}
2655 
2656 &#32;&#32;&#32;&#32;_RealType
2657 &#32;&#32;&#32;&#32;n()<emphasis role="keyword">&#32;const</emphasis>
2658 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_n;&#32;}
2659 
2660 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2661 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p2)
2662 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__p1._M_n&#32;==&#32;__p2._M_n;&#32;}
2663 
2664 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2665 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p2)
2666 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__p1&#32;==&#32;__p2);&#32;}
2667 
2668 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
2669 &#32;&#32;&#32;&#32;_RealType&#32;_M_n;
2670 &#32;&#32;&#32;&#32;&#32;&#32;};
2671 
2672 &#32;&#32;&#32;&#32;&#32;&#32;chi_squared_distribution()&#32;:&#32;chi_squared_distribution(1)&#32;{&#32;}
2673 
2674 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
2675 &#32;&#32;&#32;&#32;&#32;&#32;chi_squared_distribution(_RealType&#32;__n)
2676 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_param(__n),&#32;_M_gd(__n&#32;/&#32;2)
2677 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
2678 
2679 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
2680 &#32;&#32;&#32;&#32;&#32;&#32;chi_squared_distribution(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
2681 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_param(__p),&#32;_M_gd(__p.n()&#32;/&#32;2)
2682 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
2683 
2687 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2688 &#32;&#32;&#32;&#32;&#32;&#32;reset()
2689 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_gd.reset();&#32;}
2690 
2694 &#32;&#32;&#32;&#32;&#32;&#32;_RealType
2695 &#32;&#32;&#32;&#32;&#32;&#32;n()<emphasis role="keyword">&#32;const</emphasis>
2696 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param.n();&#32;}
2697 
2701 &#32;&#32;&#32;&#32;&#32;&#32;param_type
2702 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>()<emphasis role="keyword">&#32;const</emphasis>
2703 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param;&#32;}
2704 
2709 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2710 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__param)
2711 &#32;&#32;&#32;&#32;&#32;&#32;{
2712 &#32;&#32;&#32;&#32;_M_param&#32;=&#32;__param;
2713 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::gamma_distribution&lt;result_type&gt;::param_type
2714 &#32;&#32;&#32;&#32;&#32;&#32;param_type;
2715 &#32;&#32;&#32;&#32;_M_gd.param(param_type{__param.n()&#32;/&#32;2});
2716 &#32;&#32;&#32;&#32;&#32;&#32;}
2717 
2721 &#32;&#32;&#32;&#32;&#32;&#32;result_type
2722 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>()<emphasis role="keyword">&#32;const</emphasis>
2723 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;result_type(0);&#32;}
2724 
2728 &#32;&#32;&#32;&#32;&#32;&#32;result_type
2729 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>()<emphasis role="keyword">&#32;const</emphasis>
2730 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::numeric_limits&lt;result_type&gt;::max();&#32;}
2731 
2735 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
2736 &#32;&#32;&#32;&#32;result_type
2737 &#32;&#32;&#32;&#32;operator()(_UniformRandomNumberGenerator&amp;&#32;__urng)
2738 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;2&#32;*&#32;_M_gd(__urng);&#32;}
2739 
2740 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
2741 &#32;&#32;&#32;&#32;result_type
2742 &#32;&#32;&#32;&#32;operator()(_UniformRandomNumberGenerator&amp;&#32;__urng,
2743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
2744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2745 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::gamma_distribution&lt;result_type&gt;::param_type
2746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;param_type;
2747 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;2&#32;*&#32;_M_gd(__urng,&#32;param_type(__p.n()&#32;/&#32;2));
2748 &#32;&#32;&#32;&#32;}
2749 
2750 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
2751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
2752 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2753 &#32;&#32;&#32;&#32;__generate(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
2754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng)
2755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng);&#32;}
2756 
2757 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
2758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
2759 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2760 &#32;&#32;&#32;&#32;__generate(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
2761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
2762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
2763 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typename</emphasis>&#32;std::gamma_distribution&lt;result_type&gt;::param_type
2764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__p2(__p.n()&#32;/&#32;2);
2765 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng,&#32;__p2);&#32;}
2766 
2767 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
2768 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2769 &#32;&#32;&#32;&#32;__generate(result_type*&#32;__f,&#32;result_type*&#32;__t,
2770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng)
2771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng);&#32;}
2772 
2773 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
2774 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2775 &#32;&#32;&#32;&#32;__generate(result_type*&#32;__f,&#32;result_type*&#32;__t,
2776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
2777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
2778 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typename</emphasis>&#32;std::gamma_distribution&lt;result_type&gt;::param_type
2779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__p2(__p.n()&#32;/&#32;2);
2780 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng,&#32;__p2);&#32;}
2781 
2787 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2788 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;chi_squared_distribution&amp;&#32;__d1,
2789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;chi_squared_distribution&amp;&#32;__d2)
2790 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__d1._M_param&#32;==&#32;__d2._M_param&#32;&amp;&amp;&#32;__d1._M_gd&#32;==&#32;__d2._M_gd;&#32;}
2791 
2802 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
2803 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;
2804 &#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__os,
2805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::chi_squared_distribution&lt;_RealType1&gt;&amp;&#32;__x);
2806 
2817 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
2818 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;
2819 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a4560e59cc4f5ddaf0ec23d1a7050b611">operator&gt;&gt;</link>(std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__is,
2820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::chi_squared_distribution&lt;_RealType1&gt;&amp;&#32;__x);
2821 
2822 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
2823 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
2824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
2825 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2826 &#32;&#32;&#32;&#32;__generate_impl(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
2827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng);
2828 
2829 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
2830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
2831 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2832 &#32;&#32;&#32;&#32;__generate_impl(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
2833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
2834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>
2835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::gamma_distribution&lt;result_type&gt;::param_type&amp;&#32;__p);
2836 
2837 &#32;&#32;&#32;&#32;&#32;&#32;param_type&#32;_M_param;
2838 
2839 &#32;&#32;&#32;&#32;&#32;&#32;std::gamma_distribution&lt;result_type&gt;&#32;_M_gd;
2840 &#32;&#32;&#32;&#32;};
2841 
2845 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType&gt;
2846 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2847 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;std::chi_squared_distribution&lt;_RealType&gt;&amp;&#32;__d1,
2848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::chi_squared_distribution&lt;_RealType&gt;&amp;&#32;__d2)
2849 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__d1&#32;==&#32;__d2);&#32;}
2850 
2851 
2858 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType&#32;=&#32;<emphasis role="keywordtype">double</emphasis>&gt;
2859 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>cauchy_distribution
2860 &#32;&#32;&#32;&#32;{
2861 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_floating_point&lt;_RealType&gt;::value,
2862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;result_type&#32;must&#32;be&#32;a&#32;floating&#32;point&#32;type&quot;</emphasis>);
2863 
2864 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
2866 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_RealType&#32;result_type;
2867 
2869 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>param_type
2870 &#32;&#32;&#32;&#32;&#32;&#32;{
2871 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;cauchy_distribution&lt;_RealType&gt;&#32;distribution_type;
2872 
2873 &#32;&#32;&#32;&#32;param_type()&#32;:&#32;param_type(0)&#32;{&#32;}
2874 
2875 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
2876 &#32;&#32;&#32;&#32;param_type(_RealType&#32;__a,&#32;_RealType&#32;__b&#32;=&#32;_RealType(1))
2877 &#32;&#32;&#32;&#32;:&#32;_M_a(__a),&#32;_M_b(__b)
2878 &#32;&#32;&#32;&#32;{&#32;}
2879 
2880 &#32;&#32;&#32;&#32;_RealType
2881 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>()<emphasis role="keyword">&#32;const</emphasis>
2882 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_a;&#32;}
2883 
2884 &#32;&#32;&#32;&#32;_RealType
2885 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>()<emphasis role="keyword">&#32;const</emphasis>
2886 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_b;&#32;}
2887 
2888 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2889 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p2)
2890 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__p1._M_a&#32;==&#32;__p2._M_a&#32;&amp;&amp;&#32;__p1._M_b&#32;==&#32;__p2._M_b;&#32;}
2891 
2892 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2893 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p2)
2894 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__p1&#32;==&#32;__p2);&#32;}
2895 
2896 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
2897 &#32;&#32;&#32;&#32;_RealType&#32;_M_a;
2898 &#32;&#32;&#32;&#32;_RealType&#32;_M_b;
2899 &#32;&#32;&#32;&#32;&#32;&#32;};
2900 
2901 &#32;&#32;&#32;&#32;&#32;&#32;cauchy_distribution()&#32;:&#32;cauchy_distribution(0.0)&#32;{&#32;}
2902 
2903 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
2904 &#32;&#32;&#32;&#32;&#32;&#32;cauchy_distribution(_RealType&#32;__a,&#32;_RealType&#32;__b&#32;=&#32;1.0)
2905 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_param(__a,&#32;__b)
2906 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
2907 
2908 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
2909 &#32;&#32;&#32;&#32;&#32;&#32;cauchy_distribution(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
2910 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_param(__p)
2911 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
2912 
2916 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2917 &#32;&#32;&#32;&#32;&#32;&#32;reset()
2918 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
2919 
2923 &#32;&#32;&#32;&#32;&#32;&#32;_RealType
2924 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>()<emphasis role="keyword">&#32;const</emphasis>
2925 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param.a();&#32;}
2926 
2927 &#32;&#32;&#32;&#32;&#32;&#32;_RealType
2928 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>()<emphasis role="keyword">&#32;const</emphasis>
2929 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param.b();&#32;}
2930 
2934 &#32;&#32;&#32;&#32;&#32;&#32;param_type
2935 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>()<emphasis role="keyword">&#32;const</emphasis>
2936 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param;&#32;}
2937 
2942 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2943 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__param)
2944 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_param&#32;=&#32;__param;&#32;}
2945 
2949 &#32;&#32;&#32;&#32;&#32;&#32;result_type
2950 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>()<emphasis role="keyword">&#32;const</emphasis>
2951 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::numeric_limits&lt;result_type&gt;::lowest();&#32;}
2952 
2956 &#32;&#32;&#32;&#32;&#32;&#32;result_type
2957 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>()<emphasis role="keyword">&#32;const</emphasis>
2958 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::numeric_limits&lt;result_type&gt;::max();&#32;}
2959 
2963 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
2964 &#32;&#32;&#32;&#32;result_type
2965 &#32;&#32;&#32;&#32;operator()(_UniformRandomNumberGenerator&amp;&#32;__urng)
2966 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;operator()(__urng,&#32;_M_param);&#32;}
2967 
2968 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
2969 &#32;&#32;&#32;&#32;result_type
2970 &#32;&#32;&#32;&#32;operator()(_UniformRandomNumberGenerator&amp;&#32;__urng,
2971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p);
2972 
2973 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
2974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
2975 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2976 &#32;&#32;&#32;&#32;__generate(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
2977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng)
2978 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate(__f,&#32;__t,&#32;__urng,&#32;_M_param);&#32;}
2979 
2980 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
2981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
2982 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2983 &#32;&#32;&#32;&#32;__generate(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
2984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
2985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
2986 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng,&#32;__p);&#32;}
2987 
2988 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
2989 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2990 &#32;&#32;&#32;&#32;__generate(result_type*&#32;__f,&#32;result_type*&#32;__t,
2991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
2992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
2993 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng,&#32;__p);&#32;}
2994 
2999 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3000 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;cauchy_distribution&amp;&#32;__d1,
3001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;cauchy_distribution&amp;&#32;__d2)
3002 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__d1._M_param&#32;==&#32;__d2._M_param;&#32;}
3003 
3004 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
3005 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
3006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
3007 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
3008 &#32;&#32;&#32;&#32;__generate_impl(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
3009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
3010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p);
3011 
3012 &#32;&#32;&#32;&#32;&#32;&#32;param_type&#32;_M_param;
3013 &#32;&#32;&#32;&#32;};
3014 
3019 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType&gt;
3020 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3021 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;std::cauchy_distribution&lt;_RealType&gt;&amp;&#32;__d1,
3022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::cauchy_distribution&lt;_RealType&gt;&amp;&#32;__d2)
3023 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__d1&#32;==&#32;__d2);&#32;}
3024 
3035 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
3036 &#32;&#32;&#32;&#32;std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;
3037 &#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__os,
3038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::cauchy_distribution&lt;_RealType&gt;&amp;&#32;__x);
3039 
3050 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
3051 &#32;&#32;&#32;&#32;std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;
3052 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a4560e59cc4f5ddaf0ec23d1a7050b611">operator&gt;&gt;</link>(std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__is,
3053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cauchy_distribution&lt;_RealType&gt;&amp;&#32;__x);
3054 
3055 
3066 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType&#32;=&#32;<emphasis role="keywordtype">double</emphasis>&gt;
3067 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>fisher_f_distribution
3068 &#32;&#32;&#32;&#32;{
3069 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_floating_point&lt;_RealType&gt;::value,
3070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;result_type&#32;must&#32;be&#32;a&#32;floating&#32;point&#32;type&quot;</emphasis>);
3071 
3072 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
3074 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_RealType&#32;result_type;
3075 
3077 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>param_type
3078 &#32;&#32;&#32;&#32;&#32;&#32;{
3079 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;fisher_f_distribution&lt;_RealType&gt;&#32;distribution_type;
3080 
3081 &#32;&#32;&#32;&#32;param_type()&#32;:&#32;param_type(1)&#32;{&#32;}
3082 
3083 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
3084 &#32;&#32;&#32;&#32;param_type(_RealType&#32;__m,&#32;_RealType&#32;__n&#32;=&#32;_RealType(1))
3085 &#32;&#32;&#32;&#32;:&#32;_M_m(__m),&#32;_M_n(__n)
3086 &#32;&#32;&#32;&#32;{&#32;}
3087 
3088 &#32;&#32;&#32;&#32;_RealType
3089 &#32;&#32;&#32;&#32;m()<emphasis role="keyword">&#32;const</emphasis>
3090 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_m;&#32;}
3091 
3092 &#32;&#32;&#32;&#32;_RealType
3093 &#32;&#32;&#32;&#32;n()<emphasis role="keyword">&#32;const</emphasis>
3094 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_n;&#32;}
3095 
3096 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3097 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p2)
3098 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__p1._M_m&#32;==&#32;__p2._M_m&#32;&amp;&amp;&#32;__p1._M_n&#32;==&#32;__p2._M_n;&#32;}
3099 
3100 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3101 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p2)
3102 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__p1&#32;==&#32;__p2);&#32;}
3103 
3104 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
3105 &#32;&#32;&#32;&#32;_RealType&#32;_M_m;
3106 &#32;&#32;&#32;&#32;_RealType&#32;_M_n;
3107 &#32;&#32;&#32;&#32;&#32;&#32;};
3108 
3109 &#32;&#32;&#32;&#32;&#32;&#32;fisher_f_distribution()&#32;:&#32;fisher_f_distribution(1.0)&#32;{&#32;}
3110 
3111 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
3112 &#32;&#32;&#32;&#32;&#32;&#32;fisher_f_distribution(_RealType&#32;__m,
3113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RealType&#32;__n&#32;=&#32;_RealType(1))
3114 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_param(__m,&#32;__n),&#32;_M_gd_x(__m&#32;/&#32;2),&#32;_M_gd_y(__n&#32;/&#32;2)
3115 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
3116 
3117 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
3118 &#32;&#32;&#32;&#32;&#32;&#32;fisher_f_distribution(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
3119 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_param(__p),&#32;_M_gd_x(__p.m()&#32;/&#32;2),&#32;_M_gd_y(__p.n()&#32;/&#32;2)
3120 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
3121 
3125 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
3126 &#32;&#32;&#32;&#32;&#32;&#32;reset()
3127 &#32;&#32;&#32;&#32;&#32;&#32;{
3128 &#32;&#32;&#32;&#32;_M_gd_x.reset();
3129 &#32;&#32;&#32;&#32;_M_gd_y.reset();
3130 &#32;&#32;&#32;&#32;&#32;&#32;}
3131 
3135 &#32;&#32;&#32;&#32;&#32;&#32;_RealType
3136 &#32;&#32;&#32;&#32;&#32;&#32;m()<emphasis role="keyword">&#32;const</emphasis>
3137 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param.m();&#32;}
3138 
3139 &#32;&#32;&#32;&#32;&#32;&#32;_RealType
3140 &#32;&#32;&#32;&#32;&#32;&#32;n()<emphasis role="keyword">&#32;const</emphasis>
3141 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param.n();&#32;}
3142 
3146 &#32;&#32;&#32;&#32;&#32;&#32;param_type
3147 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>()<emphasis role="keyword">&#32;const</emphasis>
3148 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param;&#32;}
3149 
3154 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
3155 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__param)
3156 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_param&#32;=&#32;__param;&#32;}
3157 
3161 &#32;&#32;&#32;&#32;&#32;&#32;result_type
3162 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>()<emphasis role="keyword">&#32;const</emphasis>
3163 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;result_type(0);&#32;}
3164 
3168 &#32;&#32;&#32;&#32;&#32;&#32;result_type
3169 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>()<emphasis role="keyword">&#32;const</emphasis>
3170 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::numeric_limits&lt;result_type&gt;::max();&#32;}
3171 
3175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
3176 &#32;&#32;&#32;&#32;result_type
3177 &#32;&#32;&#32;&#32;operator()(_UniformRandomNumberGenerator&amp;&#32;__urng)
3178 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(_M_gd_x(__urng)&#32;*&#32;n())&#32;/&#32;(_M_gd_y(__urng)&#32;*&#32;m());&#32;}
3179 
3180 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
3181 &#32;&#32;&#32;&#32;result_type
3182 &#32;&#32;&#32;&#32;operator()(_UniformRandomNumberGenerator&amp;&#32;__urng,
3183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
3184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3185 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::gamma_distribution&lt;result_type&gt;::param_type
3186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;param_type;
3187 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((_M_gd_x(__urng,&#32;param_type(__p.m()&#32;/&#32;2))&#32;*&#32;n())
3188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/&#32;(_M_gd_y(__urng,&#32;param_type(__p.n()&#32;/&#32;2))&#32;*&#32;m()));
3189 &#32;&#32;&#32;&#32;}
3190 
3191 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
3192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
3193 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
3194 &#32;&#32;&#32;&#32;__generate(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
3195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng)
3196 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng);&#32;}
3197 
3198 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
3199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
3200 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
3201 &#32;&#32;&#32;&#32;__generate(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
3202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
3203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
3204 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng,&#32;__p);&#32;}
3205 
3206 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
3207 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
3208 &#32;&#32;&#32;&#32;__generate(result_type*&#32;__f,&#32;result_type*&#32;__t,
3209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng)
3210 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng);&#32;}
3211 
3212 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
3213 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
3214 &#32;&#32;&#32;&#32;__generate(result_type*&#32;__f,&#32;result_type*&#32;__t,
3215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
3216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
3217 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng,&#32;__p);&#32;}
3218 
3224 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3225 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;fisher_f_distribution&amp;&#32;__d1,
3226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;fisher_f_distribution&amp;&#32;__d2)
3227 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__d1._M_param&#32;==&#32;__d2._M_param
3228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__d1._M_gd_x&#32;==&#32;__d2._M_gd_x
3229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__d1._M_gd_y&#32;==&#32;__d2._M_gd_y);&#32;}
3230 
3241 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
3242 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;
3243 &#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__os,
3244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::fisher_f_distribution&lt;_RealType1&gt;&amp;&#32;__x);
3245 
3256 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
3257 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;
3258 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a4560e59cc4f5ddaf0ec23d1a7050b611">operator&gt;&gt;</link>(std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__is,
3259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::fisher_f_distribution&lt;_RealType1&gt;&amp;&#32;__x);
3260 
3261 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
3262 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
3263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
3264 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
3265 &#32;&#32;&#32;&#32;__generate_impl(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
3266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng);
3267 
3268 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
3269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
3270 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
3271 &#32;&#32;&#32;&#32;__generate_impl(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
3272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
3273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p);
3274 
3275 &#32;&#32;&#32;&#32;&#32;&#32;param_type&#32;_M_param;
3276 
3277 &#32;&#32;&#32;&#32;&#32;&#32;std::gamma_distribution&lt;result_type&gt;&#32;_M_gd_x,&#32;_M_gd_y;
3278 &#32;&#32;&#32;&#32;};
3279 
3283 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType&gt;
3284 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3285 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;std::fisher_f_distribution&lt;_RealType&gt;&amp;&#32;__d1,
3286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::fisher_f_distribution&lt;_RealType&gt;&amp;&#32;__d2)
3287 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__d1&#32;==&#32;__d2);&#32;}
3288 
3298 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType&#32;=&#32;<emphasis role="keywordtype">double</emphasis>&gt;
3299 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>student_t_distribution
3300 &#32;&#32;&#32;&#32;{
3301 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_floating_point&lt;_RealType&gt;::value,
3302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;result_type&#32;must&#32;be&#32;a&#32;floating&#32;point&#32;type&quot;</emphasis>);
3303 
3304 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
3306 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_RealType&#32;result_type;
3307 
3309 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>param_type
3310 &#32;&#32;&#32;&#32;&#32;&#32;{
3311 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;student_t_distribution&lt;_RealType&gt;&#32;distribution_type;
3312 
3313 &#32;&#32;&#32;&#32;param_type()&#32;:&#32;param_type(1)&#32;{&#32;}
3314 
3315 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
3316 &#32;&#32;&#32;&#32;param_type(_RealType&#32;__n)
3317 &#32;&#32;&#32;&#32;:&#32;_M_n(__n)
3318 &#32;&#32;&#32;&#32;{&#32;}
3319 
3320 &#32;&#32;&#32;&#32;_RealType
3321 &#32;&#32;&#32;&#32;n()<emphasis role="keyword">&#32;const</emphasis>
3322 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_n;&#32;}
3323 
3324 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3325 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p2)
3326 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__p1._M_n&#32;==&#32;__p2._M_n;&#32;}
3327 
3328 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3329 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p2)
3330 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__p1&#32;==&#32;__p2);&#32;}
3331 
3332 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
3333 &#32;&#32;&#32;&#32;_RealType&#32;_M_n;
3334 &#32;&#32;&#32;&#32;&#32;&#32;};
3335 
3336 &#32;&#32;&#32;&#32;&#32;&#32;student_t_distribution()&#32;:&#32;student_t_distribution(1.0)&#32;{&#32;}
3337 
3338 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
3339 &#32;&#32;&#32;&#32;&#32;&#32;student_t_distribution(_RealType&#32;__n)
3340 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_param(__n),&#32;_M_nd(),&#32;_M_gd(__n&#32;/&#32;2,&#32;2)
3341 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
3342 
3343 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
3344 &#32;&#32;&#32;&#32;&#32;&#32;student_t_distribution(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
3345 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_param(__p),&#32;_M_nd(),&#32;_M_gd(__p.n()&#32;/&#32;2,&#32;2)
3346 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
3347 
3351 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
3352 &#32;&#32;&#32;&#32;&#32;&#32;reset()
3353 &#32;&#32;&#32;&#32;&#32;&#32;{
3354 &#32;&#32;&#32;&#32;_M_nd.reset();
3355 &#32;&#32;&#32;&#32;_M_gd.reset();
3356 &#32;&#32;&#32;&#32;&#32;&#32;}
3357 
3361 &#32;&#32;&#32;&#32;&#32;&#32;_RealType
3362 &#32;&#32;&#32;&#32;&#32;&#32;n()<emphasis role="keyword">&#32;const</emphasis>
3363 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param.n();&#32;}
3364 
3368 &#32;&#32;&#32;&#32;&#32;&#32;param_type
3369 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>()<emphasis role="keyword">&#32;const</emphasis>
3370 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param;&#32;}
3371 
3376 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
3377 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__param)
3378 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_param&#32;=&#32;__param;&#32;}
3379 
3383 &#32;&#32;&#32;&#32;&#32;&#32;result_type
3384 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>()<emphasis role="keyword">&#32;const</emphasis>
3385 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::numeric_limits&lt;result_type&gt;::lowest();&#32;}
3386 
3390 &#32;&#32;&#32;&#32;&#32;&#32;result_type
3391 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>()<emphasis role="keyword">&#32;const</emphasis>
3392 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::numeric_limits&lt;result_type&gt;::max();&#32;}
3393 
3397 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
3398 &#32;&#32;&#32;&#32;result_type
3399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;operator()(_UniformRandomNumberGenerator&amp;&#32;__urng)
3400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_nd(__urng)&#32;*&#32;std::sqrt(n()&#32;/&#32;_M_gd(__urng));&#32;}
3401 
3402 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
3403 &#32;&#32;&#32;&#32;result_type
3404 &#32;&#32;&#32;&#32;operator()(_UniformRandomNumberGenerator&amp;&#32;__urng,
3405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
3406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3407 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::gamma_distribution&lt;result_type&gt;::param_type
3408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;param_type;
3409 &#32;&#32;&#32;&#32;
3410 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;result_type&#32;__g&#32;=&#32;_M_gd(__urng,&#32;param_type(__p.n()&#32;/&#32;2,&#32;2));
3411 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_nd(__urng)&#32;*&#32;std::sqrt(__p.n()&#32;/&#32;__g);
3412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3413 
3414 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
3415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
3416 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
3417 &#32;&#32;&#32;&#32;__generate(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
3418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng)
3419 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng);&#32;}
3420 
3421 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
3422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
3423 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
3424 &#32;&#32;&#32;&#32;__generate(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
3425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
3426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
3427 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng,&#32;__p);&#32;}
3428 
3429 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
3430 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
3431 &#32;&#32;&#32;&#32;__generate(result_type*&#32;__f,&#32;result_type*&#32;__t,
3432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng)
3433 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng);&#32;}
3434 
3435 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
3436 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
3437 &#32;&#32;&#32;&#32;__generate(result_type*&#32;__f,&#32;result_type*&#32;__t,
3438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
3439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
3440 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng,&#32;__p);&#32;}
3441 
3447 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3448 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;student_t_distribution&amp;&#32;__d1,
3449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;student_t_distribution&amp;&#32;__d2)
3450 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__d1._M_param&#32;==&#32;__d2._M_param
3451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__d1._M_nd&#32;==&#32;__d2._M_nd&#32;&amp;&amp;&#32;__d1._M_gd&#32;==&#32;__d2._M_gd);&#32;}
3452 
3463 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
3464 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;
3465 &#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__os,
3466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::student_t_distribution&lt;_RealType1&gt;&amp;&#32;__x);
3467 
3478 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
3479 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;
3480 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a4560e59cc4f5ddaf0ec23d1a7050b611">operator&gt;&gt;</link>(std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__is,
3481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::student_t_distribution&lt;_RealType1&gt;&amp;&#32;__x);
3482 
3483 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
3484 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
3485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
3486 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
3487 &#32;&#32;&#32;&#32;__generate_impl(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
3488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng);
3489 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
3490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
3491 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
3492 &#32;&#32;&#32;&#32;__generate_impl(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
3493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
3494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p);
3495 
3496 &#32;&#32;&#32;&#32;&#32;&#32;param_type&#32;_M_param;
3497 
3498 &#32;&#32;&#32;&#32;&#32;&#32;std::normal_distribution&lt;result_type&gt;&#32;_M_nd;
3499 &#32;&#32;&#32;&#32;&#32;&#32;std::gamma_distribution&lt;result_type&gt;&#32;_M_gd;
3500 &#32;&#32;&#32;&#32;};
3501 
3505 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType&gt;
3506 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3507 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;std::student_t_distribution&lt;_RealType&gt;&amp;&#32;__d1,
3508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::student_t_distribution&lt;_RealType&gt;&amp;&#32;__d2)
3509 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__d1&#32;==&#32;__d2);&#32;}
3510 
3511 
3513 
3526 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>bernoulli_distribution
3527 &#32;&#32;{
3528 &#32;&#32;<emphasis role="keyword">public</emphasis>:
3530 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;result_type;
3531 
3533 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>param_type
3534 &#32;&#32;&#32;&#32;{
3535 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;bernoulli_distribution&#32;distribution_type;
3536 
3537 &#32;&#32;&#32;&#32;&#32;&#32;param_type()&#32;:&#32;param_type(0.5)&#32;{&#32;}
3538 
3539 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
3540 &#32;&#32;&#32;&#32;&#32;&#32;param_type(<emphasis role="keywordtype">double</emphasis>&#32;__p)
3541 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_p(__p)
3542 &#32;&#32;&#32;&#32;&#32;&#32;{
3543 &#32;&#32;&#32;&#32;__glibcxx_assert((_M_p&#32;&gt;=&#32;0.0)&#32;&amp;&amp;&#32;(_M_p&#32;&lt;=&#32;1.0));
3544 &#32;&#32;&#32;&#32;&#32;&#32;}
3545 
3546 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>
3547 &#32;&#32;&#32;&#32;&#32;&#32;p()<emphasis role="keyword">&#32;const</emphasis>
3548 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_p;&#32;}
3549 
3550 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3551 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p2)
3552 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__p1._M_p&#32;==&#32;__p2._M_p;&#32;}
3553 
3554 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3555 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p2)
3556 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__p1&#32;==&#32;__p2);&#32;}
3557 
3558 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
3559 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;_M_p;
3560 &#32;&#32;&#32;&#32;};
3561 
3562 &#32;&#32;<emphasis role="keyword">public</emphasis>:
3566 &#32;&#32;&#32;&#32;bernoulli_distribution()&#32;:&#32;bernoulli_distribution(0.5)&#32;{&#32;}
3567 
3574 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
3575 &#32;&#32;&#32;&#32;bernoulli_distribution(<emphasis role="keywordtype">double</emphasis>&#32;__p)
3576 &#32;&#32;&#32;&#32;:&#32;_M_param(__p)
3577 &#32;&#32;&#32;&#32;{&#32;}
3578 
3579 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
3580 &#32;&#32;&#32;&#32;bernoulli_distribution(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
3581 &#32;&#32;&#32;&#32;:&#32;_M_param(__p)
3582 &#32;&#32;&#32;&#32;{&#32;}
3583 
3589 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
3590 &#32;&#32;&#32;&#32;reset()&#32;{&#32;}
3591 
3595 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>
3596 &#32;&#32;&#32;&#32;p()<emphasis role="keyword">&#32;const</emphasis>
3597 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param.p();&#32;}
3598 
3602 &#32;&#32;&#32;&#32;param_type
3603 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>()<emphasis role="keyword">&#32;const</emphasis>
3604 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param;&#32;}
3605 
3610 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
3611 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__param)
3612 &#32;&#32;&#32;&#32;{&#32;_M_param&#32;=&#32;__param;&#32;}
3613 
3617 &#32;&#32;&#32;&#32;result_type
3618 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>()<emphasis role="keyword">&#32;const</emphasis>
3619 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::numeric_limits&lt;result_type&gt;::min();&#32;}
3620 
3624 &#32;&#32;&#32;&#32;result_type
3625 &#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>()<emphasis role="keyword">&#32;const</emphasis>
3626 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::numeric_limits&lt;result_type&gt;::max();&#32;}
3627 
3631 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
3632 &#32;&#32;&#32;&#32;&#32;&#32;result_type
3633 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_UniformRandomNumberGenerator&amp;&#32;__urng)
3634 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;operator()(__urng,&#32;_M_param);&#32;}
3635 
3636 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
3637 &#32;&#32;&#32;&#32;&#32;&#32;result_type
3638 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_UniformRandomNumberGenerator&amp;&#32;__urng,
3639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
3640 &#32;&#32;&#32;&#32;&#32;&#32;{
3641 &#32;&#32;&#32;&#32;__detail::_Adaptor&lt;_UniformRandomNumberGenerator,&#32;double&gt;
3642 &#32;&#32;&#32;&#32;&#32;&#32;__aurng(__urng);
3643 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((__aurng()&#32;-&#32;__aurng.min())
3644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&#32;__p.p()&#32;*&#32;(__aurng.max()&#32;-&#32;__aurng.min()))
3645 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
3646 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
3647 &#32;&#32;&#32;&#32;&#32;&#32;}
3648 
3649 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
3650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
3651 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
3652 &#32;&#32;&#32;&#32;&#32;&#32;__generate(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
3653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng)
3654 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;this-&gt;__generate(__f,&#32;__t,&#32;__urng,&#32;_M_param);&#32;}
3655 
3656 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
3657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
3658 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
3659 &#32;&#32;&#32;&#32;&#32;&#32;__generate(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
3660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
3661 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng,&#32;__p);&#32;}
3662 
3663 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
3664 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
3665 &#32;&#32;&#32;&#32;&#32;&#32;__generate(result_type*&#32;__f,&#32;result_type*&#32;__t,
3666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
3667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
3668 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng,&#32;__p);&#32;}
3669 
3674 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3675 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;bernoulli_distribution&amp;&#32;__d1,
3676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;bernoulli_distribution&amp;&#32;__d2)
3677 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__d1._M_param&#32;==&#32;__d2._M_param;&#32;}
3678 
3679 &#32;&#32;<emphasis role="keyword">private</emphasis>:
3680 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
3681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
3682 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
3683 &#32;&#32;&#32;&#32;&#32;&#32;__generate_impl(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
3684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
3685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p);
3686 
3687 &#32;&#32;&#32;&#32;param_type&#32;_M_param;
3688 &#32;&#32;};
3689 
3694 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3695 &#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;std::bernoulli_distribution&amp;&#32;__d1,
3696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::bernoulli_distribution&amp;&#32;__d2)
3697 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__d1&#32;==&#32;__d2);&#32;}
3698 
3709 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
3710 &#32;&#32;&#32;&#32;std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;
3711 &#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__os,
3712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::bernoulli_distribution&amp;&#32;__x);
3713 
3723 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
3724 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;
3725 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a4560e59cc4f5ddaf0ec23d1a7050b611">operator&gt;&gt;</link>(std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__is,
3726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::bernoulli_distribution&amp;&#32;__x)
3727 &#32;&#32;&#32;&#32;{
3728 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;__p;
3729 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__is&#32;&gt;&gt;&#32;__p)
3730 &#32;&#32;&#32;&#32;__x.param(bernoulli_distribution::param_type(__p));
3731 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__is;
3732 &#32;&#32;&#32;&#32;}
3733 
3734 
3742 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IntType&#32;=&#32;<emphasis role="keywordtype">int</emphasis>&gt;
3743 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>binomial_distribution
3744 &#32;&#32;&#32;&#32;{
3745 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_integral&lt;_IntType&gt;::value,
3746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;result_type&#32;must&#32;be&#32;an&#32;integral&#32;type&quot;</emphasis>);
3747 
3748 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
3750 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_IntType&#32;result_type;
3751 
3753 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>param_type
3754 &#32;&#32;&#32;&#32;&#32;&#32;{
3755 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;binomial_distribution&lt;_IntType&gt;&#32;distribution_type;
3756 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>binomial_distribution&lt;_IntType&gt;;
3757 
3758 &#32;&#32;&#32;&#32;param_type()&#32;:&#32;param_type(1)&#32;{&#32;}
3759 
3760 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
3761 &#32;&#32;&#32;&#32;param_type(_IntType&#32;__t,&#32;<emphasis role="keywordtype">double</emphasis>&#32;__p&#32;=&#32;0.5)
3762 &#32;&#32;&#32;&#32;:&#32;_M_t(__t),&#32;_M_p(__p)
3763 &#32;&#32;&#32;&#32;{
3764 &#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert((_M_t&#32;&gt;=&#32;_IntType(0))
3765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(_M_p&#32;&gt;=&#32;0.0)
3766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(_M_p&#32;&lt;=&#32;1.0));
3767 &#32;&#32;&#32;&#32;&#32;&#32;_M_initialize();
3768 &#32;&#32;&#32;&#32;}
3769 
3770 &#32;&#32;&#32;&#32;_IntType
3771 &#32;&#32;&#32;&#32;t()<emphasis role="keyword">&#32;const</emphasis>
3772 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t;&#32;}
3773 
3774 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>
3775 &#32;&#32;&#32;&#32;p()<emphasis role="keyword">&#32;const</emphasis>
3776 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_p;&#32;}
3777 
3778 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3779 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p2)
3780 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__p1._M_t&#32;==&#32;__p2._M_t&#32;&amp;&amp;&#32;__p1._M_p&#32;==&#32;__p2._M_p;&#32;}
3781 
3782 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3783 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p2)
3784 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__p1&#32;==&#32;__p2);&#32;}
3785 
3786 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
3787 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
3788 &#32;&#32;&#32;&#32;_M_initialize();
3789 
3790 &#32;&#32;&#32;&#32;_IntType&#32;_M_t;
3791 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;_M_p;
3792 
3793 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;_M_q;
3794 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_C99_MATH_TR1</emphasis>
3795 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;_M_d1,&#32;_M_d2,&#32;_M_s1,&#32;_M_s2,&#32;_M_c,
3796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_a1,&#32;_M_a123,&#32;_M_s,&#32;_M_lf,&#32;_M_lp1p;
3797 <emphasis role="preprocessor">#endif</emphasis>
3798 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;_M_easy;
3799 &#32;&#32;&#32;&#32;&#32;&#32;};
3800 
3801 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;constructors&#32;and&#32;member&#32;functions</emphasis>
3802 
3803 &#32;&#32;&#32;&#32;&#32;&#32;binomial_distribution()&#32;:&#32;binomial_distribution(1)&#32;{&#32;}
3804 
3805 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
3806 &#32;&#32;&#32;&#32;&#32;&#32;binomial_distribution(_IntType&#32;__t,&#32;<emphasis role="keywordtype">double</emphasis>&#32;__p&#32;=&#32;0.5)
3807 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_param(__t,&#32;__p),&#32;_M_nd()
3808 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
3809 
3810 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
3811 &#32;&#32;&#32;&#32;&#32;&#32;binomial_distribution(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
3812 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_param(__p),&#32;_M_nd()
3813 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
3814 
3818 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
3819 &#32;&#32;&#32;&#32;&#32;&#32;reset()
3820 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_nd.reset();&#32;}
3821 
3825 &#32;&#32;&#32;&#32;&#32;&#32;_IntType
3826 &#32;&#32;&#32;&#32;&#32;&#32;t()<emphasis role="keyword">&#32;const</emphasis>
3827 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param.t();&#32;}
3828 
3832 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>
3833 &#32;&#32;&#32;&#32;&#32;&#32;p()<emphasis role="keyword">&#32;const</emphasis>
3834 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param.p();&#32;}
3835 
3839 &#32;&#32;&#32;&#32;&#32;&#32;param_type
3840 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>()<emphasis role="keyword">&#32;const</emphasis>
3841 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param;&#32;}
3842 
3847 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
3848 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__param)
3849 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_param&#32;=&#32;__param;&#32;}
3850 
3854 &#32;&#32;&#32;&#32;&#32;&#32;result_type
3855 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>()<emphasis role="keyword">&#32;const</emphasis>
3856 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;}
3857 
3861 &#32;&#32;&#32;&#32;&#32;&#32;result_type
3862 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>()<emphasis role="keyword">&#32;const</emphasis>
3863 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param.t();&#32;}
3864 
3868 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
3869 &#32;&#32;&#32;&#32;result_type
3870 &#32;&#32;&#32;&#32;operator()(_UniformRandomNumberGenerator&amp;&#32;__urng)
3871 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;operator()(__urng,&#32;_M_param);&#32;}
3872 
3873 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
3874 &#32;&#32;&#32;&#32;result_type
3875 &#32;&#32;&#32;&#32;operator()(_UniformRandomNumberGenerator&amp;&#32;__urng,
3876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p);
3877 
3878 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
3879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
3880 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
3881 &#32;&#32;&#32;&#32;__generate(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
3882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng)
3883 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate(__f,&#32;__t,&#32;__urng,&#32;_M_param);&#32;}
3884 
3885 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
3886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
3887 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
3888 &#32;&#32;&#32;&#32;__generate(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
3889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
3890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
3891 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng,&#32;__p);&#32;}
3892 
3893 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
3894 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
3895 &#32;&#32;&#32;&#32;__generate(result_type*&#32;__f,&#32;result_type*&#32;__t,
3896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
3897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
3898 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng,&#32;__p);&#32;}
3899 
3905 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;binomial_distribution&amp;&#32;__d1,
3907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;binomial_distribution&amp;&#32;__d2)
3908 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_C99_MATH_TR1</emphasis>
3909 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__d1._M_param&#32;==&#32;__d2._M_param&#32;&amp;&amp;&#32;__d1._M_nd&#32;==&#32;__d2._M_nd;&#32;}
3910 <emphasis role="preprocessor">#else</emphasis>
3911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__d1._M_param&#32;==&#32;__d2._M_param;&#32;}
3912 <emphasis role="preprocessor">#endif</emphasis>
3913 
3924 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IntType1,
3925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
3926 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;
3927 &#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__os,
3928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::binomial_distribution&lt;_IntType1&gt;&amp;&#32;__x);
3929 
3940 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IntType1,
3941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
3942 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;
3943 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a4560e59cc4f5ddaf0ec23d1a7050b611">operator&gt;&gt;</link>(std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__is,
3944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::binomial_distribution&lt;_IntType1&gt;&amp;&#32;__x);
3945 
3946 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
3947 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
3948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
3949 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
3950 &#32;&#32;&#32;&#32;__generate_impl(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
3951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
3952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p);
3953 
3954 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
3955 &#32;&#32;&#32;&#32;result_type
3956 &#32;&#32;&#32;&#32;_M_waiting(_UniformRandomNumberGenerator&amp;&#32;__urng,
3957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IntType&#32;__t,&#32;<emphasis role="keywordtype">double</emphasis>&#32;__q);
3958 
3959 &#32;&#32;&#32;&#32;&#32;&#32;param_type&#32;_M_param;
3960 
3961 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NB:&#32;Unused&#32;when&#32;_GLIBCXX_USE_C99_MATH_TR1&#32;is&#32;undefined.</emphasis>
3962 &#32;&#32;&#32;&#32;&#32;&#32;std::normal_distribution&lt;double&gt;&#32;_M_nd;
3963 &#32;&#32;&#32;&#32;};
3964 
3968 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IntType&gt;
3969 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3970 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;std::binomial_distribution&lt;_IntType&gt;&amp;&#32;__d1,
3971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::binomial_distribution&lt;_IntType&gt;&amp;&#32;__d2)
3972 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__d1&#32;==&#32;__d2);&#32;}
3973 
3974 
3982 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IntType&#32;=&#32;<emphasis role="keywordtype">int</emphasis>&gt;
3983 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>geometric_distribution
3984 &#32;&#32;&#32;&#32;{
3985 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_integral&lt;_IntType&gt;::value,
3986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;result_type&#32;must&#32;be&#32;an&#32;integral&#32;type&quot;</emphasis>);
3987 
3988 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
3990 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_IntType&#32;&#32;result_type;
3991 
3993 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>param_type
3994 &#32;&#32;&#32;&#32;&#32;&#32;{
3995 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;geometric_distribution&lt;_IntType&gt;&#32;distribution_type;
3996 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>geometric_distribution&lt;_IntType&gt;;
3997 
3998 &#32;&#32;&#32;&#32;param_type()&#32;:&#32;param_type(0.5)&#32;{&#32;}
3999 
4000 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
4001 &#32;&#32;&#32;&#32;param_type(<emphasis role="keywordtype">double</emphasis>&#32;__p)
4002 &#32;&#32;&#32;&#32;:&#32;_M_p(__p)
4003 &#32;&#32;&#32;&#32;{
4004 &#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert((_M_p&#32;&gt;&#32;0.0)&#32;&amp;&amp;&#32;(_M_p&#32;&lt;&#32;1.0));
4005 &#32;&#32;&#32;&#32;&#32;&#32;_M_initialize();
4006 &#32;&#32;&#32;&#32;}
4007 
4008 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>
4009 &#32;&#32;&#32;&#32;p()<emphasis role="keyword">&#32;const</emphasis>
4010 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_p;&#32;}
4011 
4012 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
4013 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p2)
4014 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__p1._M_p&#32;==&#32;__p2._M_p;&#32;}
4015 
4016 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
4017 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p2)
4018 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__p1&#32;==&#32;__p2);&#32;}
4019 
4020 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
4021 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
4022 &#32;&#32;&#32;&#32;_M_initialize()
4023 &#32;&#32;&#32;&#32;{&#32;_M_log_1_p&#32;=&#32;std::log(1.0&#32;-&#32;_M_p);&#32;}
4024 
4025 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;_M_p;
4026 
4027 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;_M_log_1_p;
4028 &#32;&#32;&#32;&#32;&#32;&#32;};
4029 
4030 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;constructors&#32;and&#32;member&#32;functions</emphasis>
4031 
4032 &#32;&#32;&#32;&#32;&#32;&#32;geometric_distribution()&#32;:&#32;geometric_distribution(0.5)&#32;{&#32;}
4033 
4034 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
4035 &#32;&#32;&#32;&#32;&#32;&#32;geometric_distribution(<emphasis role="keywordtype">double</emphasis>&#32;__p)
4036 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_param(__p)
4037 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
4038 
4039 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
4040 &#32;&#32;&#32;&#32;&#32;&#32;geometric_distribution(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
4041 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_param(__p)
4042 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
4043 
4049 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
4050 &#32;&#32;&#32;&#32;&#32;&#32;reset()&#32;{&#32;}
4051 
4055 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>
4056 &#32;&#32;&#32;&#32;&#32;&#32;p()<emphasis role="keyword">&#32;const</emphasis>
4057 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param.p();&#32;}
4058 
4062 &#32;&#32;&#32;&#32;&#32;&#32;param_type
4063 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>()<emphasis role="keyword">&#32;const</emphasis>
4064 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param;&#32;}
4065 
4070 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
4071 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__param)
4072 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_param&#32;=&#32;__param;&#32;}
4073 
4077 &#32;&#32;&#32;&#32;&#32;&#32;result_type
4078 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>()<emphasis role="keyword">&#32;const</emphasis>
4079 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;}
4080 
4084 &#32;&#32;&#32;&#32;&#32;&#32;result_type
4085 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>()<emphasis role="keyword">&#32;const</emphasis>
4086 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::numeric_limits&lt;result_type&gt;::max();&#32;}
4087 
4091 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
4092 &#32;&#32;&#32;&#32;result_type
4093 &#32;&#32;&#32;&#32;operator()(_UniformRandomNumberGenerator&amp;&#32;__urng)
4094 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;operator()(__urng,&#32;_M_param);&#32;}
4095 
4096 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
4097 &#32;&#32;&#32;&#32;result_type
4098 &#32;&#32;&#32;&#32;operator()(_UniformRandomNumberGenerator&amp;&#32;__urng,
4099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p);
4100 
4101 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
4102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
4103 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
4104 &#32;&#32;&#32;&#32;__generate(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
4105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng)
4106 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate(__f,&#32;__t,&#32;__urng,&#32;_M_param);&#32;}
4107 
4108 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
4109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
4110 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
4111 &#32;&#32;&#32;&#32;__generate(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
4112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
4113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
4114 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng,&#32;__p);&#32;}
4115 
4116 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
4117 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
4118 &#32;&#32;&#32;&#32;__generate(result_type*&#32;__f,&#32;result_type*&#32;__t,
4119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
4120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
4121 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng,&#32;__p);&#32;}
4122 
4127 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
4128 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;geometric_distribution&amp;&#32;__d1,
4129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;geometric_distribution&amp;&#32;__d2)
4130 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__d1._M_param&#32;==&#32;__d2._M_param;&#32;}
4131 
4132 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
4133 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
4134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
4135 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
4136 &#32;&#32;&#32;&#32;__generate_impl(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
4137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
4138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p);
4139 
4140 &#32;&#32;&#32;&#32;&#32;&#32;param_type&#32;_M_param;
4141 &#32;&#32;&#32;&#32;};
4142 
4147 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IntType&gt;
4148 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
4149 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;std::geometric_distribution&lt;_IntType&gt;&amp;&#32;__d1,
4150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::geometric_distribution&lt;_IntType&gt;&amp;&#32;__d2)
4151 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__d1&#32;==&#32;__d2);&#32;}
4152 
4163 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IntType,
4164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
4165 &#32;&#32;&#32;&#32;std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;
4166 &#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__os,
4167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::geometric_distribution&lt;_IntType&gt;&amp;&#32;__x);
4168 
4178 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IntType,
4179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
4180 &#32;&#32;&#32;&#32;std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;
4181 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a4560e59cc4f5ddaf0ec23d1a7050b611">operator&gt;&gt;</link>(std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__is,
4182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::geometric_distribution&lt;_IntType&gt;&amp;&#32;__x);
4183 
4184 
4192 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IntType&#32;=&#32;<emphasis role="keywordtype">int</emphasis>&gt;
4193 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>negative_binomial_distribution
4194 &#32;&#32;&#32;&#32;{
4195 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_integral&lt;_IntType&gt;::value,
4196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;result_type&#32;must&#32;be&#32;an&#32;integral&#32;type&quot;</emphasis>);
4197 
4198 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
4200 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_IntType&#32;result_type;
4201 
4203 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>param_type
4204 &#32;&#32;&#32;&#32;&#32;&#32;{
4205 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;negative_binomial_distribution&lt;_IntType&gt;&#32;distribution_type;
4206 
4207 &#32;&#32;&#32;&#32;param_type()&#32;:&#32;param_type(1)&#32;{&#32;}
4208 
4209 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
4210 &#32;&#32;&#32;&#32;param_type(_IntType&#32;__k,&#32;<emphasis role="keywordtype">double</emphasis>&#32;__p&#32;=&#32;0.5)
4211 &#32;&#32;&#32;&#32;:&#32;_M_k(__k),&#32;_M_p(__p)
4212 &#32;&#32;&#32;&#32;{
4213 &#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert((_M_k&#32;&gt;&#32;0)&#32;&amp;&amp;&#32;(_M_p&#32;&gt;&#32;0.0)&#32;&amp;&amp;&#32;(_M_p&#32;&lt;=&#32;1.0));
4214 &#32;&#32;&#32;&#32;}
4215 
4216 &#32;&#32;&#32;&#32;_IntType
4217 &#32;&#32;&#32;&#32;k()<emphasis role="keyword">&#32;const</emphasis>
4218 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_k;&#32;}
4219 
4220 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>
4221 &#32;&#32;&#32;&#32;p()<emphasis role="keyword">&#32;const</emphasis>
4222 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_p;&#32;}
4223 
4224 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
4225 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p2)
4226 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__p1._M_k&#32;==&#32;__p2._M_k&#32;&amp;&amp;&#32;__p1._M_p&#32;==&#32;__p2._M_p;&#32;}
4227 
4228 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
4229 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p2)
4230 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__p1&#32;==&#32;__p2);&#32;}
4231 
4232 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
4233 &#32;&#32;&#32;&#32;_IntType&#32;_M_k;
4234 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;_M_p;
4235 &#32;&#32;&#32;&#32;&#32;&#32;};
4236 
4237 &#32;&#32;&#32;&#32;&#32;&#32;negative_binomial_distribution()&#32;:&#32;negative_binomial_distribution(1)&#32;{&#32;}
4238 
4239 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
4240 &#32;&#32;&#32;&#32;&#32;&#32;negative_binomial_distribution(_IntType&#32;__k,&#32;<emphasis role="keywordtype">double</emphasis>&#32;__p&#32;=&#32;0.5)
4241 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_param(__k,&#32;__p),&#32;_M_gd(__k,&#32;(1.0&#32;-&#32;__p)&#32;/&#32;__p)
4242 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
4243 
4244 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
4245 &#32;&#32;&#32;&#32;&#32;&#32;negative_binomial_distribution(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
4246 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_param(__p),&#32;_M_gd(__p.k(),&#32;(1.0&#32;-&#32;__p.p())&#32;/&#32;__p.p())
4247 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
4248 
4252 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
4253 &#32;&#32;&#32;&#32;&#32;&#32;reset()
4254 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_gd.reset();&#32;}
4255 
4259 &#32;&#32;&#32;&#32;&#32;&#32;_IntType
4260 &#32;&#32;&#32;&#32;&#32;&#32;k()<emphasis role="keyword">&#32;const</emphasis>
4261 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param.k();&#32;}
4262 
4266 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>
4267 &#32;&#32;&#32;&#32;&#32;&#32;p()<emphasis role="keyword">&#32;const</emphasis>
4268 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param.p();&#32;}
4269 
4273 &#32;&#32;&#32;&#32;&#32;&#32;param_type
4274 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>()<emphasis role="keyword">&#32;const</emphasis>
4275 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param;&#32;}
4276 
4281 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
4282 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__param)
4283 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_param&#32;=&#32;__param;&#32;}
4284 
4288 &#32;&#32;&#32;&#32;&#32;&#32;result_type
4289 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>()<emphasis role="keyword">&#32;const</emphasis>
4290 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;result_type(0);&#32;}
4291 
4295 &#32;&#32;&#32;&#32;&#32;&#32;result_type
4296 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>()<emphasis role="keyword">&#32;const</emphasis>
4297 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::numeric_limits&lt;result_type&gt;::max();&#32;}
4298 
4302 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
4303 &#32;&#32;&#32;&#32;result_type
4304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;operator()(_UniformRandomNumberGenerator&amp;&#32;__urng);
4305 
4306 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
4307 &#32;&#32;&#32;&#32;result_type
4308 &#32;&#32;&#32;&#32;operator()(_UniformRandomNumberGenerator&amp;&#32;__urng,
4309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p);
4310 
4311 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
4312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
4313 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
4314 &#32;&#32;&#32;&#32;__generate(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
4315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng)
4316 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng);&#32;}
4317 
4318 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
4319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
4320 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
4321 &#32;&#32;&#32;&#32;__generate(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
4322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
4323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
4324 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng,&#32;__p);&#32;}
4325 
4326 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
4327 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
4328 &#32;&#32;&#32;&#32;__generate(result_type*&#32;__f,&#32;result_type*&#32;__t,
4329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng)
4330 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng);&#32;}
4331 
4332 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
4333 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
4334 &#32;&#32;&#32;&#32;__generate(result_type*&#32;__f,&#32;result_type*&#32;__t,
4335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
4336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
4337 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng,&#32;__p);&#32;}
4338 
4344 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
4345 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;negative_binomial_distribution&amp;&#32;__d1,
4346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;negative_binomial_distribution&amp;&#32;__d2)
4347 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__d1._M_param&#32;==&#32;__d2._M_param&#32;&amp;&amp;&#32;__d1._M_gd&#32;==&#32;__d2._M_gd;&#32;}
4348 
4360 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IntType1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
4361 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;
4362 &#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__os,
4363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::negative_binomial_distribution&lt;_IntType1&gt;&amp;&#32;__x);
4364 
4375 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IntType1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
4376 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;
4377 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a4560e59cc4f5ddaf0ec23d1a7050b611">operator&gt;&gt;</link>(std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__is,
4378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::negative_binomial_distribution&lt;_IntType1&gt;&amp;&#32;__x);
4379 
4380 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
4381 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
4382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
4383 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
4384 &#32;&#32;&#32;&#32;__generate_impl(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
4385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng);
4386 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
4387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
4388 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
4389 &#32;&#32;&#32;&#32;__generate_impl(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
4390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
4391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p);
4392 
4393 &#32;&#32;&#32;&#32;&#32;&#32;param_type&#32;_M_param;
4394 
4395 &#32;&#32;&#32;&#32;&#32;&#32;std::gamma_distribution&lt;double&gt;&#32;_M_gd;
4396 &#32;&#32;&#32;&#32;};
4397 
4401 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IntType&gt;
4402 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
4403 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;std::negative_binomial_distribution&lt;_IntType&gt;&amp;&#32;__d1,
4404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::negative_binomial_distribution&lt;_IntType&gt;&amp;&#32;__d2)
4405 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__d1&#32;==&#32;__d2);&#32;}
4406 
4407 
4409 
4423 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IntType&#32;=&#32;<emphasis role="keywordtype">int</emphasis>&gt;
4424 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>poisson_distribution
4425 &#32;&#32;&#32;&#32;{
4426 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_integral&lt;_IntType&gt;::value,
4427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;result_type&#32;must&#32;be&#32;an&#32;integral&#32;type&quot;</emphasis>);
4428 
4429 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
4431 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_IntType&#32;&#32;result_type;
4432 
4434 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>param_type
4435 &#32;&#32;&#32;&#32;&#32;&#32;{
4436 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;poisson_distribution&lt;_IntType&gt;&#32;distribution_type;
4437 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>poisson_distribution&lt;_IntType&gt;;
4438 
4439 &#32;&#32;&#32;&#32;param_type()&#32;:&#32;param_type(1.0)&#32;{&#32;}
4440 
4441 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
4442 &#32;&#32;&#32;&#32;param_type(<emphasis role="keywordtype">double</emphasis>&#32;__mean)
4443 &#32;&#32;&#32;&#32;:&#32;_M_mean(__mean)
4444 &#32;&#32;&#32;&#32;{
4445 &#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(_M_mean&#32;&gt;&#32;0.0);
4446 &#32;&#32;&#32;&#32;&#32;&#32;_M_initialize();
4447 &#32;&#32;&#32;&#32;}
4448 
4449 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>
4450 &#32;&#32;&#32;&#32;mean()<emphasis role="keyword">&#32;const</emphasis>
4451 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_mean;&#32;}
4452 
4453 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
4454 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p2)
4455 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__p1._M_mean&#32;==&#32;__p2._M_mean;&#32;}
4456 
4457 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
4458 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p2)
4459 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__p1&#32;==&#32;__p2);&#32;}
4460 
4461 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
4462 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Hosts&#32;either&#32;log(mean)&#32;or&#32;the&#32;threshold&#32;of&#32;the&#32;simple&#32;method.</emphasis>
4463 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
4464 &#32;&#32;&#32;&#32;_M_initialize();
4465 
4466 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;_M_mean;
4467 
4468 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;_M_lm_thr;
4469 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_C99_MATH_TR1</emphasis>
4470 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;_M_lfm,&#32;_M_sm,&#32;_M_d,&#32;_M_scx,&#32;_M_1cx,&#32;_M_c2b,&#32;_M_cb;
4471 <emphasis role="preprocessor">#endif</emphasis>
4472 &#32;&#32;&#32;&#32;&#32;&#32;};
4473 
4474 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;constructors&#32;and&#32;member&#32;functions</emphasis>
4475 
4476 &#32;&#32;&#32;&#32;&#32;&#32;poisson_distribution()&#32;:&#32;poisson_distribution(1.0)&#32;{&#32;}
4477 
4478 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
4479 &#32;&#32;&#32;&#32;&#32;&#32;poisson_distribution(<emphasis role="keywordtype">double</emphasis>&#32;__mean)
4480 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_param(__mean),&#32;_M_nd()
4481 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
4482 
4483 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
4484 &#32;&#32;&#32;&#32;&#32;&#32;poisson_distribution(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
4485 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_param(__p),&#32;_M_nd()
4486 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
4487 
4491 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
4492 &#32;&#32;&#32;&#32;&#32;&#32;reset()
4493 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_nd.reset();&#32;}
4494 
4498 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>
4499 &#32;&#32;&#32;&#32;&#32;&#32;mean()<emphasis role="keyword">&#32;const</emphasis>
4500 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param.mean();&#32;}
4501 
4505 &#32;&#32;&#32;&#32;&#32;&#32;param_type
4506 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>()<emphasis role="keyword">&#32;const</emphasis>
4507 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param;&#32;}
4508 
4513 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
4514 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__param)
4515 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_param&#32;=&#32;__param;&#32;}
4516 
4520 &#32;&#32;&#32;&#32;&#32;&#32;result_type
4521 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>()<emphasis role="keyword">&#32;const</emphasis>
4522 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;}
4523 
4527 &#32;&#32;&#32;&#32;&#32;&#32;result_type
4528 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>()<emphasis role="keyword">&#32;const</emphasis>
4529 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::numeric_limits&lt;result_type&gt;::max();&#32;}
4530 
4534 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
4535 &#32;&#32;&#32;&#32;result_type
4536 &#32;&#32;&#32;&#32;operator()(_UniformRandomNumberGenerator&amp;&#32;__urng)
4537 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;operator()(__urng,&#32;_M_param);&#32;}
4538 
4539 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
4540 &#32;&#32;&#32;&#32;result_type
4541 &#32;&#32;&#32;&#32;operator()(_UniformRandomNumberGenerator&amp;&#32;__urng,
4542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p);
4543 
4544 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
4545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
4546 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
4547 &#32;&#32;&#32;&#32;__generate(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
4548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng)
4549 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate(__f,&#32;__t,&#32;__urng,&#32;_M_param);&#32;}
4550 
4551 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
4552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
4553 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
4554 &#32;&#32;&#32;&#32;__generate(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
4555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
4556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
4557 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng,&#32;__p);&#32;}
4558 
4559 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
4560 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
4561 &#32;&#32;&#32;&#32;__generate(result_type*&#32;__f,&#32;result_type*&#32;__t,
4562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
4563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
4564 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng,&#32;__p);&#32;}
4565 
4571 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
4572 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;poisson_distribution&amp;&#32;__d1,
4573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;poisson_distribution&amp;&#32;__d2)
4574 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_C99_MATH_TR1</emphasis>
4575 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__d1._M_param&#32;==&#32;__d2._M_param&#32;&amp;&amp;&#32;__d1._M_nd&#32;==&#32;__d2._M_nd;&#32;}
4576 <emphasis role="preprocessor">#else</emphasis>
4577 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__d1._M_param&#32;==&#32;__d2._M_param;&#32;}
4578 <emphasis role="preprocessor">#endif</emphasis>
4579 
4590 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IntType1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
4591 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;
4592 &#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__os,
4593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::poisson_distribution&lt;_IntType1&gt;&amp;&#32;__x);
4594 
4605 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IntType1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
4606 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;
4607 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a4560e59cc4f5ddaf0ec23d1a7050b611">operator&gt;&gt;</link>(std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__is,
4608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::poisson_distribution&lt;_IntType1&gt;&amp;&#32;__x);
4609 
4610 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
4611 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
4612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
4613 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
4614 &#32;&#32;&#32;&#32;__generate_impl(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
4615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
4616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p);
4617 
4618 &#32;&#32;&#32;&#32;&#32;&#32;param_type&#32;_M_param;
4619 
4620 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NB:&#32;Unused&#32;when&#32;_GLIBCXX_USE_C99_MATH_TR1&#32;is&#32;undefined.</emphasis>
4621 &#32;&#32;&#32;&#32;&#32;&#32;std::normal_distribution&lt;double&gt;&#32;_M_nd;
4622 &#32;&#32;&#32;&#32;};
4623 
4627 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IntType&gt;
4628 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
4629 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;std::poisson_distribution&lt;_IntType&gt;&amp;&#32;__d1,
4630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::poisson_distribution&lt;_IntType&gt;&amp;&#32;__d2)
4631 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__d1&#32;==&#32;__d2);&#32;}
4632 
4633 
4649 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType&#32;=&#32;<emphasis role="keywordtype">double</emphasis>&gt;
4650 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>exponential_distribution
4651 &#32;&#32;&#32;&#32;{
4652 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_floating_point&lt;_RealType&gt;::value,
4653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;result_type&#32;must&#32;be&#32;a&#32;floating&#32;point&#32;type&quot;</emphasis>);
4654 
4655 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
4657 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_RealType&#32;result_type;
4658 
4660 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>param_type
4661 &#32;&#32;&#32;&#32;&#32;&#32;{
4662 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;exponential_distribution&lt;_RealType&gt;&#32;distribution_type;
4663 
4664 &#32;&#32;&#32;&#32;param_type()&#32;:&#32;param_type(1.0)&#32;{&#32;}
4665 
4666 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
4667 &#32;&#32;&#32;&#32;param_type(_RealType&#32;__lambda)
4668 &#32;&#32;&#32;&#32;:&#32;_M_lambda(__lambda)
4669 &#32;&#32;&#32;&#32;{
4670 &#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(_M_lambda&#32;&gt;&#32;_RealType(0));
4671 &#32;&#32;&#32;&#32;}
4672 
4673 &#32;&#32;&#32;&#32;_RealType
4674 &#32;&#32;&#32;&#32;lambda()<emphasis role="keyword">&#32;const</emphasis>
4675 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_lambda;&#32;}
4676 
4677 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
4678 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p2)
4679 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__p1._M_lambda&#32;==&#32;__p2._M_lambda;&#32;}
4680 
4681 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
4682 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p2)
4683 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__p1&#32;==&#32;__p2);&#32;}
4684 
4685 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
4686 &#32;&#32;&#32;&#32;_RealType&#32;_M_lambda;
4687 &#32;&#32;&#32;&#32;&#32;&#32;};
4688 
4689 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
4694 &#32;&#32;&#32;&#32;&#32;&#32;exponential_distribution()&#32;:&#32;exponential_distribution(1.0)&#32;{&#32;}
4695 
4700 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
4701 &#32;&#32;&#32;&#32;&#32;&#32;exponential_distribution(_RealType&#32;__lambda)
4702 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_param(__lambda)
4703 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
4704 
4705 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
4706 &#32;&#32;&#32;&#32;&#32;&#32;exponential_distribution(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
4707 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_param(__p)
4708 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
4709 
4715 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
4716 &#32;&#32;&#32;&#32;&#32;&#32;reset()&#32;{&#32;}
4717 
4721 &#32;&#32;&#32;&#32;&#32;&#32;_RealType
4722 &#32;&#32;&#32;&#32;&#32;&#32;lambda()<emphasis role="keyword">&#32;const</emphasis>
4723 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param.lambda();&#32;}
4724 
4728 &#32;&#32;&#32;&#32;&#32;&#32;param_type
4729 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>()<emphasis role="keyword">&#32;const</emphasis>
4730 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param;&#32;}
4731 
4736 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
4737 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__param)
4738 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_param&#32;=&#32;__param;&#32;}
4739 
4743 &#32;&#32;&#32;&#32;&#32;&#32;result_type
4744 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>()<emphasis role="keyword">&#32;const</emphasis>
4745 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;result_type(0);&#32;}
4746 
4750 &#32;&#32;&#32;&#32;&#32;&#32;result_type
4751 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>()<emphasis role="keyword">&#32;const</emphasis>
4752 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::numeric_limits&lt;result_type&gt;::max();&#32;}
4753 
4757 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
4758 &#32;&#32;&#32;&#32;result_type
4759 &#32;&#32;&#32;&#32;operator()(_UniformRandomNumberGenerator&amp;&#32;__urng)
4760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;operator()(__urng,&#32;_M_param);&#32;}
4761 
4762 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
4763 &#32;&#32;&#32;&#32;result_type
4764 &#32;&#32;&#32;&#32;operator()(_UniformRandomNumberGenerator&amp;&#32;__urng,
4765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
4766 &#32;&#32;&#32;&#32;{
4767 &#32;&#32;&#32;&#32;&#32;&#32;__detail::_Adaptor&lt;_UniformRandomNumberGenerator,&#32;result_type&gt;
4768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__aurng(__urng);
4769 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-std::log(result_type(1)&#32;-&#32;__aurng())&#32;/&#32;__p.lambda();
4770 &#32;&#32;&#32;&#32;}
4771 
4772 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
4773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
4774 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
4775 &#32;&#32;&#32;&#32;__generate(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
4776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng)
4777 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate(__f,&#32;__t,&#32;__urng,&#32;_M_param);&#32;}
4778 
4779 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
4780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
4781 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
4782 &#32;&#32;&#32;&#32;__generate(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
4783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
4784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
4785 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng,&#32;__p);&#32;}
4786 
4787 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
4788 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
4789 &#32;&#32;&#32;&#32;__generate(result_type*&#32;__f,&#32;result_type*&#32;__t,
4790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
4791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
4792 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng,&#32;__p);&#32;}
4793 
4798 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
4799 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;exponential_distribution&amp;&#32;__d1,
4800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;exponential_distribution&amp;&#32;__d2)
4801 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__d1._M_param&#32;==&#32;__d2._M_param;&#32;}
4802 
4803 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
4804 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
4805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
4806 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
4807 &#32;&#32;&#32;&#32;__generate_impl(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
4808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
4809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p);
4810 
4811 &#32;&#32;&#32;&#32;&#32;&#32;param_type&#32;_M_param;
4812 &#32;&#32;&#32;&#32;};
4813 
4818 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType&gt;
4819 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
4820 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;std::exponential_distribution&lt;_RealType&gt;&amp;&#32;__d1,
4821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::exponential_distribution&lt;_RealType&gt;&amp;&#32;__d2)
4822 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__d1&#32;==&#32;__d2);&#32;}
4823 
4834 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
4835 &#32;&#32;&#32;&#32;std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;
4836 &#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__os,
4837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::exponential_distribution&lt;_RealType&gt;&amp;&#32;__x);
4838 
4849 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
4850 &#32;&#32;&#32;&#32;std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;
4851 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a4560e59cc4f5ddaf0ec23d1a7050b611">operator&gt;&gt;</link>(std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__is,
4852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::exponential_distribution&lt;_RealType&gt;&amp;&#32;__x);
4853 
4854 
4864 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType&#32;=&#32;<emphasis role="keywordtype">double</emphasis>&gt;
4865 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>weibull_distribution
4866 &#32;&#32;&#32;&#32;{
4867 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_floating_point&lt;_RealType&gt;::value,
4868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;result_type&#32;must&#32;be&#32;a&#32;floating&#32;point&#32;type&quot;</emphasis>);
4869 
4870 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
4872 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_RealType&#32;result_type;
4873 
4875 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>param_type
4876 &#32;&#32;&#32;&#32;&#32;&#32;{
4877 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;weibull_distribution&lt;_RealType&gt;&#32;distribution_type;
4878 
4879 &#32;&#32;&#32;&#32;param_type()&#32;:&#32;param_type(1.0)&#32;{&#32;}
4880 
4881 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
4882 &#32;&#32;&#32;&#32;param_type(_RealType&#32;__a,&#32;_RealType&#32;__b&#32;=&#32;_RealType(1.0))
4883 &#32;&#32;&#32;&#32;:&#32;_M_a(__a),&#32;_M_b(__b)
4884 &#32;&#32;&#32;&#32;{&#32;}
4885 
4886 &#32;&#32;&#32;&#32;_RealType
4887 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>()<emphasis role="keyword">&#32;const</emphasis>
4888 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_a;&#32;}
4889 
4890 &#32;&#32;&#32;&#32;_RealType
4891 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>()<emphasis role="keyword">&#32;const</emphasis>
4892 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_b;&#32;}
4893 
4894 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
4895 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p2)
4896 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__p1._M_a&#32;==&#32;__p2._M_a&#32;&amp;&amp;&#32;__p1._M_b&#32;==&#32;__p2._M_b;&#32;}
4897 
4898 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
4899 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p2)
4900 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__p1&#32;==&#32;__p2);&#32;}
4901 
4902 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
4903 &#32;&#32;&#32;&#32;_RealType&#32;_M_a;
4904 &#32;&#32;&#32;&#32;_RealType&#32;_M_b;
4905 &#32;&#32;&#32;&#32;&#32;&#32;};
4906 
4907 &#32;&#32;&#32;&#32;&#32;&#32;weibull_distribution()&#32;:&#32;weibull_distribution(1.0)&#32;{&#32;}
4908 
4909 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
4910 &#32;&#32;&#32;&#32;&#32;&#32;weibull_distribution(_RealType&#32;__a,&#32;_RealType&#32;__b&#32;=&#32;_RealType(1))
4911 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_param(__a,&#32;__b)
4912 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
4913 
4914 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
4915 &#32;&#32;&#32;&#32;&#32;&#32;weibull_distribution(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
4916 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_param(__p)
4917 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
4918 
4922 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
4923 &#32;&#32;&#32;&#32;&#32;&#32;reset()
4924 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
4925 
4929 &#32;&#32;&#32;&#32;&#32;&#32;_RealType
4930 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>()<emphasis role="keyword">&#32;const</emphasis>
4931 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param.a();&#32;}
4932 
4936 &#32;&#32;&#32;&#32;&#32;&#32;_RealType
4937 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>()<emphasis role="keyword">&#32;const</emphasis>
4938 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param.b();&#32;}
4939 
4943 &#32;&#32;&#32;&#32;&#32;&#32;param_type
4944 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>()<emphasis role="keyword">&#32;const</emphasis>
4945 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param;&#32;}
4946 
4951 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
4952 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__param)
4953 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_param&#32;=&#32;__param;&#32;}
4954 
4958 &#32;&#32;&#32;&#32;&#32;&#32;result_type
4959 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>()<emphasis role="keyword">&#32;const</emphasis>
4960 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;result_type(0);&#32;}
4961 
4965 &#32;&#32;&#32;&#32;&#32;&#32;result_type
4966 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>()<emphasis role="keyword">&#32;const</emphasis>
4967 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::numeric_limits&lt;result_type&gt;::max();&#32;}
4968 
4972 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
4973 &#32;&#32;&#32;&#32;result_type
4974 &#32;&#32;&#32;&#32;operator()(_UniformRandomNumberGenerator&amp;&#32;__urng)
4975 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;operator()(__urng,&#32;_M_param);&#32;}
4976 
4977 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
4978 &#32;&#32;&#32;&#32;result_type
4979 &#32;&#32;&#32;&#32;operator()(_UniformRandomNumberGenerator&amp;&#32;__urng,
4980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p);
4981 
4982 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
4983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
4984 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
4985 &#32;&#32;&#32;&#32;__generate(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
4986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng)
4987 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate(__f,&#32;__t,&#32;__urng,&#32;_M_param);&#32;}
4988 
4989 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
4990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
4991 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
4992 &#32;&#32;&#32;&#32;__generate(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
4993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
4994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
4995 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng,&#32;__p);&#32;}
4996 
4997 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
4998 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
4999 &#32;&#32;&#32;&#32;__generate(result_type*&#32;__f,&#32;result_type*&#32;__t,
5000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
5001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
5002 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng,&#32;__p);&#32;}
5003 
5008 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
5009 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;weibull_distribution&amp;&#32;__d1,
5010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;weibull_distribution&amp;&#32;__d2)
5011 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__d1._M_param&#32;==&#32;__d2._M_param;&#32;}
5012 
5013 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
5014 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
5015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
5016 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
5017 &#32;&#32;&#32;&#32;__generate_impl(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
5018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
5019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p);
5020 
5021 &#32;&#32;&#32;&#32;&#32;&#32;param_type&#32;_M_param;
5022 &#32;&#32;&#32;&#32;};
5023 
5028 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType&gt;
5029 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
5030 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;std::weibull_distribution&lt;_RealType&gt;&amp;&#32;__d1,
5031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::weibull_distribution&lt;_RealType&gt;&amp;&#32;__d2)
5032 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__d1&#32;==&#32;__d2);&#32;}
5033 
5044 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
5045 &#32;&#32;&#32;&#32;std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;
5046 &#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__os,
5047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::weibull_distribution&lt;_RealType&gt;&amp;&#32;__x);
5048 
5059 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
5060 &#32;&#32;&#32;&#32;std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;
5061 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a4560e59cc4f5ddaf0ec23d1a7050b611">operator&gt;&gt;</link>(std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__is,
5062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::weibull_distribution&lt;_RealType&gt;&amp;&#32;__x);
5063 
5064 
5074 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType&#32;=&#32;<emphasis role="keywordtype">double</emphasis>&gt;
5075 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>extreme_value_distribution
5076 &#32;&#32;&#32;&#32;{
5077 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_floating_point&lt;_RealType&gt;::value,
5078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;result_type&#32;must&#32;be&#32;a&#32;floating&#32;point&#32;type&quot;</emphasis>);
5079 
5080 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
5082 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_RealType&#32;result_type;
5083 
5085 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>param_type
5086 &#32;&#32;&#32;&#32;&#32;&#32;{
5087 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;extreme_value_distribution&lt;_RealType&gt;&#32;distribution_type;
5088 
5089 &#32;&#32;&#32;&#32;param_type()&#32;:&#32;param_type(0.0)&#32;{&#32;}
5090 
5091 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
5092 &#32;&#32;&#32;&#32;param_type(_RealType&#32;__a,&#32;_RealType&#32;__b&#32;=&#32;_RealType(1.0))
5093 &#32;&#32;&#32;&#32;:&#32;_M_a(__a),&#32;_M_b(__b)
5094 &#32;&#32;&#32;&#32;{&#32;}
5095 
5096 &#32;&#32;&#32;&#32;_RealType
5097 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>()<emphasis role="keyword">&#32;const</emphasis>
5098 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_a;&#32;}
5099 
5100 &#32;&#32;&#32;&#32;_RealType
5101 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>()<emphasis role="keyword">&#32;const</emphasis>
5102 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_b;&#32;}
5103 
5104 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
5105 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p2)
5106 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__p1._M_a&#32;==&#32;__p2._M_a&#32;&amp;&amp;&#32;__p1._M_b&#32;==&#32;__p2._M_b;&#32;}
5107 
5108 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
5109 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p2)
5110 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__p1&#32;==&#32;__p2);&#32;}
5111 
5112 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
5113 &#32;&#32;&#32;&#32;_RealType&#32;_M_a;
5114 &#32;&#32;&#32;&#32;_RealType&#32;_M_b;
5115 &#32;&#32;&#32;&#32;&#32;&#32;};
5116 
5117 &#32;&#32;&#32;&#32;&#32;&#32;extreme_value_distribution()&#32;:&#32;extreme_value_distribution(0.0)&#32;{&#32;}
5118 
5119 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
5120 &#32;&#32;&#32;&#32;&#32;&#32;extreme_value_distribution(_RealType&#32;__a,&#32;_RealType&#32;__b&#32;=&#32;_RealType(1))
5121 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_param(__a,&#32;__b)
5122 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
5123 
5124 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
5125 &#32;&#32;&#32;&#32;&#32;&#32;extreme_value_distribution(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
5126 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_param(__p)
5127 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
5128 
5132 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
5133 &#32;&#32;&#32;&#32;&#32;&#32;reset()
5134 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
5135 
5139 &#32;&#32;&#32;&#32;&#32;&#32;_RealType
5140 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>()<emphasis role="keyword">&#32;const</emphasis>
5141 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param.a();&#32;}
5142 
5146 &#32;&#32;&#32;&#32;&#32;&#32;_RealType
5147 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>()<emphasis role="keyword">&#32;const</emphasis>
5148 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param.b();&#32;}
5149 
5153 &#32;&#32;&#32;&#32;&#32;&#32;param_type
5154 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>()<emphasis role="keyword">&#32;const</emphasis>
5155 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param;&#32;}
5156 
5161 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
5162 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__param)
5163 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_param&#32;=&#32;__param;&#32;}
5164 
5168 &#32;&#32;&#32;&#32;&#32;&#32;result_type
5169 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>()<emphasis role="keyword">&#32;const</emphasis>
5170 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::numeric_limits&lt;result_type&gt;::lowest();&#32;}
5171 
5175 &#32;&#32;&#32;&#32;&#32;&#32;result_type
5176 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>()<emphasis role="keyword">&#32;const</emphasis>
5177 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::numeric_limits&lt;result_type&gt;::max();&#32;}
5178 
5182 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
5183 &#32;&#32;&#32;&#32;result_type
5184 &#32;&#32;&#32;&#32;operator()(_UniformRandomNumberGenerator&amp;&#32;__urng)
5185 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;operator()(__urng,&#32;_M_param);&#32;}
5186 
5187 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
5188 &#32;&#32;&#32;&#32;result_type
5189 &#32;&#32;&#32;&#32;operator()(_UniformRandomNumberGenerator&amp;&#32;__urng,
5190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p);
5191 
5192 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
5193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
5194 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
5195 &#32;&#32;&#32;&#32;__generate(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
5196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng)
5197 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate(__f,&#32;__t,&#32;__urng,&#32;_M_param);&#32;}
5198 
5199 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
5200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
5201 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
5202 &#32;&#32;&#32;&#32;__generate(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
5203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
5204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
5205 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng,&#32;__p);&#32;}
5206 
5207 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
5208 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
5209 &#32;&#32;&#32;&#32;__generate(result_type*&#32;__f,&#32;result_type*&#32;__t,
5210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
5211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
5212 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng,&#32;__p);&#32;}
5213 
5218 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
5219 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;extreme_value_distribution&amp;&#32;__d1,
5220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;extreme_value_distribution&amp;&#32;__d2)
5221 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__d1._M_param&#32;==&#32;__d2._M_param;&#32;}
5222 
5223 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
5224 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
5225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
5226 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
5227 &#32;&#32;&#32;&#32;__generate_impl(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
5228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
5229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p);
5230 
5231 &#32;&#32;&#32;&#32;&#32;&#32;param_type&#32;_M_param;
5232 &#32;&#32;&#32;&#32;};
5233 
5238 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType&gt;
5239 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
5240 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;std::extreme_value_distribution&lt;_RealType&gt;&amp;&#32;__d1,
5241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::extreme_value_distribution&lt;_RealType&gt;&amp;&#32;__d2)
5242 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__d1&#32;==&#32;__d2);&#32;}
5243 
5254 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
5255 &#32;&#32;&#32;&#32;std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;
5256 &#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__os,
5257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::extreme_value_distribution&lt;_RealType&gt;&amp;&#32;__x);
5258 
5269 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
5270 &#32;&#32;&#32;&#32;std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;
5271 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a4560e59cc4f5ddaf0ec23d1a7050b611">operator&gt;&gt;</link>(std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__is,
5272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::extreme_value_distribution&lt;_RealType&gt;&amp;&#32;__x);
5273 
5274 
5281 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IntType&#32;=&#32;<emphasis role="keywordtype">int</emphasis>&gt;
5282 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>discrete_distribution
5283 &#32;&#32;&#32;&#32;{
5284 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_integral&lt;_IntType&gt;::value,
5285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;result_type&#32;must&#32;be&#32;an&#32;integral&#32;type&quot;</emphasis>);
5286 
5287 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
5289 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_IntType&#32;result_type;
5290 
5292 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>param_type
5293 &#32;&#32;&#32;&#32;&#32;&#32;{
5294 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;discrete_distribution&lt;_IntType&gt;&#32;distribution_type;
5295 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>discrete_distribution&lt;_IntType&gt;;
5296 
5297 &#32;&#32;&#32;&#32;param_type()
5298 &#32;&#32;&#32;&#32;:&#32;_M_prob(),&#32;_M_cp()
5299 &#32;&#32;&#32;&#32;{&#32;}
5300 
5301 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
5302 &#32;&#32;&#32;&#32;&#32;&#32;param_type(_InputIterator&#32;__wbegin,
5303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator&#32;__wend)
5304 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_prob(__wbegin,&#32;__wend),&#32;_M_cp()
5305 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_initialize();&#32;}
5306 
5307 &#32;&#32;&#32;&#32;param_type(initializer_list&lt;double&gt;&#32;__wil)
5308 &#32;&#32;&#32;&#32;:&#32;_M_prob(__wil.<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>(),&#32;__wil.<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()),&#32;_M_cp()
5309 &#32;&#32;&#32;&#32;{&#32;_M_initialize();&#32;}
5310 
5311 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Func&gt;
5312 &#32;&#32;&#32;&#32;&#32;&#32;param_type(<emphasis role="keywordtype">size_t</emphasis>&#32;__nw,&#32;<emphasis role="keywordtype">double</emphasis>&#32;__xmin,&#32;<emphasis role="keywordtype">double</emphasis>&#32;__xmax,
5313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Func&#32;__fw);
5314 
5315 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;See:&#32;http://cpp-next.com/archive/2010/10/implicit-move-must-go/</emphasis>
5316 &#32;&#32;&#32;&#32;param_type(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
5317 &#32;&#32;&#32;&#32;param_type&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
5318 
5319 &#32;&#32;&#32;&#32;std::vector&lt;double&gt;
5320 &#32;&#32;&#32;&#32;probabilities()<emphasis role="keyword">&#32;const</emphasis>
5321 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_prob.empty()&#32;?&#32;std::vector&lt;double&gt;(1,&#32;1.0)&#32;:&#32;_M_prob;&#32;}
5322 
5323 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
5324 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p2)
5325 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__p1._M_prob&#32;==&#32;__p2._M_prob;&#32;}
5326 
5327 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
5328 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p2)
5329 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__p1&#32;==&#32;__p2);&#32;}
5330 
5331 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
5332 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
5333 &#32;&#32;&#32;&#32;_M_initialize();
5334 
5335 &#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;_M_prob;
5336 &#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;_M_cp;
5337 &#32;&#32;&#32;&#32;&#32;&#32;};
5338 
5339 &#32;&#32;&#32;&#32;&#32;&#32;discrete_distribution()
5340 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_param()
5341 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
5342 
5343 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
5344 &#32;&#32;&#32;&#32;discrete_distribution(_InputIterator&#32;__wbegin,
5345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator&#32;__wend)
5346 &#32;&#32;&#32;&#32;:&#32;_M_param(__wbegin,&#32;__wend)
5347 &#32;&#32;&#32;&#32;{&#32;}
5348 
5349 &#32;&#32;&#32;&#32;&#32;&#32;discrete_distribution(initializer_list&lt;double&gt;&#32;__wl)
5350 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_param(__wl)
5351 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
5352 
5353 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Func&gt;
5354 &#32;&#32;&#32;&#32;discrete_distribution(<emphasis role="keywordtype">size_t</emphasis>&#32;__nw,&#32;<emphasis role="keywordtype">double</emphasis>&#32;__xmin,&#32;<emphasis role="keywordtype">double</emphasis>&#32;__xmax,
5355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Func&#32;__fw)
5356 &#32;&#32;&#32;&#32;:&#32;_M_param(__nw,&#32;__xmin,&#32;__xmax,&#32;__fw)
5357 &#32;&#32;&#32;&#32;{&#32;}
5358 
5359 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
5360 &#32;&#32;&#32;&#32;&#32;&#32;discrete_distribution(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
5361 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_param(__p)
5362 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
5363 
5367 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
5368 &#32;&#32;&#32;&#32;&#32;&#32;reset()
5369 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
5370 
5374 &#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;double&gt;
5375 &#32;&#32;&#32;&#32;&#32;&#32;probabilities()<emphasis role="keyword">&#32;const</emphasis>
5376 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
5377 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param._M_prob.empty()
5378 &#32;&#32;&#32;&#32;&#32;&#32;?&#32;std::vector&lt;double&gt;(1,&#32;1.0)&#32;:&#32;_M_param._M_prob;
5379 &#32;&#32;&#32;&#32;&#32;&#32;}
5380 
5384 &#32;&#32;&#32;&#32;&#32;&#32;param_type
5385 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>()<emphasis role="keyword">&#32;const</emphasis>
5386 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param;&#32;}
5387 
5392 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
5393 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__param)
5394 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_param&#32;=&#32;__param;&#32;}
5395 
5399 &#32;&#32;&#32;&#32;&#32;&#32;result_type
5400 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>()<emphasis role="keyword">&#32;const</emphasis>
5401 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;result_type(0);&#32;}
5402 
5406 &#32;&#32;&#32;&#32;&#32;&#32;result_type
5407 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>()<emphasis role="keyword">&#32;const</emphasis>
5408 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
5409 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param._M_prob.empty()
5410 &#32;&#32;&#32;&#32;&#32;&#32;?&#32;result_type(0)&#32;:&#32;result_type(_M_param._M_prob.<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;-&#32;1);
5411 &#32;&#32;&#32;&#32;&#32;&#32;}
5412 
5416 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
5417 &#32;&#32;&#32;&#32;result_type
5418 &#32;&#32;&#32;&#32;operator()(_UniformRandomNumberGenerator&amp;&#32;__urng)
5419 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;operator()(__urng,&#32;_M_param);&#32;}
5420 
5421 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
5422 &#32;&#32;&#32;&#32;result_type
5423 &#32;&#32;&#32;&#32;operator()(_UniformRandomNumberGenerator&amp;&#32;__urng,
5424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p);
5425 
5426 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
5427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
5428 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
5429 &#32;&#32;&#32;&#32;__generate(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
5430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng)
5431 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate(__f,&#32;__t,&#32;__urng,&#32;_M_param);&#32;}
5432 
5433 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
5434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
5435 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
5436 &#32;&#32;&#32;&#32;__generate(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
5437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
5438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
5439 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng,&#32;__p);&#32;}
5440 
5441 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
5442 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
5443 &#32;&#32;&#32;&#32;__generate(result_type*&#32;__f,&#32;result_type*&#32;__t,
5444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
5445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
5446 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng,&#32;__p);&#32;}
5447 
5452 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
5453 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;discrete_distribution&amp;&#32;__d1,
5454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;discrete_distribution&amp;&#32;__d2)
5455 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__d1._M_param&#32;==&#32;__d2._M_param;&#32;}
5456 
5467 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IntType1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
5468 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;
5469 &#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__os,
5470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::discrete_distribution&lt;_IntType1&gt;&amp;&#32;__x);
5471 
5483 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IntType1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
5484 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;
5485 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a4560e59cc4f5ddaf0ec23d1a7050b611">operator&gt;&gt;</link>(std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__is,
5486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::discrete_distribution&lt;_IntType1&gt;&amp;&#32;__x);
5487 
5488 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
5489 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
5490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
5491 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
5492 &#32;&#32;&#32;&#32;__generate_impl(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
5493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
5494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p);
5495 
5496 &#32;&#32;&#32;&#32;&#32;&#32;param_type&#32;_M_param;
5497 &#32;&#32;&#32;&#32;};
5498 
5503 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IntType&gt;
5504 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
5505 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;std::discrete_distribution&lt;_IntType&gt;&amp;&#32;__d1,
5506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::discrete_distribution&lt;_IntType&gt;&amp;&#32;__d2)
5507 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__d1&#32;==&#32;__d2);&#32;}
5508 
5509 
5516 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType&#32;=&#32;<emphasis role="keywordtype">double</emphasis>&gt;
5517 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>piecewise_constant_distribution
5518 &#32;&#32;&#32;&#32;{
5519 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_floating_point&lt;_RealType&gt;::value,
5520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;result_type&#32;must&#32;be&#32;a&#32;floating&#32;point&#32;type&quot;</emphasis>);
5521 
5522 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
5524 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_RealType&#32;result_type;
5525 
5527 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>param_type
5528 &#32;&#32;&#32;&#32;&#32;&#32;{
5529 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;piecewise_constant_distribution&lt;_RealType&gt;&#32;distribution_type;
5530 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>piecewise_constant_distribution&lt;_RealType&gt;;
5531 
5532 &#32;&#32;&#32;&#32;param_type()
5533 &#32;&#32;&#32;&#32;:&#32;_M_int(),&#32;_M_den(),&#32;_M_cp()
5534 &#32;&#32;&#32;&#32;{&#32;}
5535 
5536 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIteratorB,&#32;<emphasis role="keyword">typename</emphasis>&#32;_InputIteratorW&gt;
5537 &#32;&#32;&#32;&#32;&#32;&#32;param_type(_InputIteratorB&#32;__bfirst,
5538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIteratorB&#32;__bend,
5539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIteratorW&#32;__wbegin);
5540 
5541 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Func&gt;
5542 &#32;&#32;&#32;&#32;&#32;&#32;param_type(initializer_list&lt;_RealType&gt;&#32;__bi,&#32;_Func&#32;__fw);
5543 
5544 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Func&gt;
5545 &#32;&#32;&#32;&#32;&#32;&#32;param_type(<emphasis role="keywordtype">size_t</emphasis>&#32;__nw,&#32;_RealType&#32;__xmin,&#32;_RealType&#32;__xmax,
5546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Func&#32;__fw);
5547 
5548 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;See:&#32;http://cpp-next.com/archive/2010/10/implicit-move-must-go/</emphasis>
5549 &#32;&#32;&#32;&#32;param_type(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
5550 &#32;&#32;&#32;&#32;param_type&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
5551 
5552 &#32;&#32;&#32;&#32;std::vector&lt;_RealType&gt;
5553 &#32;&#32;&#32;&#32;intervals()<emphasis role="keyword">&#32;const</emphasis>
5554 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
5555 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_int.empty())
5556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;_RealType&gt;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>(2);
5558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>[1]&#32;=&#32;_RealType(1);
5559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
5560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5561 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_int;
5563 &#32;&#32;&#32;&#32;}
5564 
5565 &#32;&#32;&#32;&#32;std::vector&lt;double&gt;
5566 &#32;&#32;&#32;&#32;densities()<emphasis role="keyword">&#32;const</emphasis>
5567 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_den.empty()&#32;?&#32;std::vector&lt;double&gt;(1,&#32;1.0)&#32;:&#32;_M_den;&#32;}
5568 
5569 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
5570 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p2)
5571 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__p1._M_int&#32;==&#32;__p2._M_int&#32;&amp;&amp;&#32;__p1._M_den&#32;==&#32;__p2._M_den;&#32;}
5572 
5573 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
5574 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p2)
5575 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__p1&#32;==&#32;__p2);&#32;}
5576 
5577 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
5578 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
5579 &#32;&#32;&#32;&#32;_M_initialize();
5580 
5581 &#32;&#32;&#32;&#32;std::vector&lt;_RealType&gt;&#32;_M_int;
5582 &#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;_M_den;
5583 &#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;_M_cp;
5584 &#32;&#32;&#32;&#32;&#32;&#32;};
5585 
5586 &#32;&#32;&#32;&#32;&#32;&#32;piecewise_constant_distribution()
5587 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_param()
5588 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
5589 
5590 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIteratorB,&#32;<emphasis role="keyword">typename</emphasis>&#32;_InputIteratorW&gt;
5591 &#32;&#32;&#32;&#32;piecewise_constant_distribution(_InputIteratorB&#32;__bfirst,
5592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIteratorB&#32;__bend,
5593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIteratorW&#32;__wbegin)
5594 &#32;&#32;&#32;&#32;:&#32;_M_param(__bfirst,&#32;__bend,&#32;__wbegin)
5595 &#32;&#32;&#32;&#32;{&#32;}
5596 
5597 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Func&gt;
5598 &#32;&#32;&#32;&#32;piecewise_constant_distribution(initializer_list&lt;_RealType&gt;&#32;__bl,
5599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Func&#32;__fw)
5600 &#32;&#32;&#32;&#32;:&#32;_M_param(__bl,&#32;__fw)
5601 &#32;&#32;&#32;&#32;{&#32;}
5602 
5603 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Func&gt;
5604 &#32;&#32;&#32;&#32;piecewise_constant_distribution(<emphasis role="keywordtype">size_t</emphasis>&#32;__nw,
5605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RealType&#32;__xmin,&#32;_RealType&#32;__xmax,
5606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Func&#32;__fw)
5607 &#32;&#32;&#32;&#32;:&#32;_M_param(__nw,&#32;__xmin,&#32;__xmax,&#32;__fw)
5608 &#32;&#32;&#32;&#32;{&#32;}
5609 
5610 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
5611 &#32;&#32;&#32;&#32;&#32;&#32;piecewise_constant_distribution(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
5612 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_param(__p)
5613 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
5614 
5618 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
5619 &#32;&#32;&#32;&#32;&#32;&#32;reset()
5620 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
5621 
5625 &#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;_RealType&gt;
5626 &#32;&#32;&#32;&#32;&#32;&#32;intervals()<emphasis role="keyword">&#32;const</emphasis>
5627 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
5628 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_param._M_int.empty())
5629 &#32;&#32;&#32;&#32;&#32;&#32;{
5630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;_RealType&gt;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>(2);
5631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>[1]&#32;=&#32;_RealType(1);
5632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
5633 &#32;&#32;&#32;&#32;&#32;&#32;}
5634 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5635 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param._M_int;
5636 &#32;&#32;&#32;&#32;&#32;&#32;}
5637 
5641 &#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;double&gt;
5642 &#32;&#32;&#32;&#32;&#32;&#32;densities()<emphasis role="keyword">&#32;const</emphasis>
5643 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
5644 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param._M_den.empty()
5645 &#32;&#32;&#32;&#32;&#32;&#32;?&#32;std::vector&lt;double&gt;(1,&#32;1.0)&#32;:&#32;_M_param._M_den;
5646 &#32;&#32;&#32;&#32;&#32;&#32;}
5647 
5651 &#32;&#32;&#32;&#32;&#32;&#32;param_type
5652 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>()<emphasis role="keyword">&#32;const</emphasis>
5653 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param;&#32;}
5654 
5659 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
5660 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__param)
5661 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_param&#32;=&#32;__param;&#32;}
5662 
5666 &#32;&#32;&#32;&#32;&#32;&#32;result_type
5667 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>()<emphasis role="keyword">&#32;const</emphasis>
5668 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
5669 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param._M_int.empty()
5670 &#32;&#32;&#32;&#32;&#32;&#32;?&#32;result_type(0)&#32;:&#32;_M_param._M_int.front();
5671 &#32;&#32;&#32;&#32;&#32;&#32;}
5672 
5676 &#32;&#32;&#32;&#32;&#32;&#32;result_type
5677 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>()<emphasis role="keyword">&#32;const</emphasis>
5678 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
5679 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param._M_int.empty()
5680 &#32;&#32;&#32;&#32;&#32;&#32;?&#32;result_type(1)&#32;:&#32;_M_param._M_int.back();
5681 &#32;&#32;&#32;&#32;&#32;&#32;}
5682 
5686 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
5687 &#32;&#32;&#32;&#32;result_type
5688 &#32;&#32;&#32;&#32;operator()(_UniformRandomNumberGenerator&amp;&#32;__urng)
5689 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;operator()(__urng,&#32;_M_param);&#32;}
5690 
5691 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
5692 &#32;&#32;&#32;&#32;result_type
5693 &#32;&#32;&#32;&#32;operator()(_UniformRandomNumberGenerator&amp;&#32;__urng,
5694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p);
5695 
5696 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
5697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
5698 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
5699 &#32;&#32;&#32;&#32;__generate(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
5700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng)
5701 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate(__f,&#32;__t,&#32;__urng,&#32;_M_param);&#32;}
5702 
5703 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
5704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
5705 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
5706 &#32;&#32;&#32;&#32;__generate(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
5707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
5708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
5709 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng,&#32;__p);&#32;}
5710 
5711 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
5712 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
5713 &#32;&#32;&#32;&#32;__generate(result_type*&#32;__f,&#32;result_type*&#32;__t,
5714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
5715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
5716 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng,&#32;__p);&#32;}
5717 
5722 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
5723 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;piecewise_constant_distribution&amp;&#32;__d1,
5724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;piecewise_constant_distribution&amp;&#32;__d2)
5725 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__d1._M_param&#32;==&#32;__d2._M_param;&#32;}
5726 
5738 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
5739 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;
5740 &#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__os,
5741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::piecewise_constant_distribution&lt;_RealType1&gt;&amp;&#32;__x);
5742 
5754 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
5755 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;
5756 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a4560e59cc4f5ddaf0ec23d1a7050b611">operator&gt;&gt;</link>(std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__is,
5757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::piecewise_constant_distribution&lt;_RealType1&gt;&amp;&#32;__x);
5758 
5759 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
5760 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
5761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
5762 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
5763 &#32;&#32;&#32;&#32;__generate_impl(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
5764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
5765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p);
5766 
5767 &#32;&#32;&#32;&#32;&#32;&#32;param_type&#32;_M_param;
5768 &#32;&#32;&#32;&#32;};
5769 
5774 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType&gt;
5775 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
5776 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;std::piecewise_constant_distribution&lt;_RealType&gt;&amp;&#32;__d1,
5777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::piecewise_constant_distribution&lt;_RealType&gt;&amp;&#32;__d2)
5778 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__d1&#32;==&#32;__d2);&#32;}
5779 
5780 
5787 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType&#32;=&#32;<emphasis role="keywordtype">double</emphasis>&gt;
5788 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>piecewise_linear_distribution
5789 &#32;&#32;&#32;&#32;{
5790 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_floating_point&lt;_RealType&gt;::value,
5791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;result_type&#32;must&#32;be&#32;a&#32;floating&#32;point&#32;type&quot;</emphasis>);
5792 
5793 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
5795 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_RealType&#32;result_type;
5796 
5798 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>param_type
5799 &#32;&#32;&#32;&#32;&#32;&#32;{
5800 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;piecewise_linear_distribution&lt;_RealType&gt;&#32;distribution_type;
5801 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>piecewise_linear_distribution&lt;_RealType&gt;;
5802 
5803 &#32;&#32;&#32;&#32;param_type()
5804 &#32;&#32;&#32;&#32;:&#32;_M_int(),&#32;_M_den(),&#32;_M_cp(),&#32;_M_m()
5805 &#32;&#32;&#32;&#32;{&#32;}
5806 
5807 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIteratorB,&#32;<emphasis role="keyword">typename</emphasis>&#32;_InputIteratorW&gt;
5808 &#32;&#32;&#32;&#32;&#32;&#32;param_type(_InputIteratorB&#32;__bfirst,
5809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIteratorB&#32;__bend,
5810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIteratorW&#32;__wbegin);
5811 
5812 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Func&gt;
5813 &#32;&#32;&#32;&#32;&#32;&#32;param_type(initializer_list&lt;_RealType&gt;&#32;__bl,&#32;_Func&#32;__fw);
5814 
5815 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Func&gt;
5816 &#32;&#32;&#32;&#32;&#32;&#32;param_type(<emphasis role="keywordtype">size_t</emphasis>&#32;__nw,&#32;_RealType&#32;__xmin,&#32;_RealType&#32;__xmax,
5817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Func&#32;__fw);
5818 
5819 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;See:&#32;http://cpp-next.com/archive/2010/10/implicit-move-must-go/</emphasis>
5820 &#32;&#32;&#32;&#32;param_type(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
5821 &#32;&#32;&#32;&#32;param_type&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
5822 
5823 &#32;&#32;&#32;&#32;std::vector&lt;_RealType&gt;
5824 &#32;&#32;&#32;&#32;intervals()<emphasis role="keyword">&#32;const</emphasis>
5825 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
5826 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_int.empty())
5827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;_RealType&gt;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>(2);
5829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>[1]&#32;=&#32;_RealType(1);
5830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
5831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5832 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_int;
5834 &#32;&#32;&#32;&#32;}
5835 
5836 &#32;&#32;&#32;&#32;std::vector&lt;double&gt;
5837 &#32;&#32;&#32;&#32;densities()<emphasis role="keyword">&#32;const</emphasis>
5838 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_den.empty()&#32;?&#32;std::vector&lt;double&gt;(2,&#32;1.0)&#32;:&#32;_M_den;&#32;}
5839 
5840 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
5841 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p2)
5842 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__p1._M_int&#32;==&#32;__p2._M_int&#32;&amp;&amp;&#32;__p1._M_den&#32;==&#32;__p2._M_den;&#32;}
5843 
5844 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
5845 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p2)
5846 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__p1&#32;==&#32;__p2);&#32;}
5847 
5848 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
5849 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
5850 &#32;&#32;&#32;&#32;_M_initialize();
5851 
5852 &#32;&#32;&#32;&#32;std::vector&lt;_RealType&gt;&#32;_M_int;
5853 &#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;_M_den;
5854 &#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;_M_cp;
5855 &#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;_M_m;
5856 &#32;&#32;&#32;&#32;&#32;&#32;};
5857 
5858 &#32;&#32;&#32;&#32;&#32;&#32;piecewise_linear_distribution()
5859 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_param()
5860 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
5861 
5862 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIteratorB,&#32;<emphasis role="keyword">typename</emphasis>&#32;_InputIteratorW&gt;
5863 &#32;&#32;&#32;&#32;piecewise_linear_distribution(_InputIteratorB&#32;__bfirst,
5864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIteratorB&#32;__bend,
5865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIteratorW&#32;__wbegin)
5866 &#32;&#32;&#32;&#32;:&#32;_M_param(__bfirst,&#32;__bend,&#32;__wbegin)
5867 &#32;&#32;&#32;&#32;{&#32;}
5868 
5869 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Func&gt;
5870 &#32;&#32;&#32;&#32;piecewise_linear_distribution(initializer_list&lt;_RealType&gt;&#32;__bl,
5871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Func&#32;__fw)
5872 &#32;&#32;&#32;&#32;:&#32;_M_param(__bl,&#32;__fw)
5873 &#32;&#32;&#32;&#32;{&#32;}
5874 
5875 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Func&gt;
5876 &#32;&#32;&#32;&#32;piecewise_linear_distribution(<emphasis role="keywordtype">size_t</emphasis>&#32;__nw,
5877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RealType&#32;__xmin,&#32;_RealType&#32;__xmax,
5878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Func&#32;__fw)
5879 &#32;&#32;&#32;&#32;:&#32;_M_param(__nw,&#32;__xmin,&#32;__xmax,&#32;__fw)
5880 &#32;&#32;&#32;&#32;{&#32;}
5881 
5882 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
5883 &#32;&#32;&#32;&#32;&#32;&#32;piecewise_linear_distribution(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
5884 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_param(__p)
5885 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
5886 
5890 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
5891 &#32;&#32;&#32;&#32;&#32;&#32;reset()
5892 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
5893 
5897 &#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;_RealType&gt;
5898 &#32;&#32;&#32;&#32;&#32;&#32;intervals()<emphasis role="keyword">&#32;const</emphasis>
5899 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
5900 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_param._M_int.empty())
5901 &#32;&#32;&#32;&#32;&#32;&#32;{
5902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;_RealType&gt;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>(2);
5903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>[1]&#32;=&#32;_RealType(1);
5904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
5905 &#32;&#32;&#32;&#32;&#32;&#32;}
5906 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5907 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param._M_int;
5908 &#32;&#32;&#32;&#32;&#32;&#32;}
5909 
5914 &#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;double&gt;
5915 &#32;&#32;&#32;&#32;&#32;&#32;densities()<emphasis role="keyword">&#32;const</emphasis>
5916 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
5917 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param._M_den.empty()
5918 &#32;&#32;&#32;&#32;&#32;&#32;?&#32;std::vector&lt;double&gt;(2,&#32;1.0)&#32;:&#32;_M_param._M_den;
5919 &#32;&#32;&#32;&#32;&#32;&#32;}
5920 
5924 &#32;&#32;&#32;&#32;&#32;&#32;param_type
5925 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>()<emphasis role="keyword">&#32;const</emphasis>
5926 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param;&#32;}
5927 
5932 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
5933 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>(<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__param)
5934 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_param&#32;=&#32;__param;&#32;}
5935 
5939 &#32;&#32;&#32;&#32;&#32;&#32;result_type
5940 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>()<emphasis role="keyword">&#32;const</emphasis>
5941 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
5942 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param._M_int.empty()
5943 &#32;&#32;&#32;&#32;&#32;&#32;?&#32;result_type(0)&#32;:&#32;_M_param._M_int.front();
5944 &#32;&#32;&#32;&#32;&#32;&#32;}
5945 
5949 &#32;&#32;&#32;&#32;&#32;&#32;result_type
5950 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>()<emphasis role="keyword">&#32;const</emphasis>
5951 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
5952 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_param._M_int.empty()
5953 &#32;&#32;&#32;&#32;&#32;&#32;?&#32;result_type(1)&#32;:&#32;_M_param._M_int.back();
5954 &#32;&#32;&#32;&#32;&#32;&#32;}
5955 
5959 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
5960 &#32;&#32;&#32;&#32;result_type
5961 &#32;&#32;&#32;&#32;operator()(_UniformRandomNumberGenerator&amp;&#32;__urng)
5962 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;operator()(__urng,&#32;_M_param);&#32;}
5963 
5964 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
5965 &#32;&#32;&#32;&#32;result_type
5966 &#32;&#32;&#32;&#32;operator()(_UniformRandomNumberGenerator&amp;&#32;__urng,
5967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p);
5968 
5969 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
5970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
5971 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
5972 &#32;&#32;&#32;&#32;__generate(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
5973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng)
5974 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate(__f,&#32;__t,&#32;__urng,&#32;_M_param);&#32;}
5975 
5976 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
5977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
5978 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
5979 &#32;&#32;&#32;&#32;__generate(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
5980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
5981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
5982 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng,&#32;__p);&#32;}
5983 
5984 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
5985 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
5986 &#32;&#32;&#32;&#32;__generate(result_type*&#32;__f,&#32;result_type*&#32;__t,
5987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
5988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p)
5989 &#32;&#32;&#32;&#32;{&#32;this-&gt;__generate_impl(__f,&#32;__t,&#32;__urng,&#32;__p);&#32;}
5990 
5995 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
5996 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;piecewise_linear_distribution&amp;&#32;__d1,
5997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;piecewise_linear_distribution&amp;&#32;__d2)
5998 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__d1._M_param&#32;==&#32;__d2._M_param;&#32;}
5999 
6011 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
6012 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;
6013 &#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__os,
6014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::piecewise_linear_distribution&lt;_RealType1&gt;&amp;&#32;__x);
6015 
6027 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
6028 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;
6029 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a4560e59cc4f5ddaf0ec23d1a7050b611">operator&gt;&gt;</link>(std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__is,
6030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::piecewise_linear_distribution&lt;_RealType1&gt;&amp;&#32;__x);
6031 
6032 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
6033 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
6034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
6035 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
6036 &#32;&#32;&#32;&#32;__generate_impl(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__t,
6037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&#32;__urng,
6038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;param_type&amp;&#32;__p);
6039 
6040 &#32;&#32;&#32;&#32;&#32;&#32;param_type&#32;_M_param;
6041 &#32;&#32;&#32;&#32;};
6042 
6047 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RealType&gt;
6048 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
6049 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;std::piecewise_linear_distribution&lt;_RealType&gt;&amp;&#32;__d1,
6050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::piecewise_linear_distribution&lt;_RealType&gt;&amp;&#32;__d2)
6051 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__d1&#32;==&#32;__d2);&#32;}
6052 
6053 
6055 
6057 
6068 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>seed_seq
6069 &#32;&#32;{
6070 &#32;&#32;<emphasis role="keyword">public</emphasis>:
6072 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ac0af81082969e5e3f4d939b1de7002ac">uint_least32_t</link>&#32;result_type;
6073 
6075 &#32;&#32;&#32;&#32;seed_seq()&#32;noexcept
6076 &#32;&#32;&#32;&#32;:&#32;_M_v()
6077 &#32;&#32;&#32;&#32;{&#32;}
6078 
6079 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IntType,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_Require&lt;is_<emphasis role="keywordtype">int</emphasis>egral&lt;_IntType&gt;&gt;&gt;
6080 &#32;&#32;&#32;&#32;&#32;&#32;seed_seq(std::initializer_list&lt;_IntType&gt;&#32;__il);
6081 
6082 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
6083 &#32;&#32;&#32;&#32;&#32;&#32;seed_seq(_InputIterator&#32;__begin,&#32;_InputIterator&#32;__end);
6084 
6085 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;generating&#32;functions</emphasis>
6086 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator&gt;
6087 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
6088 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1_1_generators_1a3b0ab1f589b1d1e0e92afcd12cf4ab12">generate</link>(_RandomAccessIterator&#32;__begin,&#32;_RandomAccessIterator&#32;__end);
6089 
6090 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;property&#32;functions</emphasis>
6091 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;const&#32;noexcept
6092 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_v.size();&#32;}
6093 
6094 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator&gt;
6095 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
6096 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>(_OutputIterator&#32;__dest)<emphasis role="keyword">&#32;const</emphasis>
6097 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link>(_M_v.begin(),&#32;_M_v.end(),&#32;__dest);&#32;}
6098 
6099 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;no&#32;copy&#32;functions</emphasis>
6100 &#32;&#32;&#32;&#32;seed_seq(<emphasis role="keyword">const</emphasis>&#32;seed_seq&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
6101 &#32;&#32;&#32;&#32;seed_seq&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;seed_seq&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
6102 
6103 &#32;&#32;<emphasis role="keyword">private</emphasis>:
6104 &#32;&#32;&#32;&#32;std::vector&lt;result_type&gt;&#32;_M_v;
6105 &#32;&#32;};
6106 
6108 
6110 
6111 _GLIBCXX_END_NAMESPACE_VERSION
6112 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
6113 
6114 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
