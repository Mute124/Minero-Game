<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2debug_2stl__iterator_8h_source" xml:lang="en-US">
<title>stl_iterator.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/debug/stl_iterator.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Debugging&#32;support&#32;implementation&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2015-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
29 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_DEBUG_STL_ITERATOR_H</emphasis>
30 <emphasis role="preprocessor">#define&#32;_GLIBCXX_DEBUG_STL_ITERATOR_H&#32;1</emphasis>
31 
32 <emphasis role="preprocessor">#include&#32;&lt;debug/helper_functions.h&gt;</emphasis>
33 
34 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__debug">__gnu_debug</link>
35 {
36 &#32;&#32;<emphasis role="comment">//&#32;Help&#32;Debug&#32;mode&#32;to&#32;see&#32;through&#32;reverse_iterator.</emphasis>
37 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
38 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
39 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
40 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a9572a31ecdf84000cb4a07f30b49fc7a">__valid_range</link>(<emphasis role="keyword">const</emphasis>&#32;std::reverse_iterator&lt;_Iterator&gt;&amp;&#32;__first,
41 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::reverse_iterator&lt;_Iterator&gt;&amp;&#32;__last,
42 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__debug_1_1___distance__traits_1a233783a24e495312304a160308fb74f9">_Distance_traits&lt;_Iterator&gt;::__type</link>&amp;&#32;__dist)
43 &#32;&#32;&#32;&#32;{
44 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____gnu__debug_1a9572a31ecdf84000cb4a07f30b49fc7a">__gnu_debug::__valid_range</link>(__last.base(),&#32;__first.base(),&#32;__dist);
45 &#32;&#32;&#32;&#32;}
46 
47 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
48 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
49 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__debug_1_1___distance__traits_1a233783a24e495312304a160308fb74f9">_Distance_traits&lt;_Iterator&gt;::__type</link>
50 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a518145bac2cae219ec1ccd6d3f0fbde0">__get_distance</link>(<emphasis role="keyword">const</emphasis>&#32;std::reverse_iterator&lt;_Iterator&gt;&amp;&#32;__first,
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::reverse_iterator&lt;_Iterator&gt;&amp;&#32;__last)
52 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____gnu__debug_1a518145bac2cae219ec1ccd6d3f0fbde0">__gnu_debug::__get_distance</link>(__last.base(),&#32;__first.base());&#32;}
53 
54 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size&gt;
55 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
56 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
57 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a346c18cccaed1159bff97f607e2f9214">__can_advance</link>(<emphasis role="keyword">const</emphasis>&#32;std::reverse_iterator&lt;_Iterator&gt;&amp;&#32;__it,&#32;_Size&#32;__n)
58 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____gnu__debug_1a346c18cccaed1159bff97f607e2f9214">__gnu_debug::__can_advance</link>(__it.base(),&#32;-__n);&#32;}
59 
60 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Diff&gt;
61 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
62 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
63 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a346c18cccaed1159bff97f607e2f9214">__can_advance</link>(<emphasis role="keyword">const</emphasis>&#32;std::reverse_iterator&lt;_Iterator&gt;&amp;&#32;__it,
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::pair&lt;_Diff,&#32;_Distance_precision&gt;&amp;&#32;__dist,
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;__way)
66 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____gnu__debug_1a346c18cccaed1159bff97f607e2f9214">__gnu_debug::__can_advance</link>(__it.base(),&#32;__dist,&#32;-__way);&#32;}
67 
68 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sequence&gt;
69 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
70 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::reverse_iterator&lt;_Iterator&gt;
71 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a462d3f2cc5cb94a7cb98e035cd61b763">__base</link>(<emphasis role="keyword">const</emphasis>&#32;std::reverse_iterator&lt;_Safe_iterator&lt;
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Iterator,&#32;_Sequence,&#32;std::random_access_iterator_tag&gt;&#32;&gt;&amp;&#32;__it)
73 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::reverse_iterator&lt;_Iterator&gt;(__it.base().base());&#32;}
74 
75 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
76 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
77 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Unsafe_type&lt;<link linkend="_namespacestd">std</link>::reverse_iterator&lt;_Iterator&gt;&#32;&gt;
78 &#32;&#32;&#32;&#32;{
79 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__debug_1_1___unsafe__type_1a6832ef2b15662b4a97609817f76e2109">_Unsafe_type&lt;_Iterator&gt;::_Type</link>&#32;<link linkend="_struct____gnu__debug_1_1___unsafe__type_3_01std_1_1reverse__iterator_3_01___iterator_01_4_01_4_1a515fbf8dbb044fc95cb5364615518460">_UnsafeType</link>;
80 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::reverse_iterator&lt;_UnsafeType&gt;&#32;<link linkend="_struct____gnu__debug_1_1___unsafe__type_3_01std_1_1reverse__iterator_3_01___iterator_01_4_01_4_1a2560a6cebe45bf5f1c17fdeaa9e87f38">_Type</link>;
81 &#32;&#32;&#32;&#32;};
82 
83 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
84 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::reverse_iterator&lt;typename&#32;_Unsafe_type&lt;_Iterator&gt;::_Type&gt;
85 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a93a80d764483413811a41139bb6ee4ac">__unsafe</link>(<emphasis role="keyword">const</emphasis>&#32;std::reverse_iterator&lt;_Iterator&gt;&amp;&#32;__it)
86 &#32;&#32;&#32;&#32;{
87 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__debug_1_1___unsafe__type_1a6832ef2b15662b4a97609817f76e2109">_Unsafe_type&lt;_Iterator&gt;::_Type</link>&#32;_UnsafeType;
88 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::reverse_iterator&lt;_UnsafeType&gt;(<link linkend="_namespace____gnu__debug_1a93a80d764483413811a41139bb6ee4ac">__unsafe</link>(__it.base()));
89 &#32;&#32;&#32;&#32;}
90 <emphasis role="preprocessor">#else</emphasis>
91 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
92 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
93 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
94 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a93a80d764483413811a41139bb6ee4ac">__unsafe</link>(<emphasis role="keyword">const</emphasis>&#32;std::reverse_iterator&lt;_Iterator&gt;&amp;&#32;__it)
95 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(std::__make_reverse_iterator(<link linkend="_namespace____gnu__debug_1a93a80d764483413811a41139bb6ee4ac">__unsafe</link>(__it.base())))
96 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__make_reverse_iterator(<link linkend="_namespace____gnu__debug_1a93a80d764483413811a41139bb6ee4ac">__unsafe</link>(__it.base()));&#32;}
97 <emphasis role="preprocessor">#endif</emphasis>
98 
99 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
100 &#32;&#32;<emphasis role="comment">//&#32;Help&#32;Debug&#32;mode&#32;to&#32;see&#32;through&#32;move_iterator.</emphasis>
101 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
102 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
103 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
104 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a9572a31ecdf84000cb4a07f30b49fc7a">__valid_range</link>(<emphasis role="keyword">const</emphasis>&#32;std::move_iterator&lt;_Iterator&gt;&amp;&#32;__first,
105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::move_iterator&lt;_Iterator&gt;&amp;&#32;__last,
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__debug_1_1___distance__traits_1a233783a24e495312304a160308fb74f9">_Distance_traits&lt;_Iterator&gt;::__type</link>&amp;&#32;__dist)
107 &#32;&#32;&#32;&#32;{
108 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____gnu__debug_1a9572a31ecdf84000cb4a07f30b49fc7a">__gnu_debug::__valid_range</link>(__first.base(),&#32;__last.base(),&#32;__dist);
109 &#32;&#32;&#32;&#32;}
110 
111 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
112 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
113 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__debug_1_1___distance__traits_1a233783a24e495312304a160308fb74f9">_Distance_traits&lt;_Iterator&gt;::__type</link>
114 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a518145bac2cae219ec1ccd6d3f0fbde0">__get_distance</link>(<emphasis role="keyword">const</emphasis>&#32;std::move_iterator&lt;_Iterator&gt;&amp;&#32;__first,
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::move_iterator&lt;_Iterator&gt;&amp;&#32;__last)
116 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____gnu__debug_1a518145bac2cae219ec1ccd6d3f0fbde0">__gnu_debug::__get_distance</link>(__first.base(),&#32;__last.base());&#32;}
117 
118 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size&gt;
119 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
120 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
121 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a346c18cccaed1159bff97f607e2f9214">__can_advance</link>(<emphasis role="keyword">const</emphasis>&#32;std::move_iterator&lt;_Iterator&gt;&amp;&#32;__it,&#32;_Size&#32;__n)
122 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____gnu__debug_1a346c18cccaed1159bff97f607e2f9214">__gnu_debug::__can_advance</link>(__it.base(),&#32;__n);&#32;}
123 
124 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Diff&gt;
125 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
126 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
127 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a346c18cccaed1159bff97f607e2f9214">__can_advance</link>(<emphasis role="keyword">const</emphasis>&#32;std::move_iterator&lt;_Iterator&gt;&amp;&#32;__it,
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::pair&lt;_Diff,&#32;_Distance_precision&gt;&amp;&#32;__dist,
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;__way)
130 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____gnu__debug_1a346c18cccaed1159bff97f607e2f9214">__gnu_debug::__can_advance</link>(__it.base(),&#32;__dist,&#32;__way);&#32;}
131 
132 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
133 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
134 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
135 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a93a80d764483413811a41139bb6ee4ac">__unsafe</link>(<emphasis role="keyword">const</emphasis>&#32;std::move_iterator&lt;_Iterator&gt;&amp;&#32;__it)
136 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(std::make_move_iterator(<link linkend="_namespace____gnu__debug_1a93a80d764483413811a41139bb6ee4ac">__unsafe</link>(__it.base())))
137 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_move_iterator(<link linkend="_namespace____gnu__debug_1a93a80d764483413811a41139bb6ee4ac">__unsafe</link>(__it.base()));&#32;}
138 
139 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
140 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
141 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
142 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a462d3f2cc5cb94a7cb98e035cd61b763">__base</link>(<emphasis role="keyword">const</emphasis>&#32;std::move_iterator&lt;_Iterator&gt;&amp;&#32;__it)
143 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(std::make_move_iterator(<link linkend="_namespace____gnu__debug_1a462d3f2cc5cb94a7cb98e035cd61b763">__base</link>(__it.base())))
144 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_move_iterator(<link linkend="_namespace____gnu__debug_1a462d3f2cc5cb94a7cb98e035cd61b763">__base</link>(__it.base()));&#32;}
145 <emphasis role="preprocessor">#endif</emphasis>
146 }
147 
148 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
