<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2stddef_8h_source" xml:lang="en-US">
<title>stddef.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/stddef.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="preprocessor">#include_next&#32;&lt;stddef.h&gt;</emphasis>
2 <emphasis role="comment">/*&#32;Copyright&#32;(C)&#32;1989-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
3 <emphasis role="comment"></emphasis>
4 <emphasis role="comment">This&#32;file&#32;is&#32;part&#32;of&#32;GCC.</emphasis>
5 <emphasis role="comment"></emphasis>
6 <emphasis role="comment">GCC&#32;is&#32;free&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify</emphasis>
7 <emphasis role="comment">it&#32;under&#32;the&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by</emphasis>
8 <emphasis role="comment">the&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">any&#32;later&#32;version.</emphasis>
10 <emphasis role="comment"></emphasis>
11 <emphasis role="comment">GCC&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 <emphasis role="comment"></emphasis>
16 <emphasis role="comment">Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 <emphasis role="comment"></emphasis>
20 <emphasis role="comment">You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">&lt;http://www.gnu.org/licenses/&gt;.&#32;&#32;*/</emphasis>
24 
25 <emphasis role="comment">/*</emphasis>
26 <emphasis role="comment">&#32;*&#32;ISO&#32;C&#32;Standard:&#32;&#32;7.17&#32;&#32;Common&#32;definitions&#32;&#32;&lt;stddef.h&gt;</emphasis>
27 <emphasis role="comment">&#32;*/</emphasis>
28 <emphasis role="preprocessor">#if&#32;(!defined(_STDDEF_H)&#32;&amp;&amp;&#32;!defined(_STDDEF_H_)&#32;&amp;&amp;&#32;!defined(_ANSI_STDDEF_H)&#32;\</emphasis>
29 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!defined(__STDDEF_H__))&#32;\</emphasis>
30 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;||&#32;defined(__need_wchar_t)&#32;||&#32;defined(__need_size_t)&#32;\</emphasis>
31 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;||&#32;defined(__need_ptrdiff_t)&#32;||&#32;defined(__need_NULL)&#32;\</emphasis>
32 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;||&#32;defined(__need_wint_t)</emphasis>
33 
34 <emphasis role="comment">/*&#32;Any&#32;one&#32;of&#32;these&#32;symbols&#32;__need_*&#32;means&#32;that&#32;GNU&#32;libc</emphasis>
35 <emphasis role="comment">&#32;&#32;&#32;wants&#32;us&#32;just&#32;to&#32;define&#32;one&#32;data&#32;type.&#32;&#32;So&#32;don&apos;t&#32;define</emphasis>
36 <emphasis role="comment">&#32;&#32;&#32;the&#32;symbols&#32;that&#32;indicate&#32;this&#32;file&apos;s&#32;entire&#32;job&#32;has&#32;been&#32;done.&#32;&#32;*/</emphasis>
37 <emphasis role="preprocessor">#if&#32;(!defined(__need_wchar_t)&#32;&amp;&amp;&#32;!defined(__need_size_t)&#32;&#32;&#32;&#32;\</emphasis>
38 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!defined(__need_ptrdiff_t)&#32;&amp;&amp;&#32;!defined(__need_NULL)&#32;\</emphasis>
39 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!defined(__need_wint_t))</emphasis>
40 <emphasis role="preprocessor">#define&#32;_STDDEF_H</emphasis>
41 <emphasis role="preprocessor">#define&#32;_STDDEF_H_</emphasis>
42 <emphasis role="comment">/*&#32;snaroff@next.com&#32;says&#32;the&#32;NeXT&#32;needs&#32;this.&#32;&#32;*/</emphasis>
43 <emphasis role="preprocessor">#define&#32;_ANSI_STDDEF_H</emphasis>
44 <emphasis role="preprocessor">#endif</emphasis>
45 
46 <emphasis role="preprocessor">#ifndef&#32;__sys_stdtypes_h</emphasis>
47 <emphasis role="comment">/*&#32;This&#32;avoids&#32;lossage&#32;on&#32;SunOS&#32;but&#32;only&#32;if&#32;stdtypes.h&#32;comes&#32;first.</emphasis>
48 <emphasis role="comment">&#32;&#32;&#32;There&apos;s&#32;no&#32;way&#32;to&#32;win&#32;with&#32;the&#32;other&#32;order!&#32;&#32;Sun&#32;lossage.&#32;&#32;*/</emphasis>
49 
50 <emphasis role="preprocessor">#if&#32;defined(__NetBSD__)</emphasis>
51 <emphasis role="preprocessor">#include&#32;&lt;machine/ansi.h&gt;</emphasis>
52 <emphasis role="preprocessor">#endif</emphasis>
53 
54 <emphasis role="preprocessor">#if&#32;defined&#32;(__FreeBSD__)</emphasis>
55 <emphasis role="preprocessor">#include&#32;&lt;sys/_types.h&gt;</emphasis>
56 <emphasis role="preprocessor">#endif</emphasis>
57 
58 <emphasis role="preprocessor">#if&#32;defined(__NetBSD__)</emphasis>
59 <emphasis role="preprocessor">#if&#32;!defined(_SIZE_T_)&#32;&amp;&amp;&#32;!defined(_BSD_SIZE_T_)</emphasis>
60 <emphasis role="preprocessor">#define&#32;_SIZE_T</emphasis>
61 <emphasis role="preprocessor">#endif</emphasis>
62 <emphasis role="preprocessor">#if&#32;!defined(_PTRDIFF_T_)&#32;&amp;&amp;&#32;!defined(_BSD_PTRDIFF_T_)</emphasis>
63 <emphasis role="preprocessor">#define&#32;_PTRDIFF_T</emphasis>
64 <emphasis role="preprocessor">#endif</emphasis>
65 <emphasis role="comment">/*&#32;On&#32;BSD/386&#32;1.1,&#32;at&#32;least,&#32;machine/ansi.h&#32;defines&#32;_BSD_WCHAR_T_</emphasis>
66 <emphasis role="comment">&#32;&#32;&#32;instead&#32;of&#32;_WCHAR_T_.&#32;*/</emphasis>
67 <emphasis role="preprocessor">#if&#32;!defined(_WCHAR_T_)&#32;&amp;&amp;&#32;!defined(_BSD_WCHAR_T_)</emphasis>
68 <emphasis role="preprocessor">#ifndef&#32;_BSD_WCHAR_T_</emphasis>
69 <emphasis role="preprocessor">#define&#32;_WCHAR_T</emphasis>
70 <emphasis role="preprocessor">#endif</emphasis>
71 <emphasis role="preprocessor">#endif</emphasis>
72 <emphasis role="comment">/*&#32;Undef&#32;_FOO_T_&#32;if&#32;we&#32;are&#32;supposed&#32;to&#32;define&#32;foo_t.&#32;&#32;*/</emphasis>
73 <emphasis role="preprocessor">#if&#32;defined&#32;(__need_ptrdiff_t)&#32;||&#32;defined&#32;(_STDDEF_H_)</emphasis>
74 <emphasis role="preprocessor">#undef&#32;_PTRDIFF_T_</emphasis>
75 <emphasis role="preprocessor">#undef&#32;_BSD_PTRDIFF_T_</emphasis>
76 <emphasis role="preprocessor">#endif</emphasis>
77 <emphasis role="preprocessor">#if&#32;defined&#32;(__need_size_t)&#32;||&#32;defined&#32;(_STDDEF_H_)</emphasis>
78 <emphasis role="preprocessor">#undef&#32;_SIZE_T_</emphasis>
79 <emphasis role="preprocessor">#undef&#32;_BSD_SIZE_T_</emphasis>
80 <emphasis role="preprocessor">#endif</emphasis>
81 <emphasis role="preprocessor">#if&#32;defined&#32;(__need_wchar_t)&#32;||&#32;defined&#32;(_STDDEF_H_)</emphasis>
82 <emphasis role="preprocessor">#undef&#32;_WCHAR_T_</emphasis>
83 <emphasis role="preprocessor">#undef&#32;_BSD_WCHAR_T_</emphasis>
84 <emphasis role="preprocessor">#endif</emphasis>
85 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;defined(__NetBSD__)&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
86 
87 <emphasis role="comment">/*&#32;Sequent&apos;s&#32;header&#32;files&#32;use&#32;_PTRDIFF_T_&#32;in&#32;some&#32;conflicting&#32;way.</emphasis>
88 <emphasis role="comment">&#32;&#32;&#32;Just&#32;ignore&#32;it.&#32;&#32;*/</emphasis>
89 <emphasis role="preprocessor">#if&#32;defined&#32;(__sequent__)&#32;&amp;&amp;&#32;defined&#32;(_PTRDIFF_T_)</emphasis>
90 <emphasis role="preprocessor">#undef&#32;_PTRDIFF_T_</emphasis>
91 <emphasis role="preprocessor">#endif</emphasis>
92 
93 <emphasis role="comment">/*&#32;On&#32;VxWorks,&#32;&lt;type/vxTypesBase.h&gt;&#32;may&#32;have&#32;defined&#32;macros&#32;like</emphasis>
94 <emphasis role="comment">&#32;&#32;&#32;_TYPE_size_t&#32;which&#32;will&#32;typedef&#32;size_t.&#32;&#32;fixincludes&#32;patched&#32;the</emphasis>
95 <emphasis role="comment">&#32;&#32;&#32;vxTypesBase.h&#32;so&#32;that&#32;this&#32;macro&#32;is&#32;only&#32;defined&#32;if&#32;_GCC_SIZE_T&#32;is</emphasis>
96 <emphasis role="comment">&#32;&#32;&#32;not&#32;defined,&#32;and&#32;so&#32;that&#32;defining&#32;this&#32;macro&#32;defines&#32;_GCC_SIZE_T.</emphasis>
97 <emphasis role="comment">&#32;&#32;&#32;If&#32;we&#32;find&#32;that&#32;the&#32;macros&#32;are&#32;still&#32;defined&#32;at&#32;this&#32;point,&#32;we&#32;must</emphasis>
98 <emphasis role="comment">&#32;&#32;&#32;invoke&#32;them&#32;so&#32;that&#32;the&#32;type&#32;is&#32;defined&#32;as&#32;expected.&#32;&#32;*/</emphasis>
99 <emphasis role="preprocessor">#if&#32;defined&#32;(_TYPE_ptrdiff_t)&#32;&amp;&amp;&#32;(defined&#32;(__need_ptrdiff_t)&#32;||&#32;defined&#32;(_STDDEF_H_))</emphasis>
100 _TYPE_ptrdiff_t;
101 <emphasis role="preprocessor">#undef&#32;_TYPE_ptrdiff_t</emphasis>
102 <emphasis role="preprocessor">#endif</emphasis>
103 <emphasis role="preprocessor">#if&#32;defined&#32;(_TYPE_size_t)&#32;&amp;&amp;&#32;(defined&#32;(__need_size_t)&#32;||&#32;defined&#32;(_STDDEF_H_))</emphasis>
104 _TYPE_size_t;
105 <emphasis role="preprocessor">#undef&#32;_TYPE_size_t</emphasis>
106 <emphasis role="preprocessor">#endif</emphasis>
107 <emphasis role="preprocessor">#if&#32;defined&#32;(_TYPE_wchar_t)&#32;&amp;&amp;&#32;(defined&#32;(__need_wchar_t)&#32;||&#32;defined&#32;(_STDDEF_H_))</emphasis>
108 _TYPE_wchar_t;
109 <emphasis role="preprocessor">#undef&#32;_TYPE_wchar_t</emphasis>
110 <emphasis role="preprocessor">#endif</emphasis>
111 
112 <emphasis role="comment">/*&#32;In&#32;case&#32;nobody&#32;has&#32;defined&#32;these&#32;types,&#32;but&#32;we&#32;aren&apos;t&#32;running&#32;under</emphasis>
113 <emphasis role="comment">&#32;&#32;&#32;GCC&#32;2.00,&#32;make&#32;sure&#32;that&#32;__PTRDIFF_TYPE__,&#32;__SIZE_TYPE__,&#32;and</emphasis>
114 <emphasis role="comment">&#32;&#32;&#32;__WCHAR_TYPE__&#32;have&#32;reasonable&#32;values.&#32;&#32;This&#32;can&#32;happen&#32;if&#32;the</emphasis>
115 <emphasis role="comment">&#32;&#32;&#32;parts&#32;of&#32;GCC&#32;is&#32;compiled&#32;by&#32;an&#32;older&#32;compiler,&#32;that&#32;actually</emphasis>
116 <emphasis role="comment">&#32;&#32;&#32;include&#32;gstddef.h,&#32;such&#32;as&#32;collect2.&#32;&#32;*/</emphasis>
117 
118 <emphasis role="comment">/*&#32;Signed&#32;type&#32;of&#32;difference&#32;of&#32;two&#32;pointers.&#32;&#32;*/</emphasis>
119 
120 <emphasis role="comment">/*&#32;Define&#32;this&#32;type&#32;if&#32;we&#32;are&#32;doing&#32;the&#32;whole&#32;job,</emphasis>
121 <emphasis role="comment">&#32;&#32;&#32;or&#32;if&#32;we&#32;want&#32;this&#32;type&#32;in&#32;particular.&#32;&#32;*/</emphasis>
122 <emphasis role="preprocessor">#if&#32;defined&#32;(_STDDEF_H)&#32;||&#32;defined&#32;(__need_ptrdiff_t)</emphasis>
123 <emphasis role="preprocessor">#ifndef&#32;_PTRDIFF_T&#32;&#32;</emphasis><emphasis role="comment">/*&#32;in&#32;case&#32;&lt;sys/types.h&gt;&#32;has&#32;defined&#32;it.&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
124 <emphasis role="preprocessor">#ifndef&#32;_T_PTRDIFF_</emphasis>
125 <emphasis role="preprocessor">#ifndef&#32;_T_PTRDIFF</emphasis>
126 <emphasis role="preprocessor">#ifndef&#32;__PTRDIFF_T</emphasis>
127 <emphasis role="preprocessor">#ifndef&#32;_PTRDIFF_T_</emphasis>
128 <emphasis role="preprocessor">#ifndef&#32;_BSD_PTRDIFF_T_</emphasis>
129 <emphasis role="preprocessor">#ifndef&#32;___int_ptrdiff_t_h</emphasis>
130 <emphasis role="preprocessor">#ifndef&#32;_GCC_PTRDIFF_T</emphasis>
131 <emphasis role="preprocessor">#ifndef&#32;_PTRDIFF_T_DECLARED&#32;</emphasis><emphasis role="comment">/*&#32;DragonFly&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
132 <emphasis role="preprocessor">#ifndef&#32;__DEFINED_ptrdiff_t&#32;</emphasis><emphasis role="comment">/*&#32;musl&#32;libc&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
133 <emphasis role="preprocessor">#define&#32;_PTRDIFF_T</emphasis>
134 <emphasis role="preprocessor">#define&#32;_T_PTRDIFF_</emphasis>
135 <emphasis role="preprocessor">#define&#32;_T_PTRDIFF</emphasis>
136 <emphasis role="preprocessor">#define&#32;__PTRDIFF_T</emphasis>
137 <emphasis role="preprocessor">#define&#32;_PTRDIFF_T_</emphasis>
138 <emphasis role="preprocessor">#define&#32;_BSD_PTRDIFF_T_</emphasis>
139 <emphasis role="preprocessor">#define&#32;___int_ptrdiff_t_h</emphasis>
140 <emphasis role="preprocessor">#define&#32;_GCC_PTRDIFF_T</emphasis>
141 <emphasis role="preprocessor">#define&#32;_PTRDIFF_T_DECLARED</emphasis>
142 <emphasis role="preprocessor">#define&#32;__DEFINED_ptrdiff_t</emphasis>
143 <emphasis role="preprocessor">#ifndef&#32;__PTRDIFF_TYPE__</emphasis>
144 <emphasis role="preprocessor">#define&#32;__PTRDIFF_TYPE__&#32;long&#32;int</emphasis>
145 <emphasis role="preprocessor">#endif</emphasis>
146 <emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a726a020189392103a9404da070536e07">__PTRDIFF_TYPE__</link>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>;
147 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;__DEFINED_ptrdiff_t&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
148 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_PTRDIFF_T_DECLARED&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
149 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_GCC_PTRDIFF_T&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
150 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;___int_ptrdiff_t_h&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
151 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_BSD_PTRDIFF_T_&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
152 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_PTRDIFF_T_&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
153 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;__PTRDIFF_T&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
154 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_T_PTRDIFF&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
155 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_T_PTRDIFF_&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
156 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_PTRDIFF_T&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
157 
158 <emphasis role="comment">/*&#32;If&#32;this&#32;symbol&#32;has&#32;done&#32;its&#32;job,&#32;get&#32;rid&#32;of&#32;it.&#32;&#32;*/</emphasis>
159 <emphasis role="preprocessor">#undef&#32;&#32;__need_ptrdiff_t</emphasis>
160 
161 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_STDDEF_H&#32;or&#32;__need_ptrdiff_t.&#32;&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
162 
163 <emphasis role="comment">/*&#32;Unsigned&#32;type&#32;of&#32;`sizeof&apos;&#32;something.&#32;&#32;*/</emphasis>
164 
165 <emphasis role="comment">/*&#32;Define&#32;this&#32;type&#32;if&#32;we&#32;are&#32;doing&#32;the&#32;whole&#32;job,</emphasis>
166 <emphasis role="comment">&#32;&#32;&#32;or&#32;if&#32;we&#32;want&#32;this&#32;type&#32;in&#32;particular.&#32;&#32;*/</emphasis>
167 <emphasis role="preprocessor">#if&#32;defined&#32;(_STDDEF_H)&#32;||&#32;defined&#32;(__need_size_t)</emphasis>
168 <emphasis role="preprocessor">#ifndef&#32;__size_t__&#32;&#32;</emphasis><emphasis role="comment">/*&#32;BeOS&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
169 <emphasis role="preprocessor">#ifndef&#32;__SIZE_T__&#32;&#32;</emphasis><emphasis role="comment">/*&#32;Cray&#32;Unicos/Mk&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
170 <emphasis role="preprocessor">#ifndef&#32;_SIZE_T&#32;</emphasis><emphasis role="comment">/*&#32;in&#32;case&#32;&lt;sys/types.h&gt;&#32;has&#32;defined&#32;it.&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
171 <emphasis role="preprocessor">#ifndef&#32;_SYS_SIZE_T_H</emphasis>
172 <emphasis role="preprocessor">#ifndef&#32;_T_SIZE_</emphasis>
173 <emphasis role="preprocessor">#ifndef&#32;_T_SIZE</emphasis>
174 <emphasis role="preprocessor">#ifndef&#32;__SIZE_T</emphasis>
175 <emphasis role="preprocessor">#ifndef&#32;_SIZE_T_</emphasis>
176 <emphasis role="preprocessor">#ifndef&#32;_BSD_SIZE_T_</emphasis>
177 <emphasis role="preprocessor">#ifndef&#32;_SIZE_T_DEFINED_</emphasis>
178 <emphasis role="preprocessor">#ifndef&#32;_SIZE_T_DEFINED</emphasis>
179 <emphasis role="preprocessor">#ifndef&#32;_BSD_SIZE_T_DEFINED_&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">/*&#32;Darwin&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
180 <emphasis role="preprocessor">#ifndef&#32;_SIZE_T_DECLARED&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">/*&#32;FreeBSD&#32;5&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
181 <emphasis role="preprocessor">#ifndef&#32;__DEFINED_size_t&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">/*&#32;musl&#32;libc&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
182 <emphasis role="preprocessor">#ifndef&#32;___int_size_t_h</emphasis>
183 <emphasis role="preprocessor">#ifndef&#32;_GCC_SIZE_T</emphasis>
184 <emphasis role="preprocessor">#ifndef&#32;_SIZET_</emphasis>
185 <emphasis role="preprocessor">#ifndef&#32;__size_t</emphasis>
186 <emphasis role="preprocessor">#define&#32;__size_t__&#32;&#32;</emphasis><emphasis role="comment">/*&#32;BeOS&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
187 <emphasis role="preprocessor">#define&#32;__SIZE_T__&#32;&#32;</emphasis><emphasis role="comment">/*&#32;Cray&#32;Unicos/Mk&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
188 <emphasis role="preprocessor">#define&#32;_SIZE_T</emphasis>
189 <emphasis role="preprocessor">#define&#32;_SYS_SIZE_T_H</emphasis>
190 <emphasis role="preprocessor">#define&#32;_T_SIZE_</emphasis>
191 <emphasis role="preprocessor">#define&#32;_T_SIZE</emphasis>
192 <emphasis role="preprocessor">#define&#32;__SIZE_T</emphasis>
193 <emphasis role="preprocessor">#define&#32;_SIZE_T_</emphasis>
194 <emphasis role="preprocessor">#define&#32;_BSD_SIZE_T_</emphasis>
195 <emphasis role="preprocessor">#define&#32;_SIZE_T_DEFINED_</emphasis>
196 <emphasis role="preprocessor">#define&#32;_SIZE_T_DEFINED</emphasis>
197 <emphasis role="preprocessor">#define&#32;_BSD_SIZE_T_DEFINED_&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">/*&#32;Darwin&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
198 <emphasis role="preprocessor">#define&#32;_SIZE_T_DECLARED&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">/*&#32;FreeBSD&#32;5&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
199 <emphasis role="preprocessor">#define&#32;__DEFINED_size_t&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">/*&#32;musl&#32;libc&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
200 <emphasis role="preprocessor">#define&#32;___int_size_t_h</emphasis>
201 <emphasis role="preprocessor">#define&#32;_GCC_SIZE_T</emphasis>
202 <emphasis role="preprocessor">#define&#32;_SIZET_</emphasis>
203 <emphasis role="preprocessor">#if&#32;defined&#32;(__FreeBSD__)&#32;\</emphasis>
204 <emphasis role="preprocessor">&#32;&#32;||&#32;defined(__DragonFly__)&#32;\</emphasis>
205 <emphasis role="preprocessor">&#32;&#32;||&#32;defined(__FreeBSD_kernel__)&#32;\</emphasis>
206 <emphasis role="preprocessor">&#32;&#32;||&#32;defined(__VMS__)</emphasis>
207 <emphasis role="comment">/*&#32;__size_t&#32;is&#32;a&#32;typedef,&#32;must&#32;not&#32;trash&#32;it.&#32;&#32;*/</emphasis>
208 <emphasis role="preprocessor">#else</emphasis>
209 <emphasis role="preprocessor">#define&#32;__size_t</emphasis>
210 <emphasis role="preprocessor">#endif</emphasis>
211 <emphasis role="preprocessor">#ifndef&#32;__SIZE_TYPE__</emphasis>
212 <emphasis role="preprocessor">#define&#32;__SIZE_TYPE__&#32;long&#32;unsigned&#32;int</emphasis>
213 <emphasis role="preprocessor">#endif</emphasis>
214 <emphasis role="preprocessor">#if&#32;!(defined&#32;(__GNUG__)&#32;&amp;&amp;&#32;defined&#32;(size_t))</emphasis>
215 <emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1ab8d03bfd9e9120480015fc51dc8b8e65">__SIZE_TYPE__</link>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link>;
216 <emphasis role="preprocessor">#ifdef&#32;__BEOS__</emphasis>
217 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;ssize_t;
218 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;__BEOS__&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
219 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;!(defined&#32;(__GNUG__)&#32;&amp;&amp;&#32;defined&#32;(size_t))&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
220 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;__size_t&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
221 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_SIZET_&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
222 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_GCC_SIZE_T&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
223 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;___int_size_t_h&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
224 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;__DEFINED_size_t&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
225 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_SIZE_T_DECLARED&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
226 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_BSD_SIZE_T_DEFINED_&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
227 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_SIZE_T_DEFINED&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
228 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_SIZE_T_DEFINED_&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
229 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_BSD_SIZE_T_&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
230 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_SIZE_T_&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
231 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;__SIZE_T&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
232 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_T_SIZE&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
233 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_T_SIZE_&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
234 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_SYS_SIZE_T_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
235 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_SIZE_T&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
236 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;__SIZE_T__&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
237 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;__size_t__&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
238 <emphasis role="preprocessor">#undef&#32;&#32;__need_size_t</emphasis>
239 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_STDDEF_H&#32;or&#32;__need_size_t.&#32;&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
240 
241 
242 <emphasis role="comment">/*&#32;Wide&#32;character&#32;type.</emphasis>
243 <emphasis role="comment">&#32;&#32;&#32;Locale-writers&#32;should&#32;change&#32;this&#32;as&#32;necessary&#32;to</emphasis>
244 <emphasis role="comment">&#32;&#32;&#32;be&#32;big&#32;enough&#32;to&#32;hold&#32;unique&#32;values&#32;not&#32;between&#32;0&#32;and&#32;127,</emphasis>
245 <emphasis role="comment">&#32;&#32;&#32;and&#32;not&#32;(wchar_t)&#32;-1,&#32;for&#32;each&#32;defined&#32;multibyte&#32;character.&#32;&#32;*/</emphasis>
246 
247 <emphasis role="comment">/*&#32;Define&#32;this&#32;type&#32;if&#32;we&#32;are&#32;doing&#32;the&#32;whole&#32;job,</emphasis>
248 <emphasis role="comment">&#32;&#32;&#32;or&#32;if&#32;we&#32;want&#32;this&#32;type&#32;in&#32;particular.&#32;&#32;*/</emphasis>
249 <emphasis role="preprocessor">#if&#32;defined&#32;(_STDDEF_H)&#32;||&#32;defined&#32;(__need_wchar_t)</emphasis>
250 <emphasis role="preprocessor">#ifndef&#32;__wchar_t__&#32;</emphasis><emphasis role="comment">/*&#32;BeOS&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
251 <emphasis role="preprocessor">#ifndef&#32;__WCHAR_T__&#32;</emphasis><emphasis role="comment">/*&#32;Cray&#32;Unicos/Mk&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
252 <emphasis role="preprocessor">#ifndef&#32;_WCHAR_T</emphasis>
253 <emphasis role="preprocessor">#ifndef&#32;_T_WCHAR_</emphasis>
254 <emphasis role="preprocessor">#ifndef&#32;_T_WCHAR</emphasis>
255 <emphasis role="preprocessor">#ifndef&#32;__WCHAR_T</emphasis>
256 <emphasis role="preprocessor">#ifndef&#32;_WCHAR_T_</emphasis>
257 <emphasis role="preprocessor">#ifndef&#32;_BSD_WCHAR_T_</emphasis>
258 <emphasis role="preprocessor">#ifndef&#32;_BSD_WCHAR_T_DEFINED_&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">/*&#32;Darwin&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
259 <emphasis role="preprocessor">#ifndef&#32;_BSD_RUNE_T_DEFINED_&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">/*&#32;Darwin&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
260 <emphasis role="preprocessor">#ifndef&#32;_WCHAR_T_DECLARED&#32;</emphasis><emphasis role="comment">/*&#32;FreeBSD&#32;5&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
261 <emphasis role="preprocessor">#ifndef&#32;__DEFINED_wchar_t&#32;</emphasis><emphasis role="comment">/*&#32;musl&#32;libc&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
262 <emphasis role="preprocessor">#ifndef&#32;_WCHAR_T_DEFINED_</emphasis>
263 <emphasis role="preprocessor">#ifndef&#32;_WCHAR_T_DEFINED</emphasis>
264 <emphasis role="preprocessor">#ifndef&#32;_WCHAR_T_H</emphasis>
265 <emphasis role="preprocessor">#ifndef&#32;___int_wchar_t_h</emphasis>
266 <emphasis role="preprocessor">#ifndef&#32;__INT_WCHAR_T_H</emphasis>
267 <emphasis role="preprocessor">#ifndef&#32;_GCC_WCHAR_T</emphasis>
268 <emphasis role="preprocessor">#define&#32;__wchar_t__&#32;</emphasis><emphasis role="comment">/*&#32;BeOS&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
269 <emphasis role="preprocessor">#define&#32;__WCHAR_T__&#32;</emphasis><emphasis role="comment">/*&#32;Cray&#32;Unicos/Mk&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
270 <emphasis role="preprocessor">#define&#32;_WCHAR_T</emphasis>
271 <emphasis role="preprocessor">#define&#32;_T_WCHAR_</emphasis>
272 <emphasis role="preprocessor">#define&#32;_T_WCHAR</emphasis>
273 <emphasis role="preprocessor">#define&#32;__WCHAR_T</emphasis>
274 <emphasis role="preprocessor">#define&#32;_WCHAR_T_</emphasis>
275 <emphasis role="preprocessor">#define&#32;_BSD_WCHAR_T_</emphasis>
276 <emphasis role="preprocessor">#define&#32;_WCHAR_T_DEFINED_</emphasis>
277 <emphasis role="preprocessor">#define&#32;_WCHAR_T_DEFINED</emphasis>
278 <emphasis role="preprocessor">#define&#32;_WCHAR_T_H</emphasis>
279 <emphasis role="preprocessor">#define&#32;___int_wchar_t_h</emphasis>
280 <emphasis role="preprocessor">#define&#32;__INT_WCHAR_T_H</emphasis>
281 <emphasis role="preprocessor">#define&#32;_GCC_WCHAR_T</emphasis>
282 <emphasis role="preprocessor">#define&#32;_WCHAR_T_DECLARED</emphasis>
283 <emphasis role="preprocessor">#define&#32;__DEFINED_wchar_t</emphasis>
284 
285 <emphasis role="comment">/*&#32;On&#32;BSD/386&#32;1.1,&#32;at&#32;least,&#32;machine/ansi.h&#32;defines&#32;_BSD_WCHAR_T_</emphasis>
286 <emphasis role="comment">&#32;&#32;&#32;instead&#32;of&#32;_WCHAR_T_,&#32;and&#32;_BSD_RUNE_T_&#32;(which,&#32;unlike&#32;the&#32;other</emphasis>
287 <emphasis role="comment">&#32;&#32;&#32;symbols&#32;in&#32;the&#32;_FOO_T_&#32;family,&#32;stays&#32;defined&#32;even&#32;after&#32;its</emphasis>
288 <emphasis role="comment">&#32;&#32;&#32;corresponding&#32;type&#32;is&#32;defined).&#32;&#32;If&#32;we&#32;define&#32;wchar_t,&#32;then&#32;we</emphasis>
289 <emphasis role="comment">&#32;&#32;&#32;must&#32;undef&#32;_WCHAR_T_;&#32;for&#32;BSD/386&#32;1.1&#32;(and&#32;perhaps&#32;others),&#32;if</emphasis>
290 <emphasis role="comment">&#32;&#32;&#32;we&#32;undef&#32;_WCHAR_T_,&#32;then&#32;we&#32;must&#32;also&#32;define&#32;rune_t,&#32;since&#32;</emphasis>
291 <emphasis role="comment">&#32;&#32;&#32;headers&#32;like&#32;runetype.h&#32;assume&#32;that&#32;if&#32;machine/ansi.h&#32;is&#32;included,</emphasis>
292 <emphasis role="comment">&#32;&#32;&#32;and&#32;_BSD_WCHAR_T_&#32;is&#32;not&#32;defined,&#32;then&#32;rune_t&#32;is&#32;available.</emphasis>
293 <emphasis role="comment">&#32;&#32;&#32;machine/ansi.h&#32;says,&#32;&quot;Note&#32;that&#32;_WCHAR_T_&#32;and&#32;_RUNE_T_&#32;must&#32;be&#32;of</emphasis>
294 <emphasis role="comment">&#32;&#32;&#32;the&#32;same&#32;type.&quot;&#32;*/</emphasis>
295 <emphasis role="preprocessor">#ifdef&#32;_BSD_WCHAR_T_</emphasis>
296 <emphasis role="preprocessor">#undef&#32;_BSD_WCHAR_T_</emphasis>
297 <emphasis role="preprocessor">#ifdef&#32;_BSD_RUNE_T_</emphasis>
298 <emphasis role="preprocessor">#if&#32;!defined&#32;(_ANSI_SOURCE)&#32;&amp;&amp;&#32;!defined&#32;(_POSIX_SOURCE)</emphasis>
299 <emphasis role="keyword">typedef</emphasis>&#32;_BSD_RUNE_T_&#32;rune_t;
300 <emphasis role="preprocessor">#define&#32;_BSD_WCHAR_T_DEFINED_</emphasis>
301 <emphasis role="preprocessor">#define&#32;_BSD_RUNE_T_DEFINED_&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">/*&#32;Darwin&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
302 <emphasis role="preprocessor">#if&#32;defined&#32;(__FreeBSD__)&#32;&amp;&amp;&#32;(__FreeBSD__&#32;&lt;&#32;5)</emphasis>
303 <emphasis role="comment">/*&#32;Why&#32;is&#32;this&#32;file&#32;so&#32;hard&#32;to&#32;maintain&#32;properly?&#32;&#32;In&#32;contrast&#32;to</emphasis>
304 <emphasis role="comment">&#32;&#32;&#32;the&#32;comment&#32;above&#32;regarding&#32;BSD/386&#32;1.1,&#32;on&#32;FreeBSD&#32;for&#32;as&#32;long</emphasis>
305 <emphasis role="comment">&#32;&#32;&#32;as&#32;the&#32;symbol&#32;has&#32;existed,&#32;_BSD_RUNE_T_&#32;must&#32;not&#32;stay&#32;defined&#32;or</emphasis>
306 <emphasis role="comment">&#32;&#32;&#32;redundant&#32;typedefs&#32;will&#32;occur&#32;when&#32;stdlib.h&#32;is&#32;included&#32;after&#32;this&#32;file.&#32;*/</emphasis>
307 <emphasis role="preprocessor">#undef&#32;_BSD_RUNE_T_</emphasis>
308 <emphasis role="preprocessor">#endif</emphasis>
309 <emphasis role="preprocessor">#endif</emphasis>
310 <emphasis role="preprocessor">#endif</emphasis>
311 <emphasis role="preprocessor">#endif</emphasis>
312 <emphasis role="comment">/*&#32;FreeBSD&#32;5&#32;can&apos;t&#32;be&#32;handled&#32;well&#32;using&#32;&quot;traditional&quot;&#32;logic&#32;above</emphasis>
313 <emphasis role="comment">&#32;&#32;&#32;since&#32;it&#32;no&#32;longer&#32;defines&#32;_BSD_RUNE_T_&#32;yet&#32;still&#32;desires&#32;to&#32;export</emphasis>
314 <emphasis role="comment">&#32;&#32;&#32;rune_t&#32;in&#32;some&#32;cases...&#32;*/</emphasis>
315 <emphasis role="preprocessor">#if&#32;defined&#32;(__FreeBSD__)&#32;&amp;&amp;&#32;(__FreeBSD__&#32;&gt;=&#32;5)</emphasis>
316 <emphasis role="preprocessor">#if&#32;!defined&#32;(_ANSI_SOURCE)&#32;&amp;&amp;&#32;!defined&#32;(_POSIX_SOURCE)</emphasis>
317 <emphasis role="preprocessor">#if&#32;__BSD_VISIBLE</emphasis>
318 <emphasis role="preprocessor">#ifndef&#32;_RUNE_T_DECLARED</emphasis>
319 <emphasis role="keyword">typedef</emphasis>&#32;__rune_t&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rune_t;
320 <emphasis role="preprocessor">#define&#32;_RUNE_T_DECLARED</emphasis>
321 <emphasis role="preprocessor">#endif</emphasis>
322 <emphasis role="preprocessor">#endif</emphasis>
323 <emphasis role="preprocessor">#endif</emphasis>
324 <emphasis role="preprocessor">#endif</emphasis>
325 
326 <emphasis role="preprocessor">#ifndef&#32;__WCHAR_TYPE__</emphasis>
327 <emphasis role="preprocessor">#define&#32;__WCHAR_TYPE__&#32;int</emphasis>
328 <emphasis role="preprocessor">#endif</emphasis>
329 <emphasis role="preprocessor">#ifndef&#32;__cplusplus</emphasis>
330 <emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a4f41dbe213ea9662c1fb0f5af562e363">__WCHAR_TYPE__</link>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link>;
331 <emphasis role="preprocessor">#endif</emphasis>
332 <emphasis role="preprocessor">#endif</emphasis>
333 <emphasis role="preprocessor">#endif</emphasis>
334 <emphasis role="preprocessor">#endif</emphasis>
335 <emphasis role="preprocessor">#endif</emphasis>
336 <emphasis role="preprocessor">#endif</emphasis>
337 <emphasis role="preprocessor">#endif</emphasis>
338 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;__DEFINED_wchar_t&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
339 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_WCHAR_T_DECLARED&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
340 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_BSD_RUNE_T_DEFINED_&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
341 <emphasis role="preprocessor">#endif</emphasis>
342 <emphasis role="preprocessor">#endif</emphasis>
343 <emphasis role="preprocessor">#endif</emphasis>
344 <emphasis role="preprocessor">#endif</emphasis>
345 <emphasis role="preprocessor">#endif</emphasis>
346 <emphasis role="preprocessor">#endif</emphasis>
347 <emphasis role="preprocessor">#endif</emphasis>
348 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;__WCHAR_T__&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
349 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;__wchar_t__&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
350 <emphasis role="preprocessor">#undef&#32;&#32;__need_wchar_t</emphasis>
351 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_STDDEF_H&#32;or&#32;__need_wchar_t.&#32;&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
352 
353 <emphasis role="preprocessor">#if&#32;defined&#32;(__need_wint_t)</emphasis>
354 <emphasis role="preprocessor">#ifndef&#32;_WINT_T</emphasis>
355 <emphasis role="preprocessor">#define&#32;_WINT_T</emphasis>
356 
357 <emphasis role="preprocessor">#ifndef&#32;__WINT_TYPE__</emphasis>
358 <emphasis role="preprocessor">#define&#32;__WINT_TYPE__&#32;unsigned&#32;int</emphasis>
359 <emphasis role="preprocessor">#endif</emphasis>
360 <emphasis role="keyword">typedef</emphasis>&#32;__WINT_TYPE__&#32;wint_t;
361 <emphasis role="preprocessor">#endif</emphasis>
362 <emphasis role="preprocessor">#undef&#32;__need_wint_t</emphasis>
363 <emphasis role="preprocessor">#endif</emphasis>
364 
365 <emphasis role="preprocessor">#if&#32;defined(__NetBSD__)</emphasis>
366 <emphasis role="comment">/*&#32;&#32;The&#32;references&#32;to&#32;_GCC_PTRDIFF_T_,&#32;_GCC_SIZE_T_,&#32;and&#32;_GCC_WCHAR_T_</emphasis>
367 <emphasis role="comment">&#32;&#32;&#32;&#32;are&#32;probably&#32;typos&#32;and&#32;should&#32;be&#32;removed&#32;before&#32;2.8&#32;is&#32;released.&#32;&#32;*/</emphasis>
368 <emphasis role="preprocessor">#ifdef&#32;_GCC_PTRDIFF_T_</emphasis>
369 <emphasis role="preprocessor">#undef&#32;_PTRDIFF_T_</emphasis>
370 <emphasis role="preprocessor">#undef&#32;_BSD_PTRDIFF_T_</emphasis>
371 <emphasis role="preprocessor">#endif</emphasis>
372 <emphasis role="preprocessor">#ifdef&#32;_GCC_SIZE_T_</emphasis>
373 <emphasis role="preprocessor">#undef&#32;_SIZE_T_</emphasis>
374 <emphasis role="preprocessor">#undef&#32;_BSD_SIZE_T_</emphasis>
375 <emphasis role="preprocessor">#endif</emphasis>
376 <emphasis role="preprocessor">#ifdef&#32;_GCC_WCHAR_T_</emphasis>
377 <emphasis role="preprocessor">#undef&#32;_WCHAR_T_</emphasis>
378 <emphasis role="preprocessor">#undef&#32;_BSD_WCHAR_T_</emphasis>
379 <emphasis role="preprocessor">#endif</emphasis>
380 <emphasis role="comment">/*&#32;&#32;The&#32;following&#32;ones&#32;are&#32;the&#32;real&#32;ones.&#32;&#32;*/</emphasis>
381 <emphasis role="preprocessor">#ifdef&#32;_GCC_PTRDIFF_T</emphasis>
382 <emphasis role="preprocessor">#undef&#32;_PTRDIFF_T_</emphasis>
383 <emphasis role="preprocessor">#undef&#32;_BSD_PTRDIFF_T_</emphasis>
384 <emphasis role="preprocessor">#endif</emphasis>
385 <emphasis role="preprocessor">#ifdef&#32;_GCC_SIZE_T</emphasis>
386 <emphasis role="preprocessor">#undef&#32;_SIZE_T_</emphasis>
387 <emphasis role="preprocessor">#undef&#32;_BSD_SIZE_T_</emphasis>
388 <emphasis role="preprocessor">#endif</emphasis>
389 <emphasis role="preprocessor">#ifdef&#32;_GCC_WCHAR_T</emphasis>
390 <emphasis role="preprocessor">#undef&#32;_WCHAR_T_</emphasis>
391 <emphasis role="preprocessor">#undef&#32;_BSD_WCHAR_T_</emphasis>
392 <emphasis role="preprocessor">#endif</emphasis>
393 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;__NetBSD__&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
394 
395 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;__sys_stdtypes_h&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
396 
397 <emphasis role="comment">/*&#32;A&#32;null&#32;pointer&#32;constant.&#32;&#32;*/</emphasis>
398 
399 <emphasis role="preprocessor">#if&#32;defined&#32;(_STDDEF_H)&#32;||&#32;defined&#32;(__need_NULL)</emphasis>
400 <emphasis role="preprocessor">#undef&#32;NULL&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">/*&#32;in&#32;case&#32;&lt;stdio.h&gt;&#32;has&#32;defined&#32;it.&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
401 <emphasis role="preprocessor">#ifdef&#32;__GNUG__</emphasis>
402 <emphasis role="preprocessor">#define&#32;NULL&#32;__null</emphasis>
403 <emphasis role="preprocessor">#else&#32;&#32;&#32;</emphasis><emphasis role="comment">/*&#32;G++&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
404 <emphasis role="preprocessor">#ifndef&#32;__cplusplus</emphasis>
405 <emphasis role="preprocessor">#define&#32;NULL&#32;((void&#32;*)0)</emphasis>
406 <emphasis role="preprocessor">#else&#32;&#32;&#32;</emphasis><emphasis role="comment">/*&#32;C++&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
407 <emphasis role="preprocessor">#define&#32;NULL&#32;0</emphasis>
408 <emphasis role="preprocessor">#endif&#32;&#32;</emphasis><emphasis role="comment">/*&#32;C++&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
409 <emphasis role="preprocessor">#endif&#32;&#32;</emphasis><emphasis role="comment">/*&#32;G++&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
410 <emphasis role="preprocessor">#endif&#32;&#32;</emphasis><emphasis role="comment">/*&#32;NULL&#32;not&#32;defined&#32;and&#32;&lt;stddef.h&gt;&#32;or&#32;need&#32;NULL.&#32;&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
411 <emphasis role="preprocessor">#undef&#32;&#32;__need_NULL</emphasis>
412 
413 <emphasis role="preprocessor">#ifdef&#32;_STDDEF_H</emphasis>
414 
415 <emphasis role="comment">/*&#32;Offset&#32;of&#32;member&#32;MEMBER&#32;in&#32;a&#32;struct&#32;of&#32;type&#32;TYPE.&#32;*/</emphasis>
416 <emphasis role="preprocessor">#define&#32;offsetof(TYPE,&#32;MEMBER)&#32;__builtin_offsetof&#32;(TYPE,&#32;MEMBER)</emphasis>
417 
418 <emphasis role="preprocessor">#if&#32;(defined&#32;(__STDC_VERSION__)&#32;&amp;&amp;&#32;__STDC_VERSION__&#32;&gt;=&#32;201112L)&#32;\</emphasis>
419 <emphasis role="preprocessor">&#32;&#32;||&#32;(defined(__cplusplus)&#32;&amp;&amp;&#32;__cplusplus&#32;&gt;=&#32;201103L)</emphasis>
420 <emphasis role="preprocessor">#ifndef&#32;_GCC_MAX_ALIGN_T</emphasis>
421 <emphasis role="preprocessor">#define&#32;_GCC_MAX_ALIGN_T</emphasis>
422 <emphasis role="comment">/*&#32;Type&#32;whose&#32;alignment&#32;is&#32;supported&#32;in&#32;every&#32;context&#32;and&#32;is&#32;at&#32;least</emphasis>
423 <emphasis role="comment">&#32;&#32;&#32;as&#32;great&#32;as&#32;that&#32;of&#32;any&#32;standard&#32;type&#32;not&#32;using&#32;alignment</emphasis>
424 <emphasis role="comment">&#32;&#32;&#32;specifiers.&#32;&#32;*/</emphasis>
425 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>{
426 &#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;__max_align_ll&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__aligned__(__alignof__(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>))));
427 &#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;__max_align_ld&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__aligned__(__alignof__(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>))));
428 &#32;&#32;<emphasis role="comment">/*&#32;_Float128&#32;is&#32;defined&#32;as&#32;a&#32;basic&#32;type,&#32;so&#32;max_align_t&#32;must&#32;be</emphasis>
429 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;sufficiently&#32;aligned&#32;for&#32;it.&#32;&#32;This&#32;code&#32;must&#32;work&#32;in&#32;C++,&#32;so&#32;we</emphasis>
430 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;use&#32;__float128&#32;here;&#32;that&#32;is&#32;only&#32;available&#32;on&#32;some</emphasis>
431 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;architectures,&#32;but&#32;only&#32;on&#32;i386&#32;is&#32;extra&#32;alignment&#32;needed&#32;for</emphasis>
432 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;__float128.&#32;&#32;*/</emphasis>
433 <emphasis role="preprocessor">#ifdef&#32;__i386__</emphasis>
434 &#32;&#32;__float128&#32;__max_align_f128&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__aligned__(__alignof(__float128))));
435 <emphasis role="preprocessor">#endif</emphasis>
436 }&#32;max_align_t;
437 <emphasis role="preprocessor">#endif</emphasis>
438 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;C11&#32;or&#32;C++11.&#32;&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
439 
440 <emphasis role="preprocessor">#if&#32;defined(__cplusplus)&#32;&amp;&amp;&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
441 <emphasis role="preprocessor">#ifndef&#32;_GXX_NULLPTR_T</emphasis>
442 <emphasis role="preprocessor">#define&#32;_GXX_NULLPTR_T</emphasis>
443 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">nullptr</emphasis>)&#32;nullptr_t;
444 <emphasis role="preprocessor">#endif</emphasis>
445 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;C++11.&#32;&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
446 
447 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_STDDEF_H&#32;was&#32;defined&#32;this&#32;time&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
448 
449 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;!_STDDEF_H&#32;&amp;&amp;&#32;!_STDDEF_H_&#32;&amp;&amp;&#32;!_ANSI_STDDEF_H&#32;&amp;&amp;&#32;!__STDDEF_H__</emphasis>
450 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;||&#32;__need_XXX&#32;was&#32;not&#32;defined&#32;before&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
