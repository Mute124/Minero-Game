<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__ptrmem__adaptors" xml:lang="en-US">
<title>Adaptors for pointers to members</title>
<indexterm><primary>Adaptors for pointers to members</primary></indexterm>
Collaboration diagram for Adaptors for pointers to members:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__ptrmem__adaptors.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>

<para><?linebreak?></para>

<para>There are a total of 8 = 2^3 function objects in this family. (1) Member functions taking no arguments vs member functions taking one argument. (2) Call through pointer vs call through reference. (3) Const vs non-const member function.</para>

<para>All of this complexity is in the function objects themselves. You can ignore it by using the helper function <computeroutput>mem_fun</computeroutput> and <computeroutput>mem_fun_ref</computeroutput>, which create whichever type of adaptor is appropriate.</para>

<para><para><link linkend="_deprecated_1_deprecated000013">Deprecated</link> 
<para>Deprecated in C++11, no longer in the standard since C++17. Use <computeroutput>mem_fn</computeroutput> instead.</para>
</para></para>

<para><?linebreak?></para>

<para>There are a total of 8 = 2^3 function objects in this family. (1) Member functions taking no arguments vs member functions taking one argument. (2) Call through pointer vs call through reference. (3) Const vs non-const member function.</para>

<para>All of this complexity is in the function objects themselves. You can ignore it by using the helper function <computeroutput>mem_fun</computeroutput> and <computeroutput>mem_fun_ref</computeroutput>, which create whichever type of adaptor is appropriate.</para>

<para><para><link linkend="_deprecated_1_deprecated000029">Deprecated</link> 
<para>Deprecated in C++11, no longer in the standard since C++17. Use <computeroutput>mem_fn</computeroutput> instead.</para>
</para></para>

<para><?linebreak?></para>

<para>There are a total of 8 = 2^3 function objects in this family. (1) Member functions taking no arguments vs member functions taking one argument. (2) Call through pointer vs call through reference. (3) Const vs non-const member function.</para>

<para>All of this complexity is in the function objects themselves. You can ignore it by using the helper function <computeroutput>mem_fun</computeroutput> and <computeroutput>mem_fun_ref</computeroutput>, which create whichever type of adaptor is appropriate.</para>

<para><para><link linkend="_deprecated_1_deprecated000043">Deprecated</link> 
<para>Deprecated in C++11, no longer in the standard since C++17. Use <computeroutput>mem_fn</computeroutput> instead.</para>
</para></para>
</section>
