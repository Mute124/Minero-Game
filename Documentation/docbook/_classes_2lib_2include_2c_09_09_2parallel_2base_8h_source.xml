<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2parallel_2base_8h_source" xml:lang="en-US">
<title>base.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/parallel/base.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2007-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="comment">//&#32;Written&#32;by&#32;Johannes&#32;Singler.</emphasis>
31 
32 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_PARALLEL_BASE_H</emphasis>
33 <emphasis role="preprocessor">#define&#32;_GLIBCXX_PARALLEL_BASE_H&#32;1</emphasis>
34 
35 <emphasis role="preprocessor">#include&#32;&lt;bits/c++config.h&gt;</emphasis>
36 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_function.h&gt;</emphasis>
37 <emphasis role="preprocessor">#include&#32;&lt;omp.h&gt;</emphasis>
38 <emphasis role="preprocessor">#include&#32;&lt;parallel/features.h&gt;</emphasis>
39 <emphasis role="preprocessor">#include&#32;&lt;parallel/basic_iterator.h&gt;</emphasis>
40 <emphasis role="preprocessor">#include&#32;&lt;parallel/parallel.h&gt;</emphasis>
41 
42 <emphasis role="comment">//&#32;Parallel&#32;mode&#32;namespaces.</emphasis>
43 
48 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)&#32;
49 {&#32;
50 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>__parallel&#32;{&#32;}&#32;
51 }
52 
57 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__parallel">__gnu_parallel</link>
58 {
59 &#32;&#32;<emphasis role="comment">//&#32;Import&#32;all&#32;the&#32;parallel&#32;versions&#32;of&#32;components&#32;in&#32;namespace&#32;std.</emphasis>
60 &#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis><link linkend="_namespacestd_1_1____parallel">std::__parallel</link>;
61 }
62 
67 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__sequential">__gnu_sequential</link>&#32;
68 {&#32;
69 &#32;&#32;<emphasis role="comment">//&#32;Import&#32;whatever&#32;is&#32;the&#32;serial&#32;version.</emphasis>
70 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_PARALLEL</emphasis>
71 &#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>std::_GLIBCXX_STD_A;
72 <emphasis role="preprocessor">#else</emphasis>
73 &#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis><link linkend="_namespacestd">std</link>;
74 <emphasis role="preprocessor">#endif&#32;&#32;&#32;</emphasis>
75 }
76 
77 
78 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__parallel">__gnu_parallel</link>
79 {
80 &#32;&#32;<emphasis role="comment">//&#32;NB:&#32;Including&#32;this&#32;file&#32;cannot&#32;produce&#32;(unresolved)&#32;symbols&#32;from</emphasis>
81 &#32;&#32;<emphasis role="comment">//&#32;the&#32;OpenMP&#32;runtime&#32;unless&#32;the&#32;parallel&#32;mode&#32;is&#32;actually&#32;invoked</emphasis>
82 &#32;&#32;<emphasis role="comment">//&#32;and&#32;active,&#32;which&#32;imples&#32;that&#32;the&#32;OpenMP&#32;runtime&#32;is&#32;actually</emphasis>
83 &#32;&#32;<emphasis role="comment">//&#32;going&#32;to&#32;be&#32;linked&#32;in.</emphasis>
84 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>
85 &#32;&#32;<link linkend="_namespace____gnu__parallel_1aa72851b809c2b314bc09580c3512f281">__get_max_threads</link>()&#32;
86 &#32;&#32;{&#32;
87 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__i&#32;=&#32;<link linkend="__classes_2lib_2include_2omp_8h_1a54430ed3c727a27db57290ec784b0b09">omp_get_max_threads</link>();
88 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__i&#32;&gt;&#32;1&#32;?&#32;__i&#32;:&#32;1;&#32;
89 &#32;&#32;}
90 
91 
92 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;
93 &#32;&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__is_parallel</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">_Parallelism</link>&#32;__p)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__p&#32;!=&#32;<link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8ab0ba01dff81610e2936ab2e3c49445f9">sequential</link>;&#32;}
94 
95 
100 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Size&gt;
101 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_Size
102 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1ae8e1f6dc07de01f28bf591339cf8aa9c">__rd_log2</link>(_Size&#32;__n)
103 &#32;&#32;&#32;&#32;{
104 &#32;&#32;&#32;&#32;&#32;&#32;_Size&#32;__k;
105 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(__k&#32;=&#32;0;&#32;__n&#32;&gt;&#32;1;&#32;__n&#32;&gt;&gt;=&#32;1)
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__k;
107 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__k;
108 &#32;&#32;&#32;&#32;}
109 
118 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1aa1171c39f9e5afad6392c7aeefb81115">_CASable</link>
119 &#32;&#32;<link linkend="_namespace____gnu__parallel_1a7fcc29eb3f2d9c83756a9d99b4105b3b">__encode2</link>(<emphasis role="keywordtype">int</emphasis>&#32;__a,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__b)&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//must&#32;all&#32;be&#32;non-negative,&#32;actually</emphasis>
120 &#32;&#32;{
121 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(((<link linkend="_namespace____gnu__parallel_1aa1171c39f9e5afad6392c7aeefb81115">_CASable</link>)__a)&#32;&lt;&lt;&#32;(_CASable_bits&#32;/&#32;2))&#32;|&#32;(((<link linkend="_namespace____gnu__parallel_1aa1171c39f9e5afad6392c7aeefb81115">_CASable</link>)__b)&#32;&lt;&lt;&#32;0);
122 &#32;&#32;}
123 
132 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
133 &#32;&#32;<link linkend="_namespace____gnu__parallel_1aee3989c0ed2561801b8a6c0282008cca">__decode2</link>(<link linkend="_namespace____gnu__parallel_1aa1171c39f9e5afad6392c7aeefb81115">_CASable</link>&#32;__x,&#32;<emphasis role="keywordtype">int</emphasis>&amp;&#32;__a,&#32;<emphasis role="keywordtype">int</emphasis>&amp;&#32;__b)
134 &#32;&#32;{
135 &#32;&#32;&#32;&#32;__a&#32;=&#32;(int)((__x&#32;&gt;&gt;&#32;(_CASable_bits&#32;/&#32;2))&#32;&amp;&#32;_CASable_mask);
136 &#32;&#32;&#32;&#32;__b&#32;=&#32;(int)((__x&#32;&gt;&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0&#32;)&#32;&amp;&#32;_CASable_mask);
137 &#32;&#32;}
138 
139 &#32;&#32;<emphasis role="comment">//needed&#32;for&#32;parallel&#32;&quot;numeric&quot;,&#32;even&#32;if&#32;&quot;algorithm&quot;&#32;not&#32;included</emphasis>
140 
142 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
143 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;
144 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a417ee6b935946ea05ce7c45fd067541a">min</link>(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__b)
145 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__a&#32;&lt;&#32;__b)&#32;?&#32;__a&#32;:&#32;__b;&#32;}
146 
148 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
149 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;
150 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a2cade9be3af2e53828fe5a3865d2d9c1">max</link>(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__b)
151 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__a&#32;&gt;&#32;__b)&#32;?&#32;__a&#32;:&#32;__b;&#32;}
152 
156 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
157 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class____gnu__parallel_1_1___equal_from_less">_EqualFromLess</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;std::binary_function&lt;_T1,&#32;_T2,&#32;bool&gt;
158 &#32;&#32;&#32;&#32;{
159 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
160 &#32;&#32;&#32;&#32;&#32;&#32;_Compare&amp;&#32;_M_comp;
161 
162 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
163 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1___equal_from_less_1acf7667c303ccfb8b50d3c16982f9c3d3">_EqualFromLess</link>(_Compare&amp;&#32;__comp)&#32;:&#32;_M_comp(__comp)&#32;{&#32;}
164 
165 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class____gnu__parallel_1_1___equal_from_less_1afa19a91412e3a69a94b193fa7e21137c">operator()</link>(<emphasis role="keyword">const</emphasis>&#32;_T1&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;_T2&amp;&#32;__b)
166 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!_M_comp(__a,&#32;__b)&#32;&amp;&amp;&#32;!_M_comp(__b,&#32;__a);&#32;}
167 &#32;&#32;&#32;&#32;};
168 
169 
172 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Predicate,&#32;<emphasis role="keyword">typename</emphasis>&#32;argument_type&gt;
173 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class____gnu__parallel_1_1____unary__negate">__unary_negate</link>
174 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;std::unary_function&lt;argument_type,&#32;bool&gt;
175 &#32;&#32;&#32;&#32;{
176 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
177 &#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;<link linkend="_class____gnu__parallel_1_1____unary__negate_1aad5247af2ecf6e5e27011ddb316013c7">_M_pred</link>;
178 
179 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
180 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
181 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1____unary__negate_1a7004f3252eaf69368e56170e4be100b3">__unary_negate</link>(<emphasis role="keyword">const</emphasis>&#32;_Predicate&amp;&#32;__x)&#32;:&#32;<link linkend="_class____gnu__parallel_1_1____unary__negate_1aad5247af2ecf6e5e27011ddb316013c7">_M_pred</link>(__x)&#32;{&#32;}
182 
183 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
184 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1____unary__negate_1ae458bbf03dad2e38cc85b12f984f1c51">operator()</link>(<emphasis role="keyword">const</emphasis>&#32;argument_type&amp;&#32;__x)
185 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!<link linkend="_class____gnu__parallel_1_1____unary__negate_1aad5247af2ecf6e5e27011ddb316013c7">_M_pred</link>(__x);&#32;}
186 &#32;&#32;&#32;&#32;};
187 
190 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Operation,&#32;<emphasis role="keyword">typename</emphasis>&#32;_FirstArgumentType,
191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_SecondArgumentType,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ResultType&gt;
192 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class____gnu__parallel_1_1____binder1st">__binder1st</link>
193 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;std::unary_function&lt;_SecondArgumentType,&#32;_ResultType&gt;
194 &#32;&#32;&#32;&#32;{
195 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
196 &#32;&#32;&#32;&#32;&#32;&#32;_Operation&#32;<link linkend="_class____gnu__parallel_1_1____binder1st_1a9203574798827838bb80fcc5419be491">_M_op</link>;
197 &#32;&#32;&#32;&#32;&#32;&#32;_FirstArgumentType&#32;<link linkend="_class____gnu__parallel_1_1____binder1st_1aa5c9f2134fda256f7c72810a633e4fc4">_M_value</link>;
198 
199 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
200 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1____binder1st_1aca2704d366a7834354faa7991c20a955">__binder1st</link>(<emphasis role="keyword">const</emphasis>&#32;_Operation&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_FirstArgumentType&amp;&#32;__y)
201 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_class____gnu__parallel_1_1____binder1st_1a9203574798827838bb80fcc5419be491">_M_op</link>(__x),&#32;<link linkend="_class____gnu__parallel_1_1____binder1st_1aa5c9f2134fda256f7c72810a633e4fc4">_M_value</link>(__y)&#32;{&#32;}
202 
203 &#32;&#32;&#32;&#32;&#32;&#32;_ResultType
204 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1____binder1st_1a7c2be6673ea4a4981952e613a43bd1d5">operator()</link>(<emphasis role="keyword">const</emphasis>&#32;_SecondArgumentType&amp;&#32;__x)
205 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class____gnu__parallel_1_1____binder1st_1a9203574798827838bb80fcc5419be491">_M_op</link>(<link linkend="_class____gnu__parallel_1_1____binder1st_1aa5c9f2134fda256f7c72810a633e4fc4">_M_value</link>,&#32;__x);&#32;}
206 
207 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
208 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;109.&#32;&#32;Missing&#32;binders&#32;for&#32;non-const&#32;sequence&#32;elements</emphasis>
209 &#32;&#32;&#32;&#32;&#32;&#32;_ResultType
210 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1____binder1st_1a6d174093d2574f98132f84a60de81419">operator()</link>(_SecondArgumentType&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
211 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class____gnu__parallel_1_1____binder1st_1a9203574798827838bb80fcc5419be491">_M_op</link>(<link linkend="_class____gnu__parallel_1_1____binder1st_1aa5c9f2134fda256f7c72810a633e4fc4">_M_value</link>,&#32;__x);&#32;}
212 &#32;&#32;&#32;&#32;};
213 
218 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Operation,&#32;<emphasis role="keyword">typename</emphasis>&#32;_FirstArgumentType,
219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_SecondArgumentType,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ResultType&gt;
220 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class____gnu__parallel_1_1____binder2nd">__binder2nd</link>
221 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;std::unary_function&lt;_FirstArgumentType,&#32;_ResultType&gt;
222 &#32;&#32;&#32;&#32;{
223 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
224 &#32;&#32;&#32;&#32;&#32;&#32;_Operation&#32;<link linkend="_class____gnu__parallel_1_1____binder2nd_1a2e73c4b8d70938d403054b102364203a">_M_op</link>;
225 &#32;&#32;&#32;&#32;&#32;&#32;_SecondArgumentType&#32;<link linkend="_class____gnu__parallel_1_1____binder2nd_1ab905fdfa855a0f7f1783dd7fd69dfbd7">_M_value</link>;
226 
227 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
228 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1____binder2nd_1a201d3dba1d3c1ee6f2e48f13ff0d3b7e">__binder2nd</link>(<emphasis role="keyword">const</emphasis>&#32;_Operation&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_SecondArgumentType&amp;&#32;__y)
229 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_class____gnu__parallel_1_1____binder2nd_1a2e73c4b8d70938d403054b102364203a">_M_op</link>(__x),&#32;<link linkend="_class____gnu__parallel_1_1____binder2nd_1ab905fdfa855a0f7f1783dd7fd69dfbd7">_M_value</link>(__y)&#32;{&#32;}
230 
231 &#32;&#32;&#32;&#32;&#32;&#32;_ResultType
232 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1____binder2nd_1a6faf77c03e08c1f62bc395edd3f1dc0f">operator()</link>(<emphasis role="keyword">const</emphasis>&#32;_FirstArgumentType&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
233 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class____gnu__parallel_1_1____binder2nd_1a2e73c4b8d70938d403054b102364203a">_M_op</link>(__x,&#32;<link linkend="_class____gnu__parallel_1_1____binder2nd_1ab905fdfa855a0f7f1783dd7fd69dfbd7">_M_value</link>);&#32;}
234 
235 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
236 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;109.&#32;&#32;Missing&#32;binders&#32;for&#32;non-const&#32;sequence&#32;elements</emphasis>
237 &#32;&#32;&#32;&#32;&#32;&#32;_ResultType
238 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1____binder2nd_1abad8c2dc9c874e73781d233523c61d46">operator()</link>(_FirstArgumentType&amp;&#32;__x)
239 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class____gnu__parallel_1_1____binder2nd_1a2e73c4b8d70938d403054b102364203a">_M_op</link>(__x,&#32;<link linkend="_class____gnu__parallel_1_1____binder2nd_1ab905fdfa855a0f7f1783dd7fd69dfbd7">_M_value</link>);&#32;}
240 &#32;&#32;&#32;&#32;};
241 
243 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T2&gt;
244 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct____gnu__parallel_1_1___equal_to">_EqualTo</link>&#32;:&#32;std::binary_function&lt;_T1,&#32;_T2,&#32;bool&gt;
245 &#32;&#32;&#32;&#32;{
246 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct____gnu__parallel_1_1___equal_to_1ad304ddae581b12e999f7c5e2e0f5ddab">operator()</link>(<emphasis role="keyword">const</emphasis>&#32;_T1&amp;&#32;__t1,&#32;<emphasis role="keyword">const</emphasis>&#32;_T2&amp;&#32;__t2)<emphasis role="keyword">&#32;const</emphasis>
247 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__t1&#32;==&#32;__t2;&#32;}
248 &#32;&#32;&#32;&#32;};
249 
251 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T2&gt;
252 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct____gnu__parallel_1_1___less">_Less</link>&#32;:&#32;std::binary_function&lt;_T1,&#32;_T2,&#32;bool&gt;
253 &#32;&#32;&#32;&#32;{
254 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
255 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___less_1a01506b6764b7d831709fac0c15a46858">operator()</link>(<emphasis role="keyword">const</emphasis>&#32;_T1&amp;&#32;__t1,&#32;<emphasis role="keyword">const</emphasis>&#32;_T2&amp;&#32;__t2)<emphasis role="keyword">&#32;const</emphasis>
256 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__t1&#32;&lt;&#32;__t2;&#32;}
257 
258 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
259 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___less_1aa0c3e6862d08f742ecf967983cfdb217">operator()</link>(<emphasis role="keyword">const</emphasis>&#32;_T2&amp;&#32;__t2,&#32;<emphasis role="keyword">const</emphasis>&#32;_T1&amp;&#32;__t1)<emphasis role="keyword">&#32;const</emphasis>
260 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__t2&#32;&lt;&#32;__t1;&#32;}
261 &#32;&#32;&#32;&#32;};
262 
263 &#32;&#32;<emphasis role="comment">//&#32;Partial&#32;specialization&#32;for&#32;one&#32;type.&#32;Same&#32;as&#32;std::less.</emphasis>
264 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
265 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct____gnu__parallel_1_1___less">_Less</link>&lt;_Tp,&#32;_Tp&gt;
266 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;std::less&lt;_Tp&gt;&#32;{&#32;};
267 
269 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Result
270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__typeof__(*<emphasis role="keyword">static_cast&lt;</emphasis>_Tp1*<emphasis role="keyword">&gt;</emphasis>(0)
271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;*<emphasis role="keyword">static_cast&lt;</emphasis>_Tp2*<emphasis role="keyword">&gt;</emphasis>(0))&gt;
272 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct____gnu__parallel_1_1___plus">_Plus</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;std::binary_function&lt;_Tp1,&#32;_Tp2,&#32;_Result&gt;
273 &#32;&#32;&#32;&#32;{
274 &#32;&#32;&#32;&#32;&#32;&#32;_Result
275 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___plus_1a9818c31834d6f0561e9f4cfce515434a">operator()</link>(<emphasis role="keyword">const</emphasis>&#32;_Tp1&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp2&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
276 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;+&#32;__y;&#32;}
277 &#32;&#32;&#32;&#32;};
278 
279 &#32;&#32;<emphasis role="comment">//&#32;Partial&#32;specialization&#32;for&#32;one&#32;type.&#32;Same&#32;as&#32;std::plus.</emphasis>
280 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
281 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct____gnu__parallel_1_1___plus">_Plus</link>&lt;_Tp,&#32;_Tp,&#32;_Tp&gt;
282 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;std::plus&lt;_Tp&gt;&#32;{&#32;};
283 
285 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Result
286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__typeof__(*<emphasis role="keyword">static_cast&lt;</emphasis>_Tp1*<emphasis role="keyword">&gt;</emphasis>(0)
287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;*<emphasis role="keyword">static_cast&lt;</emphasis>_Tp2*<emphasis role="keyword">&gt;</emphasis>(0))&gt;
288 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct____gnu__parallel_1_1___multiplies">_Multiplies</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;std::binary_function&lt;_Tp1,&#32;_Tp2,&#32;_Result&gt;
289 &#32;&#32;&#32;&#32;{
290 &#32;&#32;&#32;&#32;&#32;&#32;_Result
291 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___multiplies_1a2ae5b0bbb09d0bc494fe335ba036d707">operator()</link>(<emphasis role="keyword">const</emphasis>&#32;_Tp1&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp2&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
292 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;*&#32;__y;&#32;}
293 &#32;&#32;&#32;&#32;};
294 
295 &#32;&#32;<emphasis role="comment">//&#32;Partial&#32;specialization&#32;for&#32;one&#32;type.&#32;Same&#32;as&#32;std::multiplies.</emphasis>
296 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
297 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct____gnu__parallel_1_1___multiplies">_Multiplies</link>&lt;_Tp,&#32;_Tp,&#32;_Tp&gt;
298 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;std::multiplies&lt;_Tp&gt;&#32;{&#32;};
299 
305 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_DifferenceTp&gt;
306 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class____gnu__parallel_1_1___pseudo_sequence_iterator">_PseudoSequenceIterator</link>
307 &#32;&#32;&#32;&#32;{
308 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
309 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_DifferenceTp&#32;<link linkend="_class____gnu__parallel_1_1___pseudo_sequence_iterator_1a602a2a75510c97b714e1ea1315e5984c">_DifferenceType</link>;
310 
311 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1___pseudo_sequence_iterator_1a574d92a66073699dae24d5080362898f">_PseudoSequenceIterator</link>(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;<link linkend="_class____gnu__parallel_1_1___pseudo_sequence_iterator_1a602a2a75510c97b714e1ea1315e5984c">_DifferenceType</link>&#32;__pos)
312 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_val(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>),&#32;_M_pos(__pos)&#32;{&#32;}
313 
314 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Pre-increment&#32;operator.</emphasis>
315 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1___pseudo_sequence_iterator">_PseudoSequenceIterator</link>&amp;
316 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1___pseudo_sequence_iterator_1a36388bd8d2d83092cf15a6de5f012988">operator++</link>()
317 &#32;&#32;&#32;&#32;&#32;&#32;{
318 &#32;&#32;&#32;&#32;++_M_pos;
319 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
320 &#32;&#32;&#32;&#32;&#32;&#32;}
321 
322 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Post-increment&#32;operator.</emphasis>
323 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1___pseudo_sequence_iterator">_PseudoSequenceIterator</link>
324 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1___pseudo_sequence_iterator_1a8a24bc1098da3bde064977aa2096c439">operator++</link>(<emphasis role="keywordtype">int</emphasis>)
325 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class____gnu__parallel_1_1___pseudo_sequence_iterator">_PseudoSequenceIterator</link>(_M_pos++);&#32;}
326 
327 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;
328 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1___pseudo_sequence_iterator_1afebb1684631d4e50b8db994941191108">operator*</link>()<emphasis role="keyword">&#32;const</emphasis>
329 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_val;&#32;}
330 
331 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;
332 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1___pseudo_sequence_iterator_1ae9a3dec224beaeda64d69fda041b63ea">operator[]</link>(<link linkend="_class____gnu__parallel_1_1___pseudo_sequence_iterator_1a602a2a75510c97b714e1ea1315e5984c">_DifferenceType</link>)<emphasis role="keyword">&#32;const</emphasis>
333 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_val;&#32;}
334 
335 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
336 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1___pseudo_sequence_iterator_1a4a3fbcf4eb55bdb6b7a550c15ff19c45">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____gnu__parallel_1_1___pseudo_sequence_iterator">_PseudoSequenceIterator</link>&amp;&#32;__i2)
337 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_pos&#32;==&#32;__i2._M_pos;&#32;}
338 
339 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
340 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1___pseudo_sequence_iterator_1a8f7ff1b11e997996b587f62146298e7d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____gnu__parallel_1_1___pseudo_sequence_iterator">_PseudoSequenceIterator</link>&amp;&#32;__i2)
341 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_pos&#32;!=&#32;__i2._M_pos;&#32;}
342 
343 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1___pseudo_sequence_iterator_1a602a2a75510c97b714e1ea1315e5984c">_DifferenceType</link>
344 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1___pseudo_sequence_iterator_1ae52e1365267623de55b9de1facc0b930">operator-</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____gnu__parallel_1_1___pseudo_sequence_iterator">_PseudoSequenceIterator</link>&amp;&#32;__i2)
345 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_pos&#32;-&#32;__i2._M_pos;&#32;}
346 
347 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
348 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;_M_val;
349 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1___pseudo_sequence_iterator_1a602a2a75510c97b714e1ea1315e5984c">_DifferenceType</link>&#32;_M_pos;
350 &#32;&#32;&#32;&#32;};
351 
358 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_DifferenceTp&gt;
359 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class____gnu__parallel_1_1___pseudo_sequence">_PseudoSequence</link>
360 &#32;&#32;&#32;&#32;{
361 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
362 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_DifferenceTp&#32;<link linkend="_class____gnu__parallel_1_1___pseudo_sequence_1ab30f04392d4a64baa98faf8c5ef7b919">_DifferenceType</link>;
363 
364 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Better&#32;cast&#32;down&#32;to&#32;uint64_t,&#32;than&#32;up&#32;to&#32;_DifferenceTp.</emphasis>
365 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class____gnu__parallel_1_1___pseudo_sequence_iterator">_PseudoSequenceIterator&lt;_Tp, uint64_t&gt;</link>&#32;<link linkend="_class____gnu__parallel_1_1___pseudo_sequence_1a6ce7f98eeec9f890db4f8185e5e40679">iterator</link>;
366 
371 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1___pseudo_sequence_1ab0fca6cced869a995c28f541f7116f3f">_PseudoSequence</link>(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;<link linkend="_class____gnu__parallel_1_1___pseudo_sequence_1ab30f04392d4a64baa98faf8c5ef7b919">_DifferenceType</link>&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>)
372 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_val(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>),&#32;_M_count(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>)&#32;&#32;{&#32;}
373 
375 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1___pseudo_sequence_1a6ce7f98eeec9f890db4f8185e5e40679">iterator</link>
376 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1___pseudo_sequence_1a51b9740eb71084e18aec7d254cab3e30">begin</link>()<emphasis role="keyword">&#32;const</emphasis>
377 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class____gnu__parallel_1_1___pseudo_sequence_1a6ce7f98eeec9f890db4f8185e5e40679">iterator</link>(_M_val,&#32;0);&#32;}
378 
380 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1___pseudo_sequence_1a6ce7f98eeec9f890db4f8185e5e40679">iterator</link>
381 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1___pseudo_sequence_1a8a0b6be67bf27256c7701980673775b6">end</link>()<emphasis role="keyword">&#32;const</emphasis>
382 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class____gnu__parallel_1_1___pseudo_sequence_1a6ce7f98eeec9f890db4f8185e5e40679">iterator</link>(_M_val,&#32;_M_count);&#32;}
383 
384 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
385 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;_M_val;
386 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1___pseudo_sequence_1ab30f04392d4a64baa98faf8c5ef7b919">_DifferenceType</link>&#32;_M_count;
387 &#32;&#32;&#32;&#32;};
388 
396 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
397 &#32;&#32;&#32;&#32;_RAIter
398 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a74914ea59d68887b517e12c90189dbcd">__median_of_three_iterators</link>(_RAIter&#32;__a,&#32;_RAIter&#32;__b,
399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter&#32;__c,&#32;_Compare&#32;__comp)
400 &#32;&#32;&#32;&#32;{
401 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(*__a,&#32;*__b))
402 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(*__b,&#32;*__c))
403 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__b;
404 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
405 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(*__a,&#32;*__c))
406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__c;
407 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a;
409 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
410 &#32;&#32;&#32;&#32;{
411 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Just&#32;swap&#32;__a&#32;and&#32;__b.</emphasis>
412 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(*__a,&#32;*__c))
413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a;
414 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(*__b,&#32;*__c))
416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__c;
417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__b;
419 &#32;&#32;&#32;&#32;}
420 &#32;&#32;&#32;&#32;}
421 
422 <emphasis role="preprocessor">#if&#32;_GLIBCXX_PARALLEL_ASSERTIONS&#32;&amp;&amp;&#32;defined(__glibcxx_assert_impl)</emphasis>
423 <emphasis role="preprocessor">#&#32;define&#32;_GLIBCXX_PARALLEL_ASSERT(_Condition)&#32;\</emphasis>
424 <emphasis role="preprocessor">&#32;&#32;do&#32;{&#32;__glibcxx_assert_impl(_Condition);&#32;}&#32;while&#32;(false)</emphasis>
425 <emphasis role="preprocessor">#else</emphasis>
426 <emphasis role="preprocessor">#&#32;define&#32;_GLIBCXX_PARALLEL_ASSERT(_Condition)&#32;do&#32;{&#32;}&#32;while&#32;(false)</emphasis>
427 <emphasis role="preprocessor">#endif</emphasis>
428 
429 }&#32;<emphasis role="comment">//namespace&#32;__gnu_parallel</emphasis>
430 
431 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_GLIBCXX_PARALLEL_BASE_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
