<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2ext_2sso__string__base_8h_source" xml:lang="en-US">
<title>sso_string_base.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/ext/sso_string_base.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Short-string-optimized&#32;versatile&#32;string&#32;base&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2005-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_SSO_STRING_BASE_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_SSO_STRING_BASE_H&#32;1</emphasis>
32 
33 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__cxx">__gnu_cxx</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
34 {
35 _GLIBCXX_BEGIN_NAMESPACE_VERSION
36 
37 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
38 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__sso_string_base
39 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">protected</emphasis>&#32;__vstring_utility&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;
40 &#32;&#32;&#32;&#32;{
41 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
42 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Traits&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits_type;
43 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits::char_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
44 
45 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__vstring_utility&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;&#32;&#32;&#32;&#32;_Util_Base;
46 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Util_Base::_CharT_alloc_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CharT_alloc_type;
47 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT_alloc_type::size_type&#32;&#32;&#32;&#32;&#32;size_type;
48 &#32;&#32;&#32;&#32;&#32;&#32;
49 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
50 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Data&#32;Members:</emphasis>
51 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Util_Base::template&#32;_Alloc_hider&lt;_CharT_alloc_type&gt;
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_dataplus;
53 &#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_string_length;
54 
55 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;_S_local_capacity&#32;=&#32;15&#32;};
56 &#32;&#32;&#32;&#32;&#32;&#32;
57 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">union</emphasis>
58 &#32;&#32;&#32;&#32;&#32;&#32;{
59 &#32;&#32;&#32;&#32;_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_local_data[_S_local_capacity&#32;+&#32;1];
60 &#32;&#32;&#32;&#32;size_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_allocated_capacity;
61 &#32;&#32;&#32;&#32;&#32;&#32;};
62 
63 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
64 &#32;&#32;&#32;&#32;&#32;&#32;_M_data(_CharT*&#32;__p)
65 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_dataplus._M_p&#32;=&#32;__p;&#32;}
66 
67 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
68 &#32;&#32;&#32;&#32;&#32;&#32;_M_length(size_type&#32;__length)
69 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_string_length&#32;=&#32;__length;&#32;}
70 
71 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
72 &#32;&#32;&#32;&#32;&#32;&#32;_M_capacity(size_type&#32;__capacity)
73 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_allocated_capacity&#32;=&#32;__capacity;&#32;}
74 
75 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
76 &#32;&#32;&#32;&#32;&#32;&#32;_M_is_local()<emphasis role="keyword">&#32;const</emphasis>
77 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data()&#32;==&#32;_M_local_data;&#32;}
78 
79 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;&amp;&#32;Destroy</emphasis>
80 &#32;&#32;&#32;&#32;&#32;&#32;_CharT*
81 &#32;&#32;&#32;&#32;&#32;&#32;_M_create(size_type&amp;,&#32;size_type);
82 &#32;&#32;&#32;&#32;&#32;&#32;
83 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
84 &#32;&#32;&#32;&#32;&#32;&#32;_M_dispose()
85 &#32;&#32;&#32;&#32;&#32;&#32;{
86 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_is_local())
87 &#32;&#32;&#32;&#32;&#32;&#32;_M_destroy(_M_allocated_capacity);
88 &#32;&#32;&#32;&#32;&#32;&#32;}
89 
90 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
91 &#32;&#32;&#32;&#32;&#32;&#32;_M_destroy(size_type&#32;__size)&#32;<emphasis role="keywordflow">throw</emphasis>()
92 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_get_allocator().deallocate(_M_data(),&#32;__size&#32;+&#32;1);&#32;}
93 
94 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_M_construct_aux&#32;is&#32;used&#32;to&#32;implement&#32;the&#32;21.3.1&#32;para&#32;15&#32;which</emphasis>
95 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;requires&#32;special&#32;behaviour&#32;if&#32;_InIterator&#32;is&#32;an&#32;integral&#32;type</emphasis>
96 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InIterator&gt;
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_construct_aux(_InIterator&#32;__beg,&#32;_InIterator&#32;__end,&#32;
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__false_type)
100 &#32;&#32;&#32;&#32;{
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_InIterator&gt;::iterator_category
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tag;
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_construct(__beg,&#32;__end,&#32;_Tag());
104 &#32;&#32;&#32;&#32;}
105 
106 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
107 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;438.&#32;Ambiguity&#32;in&#32;the&#32;&quot;do&#32;the&#32;right&#32;thing&quot;&#32;clause</emphasis>
108 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Integer&gt;
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_construct_aux(_Integer&#32;__beg,&#32;_Integer&#32;__end,&#32;std::__true_type)
111 &#32;&#32;&#32;&#32;{&#32;_M_construct_aux_2(<emphasis role="keyword">static_cast&lt;</emphasis>size_type<emphasis role="keyword">&gt;</emphasis>(__beg),&#32;__end);&#32;}
112 
113 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
114 &#32;&#32;&#32;&#32;&#32;&#32;_M_construct_aux_2(size_type&#32;__req,&#32;_CharT&#32;__c)
115 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_construct(__req,&#32;__c);&#32;}
116 
117 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InIterator&gt;
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_construct(_InIterator&#32;__beg,&#32;_InIterator&#32;__end)
120 &#32;&#32;&#32;&#32;{
121 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::__is_integer&lt;_InIterator&gt;::__type&#32;_Integral;
122 &#32;&#32;&#32;&#32;&#32;&#32;_M_construct_aux(__beg,&#32;__end,&#32;_Integral());
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
124 
125 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;Input&#32;Iterators,&#32;used&#32;in&#32;istreambuf_iterators,&#32;etc.</emphasis>
126 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InIterator&gt;
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_construct(_InIterator&#32;__beg,&#32;_InIterator&#32;__end,
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::input_iterator_tag);
130 &#32;&#32;&#32;&#32;&#32;&#32;
131 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;forward_iterators&#32;up&#32;to&#32;random_access_iterators,&#32;used&#32;for</emphasis>
132 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;string::iterator,&#32;_CharT*,&#32;etc.</emphasis>
133 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FwdIterator&gt;
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_construct(_FwdIterator&#32;__beg,&#32;_FwdIterator&#32;__end,
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward_iterator_tag);
137 
138 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
139 &#32;&#32;&#32;&#32;&#32;&#32;_M_construct(size_type&#32;__req,&#32;_CharT&#32;__c);
140 
141 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
142 &#32;&#32;&#32;&#32;&#32;&#32;size_type
143 &#32;&#32;&#32;&#32;&#32;&#32;_M_max_size()<emphasis role="keyword">&#32;const</emphasis>
144 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
145 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__alloc_traits&lt;_CharT_alloc_type&gt;&#32;_ATraits;
146 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(_ATraits::max_size(_M_get_allocator())&#32;-&#32;1)&#32;/&#32;2;
147 &#32;&#32;&#32;&#32;&#32;&#32;}
148 
149 &#32;&#32;&#32;&#32;&#32;&#32;_CharT*
150 &#32;&#32;&#32;&#32;&#32;&#32;_M_data()<emphasis role="keyword">&#32;const</emphasis>
151 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_dataplus._M_p;&#32;}
152 
153 &#32;&#32;&#32;&#32;&#32;&#32;size_type
154 &#32;&#32;&#32;&#32;&#32;&#32;_M_length()<emphasis role="keyword">&#32;const</emphasis>
155 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_string_length;&#32;}
156 
157 &#32;&#32;&#32;&#32;&#32;&#32;size_type
158 &#32;&#32;&#32;&#32;&#32;&#32;_M_capacity()<emphasis role="keyword">&#32;const</emphasis>
159 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
160 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_is_local()&#32;?&#32;size_type(_S_local_capacity)
161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_allocated_capacity;&#32;
162 &#32;&#32;&#32;&#32;&#32;&#32;}
163 
164 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
165 &#32;&#32;&#32;&#32;&#32;&#32;_M_is_shared()<emphasis role="keyword">&#32;const</emphasis>
166 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;}
167 
168 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
169 &#32;&#32;&#32;&#32;&#32;&#32;_M_set_leaked()&#32;{&#32;}
170 
171 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
172 &#32;&#32;&#32;&#32;&#32;&#32;_M_leak()&#32;{&#32;}
173 
174 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
175 &#32;&#32;&#32;&#32;&#32;&#32;_M_set_length(size_type&#32;__n)
176 &#32;&#32;&#32;&#32;&#32;&#32;{
177 &#32;&#32;&#32;&#32;_M_length(__n);
178 &#32;&#32;&#32;&#32;traits_type::assign(_M_data()[__n],&#32;_CharT());
179 &#32;&#32;&#32;&#32;&#32;&#32;}
180 
181 &#32;&#32;&#32;&#32;&#32;&#32;__sso_string_base()
182 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_dataplus(_M_local_data)
183 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_set_length(0);&#32;}
184 
185 &#32;&#32;&#32;&#32;&#32;&#32;__sso_string_base(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a);
186 
187 &#32;&#32;&#32;&#32;&#32;&#32;__sso_string_base(<emphasis role="keyword">const</emphasis>&#32;__sso_string_base&amp;&#32;__rcs);
188 
189 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
190 &#32;&#32;&#32;&#32;&#32;&#32;__sso_string_base(__sso_string_base&amp;&amp;&#32;__rcs);
191 <emphasis role="preprocessor">#endif</emphasis>
192 
193 &#32;&#32;&#32;&#32;&#32;&#32;__sso_string_base(size_type&#32;__n,&#32;_CharT&#32;__c,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a);
194 
195 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sso_string_base(_InputIterator&#32;__beg,&#32;_InputIterator&#32;__end,
197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a);
198 
199 &#32;&#32;&#32;&#32;&#32;&#32;~__sso_string_base()
200 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_dispose();&#32;}
201 
202 &#32;&#32;&#32;&#32;&#32;&#32;_CharT_alloc_type&amp;
203 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_allocator()
204 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_dataplus;&#32;}
205 
206 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT_alloc_type&amp;
207 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_allocator()<emphasis role="keyword">&#32;const</emphasis>
208 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_dataplus;&#32;}
209 
210 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
211 &#32;&#32;&#32;&#32;&#32;&#32;_M_swap(__sso_string_base&amp;&#32;__rcs);
212 
213 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
214 &#32;&#32;&#32;&#32;&#32;&#32;_M_assign(<emphasis role="keyword">const</emphasis>&#32;__sso_string_base&amp;&#32;__rcs);
215 
216 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
217 &#32;&#32;&#32;&#32;&#32;&#32;_M_reserve(size_type&#32;__res);
218 
219 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
220 &#32;&#32;&#32;&#32;&#32;&#32;_M_mutate(size_type&#32;__pos,&#32;size_type&#32;__len1,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,
221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__len2);
222 
223 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
224 &#32;&#32;&#32;&#32;&#32;&#32;_M_erase(size_type&#32;__pos,&#32;size_type&#32;__n);
225 
226 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
227 &#32;&#32;&#32;&#32;&#32;&#32;_M_clear()
228 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_set_length(0);&#32;}
229 
230 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
231 &#32;&#32;&#32;&#32;&#32;&#32;_M_compare(<emphasis role="keyword">const</emphasis>&#32;__sso_string_base&amp;)<emphasis role="keyword">&#32;const</emphasis>
232 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;}
233 &#32;&#32;&#32;&#32;};
234 
235 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
236 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
237 &#32;&#32;&#32;&#32;__sso_string_base&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;::
238 &#32;&#32;&#32;&#32;_M_swap(__sso_string_base&amp;&#32;__rcs)
239 &#32;&#32;&#32;&#32;{
240 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">this</emphasis>&#32;==&#32;&amp;__rcs)
241 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
242 
243 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
244 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;431.&#32;Swapping&#32;containers&#32;with&#32;unequal&#32;allocators.</emphasis>
245 &#32;&#32;&#32;&#32;&#32;&#32;std::__alloc_swap&lt;_CharT_alloc_type&gt;::_S_do_it(_M_get_allocator(),
246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__rcs._M_get_allocator());
247 
248 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_is_local())
249 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__rcs._M_is_local())
250 &#32;&#32;&#32;&#32;&#32;&#32;{
251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_length()&#32;&amp;&amp;&#32;__rcs._M_length())
252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CharT&#32;__tmp_data[_S_local_capacity&#32;+&#32;1];
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits_type::copy(__tmp_data,&#32;__rcs._M_local_data,
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_local_capacity&#32;+&#32;1);
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits_type::copy(__rcs._M_local_data,&#32;_M_local_data,
257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_local_capacity&#32;+&#32;1);
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits_type::copy(_M_local_data,&#32;__tmp_data,
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_local_capacity&#32;+&#32;1);
260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__rcs._M_length())
262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits_type::copy(_M_local_data,&#32;__rcs._M_local_data,
264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_local_capacity&#32;+&#32;1);
265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_length(__rcs._M_length());
266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__rcs._M_set_length(0);
267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_length())
270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits_type::copy(__rcs._M_local_data,&#32;_M_local_data,
272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_local_capacity&#32;+&#32;1);
273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__rcs._M_length(_M_length());
274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_set_length(0);
275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
277 &#32;&#32;&#32;&#32;&#32;&#32;}
278 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
279 &#32;&#32;&#32;&#32;&#32;&#32;{
280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__tmp_capacity&#32;=&#32;__rcs._M_allocated_capacity;
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits_type::copy(__rcs._M_local_data,&#32;_M_local_data,
282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_local_capacity&#32;+&#32;1);
283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_data(__rcs._M_data());
284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__rcs._M_data(__rcs._M_local_data);
285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_capacity(__tmp_capacity);
286 &#32;&#32;&#32;&#32;&#32;&#32;}
287 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
288 &#32;&#32;&#32;&#32;{
289 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__tmp_capacity&#32;=&#32;_M_allocated_capacity;
290 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__rcs._M_is_local())
291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits_type::copy(_M_local_data,&#32;__rcs._M_local_data,
293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_local_capacity&#32;+&#32;1);
294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__rcs._M_data(_M_data());
295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_data(_M_local_data);
296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
297 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CharT*&#32;__tmp_ptr&#32;=&#32;_M_data();
300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_data(__rcs._M_data());
301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__rcs._M_data(__tmp_ptr);
302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_capacity(__rcs._M_allocated_capacity);
303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
304 &#32;&#32;&#32;&#32;&#32;&#32;__rcs._M_capacity(__tmp_capacity);
305 &#32;&#32;&#32;&#32;}
306 
307 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__tmp_length&#32;=&#32;_M_length();
308 &#32;&#32;&#32;&#32;&#32;&#32;_M_length(__rcs._M_length());
309 &#32;&#32;&#32;&#32;&#32;&#32;__rcs._M_length(__tmp_length);
310 &#32;&#32;&#32;&#32;}
311 
312 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
313 &#32;&#32;&#32;&#32;_CharT*
314 &#32;&#32;&#32;&#32;__sso_string_base&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;::
315 &#32;&#32;&#32;&#32;_M_create(size_type&amp;&#32;__capacity,&#32;size_type&#32;__old_capacity)
316 &#32;&#32;&#32;&#32;{
317 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
318 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;83.&#32;&#32;String::npos&#32;vs.&#32;string::max_size()</emphasis>
319 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__capacity&#32;&gt;&#32;_M_max_size())
320 &#32;&#32;&#32;&#32;std::__throw_length_error(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ad90b1fa000da1666f104c4dd9c0d7f9b">__N</link>(<emphasis role="stringliteral">&quot;__sso_string_base::_M_create&quot;</emphasis>));
321 
322 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;below&#32;implements&#32;an&#32;exponential&#32;growth&#32;policy,&#32;necessary&#32;to</emphasis>
323 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;meet&#32;amortized&#32;linear&#32;time&#32;requirements&#32;of&#32;the&#32;library:&#32;see</emphasis>
324 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;http://gcc.gnu.org/ml/libstdc++/2001-07/msg00085.html.</emphasis>
325 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__capacity&#32;&gt;&#32;__old_capacity&#32;&amp;&amp;&#32;__capacity&#32;&lt;&#32;2&#32;*&#32;__old_capacity)
326 &#32;&#32;&#32;&#32;{
327 &#32;&#32;&#32;&#32;&#32;&#32;__capacity&#32;=&#32;2&#32;*&#32;__old_capacity;
328 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Never&#32;allocate&#32;a&#32;string&#32;bigger&#32;than&#32;max_size.</emphasis>
329 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__capacity&#32;&gt;&#32;_M_max_size())
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__capacity&#32;=&#32;_M_max_size();
331 &#32;&#32;&#32;&#32;}
332 
333 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NB:&#32;Need&#32;an&#32;array&#32;of&#32;char_type[__capacity],&#32;plus&#32;a&#32;terminating</emphasis>
334 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;null&#32;char_type()&#32;element.</emphasis>
335 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_get_allocator().allocate(__capacity&#32;+&#32;1);
336 &#32;&#32;&#32;&#32;}
337 
338 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
339 &#32;&#32;&#32;&#32;__sso_string_base&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;::
340 &#32;&#32;&#32;&#32;__sso_string_base(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
341 &#32;&#32;&#32;&#32;:&#32;_M_dataplus(__a,&#32;_M_local_data)
342 &#32;&#32;&#32;&#32;{&#32;_M_set_length(0);&#32;}
343 
344 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
345 &#32;&#32;&#32;&#32;__sso_string_base&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;::
346 &#32;&#32;&#32;&#32;__sso_string_base(<emphasis role="keyword">const</emphasis>&#32;__sso_string_base&amp;&#32;__rcs)
347 &#32;&#32;&#32;&#32;:&#32;_M_dataplus(__rcs._M_get_allocator(),&#32;_M_local_data)
348 &#32;&#32;&#32;&#32;{&#32;_M_construct(__rcs._M_data(),&#32;__rcs._M_data()&#32;+&#32;__rcs._M_length());&#32;}
349 
350 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
351 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
352 &#32;&#32;&#32;&#32;__sso_string_base&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;::
353 &#32;&#32;&#32;&#32;__sso_string_base(__sso_string_base&amp;&amp;&#32;__rcs)
354 &#32;&#32;&#32;&#32;:&#32;_M_dataplus(__rcs._M_get_allocator(),&#32;_M_local_data)
355 &#32;&#32;&#32;&#32;{
356 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__rcs._M_is_local())
357 &#32;&#32;&#32;&#32;{
358 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__rcs._M_length())
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits_type::copy(_M_local_data,&#32;__rcs._M_local_data,
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_local_capacity&#32;+&#32;1);
361 &#32;&#32;&#32;&#32;}
362 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
363 &#32;&#32;&#32;&#32;{
364 &#32;&#32;&#32;&#32;&#32;&#32;_M_data(__rcs._M_data());
365 &#32;&#32;&#32;&#32;&#32;&#32;_M_capacity(__rcs._M_allocated_capacity);
366 &#32;&#32;&#32;&#32;}
367 
368 &#32;&#32;&#32;&#32;&#32;&#32;_M_set_length(__rcs._M_length());
369 &#32;&#32;&#32;&#32;&#32;&#32;__rcs._M_data(__rcs._M_local_data);
370 &#32;&#32;&#32;&#32;&#32;&#32;__rcs._M_set_length(0);
371 &#32;&#32;&#32;&#32;}
372 <emphasis role="preprocessor">#endif</emphasis>
373 
374 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
375 &#32;&#32;&#32;&#32;__sso_string_base&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;::
376 &#32;&#32;&#32;&#32;__sso_string_base(size_type&#32;__n,&#32;_CharT&#32;__c,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
377 &#32;&#32;&#32;&#32;:&#32;_M_dataplus(__a,&#32;_M_local_data)
378 &#32;&#32;&#32;&#32;{&#32;_M_construct(__n,&#32;__c);&#32;}
379 
380 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
381 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
382 &#32;&#32;&#32;&#32;__sso_string_base&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;::
383 &#32;&#32;&#32;&#32;__sso_string_base(_InputIterator&#32;__beg,&#32;_InputIterator&#32;__end,
384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
385 &#32;&#32;&#32;&#32;:&#32;_M_dataplus(__a,&#32;_M_local_data)
386 &#32;&#32;&#32;&#32;{&#32;_M_construct(__beg,&#32;__end);&#32;}
387 
388 &#32;&#32;<emphasis role="comment">//&#32;NB:&#32;This&#32;is&#32;the&#32;special&#32;case&#32;for&#32;Input&#32;Iterators,&#32;used&#32;in</emphasis>
389 &#32;&#32;<emphasis role="comment">//&#32;istreambuf_iterators,&#32;etc.</emphasis>
390 &#32;&#32;<emphasis role="comment">//&#32;Input&#32;Iterators&#32;have&#32;a&#32;cost&#32;structure&#32;very&#32;different&#32;from</emphasis>
391 &#32;&#32;<emphasis role="comment">//&#32;pointers,&#32;calling&#32;for&#32;a&#32;different&#32;coding&#32;style.</emphasis>
392 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
393 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InIterator&gt;
394 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
395 &#32;&#32;&#32;&#32;&#32;&#32;__sso_string_base&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;::
396 &#32;&#32;&#32;&#32;&#32;&#32;_M_construct(_InIterator&#32;__beg,&#32;_InIterator&#32;__end,
397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::input_iterator_tag)
398 &#32;&#32;&#32;&#32;&#32;&#32;{
399 &#32;&#32;&#32;&#32;size_type&#32;__len&#32;=&#32;0;
400 &#32;&#32;&#32;&#32;size_type&#32;__capacity&#32;=&#32;size_type(_S_local_capacity);
401 
402 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__beg&#32;!=&#32;__end&#32;&amp;&amp;&#32;__len&#32;&lt;&#32;__capacity)
403 &#32;&#32;&#32;&#32;&#32;&#32;{
404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_data()[__len++]&#32;=&#32;*__beg;
405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__beg;
406 &#32;&#32;&#32;&#32;&#32;&#32;}
407 &#32;&#32;&#32;&#32;
408 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
409 &#32;&#32;&#32;&#32;&#32;&#32;{
410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__beg&#32;!=&#32;__end)
411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__len&#32;==&#32;__capacity)
413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Allocate&#32;more&#32;space.</emphasis>
415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__capacity&#32;=&#32;__len&#32;+&#32;1;
416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CharT*&#32;__another&#32;=&#32;_M_create(__capacity,&#32;__len);
417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_S_copy(__another,&#32;_M_data(),&#32;__len);
418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_dispose();
419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_data(__another);
420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_capacity(__capacity);
421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_data()[__len++]&#32;=&#32;*__beg;
423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__beg;
424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
425 &#32;&#32;&#32;&#32;&#32;&#32;}
426 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
427 &#32;&#32;&#32;&#32;&#32;&#32;{
428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_dispose();
429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
430 &#32;&#32;&#32;&#32;&#32;&#32;}
431 
432 &#32;&#32;&#32;&#32;_M_set_length(__len);
433 &#32;&#32;&#32;&#32;&#32;&#32;}
434 
435 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
436 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InIterator&gt;
437 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
438 &#32;&#32;&#32;&#32;&#32;&#32;__sso_string_base&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;::
439 &#32;&#32;&#32;&#32;&#32;&#32;_M_construct(_InIterator&#32;__beg,&#32;_InIterator&#32;__end,
440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward_iterator_tag)
441 &#32;&#32;&#32;&#32;&#32;&#32;{
442 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NB:&#32;Not&#32;required,&#32;but&#32;considered&#32;best&#32;practice.</emphasis>
443 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__is_null_pointer(__beg)&#32;&amp;&amp;&#32;__beg&#32;!=&#32;__end)
444 &#32;&#32;&#32;&#32;&#32;&#32;std::__throw_logic_error(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ad90b1fa000da1666f104c4dd9c0d7f9b">__N</link>(<emphasis role="stringliteral">&quot;__sso_string_base::&quot;</emphasis>
445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;_M_construct&#32;null&#32;not&#32;valid&quot;</emphasis>));
446 
447 &#32;&#32;&#32;&#32;size_type&#32;__dnew&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>size_type<emphasis role="keyword">&gt;</emphasis>(std::distance(__beg,&#32;__end));
448 
449 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__dnew&#32;&gt;&#32;size_type(_S_local_capacity))
450 &#32;&#32;&#32;&#32;&#32;&#32;{
451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_data(_M_create(__dnew,&#32;size_type(0)));
452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_capacity(__dnew);
453 &#32;&#32;&#32;&#32;&#32;&#32;}
454 
455 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;for&#32;out_of_range&#32;and&#32;length_error&#32;exceptions.</emphasis>
456 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
457 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;this-&gt;_S_copy_chars(_M_data(),&#32;__beg,&#32;__end);&#32;}
458 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
459 &#32;&#32;&#32;&#32;&#32;&#32;{
460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_dispose();
461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
462 &#32;&#32;&#32;&#32;&#32;&#32;}
463 
464 &#32;&#32;&#32;&#32;_M_set_length(__dnew);
465 &#32;&#32;&#32;&#32;&#32;&#32;}
466 
467 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
468 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
469 &#32;&#32;&#32;&#32;__sso_string_base&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;::
470 &#32;&#32;&#32;&#32;_M_construct(size_type&#32;__n,&#32;_CharT&#32;__c)
471 &#32;&#32;&#32;&#32;{
472 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&gt;&#32;size_type(_S_local_capacity))
473 &#32;&#32;&#32;&#32;{
474 &#32;&#32;&#32;&#32;&#32;&#32;_M_data(_M_create(__n,&#32;size_type(0)));
475 &#32;&#32;&#32;&#32;&#32;&#32;_M_capacity(__n);
476 &#32;&#32;&#32;&#32;}
477 
478 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n)
479 &#32;&#32;&#32;&#32;this-&gt;_S_assign(_M_data(),&#32;__n,&#32;__c);
480 
481 &#32;&#32;&#32;&#32;&#32;&#32;_M_set_length(__n);
482 &#32;&#32;&#32;&#32;}
483 
484 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
485 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
486 &#32;&#32;&#32;&#32;__sso_string_base&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;::
487 &#32;&#32;&#32;&#32;_M_assign(<emphasis role="keyword">const</emphasis>&#32;__sso_string_base&amp;&#32;__rcs)
488 &#32;&#32;&#32;&#32;{
489 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">this</emphasis>&#32;!=&#32;&amp;__rcs)
490 &#32;&#32;&#32;&#32;{
491 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__rsize&#32;=&#32;__rcs._M_length();
492 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__capacity&#32;=&#32;_M_capacity();
493 
494 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__rsize&#32;&gt;&#32;__capacity)
495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__new_capacity&#32;=&#32;__rsize;
497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CharT*&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;_M_create(__new_capacity,&#32;__capacity);
498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_dispose();
499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_data(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_capacity(__new_capacity);
501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
502 
503 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__rsize)
504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_S_copy(_M_data(),&#32;__rcs._M_data(),&#32;__rsize);
505 
506 &#32;&#32;&#32;&#32;&#32;&#32;_M_set_length(__rsize);
507 &#32;&#32;&#32;&#32;}
508 &#32;&#32;&#32;&#32;}
509 
510 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
511 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
512 &#32;&#32;&#32;&#32;__sso_string_base&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;::
513 &#32;&#32;&#32;&#32;_M_reserve(size_type&#32;__res)
514 &#32;&#32;&#32;&#32;{
515 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Make&#32;sure&#32;we&#32;don&apos;t&#32;shrink&#32;below&#32;the&#32;current&#32;size.</emphasis>
516 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__res&#32;&lt;&#32;_M_length())
517 &#32;&#32;&#32;&#32;__res&#32;=&#32;_M_length();
518 
519 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__capacity&#32;=&#32;_M_capacity();
520 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__res&#32;!=&#32;__capacity)
521 &#32;&#32;&#32;&#32;{
522 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__res&#32;&gt;&#32;__capacity
523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;__res&#32;&gt;&#32;size_type(_S_local_capacity))
524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CharT*&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;_M_create(__res,&#32;__capacity);
526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_S_copy(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>,&#32;_M_data(),&#32;_M_length()&#32;+&#32;1);
527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_dispose();
528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_data(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_capacity(__res);
530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
531 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_is_local())
532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_S_copy(_M_local_data,&#32;_M_data(),&#32;_M_length()&#32;+&#32;1);
534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_destroy(__capacity);
535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_data(_M_local_data);
536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
537 &#32;&#32;&#32;&#32;}
538 &#32;&#32;&#32;&#32;}
539 
540 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
541 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
542 &#32;&#32;&#32;&#32;__sso_string_base&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;::
543 &#32;&#32;&#32;&#32;_M_mutate(size_type&#32;__pos,&#32;size_type&#32;__len1,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,
544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__len2)
545 &#32;&#32;&#32;&#32;{
546 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__how_much&#32;=&#32;_M_length()&#32;-&#32;__pos&#32;-&#32;__len1;
547 &#32;&#32;&#32;&#32;&#32;&#32;
548 &#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__new_capacity&#32;=&#32;_M_length()&#32;+&#32;__len2&#32;-&#32;__len1;
549 &#32;&#32;&#32;&#32;&#32;&#32;_CharT*&#32;__r&#32;=&#32;_M_create(__new_capacity,&#32;_M_capacity());
550 
551 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pos)
552 &#32;&#32;&#32;&#32;this-&gt;_S_copy(__r,&#32;_M_data(),&#32;__pos);
553 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__s&#32;&amp;&amp;&#32;__len2)
554 &#32;&#32;&#32;&#32;this-&gt;_S_copy(__r&#32;+&#32;__pos,&#32;__s,&#32;__len2);
555 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__how_much)
556 &#32;&#32;&#32;&#32;this-&gt;_S_copy(__r&#32;+&#32;__pos&#32;+&#32;__len2,
557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_data()&#32;+&#32;__pos&#32;+&#32;__len1,&#32;__how_much);
558 &#32;&#32;&#32;&#32;&#32;&#32;
559 &#32;&#32;&#32;&#32;&#32;&#32;_M_dispose();
560 &#32;&#32;&#32;&#32;&#32;&#32;_M_data(__r);
561 &#32;&#32;&#32;&#32;&#32;&#32;_M_capacity(__new_capacity);
562 &#32;&#32;&#32;&#32;}
563 
564 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
565 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
566 &#32;&#32;&#32;&#32;__sso_string_base&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;::
567 &#32;&#32;&#32;&#32;_M_erase(size_type&#32;__pos,&#32;size_type&#32;__n)
568 &#32;&#32;&#32;&#32;{
569 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__how_much&#32;=&#32;_M_length()&#32;-&#32;__pos&#32;-&#32;__n;
570 
571 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__how_much&#32;&amp;&amp;&#32;__n)
572 &#32;&#32;&#32;&#32;this-&gt;_S_move(_M_data()&#32;+&#32;__pos,&#32;_M_data()&#32;+&#32;__pos&#32;+&#32;__n,&#32;__how_much);
573 
574 &#32;&#32;&#32;&#32;&#32;&#32;_M_set_length(_M_length()&#32;-&#32;__n);
575 &#32;&#32;&#32;&#32;}
576 
577 _GLIBCXX_END_NAMESPACE_VERSION
578 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
579 
580 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_SSO_STRING_BASE_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
