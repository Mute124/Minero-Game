<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2debug_2set_8h_source" xml:lang="en-US">
<title>set.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/debug/set.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Debugging&#32;set&#32;implementation&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2003-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
29 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_DEBUG_SET_H</emphasis>
30 <emphasis role="preprocessor">#define&#32;_GLIBCXX_DEBUG_SET_H&#32;1</emphasis>
31 
32 <emphasis role="preprocessor">#include&#32;&lt;debug/safe_sequence.h&gt;</emphasis>
33 <emphasis role="preprocessor">#include&#32;&lt;debug/safe_container.h&gt;</emphasis>
34 <emphasis role="preprocessor">#include&#32;&lt;debug/safe_iterator.h&gt;</emphasis>
35 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_pair.h&gt;</emphasis>
36 
37 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
38 {
39 <emphasis role="keyword">namespace&#32;</emphasis>__debug
40 {
42 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&#32;=&#32;std::less&lt;_Key&gt;,
43 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&#32;=&#32;std::allocator&lt;_Key&gt;&#32;&gt;
44 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>
45 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__container">__gnu_debug::_Safe_container</link>&lt;
46 &#32;&#32;&#32;&#32;set&lt;_Key,&#32;_Compare,&#32;_Allocator&gt;,&#32;_Allocator,
47 &#32;&#32;&#32;&#32;__gnu_debug::_Safe_node_sequence&gt;,
48 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;_GLIBCXX_STD_C::set&lt;_Key,_Compare,_Allocator&gt;
49 &#32;&#32;&#32;&#32;{
50 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_GLIBCXX_STD_C::set&lt;_Key,&#32;_Compare,&#32;_Allocator&gt;&#32;&#32;&#32;_Base;
51 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__container">__gnu_debug::_Safe_container</link>&lt;
52 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>,&#32;_Allocator,&#32;<link linkend="_class____gnu__debug_1_1___safe__node__sequence">__gnu_debug::_Safe_node_sequence</link>&gt;&#32;&#32;_Safe;
53 
54 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::const_iterator&#32;&#32;&#32;&#32;_Base_const_iterator;
55 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::iterator&#32;&#32;&#32;&#32;&#32;&#32;_Base_iterator;
56 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___equal__to">__gnu_debug::_Equal_to&lt;_Base_const_iterator&gt;</link>&#32;_Equal;
57 
58 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ItT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_SeqT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CatT&gt;
59 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;class&#32;::__gnu_debug::_Safe_iterator;
60 
61 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Reference&#32;wrapper&#32;for&#32;base&#32;class.&#32;Disambiguates&#32;set(const&#32;_Base&amp;)</emphasis>
62 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;from&#32;copy&#32;constructor&#32;by&#32;requiring&#32;a&#32;user-defined&#32;conversion.</emphasis>
63 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;See&#32;PR&#32;libstdc++/90102.</emphasis>
64 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Base_ref
65 &#32;&#32;&#32;&#32;&#32;&#32;{
66 &#32;&#32;&#32;&#32;_Base_ref(<emphasis role="keyword">const</emphasis>&#32;_Base&amp;&#32;__r)&#32;:&#32;_M_ref(__r)&#32;{&#32;}
67 
68 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Base&amp;&#32;_M_ref;
69 &#32;&#32;&#32;&#32;&#32;&#32;};
70 
71 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
72 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;types:</emphasis>
73 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Key&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_type;
74 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Key&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
75 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Compare&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_compare;
76 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Compare&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_compare;
77 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Allocator&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator_type;
78 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::reference&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference;
79 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::const_reference&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_reference;
80 
81 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator&lt;_Base_iterator, set&gt;</link>
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator;
83 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator&lt;_Base_const_iterator, set&gt;</link>
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_iterator;
85 
86 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::size_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type;
87 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::difference_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;difference_type;
88 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::pointer&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
89 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::const_pointer&#32;&#32;&#32;&#32;&#32;const_pointer;
90 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::reverse_iterator&lt;iterator&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator;
91 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::reverse_iterator&lt;const_iterator&gt;&#32;const_reverse_iterator;
92 
93 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;23.3.3.1&#32;construct/copy/destroy:</emphasis>
94 
95 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
96 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>()&#32;:&#32;_Base()&#32;{&#32;}
97 
98 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>&amp;&#32;__x)
99 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__x)&#32;{&#32;}
100 
101 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">~set</link>()&#32;{&#32;}
102 <emphasis role="preprocessor">#else</emphasis>
103 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
104 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
105 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
106 
107 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>(initializer_list&lt;value_type&gt;&#32;__l,
108 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Compare&amp;&#32;__comp&#32;=&#32;_Compare(),
109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
110 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__l,&#32;__comp,&#32;__a)&#32;{&#32;}
111 
112 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
113 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>(<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
114 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__a)&#32;{&#32;}
115 
116 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;__type_identity_t&lt;allocator_type&gt;&amp;&#32;__a)
117 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__x,&#32;__a)&#32;{&#32;}
118 
119 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>&amp;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;__type_identity_t&lt;allocator_type&gt;&amp;&#32;__a)
120 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(&#32;<emphasis role="keyword">noexcept</emphasis>(_Base(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x),&#32;__a))&#32;)
121 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Safe(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x),&#32;__a),
122 &#32;&#32;&#32;&#32;_Base(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x),&#32;__a)&#32;{&#32;}
123 
124 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>(initializer_list&lt;value_type&gt;&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
125 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__l,&#32;__a)&#32;{&#32;}
126 
127 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
128 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
130 &#32;&#32;&#32;&#32;:&#32;_Base(<link linkend="_namespace____gnu__debug_1a462d3f2cc5cb94a7cb98e035cd61b763">__gnu_debug::__base</link>(
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1ad801dca99ec542225b4b1127b8d81568">__glibcxx_check_valid_constructor_range</link>(__first,&#32;__last)),
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a462d3f2cc5cb94a7cb98e035cd61b763">__gnu_debug::__base</link>(__last),&#32;__a)&#32;{&#32;}
133 
134 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">~set</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
135 <emphasis role="preprocessor">#endif</emphasis>
136 
137 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>(<emphasis role="keyword">const</emphasis>&#32;_Compare&amp;&#32;__comp,
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Allocator&amp;&#32;__a&#32;=&#32;_Allocator())
139 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__comp,&#32;__a)&#32;{&#32;}
140 
141 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
142 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Compare&amp;&#32;__comp&#32;=&#32;_Compare(),
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Allocator&amp;&#32;__a&#32;=&#32;_Allocator())
145 &#32;&#32;&#32;&#32;:&#32;_Base(<link linkend="_namespace____gnu__debug_1a462d3f2cc5cb94a7cb98e035cd61b763">__gnu_debug::__base</link>(
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1ad801dca99ec542225b4b1127b8d81568">__glibcxx_check_valid_constructor_range</link>(__first,&#32;__last)),
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a462d3f2cc5cb94a7cb98e035cd61b763">__gnu_debug::__base</link>(__last),
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__comp,&#32;__a)&#32;{&#32;}
149 
150 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>(_Base_ref&#32;__x)
151 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__x._M_ref)&#32;{&#32;}
152 
153 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
154 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>&amp;
155 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
156 
157 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>&amp;
158 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
159 
160 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>&amp;
161 &#32;&#32;&#32;&#32;&#32;&#32;operator=(initializer_list&lt;value_type&gt;&#32;__l)
162 &#32;&#32;&#32;&#32;&#32;&#32;{
163 &#32;&#32;&#32;&#32;_Base::operator=(__l);
164 &#32;&#32;&#32;&#32;this-&gt;_M_invalidate_all();
165 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
166 &#32;&#32;&#32;&#32;&#32;&#32;}
167 <emphasis role="preprocessor">#endif</emphasis>
168 
169 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::get_allocator;
170 
171 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;iterators:</emphasis>
172 &#32;&#32;&#32;&#32;&#32;&#32;iterator
173 &#32;&#32;&#32;&#32;&#32;&#32;begin()&#32;_GLIBCXX_NOEXCEPT
174 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(_Base::begin(),&#32;<emphasis role="keyword">this</emphasis>);&#32;}
175 
176 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
177 &#32;&#32;&#32;&#32;&#32;&#32;begin()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
178 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(_Base::begin(),&#32;<emphasis role="keyword">this</emphasis>);&#32;}
179 
180 &#32;&#32;&#32;&#32;&#32;&#32;iterator
181 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;_GLIBCXX_NOEXCEPT
182 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(_Base::end(),&#32;<emphasis role="keyword">this</emphasis>);&#32;}
183 
184 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
185 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
186 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(_Base::end(),&#32;<emphasis role="keyword">this</emphasis>);&#32;}
187 
188 &#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator
189 &#32;&#32;&#32;&#32;&#32;&#32;rbegin()&#32;_GLIBCXX_NOEXCEPT
190 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;reverse_iterator(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());&#32;}
191 
192 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
193 &#32;&#32;&#32;&#32;&#32;&#32;rbegin()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
194 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_reverse_iterator(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());&#32;}
195 
196 &#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator
197 &#32;&#32;&#32;&#32;&#32;&#32;rend()&#32;_GLIBCXX_NOEXCEPT
198 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;reverse_iterator(begin());&#32;}
199 
200 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
201 &#32;&#32;&#32;&#32;&#32;&#32;rend()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
202 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_reverse_iterator(begin());&#32;}
203 
204 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
205 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
206 &#32;&#32;&#32;&#32;&#32;&#32;cbegin()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
207 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(_Base::begin(),&#32;<emphasis role="keyword">this</emphasis>);&#32;}
208 
209 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
210 &#32;&#32;&#32;&#32;&#32;&#32;cend()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
211 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(_Base::end(),&#32;<emphasis role="keyword">this</emphasis>);&#32;}
212 
213 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
214 &#32;&#32;&#32;&#32;&#32;&#32;crbegin()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
215 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_reverse_iterator(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());&#32;}
216 
217 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
218 &#32;&#32;&#32;&#32;&#32;&#32;crend()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
219 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_reverse_iterator(begin());&#32;}
220 <emphasis role="preprocessor">#endif</emphasis>
221 
222 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;capacity:</emphasis>
223 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::empty;
224 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::size;
225 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::max_size;
226 
227 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;modifiers:</emphasis>
228 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
229 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
230 &#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;bool&gt;
231 &#32;&#32;&#32;&#32;emplace(_Args&amp;&amp;...&#32;__args)
232 &#32;&#32;&#32;&#32;{
233 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__res&#32;=&#32;_Base::emplace(std::forward&lt;_Args&gt;(__args)...);
234 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;{&#32;__res.first,&#32;<emphasis role="keyword">this</emphasis>&#32;},&#32;__res.second&#32;};
235 &#32;&#32;&#32;&#32;}
236 
237 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
238 &#32;&#32;&#32;&#32;iterator
239 &#32;&#32;&#32;&#32;emplace_hint(const_iterator&#32;__pos,&#32;_Args&amp;&amp;...&#32;__args)
240 &#32;&#32;&#32;&#32;{
241 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1a14508f9347d4fb4566b1a16f8ce685d5">__glibcxx_check_insert</link>(__pos);
242 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>
243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Base::emplace_hint(__pos.base(),&#32;std::forward&lt;_Args&gt;(__args)...),
245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">this</emphasis>
246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
247 &#32;&#32;&#32;&#32;}
248 <emphasis role="preprocessor">#endif</emphasis>
249 
250 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;bool&gt;
251 &#32;&#32;&#32;&#32;&#32;&#32;insert(<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
252 &#32;&#32;&#32;&#32;&#32;&#32;{
253 &#32;&#32;&#32;&#32;std::pair&lt;_Base_iterator,&#32;bool&gt;&#32;__res&#32;=&#32;_Base::insert(__x);
254 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::pair&lt;iterator,&#32;bool&gt;(iterator(__res.first,&#32;<emphasis role="keyword">this</emphasis>),
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__res.second);
256 &#32;&#32;&#32;&#32;&#32;&#32;}
257 
258 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
259 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;bool&gt;
260 &#32;&#32;&#32;&#32;&#32;&#32;insert(value_type&amp;&amp;&#32;__x)
261 &#32;&#32;&#32;&#32;&#32;&#32;{
262 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__res&#32;=&#32;_Base::insert(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x));
263 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;{&#32;__res.first,&#32;<emphasis role="keyword">this</emphasis>&#32;},&#32;__res.second&#32;};
264 &#32;&#32;&#32;&#32;&#32;&#32;}
265 <emphasis role="preprocessor">#endif</emphasis>
266 
267 &#32;&#32;&#32;&#32;&#32;&#32;iterator
268 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__position,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
269 &#32;&#32;&#32;&#32;&#32;&#32;{
270 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1a14508f9347d4fb4566b1a16f8ce685d5">__glibcxx_check_insert</link>(__position);
271 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(_Base::insert(__position.base(),&#32;__x),&#32;<emphasis role="keyword">this</emphasis>);
272 &#32;&#32;&#32;&#32;&#32;&#32;}
273 
274 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
275 &#32;&#32;&#32;&#32;&#32;&#32;iterator
276 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__position,&#32;value_type&amp;&amp;&#32;__x)
277 &#32;&#32;&#32;&#32;&#32;&#32;{
278 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1a14508f9347d4fb4566b1a16f8ce685d5">__glibcxx_check_insert</link>(__position);
279 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;_Base::insert(__position.base(),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x)),&#32;<emphasis role="keyword">this</emphasis>&#32;};
280 &#32;&#32;&#32;&#32;&#32;&#32;}
281 <emphasis role="preprocessor">#endif</emphasis>
282 
283 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
284 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
285 &#32;&#32;&#32;&#32;insert(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
286 &#32;&#32;&#32;&#32;{
287 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__debug_1_1___distance__traits_1a233783a24e495312304a160308fb74f9">__gnu_debug::_Distance_traits&lt;_InputIterator&gt;::__type</link>&#32;__dist;
288 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1a3feecb348a86e8cfcb82c62cb0ecae5e">__glibcxx_check_valid_range2</link>(__first,&#32;__last,&#32;__dist);
289 
290 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__dist.second&#32;&gt;=&#32;<link linkend="_namespace____gnu__debug_1a3817879cb58c2db9f22712a634ef0b92a189d83cf02a806b7262facbf260a3af7">__gnu_debug::__dp_sign</link>)
291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Base::insert(<link linkend="_namespace____gnu__debug_1a93a80d764483413811a41139bb6ee4ac">__gnu_debug::__unsafe</link>(__first),
292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a93a80d764483413811a41139bb6ee4ac">__gnu_debug::__unsafe</link>(__last));
293 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Base::insert(__first,&#32;__last);
295 &#32;&#32;&#32;&#32;}
296 
297 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
298 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
299 &#32;&#32;&#32;&#32;&#32;&#32;insert(initializer_list&lt;value_type&gt;&#32;__l)
300 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_Base::insert(__l);&#32;}
301 <emphasis role="preprocessor">#endif</emphasis>
302 
303 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
304 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>node_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::node_type;
305 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>insert_return_type&#32;=&#32;_Node_insert_return&lt;iterator,&#32;node_type&gt;;
306 
307 &#32;&#32;&#32;&#32;&#32;&#32;node_type
308 &#32;&#32;&#32;&#32;&#32;&#32;extract(const_iterator&#32;__position)
309 &#32;&#32;&#32;&#32;&#32;&#32;{
310 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1a991c7e564ec0f174f81e0b65bdd236cf">__glibcxx_check_erase</link>(__position);
311 &#32;&#32;&#32;&#32;this-&gt;_M_invalidate_if(_Equal(__position.base()));
312 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::extract(__position.base());
313 &#32;&#32;&#32;&#32;&#32;&#32;}
314 
315 &#32;&#32;&#32;&#32;&#32;&#32;node_type
316 &#32;&#32;&#32;&#32;&#32;&#32;extract(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__key)
317 &#32;&#32;&#32;&#32;&#32;&#32;{
318 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__position&#32;=&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(__key);
319 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__position&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>())
320 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;extract(__position);
321 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
322 &#32;&#32;&#32;&#32;&#32;&#32;}
323 
324 &#32;&#32;&#32;&#32;&#32;&#32;insert_return_type
325 &#32;&#32;&#32;&#32;&#32;&#32;insert(node_type&amp;&amp;&#32;__nh)
326 &#32;&#32;&#32;&#32;&#32;&#32;{
327 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__ret&#32;=&#32;_Base::insert(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__nh));
328 &#32;&#32;&#32;&#32;iterator&#32;__pos&#32;=&#32;iterator(__ret.position,&#32;<emphasis role="keyword">this</emphasis>);
329 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;__pos,&#32;__ret.inserted,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__ret.node)&#32;};
330 &#32;&#32;&#32;&#32;&#32;&#32;}
331 
332 &#32;&#32;&#32;&#32;&#32;&#32;iterator
333 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__hint,&#32;node_type&amp;&amp;&#32;__nh)
334 &#32;&#32;&#32;&#32;&#32;&#32;{
335 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1a14508f9347d4fb4566b1a16f8ce685d5">__glibcxx_check_insert</link>(__hint);
336 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;_Base::insert(__hint.base(),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__nh)),&#32;<emphasis role="keyword">this</emphasis>&#32;};
337 &#32;&#32;&#32;&#32;&#32;&#32;}
338 
339 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::merge;
340 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
341 
342 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
343 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ad7d29ac44393cedd1b17fc5dc40186a8">_GLIBCXX_ABI_TAG_CXX11</link>
344 &#32;&#32;&#32;&#32;&#32;&#32;iterator
345 &#32;&#32;&#32;&#32;&#32;&#32;erase(const_iterator&#32;__position)
346 &#32;&#32;&#32;&#32;&#32;&#32;{
347 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1a991c7e564ec0f174f81e0b65bdd236cf">__glibcxx_check_erase</link>(__position);
348 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;erase(__position.base()),&#32;<emphasis role="keyword">this</emphasis>&#32;};
349 &#32;&#32;&#32;&#32;&#32;&#32;}
350 
351 &#32;&#32;&#32;&#32;&#32;&#32;_Base_iterator
352 &#32;&#32;&#32;&#32;&#32;&#32;erase(_Base_const_iterator&#32;__position)
353 &#32;&#32;&#32;&#32;&#32;&#32;{
354 &#32;&#32;&#32;&#32;__glibcxx_check_erase2(__position);
355 &#32;&#32;&#32;&#32;this-&gt;_M_invalidate_if(_Equal(__position));
356 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::erase(__position);
357 &#32;&#32;&#32;&#32;&#32;&#32;}
358 <emphasis role="preprocessor">#else</emphasis>
359 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
360 &#32;&#32;&#32;&#32;&#32;&#32;erase(iterator&#32;__position)
361 &#32;&#32;&#32;&#32;&#32;&#32;{
362 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1a991c7e564ec0f174f81e0b65bdd236cf">__glibcxx_check_erase</link>(__position);
363 &#32;&#32;&#32;&#32;this-&gt;_M_invalidate_if(_Equal(__position.base()));
364 &#32;&#32;&#32;&#32;_Base::erase(__position.base());
365 &#32;&#32;&#32;&#32;&#32;&#32;}
366 <emphasis role="preprocessor">#endif</emphasis>
367 
368 &#32;&#32;&#32;&#32;&#32;&#32;size_type
369 &#32;&#32;&#32;&#32;&#32;&#32;erase(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
370 &#32;&#32;&#32;&#32;&#32;&#32;{
371 &#32;&#32;&#32;&#32;_Base_iterator&#32;__victim&#32;=&#32;_Base::find(__x);
372 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__victim&#32;==&#32;_Base::end())
373 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
374 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
375 &#32;&#32;&#32;&#32;&#32;&#32;{
376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_invalidate_if(_Equal(__victim));
377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Base::erase(__victim);
378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
379 &#32;&#32;&#32;&#32;&#32;&#32;}
380 &#32;&#32;&#32;&#32;&#32;&#32;}
381 
382 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
383 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ad7d29ac44393cedd1b17fc5dc40186a8">_GLIBCXX_ABI_TAG_CXX11</link>
384 &#32;&#32;&#32;&#32;&#32;&#32;iterator
385 &#32;&#32;&#32;&#32;&#32;&#32;erase(const_iterator&#32;__first,&#32;const_iterator&#32;__last)
386 &#32;&#32;&#32;&#32;&#32;&#32;{
387 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
388 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;151.&#32;can&apos;t&#32;currently&#32;clear()&#32;empty&#32;container</emphasis>
389 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1a7f5f459ee711afceff11d342059a5bcd">__glibcxx_check_erase_range</link>(__first,&#32;__last);
390 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_Base_const_iterator&#32;__victim&#32;=&#32;__first.base();
391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__victim&#32;!=&#32;__last.base();&#32;++__victim)
392 &#32;&#32;&#32;&#32;&#32;&#32;{
393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1abc21d6cf6063d6d47494b08a8f1ba3be">_GLIBCXX_DEBUG_VERIFY</link>(__victim&#32;!=&#32;_Base::cend(),
394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_message(<link linkend="_namespace____gnu__debug_1aeb7af2ed24147dfab032febcea3f4fb3aa35c44d6fbfe5a3fb8195fe467f89f0e">__gnu_debug::__msg_valid_range</link>)
395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(__first,&#32;<emphasis role="stringliteral">&quot;first&quot;</emphasis>)
396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(__last,&#32;<emphasis role="stringliteral">&quot;last&quot;</emphasis>));
397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_invalidate_if(_Equal(__victim));
398 &#32;&#32;&#32;&#32;&#32;&#32;}
399 
400 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;_Base::erase(__first.base(),&#32;__last.base()),&#32;<emphasis role="keyword">this</emphasis>&#32;};
401 &#32;&#32;&#32;&#32;&#32;&#32;}
402 <emphasis role="preprocessor">#else</emphasis>
403 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
404 &#32;&#32;&#32;&#32;&#32;&#32;erase(iterator&#32;__first,&#32;iterator&#32;__last)
405 &#32;&#32;&#32;&#32;&#32;&#32;{
406 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
407 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;151.&#32;can&apos;t&#32;currently&#32;clear()&#32;empty&#32;container</emphasis>
408 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1a7f5f459ee711afceff11d342059a5bcd">__glibcxx_check_erase_range</link>(__first,&#32;__last);
409 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_Base_iterator&#32;__victim&#32;=&#32;__first.base();
410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__victim&#32;!=&#32;__last.base();&#32;++__victim)
411 &#32;&#32;&#32;&#32;&#32;&#32;{
412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1abc21d6cf6063d6d47494b08a8f1ba3be">_GLIBCXX_DEBUG_VERIFY</link>(__victim&#32;!=&#32;_Base::end(),
413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_message(<link linkend="_namespace____gnu__debug_1aeb7af2ed24147dfab032febcea3f4fb3aa35c44d6fbfe5a3fb8195fe467f89f0e">__gnu_debug::__msg_valid_range</link>)
414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(__first,&#32;<emphasis role="stringliteral">&quot;first&quot;</emphasis>)
415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(__last,&#32;<emphasis role="stringliteral">&quot;last&quot;</emphasis>));
416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_invalidate_if(_Equal(__victim));
417 &#32;&#32;&#32;&#32;&#32;&#32;}
418 &#32;&#32;&#32;&#32;_Base::erase(__first.base(),&#32;__last.base());
419 &#32;&#32;&#32;&#32;&#32;&#32;}
420 <emphasis role="preprocessor">#endif</emphasis>
421 
422 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
423 &#32;&#32;&#32;&#32;&#32;&#32;swap(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>&amp;&#32;__x)
424 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT_IF(&#32;<emphasis role="keyword">noexcept</emphasis>(declval&lt;_Base&amp;&gt;().swap(__x))&#32;)
425 &#32;&#32;&#32;&#32;&#32;&#32;{
426 &#32;&#32;&#32;&#32;_Safe::_M_swap(__x);
427 &#32;&#32;&#32;&#32;_Base::swap(__x);
428 &#32;&#32;&#32;&#32;&#32;&#32;}
429 
430 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
431 &#32;&#32;&#32;&#32;&#32;&#32;clear()&#32;_GLIBCXX_NOEXCEPT
432 &#32;&#32;&#32;&#32;&#32;&#32;{
433 &#32;&#32;&#32;&#32;this-&gt;_M_invalidate_all();
434 &#32;&#32;&#32;&#32;_Base::clear();
435 &#32;&#32;&#32;&#32;&#32;&#32;}
436 
437 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;observers:</emphasis>
438 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::key_comp;
439 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::value_comp;
440 
441 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;set&#32;operations:</emphasis>
442 &#32;&#32;&#32;&#32;&#32;&#32;iterator
443 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
444 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(_Base::find(__x),&#32;<emphasis role="keyword">this</emphasis>);&#32;}
445 
446 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
447 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;214.&#32;set::find()&#32;missing&#32;const&#32;overload</emphasis>
448 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
449 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
450 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(_Base::find(__x),&#32;<emphasis role="keyword">this</emphasis>);&#32;}
451 
452 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
453 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt,
454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Req&#32;=
455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__has_is_transparent&lt;_Compare,&#32;_Kt&gt;::type&gt;
456 &#32;&#32;&#32;&#32;iterator
457 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)
458 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;_Base::find(__x),&#32;<emphasis role="keyword">this</emphasis>&#32;};&#32;}
459 
460 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt,
461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Req&#32;=
462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__has_is_transparent&lt;_Compare,&#32;_Kt&gt;::type&gt;
463 &#32;&#32;&#32;&#32;const_iterator
464 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
465 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;_Base::find(__x),&#32;<emphasis role="keyword">this</emphasis>&#32;};&#32;}
466 <emphasis role="preprocessor">#endif</emphasis>
467 
468 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::count;
469 
470 &#32;&#32;&#32;&#32;&#32;&#32;iterator
471 &#32;&#32;&#32;&#32;&#32;&#32;lower_bound(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
472 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(_Base::lower_bound(__x),&#32;<emphasis role="keyword">this</emphasis>);&#32;}
473 
474 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
475 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;214.&#32;set::find()&#32;missing&#32;const&#32;overload</emphasis>
476 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
477 &#32;&#32;&#32;&#32;&#32;&#32;lower_bound(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
478 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(_Base::lower_bound(__x),&#32;<emphasis role="keyword">this</emphasis>);&#32;}
479 
480 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
481 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt,
482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Req&#32;=
483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__has_is_transparent&lt;_Compare,&#32;_Kt&gt;::type&gt;
484 &#32;&#32;&#32;&#32;iterator
485 &#32;&#32;&#32;&#32;lower_bound(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)
486 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;_Base::lower_bound(__x),&#32;<emphasis role="keyword">this</emphasis>&#32;};&#32;}
487 
488 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt,
489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Req&#32;=
490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__has_is_transparent&lt;_Compare,&#32;_Kt&gt;::type&gt;
491 &#32;&#32;&#32;&#32;const_iterator
492 &#32;&#32;&#32;&#32;lower_bound(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
493 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;_Base::lower_bound(__x),&#32;<emphasis role="keyword">this</emphasis>&#32;};&#32;}
494 <emphasis role="preprocessor">#endif</emphasis>
495 
496 &#32;&#32;&#32;&#32;&#32;&#32;iterator
497 &#32;&#32;&#32;&#32;&#32;&#32;upper_bound(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
498 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(_Base::upper_bound(__x),&#32;<emphasis role="keyword">this</emphasis>);&#32;}
499 
500 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
501 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;214.&#32;set::find()&#32;missing&#32;const&#32;overload</emphasis>
502 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
503 &#32;&#32;&#32;&#32;&#32;&#32;upper_bound(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
504 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(_Base::upper_bound(__x),&#32;<emphasis role="keyword">this</emphasis>);&#32;}
505 
506 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
507 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt,
508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Req&#32;=
509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__has_is_transparent&lt;_Compare,&#32;_Kt&gt;::type&gt;
510 &#32;&#32;&#32;&#32;iterator
511 &#32;&#32;&#32;&#32;upper_bound(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)
512 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;_Base::upper_bound(__x),&#32;<emphasis role="keyword">this</emphasis>&#32;};&#32;}
513 
514 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt,
515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Req&#32;=
516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__has_is_transparent&lt;_Compare,&#32;_Kt&gt;::type&gt;
517 &#32;&#32;&#32;&#32;const_iterator
518 &#32;&#32;&#32;&#32;upper_bound(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
519 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;_Base::upper_bound(__x),&#32;<emphasis role="keyword">this</emphasis>&#32;};&#32;}
520 <emphasis role="preprocessor">#endif</emphasis>
521 
522 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;iterator&gt;
523 &#32;&#32;&#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
524 &#32;&#32;&#32;&#32;&#32;&#32;{
525 &#32;&#32;&#32;&#32;std::pair&lt;_Base_iterator,&#32;_Base_iterator&gt;&#32;__res&#32;=
526 &#32;&#32;&#32;&#32;_Base::equal_range(__x);
527 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(iterator(__res.first,&#32;<emphasis role="keyword">this</emphasis>),
528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator(__res.second,&#32;<emphasis role="keyword">this</emphasis>));
529 &#32;&#32;&#32;&#32;&#32;&#32;}
530 
531 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
532 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;214.&#32;set::find()&#32;missing&#32;const&#32;overload</emphasis>
533 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;const_iterator,&#32;const_iterator&gt;
534 &#32;&#32;&#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
535 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
536 &#32;&#32;&#32;&#32;std::pair&lt;_Base_const_iterator,&#32;_Base_const_iterator&gt;&#32;__res&#32;=
537 &#32;&#32;&#32;&#32;_Base::equal_range(__x);
538 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(const_iterator(__res.first,&#32;<emphasis role="keyword">this</emphasis>),
539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_iterator(__res.second,&#32;<emphasis role="keyword">this</emphasis>));
540 &#32;&#32;&#32;&#32;&#32;&#32;}
541 
542 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
543 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt,
544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Req&#32;=
545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__has_is_transparent&lt;_Compare,&#32;_Kt&gt;::type&gt;
546 &#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;iterator&gt;
547 &#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)
548 &#32;&#32;&#32;&#32;{
549 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__res&#32;=&#32;_Base::equal_range(__x);
550 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;{&#32;__res.first,&#32;<emphasis role="keyword">this</emphasis>&#32;},&#32;{&#32;__res.second,&#32;<emphasis role="keyword">this</emphasis>&#32;}&#32;};
551 &#32;&#32;&#32;&#32;}
552 
553 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt,
554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Req&#32;=
555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__has_is_transparent&lt;_Compare,&#32;_Kt&gt;::type&gt;
556 &#32;&#32;&#32;&#32;std::pair&lt;const_iterator,&#32;const_iterator&gt;
557 &#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
558 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
559 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__res&#32;=&#32;_Base::equal_range(__x);
560 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;{&#32;__res.first,&#32;<emphasis role="keyword">this</emphasis>&#32;},&#32;{&#32;__res.second,&#32;<emphasis role="keyword">this</emphasis>&#32;}&#32;};
561 &#32;&#32;&#32;&#32;}
562 <emphasis role="preprocessor">#endif</emphasis>
563 
564 &#32;&#32;&#32;&#32;&#32;&#32;_Base&amp;
565 &#32;&#32;&#32;&#32;&#32;&#32;_M_base()&#32;_GLIBCXX_NOEXCEPT&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
566 
567 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Base&amp;
568 &#32;&#32;&#32;&#32;&#32;&#32;_M_base()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
569 &#32;&#32;&#32;&#32;};
570 
571 <emphasis role="preprocessor">#if&#32;__cpp_deduction_guides&#32;&gt;=&#32;201606</emphasis>
572 
573 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&#32;=
575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;less&lt;typename&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;,
576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&#32;=
577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator&lt;typename&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;,
578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;,
579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocator&lt;_Compare&gt;,
580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
581 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>(_InputIterator,&#32;_InputIterator,
582 &#32;&#32;&#32;&#32;_Compare&#32;=&#32;_Compare(),&#32;_Allocator&#32;=&#32;_Allocator())
583 &#32;&#32;&#32;&#32;-&gt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;typename iterator_traits&lt;_InputIterator&gt;::value_type</link>,
584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare,&#32;_Allocator&gt;;
585 
586 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&#32;=&#32;less&lt;_Key&gt;,
587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&#32;=&#32;allocator&lt;_Key&gt;,
588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocator&lt;_Compare&gt;,
589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
590 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>(initializer_list&lt;_Key&gt;,
591 &#32;&#32;&#32;&#32;_Compare&#32;=&#32;_Compare(),&#32;_Allocator&#32;=&#32;_Allocator())
592 &#32;&#32;&#32;&#32;-&gt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, _Compare, _Allocator&gt;</link>;
593 
594 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator,
595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;,
596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
597 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>(_InputIterator,&#32;_InputIterator,&#32;_Allocator)
598 &#32;&#32;&#32;&#32;-&gt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;typename iterator_traits&lt;_InputIterator&gt;::value_type</link>,
599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;less&lt;typename&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;,
600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_Allocator&gt;;
601 
602 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator,
603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
604 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>(initializer_list&lt;_Key&gt;,&#32;_Allocator)
605 &#32;&#32;&#32;&#32;-&gt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, less&lt;_Key&gt;</link>,&#32;_Allocator&gt;;
606 
607 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;deduction&#32;guides</emphasis>
608 
609 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&gt;
610 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
611 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, _Compare, _Allocator&gt;</link>&amp;&#32;__lhs,
612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, _Compare, _Allocator&gt;</link>&amp;&#32;__rhs)
613 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs._M_base()&#32;==&#32;__rhs._M_base();&#32;}
614 
615 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
616 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
617 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;__detail::__synth3way_t&lt;_Key&gt;
618 &#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, _Compare, _Alloc&gt;</link>&amp;&#32;__lhs,
619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, _Compare, _Alloc&gt;</link>&amp;&#32;__rhs)
620 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs._M_base()&#32;&lt;=&gt;&#32;__rhs._M_base();&#32;}
621 <emphasis role="preprocessor">#else</emphasis>
622 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&gt;
623 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
624 &#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, _Compare, _Allocator&gt;</link>&amp;&#32;__lhs,
625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, _Compare, _Allocator&gt;</link>&amp;&#32;__rhs)
626 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs._M_base()&#32;!=&#32;__rhs._M_base();&#32;}
627 
628 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&gt;
629 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
630 &#32;&#32;&#32;&#32;operator&lt;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, _Compare, _Allocator&gt;</link>&amp;&#32;__lhs,
631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, _Compare, _Allocator&gt;</link>&amp;&#32;__rhs)
632 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs._M_base()&#32;&lt;&#32;__rhs._M_base();&#32;}
633 
634 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&gt;
635 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
636 &#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, _Compare, _Allocator&gt;</link>&amp;&#32;__lhs,
637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, _Compare, _Allocator&gt;</link>&amp;&#32;__rhs)
638 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs._M_base()&#32;&lt;=&#32;__rhs._M_base();&#32;}
639 
640 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&gt;
641 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
642 &#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, _Compare, _Allocator&gt;</link>&amp;&#32;__lhs,
643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, _Compare, _Allocator&gt;</link>&amp;&#32;__rhs)
644 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs._M_base()&#32;&gt;=&#32;__rhs._M_base();&#32;}
645 
646 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&gt;
647 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
648 &#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, _Compare, _Allocator&gt;</link>&amp;&#32;__lhs,
649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, _Compare, _Allocator&gt;</link>&amp;&#32;__rhs)
650 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs._M_base()&#32;&gt;&#32;__rhs._M_base();&#32;}
651 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;three-way&#32;comparison</emphasis>
652 
653 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&gt;
654 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
655 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, _Compare, _Allocator&gt;</link>&amp;&#32;__x,
656 &#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, _Compare, _Allocator&gt;</link>&amp;&#32;__y)
657 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT_IF(<emphasis role="keyword">noexcept</emphasis>(__x.swap(__y)))
658 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.swap(__y);&#32;}
659 
660 }&#32;<emphasis role="comment">//&#32;namespace&#32;__debug</emphasis>
661 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
662 
663 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
