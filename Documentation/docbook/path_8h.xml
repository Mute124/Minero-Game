<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_path_8h" xml:lang="en-US">
<title>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/include/toml++/impl/path.h File Reference</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/include/toml++/impl/path.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &quot;forward_declarations.h&quot;<?linebreak?>#include &quot;std_vector.h&quot;<?linebreak?>#include &quot;header_start.h&quot;<?linebreak?>#include &quot;header_end.h&quot;<?linebreak?></programlisting>Include dependency graph for path.h:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="path_8h__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
This graph shows which files directly or indirectly include this file:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="path_8h__dep__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_classpath__component">path_component</link></para>

<para>Represents a single component of a complete &apos;TOML-path&apos;: either a key or an array index. </para>
</listitem>
            <listitem><para>class <link linkend="_classpath">path</link></para>

<para>A TOML path. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Namespaces    </title>
        <itemizedlist>
            <listitem><para>namespace <link linkend="_namespaceliterals">literals</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> <link linkend="_classpath">path</link> <link linkend="_namespaceliterals_1a8b39f370c55966e481f59b855b74a9d7">literals::operator&quot;&quot;_tpath</link> (const char *str, <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)</para>

<para>Parses a TOML path from a string literal. </para>
</listitem>
            <listitem><para><link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_group__configuration_1gac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link> <link linkend="_classnode__view">node_view</link>&lt; node &gt; <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> <link linkend="_path_8h_1a468a25365624c7539b3318b31ed5752c">at_path</link> (node &amp;root, const toml::path &amp;<link linkend="_classpath">path</link>) noexcept</para>

<para>Returns a view of the node matching a fully-qualified &quot;TOML path&quot;. </para>
</listitem>
            <listitem><para><link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_group__configuration_1gac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link> <link linkend="_classnode__view">node_view</link>&lt; const node &gt; <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> <link linkend="_path_8h_1a4d7c622cb6d4d43b3df5b15cb773887f">at_path</link> (const node &amp;root, const toml::path &amp;<link linkend="_classpath">path</link>) noexcept</para>

<para>Returns a const view of the node matching a fully-qualified &quot;TOML path&quot;. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para><link linkend="_path_8h_1a24e5c42f7e94b0b0f3212744874731e6">TOML_NAMESPACE_START</link></para>
</listitem>
            <listitem><para><link linkend="_path_8h_1afa65688cac47ce86021fef8d739f9fd8">TOML_NAMESPACE_END</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_path_8h_1a4d7c622cb6d4d43b3df5b15cb773887f"/><section>
    <title>at_path()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>at_path</primary><secondary>path.h</secondary></indexterm>
<indexterm><primary>path.h</primary><secondary>at_path</secondary></indexterm>
<para><computeroutput><link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_group__configuration_1gac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link> <link linkend="_classnode__view">node_view</link>&lt; const node &gt; <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> at_path (const node &amp; root, const toml::path &amp; path)<computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns a const view of the node matching a fully-qualified &quot;TOML path&quot;. </para>
</para>

<para><formalpara><title>See also</title>

<para>#toml::at_path(node&amp;, const toml::path&amp; path) </para>
</formalpara>
</para>
</section>
<anchor xml:id="_path_8h_1a468a25365624c7539b3318b31ed5752c"/><section>
    <title>at_path()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>at_path</primary><secondary>path.h</secondary></indexterm>
<indexterm><primary>path.h</primary><secondary>at_path</secondary></indexterm>
<para><computeroutput><link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_group__configuration_1gac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link> <link linkend="_classnode__view">node_view</link>&lt; node &gt; <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> at_path (node &amp; root, const toml::path &amp; path)<computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns a view of the node matching a fully-qualified &quot;TOML path&quot;. </para>
</para>

<para>\detail \cpp auto config = toml::parse(R&quot;(

[foo]
bar = [ 0, 1, 2, [ 3 ], { kek = 4 } ]

)&quot;sv);</para>

<para>toml::path path1(&quot;foo.bar[2]&quot;); toml::path path2(&quot;foo.bar[4].kek&quot;); std::cout &lt;&lt; toml::at_path(config, path1) &lt;&lt; &quot;\n&quot;; std::cout &lt;&lt; toml::at_path(config, path1.parent_path()) &lt;&lt; &quot;\n&quot;; std::cout &lt;&lt; toml::at_path(config, path2) &lt;&lt; &quot;\n&quot;; std::cout &lt;&lt; toml::at_path(config, path2.parent_path()) &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out 2 [ 0, 1, 2, [ 3 ], { kek = 4 } ] 4 { kek = 4 } \eout</para>

<para><note><title>Note</title>

<para>Keys in paths are interpreted literally, so whitespace (or lack thereof) matters: \cpp toml::at_path(config, toml::path(&quot;foo.bar&quot;)) // same as config[&quot;foo&quot;][&quot;bar&quot;] toml::at_path(config, toml::path(&quot;foo. bar&quot;)) // same as config[&quot;foo&quot;][&quot; bar&quot;] toml::at_path(config, toml::path(&quot;foo..bar&quot;)) // same as config[&quot;foo&quot;][&quot;&quot;][&quot;bar&quot;] toml::at_path(config, toml::path(&quot;.foo.bar&quot;)) // same as config[&quot;&quot;][&quot;foo&quot;][&quot;bar&quot;] \ecpp <?linebreak?> Additionally, TOML allows &apos;.&apos; (period) characters to appear in keys if they are quoted strings. This function makes no allowance for this, instead treating all period characters as sub-table delimiters.</para>
</note>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>root</entry><entry>
<para>The root node from which the path will be traversed. </para>
</entry>
                            </row>
                            <row>
<entry>path</entry><entry>
<para>The &quot;TOML path&quot; to traverse. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
</section>
<section>
<title>Variable Documentation</title>
<anchor xml:id="_path_8h_1afa65688cac47ce86021fef8d739f9fd8"/><section>
    <title>TOML_NAMESPACE_END</title>
<indexterm><primary>TOML_NAMESPACE_END</primary><secondary>path.h</secondary></indexterm>
<indexterm><primary>path.h</primary><secondary>TOML_NAMESPACE_END</secondary></indexterm>
<para><computeroutput>TOML_NAMESPACE_END</computeroutput></para></section>
<anchor xml:id="_path_8h_1a24e5c42f7e94b0b0f3212744874731e6"/><section>
    <title>TOML_NAMESPACE_START</title>
<indexterm><primary>TOML_NAMESPACE_START</primary><secondary>path.h</secondary></indexterm>
<indexterm><primary>path.h</primary><secondary>TOML_NAMESPACE_START</secondary></indexterm>
<para><computeroutput>TOML_NAMESPACE_START</computeroutput></para><emphasis role="strong">Initial value:</emphasis><programlisting linenumbering="unnumbered">{
&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;<link linkend="_preprocessor_8h_1a3c0b0ffb1299e1086599b0748e8e36a1">TOML_CLOSED_ENUM</link>&#32;path_component_type&#32;:&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0x1,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_index&#32;=&#32;0x2
&#32;&#32;&#32;&#32;}
</programlisting></section>
</section>
</section>
