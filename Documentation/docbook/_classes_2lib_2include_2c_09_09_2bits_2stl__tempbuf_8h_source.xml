<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2bits_2stl__tempbuf_8h_source" xml:lang="en-US">
<title>stl_tempbuf.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/bits/stl_tempbuf.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Temporary&#32;buffer&#32;implementation&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2001-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">/*</emphasis>
26 <emphasis role="comment">&#32;*</emphasis>
27 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1994</emphasis>
28 <emphasis role="comment">&#32;*&#32;Hewlett-Packard&#32;Company</emphasis>
29 <emphasis role="comment">&#32;*</emphasis>
30 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
31 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
32 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
33 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
34 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Hewlett-Packard&#32;Company&#32;makes&#32;no</emphasis>
35 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
36 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
37 <emphasis role="comment">&#32;*</emphasis>
38 <emphasis role="comment">&#32;*</emphasis>
39 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1996,1997</emphasis>
40 <emphasis role="comment">&#32;*&#32;Silicon&#32;Graphics&#32;Computer&#32;Systems,&#32;Inc.</emphasis>
41 <emphasis role="comment">&#32;*</emphasis>
42 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
43 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
44 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
45 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
46 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Silicon&#32;Graphics&#32;makes&#32;no</emphasis>
47 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
48 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
49 <emphasis role="comment">&#32;*/</emphasis>
50 
56 <emphasis role="preprocessor">#ifndef&#32;_STL_TEMPBUF_H</emphasis>
57 <emphasis role="preprocessor">#define&#32;_STL_TEMPBUF_H&#32;1</emphasis>
58 
59 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_algobase.h&gt;</emphasis>
60 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_construct.h&gt;</emphasis>
61 
62 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
63 {
64 _GLIBCXX_BEGIN_NAMESPACE_VERSION
65 
66 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>__detail
67 &#32;&#32;{
68 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
69 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
70 &#32;&#32;&#32;&#32;&#32;&#32;__return_temporary_buffer(_Tp*&#32;__p,
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__len&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__unused__)))
72 &#32;&#32;&#32;&#32;&#32;&#32;{
73 <emphasis role="preprocessor">#if&#32;__cpp_sized_deallocation</emphasis>
74 &#32;&#32;&#32;&#32;::operator&#32;<emphasis role="keyword">delete</emphasis>(__p,&#32;__len&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp));
75 <emphasis role="preprocessor">#else</emphasis>
76 &#32;&#32;&#32;&#32;::operator&#32;<emphasis role="keyword">delete</emphasis>(__p);
77 <emphasis role="preprocessor">#endif</emphasis>
78 &#32;&#32;&#32;&#32;&#32;&#32;}
79 &#32;&#32;}
80 
98 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
99 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a9fc2e019cf58d1fd9471f83ca143155d">_GLIBCXX17_DEPRECATED</link>
100 &#32;&#32;&#32;&#32;pair&lt;_Tp*,&#32;ptrdiff_t&gt;
101 &#32;&#32;&#32;&#32;get_temporary_buffer(<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;__len)&#32;_GLIBCXX_NOEXCEPT
102 &#32;&#32;&#32;&#32;{
103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;__max&#32;=
104 &#32;&#32;&#32;&#32;__gnu_cxx::__numeric_traits&lt;ptrdiff_t&gt;::__max&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp);
105 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__len&#32;&gt;&#32;__max)
106 &#32;&#32;&#32;&#32;__len&#32;=&#32;__max;
107 
108 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__len&#32;&gt;&#32;0)
109 &#32;&#32;&#32;&#32;{
110 &#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp*<emphasis role="keyword">&gt;</emphasis>(::operator&#32;<emphasis role="keyword">new</emphasis>(__len&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp),
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::nothrow));
112 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;!=&#32;0)
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::pair&lt;_Tp*,&#32;ptrdiff_t&gt;(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>,&#32;__len);
114 &#32;&#32;&#32;&#32;&#32;&#32;__len&#32;=&#32;__len&#32;==&#32;1&#32;?&#32;0&#32;:&#32;((__len&#32;+&#32;1)&#32;/&#32;2);
115 &#32;&#32;&#32;&#32;}
116 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::pair&lt;_Tp*,&#32;ptrdiff_t&gt;(<emphasis role="keyword">static_cast&lt;</emphasis>_Tp*<emphasis role="keyword">&gt;</emphasis>(0),&#32;0);
117 &#32;&#32;&#32;&#32;}
118 
126 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
127 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
128 &#32;&#32;&#32;&#32;return_temporary_buffer(_Tp*&#32;__p)
129 &#32;&#32;&#32;&#32;{&#32;::operator&#32;<emphasis role="keyword">delete</emphasis>(__p);&#32;}
130 
136 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
137 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Temporary_buffer
138 &#32;&#32;&#32;&#32;{
139 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
140 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ae4dc1beb74b88e6b1215e05c397fc7a2">__glibcxx_class_requires</link>(_ForwardIterator,&#32;_ForwardIteratorConcept)
141 
142 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
143 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
144 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;value_type*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
145 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;&#32;&#32;&#32;&#32;iterator;
146 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;&#32;&#32;size_type;
147 
148 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
149 &#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;&#32;_M_original_len;
150 &#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;&#32;_M_len;
151 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;&#32;&#32;&#32;_M_buffer;
152 
153 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
155 &#32;&#32;&#32;&#32;&#32;&#32;size_type
156 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()<emphasis role="keyword">&#32;const</emphasis>
157 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_len;&#32;}
158 
160 &#32;&#32;&#32;&#32;&#32;&#32;size_type
161 &#32;&#32;&#32;&#32;&#32;&#32;requested_size()<emphasis role="keyword">&#32;const</emphasis>
162 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_original_len;&#32;}
163 
165 &#32;&#32;&#32;&#32;&#32;&#32;iterator
166 &#32;&#32;&#32;&#32;&#32;&#32;begin()
167 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_buffer;&#32;}
168 
170 &#32;&#32;&#32;&#32;&#32;&#32;iterator
171 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()
172 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_buffer&#32;+&#32;_M_len;&#32;}
173 
178 &#32;&#32;&#32;&#32;&#32;&#32;_Temporary_buffer(_ForwardIterator&#32;__seed,&#32;size_type&#32;__original_len);
179 
180 &#32;&#32;&#32;&#32;&#32;&#32;~_Temporary_buffer()
181 &#32;&#32;&#32;&#32;&#32;&#32;{
182 &#32;&#32;&#32;&#32;std::_Destroy(_M_buffer,&#32;_M_buffer&#32;+&#32;_M_len);
183 &#32;&#32;&#32;&#32;std::__detail::__return_temporary_buffer(_M_buffer,&#32;_M_len);
184 &#32;&#32;&#32;&#32;&#32;&#32;}
185 
186 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
187 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Disable&#32;copy&#32;constructor&#32;and&#32;assignment&#32;operator.</emphasis>
188 &#32;&#32;&#32;&#32;&#32;&#32;_Temporary_buffer(<emphasis role="keyword">const</emphasis>&#32;_Temporary_buffer&amp;);
189 
190 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
191 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;_Temporary_buffer&amp;);
192 &#32;&#32;&#32;&#32;};
193 
194 
195 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&gt;
196 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__uninitialized_construct_buf_dispatch
197 &#32;&#32;&#32;&#32;{
198 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Po<emphasis role="keywordtype">int</emphasis>er,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ucr(_Pointer&#32;__first,&#32;_Pointer&#32;__last,
201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__seed)
202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
203 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
205 
206 &#32;&#32;&#32;&#32;&#32;&#32;_Pointer&#32;__cur&#32;=&#32;__first;
207 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::_Construct(std::__addressof(*__first),
210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(*__seed));
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pointer&#32;__prev&#32;=&#32;__cur;
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__cur;
213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(;&#32;__cur&#32;!=&#32;__last;&#32;++__cur,&#32;++__prev)
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::_Construct(std::__addressof(*__cur),
215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(*__prev));
216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__seed&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(*__prev);
217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
218 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::_Destroy(__first,&#32;__cur);
221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
223 &#32;&#32;&#32;&#32;}
224 &#32;&#32;&#32;&#32;};
225 
226 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
227 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__uninitialized_construct_buf_dispatch&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
228 &#32;&#32;&#32;&#32;{
229 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Po<emphasis role="keywordtype">int</emphasis>er,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ucr(_Pointer,&#32;_Pointer,&#32;_ForwardIterator)&#32;{&#32;}
232 &#32;&#32;&#32;&#32;};
233 
234 &#32;&#32;<emphasis role="comment">//&#32;Constructs&#32;objects&#32;in&#32;the&#32;range&#32;[first,&#32;last).</emphasis>
235 &#32;&#32;<emphasis role="comment">//&#32;Note&#32;that&#32;while&#32;these&#32;new&#32;objects&#32;will&#32;take&#32;valid&#32;values,</emphasis>
236 &#32;&#32;<emphasis role="comment">//&#32;their&#32;exact&#32;value&#32;is&#32;not&#32;defined.&#32;In&#32;particular&#32;they&#32;may</emphasis>
237 &#32;&#32;<emphasis role="comment">//&#32;be&#32;&apos;moved&#32;from&apos;.</emphasis>
238 &#32;&#32;<emphasis role="comment">//</emphasis>
239 &#32;&#32;<emphasis role="comment">//&#32;While&#32;*__seed&#32;may&#32;be&#32;altered&#32;during&#32;this&#32;algorithm,&#32;it&#32;will&#32;have</emphasis>
240 &#32;&#32;<emphasis role="comment">//&#32;the&#32;same&#32;value&#32;when&#32;the&#32;algorithm&#32;finishes,&#32;unless&#32;one&#32;of&#32;the</emphasis>
241 &#32;&#32;<emphasis role="comment">//&#32;constructions&#32;throws.</emphasis>
242 &#32;&#32;<emphasis role="comment">//</emphasis>
243 &#32;&#32;<emphasis role="comment">//&#32;Requirements:&#32;_Pointer::value_type(_Tp&amp;&amp;)&#32;is&#32;valid.</emphasis>
244 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Po<emphasis role="keywordtype">int</emphasis>er,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
245 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
246 &#32;&#32;&#32;&#32;__uninitialized_construct_buf(_Pointer&#32;__first,&#32;_Pointer&#32;__last,
247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__seed)
248 &#32;&#32;&#32;&#32;{
249 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_Pointer&gt;::value_type
250 &#32;&#32;&#32;&#32;_ValueType;
251 
252 &#32;&#32;&#32;&#32;&#32;&#32;std::__uninitialized_construct_buf_dispatch&lt;
253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__has_trivial_constructor(_ValueType)&gt;::
254 &#32;&#32;&#32;&#32;&#32;&#32;__ucr(__first,&#32;__last,&#32;__seed);
255 &#32;&#32;&#32;&#32;}
256 
257 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
258 &#32;&#32;&#32;&#32;_Temporary_buffer&lt;_ForwardIterator,&#32;_Tp&gt;::
259 &#32;&#32;&#32;&#32;_Temporary_buffer(_ForwardIterator&#32;__seed,&#32;size_type&#32;__original_len)
260 &#32;&#32;&#32;&#32;:&#32;_M_original_len(__original_len),&#32;_M_len(0),&#32;_M_buffer(0)
261 &#32;&#32;&#32;&#32;{
262 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;pointer,&#32;size_type&gt;&#32;__p(
263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::get_temporary_buffer&lt;value_type&gt;(_M_original_len));
264 
265 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__p.first)
266 &#32;&#32;&#32;&#32;{
267 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__uninitialized_construct_buf(__p.first,&#32;__p.first&#32;+&#32;__p.second,
270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__seed);
271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_buffer&#32;=&#32;__p.first;
272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_len&#32;=&#32;__p.second;
273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
274 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__detail::__return_temporary_buffer(__p.first,&#32;__p.second);
277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
279 &#32;&#32;&#32;&#32;}
280 &#32;&#32;&#32;&#32;}
281 
282 _GLIBCXX_END_NAMESPACE_VERSION
283 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
284 
285 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_STL_TEMPBUF_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
