<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classparse__result" xml:lang="en-US">
<title>parse_result Class Reference</title>
<indexterm><primary>parse_result</primary></indexterm>
<para>

<para>The result of a parsing operation. </para>
 
</para>
<para>
<computeroutput>#include &lt;parse_result.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_classparse__result_1a637d08fe0b20e768fc28205f3d23005d">iterator</link> = <link linkend="_classtable__iterator">table_iterator</link></para>
</listitem>
            <listitem><para>using <link linkend="_classparse__result_1a6fd7369d951acc0a8d1ab8a197f3c7bb">const_iterator</link> = <link linkend="_toml_8hpp_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_classparse__result_1a7ce78793e1d7badb69d1fa9a1b9dc023">parse_result</link> () noexcept</para>

<para>Default constructs an &apos;error&apos; result. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_classparse__result_1a5bfa57ac29dbff7c917931f74d90c653">parse_result</link> (toml::table &amp;&amp;tbl) noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_classparse__result_1a9cff481307b801bd9972917bada1b39e">parse_result</link> (parse_error &amp;&amp;err) noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_classparse__result_1a35a596e77eaea21f1b4cb725b8444cf2">parse_result</link> (<link linkend="_classparse__result">parse_result</link> &amp;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>) noexcept</para>

<para>Move constructor. </para>
</listitem>
            <listitem><para><link linkend="_classparse__result">parse_result</link> &amp; <link linkend="_classparse__result_1a749c0c01921e831bb836c5713f0c22b6">operator=</link> (<link linkend="_classparse__result">parse_result</link> &amp;&amp;rhs) noexcept</para>

<para>Move-assignment operator. </para>
</listitem>
            <listitem><para><link linkend="_classparse__result_1a4ee2de268492e79c15475e0729e5fb91">~parse_result</link> () noexcept</para>

<para>Destructor. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_classparse__result_1a7ce78793e1d7badb69d1fa9a1b9dc023">parse_result</link> () noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_classparse__result_1a5bfa57ac29dbff7c917931f74d90c653">parse_result</link> (toml::table &amp;&amp;tbl) noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_classparse__result_1a9cff481307b801bd9972917bada1b39e">parse_result</link> (parse_error &amp;&amp;err) noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_classparse__result_1a35a596e77eaea21f1b4cb725b8444cf2">parse_result</link> (<link linkend="_classparse__result">parse_result</link> &amp;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>) noexcept</para>
</listitem>
            <listitem><para><link linkend="_classparse__result">parse_result</link> &amp; <link linkend="_classparse__result_1a749c0c01921e831bb836c5713f0c22b6">operator=</link> (<link linkend="_classparse__result">parse_result</link> &amp;&amp;rhs) noexcept</para>
</listitem>
            <listitem><para><link linkend="_classparse__result_1a4ee2de268492e79c15475e0729e5fb91">~parse_result</link> () noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classparse__result_1aebdf7ac3321c38cd4f66c5c9ca62e6cb">succeeded</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classparse__result_1a1ef708ec2ca7aa725b7d6a22a4f88a6c">failed</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classparse__result_1aa081e8af5ff7241b9d6034be0846d560">operator bool</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> toml::table &amp; <link linkend="_classparse__result_1a08838803e7d4834359276ac1d0ec79a4">table</link> () &amp;noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> toml::table &amp;&amp; <link linkend="_classparse__result_1a007d45efccfa57e83299b448913ca1c5">table</link> () &amp;&amp;noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const toml::table &amp; <link linkend="_classparse__result_1a19b0dad766f7fe8c16b6304ab62e1ac4">table</link> () const &amp;noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classparse__result_1af6306b671fec48bec6fda0fd5d0d44b8">operator toml::table &amp;</link> () noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classparse__result_1abe8c314cf021bb23e48e9cf2ee1d7797">operator toml::table &amp;&amp;</link> () noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classparse__result_1a9b6a3fb06858d3f8f1742932bbcfdf21">operator const toml::table &amp;</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> parse_error &amp; <link linkend="_classparse__result_1aee9cab037d487c1ca09ad033400fd1f7">error</link> () &amp;noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> parse_error &amp;&amp; <link linkend="_classparse__result_1ab657ef6a6e4b07b66dd445023f08e3b2">error</link> () &amp;&amp;noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const parse_error &amp; <link linkend="_classparse__result_1ac15b1a7c842a4a8e917a3f51d392556a">error</link> () const &amp;noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classparse__result_1ab9f1b2ac30245b895f8ae556af6da55a">operator parse_error &amp;</link> () noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classparse__result_1a2e93940a3143d9ba5cfea1dcd59d7fcd">operator parse_error &amp;&amp;</link> () noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classparse__result_1a5a7d12ad18e4427e1052dfaa1385ef45">operator const parse_error &amp;</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classtable__iterator">table_iterator</link> <link linkend="_classparse__result_1a670ad11bdbaf1773aa00ae5ab19e66a0">begin</link> () noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link> <link linkend="_classparse__result_1a1b747121196915109bf6ee42999de721">begin</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link> <link linkend="_classparse__result_1af99c0ce6e4bbe37d4fc63ce33cb6a9ba">cbegin</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classtable__iterator">table_iterator</link> <link linkend="_classparse__result_1a4a5a65c875a38a8248ac3b7fd3fc7669">end</link> () noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link> <link linkend="_classparse__result_1a8896ba9f0c0c1339b7be850ea8d60aa1">end</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link> <link linkend="_classparse__result_1aab6d787d388a6e63f1f899e153468fcc">cend</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; node &gt; <link linkend="_classparse__result_1a0eda76e47ce514a80e2a998621d2e641">at_path</link> (std::string_view <link linkend="_classpath">path</link>) noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; const node &gt; <link linkend="_classparse__result_1acfc8e405c9d3ff150bb1322d27e0294f">at_path</link> (std::string_view <link linkend="_classpath">path</link>) const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; node &gt; <link linkend="_classparse__result_1a1963f05321264471873f57fe990ec967">at_path</link> (const toml::path &amp;<link linkend="_classpath">path</link>) noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; const node &gt; <link linkend="_classparse__result_1a38991e36f62e6fe38f7710295c9e80e3">at_path</link> (const toml::path &amp;<link linkend="_classpath">path</link>) const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; node &gt; <link linkend="_classparse__result_1aac87841985f2d7b65c6cb66919c4400d">operator[]</link> (const toml::path &amp;<link linkend="_classpath">path</link>) noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; const node &gt; <link linkend="_classparse__result_1a0a1d0ca0fb0970279d78884704d44ac7">operator[]</link> (const toml::path &amp;<link linkend="_classpath">path</link>) const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; node &gt; <link linkend="_classparse__result_1a86709bcdd3001344b0fccd11f04ca56a">operator[]</link> (std::string_view key) noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; const node &gt; <link linkend="_classparse__result_1a8f4b8fe8c7b52d0e42fd371226570467">operator[]</link> (std::string_view key) const noexcept</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title>Result state</title>
        <itemizedlist>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classparse__result_1aebdf7ac3321c38cd4f66c5c9ca62e6cb">succeeded</link> () const noexcept</para>

<para>Returns true if parsing succeeeded. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classparse__result_1a1ef708ec2ca7aa725b7d6a22a4f88a6c">failed</link> () const noexcept</para>

<para>Returns true if parsing failed. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classparse__result_1aa081e8af5ff7241b9d6034be0846d560">operator bool</link> () const noexcept</para>

<para>Returns true if parsing succeeded. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title>Successful parses</title>

<para><warning><title>Warning</title>

<para>It is undefined behaviour to call these functions when the result respresents a failed parse. Check <link linkend="_classparse__result_1a1ef708ec2ca7aa725b7d6a22a4f88a6c">failed()</link>, <link linkend="_classparse__result_1aebdf7ac3321c38cd4f66c5c9ca62e6cb">succeeded</link> or <link linkend="_classparse__result_1aa081e8af5ff7241b9d6034be0846d560">operator bool()</link> to determine the result&apos;s state. </para>
</warning>
</para>
        <itemizedlist>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> toml::table &amp; <link linkend="_classparse__result_1a08838803e7d4834359276ac1d0ec79a4">table</link> () &amp;noexcept</para>

<para>Returns the internal toml::table. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> toml::table &amp;&amp; <link linkend="_classparse__result_1a007d45efccfa57e83299b448913ca1c5">table</link> () &amp;&amp;noexcept</para>

<para>Returns the internal toml::table (rvalue overload). </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const toml::table &amp; <link linkend="_classparse__result_1a19b0dad766f7fe8c16b6304ab62e1ac4">table</link> () const &amp;noexcept</para>

<para>Returns the internal toml::table (const lvalue overload). </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classparse__result_1af6306b671fec48bec6fda0fd5d0d44b8">operator toml::table &amp;</link> () noexcept</para>

<para>Returns the internal toml::table. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classparse__result_1abe8c314cf021bb23e48e9cf2ee1d7797">operator toml::table &amp;&amp;</link> () noexcept</para>

<para>Returns the internal toml::table (rvalue overload). </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classparse__result_1a9b6a3fb06858d3f8f1742932bbcfdf21">operator const toml::table &amp;</link> () const noexcept</para>

<para>Returns the internal toml::table (const lvalue overload). </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title>Failed parses</title>

<para><warning><title>Warning</title>

<para>It is undefined behaviour to call these functions when the result respresents a successful parse. Check <link linkend="_classparse__result_1a1ef708ec2ca7aa725b7d6a22a4f88a6c">failed()</link>, <link linkend="_classparse__result_1aebdf7ac3321c38cd4f66c5c9ca62e6cb">succeeded</link> or <link linkend="_classparse__result_1aa081e8af5ff7241b9d6034be0846d560">operator bool()</link> to determine the result&apos;s state. </para>
</warning>
</para>
        <itemizedlist>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> parse_error &amp; <link linkend="_classparse__result_1aee9cab037d487c1ca09ad033400fd1f7">error</link> () &amp;noexcept</para>

<para>Returns the internal toml::parse_error. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> parse_error &amp;&amp; <link linkend="_classparse__result_1ab657ef6a6e4b07b66dd445023f08e3b2">error</link> () &amp;&amp;noexcept</para>

<para>Returns the internal toml::parse_error (rvalue overload). </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const parse_error &amp; <link linkend="_classparse__result_1ac15b1a7c842a4a8e917a3f51d392556a">error</link> () const &amp;noexcept</para>

<para>Returns the internal toml::parse_error (const lvalue overload). </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classparse__result_1ab9f1b2ac30245b895f8ae556af6da55a">operator parse_error &amp;</link> () noexcept</para>

<para>Returns the internal toml::parse_error. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classparse__result_1a2e93940a3143d9ba5cfea1dcd59d7fcd">operator parse_error &amp;&amp;</link> () noexcept</para>

<para>Returns the internal toml::parse_error (rvalue overload). </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classparse__result_1a5a7d12ad18e4427e1052dfaa1385ef45">operator const parse_error &amp;</link> () const noexcept</para>

<para>Returns the internal toml::parse_error (const lvalue overload). </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title>Node views</title>
        <itemizedlist>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; node &gt; <link linkend="_classparse__result_1a0eda76e47ce514a80e2a998621d2e641">at_path</link> (std::string_view <link linkend="_classpath">path</link>) noexcept</para>

<para>Returns a view of the subnode matching a fully-qualified &quot;TOML path&quot;. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; const node &gt; <link linkend="_classparse__result_1acfc8e405c9d3ff150bb1322d27e0294f">at_path</link> (std::string_view <link linkend="_classpath">path</link>) const noexcept</para>

<para>Returns a const view of the subnode matching a fully-qualified &quot;TOML path&quot;. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; node &gt; <link linkend="_classparse__result_1a1963f05321264471873f57fe990ec967">at_path</link> (const toml::path &amp;<link linkend="_classpath">path</link>) noexcept</para>

<para>Returns a view of the subnode matching a fully-qualified &quot;TOML path&quot;. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; const node &gt; <link linkend="_classparse__result_1a38991e36f62e6fe38f7710295c9e80e3">at_path</link> (const toml::path &amp;<link linkend="_classpath">path</link>) const noexcept</para>

<para>Returns a const view of the subnode matching a fully-qualified &quot;TOML path&quot;. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; node &gt; <link linkend="_classparse__result_1a8e8504cc8b344e0f43736339382f3719">at_path</link> (std::wstring_view <link linkend="_classpath">path</link>)</para>

<para>Returns a view of the subnode matching a fully-qualified &quot;TOML path&quot;. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; const node &gt; <link linkend="_classparse__result_1ae2349475144f9f76cee88ba1743963c7">at_path</link> (std::wstring_view <link linkend="_classpath">path</link>) const</para>

<para>Returns a const view of the subnode matching a fully-qualified &quot;TOML path&quot;. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; node &gt; <link linkend="_classparse__result_1aac87841985f2d7b65c6cb66919c4400d">operator[]</link> (const toml::path &amp;<link linkend="_classpath">path</link>) noexcept</para>

<para>Returns a view of the subnode matching a fully-qualified &quot;TOML path&quot;. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; const node &gt; <link linkend="_classparse__result_1a0a1d0ca0fb0970279d78884704d44ac7">operator[]</link> (const toml::path &amp;<link linkend="_classpath">path</link>) const noexcept</para>

<para>Returns a const view of the subnode matching a fully-qualified &quot;TOML path&quot;. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; node &gt; <link linkend="_classparse__result_1a86709bcdd3001344b0fccd11f04ca56a">operator[]</link> (std::string_view key) noexcept</para>

<para>Gets a <link linkend="_classnode__view">node_view</link> for the selected key-value pair in the wrapped table. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; const node &gt; <link linkend="_classparse__result_1a8f4b8fe8c7b52d0e42fd371226570467">operator[]</link> (std::string_view key) const noexcept</para>

<para>Gets a <link linkend="_classnode__view">node_view</link> for the selected key-value pair in the wrapped table (const overload). </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; node &gt; <link linkend="_classparse__result_1a92ebcffdc2105bc3e231f3688beba9e4">operator[]</link> (std::wstring_view key)</para>

<para>Gets a <link linkend="_classnode__view">node_view</link> for the selected key-value pair in the wrapped table. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; const node &gt; <link linkend="_classparse__result_1a1894e856d7cdb26ad9ae34ad837a8b2f">operator[]</link> (std::wstring_view key) const</para>

<para>Gets a <link linkend="_classnode__view">node_view</link> for the selected key-value pair in the wrapped table (const overload). </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Friends    </title>
        <itemizedlist>
            <listitem><para>std::ostream &amp; <link linkend="_classparse__result_1a24e2d0cb20f183774c91ca48e9033aa5">operator&lt;&lt;</link> (std::ostream &amp;os, const <link linkend="_classparse__result">parse_result</link> &amp;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>)</para>

<para>Prints the held error or table object out to a text stream. </para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_classparse__result_1a24e2d0cb20f183774c91ca48e9033aa5">operator&lt;&lt;</link> (std::ostream &amp;os, const <link linkend="_classparse__result">parse_result</link> &amp;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Iteration    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_classparse__result_1a637d08fe0b20e768fc28205f3d23005d">iterator</link> = <link linkend="_classtable__iterator">table_iterator</link></para>

<para>A BidirectionalIterator for iterating over key-value pairs in a wrapped toml::table. </para>
</listitem>
            <listitem><para>using <link linkend="_classparse__result_1a6fd7369d951acc0a8d1ab8a197f3c7bb">const_iterator</link> = <link linkend="_toml_8hpp_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link></para>

<para>A BidirectionalIterator for iterating over const key-value pairs in a wrapped toml::table. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classtable__iterator">table_iterator</link> <link linkend="_classparse__result_1a670ad11bdbaf1773aa00ae5ab19e66a0">begin</link> () noexcept</para>

<para>Returns an iterator to the first key-value pair in the wrapped table. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link> <link linkend="_classparse__result_1a1b747121196915109bf6ee42999de721">begin</link> () const noexcept</para>

<para>Returns an iterator to the first key-value pair in the wrapped table. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link> <link linkend="_classparse__result_1af99c0ce6e4bbe37d4fc63ce33cb6a9ba">cbegin</link> () const noexcept</para>

<para>Returns an iterator to the first key-value pair in the wrapped table. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classtable__iterator">table_iterator</link> <link linkend="_classparse__result_1a4a5a65c875a38a8248ac3b7fd3fc7669">end</link> () noexcept</para>

<para>Returns an iterator to one-past-the-last key-value pair in the wrapped table. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link> <link linkend="_classparse__result_1a8896ba9f0c0c1339b7be850ea8d60aa1">end</link> () const noexcept</para>

<para>Returns an iterator to one-past-the-last key-value pair in the wrapped table. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link> <link linkend="_classparse__result_1aab6d787d388a6e63f1f899e153468fcc">cend</link> () const noexcept</para>

<para>Returns an iterator to one-past-the-last key-value pair in the wrapped table. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>The result of a parsing operation. </para>



<para>\availability <emphasis role="bold">This type only exists when exceptions are disabled.</emphasis> Otherwise <link linkend="_classparse__result">parse_result</link> is just an alias for toml::table: \cpp <link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link> TOML_EXCEPTIONS using <link linkend="_classparse__result">parse_result</link> = table; #else class <link linkend="_classparse__result">parse_result</link> { // ... #endif \ecpp</para>

<para>\detail A <link linkend="_classparse__result">parse_result</link> is effectively a discriminated union containing either a toml::table or a toml::parse_error. Most member functions assume a particular one of these two states, and calling them when in the wrong state will cause errors (e.g. attempting to access the error object when parsing was successful). \cpp toml::parse_result result = toml::parse_file(&quot;config.toml&quot;); if (result) do_stuff_with_a_table(result); //implicitly converts to table&amp; else std::cerr &lt;&lt; &quot;Parse failed:\n&quot;sv &lt;&lt; result.error() &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out example output:</para>

<para>Parse failed: Encountered unexpected character while parsing boolean; expected &apos;true&apos;, saw &apos;trU&apos; (error occurred at line 1, column 13 of &apos;config.toml&apos;) \eout</para>

<para>Getting node_views (<computeroutput>operator[]</computeroutput>, <computeroutput><link linkend="_classparse__result_1a0eda76e47ce514a80e2a998621d2e641">at_path()</link></computeroutput>) and using the iterator accessor functions (<computeroutput><link linkend="_classparse__result_1a670ad11bdbaf1773aa00ae5ab19e66a0">begin()</link></computeroutput>, <computeroutput><link linkend="_classparse__result_1a4a5a65c875a38a8248ac3b7fd3fc7669">end()</link></computeroutput> etc.) are unconditionally safe; when parsing fails these just return &apos;empty&apos; values. A ranged-for loop on a failed <link linkend="_classparse__result">parse_result</link> is also safe since <computeroutput><link linkend="_classparse__result_1a670ad11bdbaf1773aa00ae5ab19e66a0">begin()</link></computeroutput> and <computeroutput><link linkend="_classparse__result_1a4a5a65c875a38a8248ac3b7fd3fc7669">end()</link></computeroutput> return the same iterator and will not lead to any dereferences and iterations. </para>
</section>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_classparse__result_1a6fd7369d951acc0a8d1ab8a197f3c7bb"/><section>
    <title>const_iterator<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>const_iterator</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>const_iterator</secondary></indexterm>
<para><computeroutput>using <link linkend="_classparse__result_1a6fd7369d951acc0a8d1ab8a197f3c7bb">parse_result::const_iterator</link> =  <link linkend="_toml_8hpp_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link></computeroutput></para><para>

<para>A BidirectionalIterator for iterating over const key-value pairs in a wrapped toml::table. </para>
</para>
</section>
<anchor xml:id="_classparse__result_1a6fd7369d951acc0a8d1ab8a197f3c7bb"/><section>
    <title>const_iterator<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>const_iterator</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>const_iterator</secondary></indexterm>
<para><computeroutput>using <link linkend="_classparse__result_1a6fd7369d951acc0a8d1ab8a197f3c7bb">parse_result::const_iterator</link> =  <link linkend="_toml_8hpp_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link></computeroutput></para></section>
<anchor xml:id="_classparse__result_1a637d08fe0b20e768fc28205f3d23005d"/><section>
    <title>iterator<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>iterator</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>iterator</secondary></indexterm>
<para><computeroutput>using <link linkend="_classparse__result_1a637d08fe0b20e768fc28205f3d23005d">parse_result::iterator</link> =  <link linkend="_classtable__iterator">table_iterator</link></computeroutput></para><para>

<para>A BidirectionalIterator for iterating over key-value pairs in a wrapped toml::table. </para>
</para>
</section>
<anchor xml:id="_classparse__result_1a637d08fe0b20e768fc28205f3d23005d"/><section>
    <title>iterator<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>iterator</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>iterator</secondary></indexterm>
<para><computeroutput>using <link linkend="_classparse__result_1a637d08fe0b20e768fc28205f3d23005d">parse_result::iterator</link> =  <link linkend="_classtable__iterator">table_iterator</link></computeroutput></para></section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classparse__result_1a7ce78793e1d7badb69d1fa9a1b9dc023"/><section>
    <title>parse_result()<computeroutput>[1/8]</computeroutput></title>
<indexterm><primary>parse_result</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>parse_result</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> parse_result::parse_result ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Default constructs an &apos;error&apos; result. </para>
</para>
</section>
<anchor xml:id="_classparse__result_1a5bfa57ac29dbff7c917931f74d90c653"/><section>
    <title>parse_result()<computeroutput>[2/8]</computeroutput></title>
<indexterm><primary>parse_result</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>parse_result</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> parse_result::parse_result (toml::table &amp;&amp; tbl)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classparse__result_1a9cff481307b801bd9972917bada1b39e"/><section>
    <title>parse_result()<computeroutput>[3/8]</computeroutput></title>
<indexterm><primary>parse_result</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>parse_result</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> parse_result::parse_result (parse_error &amp;&amp; err)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classparse__result_1a35a596e77eaea21f1b4cb725b8444cf2"/><section>
    <title>parse_result()<computeroutput>[4/8]</computeroutput></title>
<indexterm><primary>parse_result</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>parse_result</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> parse_result::parse_result (<link linkend="_classparse__result">parse_result</link> &amp;&amp; res)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Move constructor. </para>
</para>
</section>
<anchor xml:id="_classparse__result_1a4ee2de268492e79c15475e0729e5fb91"/><section>
    <title>~parse_result()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>~parse_result</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>~parse_result</secondary></indexterm>
<para><computeroutput>parse_result::~parse_result ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Destructor. </para>
</para>
</section>
<anchor xml:id="_classparse__result_1a7ce78793e1d7badb69d1fa9a1b9dc023"/><section>
    <title>parse_result()<computeroutput>[5/8]</computeroutput></title>
<indexterm><primary>parse_result</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>parse_result</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> parse_result::parse_result ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classparse__result_1a5bfa57ac29dbff7c917931f74d90c653"/><section>
    <title>parse_result()<computeroutput>[6/8]</computeroutput></title>
<indexterm><primary>parse_result</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>parse_result</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> parse_result::parse_result (toml::table &amp;&amp; tbl)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classparse__result_1a9cff481307b801bd9972917bada1b39e"/><section>
    <title>parse_result()<computeroutput>[7/8]</computeroutput></title>
<indexterm><primary>parse_result</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>parse_result</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> parse_result::parse_result (parse_error &amp;&amp; err)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classparse__result_1a35a596e77eaea21f1b4cb725b8444cf2"/><section>
    <title>parse_result()<computeroutput>[8/8]</computeroutput></title>
<indexterm><primary>parse_result</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>parse_result</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> parse_result::parse_result (<link linkend="_classparse__result">parse_result</link> &amp;&amp; res)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classparse__result_1a4ee2de268492e79c15475e0729e5fb91"/><section>
    <title>~parse_result()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>~parse_result</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>~parse_result</secondary></indexterm>
<para><computeroutput>parse_result::~parse_result ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classparse__result_1a38991e36f62e6fe38f7710295c9e80e3"/><section>
    <title>at_path()<computeroutput>[1/10]</computeroutput></title>
<indexterm><primary>at_path</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>at_path</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; const node &gt; parse_result::at_path (const toml::path &amp; path) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns a const view of the subnode matching a fully-qualified &quot;TOML path&quot;. </para>
</para>

<para><formalpara><title>See also</title>

<para>#toml::node::at_path(const toml::path&amp;) </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classparse__result_1a38991e36f62e6fe38f7710295c9e80e3"/><section>
    <title>at_path()<computeroutput>[2/10]</computeroutput></title>
<indexterm><primary>at_path</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>at_path</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; const node &gt; parse_result::at_path (const toml::path &amp; path) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classparse__result_1a1963f05321264471873f57fe990ec967"/><section>
    <title>at_path()<computeroutput>[3/10]</computeroutput></title>
<indexterm><primary>at_path</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>at_path</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; node &gt; parse_result::at_path (const toml::path &amp; path)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns a view of the subnode matching a fully-qualified &quot;TOML path&quot;. </para>
</para>

<para><formalpara><title>See also</title>

<para>#toml::node::at_path(const toml::path&amp;) </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classparse__result_1a1963f05321264471873f57fe990ec967"/><section>
    <title>at_path()<computeroutput>[4/10]</computeroutput></title>
<indexterm><primary>at_path</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>at_path</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; node &gt; parse_result::at_path (const toml::path &amp; path)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classparse__result_1acfc8e405c9d3ff150bb1322d27e0294f"/><section>
    <title>at_path()<computeroutput>[5/10]</computeroutput></title>
<indexterm><primary>at_path</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>at_path</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; const node &gt; parse_result::at_path (std::string_view path) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns a const view of the subnode matching a fully-qualified &quot;TOML path&quot;. </para>
</para>

<para><formalpara><title>See also</title>

<para>#toml::node::at_path(std::string_view) </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classparse__result_1acfc8e405c9d3ff150bb1322d27e0294f"/><section>
    <title>at_path()<computeroutput>[6/10]</computeroutput></title>
<indexterm><primary>at_path</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>at_path</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; const node &gt; parse_result::at_path (std::string_view path) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classparse__result_1a0eda76e47ce514a80e2a998621d2e641"/><section>
    <title>at_path()<computeroutput>[7/10]</computeroutput></title>
<indexterm><primary>at_path</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>at_path</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; node &gt; parse_result::at_path (std::string_view path)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns a view of the subnode matching a fully-qualified &quot;TOML path&quot;. </para>
</para>

<para><formalpara><title>See also</title>

<para>#toml::node::at_path(std::string_view) </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classparse__result_1a0eda76e47ce514a80e2a998621d2e641"/><section>
    <title>at_path()<computeroutput>[8/10]</computeroutput></title>
<indexterm><primary>at_path</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>at_path</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; node &gt; parse_result::at_path (std::string_view path)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classparse__result_1a8e8504cc8b344e0f43736339382f3719"/><section>
    <title>at_path()<computeroutput>[9/10]</computeroutput></title>
<indexterm><primary>at_path</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>at_path</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; node &gt; parse_result::at_path (std::wstring_view path)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Returns a view of the subnode matching a fully-qualified &quot;TOML path&quot;. </para>
</para>

<para>\availability This overload is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled.</para>

<para><formalpara><title>See also</title>

<para>#toml::node::at_path(std::string_view) </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classparse__result_1ae2349475144f9f76cee88ba1743963c7"/><section>
    <title>at_path()<computeroutput>[10/10]</computeroutput></title>
<indexterm><primary>at_path</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>at_path</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; const node &gt; parse_result::at_path (std::wstring_view path) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Returns a const view of the subnode matching a fully-qualified &quot;TOML path&quot;. </para>
</para>

<para>\availability This overload is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled.</para>

<para><formalpara><title>See also</title>

<para>#toml::node::at_path(std::string_view) </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classparse__result_1a1b747121196915109bf6ee42999de721"/><section>
    <title>begin()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>begin</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>begin</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link> parse_result::begin ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns an iterator to the first key-value pair in the wrapped table. </para>
</para>

<para><formalpara><title>Remarks</title>

<para>Always returns the same value as <link linkend="_classparse__result_1a4a5a65c875a38a8248ac3b7fd3fc7669">end()</link> if parsing failed. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classparse__result_a1b747121196915109bf6ee42999de721_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classparse__result_1a1b747121196915109bf6ee42999de721"/><section>
    <title>begin()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>begin</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>begin</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link> parse_result::begin ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classparse__result_a1b747121196915109bf6ee42999de721_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classparse__result_1a670ad11bdbaf1773aa00ae5ab19e66a0"/><section>
    <title>begin()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>begin</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>begin</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classtable__iterator">table_iterator</link> parse_result::begin ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns an iterator to the first key-value pair in the wrapped table. </para>
</para>

<para><formalpara><title>Remarks</title>

<para>Always returns the same value as <link linkend="_classparse__result_1a4a5a65c875a38a8248ac3b7fd3fc7669">end()</link> if parsing failed. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classparse__result_a670ad11bdbaf1773aa00ae5ab19e66a0_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classparse__result_1a670ad11bdbaf1773aa00ae5ab19e66a0"/><section>
    <title>begin()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>begin</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>begin</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classtable__iterator">table_iterator</link> parse_result::begin ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classparse__result_a670ad11bdbaf1773aa00ae5ab19e66a0_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classparse__result_1af99c0ce6e4bbe37d4fc63ce33cb6a9ba"/><section>
    <title>cbegin()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>cbegin</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>cbegin</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link> parse_result::cbegin ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns an iterator to the first key-value pair in the wrapped table. </para>
</para>

<para><formalpara><title>Remarks</title>

<para>Always returns the same value as <link linkend="_classparse__result_1aab6d787d388a6e63f1f899e153468fcc">cend()</link> if parsing failed. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classparse__result_af99c0ce6e4bbe37d4fc63ce33cb6a9ba_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classparse__result_1af99c0ce6e4bbe37d4fc63ce33cb6a9ba"/><section>
    <title>cbegin()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>cbegin</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>cbegin</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link> parse_result::cbegin ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classparse__result_af99c0ce6e4bbe37d4fc63ce33cb6a9ba_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classparse__result_1aab6d787d388a6e63f1f899e153468fcc"/><section>
    <title>cend()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>cend</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>cend</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link> parse_result::cend ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns an iterator to one-past-the-last key-value pair in the wrapped table. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classparse__result_aab6d787d388a6e63f1f899e153468fcc_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classparse__result_1aab6d787d388a6e63f1f899e153468fcc"/><section>
    <title>cend()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>cend</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>cend</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link> parse_result::cend ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classparse__result_aab6d787d388a6e63f1f899e153468fcc_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classparse__result_1a8896ba9f0c0c1339b7be850ea8d60aa1"/><section>
    <title>end()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>end</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>end</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link> parse_result::end ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns an iterator to one-past-the-last key-value pair in the wrapped table. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classparse__result_a8896ba9f0c0c1339b7be850ea8d60aa1_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classparse__result_1a8896ba9f0c0c1339b7be850ea8d60aa1"/><section>
    <title>end()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>end</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>end</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link> parse_result::end ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classparse__result_a8896ba9f0c0c1339b7be850ea8d60aa1_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classparse__result_1a4a5a65c875a38a8248ac3b7fd3fc7669"/><section>
    <title>end()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>end</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>end</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classtable__iterator">table_iterator</link> parse_result::end ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns an iterator to one-past-the-last key-value pair in the wrapped table. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classparse__result_a4a5a65c875a38a8248ac3b7fd3fc7669_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classparse__result_1a4a5a65c875a38a8248ac3b7fd3fc7669"/><section>
    <title>end()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>end</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>end</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classtable__iterator">table_iterator</link> parse_result::end ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classparse__result_a4a5a65c875a38a8248ac3b7fd3fc7669_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classparse__result_1ab657ef6a6e4b07b66dd445023f08e3b2"/><section>
    <title>error()<computeroutput>[1/6]</computeroutput></title>
<indexterm><primary>error</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>error</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> parse_error &amp;&amp; parse_result::error ( ) &amp;&amp;<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns the internal toml::parse_error (rvalue overload). </para>
</para>
</section>
<anchor xml:id="_classparse__result_1ab657ef6a6e4b07b66dd445023f08e3b2"/><section>
    <title>error()<computeroutput>[2/6]</computeroutput></title>
<indexterm><primary>error</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>error</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> parse_error &amp;&amp; parse_result::error ( ) &amp;&amp;<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classparse__result_1aee9cab037d487c1ca09ad033400fd1f7"/><section>
    <title>error()<computeroutput>[3/6]</computeroutput></title>
<indexterm><primary>error</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>error</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> parse_error &amp; parse_result::error ( ) &amp;<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns the internal toml::parse_error. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classparse__result_aee9cab037d487c1ca09ad033400fd1f7_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classparse__result_1aee9cab037d487c1ca09ad033400fd1f7"/><section>
    <title>error()<computeroutput>[4/6]</computeroutput></title>
<indexterm><primary>error</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>error</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> parse_error &amp; parse_result::error ( ) &amp;<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classparse__result_1ac15b1a7c842a4a8e917a3f51d392556a"/><section>
    <title>error()<computeroutput>[5/6]</computeroutput></title>
<indexterm><primary>error</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>error</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const parse_error &amp; parse_result::error ( ) const &amp;<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns the internal toml::parse_error (const lvalue overload). </para>
</para>
</section>
<anchor xml:id="_classparse__result_1ac15b1a7c842a4a8e917a3f51d392556a"/><section>
    <title>error()<computeroutput>[6/6]</computeroutput></title>
<indexterm><primary>error</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>error</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const parse_error &amp; parse_result::error ( ) const &amp;<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classparse__result_1a1ef708ec2ca7aa725b7d6a22a4f88a6c"/><section>
    <title>failed()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>failed</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>failed</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> parse_result::failed ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns true if parsing failed. </para>
</para>
</section>
<anchor xml:id="_classparse__result_1a1ef708ec2ca7aa725b7d6a22a4f88a6c"/><section>
    <title>failed()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>failed</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>failed</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> parse_result::failed ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classparse__result_1aa081e8af5ff7241b9d6034be0846d560"/><section>
    <title>operator bool()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator bool</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>operator bool</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> parse_result::operator <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns true if parsing succeeded. </para>
</para>
</section>
<anchor xml:id="_classparse__result_1aa081e8af5ff7241b9d6034be0846d560"/><section>
    <title>operator bool()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator bool</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>operator bool</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> parse_result::operator <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classparse__result_1a5a7d12ad18e4427e1052dfaa1385ef45"/><section>
    <title>operator const parse_error &amp;()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator const parse_error &amp;</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>operator const parse_error &amp;</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> parse_result::operator const parse_error &amp; ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns the internal toml::parse_error (const lvalue overload). </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classparse__result_a5a7d12ad18e4427e1052dfaa1385ef45_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classparse__result_1a5a7d12ad18e4427e1052dfaa1385ef45"/><section>
    <title>operator const parse_error &amp;()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator const parse_error &amp;</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>operator const parse_error &amp;</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> parse_result::operator const parse_error &amp; ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classparse__result_a5a7d12ad18e4427e1052dfaa1385ef45_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classparse__result_1a9b6a3fb06858d3f8f1742932bbcfdf21"/><section>
    <title>operator const toml::table &amp;()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator const toml::table &amp;</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>operator const toml::table &amp;</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> parse_result::operator const toml::table &amp; ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns the internal toml::table (const lvalue overload). </para>
</para>
</section>
<anchor xml:id="_classparse__result_1a9b6a3fb06858d3f8f1742932bbcfdf21"/><section>
    <title>operator const toml::table &amp;()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator const toml::table &amp;</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>operator const toml::table &amp;</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> parse_result::operator const toml::table &amp; ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classparse__result_1ab9f1b2ac30245b895f8ae556af6da55a"/><section>
    <title>operator parse_error &amp;()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator parse_error &amp;</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>operator parse_error &amp;</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> parse_result::operator parse_error &amp; ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns the internal toml::parse_error. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classparse__result_ab9f1b2ac30245b895f8ae556af6da55a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classparse__result_1ab9f1b2ac30245b895f8ae556af6da55a"/><section>
    <title>operator parse_error &amp;()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator parse_error &amp;</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>operator parse_error &amp;</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> parse_result::operator parse_error &amp; ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classparse__result_ab9f1b2ac30245b895f8ae556af6da55a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classparse__result_1a2e93940a3143d9ba5cfea1dcd59d7fcd"/><section>
    <title>operator parse_error &amp;&amp;()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator parse_error &amp;&amp;</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>operator parse_error &amp;&amp;</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> parse_result::operator parse_error &amp;&amp; ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns the internal toml::parse_error (rvalue overload). </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classparse__result_a2e93940a3143d9ba5cfea1dcd59d7fcd_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classparse__result_1a2e93940a3143d9ba5cfea1dcd59d7fcd"/><section>
    <title>operator parse_error &amp;&amp;()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator parse_error &amp;&amp;</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>operator parse_error &amp;&amp;</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> parse_result::operator parse_error &amp;&amp; ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classparse__result_a2e93940a3143d9ba5cfea1dcd59d7fcd_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classparse__result_1af6306b671fec48bec6fda0fd5d0d44b8"/><section>
    <title>operator toml::table &amp;()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator toml::table &amp;</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>operator toml::table &amp;</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> parse_result::operator toml::table &amp; ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns the internal toml::table. </para>
</para>
</section>
<anchor xml:id="_classparse__result_1af6306b671fec48bec6fda0fd5d0d44b8"/><section>
    <title>operator toml::table &amp;()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator toml::table &amp;</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>operator toml::table &amp;</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> parse_result::operator toml::table &amp; ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classparse__result_1abe8c314cf021bb23e48e9cf2ee1d7797"/><section>
    <title>operator toml::table &amp;&amp;()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator toml::table &amp;&amp;</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>operator toml::table &amp;&amp;</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> parse_result::operator toml::table &amp;&amp; ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns the internal toml::table (rvalue overload). </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classparse__result_abe8c314cf021bb23e48e9cf2ee1d7797_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classparse__result_1abe8c314cf021bb23e48e9cf2ee1d7797"/><section>
    <title>operator toml::table &amp;&amp;()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator toml::table &amp;&amp;</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>operator toml::table &amp;&amp;</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> parse_result::operator toml::table &amp;&amp; ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classparse__result_abe8c314cf021bb23e48e9cf2ee1d7797_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classparse__result_1a749c0c01921e831bb836c5713f0c22b6"/><section>
    <title>operator=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_classparse__result">parse_result</link> &amp; parse_result::operator= (<link linkend="_classparse__result">parse_result</link> &amp;&amp; rhs)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Move-assignment operator. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classparse__result_a749c0c01921e831bb836c5713f0c22b6_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classparse__result_1a749c0c01921e831bb836c5713f0c22b6"/><section>
    <title>operator=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_classparse__result">parse_result</link> &amp; parse_result::operator= (<link linkend="_classparse__result">parse_result</link> &amp;&amp; rhs)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classparse__result_a749c0c01921e831bb836c5713f0c22b6_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classparse__result_1a0a1d0ca0fb0970279d78884704d44ac7"/><section>
    <title>operator[]()<computeroutput>[1/10]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; const node &gt; parse_result::operator[] (const toml::path &amp; path) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns a const view of the subnode matching a fully-qualified &quot;TOML path&quot;. </para>
</para>

<para><formalpara><title>See also</title>

<para>#toml::node::operator[](const toml::path&amp;) </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classparse__result_1a0a1d0ca0fb0970279d78884704d44ac7"/><section>
    <title>operator[]()<computeroutput>[2/10]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; const node &gt; parse_result::operator[] (const toml::path &amp; path) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classparse__result_1aac87841985f2d7b65c6cb66919c4400d"/><section>
    <title>operator[]()<computeroutput>[3/10]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; node &gt; parse_result::operator[] (const toml::path &amp; path)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns a view of the subnode matching a fully-qualified &quot;TOML path&quot;. </para>
</para>

<para><formalpara><title>See also</title>

<para>#toml::node::operator[](const toml::path&amp;) </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classparse__result_1aac87841985f2d7b65c6cb66919c4400d"/><section>
    <title>operator[]()<computeroutput>[4/10]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; node &gt; parse_result::operator[] (const toml::path &amp; path)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classparse__result_1a8f4b8fe8c7b52d0e42fd371226570467"/><section>
    <title>operator[]()<computeroutput>[5/10]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; const node &gt; parse_result::operator[] (std::string_view key) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Gets a <link linkend="_classnode__view">node_view</link> for the selected key-value pair in the wrapped table (const overload). </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>key</entry><entry>
<para>The key used for the lookup.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A view of the value at the given key if parsing was successful and a matching key existed, or an empty node view.</para>
</formalpara>
<formalpara><title>See also</title>

<para>toml::node_view </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classparse__result_1a8f4b8fe8c7b52d0e42fd371226570467"/><section>
    <title>operator[]()<computeroutput>[6/10]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; const node &gt; parse_result::operator[] (std::string_view key) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classparse__result_1a86709bcdd3001344b0fccd11f04ca56a"/><section>
    <title>operator[]()<computeroutput>[7/10]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; node &gt; parse_result::operator[] (std::string_view key)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Gets a <link linkend="_classnode__view">node_view</link> for the selected key-value pair in the wrapped table. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>key</entry><entry>
<para>The key used for the lookup.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A view of the value at the given key if parsing was successful and a matching key existed, or an empty node view.</para>
</formalpara>
<formalpara><title>See also</title>

<para>toml::node_view </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classparse__result_1a86709bcdd3001344b0fccd11f04ca56a"/><section>
    <title>operator[]()<computeroutput>[8/10]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; node &gt; parse_result::operator[] (std::string_view key)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classparse__result_1a92ebcffdc2105bc3e231f3688beba9e4"/><section>
    <title>operator[]()<computeroutput>[9/10]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; node &gt; parse_result::operator[] (std::wstring_view key)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Gets a <link linkend="_classnode__view">node_view</link> for the selected key-value pair in the wrapped table. </para>
</para>

<para>\availability This overload is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>key</entry><entry>
<para>The key used for the lookup.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A view of the value at the given key if parsing was successful and a matching key existed, or an empty node view.</para>
</formalpara>
<formalpara><title>See also</title>

<para>toml::node_view </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classparse__result_1a1894e856d7cdb26ad9ae34ad837a8b2f"/><section>
    <title>operator[]()<computeroutput>[10/10]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; const node &gt; parse_result::operator[] (std::wstring_view key) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Gets a <link linkend="_classnode__view">node_view</link> for the selected key-value pair in the wrapped table (const overload). </para>
</para>

<para>\availability This overload is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>key</entry><entry>
<para>The key used for the lookup.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A view of the value at the given key if parsing was successful and a matching key existed, or an empty node view.</para>
</formalpara>
<formalpara><title>See also</title>

<para>toml::node_view </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classparse__result_1aebdf7ac3321c38cd4f66c5c9ca62e6cb"/><section>
    <title>succeeded()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>succeeded</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>succeeded</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> parse_result::succeeded ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns true if parsing succeeeded. </para>
</para>
</section>
<anchor xml:id="_classparse__result_1aebdf7ac3321c38cd4f66c5c9ca62e6cb"/><section>
    <title>succeeded()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>succeeded</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>succeeded</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> parse_result::succeeded ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classparse__result_1a007d45efccfa57e83299b448913ca1c5"/><section>
    <title>table()<computeroutput>[1/6]</computeroutput></title>
<indexterm><primary>table</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>table</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> toml::table &amp;&amp; parse_result::table ( ) &amp;&amp;<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns the internal toml::table (rvalue overload). </para>
</para>
</section>
<anchor xml:id="_classparse__result_1a007d45efccfa57e83299b448913ca1c5"/><section>
    <title>table()<computeroutput>[2/6]</computeroutput></title>
<indexterm><primary>table</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>table</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> toml::table &amp;&amp; parse_result::table ( ) &amp;&amp;<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classparse__result_1a08838803e7d4834359276ac1d0ec79a4"/><section>
    <title>table()<computeroutput>[3/6]</computeroutput></title>
<indexterm><primary>table</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>table</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> toml::table &amp; parse_result::table ( ) &amp;<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns the internal toml::table. </para>
</para>
</section>
<anchor xml:id="_classparse__result_1a08838803e7d4834359276ac1d0ec79a4"/><section>
    <title>table()<computeroutput>[4/6]</computeroutput></title>
<indexterm><primary>table</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>table</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> toml::table &amp; parse_result::table ( ) &amp;<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classparse__result_1a19b0dad766f7fe8c16b6304ab62e1ac4"/><section>
    <title>table()<computeroutput>[5/6]</computeroutput></title>
<indexterm><primary>table</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>table</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const toml::table &amp; parse_result::table ( ) const &amp;<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns the internal toml::table (const lvalue overload). </para>
</para>
</section>
<anchor xml:id="_classparse__result_1a19b0dad766f7fe8c16b6304ab62e1ac4"/><section>
    <title>table()<computeroutput>[6/6]</computeroutput></title>
<indexterm><primary>table</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>table</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const toml::table &amp; parse_result::table ( ) const &amp;<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Friends And Related Symbol Documentation</title>
<anchor xml:id="_classparse__result_1a24e2d0cb20f183774c91ca48e9033aa5"/><section>
    <title>operator&lt;&lt;<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream &amp; operator&lt;&lt; (std::ostream &amp; os, const <link linkend="_classparse__result">parse_result</link> &amp; result)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Prints the held error or table object out to a text stream. </para>
</para>

<para>\availability This operator is only available when <link linkend="_group__configuration_1ga9fc77582d9de77f59d2ddc9ae1f748ca">TOML_ENABLE_FORMATTERS</link> is enabled. </para>
</section>
<anchor xml:id="_classparse__result_1a24e2d0cb20f183774c91ca48e9033aa5"/><section>
    <title>operator&lt;&lt;<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>parse_result</secondary></indexterm>
<indexterm><primary>parse_result</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream &amp; operator&lt;&lt; (std::ostream &amp; os, const <link linkend="_classparse__result">parse_result</link> &amp; result)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following files:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/include/toml++/impl/<link linkend="_parse__result_8h">parse_result.h</link>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/<link linkend="_toml_8hpp">toml.hpp</link></section>
</section>
