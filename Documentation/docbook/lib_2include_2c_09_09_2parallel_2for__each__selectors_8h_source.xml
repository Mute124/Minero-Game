<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2parallel_2for__each__selectors_8h_source" xml:lang="en-US">
<title>for_each_selectors.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/parallel/for_each_selectors.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2007-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
31 <emphasis role="comment">//&#32;Written&#32;by&#32;Felix&#32;Putze.</emphasis>
32 
33 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_PARALLEL_FOR_EACH_SELECTORS_H</emphasis>
34 <emphasis role="preprocessor">#define&#32;_GLIBCXX_PARALLEL_FOR_EACH_SELECTORS_H&#32;1</emphasis>
35 
36 <emphasis role="preprocessor">#include&#32;&lt;parallel/basic_iterator.h&gt;</emphasis>
37 
38 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__parallel">__gnu_parallel</link>
39 {
41 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_It&gt;
42 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__generic_for_each_selector
43 &#32;&#32;&#32;&#32;{
47 &#32;&#32;&#32;&#32;&#32;&#32;_It&#32;<link linkend="_struct____gnu__parallel_1_1____generic__for__each__selector_1a3b43c6fa8f1aa9bf6a3506102d0755c9">_M_finish_iterator</link>;
48 &#32;&#32;&#32;&#32;};
49 
51 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_It&gt;
52 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__for_each_selector&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__generic_for_each_selector&lt;_It&gt;
53 &#32;&#32;&#32;&#32;{
57 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Op&gt;
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____for__each__selector_1a96ab04030fc97ceace13df652312cca7">operator()</link>(_Op&amp;&#32;__o,&#32;_It&#32;__i)
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__o(*__i);
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
63 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
64 &#32;&#32;&#32;&#32;};
65 
67 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_It&gt;
68 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__generate_selector&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__generic_for_each_selector&lt;_It&gt;
69 &#32;&#32;&#32;&#32;{
73 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Op&gt;
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
75 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____generate__selector_1aace006f0e22d008dbfbd4170ec504ff4">operator()</link>(_Op&amp;&#32;__o,&#32;_It&#32;__i)
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__i&#32;=&#32;__o();
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
80 &#32;&#32;&#32;&#32;};
81 
83 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_It&gt;
84 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__fill_selector&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__generic_for_each_selector&lt;_It&gt;
85 &#32;&#32;&#32;&#32;{
89 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ValueType&gt;
90 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____fill__selector_1a1e3e5bf39d889705dbb9424ac1a4fc01">operator()</link>(_ValueType&amp;&#32;__v,&#32;_It&#32;__i)
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__i&#32;=&#32;__v;
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
96 &#32;&#32;&#32;&#32;};
97 
99 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_It&gt;
100 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__transform1_selector&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__generic_for_each_selector&lt;_It&gt;
101 &#32;&#32;&#32;&#32;{
105 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Op&gt;
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____transform1__selector_1a8292d668f885bee0747c9d154fb9a77e">operator()</link>(_Op&amp;&#32;__o,&#32;_It&#32;__i)
108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__i.second&#32;=&#32;__o(*__i.first);
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
112 &#32;&#32;&#32;&#32;};
113 
115 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_It&gt;
116 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__transform2_selector&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__generic_for_each_selector&lt;_It&gt;
117 &#32;&#32;&#32;&#32;{
121 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Op&gt;
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____transform2__selector_1a4e0226a0b61723e0e8e716fb3a8be78f">operator()</link>(_Op&amp;&#32;__o,&#32;_It&#32;__i)
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__i._M_third&#32;=&#32;__o(*__i._M_first,&#32;*__i._M_second);
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
128 &#32;&#32;&#32;&#32;};
129 
131 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_It,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
132 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__replace_selector&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__generic_for_each_selector&lt;_It&gt;
133 &#32;&#32;&#32;&#32;{
135 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="_struct____gnu__parallel_1_1____replace__selector_1a79c9535db4012d60c17e413dae018e56">__new_val</link>;
136 
139 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
140 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____replace__selector_1a0fc622ae3902dd1b6c81541545262db7">__replace_selector</link>(<emphasis role="keyword">const</emphasis>&#32;_Tp&#32;&amp;<link linkend="_struct____gnu__parallel_1_1____replace__selector_1a79c9535db4012d60c17e413dae018e56">__new_val</link>)&#32;:&#32;<link linkend="_struct____gnu__parallel_1_1____replace__selector_1a79c9535db4012d60c17e413dae018e56">__new_val</link>(<link linkend="_struct____gnu__parallel_1_1____replace__selector_1a79c9535db4012d60c17e413dae018e56">__new_val</link>)&#32;{}
141 
145 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
146 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____replace__selector_1af3f1faaa44808a57f241b03a0f9be9a5">operator()</link>(_Tp&amp;&#32;__v,&#32;_It&#32;__i)
147 &#32;&#32;&#32;&#32;&#32;&#32;{
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*__i&#32;==&#32;__v)
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__i&#32;=&#32;<link linkend="_struct____gnu__parallel_1_1____replace__selector_1a79c9535db4012d60c17e413dae018e56">__new_val</link>;
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
151 &#32;&#32;&#32;&#32;&#32;&#32;}
152 &#32;&#32;&#32;&#32;};
153 
155 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_It,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Op,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
156 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__replace_if_selector&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__generic_for_each_selector&lt;_It&gt;
157 &#32;&#32;&#32;&#32;{
159 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="_struct____gnu__parallel_1_1____replace__if__selector_1a2ed4f0b6ad11295d354aa0b41d3c3dfe">__new_val</link>;
160 
163 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
164 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____replace__if__selector_1adbc9d0217ad343205522064b78116f27">__replace_if_selector</link>(<emphasis role="keyword">const</emphasis>&#32;_Tp&#32;&amp;<link linkend="_struct____gnu__parallel_1_1____replace__if__selector_1a2ed4f0b6ad11295d354aa0b41d3c3dfe">__new_val</link>)&#32;:&#32;<link linkend="_struct____gnu__parallel_1_1____replace__if__selector_1a2ed4f0b6ad11295d354aa0b41d3c3dfe">__new_val</link>(<link linkend="_struct____gnu__parallel_1_1____replace__if__selector_1a2ed4f0b6ad11295d354aa0b41d3c3dfe">__new_val</link>)&#32;{&#32;}
165 
169 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
170 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____replace__if__selector_1aac84e11aceb0e9a3a784639d4df228c3">operator()</link>(_Op&amp;&#32;__o,&#32;_It&#32;__i)
171 &#32;&#32;&#32;&#32;&#32;&#32;{
172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__o(*__i))
173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__i&#32;=&#32;<link linkend="_struct____gnu__parallel_1_1____replace__if__selector_1a2ed4f0b6ad11295d354aa0b41d3c3dfe">__new_val</link>;
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
175 &#32;&#32;&#32;&#32;&#32;&#32;}
176 &#32;&#32;&#32;&#32;};
177 
179 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_It,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Diff&gt;
180 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__count_selector&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__generic_for_each_selector&lt;_It&gt;
181 &#32;&#32;&#32;&#32;{
186 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ValueType&gt;
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Diff
188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____count__selector_1a0e1e5ee862269d12a04fd59864f07e66">operator()</link>(_ValueType&amp;&#32;__v,&#32;_It&#32;__i)
189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__v&#32;==&#32;*__i)&#32;?&#32;1&#32;:&#32;0;&#32;}
190 &#32;&#32;&#32;&#32;};
191 
193 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_It,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Diff&gt;
194 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__count_if_selector&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__generic_for_each_selector&lt;_It&gt;
195 &#32;&#32;&#32;&#32;{
200 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Op&gt;
201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Diff
202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____count__if__selector_1a56b55a96d25ead3f5a39c062913f7804">operator()</link>(_Op&amp;&#32;__o,&#32;_It&#32;__i)
203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__o(*__i))&#32;?&#32;1&#32;:&#32;0;&#32;}
204 &#32;&#32;&#32;&#32;};
205 
207 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_It&gt;
208 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__accumulate_selector&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__generic_for_each_selector&lt;_It&gt;
209 &#32;&#32;&#32;&#32;{
214 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Op&gt;
215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_It&gt;::value_type
216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____accumulate__selector_1a7f67aac8bcb49e1e62e55981a902fc67">operator()</link>(_Op&#32;__o,&#32;_It&#32;__i)
217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*__i;&#32;}
218 &#32;&#32;&#32;&#32;};
219 
221 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_It,&#32;<emphasis role="keyword">typename</emphasis>&#32;_It2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
222 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__inner_product_selector&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__generic_for_each_selector&lt;_It&gt;
223 &#32;&#32;&#32;&#32;{
225 &#32;&#32;&#32;&#32;&#32;&#32;_It&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____inner__product__selector_1a41d6aec1a243a4cd10c8beca20d3de75">__begin1_iterator</link>;
226 
228 &#32;&#32;&#32;&#32;&#32;&#32;_It2&#32;<link linkend="_struct____gnu__parallel_1_1____inner__product__selector_1a11bb81ff8c7ccd4d5e4437e606e138bc">__begin2_iterator</link>;
229 
233 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
234 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____inner__product__selector_1a25f2715c4f3a97fc90884d9eaa458a71">__inner_product_selector</link>(_It&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a0fb905920e6321601ec1c0650ce4944d">__b1</link>,&#32;_It2&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1ac7d43bb48a3aeccad2288b2c415f9e9f">__b2</link>)
235 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_struct____gnu__parallel_1_1____inner__product__selector_1a41d6aec1a243a4cd10c8beca20d3de75">__begin1_iterator</link>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a0fb905920e6321601ec1c0650ce4944d">__b1</link>),&#32;<link linkend="_struct____gnu__parallel_1_1____inner__product__selector_1a11bb81ff8c7ccd4d5e4437e606e138bc">__begin2_iterator</link>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1ac7d43bb48a3aeccad2288b2c415f9e9f">__b2</link>)&#32;{&#32;}
236 
241 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Op&gt;
242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp
243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____inner__product__selector_1aa518cf31e5b678e0ad8ed27ec50b995f">operator()</link>(_Op&#32;__mult,&#32;_It&#32;__current)
244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_It&gt;::difference_type&#32;__position
246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__current&#32;-&#32;<link linkend="_struct____gnu__parallel_1_1____inner__product__selector_1a41d6aec1a243a4cd10c8beca20d3de75">__begin1_iterator</link>;
247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__mult(*__current,&#32;*(<link linkend="_struct____gnu__parallel_1_1____inner__product__selector_1a11bb81ff8c7ccd4d5e4437e606e138bc">__begin2_iterator</link>&#32;+&#32;__position));
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
249 &#32;&#32;&#32;&#32;};
250 
252 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_It&gt;
253 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__identity_selector&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__generic_for_each_selector&lt;_It&gt;
254 &#32;&#32;&#32;&#32;{
259 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Op&gt;
260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_It
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____identity__selector_1a5a619614699498f9a13f1c64d27005e6">operator()</link>(_Op&#32;__o,&#32;_It&#32;__i)
262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__i;&#32;}
263 &#32;&#32;&#32;&#32;};
264 
268 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_It&gt;
269 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__adjacent_difference_selector
270 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__generic_for_each_selector&lt;_It&gt;
271 &#32;&#32;&#32;&#32;{
272 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Op&gt;
273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____adjacent__difference__selector_1acbeda5cc7af1e2edd1dc6e45f758c95c">operator()</link>(_Op&amp;&#32;__o,&#32;_It&#32;__i)
275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_It::first_type&#32;__go_back_one&#32;=&#32;__i.first;
277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__go_back_one;
278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__i.second&#32;=&#32;__o(*__i.first,&#32;*__go_back_one);
279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
281 &#32;&#32;&#32;&#32;};
282 
288 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Nothing
289 &#32;&#32;{
292 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_It&gt;
293 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
294 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___nothing_1ac510e7f38f4ddc7d13db646cb65d2e25">operator()</link>(_It&#32;__i)&#32;{&#32;}
295 &#32;&#32;};
296 
298 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_DummyReduct
299 &#32;&#32;{
300 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
301 &#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___dummy_reduct_1a48a29d00e7d6b47a4165ccaa3908e452">operator()</link>(<emphasis role="keywordtype">bool</emphasis>,&#32;<emphasis role="keywordtype">bool</emphasis>)<emphasis role="keyword">&#32;const</emphasis>
302 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;&#32;}
303 &#32;&#32;};
304 
306 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_It&gt;
307 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__min_element_reduct
308 &#32;&#32;&#32;&#32;{
309 &#32;&#32;&#32;&#32;&#32;&#32;_Compare&amp;&#32;<link linkend="_struct____gnu__parallel_1_1____min__element__reduct_1a349d0e1030fae611e6c551217ce4e810">__comp</link>;
310 
311 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
312 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____min__element__reduct_1a5492fa0c0f7aa5544ab28084d39639d1">__min_element_reduct</link>(_Compare&#32;&amp;__c)&#32;:&#32;<link linkend="_struct____gnu__parallel_1_1____min__element__reduct_1a349d0e1030fae611e6c551217ce4e810">__comp</link>(__c)&#32;{&#32;}
313 
314 &#32;&#32;&#32;&#32;&#32;&#32;_It
315 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____min__element__reduct_1a1bddc8e69121c53b2d2135d51e3784b5">operator()</link>(_It&#32;__x,&#32;_It&#32;__y)
316 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_struct____gnu__parallel_1_1____min__element__reduct_1a349d0e1030fae611e6c551217ce4e810">__comp</link>(*__x,&#32;*__y))&#32;?&#32;__x&#32;:&#32;__y;&#32;}
317 &#32;&#32;&#32;&#32;};
318 
320 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_It&gt;
321 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__max_element_reduct
322 &#32;&#32;&#32;&#32;{
323 &#32;&#32;&#32;&#32;&#32;&#32;_Compare&amp;&#32;<link linkend="_struct____gnu__parallel_1_1____max__element__reduct_1a0d5cfeeee93d1b1092e34b80ad1cacac">__comp</link>;
324 
325 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
326 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____max__element__reduct_1a3795baa60339a562a8345803d1992512">__max_element_reduct</link>(_Compare&amp;&#32;__c)&#32;:&#32;<link linkend="_struct____gnu__parallel_1_1____max__element__reduct_1a0d5cfeeee93d1b1092e34b80ad1cacac">__comp</link>(__c)&#32;{&#32;}
327 
328 &#32;&#32;&#32;&#32;&#32;&#32;_It
329 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____max__element__reduct_1aee581d77799b10a4cebc3b2b0be461fb">operator()</link>(_It&#32;__x,&#32;_It&#32;__y)
330 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_struct____gnu__parallel_1_1____max__element__reduct_1a0d5cfeeee93d1b1092e34b80ad1cacac">__comp</link>(*__x,&#32;*__y))&#32;?&#32;__y&#32;:&#32;__x;&#32;}
331 &#32;&#32;&#32;&#32;};
332 
334 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_BinOp&gt;
335 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__accumulate_binop_reduct
336 &#32;&#32;&#32;&#32;{
337 &#32;&#32;&#32;&#32;&#32;&#32;_BinOp&amp;&#32;<link linkend="_struct____gnu__parallel_1_1____accumulate__binop__reduct_1a05ed49eb119de7e4321cd75bf09fda23">__binop</link>;
338 
339 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
340 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____accumulate__binop__reduct_1a3b8dfa1b6fae2711aa510b8ff2f01679">__accumulate_binop_reduct</link>(_BinOp&amp;&#32;__b)&#32;:&#32;<link linkend="_struct____gnu__parallel_1_1____accumulate__binop__reduct_1a05ed49eb119de7e4321cd75bf09fda23">__binop</link>(__b)&#32;{&#32;}
341 
342 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Result,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Addend&gt;
343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Result
344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____accumulate__binop__reduct_1a80d93796010c62581d33f712a57effde">operator()</link>(<emphasis role="keyword">const</emphasis>&#32;_Result&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Addend&amp;&#32;__y)
345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct____gnu__parallel_1_1____accumulate__binop__reduct_1a05ed49eb119de7e4321cd75bf09fda23">__binop</link>(__x,&#32;__y);&#32;}
346 &#32;&#32;&#32;&#32;};
347 }
348 
349 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_GLIBCXX_PARALLEL_FOR_EACH_SELECTORS_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
