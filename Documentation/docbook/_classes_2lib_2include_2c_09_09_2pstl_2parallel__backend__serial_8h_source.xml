<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2pstl_2parallel__backend__serial_8h_source" xml:lang="en-US">
<title>parallel_backend_serial.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/pstl/parallel_backend_serial.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 <emphasis role="comment">//===--&#32;parallel_backend_serial.h&#32;-----------------------------------------===//</emphasis>
3 <emphasis role="comment">//</emphasis>
4 <emphasis role="comment">//&#32;Part&#32;of&#32;the&#32;LLVM&#32;Project,&#32;under&#32;the&#32;Apache&#32;License&#32;v2.0&#32;with&#32;LLVM&#32;Exceptions.</emphasis>
5 <emphasis role="comment">//&#32;See&#32;https://llvm.org/LICENSE.txt&#32;for&#32;license&#32;information.</emphasis>
6 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;Apache-2.0&#32;WITH&#32;LLVM-exception</emphasis>
7 <emphasis role="comment">//</emphasis>
8 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
9 
10 <emphasis role="preprocessor">#ifndef&#32;_PSTL_PARALLEL_BACKEND_SERIAL_H</emphasis>
11 <emphasis role="preprocessor">#define&#32;_PSTL_PARALLEL_BACKEND_SERIAL_H</emphasis>
12 
13 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
14 <emphasis role="preprocessor">#include&#32;&lt;cstddef&gt;</emphasis>
15 <emphasis role="preprocessor">#include&#32;&lt;memory&gt;</emphasis>
16 <emphasis role="preprocessor">#include&#32;&lt;numeric&gt;</emphasis>
17 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>
18 
19 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____pstl">__pstl</link>
20 {
21 <emphasis role="keyword">namespace&#32;</emphasis>__serial_backend
22 {
23 
24 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
25 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class____pstl_1_1____serial__backend_1_1____buffer">__buffer</link>
26 {
27 &#32;&#32;&#32;&#32;std::allocator&lt;_Tp&gt;&#32;__allocator_;
28 &#32;&#32;&#32;&#32;_Tp*&#32;__ptr_;
29 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::size_t&#32;__buf_size_;
30 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____serial__backend_1_1____buffer">__buffer</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____pstl_1_1____serial__backend_1_1____buffer">__buffer</link>&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
31 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
32 &#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____pstl_1_1____serial__backend_1_1____buffer">__buffer</link>&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
33 
34 &#32;&#32;<emphasis role="keyword">public</emphasis>:
35 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____serial__backend_1_1____buffer_1a624d8e39d966d72e5d714f4101b57684">__buffer</link>(std::size_t&#32;__n)&#32;:&#32;__allocator_(),&#32;__ptr_(__allocator_.allocate(__n)),&#32;__buf_size_(__n)&#32;{}
36 
37 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ptr_&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>;&#32;}
38 &#32;&#32;&#32;&#32;_Tp*
39 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____serial__backend_1_1____buffer_1a0e26542c604597135736e64ef644396e">get</link>()<emphasis role="keyword">&#32;const</emphasis>
40 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
41 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ptr_;
42 &#32;&#32;&#32;&#32;}
43 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____serial__backend_1_1____buffer_1ae9459e03588f143fb8c1811bd7391dcf">~__buffer</link>()&#32;{&#32;__allocator_.deallocate(__ptr_,&#32;__buf_size_);&#32;}
44 };
45 
46 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
47 <link linkend="_namespace____pstl_1_1____serial__backend_1ad26f66dc44e9e078ac541a8ad970e430">__cancel_execution</link>()
48 {
49 }
50 
51 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_Index,&#32;<emphasis role="keyword">class</emphasis>&#32;_Fp&gt;
52 <emphasis role="keywordtype">void</emphasis>
53 <link linkend="_namespace____pstl_1_1____serial__backend_1a7b29884f96aa341a9aef7a49c30b791c">__parallel_for</link>(_ExecutionPolicy&amp;&amp;,&#32;_Index&#32;__first,&#32;_Index&#32;__last,&#32;_Fp&#32;__f)
54 {
55 &#32;&#32;&#32;&#32;__f(__first,&#32;__last);
56 }
57 
58 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_Value,&#32;<emphasis role="keyword">class</emphasis>&#32;_Index,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RealBody,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Reduction&gt;
59 _Value
60 <link linkend="_namespace____pstl_1_1____serial__backend_1aefef58c69ef58ea71ec138cee0b3c48f">__parallel_reduce</link>(_ExecutionPolicy&amp;&amp;,&#32;_Index&#32;__first,&#32;_Index&#32;__last,&#32;<emphasis role="keyword">const</emphasis>&#32;_Value&amp;&#32;__identity,
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_RealBody&amp;&#32;__real_body,&#32;<emphasis role="keyword">const</emphasis>&#32;_Reduction&amp;)
62 {
63 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
64 &#32;&#32;&#32;&#32;{
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__identity;
66 &#32;&#32;&#32;&#32;}
67 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
68 &#32;&#32;&#32;&#32;{
69 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__real_body(__first,&#32;__last,&#32;__identity);
70 &#32;&#32;&#32;&#32;}
71 }
72 
73 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_Index,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryOp,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryOp,&#32;<emphasis role="keyword">class</emphasis>&#32;_Reduce&gt;
74 _Tp
75 <link linkend="_namespace____pstl_1_1____serial__backend_1ae9bc699a1b5f95fc02f9c205f3825a6d">__parallel_transform_reduce</link>(_ExecutionPolicy&amp;&amp;,&#32;_Index&#32;__first,&#32;_Index&#32;__last,&#32;_UnaryOp,&#32;_Tp&#32;__init,&#32;_BinaryOp,
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Reduce&#32;__reduce)
77 {
78 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__reduce(__first,&#32;__last,&#32;__init);
79 }
80 
81 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Index,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap&gt;
82 <emphasis role="keywordtype">void</emphasis>
83 <link linkend="_namespace____pstl_1_1____serial__backend_1a2c149651747da4086bcbff590144ce8e">__parallel_strict_scan</link>(_ExecutionPolicy&amp;&amp;,&#32;_Index&#32;__n,&#32;_Tp&#32;__initial,&#32;_Rp&#32;__reduce,&#32;_Cp&#32;__combine,&#32;_Sp&#32;__scan,
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Ap&#32;__apex)
85 {
86 &#32;&#32;&#32;&#32;_Tp&#32;__sum&#32;=&#32;__initial;
87 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n)
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sum&#32;=&#32;__combine(__sum,&#32;__reduce(_Index(0),&#32;__n));
89 &#32;&#32;&#32;&#32;__apex(__sum);
90 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n)
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__scan(_Index(0),&#32;__n,&#32;__initial);
92 }
93 
94 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_Index,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryOp,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryOp,&#32;<emphasis role="keyword">class</emphasis>&#32;_Reduce,&#32;<emphasis role="keyword">class</emphasis>&#32;_Scan&gt;
95 _Tp
96 <link linkend="_namespace____pstl_1_1____serial__backend_1afa10c5a90382b71edc23a934a828e7db">__parallel_transform_scan</link>(_ExecutionPolicy&amp;&amp;,&#32;_Index&#32;__n,&#32;_UnaryOp,&#32;_Tp&#32;__init,&#32;_BinaryOp,&#32;_Reduce,&#32;_Scan&#32;__scan)
97 {
98 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__scan(_Index(0),&#32;__n,&#32;__init);
99 }
100 
101 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_LeafSort&gt;
102 <emphasis role="keywordtype">void</emphasis>
103 <link linkend="_namespace____pstl_1_1____serial__backend_1a1d19b13972acbafa2554b1fb8b812914">__parallel_stable_sort</link>(_ExecutionPolicy&amp;&amp;,&#32;_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,&#32;_Compare&#32;__comp,
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_LeafSort&#32;__leaf_sort,&#32;std::size_t&#32;=&#32;0)
105 {
106 &#32;&#32;&#32;&#32;__leaf_sort(__first,&#32;__last,&#32;__comp);
107 }
108 
109 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator2,
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator3,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_LeafMerge&gt;
111 <emphasis role="keywordtype">void</emphasis>
112 <link linkend="_namespace____pstl_1_1____serial__backend_1adde34d3d43f7f72f8463f67d115f3e9d">__parallel_merge</link>(_ExecutionPolicy&amp;&amp;,&#32;_RandomAccessIterator1&#32;__first1,&#32;_RandomAccessIterator1&#32;__last1,
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator2&#32;__first2,&#32;_RandomAccessIterator2&#32;__last2,&#32;_RandomAccessIterator3&#32;__outit,
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp,&#32;_LeafMerge&#32;__leaf_merge)
115 {
116 &#32;&#32;&#32;&#32;__leaf_merge(__first1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__outit,&#32;__comp);
117 }
118 
119 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">typename</emphasis>&#32;_F1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_F2&gt;
120 <emphasis role="keywordtype">void</emphasis>
121 <link linkend="_namespace____pstl_1_1____serial__backend_1a1aa84b929d0e1a58cd793a31fe44d3a8">__parallel_invoke</link>(_ExecutionPolicy&amp;&amp;,&#32;_F1&amp;&amp;&#32;__f1,&#32;_F2&amp;&amp;&#32;__f2)
122 {
123 &#32;&#32;&#32;&#32;std::forward&lt;_F1&gt;(__f1)();
124 &#32;&#32;&#32;&#32;std::forward&lt;_F2&gt;(__f2)();
125 }
126 
127 }&#32;<emphasis role="comment">//&#32;namespace&#32;__serial_backend</emphasis>
128 }&#32;<emphasis role="comment">//&#32;namespace&#32;__pstl</emphasis>
129 
130 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_PSTL_PARALLEL_BACKEND_SERIAL_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
