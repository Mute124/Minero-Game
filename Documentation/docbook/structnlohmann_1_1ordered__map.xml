<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_structnlohmann_1_1ordered__map" xml:lang="en-US">
<title>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt; Struct Template Reference</title>
<indexterm><primary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</primary></indexterm>
<para>

<para>a minimal map-like container that preserves insertion order </para>
 
</para>
<para>
<computeroutput>#include &lt;json.hpp&gt;</computeroutput>
</para>
Inheritance diagram for nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="structnlohmann_1_1ordered__map__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="structnlohmann_1_1ordered__map__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_structnlohmann_1_1ordered__map_1a57095c6ed403f02e1bc2c240a13c9ed8">key_type</link> = Key</para>
</listitem>
            <listitem><para>using <link linkend="_structnlohmann_1_1ordered__map_1a1c9c1509ee714a9814b45a8030c84ec7">mapped_type</link> = T</para>
</listitem>
            <listitem><para>using <link linkend="_structnlohmann_1_1ordered__map_1a0cabe346c38a4f1ab1b8a396fbd2bbe2">Container</link> = std::vector&lt; std::pair&lt; const Key, T &gt;, Allocator &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_structnlohmann_1_1ordered__map_1aef8bc179883da4194bc6b657b87eeb07">iterator</link> = typename Container::iterator</para>
</listitem>
            <listitem><para>using <link linkend="_structnlohmann_1_1ordered__map_1a8276ac13f6e6ad27594a7e287a5ea071">const_iterator</link> = typename Container::const_iterator</para>
</listitem>
            <listitem><para>using <link linkend="_structnlohmann_1_1ordered__map_1ab5044ef3fc07cf7aee67241c4d10ce9d">size_type</link> = typename Container::size_type</para>
</listitem>
            <listitem><para>using <link linkend="_structnlohmann_1_1ordered__map_1abe9b97ae84d9c40616913b50b2778150">value_type</link> = typename Container::value_type</para>
</listitem>
            <listitem><para>using <link linkend="_structnlohmann_1_1ordered__map_1a9fd67c08c4ea14608f2b94f31576288e">key_compare</link> = std::equal_to&lt; Key &gt;</para>
</listitem>
            <listitem><para>template&lt;typename InputIt &gt; </para><para>using <link linkend="_structnlohmann_1_1ordered__map_1a89cc338e8466e74baaa138664c79ee98">require_input_iter</link> = typename std::enable_if&lt; std::is_convertible&lt; typename std::iterator_traits&lt; InputIt &gt;::iterator_category, std::input_iterator_tag &gt;<link linkend="_classvalue">::value</link> &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_structnlohmann_1_1ordered__map_1adb0157d15173e8880842c0a66afc8b76">ordered_map</link> () noexcept(noexcept(<link linkend="_structnlohmann_1_1ordered__map_1a0cabe346c38a4f1ab1b8a396fbd2bbe2">Container</link>()))</para>
</listitem>
            <listitem><para><link linkend="_structnlohmann_1_1ordered__map_1aa94368baa7529eb45ad018156462a039">ordered_map</link> (const Allocator &amp;alloc) noexcept(noexcept(<link linkend="_structnlohmann_1_1ordered__map_1a0cabe346c38a4f1ab1b8a396fbd2bbe2">Container</link>(alloc)))</para>
</listitem>
            <listitem><para>template&lt;class It &gt; </para><para><link linkend="_structnlohmann_1_1ordered__map_1a9d25efb51325cc1be027b8ea00c1f8b8">ordered_map</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last, const Allocator &amp;alloc=Allocator())</para>
</listitem>
            <listitem><para><link linkend="_structnlohmann_1_1ordered__map_1adafcb68bb38cdfee32e1e12423712150">ordered_map</link> (std::initializer_list&lt; <link linkend="_structnlohmann_1_1ordered__map_1abe9b97ae84d9c40616913b50b2778150">value_type</link> &gt; init, const Allocator &amp;alloc=Allocator())</para>
</listitem>
            <listitem><para>std::pair&lt; <link linkend="_structnlohmann_1_1ordered__map_1aef8bc179883da4194bc6b657b87eeb07">iterator</link>, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_structnlohmann_1_1ordered__map_1af0bcef59054b40d52707bc1bf984e482">emplace</link> (const <link linkend="_structnlohmann_1_1ordered__map_1a57095c6ed403f02e1bc2c240a13c9ed8">key_type</link> &amp;key, T &amp;&amp;t)</para>
</listitem>
            <listitem><para>T &amp; <link linkend="_structnlohmann_1_1ordered__map_1a6b0fab5f824a32ddddfd423821e597c6">operator[]</link> (const Key &amp;key)</para>
</listitem>
            <listitem><para>const T &amp; <link linkend="_structnlohmann_1_1ordered__map_1af552370550cd51d72663c2ae72042f9a">operator[]</link> (const Key &amp;key) const</para>
</listitem>
            <listitem><para>T &amp; <link linkend="_structnlohmann_1_1ordered__map_1a016027563c9a115a546bd046027c1a8e">at</link> (const Key &amp;key)</para>
</listitem>
            <listitem><para>const T &amp; <link linkend="_structnlohmann_1_1ordered__map_1a20d0c541bd54ea70648bb5efd5a4aaa9">at</link> (const Key &amp;key) const</para>
</listitem>
            <listitem><para><link linkend="_structnlohmann_1_1ordered__map_1ab5044ef3fc07cf7aee67241c4d10ce9d">size_type</link> <link linkend="_structnlohmann_1_1ordered__map_1a583c8976bbf0c137ff8e2439878f3058">erase</link> (const Key &amp;key)</para>
</listitem>
            <listitem><para><link linkend="_structnlohmann_1_1ordered__map_1aef8bc179883da4194bc6b657b87eeb07">iterator</link> <link linkend="_structnlohmann_1_1ordered__map_1a26053569acb0a858d87482b2fa3d5dc5">erase</link> (<link linkend="_structnlohmann_1_1ordered__map_1aef8bc179883da4194bc6b657b87eeb07">iterator</link> pos)</para>
</listitem>
            <listitem><para><link linkend="_structnlohmann_1_1ordered__map_1aef8bc179883da4194bc6b657b87eeb07">iterator</link> <link linkend="_structnlohmann_1_1ordered__map_1a6f766b4df72c42ac14d55603c85f9e36">erase</link> (<link linkend="_structnlohmann_1_1ordered__map_1aef8bc179883da4194bc6b657b87eeb07">iterator</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, <link linkend="_structnlohmann_1_1ordered__map_1aef8bc179883da4194bc6b657b87eeb07">iterator</link> last)</para>
</listitem>
            <listitem><para><link linkend="_structnlohmann_1_1ordered__map_1ab5044ef3fc07cf7aee67241c4d10ce9d">size_type</link> <link linkend="_structnlohmann_1_1ordered__map_1aee2c188dcc802d6b28910f707a5e637b">count</link> (const Key &amp;key) const</para>
</listitem>
            <listitem><para><link linkend="_structnlohmann_1_1ordered__map_1aef8bc179883da4194bc6b657b87eeb07">iterator</link> <link linkend="_structnlohmann_1_1ordered__map_1a2486527ac56e07d58946ae9a93a46bc8">find</link> (const Key &amp;key)</para>
</listitem>
            <listitem><para><link linkend="_structnlohmann_1_1ordered__map_1a8276ac13f6e6ad27594a7e287a5ea071">const_iterator</link> <link linkend="_structnlohmann_1_1ordered__map_1a41e6e34fa8a90b96cbe5c71fec10d2ee">find</link> (const Key &amp;key) const</para>
</listitem>
            <listitem><para>std::pair&lt; <link linkend="_structnlohmann_1_1ordered__map_1aef8bc179883da4194bc6b657b87eeb07">iterator</link>, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_structnlohmann_1_1ordered__map_1a2dafd3fdc7dbd3233bb8c85824ee7cb0">insert</link> (<link linkend="_structnlohmann_1_1ordered__map_1abe9b97ae84d9c40616913b50b2778150">value_type</link> &amp;&amp;<link linkend="_classvalue">value</link>)</para>
</listitem>
            <listitem><para>std::pair&lt; <link linkend="_structnlohmann_1_1ordered__map_1aef8bc179883da4194bc6b657b87eeb07">iterator</link>, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_structnlohmann_1_1ordered__map_1aad604df2c242c3cf28f595e692aed753">insert</link> (const <link linkend="_structnlohmann_1_1ordered__map_1abe9b97ae84d9c40616913b50b2778150">value_type</link> &amp;<link linkend="_classvalue">value</link>)</para>
</listitem>
            <listitem><para>template&lt;typename InputIt , typename  = require_input_iter&lt;InputIt&gt;&gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_structnlohmann_1_1ordered__map_1a2c8509f72bc33307661f1a0ed5763f9e">insert</link> (InputIt <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, InputIt last)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;class Key, class T, class IgnoredLess = std::less&lt;Key&gt;, class Allocator = std::allocator&lt;std::pair&lt;const Key, T&gt;&gt;&gt;<?linebreak?>struct nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</title></simplesect>

<para>a minimal map-like container that preserves insertion order </para>



<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/ordered_map/">https://json.nlohmann.me/api/ordered_map/</link></para>
</formalpara>
<link linkend="_structnlohmann_1_1ordered__map">ordered_map</link>: a minimal map-like container that preserves insertion order for use within nlohmann::basic_json&lt;ordered_map&gt; </para>
</section>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_structnlohmann_1_1ordered__map_1a8276ac13f6e6ad27594a7e287a5ea071"/><section>
    <title>const_iterator</title>
<indexterm><primary>const_iterator</primary><secondary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</primary><secondary>const_iterator</secondary></indexterm>
<computeroutput>template&lt;class Key , class T , class IgnoredLess  = std::less&lt;Key&gt;, class Allocator  = std::allocator&lt;std::pair&lt;const Key, T&gt;&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_structnlohmann_1_1ordered__map">nlohmann::ordered_map</link>&lt; Key, T, IgnoredLess, Allocator &gt;::const_iterator =  typename Container::const_iterator</computeroutput></para></section>
<anchor xml:id="_structnlohmann_1_1ordered__map_1a0cabe346c38a4f1ab1b8a396fbd2bbe2"/><section>
    <title>Container</title>
<indexterm><primary>Container</primary><secondary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</primary><secondary>Container</secondary></indexterm>
<computeroutput>template&lt;class Key , class T , class IgnoredLess  = std::less&lt;Key&gt;, class Allocator  = std::allocator&lt;std::pair&lt;const Key, T&gt;&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_structnlohmann_1_1ordered__map">nlohmann::ordered_map</link>&lt; Key, T, IgnoredLess, Allocator &gt;::Container =  std::vector&lt;std::pair&lt;const Key, T&gt;, Allocator&gt;</computeroutput></para></section>
<anchor xml:id="_structnlohmann_1_1ordered__map_1aef8bc179883da4194bc6b657b87eeb07"/><section>
    <title>iterator</title>
<indexterm><primary>iterator</primary><secondary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</primary><secondary>iterator</secondary></indexterm>
<computeroutput>template&lt;class Key , class T , class IgnoredLess  = std::less&lt;Key&gt;, class Allocator  = std::allocator&lt;std::pair&lt;const Key, T&gt;&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_structnlohmann_1_1ordered__map">nlohmann::ordered_map</link>&lt; Key, T, IgnoredLess, Allocator &gt;::iterator =  typename Container::iterator</computeroutput></para></section>
<anchor xml:id="_structnlohmann_1_1ordered__map_1a9fd67c08c4ea14608f2b94f31576288e"/><section>
    <title>key_compare</title>
<indexterm><primary>key_compare</primary><secondary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</primary><secondary>key_compare</secondary></indexterm>
<computeroutput>template&lt;class Key , class T , class IgnoredLess  = std::less&lt;Key&gt;, class Allocator  = std::allocator&lt;std::pair&lt;const Key, T&gt;&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_structnlohmann_1_1ordered__map">nlohmann::ordered_map</link>&lt; Key, T, IgnoredLess, Allocator &gt;::key_compare =  std::equal_to&lt;Key&gt;</computeroutput></para></section>
<anchor xml:id="_structnlohmann_1_1ordered__map_1a57095c6ed403f02e1bc2c240a13c9ed8"/><section>
    <title>key_type</title>
<indexterm><primary>key_type</primary><secondary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</primary><secondary>key_type</secondary></indexterm>
<computeroutput>template&lt;class Key , class T , class IgnoredLess  = std::less&lt;Key&gt;, class Allocator  = std::allocator&lt;std::pair&lt;const Key, T&gt;&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_structnlohmann_1_1ordered__map">nlohmann::ordered_map</link>&lt; Key, T, IgnoredLess, Allocator &gt;::key_type =  Key</computeroutput></para></section>
<anchor xml:id="_structnlohmann_1_1ordered__map_1a1c9c1509ee714a9814b45a8030c84ec7"/><section>
    <title>mapped_type</title>
<indexterm><primary>mapped_type</primary><secondary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</primary><secondary>mapped_type</secondary></indexterm>
<computeroutput>template&lt;class Key , class T , class IgnoredLess  = std::less&lt;Key&gt;, class Allocator  = std::allocator&lt;std::pair&lt;const Key, T&gt;&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_structnlohmann_1_1ordered__map">nlohmann::ordered_map</link>&lt; Key, T, IgnoredLess, Allocator &gt;::mapped_type =  T</computeroutput></para></section>
<anchor xml:id="_structnlohmann_1_1ordered__map_1a89cc338e8466e74baaa138664c79ee98"/><section>
    <title>require_input_iter</title>
<indexterm><primary>require_input_iter</primary><secondary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</primary><secondary>require_input_iter</secondary></indexterm>
<computeroutput>template&lt;class Key , class T , class IgnoredLess  = std::less&lt;Key&gt;, class Allocator  = std::allocator&lt;std::pair&lt;const Key, T&gt;&gt;&gt; </computeroutput><computeroutput>template&lt;typename InputIt &gt; </computeroutput><para><computeroutput>using <link linkend="_structnlohmann_1_1ordered__map">nlohmann::ordered_map</link>&lt; Key, T, IgnoredLess, Allocator &gt;::require_input_iter =  typename std::enable_if&lt;std::is_convertible&lt;typename std::iterator_traits&lt;InputIt&gt;::iterator_category, std::input_iterator_tag&gt;<link linkend="_classvalue">::value</link>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></computeroutput></para></section>
<anchor xml:id="_structnlohmann_1_1ordered__map_1ab5044ef3fc07cf7aee67241c4d10ce9d"/><section>
    <title>size_type</title>
<indexterm><primary>size_type</primary><secondary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</primary><secondary>size_type</secondary></indexterm>
<computeroutput>template&lt;class Key , class T , class IgnoredLess  = std::less&lt;Key&gt;, class Allocator  = std::allocator&lt;std::pair&lt;const Key, T&gt;&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_structnlohmann_1_1ordered__map">nlohmann::ordered_map</link>&lt; Key, T, IgnoredLess, Allocator &gt;::size_type =  typename Container::size_type</computeroutput></para></section>
<anchor xml:id="_structnlohmann_1_1ordered__map_1abe9b97ae84d9c40616913b50b2778150"/><section>
    <title>value_type</title>
<indexterm><primary>value_type</primary><secondary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</primary><secondary>value_type</secondary></indexterm>
<computeroutput>template&lt;class Key , class T , class IgnoredLess  = std::less&lt;Key&gt;, class Allocator  = std::allocator&lt;std::pair&lt;const Key, T&gt;&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_structnlohmann_1_1ordered__map">nlohmann::ordered_map</link>&lt; Key, T, IgnoredLess, Allocator &gt;::value_type =  typename Container::value_type</computeroutput></para></section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_structnlohmann_1_1ordered__map_1adb0157d15173e8880842c0a66afc8b76"/><section>
    <title>ordered_map()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>ordered_map</primary><secondary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</primary><secondary>ordered_map</secondary></indexterm>
<computeroutput>template&lt;class Key , class T , class IgnoredLess  = std::less&lt;Key&gt;, class Allocator  = std::allocator&lt;std::pair&lt;const Key, T&gt;&gt;&gt; </computeroutput><para><computeroutput><link linkend="_structnlohmann_1_1ordered__map">nlohmann::ordered_map</link>&lt; Key, T, IgnoredLess, Allocator &gt;::ordered_map ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_structnlohmann_1_1ordered__map_1aa94368baa7529eb45ad018156462a039"/><section>
    <title>ordered_map()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>ordered_map</primary><secondary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</primary><secondary>ordered_map</secondary></indexterm>
<computeroutput>template&lt;class Key , class T , class IgnoredLess  = std::less&lt;Key&gt;, class Allocator  = std::allocator&lt;std::pair&lt;const Key, T&gt;&gt;&gt; </computeroutput><para><computeroutput><link linkend="_structnlohmann_1_1ordered__map">nlohmann::ordered_map</link>&lt; Key, T, IgnoredLess, Allocator &gt;::ordered_map (const Allocator &amp; alloc)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_structnlohmann_1_1ordered__map_1a9d25efb51325cc1be027b8ea00c1f8b8"/><section>
    <title>ordered_map()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>ordered_map</primary><secondary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</primary><secondary>ordered_map</secondary></indexterm>
<computeroutput>template&lt;class Key , class T , class IgnoredLess  = std::less&lt;Key&gt;, class Allocator  = std::allocator&lt;std::pair&lt;const Key, T&gt;&gt;&gt; </computeroutput><computeroutput>template&lt;class It &gt; </computeroutput><para><computeroutput><link linkend="_structnlohmann_1_1ordered__map">nlohmann::ordered_map</link>&lt; Key, T, IgnoredLess, Allocator &gt;::ordered_map (It first, It last, const Allocator &amp; alloc = <computeroutput>Allocator()</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_structnlohmann_1_1ordered__map_1adafcb68bb38cdfee32e1e12423712150"/><section>
    <title>ordered_map()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>ordered_map</primary><secondary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</primary><secondary>ordered_map</secondary></indexterm>
<computeroutput>template&lt;class Key , class T , class IgnoredLess  = std::less&lt;Key&gt;, class Allocator  = std::allocator&lt;std::pair&lt;const Key, T&gt;&gt;&gt; </computeroutput><para><computeroutput><link linkend="_structnlohmann_1_1ordered__map">nlohmann::ordered_map</link>&lt; Key, T, IgnoredLess, Allocator &gt;::ordered_map (std::initializer_list&lt; <link linkend="_structnlohmann_1_1ordered__map_1abe9b97ae84d9c40616913b50b2778150">value_type</link> &gt; init, const Allocator &amp; alloc = <computeroutput>Allocator()</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_structnlohmann_1_1ordered__map_1a016027563c9a115a546bd046027c1a8e"/><section>
    <title>at()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>at</primary><secondary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</primary><secondary>at</secondary></indexterm>
<computeroutput>template&lt;class Key , class T , class IgnoredLess  = std::less&lt;Key&gt;, class Allocator  = std::allocator&lt;std::pair&lt;const Key, T&gt;&gt;&gt; </computeroutput><para><computeroutput>T &amp; <link linkend="_structnlohmann_1_1ordered__map">nlohmann::ordered_map</link>&lt; Key, T, IgnoredLess, Allocator &gt;::at (const Key &amp; key)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="structnlohmann_1_1ordered__map_a016027563c9a115a546bd046027c1a8e_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_structnlohmann_1_1ordered__map_1a20d0c541bd54ea70648bb5efd5a4aaa9"/><section>
    <title>at()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>at</primary><secondary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</primary><secondary>at</secondary></indexterm>
<computeroutput>template&lt;class Key , class T , class IgnoredLess  = std::less&lt;Key&gt;, class Allocator  = std::allocator&lt;std::pair&lt;const Key, T&gt;&gt;&gt; </computeroutput><para><computeroutput>const T &amp; <link linkend="_structnlohmann_1_1ordered__map">nlohmann::ordered_map</link>&lt; Key, T, IgnoredLess, Allocator &gt;::at (const Key &amp; key) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_structnlohmann_1_1ordered__map_1aee2c188dcc802d6b28910f707a5e637b"/><section>
    <title>count()</title>
<indexterm><primary>count</primary><secondary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</primary><secondary>count</secondary></indexterm>
<computeroutput>template&lt;class Key , class T , class IgnoredLess  = std::less&lt;Key&gt;, class Allocator  = std::allocator&lt;std::pair&lt;const Key, T&gt;&gt;&gt; </computeroutput><para><computeroutput><link linkend="_structnlohmann_1_1ordered__map_1ab5044ef3fc07cf7aee67241c4d10ce9d">size_type</link> <link linkend="_structnlohmann_1_1ordered__map">nlohmann::ordered_map</link>&lt; Key, T, IgnoredLess, Allocator &gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">::count</link> (const Key &amp; key) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_structnlohmann_1_1ordered__map_1af0bcef59054b40d52707bc1bf984e482"/><section>
    <title>emplace()</title>
<indexterm><primary>emplace</primary><secondary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</primary><secondary>emplace</secondary></indexterm>
<computeroutput>template&lt;class Key , class T , class IgnoredLess  = std::less&lt;Key&gt;, class Allocator  = std::allocator&lt;std::pair&lt;const Key, T&gt;&gt;&gt; </computeroutput><para><computeroutput>std::pair&lt; <link linkend="_structnlohmann_1_1ordered__map_1aef8bc179883da4194bc6b657b87eeb07">iterator</link>, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_structnlohmann_1_1ordered__map">nlohmann::ordered_map</link>&lt; Key, T, IgnoredLess, Allocator &gt;::emplace (const <link linkend="_structnlohmann_1_1ordered__map_1a57095c6ed403f02e1bc2c240a13c9ed8">key_type</link> &amp; key, T &amp;&amp; t)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="structnlohmann_1_1ordered__map_af0bcef59054b40d52707bc1bf984e482_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_structnlohmann_1_1ordered__map_1a583c8976bbf0c137ff8e2439878f3058"/><section>
    <title>erase()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>erase</primary><secondary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</primary><secondary>erase</secondary></indexterm>
<computeroutput>template&lt;class Key , class T , class IgnoredLess  = std::less&lt;Key&gt;, class Allocator  = std::allocator&lt;std::pair&lt;const Key, T&gt;&gt;&gt; </computeroutput><para><computeroutput><link linkend="_structnlohmann_1_1ordered__map_1ab5044ef3fc07cf7aee67241c4d10ce9d">size_type</link> <link linkend="_structnlohmann_1_1ordered__map">nlohmann::ordered_map</link>&lt; Key, T, IgnoredLess, Allocator &gt;::erase (const Key &amp; key)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="structnlohmann_1_1ordered__map_a583c8976bbf0c137ff8e2439878f3058_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="structnlohmann_1_1ordered__map_a583c8976bbf0c137ff8e2439878f3058_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_structnlohmann_1_1ordered__map_1a6f766b4df72c42ac14d55603c85f9e36"/><section>
    <title>erase()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>erase</primary><secondary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</primary><secondary>erase</secondary></indexterm>
<computeroutput>template&lt;class Key , class T , class IgnoredLess  = std::less&lt;Key&gt;, class Allocator  = std::allocator&lt;std::pair&lt;const Key, T&gt;&gt;&gt; </computeroutput><para><computeroutput><link linkend="_structnlohmann_1_1ordered__map_1aef8bc179883da4194bc6b657b87eeb07">iterator</link> <link linkend="_structnlohmann_1_1ordered__map">nlohmann::ordered_map</link>&lt; Key, T, IgnoredLess, Allocator &gt;::erase (<link linkend="_structnlohmann_1_1ordered__map_1aef8bc179883da4194bc6b657b87eeb07">iterator</link> first, <link linkend="_structnlohmann_1_1ordered__map_1aef8bc179883da4194bc6b657b87eeb07">iterator</link> last)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="structnlohmann_1_1ordered__map_a6f766b4df72c42ac14d55603c85f9e36_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_structnlohmann_1_1ordered__map_1a26053569acb0a858d87482b2fa3d5dc5"/><section>
    <title>erase()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>erase</primary><secondary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</primary><secondary>erase</secondary></indexterm>
<computeroutput>template&lt;class Key , class T , class IgnoredLess  = std::less&lt;Key&gt;, class Allocator  = std::allocator&lt;std::pair&lt;const Key, T&gt;&gt;&gt; </computeroutput><para><computeroutput><link linkend="_structnlohmann_1_1ordered__map_1aef8bc179883da4194bc6b657b87eeb07">iterator</link> <link linkend="_structnlohmann_1_1ordered__map">nlohmann::ordered_map</link>&lt; Key, T, IgnoredLess, Allocator &gt;::erase (<link linkend="_structnlohmann_1_1ordered__map_1aef8bc179883da4194bc6b657b87eeb07">iterator</link> pos)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="structnlohmann_1_1ordered__map_a26053569acb0a858d87482b2fa3d5dc5_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_structnlohmann_1_1ordered__map_1a2486527ac56e07d58946ae9a93a46bc8"/><section>
    <title>find()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>find</primary><secondary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</primary><secondary>find</secondary></indexterm>
<computeroutput>template&lt;class Key , class T , class IgnoredLess  = std::less&lt;Key&gt;, class Allocator  = std::allocator&lt;std::pair&lt;const Key, T&gt;&gt;&gt; </computeroutput><para><computeroutput><link linkend="_structnlohmann_1_1ordered__map_1aef8bc179883da4194bc6b657b87eeb07">iterator</link> <link linkend="_structnlohmann_1_1ordered__map">nlohmann::ordered_map</link>&lt; Key, T, IgnoredLess, Allocator &gt;::find (const Key &amp; key)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_structnlohmann_1_1ordered__map_1a41e6e34fa8a90b96cbe5c71fec10d2ee"/><section>
    <title>find()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>find</primary><secondary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</primary><secondary>find</secondary></indexterm>
<computeroutput>template&lt;class Key , class T , class IgnoredLess  = std::less&lt;Key&gt;, class Allocator  = std::allocator&lt;std::pair&lt;const Key, T&gt;&gt;&gt; </computeroutput><para><computeroutput><link linkend="_structnlohmann_1_1ordered__map_1a8276ac13f6e6ad27594a7e287a5ea071">const_iterator</link> <link linkend="_structnlohmann_1_1ordered__map">nlohmann::ordered_map</link>&lt; Key, T, IgnoredLess, Allocator &gt;::find (const Key &amp; key) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_structnlohmann_1_1ordered__map_1aad604df2c242c3cf28f595e692aed753"/><section>
    <title>insert()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>insert</primary><secondary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</primary><secondary>insert</secondary></indexterm>
<computeroutput>template&lt;class Key , class T , class IgnoredLess  = std::less&lt;Key&gt;, class Allocator  = std::allocator&lt;std::pair&lt;const Key, T&gt;&gt;&gt; </computeroutput><para><computeroutput>std::pair&lt; <link linkend="_structnlohmann_1_1ordered__map_1aef8bc179883da4194bc6b657b87eeb07">iterator</link>, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_structnlohmann_1_1ordered__map">nlohmann::ordered_map</link>&lt; Key, T, IgnoredLess, Allocator &gt;::insert (const <link linkend="_structnlohmann_1_1ordered__map_1abe9b97ae84d9c40616913b50b2778150">value_type</link> &amp; value)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_structnlohmann_1_1ordered__map_1a2c8509f72bc33307661f1a0ed5763f9e"/><section>
    <title>insert()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>insert</primary><secondary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</primary><secondary>insert</secondary></indexterm>
<computeroutput>template&lt;class Key , class T , class IgnoredLess  = std::less&lt;Key&gt;, class Allocator  = std::allocator&lt;std::pair&lt;const Key, T&gt;&gt;&gt; </computeroutput><computeroutput>template&lt;typename InputIt , typename  = require_input_iter&lt;InputIt&gt;&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_structnlohmann_1_1ordered__map">nlohmann::ordered_map</link>&lt; Key, T, IgnoredLess, Allocator &gt;::insert (InputIt first, InputIt last)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="structnlohmann_1_1ordered__map_a2c8509f72bc33307661f1a0ed5763f9e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_structnlohmann_1_1ordered__map_1a2dafd3fdc7dbd3233bb8c85824ee7cb0"/><section>
    <title>insert()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>insert</primary><secondary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</primary><secondary>insert</secondary></indexterm>
<computeroutput>template&lt;class Key , class T , class IgnoredLess  = std::less&lt;Key&gt;, class Allocator  = std::allocator&lt;std::pair&lt;const Key, T&gt;&gt;&gt; </computeroutput><para><computeroutput>std::pair&lt; <link linkend="_structnlohmann_1_1ordered__map_1aef8bc179883da4194bc6b657b87eeb07">iterator</link>, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_structnlohmann_1_1ordered__map">nlohmann::ordered_map</link>&lt; Key, T, IgnoredLess, Allocator &gt;::insert (<link linkend="_structnlohmann_1_1ordered__map_1abe9b97ae84d9c40616913b50b2778150">value_type</link> &amp;&amp; value)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="structnlohmann_1_1ordered__map_a2dafd3fdc7dbd3233bb8c85824ee7cb0_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="structnlohmann_1_1ordered__map_a2dafd3fdc7dbd3233bb8c85824ee7cb0_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_structnlohmann_1_1ordered__map_1a6b0fab5f824a32ddddfd423821e597c6"/><section>
    <title>operator[]()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;class Key , class T , class IgnoredLess  = std::less&lt;Key&gt;, class Allocator  = std::allocator&lt;std::pair&lt;const Key, T&gt;&gt;&gt; </computeroutput><para><computeroutput>T &amp; <link linkend="_structnlohmann_1_1ordered__map">nlohmann::ordered_map</link>&lt; Key, T, IgnoredLess, Allocator &gt;::operator[] (const Key &amp; key)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="structnlohmann_1_1ordered__map_a6b0fab5f824a32ddddfd423821e597c6_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_structnlohmann_1_1ordered__map_1af552370550cd51d72663c2ae72042f9a"/><section>
    <title>operator[]()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::ordered_map&lt; Key, T, IgnoredLess, Allocator &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;class Key , class T , class IgnoredLess  = std::less&lt;Key&gt;, class Allocator  = std::allocator&lt;std::pair&lt;const Key, T&gt;&gt;&gt; </computeroutput><para><computeroutput>const T &amp; <link linkend="_structnlohmann_1_1ordered__map">nlohmann::ordered_map</link>&lt; Key, T, IgnoredLess, Allocator &gt;::operator[] (const Key &amp; key) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="structnlohmann_1_1ordered__map_af552370550cd51d72663c2ae72042f9a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<para>
The documentation for this struct was generated from the following file:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/vendor/<link linkend="_json_8hpp">json.hpp</link></section>
</section>
