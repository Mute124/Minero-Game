<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2bits_2char__traits_8h" xml:lang="en-US">
<title>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/bits/char_traits.h File Reference</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/bits/char_traits.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &lt;bits/postypes.h&gt;<?linebreak?>#include &lt;cwchar&gt;<?linebreak?></programlisting>Include dependency graph for char_traits.h:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="_classes_2lib_2include_2c_09_09_2bits_2char__traits_8h__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="__classes_2lib_2include_2c_09_09_2bits_2char__traits_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#160;&#160;&#160;inline <link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__always_inline__))</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>namespace __gnu_cxx <link linkend="__classes_2lib_2include_2c_09_09_2bits_2char__traits_8h_1a56fd5a6be7c55e53e3eb59de5aa1ab9b">_GLIBCXX_VISIBILITY</link> (default)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="__classes_2lib_2include_2c_09_09_2bits_2char__traits_8h_1a18755778007fe831d100a2355bd3a653"/><section>
    <title>_GLIBCXX_ALWAYS_INLINE</title>
<indexterm><primary>_GLIBCXX_ALWAYS_INLINE</primary><secondary>char_traits.h</secondary></indexterm>
<indexterm><primary>char_traits.h</primary><secondary>_GLIBCXX_ALWAYS_INLINE</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> _GLIBCXX_ALWAYS_INLINE&#160;&#160;&#160;inline <link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__always_inline__))</computeroutput></para></section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="__classes_2lib_2include_2c_09_09_2bits_2char__traits_8h_1a56fd5a6be7c55e53e3eb59de5aa1ab9b"/><section>
    <title>_GLIBCXX_VISIBILITY()</title>
<indexterm><primary>_GLIBCXX_VISIBILITY</primary><secondary>char_traits.h</secondary></indexterm>
<indexterm><primary>char_traits.h</primary><secondary>_GLIBCXX_VISIBILITY</secondary></indexterm>
<para><computeroutput>namespace __gnu_cxx _GLIBCXX_VISIBILITY (default )</computeroutput></para>
<para><link linkend="_struct_mapping">Mapping</link> from character type to associated types.</para>

<para><note><title>Note</title>

<para>This is an implementation class for the generic version of char_traits. It defines int_type, off_type, pos_type, and state_type. By default these are unsigned long, streamoff, streampos, and mbstate_t. Users who need a different set of types, but who don&apos;t need to change the definitions of any function defined in char_traits, can specialize __gnu_cxx::_Char_types while leaving __gnu_cxx::char_traits alone.</para>
</note>
Base class used to implement std::char_traits.</para>

<para><note><title>Note</title>

<para>For any given actual character type, this definition is probably wrong. (Most of the member functions are likely to be right, but the int_type and state_type typedefs, and the eof() member function, are likely to be wrong.) The reason this class exists is so users can specialize it. Classes in namespace std may not be specialized for fundamental types, but classes in namespace <link linkend="_namespace____gnu__cxx">__gnu_cxx</link> may be.</para>
</note>
See <link xlink:href="https://gcc.gnu.org/onlinedocs/libstdc++/manual/strings.html#strings.string.character_types">https://gcc.gnu.org/onlinedocs/libstdc++/manual/strings.html#strings.string.character_types</link> for advice on how to make use of this class for <emphasis>unusual</emphasis> character types. Also, check out include/ext/pod_char_traits.h. <?linebreak?></para>

<para>Basis for explicit traits specializations.</para>

<para><note><title>Note</title>

<para>For any given actual character type, this definition is probably wrong. Since this is just a thin wrapper around __gnu_cxx::char_traits, it is possible to achieve a more appropriate definition by specializing __gnu_cxx::char_traits.</para>
</note>
See <link xlink:href="https://gcc.gnu.org/onlinedocs/libstdc++/manual/strings.html#strings.string.character_types">https://gcc.gnu.org/onlinedocs/libstdc++/manual/strings.html#strings.string.character_types</link> for advice on how to make use of this class for <emphasis>unusual</emphasis> character types. Also, check out include/ext/pod_char_traits.h.</para>

<para>21.1.3.1 char_traits specializations</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="_classes_2lib_2include_2c_09_09_2bits_2char__traits_8h_a56fd5a6be7c55e53e3eb59de5aa1ab9b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
</section>
