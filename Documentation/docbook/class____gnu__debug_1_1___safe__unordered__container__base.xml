<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class____gnu__debug_1_1___safe__unordered__container__base" xml:lang="en-US">
<title>__gnu_debug::_Safe_unordered_container_base Class Reference</title>
<indexterm><primary>__gnu_debug::_Safe_unordered_container_base</primary></indexterm>
<para>

<para>Base class that supports tracking of local iterators that reference an unordered container. </para>
 
</para>
<para>
<computeroutput>#include &lt;safe_unordered_base.h&gt;</computeroutput>
</para>
Inheritance diagram for __gnu_debug::_Safe_unordered_container_base:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__unordered__container__base__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for __gnu_debug::_Safe_unordered_container_base:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__unordered__container__base__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> * <link linkend="_class____gnu__debug_1_1___safe__unordered__container__base_1ab0b248ca894d2694f9288b70466fe90b">_M_local_iterators</link></para>

<para>The list of mutable local iterators that reference this container. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> * <link linkend="_class____gnu__debug_1_1___safe__unordered__container__base_1a728e08773218195fe7e6b5749dd67761">_M_const_local_iterators</link></para>

<para>The list of constant local iterators that reference this container. </para>
</listitem>
        </itemizedlist>
</simplesect>
Public Attributes inherited from <link linkend="_class____gnu__debug_1_1___safe__sequence__base">__gnu_debug::_Safe_sequence_base</link>        <itemizedlist>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> * <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1a715ed592a623b3bc625d773347216c32">_M_iterators</link></para>

<para>The list of mutable iterators that reference this container. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> * <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1ad9e21ce9e18f4d060195458d3c197112">_M_const_iterators</link></para>

<para>The list of constant iterators that reference this container. </para>
</listitem>
            <listitem><para>unsigned int <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1af796b1fd115ea27cd078eeb7e4909bd5">_M_version</link></para>

<para>The container version number. This number may never be 0. </para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__unordered__container__base_1a9e65f903563508a84aff66abc81f0a5d">_Safe_unordered_container_base</link> () noexcept</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__unordered__container__base_1a6f7357bc3a3a6ef05fff5425d2416560">_Safe_unordered_container_base</link> (const <link linkend="_class____gnu__debug_1_1___safe__unordered__container__base">_Safe_unordered_container_base</link> &amp;) noexcept</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__unordered__container__base_1a4c64b0f6365a57a5acea89a074ca8510">_Safe_unordered_container_base</link> (<link linkend="_class____gnu__debug_1_1___safe__unordered__container__base">_Safe_unordered_container_base</link> &amp;&amp;__x) noexcept</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__unordered__container__base_1a918ae91156e92a8701da15fc61d05b63">~_Safe_unordered_container_base</link> () noexcept</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__unordered__container__base_1aa7ec5c80048329d10fe2916fff73aeff">_M_detach_all</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__unordered__container__base_1a1ff909e73bfb6e9646caf6df99db2d70">_M_swap</link> (<link linkend="_class____gnu__debug_1_1___safe__unordered__container__base">_Safe_unordered_container_base</link> &amp;__x) noexcept</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__unordered__container__base_1a9e65f903563508a84aff66abc81f0a5d">_Safe_unordered_container_base</link> () noexcept</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__unordered__container__base_1a6f7357bc3a3a6ef05fff5425d2416560">_Safe_unordered_container_base</link> (const <link linkend="_class____gnu__debug_1_1___safe__unordered__container__base">_Safe_unordered_container_base</link> &amp;) noexcept</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__unordered__container__base_1a4c64b0f6365a57a5acea89a074ca8510">_Safe_unordered_container_base</link> (<link linkend="_class____gnu__debug_1_1___safe__unordered__container__base">_Safe_unordered_container_base</link> &amp;&amp;__x) noexcept</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__unordered__container__base_1a918ae91156e92a8701da15fc61d05b63">~_Safe_unordered_container_base</link> () noexcept</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__unordered__container__base_1aa7ec5c80048329d10fe2916fff73aeff">_M_detach_all</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__unordered__container__base_1a1ff909e73bfb6e9646caf6df99db2d70">_M_swap</link> (<link linkend="_class____gnu__debug_1_1___safe__unordered__container__base">_Safe_unordered_container_base</link> &amp;__x) noexcept</para>
</listitem>
        </itemizedlist>
</simplesect>
Protected Member Functions inherited from <link linkend="_class____gnu__debug_1_1___safe__sequence__base">__gnu_debug::_Safe_sequence_base</link>        <itemizedlist>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__sequence__base_1ab37172446e16eca63620c13465558341">_Safe_sequence_base</link> () _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__sequence__base_1a9061ce48f8c5627d61a2e4a72a43f479">~_Safe_sequence_base</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1acebac46f833f903deb7c094fc26cbea1">_M_detach_all</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1aadde2fc883be085fc4588c1ef442cd3d">_M_detach_singular</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1a75f6eb02cd1721b550bd5eb205ed6920">_M_revalidate_singular</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1a8782fb392e549945fd9e910caf3b1c23">_M_swap</link> (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> &amp;__x) _GLIBCXX_USE_NOEXCEPT</para>
</listitem>
            <listitem><para>__gnu_cxx::__mutex &amp; <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1a688ceccbb7f5cfb2b4e95f569df4191d">_M_get_mutex</link> ()  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1a58a4c8925457fcf371457ec9f071a31f">_M_invalidate_all</link> () const</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__sequence__base_1ab37172446e16eca63620c13465558341">_Safe_sequence_base</link> () _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__sequence__base_1a9061ce48f8c5627d61a2e4a72a43f479">~_Safe_sequence_base</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1acebac46f833f903deb7c094fc26cbea1">_M_detach_all</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1aadde2fc883be085fc4588c1ef442cd3d">_M_detach_singular</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1a75f6eb02cd1721b550bd5eb205ed6920">_M_revalidate_singular</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1a8782fb392e549945fd9e910caf3b1c23">_M_swap</link> (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> &amp;__x) _GLIBCXX_USE_NOEXCEPT</para>
</listitem>
            <listitem><para>__gnu_cxx::__mutex &amp; <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1a688ceccbb7f5cfb2b4e95f569df4191d">_M_get_mutex</link> ()  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1a58a4c8925457fcf371457ec9f071a31f">_M_invalidate_all</link> () const</para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Friends    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_class____gnu__debug_1_1___safe__unordered__container__base_1ab5707868d6dfd05a983e8b685cf18145">_Safe_local_iterator_base</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Base class that supports tracking of local iterators that reference an unordered container. </para>



<para>The _Safe_unordered_container_base class provides basic support for tracking iterators into an unordered container. Containers that track iterators must derived from _Safe_unordered_container_base publicly, so that safe iterators (which inherit <link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link>) can attach to them. This class contains four linked lists of iterators, one for constant iterators, one for mutable iterators, one for constant local iterators, one for mutable local iterators and a version number that allows very fast invalidation of all iterators that reference the container.</para>

<para>This class must ensure that no operation on it may throw an exception, otherwise <emphasis>safe</emphasis> containers may fail to provide the exception-safety guarantees required by the C++ standard. </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class____gnu__debug_1_1___safe__unordered__container__base_1a9e65f903563508a84aff66abc81f0a5d"/><section>
    <title>_Safe_unordered_container_base()<computeroutput>[1/6]</computeroutput></title>
<indexterm><primary>_Safe_unordered_container_base</primary><secondary>__gnu_debug::_Safe_unordered_container_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_unordered_container_base</primary><secondary>_Safe_unordered_container_base</secondary></indexterm>
<para><computeroutput>__gnu_debug::_Safe_unordered_container_base::_Safe_unordered_container_base ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__unordered__container__base_1a6f7357bc3a3a6ef05fff5425d2416560"/><section>
    <title>_Safe_unordered_container_base()<computeroutput>[2/6]</computeroutput></title>
<indexterm><primary>_Safe_unordered_container_base</primary><secondary>__gnu_debug::_Safe_unordered_container_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_unordered_container_base</primary><secondary>_Safe_unordered_container_base</secondary></indexterm>
<para><computeroutput>__gnu_debug::_Safe_unordered_container_base::_Safe_unordered_container_base (const <link linkend="_class____gnu__debug_1_1___safe__unordered__container__base">_Safe_unordered_container_base</link> &amp; )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__unordered__container__base_1a4c64b0f6365a57a5acea89a074ca8510"/><section>
    <title>_Safe_unordered_container_base()<computeroutput>[3/6]</computeroutput></title>
<indexterm><primary>_Safe_unordered_container_base</primary><secondary>__gnu_debug::_Safe_unordered_container_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_unordered_container_base</primary><secondary>_Safe_unordered_container_base</secondary></indexterm>
<para><computeroutput>__gnu_debug::_Safe_unordered_container_base::_Safe_unordered_container_base (<link linkend="_class____gnu__debug_1_1___safe__unordered__container__base">_Safe_unordered_container_base</link> &amp;&amp; __x)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__unordered__container__base_1a918ae91156e92a8701da15fc61d05b63"/><section>
    <title>~_Safe_unordered_container_base()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>~_Safe_unordered_container_base</primary><secondary>__gnu_debug::_Safe_unordered_container_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_unordered_container_base</primary><secondary>~_Safe_unordered_container_base</secondary></indexterm>
<para><computeroutput>__gnu_debug::_Safe_unordered_container_base::~_Safe_unordered_container_base ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>Notify all iterators that reference this container that the container is being destroyed. </para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__unordered__container__base_1a9e65f903563508a84aff66abc81f0a5d"/><section>
    <title>_Safe_unordered_container_base()<computeroutput>[4/6]</computeroutput></title>
<indexterm><primary>_Safe_unordered_container_base</primary><secondary>__gnu_debug::_Safe_unordered_container_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_unordered_container_base</primary><secondary>_Safe_unordered_container_base</secondary></indexterm>
<para><computeroutput>__gnu_debug::_Safe_unordered_container_base::_Safe_unordered_container_base ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__unordered__container__base_1a6f7357bc3a3a6ef05fff5425d2416560"/><section>
    <title>_Safe_unordered_container_base()<computeroutput>[5/6]</computeroutput></title>
<indexterm><primary>_Safe_unordered_container_base</primary><secondary>__gnu_debug::_Safe_unordered_container_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_unordered_container_base</primary><secondary>_Safe_unordered_container_base</secondary></indexterm>
<para><computeroutput>__gnu_debug::_Safe_unordered_container_base::_Safe_unordered_container_base (const <link linkend="_class____gnu__debug_1_1___safe__unordered__container__base">_Safe_unordered_container_base</link> &amp; )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__unordered__container__base_1a4c64b0f6365a57a5acea89a074ca8510"/><section>
    <title>_Safe_unordered_container_base()<computeroutput>[6/6]</computeroutput></title>
<indexterm><primary>_Safe_unordered_container_base</primary><secondary>__gnu_debug::_Safe_unordered_container_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_unordered_container_base</primary><secondary>_Safe_unordered_container_base</secondary></indexterm>
<para><computeroutput>__gnu_debug::_Safe_unordered_container_base::_Safe_unordered_container_base (<link linkend="_class____gnu__debug_1_1___safe__unordered__container__base">_Safe_unordered_container_base</link> &amp;&amp; __x)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__unordered__container__base_1a918ae91156e92a8701da15fc61d05b63"/><section>
    <title>~_Safe_unordered_container_base()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>~_Safe_unordered_container_base</primary><secondary>__gnu_debug::_Safe_unordered_container_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_unordered_container_base</primary><secondary>~_Safe_unordered_container_base</secondary></indexterm>
<para><computeroutput>__gnu_debug::_Safe_unordered_container_base::~_Safe_unordered_container_base ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>Notify all iterators that reference this container that the container is being destroyed. </para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class____gnu__debug_1_1___safe__unordered__container__base_1aa7ec5c80048329d10fe2916fff73aeff"/><section>
    <title>_M_detach_all()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>_M_detach_all</primary><secondary>__gnu_debug::_Safe_unordered_container_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_unordered_container_base</primary><secondary>_M_detach_all</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_debug::_Safe_unordered_container_base::_M_detach_all ( )<computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Detach all iterators, leaving them singular. </para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__unordered__container__base_1aa7ec5c80048329d10fe2916fff73aeff"/><section>
    <title>_M_detach_all()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>_M_detach_all</primary><secondary>__gnu_debug::_Safe_unordered_container_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_unordered_container_base</primary><secondary>_M_detach_all</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_debug::_Safe_unordered_container_base::_M_detach_all ( )<computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Detach all iterators, leaving them singular. </para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__unordered__container__base_1a1ff909e73bfb6e9646caf6df99db2d70"/><section>
    <title>_M_swap()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>_M_swap</primary><secondary>__gnu_debug::_Safe_unordered_container_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_unordered_container_base</primary><secondary>_M_swap</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_debug::_Safe_unordered_container_base::_M_swap (<link linkend="_class____gnu__debug_1_1___safe__unordered__container__base">_Safe_unordered_container_base</link> &amp; __x)<computeroutput>[protected]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>Swap this container with the given container. This operation also swaps ownership of the iterators, so that when the operation is complete all iterators that originally referenced one container now reference the other container. </para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__unordered__container__base_1a1ff909e73bfb6e9646caf6df99db2d70"/><section>
    <title>_M_swap()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>_M_swap</primary><secondary>__gnu_debug::_Safe_unordered_container_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_unordered_container_base</primary><secondary>_M_swap</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_debug::_Safe_unordered_container_base::_M_swap (<link linkend="_class____gnu__debug_1_1___safe__unordered__container__base">_Safe_unordered_container_base</link> &amp; __x)<computeroutput>[protected]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>Swap this container with the given container. This operation also swaps ownership of the iterators, so that when the operation is complete all iterators that originally referenced one container now reference the other container. </para>
</section>
</section>
<section>
<title>Friends And Related Symbol Documentation</title>
<anchor xml:id="_class____gnu__debug_1_1___safe__unordered__container__base_1ab5707868d6dfd05a983e8b685cf18145"/><section>
    <title>_Safe_local_iterator_base</title>
<indexterm><primary>_Safe_local_iterator_base</primary><secondary>__gnu_debug::_Safe_unordered_container_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_unordered_container_base</primary><secondary>_Safe_local_iterator_base</secondary></indexterm>
<para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__local__iterator__base">_Safe_local_iterator_base</link><computeroutput>[friend]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class____gnu__debug_1_1___safe__unordered__container__base_1a728e08773218195fe7e6b5749dd67761"/><section>
    <title>_M_const_local_iterators</title>
<indexterm><primary>_M_const_local_iterators</primary><secondary>__gnu_debug::_Safe_unordered_container_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_unordered_container_base</primary><secondary>_M_const_local_iterators</secondary></indexterm>
<para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> * __gnu_debug::_Safe_unordered_container_base::_M_const_local_iterators</computeroutput></para><para>

<para>The list of constant local iterators that reference this container. </para>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__unordered__container__base_1ab0b248ca894d2694f9288b70466fe90b"/><section>
    <title>_M_local_iterators</title>
<indexterm><primary>_M_local_iterators</primary><secondary>__gnu_debug::_Safe_unordered_container_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_unordered_container_base</primary><secondary>_M_local_iterators</secondary></indexterm>
<para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> * __gnu_debug::_Safe_unordered_container_base::_M_local_iterators</computeroutput></para><para>

<para>The list of mutable local iterators that reference this container. </para>
</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/debug/<link linkend="_lib_2include_2c_09_09_2debug_2safe__unordered__base_8h">safe_unordered_base.h</link>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/debug/<link linkend="__old_2_classes_2lib_2include_2c_09_09_2debug_2safe__unordered__base_8h">safe_unordered_base.h</link></section>
</section>
