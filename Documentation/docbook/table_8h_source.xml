<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_table_8h_source" xml:lang="en-US">
<title>table.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/include/toml++/impl/table.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//#&#32;This&#32;file&#32;is&#32;a&#32;part&#32;of&#32;toml++&#32;and&#32;is&#32;subject&#32;to&#32;the&#32;the&#32;terms&#32;of&#32;the&#32;MIT&#32;license.</emphasis>
2 <emphasis role="comment">//#&#32;Copyright&#32;(c)&#32;Mark&#32;Gillard&#32;&lt;mark.gillard@outlook.com.au&gt;</emphasis>
3 <emphasis role="comment">//#&#32;See&#32;https://github.com/marzer/tomlplusplus/blob/master/LICENSE&#32;for&#32;the&#32;full&#32;license&#32;text.</emphasis>
4 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;MIT</emphasis>
5 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
6 
7 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_forward__declarations_8h">forward_declarations.h</link>&quot;</emphasis>
8 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_std__map_8h">std_map.h</link>&quot;</emphasis>
9 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_std__initializer__list_8h">std_initializer_list.h</link>&quot;</emphasis>
10 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_array_8h">array.h</link>&quot;</emphasis>
11 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_make__node_8h">make_node.h</link>&quot;</emphasis>
12 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_node__view_8h">node_view.h</link>&quot;</emphasis>
13 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_key_8h">key.h</link>&quot;</emphasis>
14 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_header__start_8h">header_start.h</link>&quot;</emphasis>
15 
17 <link linkend="_preprocessor_8h_1ac9e12bb017879603274ac1765b85b872">TOML_IMPL_NAMESPACE_START</link>
18 {
19 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">bool</emphasis>&#32;IsConst&gt;
20 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>table_proxy_pair
21 &#32;&#32;&#32;&#32;{
22 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;std::conditional_t&lt;IsConst,&#32;const&#32;node,&#32;node&gt;;
23 
24 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;toml::key&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>;
25 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type&amp;&#32;second;
26 &#32;&#32;&#32;&#32;};
27 
28 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">bool</emphasis>&#32;IsConst&gt;
29 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classtable__iterator">table_iterator</link>
30 &#32;&#32;&#32;&#32;{
31 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
32 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">bool</emphasis>&gt;
33 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classtable__iterator">table_iterator</link>;
34 
35 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>proxy_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;table_proxy_pair&lt;IsConst&gt;;
36 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>mutable_map_iterator&#32;=&#32;std::map&lt;toml::key,&#32;node_ptr,&#32;std::less&lt;&gt;&gt;::iterator;
37 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>const_map_iterator&#32;&#32;&#32;=&#32;std::map&lt;toml::key,&#32;node_ptr,&#32;std::less&lt;&gt;&gt;::const_iterator;
38 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>map_iterator&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::conditional_t&lt;IsConst,&#32;const_map_iterator,&#32;mutable_map_iterator&gt;;
39 
40 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;map_iterator&#32;iter_;
41 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">alignas</emphasis>(proxy_type)&#32;<emphasis role="keyword">mutable</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;proxy_[<emphasis role="keyword">sizeof</emphasis>(proxy_type)];
42 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;proxy_instantiated_&#32;=&#32;<emphasis role="keyword">false</emphasis>;
43 
44 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
45 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;proxy_type*&#32;get_proxy()&#32;const&#32;noexcept
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!proxy_instantiated_)
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;p&#32;=&#32;::new&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(proxy_))&#32;proxy_type{&#32;iter_-&gt;first,&#32;*iter_-&gt;second.get()&#32;};
50 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;proxy_instantiated_&#32;=&#32;<emphasis role="keyword">true</emphasis>;
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p;
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
53 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
54 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_toml_8hpp_1a50ef717d8403c782d1405902faca4b80">TOML_LAUNDER</link>(<emphasis role="keyword">reinterpret_cast&lt;</emphasis>proxy_type*<emphasis role="keyword">&gt;</emphasis>(proxy_));
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
56 
57 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable__iterator_1af7a5bcba154b06b7f9ce8ed4b08dc8d7">table_iterator</link>()&#32;noexcept&#32;=&#32;default;
60 
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;explicit&#32;<link linkend="_classtable__iterator">table_iterator</link>(mutable_map_iterator&#32;iter)&#32;noexcept&#32;<emphasis role="comment">//</emphasis>
63 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;iter_{&#32;iter&#32;}
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
65 
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a28441f3c429403e368267788c2e8a279">TOML_CONSTRAINED_TEMPLATE</link>(<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link>,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link>&#32;=&#32;IsConst)
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_classtable__iterator_1af7a5bcba154b06b7f9ce8ed4b08dc8d7">table_iterator</link>(const_map_iterator&#32;iter)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
69 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;iter_{&#32;iter&#32;}
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
71 
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a28441f3c429403e368267788c2e8a279">TOML_CONSTRAINED_TEMPLATE</link>(<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link>,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link>&#32;=&#32;IsConst)
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable__iterator_1af7a5bcba154b06b7f9ce8ed4b08dc8d7">table_iterator</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable__iterator">table_iterator&lt;false&gt;</link>&amp;&#32;other)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
75 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;iter_{&#32;other.iter_&#32;}
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
77 
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable__iterator_1af7a5bcba154b06b7f9ce8ed4b08dc8d7">table_iterator</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable__iterator">table_iterator</link>&amp;&#32;other)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;iter_{&#32;other.iter_&#32;}
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
82 
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable__iterator">table_iterator</link>&amp;&#32;<link linkend="_classtable__iterator_1a0e0044f4bcc398d1d134c9cce68c7176">operator=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable__iterator">table_iterator</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iter_&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;rhs.iter_;
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;proxy_instantiated_&#32;=&#32;<emphasis role="keyword">false</emphasis>;
87 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
89 
90 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classtable__iterator_1a13ef9869127c3631d01369bee0d17aa5">value_type</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;table_proxy_pair&lt;IsConst&gt;;
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classtable__iterator_1af2354635a7ee020e49582f75e8773bf0">reference</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="_classtable__iterator_1a13ef9869127c3631d01369bee0d17aa5">value_type</link>&amp;;
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="_classtable__iterator_1a13ef9869127c3631d01369bee0d17aa5">value_type</link>*;
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classtable__iterator_1aaed33aefda45393ff595e69092eb03af">difference_type</link>&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;map_iterator&gt;::difference_type;
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classtable__iterator_1a5c833f895e194135be3b4e65dc9be255">iterator_category</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;map_iterator&gt;::iterator_category;
95 
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable__iterator">table_iterator</link>&amp;&#32;<link linkend="_classtable__iterator_1a61846cb70a951ad5448894bbe46b1d20">operator++</link>()&#32;noexcept&#32;<emphasis role="comment">//&#32;++pre</emphasis>
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++iter_;
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;proxy_instantiated_&#32;=&#32;<emphasis role="keyword">false</emphasis>;
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
102 
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable__iterator">table_iterator</link>&#32;<link linkend="_classtable__iterator_1a61846cb70a951ad5448894bbe46b1d20">operator++</link>(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//&#32;post++</emphasis>
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable__iterator">table_iterator</link>&#32;out{&#32;iter_&#32;};
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++iter_;
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;proxy_instantiated_&#32;=&#32;<emphasis role="keyword">false</emphasis>;
108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;out;
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
110 
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable__iterator">table_iterator</link>&amp;&#32;<link linkend="_classtable__iterator_1a0ec9bb4ce770f71d5c1aa2db6aa6df09">operator--</link>()&#32;noexcept&#32;<emphasis role="comment">//&#32;--pre</emphasis>
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--iter_;
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;proxy_instantiated_&#32;=&#32;<emphasis role="keyword">false</emphasis>;
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
117 
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable__iterator">table_iterator</link>&#32;<link linkend="_classtable__iterator_1a0ec9bb4ce770f71d5c1aa2db6aa6df09">operator--</link>(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//&#32;post--</emphasis>
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable__iterator">table_iterator</link>&#32;out{&#32;iter_&#32;};
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--iter_;
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;proxy_instantiated_&#32;=&#32;<emphasis role="keyword">false</emphasis>;
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;out;
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
125 
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable__iterator_1af2354635a7ee020e49582f75e8773bf0">reference</link>&#32;<link linkend="_classtable__iterator_1af03e3cdfe0aff165d18bffc2c64b6888">operator*</link>()&#32;const&#32;noexcept
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*get_proxy();
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
131 
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;<link linkend="_classtable__iterator_1ac55eab1931a333c6511ffc2650945b87">operator-&gt;</link>()&#32;const&#32;noexcept
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_proxy();
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
137 
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;map_iterator&amp;()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iter_;
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
143 
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a28441f3c429403e368267788c2e8a279">TOML_CONSTRAINED_TEMPLATE</link>(!<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link>,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link>&#32;=&#32;IsConst)
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;const_map_iterator()&#32;const&#32;noexcept
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iter_;
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
150 
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable__iterator_1a8f2adae1b6df957d76858c396731b00c">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable__iterator">table_iterator</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable__iterator">table_iterator</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.iter_&#32;==&#32;rhs.iter_;
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
156 
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable__iterator_1aecd0f32a9d98b7c12b1428ff2350cb36">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable__iterator">table_iterator</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable__iterator">table_iterator</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.iter_&#32;!=&#32;rhs.iter_;
161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
162 &#32;&#32;&#32;&#32;};
163 
164 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structtable__init__pair">table_init_pair</link>
165 &#32;&#32;&#32;&#32;{
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;toml::key&#32;<link linkend="_structtable__init__pair_1afd6800bc5a42d481ec900f722c80eba1">key</link>;
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;node_ptr&#32;<link linkend="_structtable__init__pair_1a8f74a66816fdf3cda8e2897a9b9f334b">value</link>;
168 
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;K,&#32;<emphasis role="keyword">typename</emphasis>&#32;V&gt;
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structtable__init__pair">table_init_pair</link>(K&amp;&amp;&#32;k,&#32;V&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>,&#32;<link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;=&#32;<link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)&#32;<emphasis role="comment">//</emphasis>
172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_structtable__init__pair_1afd6800bc5a42d481ec900f722c80eba1">key</link>{&#32;static_cast&lt;K&amp;&amp;&gt;(k)&#32;},
173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>{&#32;<link linkend="_toml_8hpp_1a42b4a4b2210e5fb851ab38730940293c">make_node</link>(static_cast&lt;V&amp;&amp;&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>)&#32;}
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
175 &#32;&#32;&#32;&#32;};
176 }
177 <link linkend="_preprocessor_8h_1abec69dd25f1e4c1dfbdd288441864939">TOML_IMPL_NAMESPACE_END</link>;
179 
180 <link linkend="_table_8h_1a24e5c42f7e94b0b0f3212744874731e6">TOML_NAMESPACE_START</link>
181 {
183 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classtable__iterator">table_iterator</link>&#32;=&#32;<link linkend="_preprocessor_8h_1a1234ac91a810b3bd926ed6721ad1e44a">POXY_IMPLEMENTATION_DETAIL</link>(impl::table_iterator&lt;false&gt;);
184 
186 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_table_8h_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link>&#32;=&#32;<link linkend="_preprocessor_8h_1a1234ac91a810b3bd926ed6721ad1e44a">POXY_IMPLEMENTATION_DETAIL</link>(impl::table_iterator&lt;true&gt;);
187 
219 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_group__configuration_1ga3d7aebf91431575688d573f09a17559a">TOML_EXPORTED_CLASS</link>&#32;<link linkend="_classtable">table</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;node
220 &#32;&#32;&#32;&#32;{
221 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
223 
224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>map_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::map&lt;toml::key,&#32;impl::node_ptr,&#32;std::less&lt;&gt;&gt;;
225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>map_pair&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::pair&lt;const&#32;toml::key,&#32;impl::node_ptr&gt;;
226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>map_iterator&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;map_type::iterator;
227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>const_map_iterator&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;map_type::const_iterator;
228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map_type&#32;map_;
229 
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;inline_&#32;=&#32;<emphasis role="keyword">false</emphasis>;
231 
232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>(<emphasis role="keyword">const</emphasis>&#32;impl::table_init_pair*,&#32;<emphasis role="keyword">const</emphasis>&#32;impl::table_init_pair*);
235 
237 
238 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1a1de2fb31555f46715dcf27ddcf6da44d">table</link>()&#32;noexcept;
243 
244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~<link linkend="_classtable">table</link>()&#32;noexcept;
246 
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>(const&#32;<link linkend="_classtable">table</link>&amp;);
251 
253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>(<link linkend="_classtable">table</link>&amp;&amp;&#32;other)&#32;noexcept;
256 
273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;explicit&#32;<link linkend="_classtable">table</link>(<link linkend="_namespacestd">std</link>::initializer_list&lt;impl::<link linkend="_structtable__init__pair">table_init_pair</link>&gt;&#32;kvps)&#32;<emphasis role="comment">//</emphasis>
276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classtable">table</link>(kvps.begin(),&#32;kvps.<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>())
277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
278 
280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>&amp;&#32;<link linkend="_classtable_1a6f963a302ec0f592701775c95c1df1e3">operator=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable">table</link>&amp;);
282 
284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>&amp;&#32;<link linkend="_classtable_1a5e61dff4b1846fcddcba33e07b795a71">operator=</link>(<link linkend="_classtable">table</link>&amp;&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>;
286 
289 
291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node_type&#32;<link linkend="_classtable_1a54c936c3aac096be1dcad45036ee6a9f">type</link>()&#32;const&#32;noexcept&#32;final
293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_type::table;
295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
296 
297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1a6cbade52106ece3ab27feda3f4d58110">is_homogeneous</link>(node_type&#32;ntype)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>;
300 
301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1a03a22b6b4ecd0043d8a684844741b5a6">is_homogeneous</link>(node_type&#32;ntype,&#32;node*&amp;&#32;first_nonmatch)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>;
304 
305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1ad24e8cb001d0c6d429caa048314fb213">is_homogeneous</link>(node_type&#32;ntype,&#32;<emphasis role="keyword">const</emphasis>&#32;node*&amp;&#32;first_nonmatch)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>;
308 
310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ElemType&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_homogeneous()&#32;const&#32;noexcept
313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;impl::remove_cvref&lt;impl::unwrap_node&lt;ElemType&gt;&gt;;
315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_void_v&lt;type&gt;&#32;||&#32;toml::is_value&lt;type&gt;&#32;||&#32;toml::is_container&lt;type&gt;,
316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;The&#32;template&#32;type&#32;argument&#32;of&#32;table::is_homogeneous()&#32;must&#32;be&#32;void&#32;or&#32;one&#32;&quot;</emphasis>
317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;of:&quot;</emphasis>&#32;<link linkend="_toml_8hpp_1a1de380e050f331193398fe626294c548">TOML_SA_UNWRAPPED_NODE_TYPE_LIST</link>);
318 
319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_homogeneous(impl::node_type_of&lt;type&gt;);
320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
322 
324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1a7a29b434ebc03ec99db52ae98668d5db">is_table</link>()&#32;const&#32;noexcept&#32;final
326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
329 
331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1a546d35293ab8c3e3850e3a712862480f">is_array</link>()&#32;const&#32;noexcept&#32;final
333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
336 
338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1ad492ac1e45805952a3c8924583cc296e">is_array_of_tables</link>()&#32;const&#32;noexcept&#32;final
340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
343 
345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1a7dd10d152666712ede4001059b5a6ed2">is_value</link>()&#32;const&#32;noexcept&#32;final
347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
350 
352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1a16e1591a845aa7db95df37f8c35cb23c">is_string</link>()&#32;const&#32;noexcept&#32;final
354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
357 
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1ad6e253695f391c0e6edf928d77fa766d">is_integer</link>()&#32;const&#32;noexcept&#32;final
361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
364 
366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1a951c432ffd2b0cbc06518e7897089c57">is_floating_point</link>()&#32;const&#32;noexcept&#32;final
368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
371 
373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1a1dc76e80008b5ed5aa70a66fa3626882">is_number</link>()&#32;const&#32;noexcept&#32;final
375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
378 
380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1a838d74631b4bfe28746757d3fb239d50">is_boolean</link>()&#32;const&#32;noexcept&#32;final
382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
385 
387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1a9d29b05c9c0625574d78581376fc361f">is_date</link>()&#32;const&#32;noexcept&#32;final
389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
392 
394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1ae7b07d54ee3ad3f4a245c26898700272">is_time</link>()&#32;const&#32;noexcept&#32;final
396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
399 
401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1a07b42c6116440db38c8b518a6c685802">is_date_time</link>()&#32;const&#32;noexcept&#32;final
403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
406 
408 
411 
413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>*&#32;<link linkend="_classtable_1a6e49884f9b927770890cb9fe6df61a42">as_table</link>()&#32;noexcept&#32;final
415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">this</emphasis>;
417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
418 
420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>*&#32;<link linkend="_classtable_1a55c771fd945281328d96f978c0255059">as_array</link>()&#32;noexcept&#32;final
422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
425 
427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::value&lt;std::string&gt;*&#32;<link linkend="_classtable_1ae90f248325e54bd99bb3a392b2751cb3">as_string</link>()&#32;noexcept&#32;final
429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
432 
434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::value&lt;int64_t&gt;*&#32;<link linkend="_classtable_1a8e4f6aed5156d9d6734f42c4bcb7b97f">as_integer</link>()&#32;noexcept&#32;final
436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
439 
441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::value&lt;double&gt;*&#32;<link linkend="_classtable_1ac549da31899da9d559671d50d1f3f662">as_floating_point</link>()&#32;noexcept&#32;final
443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
446 
448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::value&lt;bool&gt;*&#32;<link linkend="_classtable_1a37afbd90ebbad8a41342167399be6a2d">as_boolean</link>()&#32;noexcept&#32;final
450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
453 
455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::value&lt;date&gt;*&#32;<link linkend="_classtable_1aa5996cf56e0d9a88ab21d804a41f4c54">as_date</link>()&#32;noexcept&#32;final
457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
460 
462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::value&lt;time&gt;*&#32;<link linkend="_classtable_1a70eeba3cc6b24d1d6f73c9448ce396dc">as_time</link>()&#32;noexcept&#32;final
464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
467 
469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::value&lt;date_time&gt;*&#32;<link linkend="_classtable_1acb002459139377f756dd6ffb0652196d">as_date_time</link>()&#32;noexcept&#32;final
471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
474 
476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable">table</link>*&#32;<link linkend="_classtable_1a7f9da7358d04e7e6957ac5ee52529490">as_table</link>()&#32;const&#32;noexcept&#32;final
478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">this</emphasis>;
480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
481 
483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>*&#32;<link linkend="_classtable_1aacd0141b8604d4b03f05c36d2be2f7b3">as_array</link>()&#32;const&#32;noexcept&#32;final
485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
488 
490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;toml::value&lt;std::string&gt;*&#32;<link linkend="_classtable_1a1aa73148a1da6849216129531b6c9a80">as_string</link>()&#32;const&#32;noexcept&#32;final
492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
495 
497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;toml::value&lt;int64_t&gt;*&#32;<link linkend="_classtable_1a3afb4e824a39626582bf2b32775e112a">as_integer</link>()&#32;const&#32;noexcept&#32;final
499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
502 
504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;toml::value&lt;double&gt;*&#32;<link linkend="_classtable_1a32760109122058741e1136a660e57d94">as_floating_point</link>()&#32;const&#32;noexcept&#32;final
506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
509 
511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;toml::value&lt;bool&gt;*&#32;<link linkend="_classtable_1ad7bf9703dc4a476bc944e6e0b15a0f8d">as_boolean</link>()&#32;const&#32;noexcept&#32;final
513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
516 
518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;toml::value&lt;date&gt;*&#32;<link linkend="_classtable_1abebee4e6091e103e08421d6e500f88d8">as_date</link>()&#32;const&#32;noexcept&#32;final
520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
523 
525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;toml::value&lt;time&gt;*&#32;<link linkend="_classtable_1a40de88e69cd2f6001f66c2afb96b3390">as_time</link>()&#32;const&#32;noexcept&#32;final
527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
530 
532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;toml::value&lt;date_time&gt;*&#32;<link linkend="_classtable_1a785a4773f198d352e60ae4c0706abd7d">as_date_time</link>()&#32;const&#32;noexcept&#32;final
534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
537 
539 
542 
547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1aaaf20b46eede72428dea24b4f4ac85c8">is_inline</link>()&#32;const&#32;noexcept
549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;inline_;
551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
552 
591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classtable_1adb65ea92406d15cf1da9ca32d28aaf21">is_inline</link>(<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inline_&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>;
594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
595 
597 
600 
625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node*&#32;<link linkend="_classtable_1a3a338dc69074b9f155ca52f044ef0b07">get</link>(std::string_view&#32;key)&#32;<emphasis role="keyword">noexcept</emphasis>;
628 
634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;node*&#32;<link linkend="_classtable_1a1913a2d35dd5d582d729a1aa86154a4c">get</link>(std::string_view&#32;key)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">const_cast&lt;</emphasis><link linkend="_classtable">table</link>&amp;<emphasis role="keyword">&gt;</emphasis>(*this).<link linkend="_classtable_1a3a338dc69074b9f155ca52f044ef0b07">get</link>(key);
638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
639 
640 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
641 
649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node*&#32;<link linkend="_classtable_1a07ba99c53892d8ff5c8f40f5f610007c">get</link>(std::wstring_view&#32;key)
651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(empty())
653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
654 
655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(impl::narrow(key));
656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
657 
665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;node*&#32;<link linkend="_classtable_1ae6f170554dad25ab10746ed9f8ff1da2">get</link>(std::wstring_view&#32;key)<emphasis role="keyword">&#32;const</emphasis>
667 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">const_cast&lt;</emphasis><link linkend="_classtable">table</link>&amp;<emphasis role="keyword">&gt;</emphasis>(*this).<link linkend="_classtable_1a3a338dc69074b9f155ca52f044ef0b07">get</link>(key);
669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
670 
671 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
672 
692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::wrap_node&lt;T&gt;*&#32;<link linkend="_classtable_1a606d8e1e91ed8cfa1225bd607cf31918">get_as</link>(std::string_view&#32;key)&#32;<emphasis role="keyword">noexcept</emphasis>
695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;n&#32;=&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(key);
697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;n&#32;?&#32;n-&gt;template&#32;as&lt;T&gt;()&#32;:&#32;<emphasis role="keyword">nullptr</emphasis>;
698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
699 
706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;impl::wrap_node&lt;T&gt;*&#32;<link linkend="_classtable_1aad66df14406c1ae0df702317375aeb84">get_as</link>(std::string_view&#32;key)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">const_cast&lt;</emphasis><link linkend="_classtable">table</link>&amp;<emphasis role="keyword">&gt;</emphasis>(*this).template&#32;get_as&lt;T&gt;(key);
711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
712 
713 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
714 
723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::wrap_node&lt;T&gt;*&#32;<link linkend="_classtable_1a24969f8c97df9c7f51b8ce717a6e845e">get_as</link>(std::wstring_view&#32;key)
726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(empty())
728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
729 
730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_as&lt;T&gt;(impl::narrow(key));
731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
732 
741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;impl::wrap_node&lt;T&gt;*&#32;<link linkend="_classtable_1a0628ea2d76b5ef4cc9183d8f7da2b24c">get_as</link>(std::wstring_view&#32;key)<emphasis role="keyword">&#32;const</emphasis>
744 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">const_cast&lt;</emphasis><link linkend="_classtable">table</link>&amp;<emphasis role="keyword">&gt;</emphasis>(*this).template&#32;get_as&lt;T&gt;(key);
746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
747 
748 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
749 
751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node&amp;&#32;<link linkend="_classtable_1a0a56f283072073b872d15bb91889ede5">at</link>(std::string_view&#32;key);
754 
756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;node&amp;&#32;<link linkend="_classtable_1a09b1e615db5197302db7fdf356e1886f">at</link>(std::string_view&#32;key)<emphasis role="keyword">&#32;const</emphasis>
758 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">const_cast&lt;</emphasis><link linkend="_classtable">table</link>&amp;<emphasis role="keyword">&gt;</emphasis>(*this).<link linkend="_classtable_1a0a56f283072073b872d15bb91889ede5">at</link>(key);
760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
761 
762 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
763 
767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node&amp;&#32;<link linkend="_classtable_1af7865f3207b8161131870c4d87de2356">at</link>(std::wstring_view&#32;key)
769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;at(impl::narrow(key));
771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
772 
776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;node&amp;&#32;<link linkend="_classtable_1a5aacf43d27317360b9ac8fb920adf2d5">at</link>(std::wstring_view&#32;key)<emphasis role="keyword">&#32;const</emphasis>
778 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">const_cast&lt;</emphasis><link linkend="_classtable">table</link>&amp;<emphasis role="keyword">&gt;</emphasis>(*this).<link linkend="_classtable_1a0a56f283072073b872d15bb91889ede5">at</link>(key);
780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
781 
782 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
783 
785 
788 
790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>&#32;=&#32;toml::table_iterator;
791 
793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>&#32;=&#32;toml::const_table_iterator;
794 
796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>&#32;<link linkend="_classtable_1a798d2a3a47e33f5c7ea6e4a9557b3e7b">begin</link>()&#32;noexcept
798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>{&#32;map_.begin()&#32;};
800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
801 
803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>&#32;<link linkend="_classtable_1a0035089c5cba9e55533f8d071cc92aa8">begin</link>()&#32;const&#32;noexcept
805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>{&#32;map_.cbegin()&#32;};
807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
808 
810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>&#32;<link linkend="_classtable_1a99538d11dcdbaa6693aa17002aa40967">cbegin</link>()&#32;const&#32;noexcept
812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>{&#32;map_.cbegin()&#32;};
814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
815 
817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>&#32;<link linkend="_classtable_1aa3e78417a257af444322025c99059e2f">end</link>()&#32;noexcept
819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>{&#32;map_.end()&#32;};
821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
822 
824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>&#32;<link linkend="_classtable_1a76522d05d61fe5a153513aea06720743">end</link>()&#32;const&#32;noexcept
826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>{&#32;map_.cend()&#32;};
828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
829 
831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>&#32;<link linkend="_classtable_1ae222f3b89576ab6cfb0204fc99ff1519">cend</link>()&#32;const&#32;noexcept
833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>{&#32;map_.cend()&#32;};
835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
836 
837 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
839 
840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;Table&gt;
841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>for_each_value_ref&#32;=&#32;impl::copy_cvref&lt;impl::wrap_node&lt;impl::remove_cvref&lt;impl::unwrap_node&lt;T&gt;&gt;&gt;,&#32;Table&gt;;
842 
843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;Table,&#32;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;can_for_each&#32;=&#32;std::is_invocable_v&lt;Func,&#32;const&#32;key&amp;,&#32;for_each_value_ref&lt;T,&#32;Table&gt;&gt;&#32;<emphasis role="comment">//</emphasis>
845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;std::is_invocable_v&lt;Func,&#32;for_each_value_ref&lt;T,&#32;Table&gt;&gt;;
846 
847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;Table,&#32;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;can_for_each_nothrow&#32;=
849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_nothrow_invocable_v&lt;Func,&#32;const&#32;key&amp;,&#32;for_each_value_ref&lt;T,&#32;Table&gt;&gt;&#32;<emphasis role="comment">//</emphasis>
850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;std::is_nothrow_invocable_v&lt;Func,&#32;for_each_value_ref&lt;T,&#32;Table&gt;&gt;;
851 
852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;Table&gt;
853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;can_for_each_any&#32;=&#32;can_for_each&lt;Func,&#32;Table,&#32;table&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_for_each&lt;Func,&#32;Table,&#32;array&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_for_each&lt;Func,&#32;Table,&#32;std::string&gt;&#32;<emphasis role="comment">//</emphasis>
856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_for_each&lt;Func,&#32;Table,&#32;int64_t&gt;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_for_each&lt;Func,&#32;Table,&#32;double&gt;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_for_each&lt;Func,&#32;Table,&#32;bool&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_for_each&lt;Func,&#32;Table,&#32;date&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_for_each&lt;Func,&#32;Table,&#32;time&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_for_each&lt;Func,&#32;Table,&#32;date_time&gt;;
862 
863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;Table,&#32;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;for_each_is_nothrow_one&#32;=&#32;!can_for_each&lt;Func,&#32;Table,&#32;T&gt;&#32;<emphasis role="comment">//</emphasis>
865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_for_each_nothrow&lt;Func,&#32;Table,&#32;T&gt;;
866 
867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;off</emphasis>
868 
869 
870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;Table&gt;
871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;for_each_is_nothrow&#32;=&#32;for_each_is_nothrow_one&lt;Func,&#32;Table,&#32;table&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;for_each_is_nothrow_one&lt;Func,&#32;Table,&#32;array&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;for_each_is_nothrow_one&lt;Func,&#32;Table,&#32;std::string&gt;&#32;<emphasis role="comment">//</emphasis>
874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;for_each_is_nothrow_one&lt;Func,&#32;Table,&#32;int64_t&gt;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;for_each_is_nothrow_one&lt;Func,&#32;Table,&#32;double&gt;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;for_each_is_nothrow_one&lt;Func,&#32;Table,&#32;bool&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;for_each_is_nothrow_one&lt;Func,&#32;Table,&#32;date&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;for_each_is_nothrow_one&lt;Func,&#32;Table,&#32;time&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;for_each_is_nothrow_one&lt;Func,&#32;Table,&#32;date_time&gt;;
880 
881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;on</emphasis>
882 
883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;Table&gt;
884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;do_for_each(Func&amp;&amp;&#32;visitor,&#32;Table&amp;&amp;&#32;tbl)&#32;<emphasis role="keyword">noexcept</emphasis>(for_each_is_nothrow&lt;Func&amp;&amp;,&#32;Table&amp;&amp;&gt;)
885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(can_for_each_any&lt;Func&amp;&amp;,&#32;Table&amp;&amp;&gt;,
887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;TOML&#32;table&#32;for_each&#32;visitors&#32;must&#32;be&#32;invocable&#32;for&#32;at&#32;least&#32;one&#32;of&#32;the&#32;toml::node&#32;&quot;</emphasis>
888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;specializations:&quot;</emphasis>&#32;<link linkend="_toml_8hpp_1a28ad2f9bb777d4b3cb545bdc94b55b63">TOML_SA_NODE_TYPE_LIST</link>);
889 
890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>kvp_type&#32;=&#32;impl::copy_cv&lt;map_pair,&#32;std::remove_reference_t&lt;Table&gt;&gt;;
891 
892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(kvp_type&amp;&#32;kvp&#32;:&#32;tbl.map_)
893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>node_ref&#32;=&#32;impl::copy_cvref&lt;toml::node,&#32;Table&amp;&amp;&gt;;
895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_reference_v&lt;node_ref&gt;);
896 
897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;keep_going&#32;=
898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>node_ref<emphasis role="keyword">&gt;</emphasis>(*kvp.second)
899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.visit(
900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)
901 <emphasis role="preprocessor">#if&#32;!TOML_MSVC&#32;</emphasis><emphasis role="comment">//&#32;MSVC&#32;thinks&#32;this&#32;is&#32;invalid&#32;syntax&#32;O_o</emphasis>
902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(for_each_is_nothrow_one&lt;Func&amp;&amp;,&#32;Table&amp;&amp;,&#32;<emphasis role="keyword">decltype</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)&gt;)
903 <emphasis role="preprocessor">#endif</emphasis>
904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_ref&#32;=&#32;for_each_value_ref&lt;<emphasis role="keyword">decltype</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>),&#32;Table&amp;&amp;&gt;;
906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_reference_v&lt;value_ref&gt;);
907 
908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;func(key,&#32;val)</emphasis>
909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_invocable_v&lt;Func&amp;&amp;,&#32;const&#32;key&amp;,&#32;value_ref&gt;)
910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>return_type&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(
912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;visitor)(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>key&amp;<emphasis role="keyword">&gt;</emphasis>(kvp.first),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>value_ref<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)));
913 
914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(impl::is_constructible_or_convertible&lt;bool,&#32;return_type&gt;)
915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">bool</emphasis><emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(
917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;visitor)(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>key&amp;<emphasis role="keyword">&gt;</emphasis>(kvp.first),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>value_ref<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)));
918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor)(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>key&amp;<emphasis role="keyword">&gt;</emphasis>(kvp.first),
922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>value_ref<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>));
923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
926 
927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;func(val)</emphasis>
928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_invocable_v&lt;Func&amp;&amp;,&#32;value_ref&gt;)
929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>return_type&#32;=
931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor)(<emphasis role="keyword">static_cast&lt;</emphasis>value_ref<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)));
932 
933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(impl::is_constructible_or_convertible&lt;bool,&#32;return_type&gt;)
934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">bool</emphasis><emphasis role="keyword">&gt;</emphasis>(
936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor)(<emphasis role="keyword">static_cast&lt;</emphasis>value_ref<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)));
937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor)(<emphasis role="keyword">static_cast&lt;</emphasis>value_ref<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>));
941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
944 
945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;visitor&#32;not&#32;compatible&#32;with&#32;this&#32;particular&#32;type</emphasis>
946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
949 
950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!keep_going)
951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
954 
956 
957 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func&gt;
1040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>&amp;&#32;<link linkend="_classtable_1a694a4f3fd69ba434774c9dde8ffee961">for_each</link>(Func&amp;&amp;&#32;visitor)&#32;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>(for_each_is_nothrow&lt;Func&amp;&amp;,&#32;table&amp;&gt;)
1041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;do_for_each(<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor),&#32;*<emphasis role="keyword">this</emphasis>);
1043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1045 
1047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func&gt;
1048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>&amp;&amp;&#32;<link linkend="_classtable_1a0b976de00e50fa9b297e08fca9951eec">for_each</link>(Func&amp;&amp;&#32;visitor)&#32;&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>(for_each_is_nothrow&lt;Func&amp;&amp;,&#32;table&amp;&amp;&gt;)
1049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;do_for_each(<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classtable">table</link>&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(*<emphasis role="keyword">this</emphasis>));
1051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classtable">table</link>&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(*this);
1052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1053 
1055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func&gt;
1056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable">table</link>&amp;&#32;<link linkend="_classtable_1a3741d808d6f5cb0a221a31caeaa24d9c">for_each</link>(Func&amp;&amp;&#32;visitor)&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<emphasis role="keyword">noexcept</emphasis>(for_each_is_nothrow&lt;Func&amp;&amp;,&#32;const&#32;table&amp;&gt;)
1057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;do_for_each(<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor),&#32;*<emphasis role="keyword">this</emphasis>);
1059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1061 
1063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func&gt;
1064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable">table</link>&amp;&amp;&#32;<link linkend="_classtable_1ad390a6f105a2d472951f8ec0097b69a1">for_each</link>(Func&amp;&amp;&#32;visitor)&#32;<emphasis role="keyword">const</emphasis>&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>(for_each_is_nothrow&lt;Func&amp;&amp;,&#32;const&#32;table&amp;&amp;&gt;)
1065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;do_for_each(<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classtable">table</link>&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(*<emphasis role="keyword">this</emphasis>));
1067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classtable">table</link>&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(*this);
1068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1069 
1071 
1074 
1076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
1077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1a406c059cce67faebb6aa0815624b6231">empty</link>()&#32;const&#32;noexcept
1078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;map_.empty();
1080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1081 
1083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
1084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classtable_1affa7520e779cbbfc21bbdc31c4f8f7ce">size</link>()&#32;const&#32;noexcept
1085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;map_.size();
1087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1088 
1090 
1093 
1094 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1096 
1097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
1098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
1099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map_iterator&#32;get_lower_bound(std::string_view)&#32;<emphasis role="keyword">noexcept</emphasis>;
1100 
1102 
1103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
1108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>&#32;<link linkend="_classtable_1ac88a3ddbef7f2522fc3626a03077b238">lower_bound</link>(std::string_view&#32;key)&#32;<emphasis role="keyword">noexcept</emphasis>
1109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>{&#32;get_lower_bound(key)&#32;};
1111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1112 
1116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
1117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>&#32;<link linkend="_classtable_1a6bb5569bc3e0624ad8995de1aae9eb0b">lower_bound</link>(std::string_view&#32;key)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>{&#32;<emphasis role="keyword">const_cast&lt;</emphasis><link linkend="_classtable">table</link>&amp;<emphasis role="keyword">&gt;</emphasis>(*this).get_lower_bound(key)&#32;};
1120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1121 
1122 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
1123 
1129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
1130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>&#32;<link linkend="_classtable_1acd612d7c5033990aa615969a74653564">lower_bound</link>(std::wstring_view&#32;key)
1131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(empty())
1133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();
1134 
1135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lower_bound(impl::narrow(key));
1136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1137 
1143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
1144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>&#32;<link linkend="_classtable_1a9031bb5020d778f0ef0172c81013fccd">lower_bound</link>(std::wstring_view&#32;key)<emphasis role="keyword">&#32;const</emphasis>
1145 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
1146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(empty())
1147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();
1148 
1149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lower_bound(impl::narrow(key));
1150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1151 
1152 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
1153 
1159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
1160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
1161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>&#32;<link linkend="_classtable_1a87d7ec24b1659977c450a25d39e0c2e8">find</link>(std::string_view&#32;key)&#32;<emphasis role="keyword">noexcept</emphasis>;
1162 
1168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
1169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
1170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>&#32;<link linkend="_classtable_1a8607e0b0c1ba7d8e0e8cb3b3b537feae">find</link>(std::string_view&#32;key)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>;
1171 
1173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
1174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1a466a42305799b16b19f3cfcf9f8dd8ac">contains</link>(std::string_view&#32;key)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(key)&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>;
1177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1178 
1179 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
1180 
1188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
1189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>&#32;<link linkend="_classtable_1a8d9909692b29d2cefa14678963863a6c">find</link>(std::wstring_view&#32;key)
1190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(empty())
1192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();
1193 
1194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(impl::narrow(key));
1195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1196 
1204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
1205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>&#32;<link linkend="_classtable_1abf937747a21ac02a5807101d958765f1">find</link>(std::wstring_view&#32;key)<emphasis role="keyword">&#32;const</emphasis>
1206 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
1207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(impl::narrow(key));
1208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1209 
1213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
1214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1a1cb95913bdd13b5c63c1dd2637d75873">contains</link>(std::wstring_view&#32;key)<emphasis role="keyword">&#32;const</emphasis>
1215 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
1216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;contains(impl::narrow(key));
1217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1218 
1219 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
1220 
1222 
1225 
1226 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1228 
1229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
1230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map_iterator&#32;erase(const_map_iterator)&#32;<emphasis role="keyword">noexcept</emphasis>;
1231 
1232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
1233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map_iterator&#32;erase(const_map_iterator,&#32;const_map_iterator)&#32;<emphasis role="keyword">noexcept</emphasis>;
1234 
1236 
1237 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>&#32;<link linkend="_classtable_1afc8a374f825376cd8dd55b843f0db2de">erase</link>(<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>&#32;pos)&#32;<emphasis role="keyword">noexcept</emphasis>
1261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>{&#32;erase(const_map_iterator{&#32;pos&#32;})&#32;};
1263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1264 
1287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>&#32;<link linkend="_classtable_1a24fd0bfb38c97989cddf90ab2e79a4dd">erase</link>(<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>&#32;pos)&#32;<emphasis role="keyword">noexcept</emphasis>
1288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>{&#32;erase(const_map_iterator{&#32;pos&#32;})&#32;};
1290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1291 
1316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>&#32;<link linkend="_classtable_1a564d7164aac6483181560ff43333d016">erase</link>(<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>&#32;begin,&#32;<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
1317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>{&#32;erase(const_map_iterator{&#32;begin&#32;},&#32;const_map_iterator{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>&#32;})&#32;};
1319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1320 
1346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
1347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classtable_1a602f8e3a30eacd78ad413c2a3cefa952">erase</link>(std::string_view&#32;key)&#32;<emphasis role="keyword">noexcept</emphasis>;
1348 
1349 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
1350 
1358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classtable_1a38590f5596b90b5858ba95abdc9068ce">erase</link>(std::wstring_view&#32;key)
1359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(empty())
1361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1362 
1363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;erase(impl::narrow(key));
1364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1365 
1366 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
1367 
1387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
1388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>&amp;&#32;<link linkend="_classtable_1a03364a6c3763fac7c731183ae810a319">prune</link>(<emphasis role="keywordtype">bool</emphasis>&#32;recursive&#32;=&#32;<emphasis role="keyword">true</emphasis>)&#32;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>;
1389 
1395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>&amp;&amp;&#32;<link linkend="_classtable_1a9471ac8762fdfeb8a9bbac48cb0dcc37">prune</link>(<emphasis role="keywordtype">bool</emphasis>&#32;recursive&#32;=&#32;<emphasis role="keyword">true</emphasis>)&#32;&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
1396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>toml::table&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(this-&gt;prune(recursive));
1398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1399 
1401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
1402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classtable_1a6248c10022c6cd670f045cda74cb1cbe">clear</link>()&#32;noexcept;
1403 
1405 
1408 
1409 &#32;&#32;&#32;&#32;&#32;&#32;private:
1411 
1412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
1413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map_iterator&#32;insert_with_hint(<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>,&#32;key&amp;&amp;,&#32;impl::node_ptr&amp;&amp;);
1414 
1416 
1417 &#32;&#32;&#32;&#32;&#32;&#32;public:
1430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a28441f3c429403e368267788c2e8a279">TOML_CONSTRAINED_TEMPLATE</link>((<link linkend="_key_8h_1af308fcd567483bdd7db051dff62e9fcb">is_key_or_convertible</link>&lt;KeyType&amp;&amp;&gt;&#32;||&#32;impl::<link linkend="_toml_8hpp_1af586d464952e4eac442a23643c69618d">is_wide_string</link>&lt;KeyType&gt;),
1431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;ValueType&#32;=&#32;<emphasis role="keywordtype">void</emphasis>,
1432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;KeyType,
1433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename...&#32;ValueArgs)
1434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>&#32;emplace_hint(<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>&#32;hint,&#32;KeyType&amp;&amp;&#32;key,&#32;ValueArgs&amp;&amp;...&#32;args)
1435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!impl::is_wide_string&lt;KeyType&gt;&#32;||&#32;<link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link>,
1437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Emplacement&#32;using&#32;wide-character&#32;keys&#32;is&#32;only&#32;supported&#32;on&#32;Windows&#32;with&#32;&quot;</emphasis>
1438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;TOML_ENABLE_WINDOWS_COMPAT&#32;enabled.&quot;</emphasis>);
1439 
1440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classtable_1a6837fcea2eb10704f988624b7a73f3ee">raw_value_type</link>&#32;=&#32;impl::remove_cvref&lt;ValueType&gt;;
1441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classtable_1af8f0e6773b97cc2093d44fc0be051995">value_type</link>&#32;&#32;&#32;&#32;&#32;=&#32;std::
1442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;conditional_t&lt;std::is_void_v&lt;raw_value_type&gt;,&#32;impl::emplaced_type_of&lt;ValueArgs&amp;&amp;...&gt;,&#32;<link linkend="_classtable_1a6837fcea2eb10704f988624b7a73f3ee">raw_value_type</link>&gt;;
1443 
1444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(impl::is_wide_string&lt;KeyType&gt;)
1445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1446 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
1447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;emplace_hint&lt;value_type&gt;(hint,
1448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::narrow(<emphasis role="keyword">static_cast&lt;</emphasis>KeyType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(key)),
1449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>ValueArgs&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(args)...);
1450 <emphasis role="preprocessor">#else</emphasis>
1451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(impl::dependent_false&lt;KeyType&gt;,&#32;<emphasis role="stringliteral">&quot;Evaluated&#32;unreachable&#32;branch!&quot;</emphasis>);
1452 <emphasis role="preprocessor">#endif</emphasis>
1453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;moving_node_ptr&#32;=&#32;std::is_same_v&lt;value_type,&#32;impl::node_ptr&gt;&#32;<emphasis role="comment">//</emphasis>
1457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>...(ValueArgs)&#32;==&#32;1u&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
1458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;impl::first_is_same&lt;impl::node_ptr&amp;&amp;,&#32;ValueArgs&amp;&amp;...&gt;;
1459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classtable_1aa4e13665570823f0343c59dc161baa95">unwrapped_type</link>&#32;=&#32;impl::remove_cvref&lt;impl::unwrap_node&lt;value_type&gt;&gt;;
1460 
1461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(moving_node_ptr&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
1462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;impl::is_native&lt;unwrapped_type&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
1463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;impl::is_one_of&lt;unwrapped_type,&#32;table,&#32;array&gt;,&#32;<emphasis role="comment">//</emphasis>
1464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;ValueType&#32;argument&#32;of&#32;table::emplace_hint()&#32;must&#32;be&#32;one&#32;&quot;</emphasis>
1465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;of:&quot;</emphasis>&#32;<link linkend="_toml_8hpp_1a1de380e050f331193398fe626294c548">TOML_SA_UNWRAPPED_NODE_TYPE_LIST</link>);
1466 
1467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map_iterator&#32;ipos&#32;=&#32;insert_with_hint(hint,&#32;toml::key{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>KeyType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(key)&#32;},&#32;<emphasis role="keyword">nullptr</emphasis>);
1468 
1469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;second&#32;is&#32;nullptr&#32;then&#32;we&#32;successully&#32;claimed&#32;the&#32;key&#32;and&#32;inserted&#32;the&#32;empty&#32;sentinel,</emphasis>
1470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;so&#32;now&#32;we&#32;have&#32;to&#32;construct&#32;the&#32;actual&#32;value</emphasis>
1471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!ipos-&gt;second)
1472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(moving_node_ptr)
1474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ipos-&gt;second&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<emphasis role="keyword">static_cast&lt;</emphasis>ValueArgs&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(args)...);
1475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1477 <emphasis role="preprocessor">#if&#32;TOML_COMPILER_HAS_EXCEPTIONS</emphasis>
1478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>
1479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1480 <emphasis role="preprocessor">#endif</emphasis>
1481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ipos-&gt;second.reset(
1482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;impl::wrap_node&lt;unwrapped_type&gt;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>ValueArgs&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(args)...&#32;});
1483 <emphasis role="preprocessor">#if&#32;TOML_COMPILER_HAS_EXCEPTIONS</emphasis>
1484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(...)
1486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;erase(const_map_iterator{&#32;ipos&#32;});&#32;<emphasis role="comment">//&#32;strong&#32;exception&#32;guarantee</emphasis>
1488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>;
1489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1490 <emphasis role="preprocessor">#endif</emphasis>
1491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>{&#32;ipos&#32;};
1494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1496 
1548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1a85c74f29b8142342905b49f2fb1fbf2c">TOML_CONSTRAINED_TEMPLATE</link>((is_key_or_convertible&lt;KeyType&amp;&amp;&gt;&#32;||&#32;impl::is_wide_string&lt;KeyType&gt;),
1549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;KeyType,
1550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;ValueType)
1551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;bool&gt;&#32;insert(KeyType&amp;&amp;&#32;key,
1552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ValueType&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,
1553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;=&#32;<link linkend="_forward__declarations_8h_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)
1554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!impl::is_wide_string&lt;KeyType&gt;&#32;||&#32;<link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link>,
1556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Insertion&#32;using&#32;wide-character&#32;keys&#32;is&#32;only&#32;supported&#32;on&#32;Windows&#32;with&#32;&quot;</emphasis>
1557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;TOML_ENABLE_WINDOWS_COMPAT&#32;enabled.&quot;</emphasis>);
1558 
1559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_node_view&lt;ValueType&gt;)
1560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
1562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(),&#32;<emphasis role="keyword">false</emphasis>&#32;};
1563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1564 
1565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(impl::is_wide_string&lt;KeyType&gt;)
1566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1567 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
1568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;insert(impl::narrow(<emphasis role="keyword">static_cast&lt;</emphasis>KeyType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(key)),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>ValueType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>);
1569 <emphasis role="preprocessor">#else</emphasis>
1570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(impl::dependent_false&lt;KeyType&gt;,&#32;<emphasis role="stringliteral">&quot;Evaluated&#32;unreachable&#32;branch!&quot;</emphasis>);
1571 <emphasis role="preprocessor">#endif</emphasis>
1572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;key_view&#32;=&#32;std::string_view{&#32;key&#32;};
1576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map_iterator&#32;ipos&#32;&#32;&#32;=&#32;get_lower_bound(key_view);
1577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ipos&#32;==&#32;map_.end()&#32;||&#32;ipos-&gt;first&#32;!=&#32;key_view)
1578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ipos&#32;=&#32;insert_with_hint(<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>{&#32;ipos&#32;},
1580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::key{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>KeyType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(key)&#32;},
1581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::make_node(<emphasis role="keyword">static_cast&lt;</emphasis>ValueType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>));
1582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>{&#32;ipos&#32;},&#32;<emphasis role="keyword">true</emphasis>&#32;};
1583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>{&#32;ipos&#32;},&#32;<emphasis role="keyword">false</emphasis>&#32;};
1585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1587 
1627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a28441f3c429403e368267788c2e8a279">TOML_CONSTRAINED_TEMPLATE</link>((!is_key_or_convertible&lt;Iter&gt;&#32;&amp;&amp;&#32;!impl::is_wide_string&lt;Iter&gt;),&#32;<emphasis role="keyword">typename</emphasis>&#32;Iter)
1628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&#32;insert(Iter&#32;begin,&#32;Iter&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>,&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;=&#32;<link linkend="_forward__declarations_8h_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)
1629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(begin&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>)
1631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
1632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;begin;&#32;it&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>;&#32;it++)
1633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_rvalue_reference_v&lt;<emphasis role="keyword">decltype</emphasis>(*it)&gt;)
1635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insert(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>((*it).first),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>((*it).second),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>);
1636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insert((*it).first,&#32;(*it).second,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>);
1638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1640 
1693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1a85c74f29b8142342905b49f2fb1fbf2c">TOML_CONSTRAINED_TEMPLATE</link>((is_key_or_convertible&lt;KeyType&amp;&amp;&gt;&#32;||&#32;impl::is_wide_string&lt;KeyType&gt;),
1694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;KeyType,
1695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;ValueType)
1696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;bool&gt;&#32;insert_or_assign(KeyType&amp;&amp;&#32;key,
1697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ValueType&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,
1698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;=&#32;<link linkend="_forward__declarations_8h_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)
1699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!impl::is_wide_string&lt;KeyType&gt;&#32;||&#32;<link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link>,
1701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Insertion&#32;using&#32;wide-character&#32;keys&#32;is&#32;only&#32;supported&#32;on&#32;Windows&#32;with&#32;&quot;</emphasis>
1702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;TOML_ENABLE_WINDOWS_COMPAT&#32;enabled.&quot;</emphasis>);
1703 
1704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_node_view&lt;ValueType&gt;)
1705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
1707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(),&#32;<emphasis role="keyword">false</emphasis>&#32;};
1708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1709 
1710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(impl::is_wide_string&lt;KeyType&gt;)
1711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1712 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
1713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;insert_or_assign(impl::narrow(<emphasis role="keyword">static_cast&lt;</emphasis>KeyType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(key)),
1714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>ValueType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>),
1715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>);
1716 <emphasis role="preprocessor">#else</emphasis>
1717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(impl::dependent_false&lt;KeyType&gt;,&#32;<emphasis role="stringliteral">&quot;Evaluated&#32;unreachable&#32;branch!&quot;</emphasis>);
1718 <emphasis role="preprocessor">#endif</emphasis>
1719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;key_view&#32;=&#32;std::string_view{&#32;key&#32;};
1723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map_iterator&#32;ipos&#32;&#32;&#32;=&#32;get_lower_bound(key_view);
1724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ipos&#32;==&#32;map_.end()&#32;||&#32;ipos-&gt;first&#32;!=&#32;key_view)
1725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ipos&#32;=&#32;insert_with_hint(<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>{&#32;ipos&#32;},
1727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::key{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>KeyType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(key)&#32;},
1728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::make_node(<emphasis role="keyword">static_cast&lt;</emphasis>ValueType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>));
1729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>{&#32;ipos&#32;},&#32;<emphasis role="keyword">true</emphasis>&#32;};
1730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(*ipos).second&#32;=&#32;impl::make_node(<emphasis role="keyword">static_cast&lt;</emphasis>ValueType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>);
1734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>{&#32;ipos&#32;},&#32;<emphasis role="keyword">false</emphasis>&#32;};
1735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1738 
1776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1a6aa09205053fcd522ab78e862d21a0f0">TOML_CONSTRAINED_TEMPLATE</link>((is_key_or_convertible&lt;KeyType&amp;&amp;&gt;&#32;||&#32;impl::is_wide_string&lt;KeyType&gt;),
1777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;ValueType&#32;=&#32;<emphasis role="keywordtype">void</emphasis>,
1778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;KeyType,
1779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>...&#32;ValueArgs)
1780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;bool&gt;&#32;emplace(KeyType&amp;&amp;&#32;key,&#32;ValueArgs&amp;&amp;...&#32;args)
1781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!impl::is_wide_string&lt;KeyType&gt;&#32;||&#32;<link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link>,
1783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Emplacement&#32;using&#32;wide-character&#32;keys&#32;is&#32;only&#32;supported&#32;on&#32;Windows&#32;with&#32;&quot;</emphasis>
1784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;TOML_ENABLE_WINDOWS_COMPAT&#32;enabled.&quot;</emphasis>);
1785 
1786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classtable_1a6837fcea2eb10704f988624b7a73f3ee">raw_value_type</link>&#32;=&#32;impl::remove_cvref&lt;ValueType&gt;;
1787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classtable_1af8f0e6773b97cc2093d44fc0be051995">value_type</link>&#32;&#32;&#32;&#32;&#32;=&#32;std::
1788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;conditional_t&lt;std::is_void_v&lt;raw_value_type&gt;,&#32;impl::emplaced_type_of&lt;ValueArgs&amp;&amp;...&gt;,&#32;<link linkend="_classtable_1a6837fcea2eb10704f988624b7a73f3ee">raw_value_type</link>&gt;;
1789 
1790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(impl::is_wide_string&lt;KeyType&gt;)
1791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1792 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
1793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;emplace&lt;value_type&gt;(impl::narrow(<emphasis role="keyword">static_cast&lt;</emphasis>KeyType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(key)),
1794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>ValueArgs&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(args)...);
1795 <emphasis role="preprocessor">#else</emphasis>
1796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(impl::dependent_false&lt;KeyType&gt;,&#32;<emphasis role="stringliteral">&quot;Evaluated&#32;unreachable&#32;branch!&quot;</emphasis>);
1797 <emphasis role="preprocessor">#endif</emphasis>
1798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classtable_1aa4e13665570823f0343c59dc161baa95">unwrapped_type</link>&#32;=&#32;impl::remove_cvref&lt;impl::unwrap_node&lt;value_type&gt;&gt;;
1802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>((impl::is_native&lt;unwrapped_type&gt;&#32;||&#32;impl::is_one_of&lt;unwrapped_type,&#32;table,&#32;array&gt;),
1803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;ValueType&#32;argument&#32;of&#32;table::emplace()&#32;must&#32;be&#32;one&#32;&quot;</emphasis>
1804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;of:&quot;</emphasis>&#32;<link linkend="_toml_8hpp_1a1de380e050f331193398fe626294c548">TOML_SA_UNWRAPPED_NODE_TYPE_LIST</link>);
1805 
1806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;key_view&#32;=&#32;std::string_view{&#32;key&#32;};
1807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ipos&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;get_lower_bound(key_view);
1808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ipos&#32;==&#32;map_.end()&#32;||&#32;ipos-&gt;first&#32;!=&#32;key_view)
1809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ipos&#32;=&#32;insert_with_hint(
1811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>{&#32;ipos&#32;},
1812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::key{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>KeyType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(key)&#32;},
1813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::node_ptr{&#32;<emphasis role="keyword">new</emphasis>&#32;impl::wrap_node&lt;unwrapped_type&gt;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>ValueArgs&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(args)...&#32;}&#32;});
1814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>{&#32;ipos&#32;},&#32;<emphasis role="keyword">true</emphasis>&#32;};
1815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>{&#32;ipos&#32;},&#32;<emphasis role="keyword">false</emphasis>&#32;};
1817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1819 
1821 
1824 
1826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>node::operator[];&#32;<emphasis role="comment">//&#32;inherit&#32;operator[toml::path]</emphasis>
1828 
1840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
1841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&#32;<link linkend="_classtable_1a68177c7a82d76e4ef27ba9c8618272f4">operator[]</link>(std::string_view&#32;key)&#32;<emphasis role="keyword">noexcept</emphasis>
1842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(key)&#32;};
1844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1845 
1857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
1858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&#32;<link linkend="_classtable_1a7a1c9cb424ad342897ac73aeddb88a27">operator[]</link>(std::string_view&#32;key)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(key)&#32;};
1861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1862 
1863 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
1864 
1878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
1879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&#32;<link linkend="_classtable_1a4444bac8778900c8a75a866da3c571b0">operator[]</link>(std::wstring_view&#32;key)
1880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(key)&#32;};
1882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1883 
1897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
1898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&#32;<link linkend="_classtable_1a5cb524cd9990fe1e90f1f57009cfdead">operator[]</link>(std::wstring_view&#32;key)<emphasis role="keyword">&#32;const</emphasis>
1899 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
1900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(key)&#32;};
1901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1902 
1903 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
1904 
1906 
1909 
1910 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1912 
1913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
1914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga8436c6f378c73f3446a3b6f1e2c5e81c">TOML_EXPORTED_STATIC_FUNCTION</link>
1915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;equal(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable">table</link>&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable">table</link>&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>;
1916 
1918 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
1926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1a7dec1fafb7abc1389b18d2de80c39392">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable">table</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable">table</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
1927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;equal(lhs,&#32;rhs);
1929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1930 
1937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
1938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1ab456df97bd98e13632b756411088bfbd">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable">table</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable">table</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
1939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!equal(lhs,&#32;rhs);
1941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1942 
1944 
1945 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_FORMATTERS</emphasis>
1946 
1950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_classtable_1a82b6ece5db050fa6c468b08fa514a7dc">operator&lt;&lt;</link>(std::ostream&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable">table</link>&amp;&#32;rhs)
1951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(lhs,&#32;rhs);
1953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs;
1954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1955 
1956 <emphasis role="preprocessor">#endif</emphasis>
1957 &#32;&#32;&#32;&#32;};
1958 }
1959 <link linkend="_table_8h_1afa65688cac47ce86021fef8d739f9fd8">TOML_NAMESPACE_END</link>;
1960 
1961 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_header__end_8h">header_end.h</link>&quot;</emphasis>
</programlisting></section>
