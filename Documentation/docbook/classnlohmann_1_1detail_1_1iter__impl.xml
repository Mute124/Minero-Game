<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classnlohmann_1_1detail_1_1iter__impl" xml:lang="en-US">
<title>nlohmann::detail::iter_impl&lt; BasicJsonType &gt; Class Template Reference</title>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary></indexterm>
<para>

<para>a template for a bidirectional iterator for the <link linkend="_classnlohmann_1_1basic__json">basic_json</link> class This class implements a both iterators (iterator and const_iterator) for the <link linkend="_classnlohmann_1_1basic__json">basic_json</link> class. </para>
 
</para>
<para>
<computeroutput>#include &lt;json.hpp&gt;</computeroutput>
</para>
Collaboration diagram for nlohmann::detail::iter_impl&lt; BasicJsonType &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1detail_1_1iter__impl__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1ad9e091f5c70b34b5b1abc1ab15fd9106">iterator_category</link> = std::bidirectional_iterator_tag</para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1ab35586a44f2222272c5346baa3013f67">value_type</link> = typename BasicJsonType::value_type</para>

<para>the type of the values when the iterator is dereferenced </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">difference_type</link> = typename BasicJsonType::difference_type</para>

<para>a type to represent differences between iterators </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a69e52f890ce8c556fd68ce109e24b360">pointer</link> = typename std::conditional&lt; std::is_const&lt; BasicJsonType &gt;<link linkend="_classvalue">::value</link>, typename BasicJsonType::const_pointer, typename BasicJsonType::pointer &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></para>

<para>defines a pointer to the type iterated over (value_type) </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a5be8001be099c6b82310f4d387b953ce">reference</link> = typename std::conditional&lt; std::is_const&lt; BasicJsonType &gt;<link linkend="_classvalue">::value</link>, typename BasicJsonType::const_reference, typename BasicJsonType::reference &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></para>

<para>defines a reference to the type iterated over (value_type) </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a31090f248ce10fd7b386027c1a19c16f">iter_impl</link> ()=default</para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a3fc5c9a782628d91047aa35f40bb7fdc">~iter_impl</link> ()=default</para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a603ba9c477f878a69ed281becca6f56a">iter_impl</link> (<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &amp;&amp;) noexcept=default</para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &amp; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2fa049edb911dc873a26577fd3e9eb06">operator=</link> (<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &amp;&amp;) noexcept=default</para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a88a00484ac201c52fc5f613d88a2918b">iter_impl</link> (<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a69e52f890ce8c556fd68ce109e24b360">pointer</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab49790263c78300fbf05719e38246198">object</link>) noexcept</para>

<para>constructor for a given JSON instance </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a71f84fb6e009619f12972bcf9002b8cd">iter_impl</link> (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&lt; const BasicJsonType &gt; &amp;other) noexcept</para>

<para>const copy constructor </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &amp; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a565fc40a5c685e6b216ac3eba93d7f99">operator=</link> (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&lt; const BasicJsonType &gt; &amp;other) noexcept</para>

<para>converting assignment </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a867f7eb55091be31b013adb3e46816d3">iter_impl</link> (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&lt; typename std::remove_const&lt; BasicJsonType &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> &gt; &amp;other) noexcept</para>

<para>converting constructor </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &amp; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a6c4bf19f552b496705fe0f0a130204dd">operator=</link> (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&lt; typename std::remove_const&lt; BasicJsonType &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> &gt; &amp;other) noexcept</para>

<para>converting assignment </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abc2f80067020fae59d7fbccf39f1547a">switch</link> (m_object-&gt;m_type)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a23e50ad4c13aa62d9ac7f60a123823ee">set_end</link> () noexcept</para>

<para>set the iterator past the last value </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a5be8001be099c6b82310f4d387b953ce">reference</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a5ca57856d9bba54a5fc51cee891de827">operator*</link> () const</para>

<para>return a reference to the value pointed to by the iterator </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a69e52f890ce8c556fd68ce109e24b360">pointer</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a6da3d2b34528aff328f3dcb513076dec">operator-&gt;</link> () const</para>

<para>dereference the iterator </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1ace624462789947a281a7dfb748825e50">operator++</link> (int) &amp;</para>

<para>post-increment (it++) </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &amp; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abd1c853b2f0092dc053d5a3631702d82">operator++</link> ()</para>

<para>pre-increment (++it) </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1ae1d1c37c244b4d64ea44614b0838a0a4">operator--</link> (int) &amp;</para>

<para>post-decrement (it&#8211;) </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &amp; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a3c7a6bd94c22950a8dabf79367026d83">operator--</link> ()</para>

<para>pre-decrement (&#8211;it) </para>
</listitem>
            <listitem><para>template&lt;typename IterImpl , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt;(std::is_same&lt; IterImpl, <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &gt;<link linkend="_classvalue">::value</link>||std::is_same&lt; IterImpl, <link linkend="_classnlohmann_1_1detail_1_1iter__impl">other_iter_impl</link> &gt;<link linkend="_classvalue">::value</link>), std::nullptr_t &gt;  = nullptr&gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1aaddab83c2b4023cb0f0fdbc757c54f65">operator==</link> (const IterImpl &amp;other) const</para>

<para>comparison: equal </para>
</listitem>
            <listitem><para>template&lt;typename IterImpl , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt;(std::is_same&lt; IterImpl, <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &gt;<link linkend="_classvalue">::value</link>||std::is_same&lt; IterImpl, <link linkend="_classnlohmann_1_1detail_1_1iter__impl">other_iter_impl</link> &gt;<link linkend="_classvalue">::value</link>), std::nullptr_t &gt;  = nullptr&gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a190077df326c10886020bbcfaa169b20">operator!=</link> (const IterImpl &amp;other) const</para>

<para>comparison: not equal </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a0d14cd76203e00bdcef6a64a5d055cc7">operator&lt;</link> (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &amp;other) const</para>

<para>comparison: smaller </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1ac6f71b36d7c87e427d1fee83f2600fad">operator&lt;=</link> (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &amp;other) const</para>

<para>comparison: less than or equal </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1aaf3620b8dfa4bed8a9ac2b51dd55dbd7">operator&gt;</link> (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &amp;other) const</para>

<para>comparison: greater than </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a634f85da575cb60b012a687efa26e11a">operator&gt;=</link> (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &amp;other) const</para>

<para>comparison: greater than or equal </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &amp; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1ae576098902fa32c109d9d036d30e0cd7">operator+=</link> (<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">difference_type</link> i)</para>

<para>add to iterator </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &amp; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1af0d52c75e651a915e3dc5cdab71c06bd">operator-=</link> (<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">difference_type</link> i)</para>

<para>subtract from iterator </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8ef76aeb5a5032768f0f61f48ac189c0">operator+</link> (<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">difference_type</link> i) const</para>

<para>add to iterator </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a0dd9c415b94a02ff2aa25da75e52da30">operator-</link> (<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">difference_type</link> i) const</para>

<para>subtract from iterator </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">difference_type</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a49bf3e708a9c1c88c415011735962d06">operator-</link> (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &amp;other) const</para>

<para>return difference </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a5be8001be099c6b82310f4d387b953ce">reference</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1ac0b9276f1102ed4b9cd3f5f56287e3ce">operator[]</link> (<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">difference_type</link> n) const</para>

<para>access to successor </para>
</listitem>
            <listitem><para>const object_t::key_type &amp; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a9aa08ccaf6e80f7bd9513c0d054efb64">key</link> () const</para>

<para>return the key of an object iterator </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a5be8001be099c6b82310f4d387b953ce">reference</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1ab447c50354c6611fa2ae0100ac17845c">value</link> () const</para>

<para>return the value of an iterator </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_json_8hpp_1a2cf645f34610e7f7d6e09ab88a2ab917">JSON_PRIVATE_UNLESS_TESTED</link> : <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> set_begin() noexcept { <link linkend="_json_8hpp_1a69f131cff49da1989667220173fbeae6">JSON_ASSERT</link>(m_object != nullptr)</para>
</listitem>
            <listitem><para><link linkend="_json_8hpp_1a2cf645f34610e7f7d6e09ab88a2ab917">JSON_PRIVATE_UNLESS_TESTED</link> : <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a69e52f890ce8c556fd68ce109e24b360">pointer</link> m_object = nullptr</para>
</listitem>
            <listitem><para><link linkend="_structnlohmann_1_1detail_1_1internal__iterator">internal_iterator</link>&lt; typename std::remove_const&lt; BasicJsonType &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> &gt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link> {}</para>

<para>the actual iterator of the associated instance </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Friends    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a94108d1a7563e103534f23eb5c1ee175">operator+</link> (<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">difference_type</link> i, const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &amp;it)</para>

<para>addition of distance and iterator </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename BasicJsonType&gt;<?linebreak?>class nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</title></simplesect>

<para>a template for a bidirectional iterator for the <link linkend="_classnlohmann_1_1basic__json">basic_json</link> class This class implements a both iterators (iterator and const_iterator) for the <link linkend="_classnlohmann_1_1basic__json">basic_json</link> class. </para>



<para><note><title>Note</title>

<para>An iterator is called <emphasis>initialized</emphasis> when a pointer to a JSON value has been set (e.g., by a constructor or a copy assignment). If the iterator is default-constructed, it is <emphasis>uninitialized</emphasis> and most methods are undefined. The library uses assertions to detect calls on uninitialized iterators.** @requirement The class satisfies the following concept requirements:<itemizedlist>
<listitem>
<para><link xlink:href="https://en.cppreference.com/w/cpp/named_req/BidirectionalIterator">BidirectionalIterator</link>: The iterator that can be moved can be moved in both directions (i.e. incremented and decremented). </para>
</listitem></itemizedlist>
</para>
</note>
<formalpara><title>Since</title>

<para>version 1.0.0, simplified in version 2.0.9, change to bidirectional iterators in version 3.0.0 (see <link xlink:href="https://github.com/nlohmann/json/issues/593">https://github.com/nlohmann/json/issues/593</link>) </para>
</formalpara>
</para>
</section>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840"/><section>
    <title>difference_type</title>
<indexterm><primary>difference_type</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>difference_type</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;::difference_type =  typename BasicJsonType::difference_type</computeroutput></para><para>

<para>a type to represent differences between iterators </para>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1ad9e091f5c70b34b5b1abc1ab15fd9106"/><section>
    <title>iterator_category</title>
<indexterm><primary>iterator_category</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>iterator_category</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;::iterator_category =  std::bidirectional_iterator_tag</computeroutput></para>
<para>The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. The C++ Standard has never required user-defined iterators to derive from std::iterator. A user-defined iterator should provide publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. </para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a69e52f890ce8c556fd68ce109e24b360"/><section>
    <title>pointer</title>
<indexterm><primary>pointer</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>pointer</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">::pointer</link> =  typename std::conditional&lt;std::is_const&lt;BasicJsonType&gt;<link linkend="_classvalue">::value</link>, typename BasicJsonType::const_pointer, typename BasicJsonType::pointer&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></computeroutput></para><para>

<para>defines a pointer to the type iterated over (value_type) </para>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a5be8001be099c6b82310f4d387b953ce"/><section>
    <title>reference</title>
<indexterm><primary>reference</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>reference</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;::reference =  typename std::conditional&lt;std::is_const&lt;BasicJsonType&gt;<link linkend="_classvalue">::value</link>, typename BasicJsonType::const_reference, typename BasicJsonType::reference&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></computeroutput></para><para>

<para>defines a reference to the type iterated over (value_type) </para>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1ab35586a44f2222272c5346baa3013f67"/><section>
    <title>value_type</title>
<indexterm><primary>value_type</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>value_type</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;::value_type =  typename BasicJsonType::value_type</computeroutput></para><para>

<para>the type of the values when the iterator is dereferenced </para>
</para>
</section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a31090f248ce10fd7b386027c1a19c16f"/><section>
    <title>iter_impl()<computeroutput>[1/5]</computeroutput></title>
<indexterm><primary>iter_impl</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>iter_impl</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;::iter_impl ( )<computeroutput>[default]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a3fc5c9a782628d91047aa35f40bb7fdc"/><section>
    <title>~iter_impl()</title>
<indexterm><primary>~iter_impl</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>~iter_impl</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;::~<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> ( )<computeroutput>[default]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a603ba9c477f878a69ed281becca6f56a"/><section>
    <title>iter_impl()<computeroutput>[2/5]</computeroutput></title>
<indexterm><primary>iter_impl</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>iter_impl</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;::iter_impl (<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&lt; BasicJsonType &gt; &amp;&amp; )<computeroutput>[default]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a88a00484ac201c52fc5f613d88a2918b"/><section>
    <title>iter_impl()<computeroutput>[3/5]</computeroutput></title>
<indexterm><primary>iter_impl</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>iter_impl</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;::iter_impl (<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a69e52f890ce8c556fd68ce109e24b360">pointer</link> object)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>constructor for a given JSON instance </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>in</entry><entry>object</entry><entry>
<para>pointer to a JSON object for this iterator </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Precondition</title>

<para>object != nullptr </para>
</formalpara>
<formalpara><title>Postcondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a71f84fb6e009619f12972bcf9002b8cd"/><section>
    <title>iter_impl()<computeroutput>[4/5]</computeroutput></title>
<indexterm><primary>iter_impl</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>iter_impl</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;::iter_impl (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&lt; const BasicJsonType &gt; &amp; other)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>const copy constructor </para>
</para>

<para><note><title>Note</title>

<para>The conventional copy constructor and copy assignment are implicitly defined. Combined with the following converting constructor and assignment, they support: (1) copy from iterator to iterator, (2) copy from const iterator to const iterator, and (3) conversion from iterator to const iterator. However conversion from const iterator to iterator is not defined.</para>
</note>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>in</entry><entry>other</entry><entry>
<para>const iterator to copy from </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <note><title>Note</title>

<para>This copy constructor had to be defined explicitly to circumvent a bug occurring on msvc v19.0 compiler (VS 2015) debug build. For more information refer to: <link xlink:href="https://github.com/nlohmann/json/issues/1608">https://github.com/nlohmann/json/issues/1608</link> </para>
</note>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a867f7eb55091be31b013adb3e46816d3"/><section>
    <title>iter_impl()<computeroutput>[5/5]</computeroutput></title>
<indexterm><primary>iter_impl</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>iter_impl</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;::iter_impl (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&lt; typename std::remove_const&lt; BasicJsonType &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> &gt; &amp; other)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>converting constructor </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>in</entry><entry>other</entry><entry>
<para>non-const iterator to copy from </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <note><title>Note</title>

<para>It is not checked whether <emphasis>other</emphasis> is initialized. </para>
</note>
</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a9aa08ccaf6e80f7bd9513c0d054efb64"/><section>
    <title>key()</title>
<indexterm><primary>key</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>key</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>const object_t::key_type &amp; <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;::key ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>return the key of an object iterator </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1detail_1_1iter__impl_a9aa08ccaf6e80f7bd9513c0d054efb64_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a190077df326c10886020bbcfaa169b20"/><section>
    <title>operator!=()</title>
<indexterm><primary>operator!=</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><computeroutput>template&lt;typename IterImpl , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt;(std::is_same&lt; IterImpl, <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &gt;<link linkend="_classvalue">::value</link>||std::is_same&lt; IterImpl, <link linkend="_classnlohmann_1_1detail_1_1iter__impl">other_iter_impl</link> &gt;<link linkend="_classvalue">::value</link>), std::nullptr_t &gt;  = nullptr&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;::operator!= (const IterImpl &amp; other) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>comparison: not equal </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1detail_1_1iter__impl_a190077df326c10886020bbcfaa169b20_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a5ca57856d9bba54a5fc51cee891de827"/><section>
    <title>operator*()</title>
<indexterm><primary>operator*</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator*</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a5be8001be099c6b82310f4d387b953ce">reference</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;::operator* ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>return a reference to the value pointed to by the iterator </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1detail_1_1iter__impl_a5ca57856d9bba54a5fc51cee891de827_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1detail_1_1iter__impl_a5ca57856d9bba54a5fc51cee891de827_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a8ef76aeb5a5032768f0f61f48ac189c0"/><section>
    <title>operator+()</title>
<indexterm><primary>operator+</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator+</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;::operator+ (<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">difference_type</link> i) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>add to iterator </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1abd1c853b2f0092dc053d5a3631702d82"/><section>
    <title>operator++()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator++</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator++</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &amp; <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;::operator++ ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>pre-increment (++it) </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1ace624462789947a281a7dfb748825e50"/><section>
    <title>operator++()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator++</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator++</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;::operator++ (int ) &amp;<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>post-increment (it++) </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1ae576098902fa32c109d9d036d30e0cd7"/><section>
    <title>operator+=()</title>
<indexterm><primary>operator+=</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator+=</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &amp; <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;::operator+= (<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">difference_type</link> i)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>add to iterator </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1detail_1_1iter__impl_ae576098902fa32c109d9d036d30e0cd7_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1detail_1_1iter__impl_ae576098902fa32c109d9d036d30e0cd7_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a49bf3e708a9c1c88c415011735962d06"/><section>
    <title>operator-()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">difference_type</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;::operator- (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&lt; BasicJsonType &gt; &amp; other) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>return difference </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1detail_1_1iter__impl_a49bf3e708a9c1c88c415011735962d06_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a0dd9c415b94a02ff2aa25da75e52da30"/><section>
    <title>operator-()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;::operator- (<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">difference_type</link> i) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>subtract from iterator </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a3c7a6bd94c22950a8dabf79367026d83"/><section>
    <title>operator--()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator--</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator--</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &amp; <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;::operator-- ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>pre-decrement (&#8211;it) </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1ae1d1c37c244b4d64ea44614b0838a0a4"/><section>
    <title>operator--()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator--</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator--</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;::operator-- (int ) &amp;<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>post-decrement (it&#8211;) </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1af0d52c75e651a915e3dc5cdab71c06bd"/><section>
    <title>operator-=()</title>
<indexterm><primary>operator-=</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator-=</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &amp; <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;::operator-= (<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">difference_type</link> i)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>subtract from iterator </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1detail_1_1iter__impl_af0d52c75e651a915e3dc5cdab71c06bd_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a6da3d2b34528aff328f3dcb513076dec"/><section>
    <title>operator-&gt;()</title>
<indexterm><primary>operator-&gt;</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator-&gt;</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a69e52f890ce8c556fd68ce109e24b360">pointer</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;::operator-&gt; ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>dereference the iterator </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1detail_1_1iter__impl_a6da3d2b34528aff328f3dcb513076dec_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a0d14cd76203e00bdcef6a64a5d055cc7"/><section>
    <title>operator&lt;()</title>
<indexterm><primary>operator&lt;</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator&lt;</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;::operator&lt; (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&lt; BasicJsonType &gt; &amp; other) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>comparison: smaller </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1detail_1_1iter__impl_a0d14cd76203e00bdcef6a64a5d055cc7_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1detail_1_1iter__impl_a0d14cd76203e00bdcef6a64a5d055cc7_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1ac6f71b36d7c87e427d1fee83f2600fad"/><section>
    <title>operator&lt;=()</title>
<indexterm><primary>operator&lt;=</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator&lt;=</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;::operator&lt;= (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&lt; BasicJsonType &gt; &amp; other) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>comparison: less than or equal </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1detail_1_1iter__impl_ac6f71b36d7c87e427d1fee83f2600fad_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a565fc40a5c685e6b216ac3eba93d7f99"/><section>
    <title>operator=()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &amp; <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;::operator= (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&lt; const BasicJsonType &gt; &amp; other)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>converting assignment </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>in</entry><entry>other</entry><entry>
<para>const iterator to copy from </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>const/non-const iterator </para>
</formalpara>
<note><title>Note</title>

<para>It is not checked whether <emphasis>other</emphasis> is initialized. </para>
</note>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a6c4bf19f552b496705fe0f0a130204dd"/><section>
    <title>operator=()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &amp; <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;::operator= (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&lt; typename std::remove_const&lt; BasicJsonType &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> &gt; &amp; other)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>converting assignment </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>in</entry><entry>other</entry><entry>
<para>non-const iterator to copy from </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>const/non-const iterator </para>
</formalpara>
<note><title>Note</title>

<para>It is not checked whether <emphasis>other</emphasis> is initialized. </para>
</note>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a2fa049edb911dc873a26577fd3e9eb06"/><section>
    <title>operator=()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &amp; <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;::operator= (<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&lt; BasicJsonType &gt; &amp;&amp; )<computeroutput>[default]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1aaddab83c2b4023cb0f0fdbc757c54f65"/><section>
    <title>operator==()</title>
<indexterm><primary>operator==</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><computeroutput>template&lt;typename IterImpl , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt;(std::is_same&lt; IterImpl, <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &gt;<link linkend="_classvalue">::value</link>||std::is_same&lt; IterImpl, <link linkend="_classnlohmann_1_1detail_1_1iter__impl">other_iter_impl</link> &gt;<link linkend="_classvalue">::value</link>), std::nullptr_t &gt;  = nullptr&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;::operator== (const IterImpl &amp; other) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>comparison: equal </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1detail_1_1iter__impl_aaddab83c2b4023cb0f0fdbc757c54f65_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1detail_1_1iter__impl_aaddab83c2b4023cb0f0fdbc757c54f65_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1aaf3620b8dfa4bed8a9ac2b51dd55dbd7"/><section>
    <title>operator&gt;()</title>
<indexterm><primary>operator&gt;</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator&gt;</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;::operator&gt; (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&lt; BasicJsonType &gt; &amp; other) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>comparison: greater than </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1detail_1_1iter__impl_aaf3620b8dfa4bed8a9ac2b51dd55dbd7_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a634f85da575cb60b012a687efa26e11a"/><section>
    <title>operator&gt;=()</title>
<indexterm><primary>operator&gt;=</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator&gt;=</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;::operator&gt;= (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&lt; BasicJsonType &gt; &amp; other) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>comparison: greater than or equal </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1detail_1_1iter__impl_a634f85da575cb60b012a687efa26e11a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1ac0b9276f1102ed4b9cd3f5f56287e3ce"/><section>
    <title>operator[]()</title>
<indexterm><primary>operator[]</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a5be8001be099c6b82310f4d387b953ce">reference</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;::operator[] (<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">difference_type</link> n) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access to successor </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1detail_1_1iter__impl_ac0b9276f1102ed4b9cd3f5f56287e3ce_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a23e50ad4c13aa62d9ac7f60a123823ee"/><section>
    <title>set_end()</title>
<indexterm><primary>set_end</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>set_end</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;::set_end ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>set the iterator past the last value </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1abc2f80067020fae59d7fbccf39f1547a"/><section>
    <title>switch()</title>
<indexterm><primary>switch</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>switch</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;::switch (m_object-&gt; m_type)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1ab447c50354c6611fa2ae0100ac17845c"/><section>
    <title>value()</title>
<indexterm><primary>value</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>value</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a5be8001be099c6b82310f4d387b953ce">reference</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;<link linkend="_classvalue">::value</link> ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>return the value of an iterator </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1detail_1_1iter__impl_ab447c50354c6611fa2ae0100ac17845c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Friends And Related Symbol Documentation</title>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a94108d1a7563e103534f23eb5c1ee175"/><section>
    <title>operator+</title>
<indexterm><primary>operator+</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator+</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> operator+ (<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">difference_type</link> i, const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&lt; BasicJsonType &gt; &amp; it)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>addition of distance and iterator </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1aa4bddeaa9a97b2a9b715918a7e8dcc3a"/><section>
    <title>__pad0__</title>
<indexterm><primary>__pad0__</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>__pad0__</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_json_8hpp_1a2cf645f34610e7f7d6e09ab88a2ab917">JSON_PRIVATE_UNLESS_TESTED</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;::__pad0__</computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a4a60e9d074cc53929b73eaa7963f1fa9"/><section>
    <title>__pad1__</title>
<indexterm><primary>__pad1__</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>__pad1__</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_json_8hpp_1a2cf645f34610e7f7d6e09ab88a2ab917">JSON_PRIVATE_UNLESS_TESTED</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;::__pad1__</computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa"/><section>
    <title>m_it</title>
<indexterm><primary>m_it</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>m_it</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_structnlohmann_1_1detail_1_1internal__iterator">internal_iterator</link>&lt;typename std::remove_const&lt;BasicJsonType&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&gt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;::m_it {}</computeroutput></para><para>

<para>the actual iterator of the associated instance </para>
</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/vendor/<link linkend="_json_8hpp">json.hpp</link></section>
</section>
