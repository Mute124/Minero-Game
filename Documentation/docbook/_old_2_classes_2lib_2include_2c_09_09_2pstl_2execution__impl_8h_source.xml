<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2pstl_2execution__impl_8h_source" xml:lang="en-US">
<title>execution_impl.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/pstl/execution_impl.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 <emphasis role="comment">//===--&#32;execution_impl.h&#32;--------------------------------------------------===//</emphasis>
3 <emphasis role="comment">//</emphasis>
4 <emphasis role="comment">//&#32;Part&#32;of&#32;the&#32;LLVM&#32;Project,&#32;under&#32;the&#32;Apache&#32;License&#32;v2.0&#32;with&#32;LLVM&#32;Exceptions.</emphasis>
5 <emphasis role="comment">//&#32;See&#32;https://llvm.org/LICENSE.txt&#32;for&#32;license&#32;information.</emphasis>
6 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;Apache-2.0&#32;WITH&#32;LLVM-exception</emphasis>
7 <emphasis role="comment">//</emphasis>
8 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
9 
10 <emphasis role="preprocessor">#ifndef&#32;_PSTL_EXECUTION_IMPL_H</emphasis>
11 <emphasis role="preprocessor">#define&#32;_PSTL_EXECUTION_IMPL_H</emphasis>
12 
13 <emphasis role="preprocessor">#include&#32;&lt;iterator&gt;</emphasis>
14 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>
15 
16 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__old_2_classes_2lib_2include_2c_09_09_2pstl_2execution__defs_8h">execution_defs.h</link>&quot;</emphasis>
17 
18 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____pstl">__pstl</link>
19 {
20 <emphasis role="keyword">namespace&#32;</emphasis>__internal
21 {
22 
23 <emphasis role="keyword">using&#32;namespace&#32;</emphasis><link linkend="_namespace____pstl_1_1execution">__pstl::execution</link>;
24 
25 <emphasis role="comment">/*&#32;predicate&#32;*/</emphasis>
26 
27 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
28 std::false_type&#32;<link linkend="_namespace____pstl_1_1____internal_1a3c2cbbe7383471b9eee17763a807b703">__lazy_and</link>(_Tp,&#32;std::false_type)
29 {
30 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::false_type{};
31 }
32 
33 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
34 <emphasis role="keyword">inline</emphasis>&#32;_Tp
35 <link linkend="_namespace____pstl_1_1____internal_1a3c2cbbe7383471b9eee17763a807b703">__lazy_and</link>(_Tp&#32;__a,&#32;std::true_type)
36 {
37 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a;
38 }
39 
40 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
41 std::true_type&#32;<link linkend="_namespace____pstl_1_1____internal_1aa4e87f24d82bdaef2aa34e5a55cb6b40">__lazy_or</link>(_Tp,&#32;std::true_type)
42 {
43 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::true_type{};
44 }
45 
46 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
47 <emphasis role="keyword">inline</emphasis>&#32;_Tp
48 <link linkend="_namespace____pstl_1_1____internal_1aa4e87f24d82bdaef2aa34e5a55cb6b40">__lazy_or</link>(_Tp&#32;__a,&#32;std::false_type)
49 {
50 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a;
51 }
52 
53 <emphasis role="comment">/*&#32;iterator&#32;*/</emphasis>
54 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_IteratorType,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_OtherIteratorTypes&gt;
55 <emphasis role="keyword">struct&#32;</emphasis>__is_random_access_iterator
56 {
57 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classvalue">value</link>&#32;=&#32;<link linkend="_struct____pstl_1_1____internal_1_1____is__random__access__iterator">__internal::__is_random_access_iterator&lt;_IteratorType&gt;::value</link>&#32;&amp;&amp;
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____pstl_1_1____internal_1_1____is__random__access__iterator">__internal::__is_random_access_iterator</link>&lt;_OtherIteratorTypes...&gt;<link linkend="_struct____pstl_1_1____internal_1_1____is__random__access__iterator_1aea3ab79a62a13675de893e16c2f24cc0">::value</link>;
59 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::integral_constant&lt;bool,&#32;value&gt;&#32;<link linkend="_struct____pstl_1_1____internal_1_1____is__random__access__iterator_1a72f036d8abf7214ea3fe4c1870a85832">type</link>;
60 };
61 
62 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_IteratorType&gt;
63 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct____pstl_1_1____internal_1_1____is__random__access__iterator">__is_random_access_iterator</link>&lt;_IteratorType&gt;
64 &#32;&#32;&#32;&#32;:&#32;std::is_same&lt;typename&#32;std::iterator_traits&lt;_IteratorType&gt;::iterator_category,&#32;std::random_access_iterator_tag&gt;
65 {
66 };
67 
68 <emphasis role="comment">/*&#32;policy&#32;*/</emphasis>
69 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Policy&gt;
70 <emphasis role="keyword">struct&#32;</emphasis>__policy_traits
71 {
72 };
73 
74 <emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
75 <emphasis role="keyword">struct&#32;</emphasis>__policy_traits&lt;<link linkend="_class____pstl_1_1execution_1_1v1_1_1sequenced__policy">sequenced_policy</link>&gt;
76 {
77 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::false_type&#32;<link linkend="_struct____pstl_1_1____internal_1_1____policy__traits_3_01sequenced__policy_01_4_1a74d71ba7ae0498551e44da9a23daae73">allow_parallel</link>;
78 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::false_type&#32;<link linkend="_struct____pstl_1_1____internal_1_1____policy__traits_3_01sequenced__policy_01_4_1af477879f96c7b198a609637e81551e94">allow_unsequenced</link>;
79 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::false_type&#32;<link linkend="_struct____pstl_1_1____internal_1_1____policy__traits_3_01sequenced__policy_01_4_1ae3946051d443538f75e95ac3bbc54ae7">allow_vector</link>;
80 };
81 
82 <emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
83 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct____pstl_1_1____internal_1_1____policy__traits">__policy_traits</link>&lt;<link linkend="_class____pstl_1_1execution_1_1v1_1_1unsequenced__policy">unsequenced_policy</link>&gt;
84 {
85 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::false_type&#32;<link linkend="_struct____pstl_1_1____internal_1_1____policy__traits_3_01unsequenced__policy_01_4_1ad9229a481682add6920c6afb4a4359e6">allow_parallel</link>;
86 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::true_type&#32;<link linkend="_struct____pstl_1_1____internal_1_1____policy__traits_3_01unsequenced__policy_01_4_1a2f0c034c4ac8d465e7a2fc32d177386d">allow_unsequenced</link>;
87 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::true_type&#32;<link linkend="_struct____pstl_1_1____internal_1_1____policy__traits_3_01unsequenced__policy_01_4_1ad3075321a4353f9ffd89092f2ea1dea4">allow_vector</link>;
88 };
89 
90 <emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
91 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct____pstl_1_1____internal_1_1____policy__traits">__policy_traits</link>&lt;<link linkend="_class____pstl_1_1execution_1_1v1_1_1parallel__policy">parallel_policy</link>&gt;
92 {
93 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::true_type&#32;<link linkend="_struct____pstl_1_1____internal_1_1____policy__traits_3_01parallel__policy_01_4_1a8afe6c709070637572b1608d662024be">allow_parallel</link>;
94 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::false_type&#32;<link linkend="_struct____pstl_1_1____internal_1_1____policy__traits_3_01parallel__policy_01_4_1a9f0c77b9aef629f7ee4e853c613a7573">allow_unsequenced</link>;
95 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::false_type&#32;<link linkend="_struct____pstl_1_1____internal_1_1____policy__traits_3_01parallel__policy_01_4_1a016e90a9f9beaa5af6705f6d1929fc1c">allow_vector</link>;
96 };
97 
98 <emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
99 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct____pstl_1_1____internal_1_1____policy__traits">__policy_traits</link>&lt;<link linkend="_class____pstl_1_1execution_1_1v1_1_1parallel__unsequenced__policy">parallel_unsequenced_policy</link>&gt;
100 {
101 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::true_type&#32;<link linkend="_struct____pstl_1_1____internal_1_1____policy__traits_3_01parallel__unsequenced__policy_01_4_1a0e9cf6f28b375249e162a71d32a1e4de">allow_parallel</link>;
102 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::true_type&#32;<link linkend="_struct____pstl_1_1____internal_1_1____policy__traits_3_01parallel__unsequenced__policy_01_4_1a9ca5ea19147df5bdacdbaaf9858b7a55">allow_unsequenced</link>;
103 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::true_type&#32;<link linkend="_struct____pstl_1_1____internal_1_1____policy__traits_3_01parallel__unsequenced__policy_01_4_1a0bd3d1dab782cbff797c1fa8d022a1c9">allow_vector</link>;
104 };
105 
106 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_ExecutionPolicy&gt;
107 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace____pstl_1_1____internal_1ae19f2535af6ba1b6ccf714704628d7ce">__collector_t</link>&#32;=
108 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____pstl_1_1____internal_1_1____policy__traits">__internal::__policy_traits&lt;typename std::decay&lt;_ExecutionPolicy&gt;::type</link>&gt;::__collector_type;
109 
110 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_ExecutionPolicy&gt;
111 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace____pstl_1_1____internal_1a9a909a1997cffa29a64d86f61adee836">__allow_vector</link>&#32;=
112 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____pstl_1_1____internal_1_1____policy__traits">__internal::__policy_traits&lt;typename std::decay&lt;_ExecutionPolicy&gt;::type</link>&gt;<link linkend="_namespace____pstl_1_1____internal_1a9a909a1997cffa29a64d86f61adee836">::__allow_vector</link>;
113 
114 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_ExecutionPolicy&gt;
115 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace____pstl_1_1____internal_1a5d7af2c48372e5092c6a147bd48ea4ec">__allow_unsequenced</link>&#32;=
116 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____pstl_1_1____internal_1_1____policy__traits">__internal::__policy_traits&lt;typename std::decay&lt;_ExecutionPolicy&gt;::type</link>&gt;<link linkend="_namespace____pstl_1_1____internal_1a5d7af2c48372e5092c6a147bd48ea4ec">::__allow_unsequenced</link>;
117 
118 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_ExecutionPolicy&gt;
119 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace____pstl_1_1____internal_1a126fcadf26cac3891eaa97538e25c7c7">__allow_parallel</link>&#32;=
120 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____pstl_1_1____internal_1_1____policy__traits">__internal::__policy_traits&lt;typename std::decay&lt;_ExecutionPolicy&gt;::type</link>&gt;<link linkend="_namespace____pstl_1_1____internal_1a126fcadf26cac3891eaa97538e25c7c7">::__allow_parallel</link>;
121 
122 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_IteratorTypes&gt;
123 <emphasis role="keyword">auto</emphasis>
124 <link linkend="_namespace____pstl_1_1____internal_1aba53c2e534557bf2c817808fb3b3c269">__is_vectorization_preferred</link>(_ExecutionPolicy&amp;&amp;&#32;__exec)
125 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(<link linkend="_namespace____pstl_1_1____internal_1a3c2cbbe7383471b9eee17763a807b703">__internal::__lazy_and</link>(__exec.__allow_vector(),
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____pstl_1_1____internal_1_1____is__random__access__iterator_1a72f036d8abf7214ea3fe4c1870a85832">__internal::__is_random_access_iterator&lt;_IteratorTypes...&gt;::type</link>()))
127 {
128 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a3c2cbbe7383471b9eee17763a807b703">__internal::__lazy_and</link>(__exec.__allow_vector(),
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____pstl_1_1____internal_1_1____is__random__access__iterator_1a72f036d8abf7214ea3fe4c1870a85832">__internal::__is_random_access_iterator&lt;_IteratorTypes...&gt;::type</link>());
130 }
131 
132 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_IteratorTypes&gt;
133 <emphasis role="keyword">auto</emphasis>
134 <link linkend="_namespace____pstl_1_1____internal_1a96278219a9b5139e6060c4a24235841c">__is_parallelization_preferred</link>(_ExecutionPolicy&amp;&amp;&#32;__exec)
135 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(<link linkend="_namespace____pstl_1_1____internal_1a3c2cbbe7383471b9eee17763a807b703">__internal::__lazy_and</link>(__exec.__allow_parallel(),
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____pstl_1_1____internal_1_1____is__random__access__iterator_1a72f036d8abf7214ea3fe4c1870a85832">__internal::__is_random_access_iterator&lt;_IteratorTypes...&gt;::type</link>()))
137 {
138 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a3c2cbbe7383471b9eee17763a807b703">__internal::__lazy_and</link>(__exec.__allow_parallel(),
139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____pstl_1_1____internal_1_1____is__random__access__iterator_1a72f036d8abf7214ea3fe4c1870a85832">__internal::__is_random_access_iterator&lt;_IteratorTypes...&gt;::type</link>());
140 }
141 
142 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;policy,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_IteratorTypes&gt;
143 <emphasis role="keyword">struct&#32;</emphasis>__prefer_unsequenced_tag
144 {
145 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classvalue">value</link>&#32;=&#32;<link linkend="_namespace____pstl_1_1____internal_1a5d7af2c48372e5092c6a147bd48ea4ec">__internal::__allow_unsequenced&lt;policy&gt;::value</link>&#32;&amp;&amp;
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____pstl_1_1____internal_1_1____is__random__access__iterator">__internal::__is_random_access_iterator</link>&lt;_IteratorTypes...&gt;<link linkend="_struct____pstl_1_1____internal_1_1____prefer__unsequenced__tag_1a14a70d2cf840a25ae05499388b5add34">::value</link>;
147 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::integral_constant&lt;bool,&#32;value&gt;&#32;<link linkend="_struct____pstl_1_1____internal_1_1____prefer__unsequenced__tag_1a001ddc982b6d73ed4c5268fd60e23f77">type</link>;
148 };
149 
150 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;policy,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_IteratorTypes&gt;
151 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct____pstl_1_1____internal_1_1____prefer__parallel__tag">__prefer_parallel_tag</link>
152 {
153 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classvalue">value</link>&#32;=&#32;<link linkend="_namespace____pstl_1_1____internal_1a126fcadf26cac3891eaa97538e25c7c7">__internal::__allow_parallel&lt;policy&gt;::value</link>&#32;&amp;&amp;
154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____pstl_1_1____internal_1_1____is__random__access__iterator">__internal::__is_random_access_iterator</link>&lt;_IteratorTypes...&gt;<link linkend="_struct____pstl_1_1____internal_1_1____prefer__parallel__tag_1aa0759ba6187b1b57c31e89074e7066ff">::value</link>;
155 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::integral_constant&lt;bool,&#32;value&gt;&#32;<link linkend="_struct____pstl_1_1____internal_1_1____prefer__parallel__tag_1a2370a200ff4c06fa29d811d7ae8a5bbd">type</link>;
156 };
157 
158 }&#32;<emphasis role="comment">//&#32;namespace&#32;__internal</emphasis>
159 }&#32;<emphasis role="comment">//&#32;namespace&#32;__pstl</emphasis>
160 
161 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_PSTL_EXECUTION_IMPL_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
