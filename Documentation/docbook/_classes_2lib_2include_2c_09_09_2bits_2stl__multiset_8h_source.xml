<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2bits_2stl__multiset_8h_source" xml:lang="en-US">
<title>stl_multiset.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/bits/stl_multiset.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Multiset&#32;implementation&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2001-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">/*</emphasis>
26 <emphasis role="comment">&#32;*</emphasis>
27 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1994</emphasis>
28 <emphasis role="comment">&#32;*&#32;Hewlett-Packard&#32;Company</emphasis>
29 <emphasis role="comment">&#32;*</emphasis>
30 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
31 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
32 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
33 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
34 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Hewlett-Packard&#32;Company&#32;makes&#32;no</emphasis>
35 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
36 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
37 <emphasis role="comment">&#32;*</emphasis>
38 <emphasis role="comment">&#32;*</emphasis>
39 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1996</emphasis>
40 <emphasis role="comment">&#32;*&#32;Silicon&#32;Graphics&#32;Computer&#32;Systems,&#32;Inc.</emphasis>
41 <emphasis role="comment">&#32;*</emphasis>
42 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
43 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
44 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
45 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
46 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Silicon&#32;Graphics&#32;makes&#32;no</emphasis>
47 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
48 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
49 <emphasis role="comment">&#32;*/</emphasis>
50 
56 <emphasis role="preprocessor">#ifndef&#32;_STL_MULTISET_H</emphasis>
57 <emphasis role="preprocessor">#define&#32;_STL_MULTISET_H&#32;1</emphasis>
58 
59 <emphasis role="preprocessor">#include&#32;&lt;bits/concept_check.h&gt;</emphasis>
60 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
61 <emphasis role="preprocessor">#include&#32;&lt;initializer_list&gt;</emphasis>
62 <emphasis role="preprocessor">#endif</emphasis>
63 
64 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
65 {
66 _GLIBCXX_BEGIN_NAMESPACE_VERSION
67 _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
68 
69 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
70 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>;
71 
94 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&#32;=&#32;std::less&lt;_Key&gt;,
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&#32;=&#32;std::allocator&lt;_Key&gt;&#32;&gt;
96 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>multiset
97 &#32;&#32;&#32;&#32;{
98 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_CONCEPT_CHECKS</emphasis>
99 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
100 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc::value_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Alloc_value_type;
101 <emphasis role="preprocessor">#&#32;if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
102 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ae4dc1beb74b88e6b1215e05c397fc7a2">__glibcxx_class_requires</link>(_Key,&#32;_SGIAssignableConcept)
103 <emphasis role="preprocessor">#&#32;endif</emphasis>
104 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1a0efeda71d183434752b2df77dde3e72c">__glibcxx_class_requires4</link>(_Compare,&#32;<emphasis role="keywordtype">bool</emphasis>,&#32;_Key,&#32;_Key,
105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryFunctionConcept)
106 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ae97aa7f8b95f5fdb311dc98ff0c31c72">__glibcxx_class_requires2</link>(_Key,&#32;_Alloc_value_type,&#32;_SameTypeConcept)
107 <emphasis role="preprocessor">#endif</emphasis>
108 
109 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
110 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same&lt;typename&#32;remove_cv&lt;_Key&gt;::type,&#32;_Key&gt;<link linkend="_classvalue">::value</link>,
111 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;std::multiset&#32;must&#32;have&#32;a&#32;non-const,&#32;non-volatile&#32;value_type&quot;</emphasis>);
112 <emphasis role="preprocessor">#&#32;if&#32;__cplusplus&#32;&gt;&#32;201703L&#32;||&#32;defined&#32;__STRICT_ANSI__</emphasis>
113 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same&lt;typename&#32;_Alloc::value_type,&#32;_Key&gt;::value,
114 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;std::multiset&#32;must&#32;have&#32;the&#32;same&#32;value_type&#32;as&#32;its&#32;allocator&quot;</emphasis>);
115 <emphasis role="preprocessor">#&#32;endif</emphasis>
116 <emphasis role="preprocessor">#endif</emphasis>
117 
118 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
119 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;typedefs:</emphasis>
120 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Key&#32;&#32;&#32;&#32;&#32;key_type;
121 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Key&#32;&#32;&#32;&#32;&#32;value_type;
122 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Compare&#32;key_compare;
123 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Compare&#32;value_compare;
124 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Alloc&#32;&#32;&#32;allocator_type;
125 
126 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
128 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Alloc&gt;::template
129 &#32;&#32;&#32;&#32;rebind&lt;_Key&gt;::other&#32;_Key_alloc_type;
130 
131 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Rb_tree&lt;key_type,&#32;value_type,&#32;_Identity&lt;value_type&gt;,
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_compare,&#32;_Key_alloc_type&gt;&#32;_Rep_type;
134 &#32;&#32;&#32;&#32;&#32;&#32;_Rep_type&#32;_M_t;
135 
136 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Key_alloc_type&gt;&#32;_Alloc_traits;
137 
138 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
139 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::pointer&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
140 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::const_pointer&#32;&#32;const_pointer;
141 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::reference&#32;&#32;&#32;&#32;&#32;&#32;reference;
142 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::const_reference&#32;&#32;&#32;&#32;const_reference;
143 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
144 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;DR&#32;103.&#32;set::iterator&#32;is&#32;required&#32;to&#32;be&#32;modifiable,</emphasis>
145 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;but&#32;this&#32;allows&#32;modification&#32;of&#32;keys.</emphasis>
146 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep_type::const_iterator&#32;&#32;&#32;&#32;&#32;iterator;
147 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep_type::const_iterator&#32;&#32;&#32;&#32;&#32;const_iterator;
148 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep_type::const_reverse_iterator&#32;reverse_iterator;
149 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep_type::const_reverse_iterator&#32;const_reverse_iterator;
150 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep_type::size_type&#32;&#32;&#32;&#32;&#32;&#32;size_type;
151 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep_type::difference_type&#32;&#32;&#32;&#32;difference_type;
152 
153 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
154 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>node_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep_type::node_type;
155 <emphasis role="preprocessor">#endif</emphasis>
156 
157 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;allocation/deallocation</emphasis>
161 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
162 &#32;&#32;&#32;&#32;&#32;&#32;multiset()&#32;:&#32;_M_t()&#32;{&#32;}
163 <emphasis role="preprocessor">#else</emphasis>
164 &#32;&#32;&#32;&#32;&#32;&#32;multiset()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
165 <emphasis role="preprocessor">#endif</emphasis>
166 
172 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
173 &#32;&#32;&#32;&#32;&#32;&#32;multiset(<emphasis role="keyword">const</emphasis>&#32;_Compare&amp;&#32;__comp,
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
175 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_t(__comp,&#32;_Key_alloc_type(__a))&#32;{&#32;}
176 
186 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
187 &#32;&#32;&#32;&#32;multiset(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
188 &#32;&#32;&#32;&#32;:&#32;_M_t()
189 &#32;&#32;&#32;&#32;{&#32;_M_t._M_insert_range_equal(__first,&#32;__last);&#32;}
190 
202 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
203 &#32;&#32;&#32;&#32;multiset(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Compare&amp;&#32;__comp,
205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
206 &#32;&#32;&#32;&#32;:&#32;_M_t(__comp,&#32;_Key_alloc_type(__a))
207 &#32;&#32;&#32;&#32;{&#32;_M_t._M_insert_range_equal(__first,&#32;__last);&#32;}
208 
214 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
215 &#32;&#32;&#32;&#32;&#32;&#32;multiset(<emphasis role="keyword">const</emphasis>&#32;multiset&amp;&#32;__x)
216 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_t(__x._M_t)&#32;{&#32;}
217 <emphasis role="preprocessor">#else</emphasis>
218 &#32;&#32;&#32;&#32;&#32;&#32;multiset(<emphasis role="keyword">const</emphasis>&#32;multiset&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
219 
227 &#32;&#32;&#32;&#32;&#32;&#32;multiset(multiset&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
228 
239 &#32;&#32;&#32;&#32;&#32;&#32;multiset(initializer_list&lt;value_type&gt;&#32;__l,
240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Compare&amp;&#32;__comp&#32;=&#32;_Compare(),
241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
242 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_t(__comp,&#32;_Key_alloc_type(__a))
243 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_t._M_insert_range_equal(__l.begin(),&#32;__l.end());&#32;}
244 
246 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
247 &#32;&#32;&#32;&#32;&#32;&#32;multiset(<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
248 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_t(_Key_alloc_type(__a))&#32;{&#32;}
249 
251 &#32;&#32;&#32;&#32;&#32;&#32;multiset(<emphasis role="keyword">const</emphasis>&#32;multiset&amp;&#32;__m,
252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__type_identity_t&lt;allocator_type&gt;&amp;&#32;__a)
253 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_t(__m._M_t,&#32;_Key_alloc_type(__a))&#32;{&#32;}
254 
256 &#32;&#32;&#32;&#32;&#32;&#32;multiset(multiset&amp;&amp;&#32;__m,&#32;<emphasis role="keyword">const</emphasis>&#32;__type_identity_t&lt;allocator_type&gt;&amp;&#32;__a)
257 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(is_nothrow_copy_constructible&lt;_Compare&gt;::value
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;_Alloc_traits::_S_always_equal())
259 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_t(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__m._M_t),&#32;_Key_alloc_type(__a))&#32;{&#32;}
260 
262 &#32;&#32;&#32;&#32;&#32;&#32;multiset(initializer_list&lt;value_type&gt;&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
263 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_t(_Key_alloc_type(__a))
264 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_t._M_insert_range_equal(__l.begin(),&#32;__l.end());&#32;}
265 
267 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
268 &#32;&#32;&#32;&#32;multiset(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
270 &#32;&#32;&#32;&#32;:&#32;_M_t(_Key_alloc_type(__a))
271 &#32;&#32;&#32;&#32;{&#32;_M_t._M_insert_range_equal(__first,&#32;__last);&#32;}
272 
278 &#32;&#32;&#32;&#32;&#32;&#32;~multiset()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
279 <emphasis role="preprocessor">#endif</emphasis>
280 
286 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
287 &#32;&#32;&#32;&#32;&#32;&#32;multiset&amp;
288 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;multiset&amp;&#32;__x)
289 &#32;&#32;&#32;&#32;&#32;&#32;{
290 &#32;&#32;&#32;&#32;_M_t&#32;=&#32;__x._M_t;
291 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
292 &#32;&#32;&#32;&#32;&#32;&#32;}
293 <emphasis role="preprocessor">#else</emphasis>
294 &#32;&#32;&#32;&#32;&#32;&#32;multiset&amp;
295 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;multiset&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
296 
298 &#32;&#32;&#32;&#32;&#32;&#32;multiset&amp;
299 &#32;&#32;&#32;&#32;&#32;&#32;operator=(multiset&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
300 
312 &#32;&#32;&#32;&#32;&#32;&#32;multiset&amp;
313 &#32;&#32;&#32;&#32;&#32;&#32;operator=(initializer_list&lt;value_type&gt;&#32;__l)
314 &#32;&#32;&#32;&#32;&#32;&#32;{
315 &#32;&#32;&#32;&#32;_M_t._M_assign_equal(__l.begin(),&#32;__l.end());
316 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
317 &#32;&#32;&#32;&#32;&#32;&#32;}
318 <emphasis role="preprocessor">#endif</emphasis>
319 
320 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;accessors:</emphasis>
321 
323 &#32;&#32;&#32;&#32;&#32;&#32;key_compare
324 &#32;&#32;&#32;&#32;&#32;&#32;key_comp()<emphasis role="keyword">&#32;const</emphasis>
325 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.key_comp();&#32;}
327 &#32;&#32;&#32;&#32;&#32;&#32;value_compare
328 &#32;&#32;&#32;&#32;&#32;&#32;value_comp()<emphasis role="keyword">&#32;const</emphasis>
329 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.key_comp();&#32;}
331 &#32;&#32;&#32;&#32;&#32;&#32;allocator_type
332 &#32;&#32;&#32;&#32;&#32;&#32;get_allocator()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
333 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;allocator_type(_M_t.get_allocator());&#32;}
334 
340 &#32;&#32;&#32;&#32;&#32;&#32;iterator
341 &#32;&#32;&#32;&#32;&#32;&#32;begin()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
342 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.begin();&#32;}
343 
349 &#32;&#32;&#32;&#32;&#32;&#32;iterator
350 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
351 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.end();&#32;}
352 
358 &#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator
359 &#32;&#32;&#32;&#32;&#32;&#32;rbegin()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
360 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.rbegin();&#32;}
361 
367 &#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator
368 &#32;&#32;&#32;&#32;&#32;&#32;rend()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
369 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.rend();&#32;}
370 
371 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
377 &#32;&#32;&#32;&#32;&#32;&#32;iterator
378 &#32;&#32;&#32;&#32;&#32;&#32;cbegin()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
379 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.begin();&#32;}
380 
386 &#32;&#32;&#32;&#32;&#32;&#32;iterator
387 &#32;&#32;&#32;&#32;&#32;&#32;cend()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
388 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.end();&#32;}
389 
395 &#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator
396 &#32;&#32;&#32;&#32;&#32;&#32;crbegin()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
397 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.rbegin();&#32;}
398 
404 &#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator
405 &#32;&#32;&#32;&#32;&#32;&#32;crend()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
406 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.rend();&#32;}
407 <emphasis role="preprocessor">#endif</emphasis>
408 
410 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;<emphasis role="keywordtype">bool</emphasis>
411 &#32;&#32;&#32;&#32;&#32;&#32;empty()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
412 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.empty();&#32;}
413 
415 &#32;&#32;&#32;&#32;&#32;&#32;size_type
416 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
417 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.size();&#32;}
418 
420 &#32;&#32;&#32;&#32;&#32;&#32;size_type
421 &#32;&#32;&#32;&#32;&#32;&#32;max_size()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
422 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.max_size();&#32;}
423 
437 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
438 &#32;&#32;&#32;&#32;&#32;&#32;swap(multiset&amp;&#32;__x)
439 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT_IF(__is_nothrow_swappable&lt;_Compare&gt;::value)
440 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_t.swap(__x._M_t);&#32;}
441 
442 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;insert/erase</emphasis>
443 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
456 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
457 &#32;&#32;&#32;&#32;iterator
458 &#32;&#32;&#32;&#32;emplace(_Args&amp;&amp;...&#32;__args)
459 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_emplace_equal(std::forward&lt;_Args&gt;(__args)...);&#32;}
460 
482 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
483 &#32;&#32;&#32;&#32;iterator
484 &#32;&#32;&#32;&#32;emplace_hint(const_iterator&#32;__pos,&#32;_Args&amp;&amp;...&#32;__args)
485 &#32;&#32;&#32;&#32;{
486 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_emplace_hint_equal(__pos,
487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Args&gt;(__args)...);
488 &#32;&#32;&#32;&#32;}
489 <emphasis role="preprocessor">#endif</emphasis>
490 
502 &#32;&#32;&#32;&#32;&#32;&#32;iterator
503 &#32;&#32;&#32;&#32;&#32;&#32;insert(<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
504 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_insert_equal(__x);&#32;}
505 
506 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
507 &#32;&#32;&#32;&#32;&#32;&#32;iterator
508 &#32;&#32;&#32;&#32;&#32;&#32;insert(value_type&amp;&amp;&#32;__x)
509 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_insert_equal(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x));&#32;}
510 <emphasis role="preprocessor">#endif</emphasis>
511 
532 &#32;&#32;&#32;&#32;&#32;&#32;iterator
533 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__position,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
534 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_insert_equal_(__position,&#32;__x);&#32;}
535 
536 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
537 &#32;&#32;&#32;&#32;&#32;&#32;iterator
538 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__position,&#32;value_type&amp;&amp;&#32;__x)
539 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_insert_equal_(__position,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x));&#32;}
540 <emphasis role="preprocessor">#endif</emphasis>
541 
550 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
551 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
552 &#32;&#32;&#32;&#32;insert(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
553 &#32;&#32;&#32;&#32;{&#32;_M_t._M_insert_range_equal(__first,&#32;__last);&#32;}
554 
555 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
563 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
564 &#32;&#32;&#32;&#32;&#32;&#32;insert(initializer_list&lt;value_type&gt;&#32;__l)
565 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;this-&gt;insert(__l.begin(),&#32;__l.end());&#32;}
566 <emphasis role="preprocessor">#endif</emphasis>
567 
568 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
570 &#32;&#32;&#32;&#32;&#32;&#32;node_type
571 &#32;&#32;&#32;&#32;&#32;&#32;extract(const_iterator&#32;__pos)
572 &#32;&#32;&#32;&#32;&#32;&#32;{
573 &#32;&#32;&#32;&#32;__glibcxx_assert(__pos&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());
574 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.extract(__pos);
575 &#32;&#32;&#32;&#32;&#32;&#32;}
576 
578 &#32;&#32;&#32;&#32;&#32;&#32;node_type
579 &#32;&#32;&#32;&#32;&#32;&#32;extract(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
580 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.extract(__x);&#32;}
581 
583 &#32;&#32;&#32;&#32;&#32;&#32;iterator
584 &#32;&#32;&#32;&#32;&#32;&#32;insert(node_type&amp;&amp;&#32;__nh)
585 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_reinsert_node_equal(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__nh));&#32;}
586 
588 &#32;&#32;&#32;&#32;&#32;&#32;iterator
589 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__hint,&#32;node_type&amp;&amp;&#32;__nh)
590 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_reinsert_node_hint_equal(__hint,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__nh));&#32;}
591 
592 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>&gt;
593 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>std::_Rb_tree_merge_helper;
594 
595 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Compare1&gt;
596 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
597 &#32;&#32;&#32;&#32;merge(multiset&lt;_Key,&#32;_Compare1,&#32;_Alloc&gt;&amp;&#32;__source)
598 &#32;&#32;&#32;&#32;{
599 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Merge_helper&#32;=&#32;_Rb_tree_merge_helper&lt;multiset,&#32;_Compare1&gt;;
600 &#32;&#32;&#32;&#32;&#32;&#32;_M_t._M_merge_equal(_Merge_helper::_S_get_tree(__source));
601 &#32;&#32;&#32;&#32;}
602 
603 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Compare1&gt;
604 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
605 &#32;&#32;&#32;&#32;merge(multiset&lt;_Key,&#32;_Compare1,&#32;_Alloc&gt;&amp;&amp;&#32;__source)
606 &#32;&#32;&#32;&#32;{&#32;merge(__source);&#32;}
607 
608 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Compare1&gt;
609 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
610 &#32;&#32;&#32;&#32;merge(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, _Compare1, _Alloc&gt;</link>&amp;&#32;__source)
611 &#32;&#32;&#32;&#32;{
612 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Merge_helper&#32;=&#32;_Rb_tree_merge_helper&lt;multiset,&#32;_Compare1&gt;;
613 &#32;&#32;&#32;&#32;&#32;&#32;_M_t._M_merge_equal(_Merge_helper::_S_get_tree(__source));
614 &#32;&#32;&#32;&#32;}
615 
616 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Compare1&gt;
617 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
618 &#32;&#32;&#32;&#32;merge(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, _Compare1, _Alloc&gt;</link>&amp;&amp;&#32;__source)
619 &#32;&#32;&#32;&#32;{&#32;merge(__source);&#32;}
620 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
621 
622 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
623 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
624 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;DR&#32;130.&#32;Associative&#32;erase&#32;should&#32;return&#32;an&#32;iterator.</emphasis>
638 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ad7d29ac44393cedd1b17fc5dc40186a8">_GLIBCXX_ABI_TAG_CXX11</link>
639 &#32;&#32;&#32;&#32;&#32;&#32;iterator
640 &#32;&#32;&#32;&#32;&#32;&#32;erase(const_iterator&#32;__position)
641 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.erase(__position);&#32;}
642 <emphasis role="preprocessor">#else</emphasis>
653 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
654 &#32;&#32;&#32;&#32;&#32;&#32;erase(iterator&#32;__position)
655 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_t.erase(__position);&#32;}
656 <emphasis role="preprocessor">#endif</emphasis>
657 
669 &#32;&#32;&#32;&#32;&#32;&#32;size_type
670 &#32;&#32;&#32;&#32;&#32;&#32;erase(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
671 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.erase(__x);&#32;}
672 
673 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
674 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
675 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;DR&#32;130.&#32;Associative&#32;erase&#32;should&#32;return&#32;an&#32;iterator.</emphasis>
690 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ad7d29ac44393cedd1b17fc5dc40186a8">_GLIBCXX_ABI_TAG_CXX11</link>
691 &#32;&#32;&#32;&#32;&#32;&#32;iterator
692 &#32;&#32;&#32;&#32;&#32;&#32;erase(const_iterator&#32;__first,&#32;const_iterator&#32;__last)
693 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.erase(__first,&#32;__last);&#32;}
694 <emphasis role="preprocessor">#else</emphasis>
707 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
708 &#32;&#32;&#32;&#32;&#32;&#32;erase(iterator&#32;__first,&#32;iterator&#32;__last)
709 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_t.erase(__first,&#32;__last);&#32;}
710 <emphasis role="preprocessor">#endif</emphasis>
711 
718 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
719 &#32;&#32;&#32;&#32;&#32;&#32;clear()&#32;_GLIBCXX_NOEXCEPT
720 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_t.clear();&#32;}
721 
722 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;multiset&#32;operations:</emphasis>
723 
725 
730 &#32;&#32;&#32;&#32;&#32;&#32;size_type
731 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
732 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.count(__x);&#32;}
733 
734 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
735 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
736 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
737 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(_M_t._M_count_tr(__x))
738 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_count_tr(__x);&#32;}
739 <emphasis role="preprocessor">#endif</emphasis>
741 
742 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
744 
749 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
750 &#32;&#32;&#32;&#32;&#32;&#32;contains(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
751 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.find(__x)&#32;!=&#32;_M_t.end();&#32;}
752 
753 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
754 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
755 &#32;&#32;&#32;&#32;contains(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>
756 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(_M_t._M_find_tr(__x),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>(),&#32;<emphasis role="keyword">true</emphasis>)
757 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_find_tr(__x)&#32;!=&#32;_M_t.end();&#32;}
759 <emphasis role="preprocessor">#endif</emphasis>
760 
761 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
762 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;214.&#32;&#32;set::find()&#32;missing&#32;const&#32;overload</emphasis>
764 
775 &#32;&#32;&#32;&#32;&#32;&#32;iterator
776 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
777 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.find(__x);&#32;}
778 
779 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
780 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
781 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.find(__x);&#32;}
782 
783 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
784 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
785 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
786 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)
787 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(iterator{_M_t._M_find_tr(__x)})
788 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator{_M_t._M_find_tr(__x)};&#32;}
789 
790 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
791 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
792 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>
793 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(const_iterator{_M_t._M_find_tr(__x)})
794 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator{_M_t._M_find_tr(__x)};&#32;}
795 <emphasis role="preprocessor">#endif</emphasis>
797 
799 
810 &#32;&#32;&#32;&#32;&#32;&#32;iterator
811 &#32;&#32;&#32;&#32;&#32;&#32;lower_bound(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
812 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.lower_bound(__x);&#32;}
813 
814 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
815 &#32;&#32;&#32;&#32;&#32;&#32;lower_bound(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
816 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.lower_bound(__x);&#32;}
817 
818 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
819 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
820 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
821 &#32;&#32;&#32;&#32;lower_bound(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)
822 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(iterator(_M_t._M_lower_bound_tr(__x)))
823 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(_M_t._M_lower_bound_tr(__x));&#32;}
824 
825 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
826 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
827 &#32;&#32;&#32;&#32;lower_bound(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>
828 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(iterator(_M_t._M_lower_bound_tr(__x)))
829 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(_M_t._M_lower_bound_tr(__x));&#32;}
830 <emphasis role="preprocessor">#endif</emphasis>
832 
834 
840 &#32;&#32;&#32;&#32;&#32;&#32;iterator
841 &#32;&#32;&#32;&#32;&#32;&#32;upper_bound(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
842 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.upper_bound(__x);&#32;}
843 
844 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
845 &#32;&#32;&#32;&#32;&#32;&#32;upper_bound(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
846 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.upper_bound(__x);&#32;}
847 
848 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
849 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
850 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
851 &#32;&#32;&#32;&#32;upper_bound(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)
852 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(iterator(_M_t._M_upper_bound_tr(__x)))
853 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(_M_t._M_upper_bound_tr(__x));&#32;}
854 
855 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
856 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
857 &#32;&#32;&#32;&#32;upper_bound(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>
858 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(iterator(_M_t._M_upper_bound_tr(__x)))
859 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(_M_t._M_upper_bound_tr(__x));&#32;}
860 <emphasis role="preprocessor">#endif</emphasis>
862 
864 
879 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;iterator&gt;
880 &#32;&#32;&#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
881 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.equal_range(__x);&#32;}
882 
883 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;const_iterator,&#32;const_iterator&gt;
884 &#32;&#32;&#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
885 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.equal_range(__x);&#32;}
886 
887 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
888 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
889 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
890 &#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)
891 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(pair&lt;iterator,&#32;iterator&gt;(_M_t._M_equal_range_tr(__x)))
892 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;pair&lt;iterator,&#32;iterator&gt;(_M_t._M_equal_range_tr(__x));&#32;}
893 
894 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
895 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
896 &#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>
897 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(pair&lt;iterator,&#32;iterator&gt;(_M_t._M_equal_range_tr(__x)))
898 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;pair&lt;iterator,&#32;iterator&gt;(_M_t._M_equal_range_tr(__x));&#32;}
899 <emphasis role="preprocessor">#endif</emphasis>
901 
902 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_K1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_C1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A1&gt;
903 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
904 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;multiset&lt;_K1,&#32;_C1,&#32;_A1&gt;&amp;,
905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;multiset&lt;_K1,&#32;_C1,&#32;_A1&gt;&amp;);
906 
907 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
908 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_K1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_C1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A1&gt;
909 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;__detail::__synth3way_t&lt;_K1&gt;
910 &#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;multiset&lt;_K1,&#32;_C1,&#32;_A1&gt;&amp;,
911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;multiset&lt;_K1,&#32;_C1,&#32;_A1&gt;&amp;);
912 <emphasis role="preprocessor">#else</emphasis>
913 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_K1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_C1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A1&gt;
914 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
915 &#32;&#32;&#32;&#32;operator&lt;&#32;(<emphasis role="keyword">const</emphasis>&#32;multiset&lt;_K1,&#32;_C1,&#32;_A1&gt;&amp;,
916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;multiset&lt;_K1,&#32;_C1,&#32;_A1&gt;&amp;);
917 <emphasis role="preprocessor">#endif</emphasis>
918 &#32;&#32;&#32;&#32;};
919 
920 <emphasis role="preprocessor">#if&#32;__cpp_deduction_guides&#32;&gt;=&#32;201606</emphasis>
921 
922 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&#32;=
924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;less&lt;typename&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;,
925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&#32;=
926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator&lt;typename&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;,
927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;,
928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocator&lt;_Compare&gt;,
929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
930 &#32;&#32;&#32;&#32;multiset(_InputIterator,&#32;_InputIterator,
931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;=&#32;_Compare(),&#32;_Allocator&#32;=&#32;_Allocator())
932 &#32;&#32;&#32;&#32;-&gt;&#32;multiset&lt;typename&#32;iterator_traits&lt;_InputIterator&gt;::value_type,
933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare,&#32;_Allocator&gt;;
934 
935 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,
936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&#32;=&#32;less&lt;_Key&gt;,
937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&#32;=&#32;allocator&lt;_Key&gt;,
938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocator&lt;_Compare&gt;,
939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
940 &#32;&#32;&#32;&#32;multiset(initializer_list&lt;_Key&gt;,
941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;=&#32;_Compare(),&#32;_Allocator&#32;=&#32;_Allocator())
942 &#32;&#32;&#32;&#32;-&gt;&#32;multiset&lt;_Key,&#32;_Compare,&#32;_Allocator&gt;;
943 
944 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator,
945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;,
946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
947 &#32;&#32;&#32;&#32;multiset(_InputIterator,&#32;_InputIterator,&#32;_Allocator)
948 &#32;&#32;&#32;&#32;-&gt;&#32;multiset&lt;typename&#32;iterator_traits&lt;_InputIterator&gt;::value_type,
949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;less&lt;typename&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;,
950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Allocator&gt;;
951 
952 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator,
953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
954 &#32;&#32;&#32;&#32;multiset(initializer_list&lt;_Key&gt;,&#32;_Allocator)
955 &#32;&#32;&#32;&#32;-&gt;&#32;multiset&lt;_Key,&#32;less&lt;_Key&gt;,&#32;_Allocator&gt;;
956 
957 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;deduction&#32;guides</emphasis>
958 
970 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
971 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
972 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;multiset&lt;_Key,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__x,
973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;multiset&lt;_Key,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__y)
974 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_t&#32;==&#32;__y._M_t;&#32;}
975 
976 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
991 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
992 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;__detail::__synth3way_t&lt;_Key&gt;
993 &#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;multiset&lt;_Key,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__x,
994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;multiset&lt;_Key,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__y)
995 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_t&#32;&lt;=&gt;&#32;__y._M_t;&#32;}
996 <emphasis role="preprocessor">#else</emphasis>
1008 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1009 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1010 &#32;&#32;&#32;&#32;operator&lt;(<emphasis role="keyword">const</emphasis>&#32;multiset&lt;_Key,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__x,
1011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;multiset&lt;_Key,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__y)
1012 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_t&#32;&lt;&#32;__y._M_t;&#32;}
1013 
1015 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1016 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1017 &#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;multiset&lt;_Key,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__x,
1018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;multiset&lt;_Key,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__y)
1019 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__x&#32;==&#32;__y);&#32;}
1020 
1022 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1023 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1024 &#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;multiset&lt;_Key,_Compare,_Alloc&gt;&amp;&#32;__x,
1025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;multiset&lt;_Key,_Compare,_Alloc&gt;&amp;&#32;__y)
1026 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__y&#32;&lt;&#32;__x;&#32;}
1027 
1029 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1030 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1031 &#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;multiset&lt;_Key,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__x,
1032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;multiset&lt;_Key,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__y)
1033 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__y&#32;&lt;&#32;__x);&#32;}
1034 
1036 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1037 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1038 &#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;multiset&lt;_Key,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__x,
1039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;multiset&lt;_Key,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__y)
1040 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__x&#32;&lt;&#32;__y);&#32;}
1041 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;three-way&#32;comparison</emphasis>
1042 
1044 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1045 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1046 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(multiset&lt;_Key,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__x,
1047 &#32;&#32;&#32;&#32;&#32;multiset&lt;_Key,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__y)
1048 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT_IF(<emphasis role="keyword">noexcept</emphasis>(__x.swap(__y)))
1049 &#32;&#32;&#32;&#32;{&#32;__x.swap(__y);&#32;}
1050 
1051 _GLIBCXX_END_NAMESPACE_CONTAINER
1052 
1053 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
1054 &#32;&#32;<emphasis role="comment">//&#32;Allow&#32;std::multiset&#32;access&#32;to&#32;internals&#32;of&#32;compatible&#32;sets.</emphasis>
1055 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cmp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cmp2&gt;
1056 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>
1057 &#32;&#32;&#32;&#32;_Rb_tree_merge_helper&lt;_GLIBCXX_STD_C::multiset&lt;_Val,&#32;_Cmp1,&#32;_Alloc&gt;,
1058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Cmp2&gt;
1059 &#32;&#32;&#32;&#32;{
1060 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1061 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>_GLIBCXX_STD_C::multiset&lt;_Val,&#32;_Cmp1,&#32;_Alloc&gt;;
1062 
1063 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;
1064 &#32;&#32;&#32;&#32;&#32;&#32;_S_get_tree(_GLIBCXX_STD_C::set&lt;_Val,&#32;_Cmp2,&#32;_Alloc&gt;&amp;&#32;__set)
1065 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__set._M_t;&#32;}
1066 
1067 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;
1068 &#32;&#32;&#32;&#32;&#32;&#32;_S_get_tree(_GLIBCXX_STD_C::multiset&lt;_Val,&#32;_Cmp2,&#32;_Alloc&gt;&amp;&#32;__set)
1069 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__set._M_t;&#32;}
1070 &#32;&#32;&#32;&#32;};
1071 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
1072 
1073 _GLIBCXX_END_NAMESPACE_VERSION
1074 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
1075 
1076 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_STL_MULTISET_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
