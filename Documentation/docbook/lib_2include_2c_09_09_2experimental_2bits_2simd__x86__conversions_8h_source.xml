<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2experimental_2bits_2simd__x86__conversions_8h_source" xml:lang="en-US">
<title>simd_x86_conversions.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/experimental/bits/simd_x86_conversions.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;x86&#32;specific&#32;conversion&#32;optimizations&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2020-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_EXPERIMENTAL_SIMD_X86_CONVERSIONS_H</emphasis>
26 <emphasis role="preprocessor">#define&#32;_GLIBCXX_EXPERIMENTAL_SIMD_X86_CONVERSIONS_H</emphasis>
27 
28 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
29 
30 <emphasis role="comment">//&#32;work&#32;around&#32;PR85827</emphasis>
31 <emphasis role="comment">//&#32;1-arg&#32;__convert_x86&#32;{{{1</emphasis>
32 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keyword">typename</emphasis>&#32;_V,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
33 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_To
34 &#32;&#32;__convert_x86(_V&#32;__v)
35 &#32;&#32;{
36 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__is_vector_type_v&lt;_V&gt;);
37 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits::value_type;
38 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&#32;=&#32;_Traits::_S_full_size;
39 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__intrin&#32;=&#32;__to_intrin(__v);
40 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Up&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_VectorTraits&lt;_To&gt;::value_type;
41 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_M&#32;=&#32;_VectorTraits&lt;_To&gt;::_S_full_size;
42 
43 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[xyz]_to_[xyz]&#32;{{{2</emphasis>
44 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__x_to_x
45 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(__v)&#32;&lt;=&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;&lt;=&#32;16;
46 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__x_to_y
47 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(__v)&#32;&lt;=&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;32;
48 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__x_to_z
49 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(__v)&#32;&lt;=&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;64;
50 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__y_to_x
51 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(__v)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;&lt;=&#32;16;
52 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__y_to_y
53 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(__v)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;32;
54 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__y_to_z
55 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(__v)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;64;
56 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__z_to_x
57 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(__v)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;&lt;=&#32;16;
58 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__z_to_y
59 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(__v)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;32;
60 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__z_to_z
61 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(__v)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;64;
62 
63 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;iX_to_iX&#32;{{{2</emphasis>
64 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i_to_i
65 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Up&gt;&#32;&amp;&amp;&#32;is_integral_v&lt;_Tp&gt;;
66 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i8_to_i16
67 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__i_to_i&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;2;
68 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i8_to_i32
69 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__i_to_i&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4;
70 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i8_to_i64
71 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__i_to_i&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8;
72 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i16_to_i8
73 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__i_to_i&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;1;
74 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i16_to_i32
75 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__i_to_i&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4;
76 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i16_to_i64
77 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__i_to_i&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8;
78 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i32_to_i8
79 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__i_to_i&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;1;
80 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i32_to_i16
81 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__i_to_i&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;2;
82 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i32_to_i64
83 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__i_to_i&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8;
84 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i64_to_i8
85 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__i_to_i&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;1;
86 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i64_to_i16
87 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__i_to_i&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;2;
88 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i64_to_i32
89 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__i_to_i&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4;
90 
91 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[fsu]X_to_[fsu]X&#32;{{{2</emphasis>
92 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ibw&#32;=&#32;integral&#32;&amp;&amp;&#32;byte&#32;or&#32;word,&#32;i.e.&#32;char&#32;and&#32;short&#32;with&#32;any&#32;signedness</emphasis>
93 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__s64_to_f32
94 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8
95 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4;
96 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__s32_to_f32
97 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4
98 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4;
99 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__s16_to_f32
100 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2
101 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4;
102 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__s8_to_f32
103 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1
104 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4;
105 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__u64_to_f32
106 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8
107 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4;
108 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__u32_to_f32
109 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4
110 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4;
111 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__u16_to_f32
112 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2
113 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4;
114 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__u8_to_f32
115 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1
116 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4;
117 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__s64_to_f64
118 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8
119 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8;
120 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__s32_to_f64
121 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4
122 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8;
123 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__u64_to_f64
124 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8
125 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8;
126 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__u32_to_f64
127 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4
128 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8;
129 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__f32_to_s64
130 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Up&gt;&#32;&amp;&amp;&#32;is_signed_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8
131 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4;
132 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__f32_to_s32
133 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Up&gt;&#32;&amp;&amp;&#32;is_signed_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4
134 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4;
135 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__f32_to_u64
136 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Up&gt;&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8
137 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4;
138 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__f32_to_u32
139 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Up&gt;&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4
140 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4;
141 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__f64_to_s64
142 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Up&gt;&#32;&amp;&amp;&#32;is_signed_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8
143 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8;
144 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__f64_to_s32
145 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Up&gt;&#32;&amp;&amp;&#32;is_signed_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4
146 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8;
147 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__f64_to_u64
148 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Up&gt;&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8
149 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8;
150 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__f64_to_u32
151 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Up&gt;&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4
152 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8;
153 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__ibw_to_f32
154 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;&lt;=&#32;2
155 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4;
156 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__ibw_to_f64
157 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;&lt;=&#32;2
158 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8;
159 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__f32_to_ibw
160 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;&lt;=&#32;2
161 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4;
162 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__f64_to_ibw
163 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;&lt;=&#32;2
164 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8;
165 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__f32_to_f64
166 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_floating_point_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4
167 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8;
168 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__f64_to_f32
169 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_floating_point_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8
170 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4;
171 
172 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__i_to_i&#32;&amp;&amp;&#32;__y_to_x&#32;&amp;&amp;&#32;!__have_avx2)&#32;<emphasis role="comment">//{{{2</emphasis>
173 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__convert_x86&lt;_To&gt;(__lo128(__v),&#32;__hi128(__v));
174 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__i_to_i&#32;&amp;&amp;&#32;__x_to_y&#32;&amp;&amp;&#32;!__have_avx2)&#32;<emphasis role="comment">//{{{2</emphasis>
175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__concat(__convert_x86&lt;__vector_type_t&lt;_Up,&#32;_M&#32;/&#32;2&gt;&gt;(__v),
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__convert_x86&lt;__vector_type_t&lt;_Up,&#32;_M&#32;/&#32;2&gt;&gt;(
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__extract_part&lt;1,&#32;_Np&#32;/&#32;_M&#32;*&#32;2&gt;(__v)));
178 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__i_to_i)&#32;<emphasis role="comment">//{{{2</emphasis>
179 &#32;&#32;&#32;&#32;&#32;&#32;{
180 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__x_to_x&#32;||&#32;__have_avx2,
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;integral&#32;conversions&#32;with&#32;ymm&#32;registers&#32;require&#32;AVX2&quot;</emphasis>);
182 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__have_avx512bw
183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;((<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;&gt;=&#32;4&#32;||&#32;<emphasis role="keyword">sizeof</emphasis>(__v)&#32;&lt;&#32;64)
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;&gt;=&#32;4&#32;||&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;&lt;&#32;64)),
185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;8/16-bit&#32;integers&#32;in&#32;zmm&#32;registers&#32;require&#32;AVX512BW&quot;</emphasis>);
186 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>((<emphasis role="keyword">sizeof</emphasis>(__v)&#32;&lt;&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;&lt;&#32;64)&#32;||&#32;__have_avx512f,
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;integral&#32;conversions&#32;with&#32;ymm&#32;registers&#32;require&#32;AVX2&quot;</emphasis>);
188 &#32;&#32;&#32;&#32;&#32;&#32;}
189 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_floating_point_v&lt;_Tp&gt;&#32;==&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="comment">//{{{2</emphasis>
190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(_Up))
191 &#32;&#32;&#32;&#32;&#32;&#32;{
192 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;conversion&#32;uses&#32;simple&#32;bit&#32;reinterpretation&#32;(or&#32;no&#32;conversion&#32;at&#32;all)</emphasis>
193 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&gt;=&#32;_M)
194 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(__v);
195 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
196 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__zero_extend(__vector_bitcast&lt;_Up&gt;(__v));
197 &#32;&#32;&#32;&#32;&#32;&#32;}
198 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&lt;&#32;_M&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;&gt;&#32;16)&#32;<emphasis role="comment">//{{{2</emphasis>
199 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;zero&#32;extend&#32;(eg.&#32;xmm&#32;-&gt;&#32;ymm)</emphasis>
200 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__zero_extend(
201 &#32;&#32;&#32;&#32;__convert_x86&lt;__vector_type_t&lt;
202 &#32;&#32;&#32;&#32;&#32;&#32;_Up,&#32;(16&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;&gt;&#32;_Np)&#32;?&#32;16&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;:&#32;_Np&gt;&gt;(__v));
203 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&gt;&#32;_M&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__v)&#32;&gt;&#32;16)&#32;<emphasis role="comment">//{{{2</emphasis>
204 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;partial&#32;input&#32;(eg.&#32;ymm&#32;-&gt;&#32;xmm)</emphasis>
205 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__convert_x86&lt;_To&gt;(__extract_part&lt;0,&#32;_Np&#32;/&#32;_M&gt;(__v));
206 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__i64_to_i32)&#32;<emphasis role="comment">//{{{2</emphasis>
207 &#32;&#32;&#32;&#32;&#32;&#32;{
208 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;__have_avx512vl)
209 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_cvtepi64_epi32(__intrin));
210 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x)
211 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__auto_bitcast(
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1aee5c5734217b10ca090b1d449a653d73">_mm_shuffle_ps</link>(__vector_bitcast&lt;float&gt;(__v),&#32;__m128(),&#32;8));
213 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_x&#32;&amp;&amp;&#32;__have_avx512vl)
214 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm256_cvtepi64_epi32(__intrin));
215 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_x&#32;&amp;&amp;&#32;__have_avx512f)
216 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lo128(_mm512_cvtepi64_epi32(__auto_bitcast(__v))));
218 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_x)
219 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lo128(<link linkend="__classes_2lib_2include_2avx2intrin_8h_1a54259d86453e39622e7e4f265a0c257b">_mm256_permute4x64_epi64</link>(<link linkend="__classes_2lib_2include_2avx2intrin_8h_1a5e618ac01373d00bb23a6de45c2e4516">_mm256_shuffle_epi32</link>(__intrin,&#32;8),
221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0&#32;+&#32;4&#32;*&#32;2)));
222 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__z_to_y)
223 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm512_cvtepi64_epi32(__intrin));
224 &#32;&#32;&#32;&#32;&#32;&#32;}
225 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__i64_to_i16)&#32;<emphasis role="comment">//{{{2</emphasis>
226 &#32;&#32;&#32;&#32;&#32;&#32;{
227 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;__have_avx512vl)
228 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_cvtepi64_epi16(__intrin));
229 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;__have_avx512f)
230 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lo128(_mm512_cvtepi64_epi16(__auto_bitcast(__v))));
232 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;__have_ssse3)
233 &#32;&#32;&#32;&#32;&#32;&#32;{
234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_shuffle_epi8(__intrin,
236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_setr_epi8(0,&#32;1,&#32;8,&#32;9,&#32;-0x80,&#32;-0x80,&#32;-0x80,
237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,
238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80)));
239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;fallback&#32;without&#32;SSSE3</emphasis>
240 &#32;&#32;&#32;&#32;&#32;&#32;}
241 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_x&#32;&amp;&amp;&#32;__have_avx512vl)
242 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm256_cvtepi64_epi16(__intrin));
243 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_x&#32;&amp;&amp;&#32;__have_avx512f)
244 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lo128(_mm512_cvtepi64_epi16(__auto_bitcast(__v))));
246 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_x)
247 &#32;&#32;&#32;&#32;&#32;&#32;{
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__a&#32;=&#32;_mm256_shuffle_epi8(
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__intrin,
250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_setr_epi8(0,&#32;1,&#32;8,&#32;9,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,
251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,
252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;0,&#32;1,&#32;8,&#32;9,&#32;-0x80,
253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-0x80));
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(__lo128(__a)&#32;|&#32;__hi128(__a));
256 &#32;&#32;&#32;&#32;&#32;&#32;}
257 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__z_to_x)
258 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm512_cvtepi64_epi16(__intrin));
259 &#32;&#32;&#32;&#32;&#32;&#32;}
260 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__i64_to_i8)&#32;<emphasis role="comment">//{{{2</emphasis>
261 &#32;&#32;&#32;&#32;&#32;&#32;{
262 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;__have_avx512vl)
263 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_cvtepi64_epi8(__intrin));
264 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;__have_avx512f)
265 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lo128(_mm512_cvtepi64_epi8(__zero_extend(__intrin))));
267 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_x&#32;&amp;&amp;&#32;__have_avx512vl)
268 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm256_cvtepi64_epi8(__intrin));
269 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_x&#32;&amp;&amp;&#32;__have_avx512f)
270 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_cvtepi64_epi8(__zero_extend(__intrin)));
272 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__z_to_x)
273 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm512_cvtepi64_epi8(__intrin));
274 &#32;&#32;&#32;&#32;&#32;&#32;}
275 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__i32_to_i64)&#32;<emphasis role="comment">//{{{2</emphasis>
276 &#32;&#32;&#32;&#32;&#32;&#32;{
277 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse4_1&#32;&amp;&amp;&#32;__x_to_x)
278 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(is_signed_v&lt;_Tp&gt;
279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;_mm_cvtepi32_epi64(__intrin)
280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_mm_cvtepu32_epi64(__intrin));
281 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x)
282 &#32;&#32;&#32;&#32;&#32;&#32;{
283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpacklo_epi32(__intrin,&#32;is_signed_v&lt;_Tp&gt;
285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;_mm_srai_epi32(__intrin,&#32;31)
286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;__m128i()));
287 &#32;&#32;&#32;&#32;&#32;&#32;}
288 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_y)
289 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(is_signed_v&lt;_Tp&gt;
290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;_mm256_cvtepi32_epi64(__intrin)
291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_mm256_cvtepu32_epi64(__intrin));
292 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_z)
293 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(is_signed_v&lt;_Tp&gt;
294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;_mm512_cvtepi32_epi64(__intrin)
295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_mm512_cvtepu32_epi64(__intrin));
296 &#32;&#32;&#32;&#32;&#32;&#32;}
297 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__i32_to_i16)&#32;<emphasis role="comment">//{{{2</emphasis>
298 &#32;&#32;&#32;&#32;&#32;&#32;{
299 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;__have_avx512vl)
300 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_cvtepi32_epi16(__intrin));
301 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;__have_avx512f)
302 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lo128(_mm512_cvtepi32_epi16(__auto_bitcast(__v))));
304 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;__have_ssse3)
305 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_shuffle_epi8(
306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__intrin,&#32;_mm_setr_epi8(0,&#32;1,&#32;4,&#32;5,&#32;8,&#32;9,&#32;12,&#32;13,&#32;-0x80,&#32;-0x80,
307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80)));
308 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x)
309 &#32;&#32;&#32;&#32;&#32;&#32;{
310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__a&#32;=&#32;_mm_unpacklo_epi16(__intrin,&#32;__m128i());&#32;<emphasis role="comment">//&#32;0o.o&#32;1o.o</emphasis>
311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__b&#32;=&#32;_mm_unpackhi_epi16(__intrin,&#32;__m128i());&#32;<emphasis role="comment">//&#32;2o.o&#32;3o.o</emphasis>
312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__c&#32;=&#32;_mm_unpacklo_epi16(__a,&#32;__b);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;02oo&#32;..oo</emphasis>
313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__d&#32;=&#32;_mm_unpackhi_epi16(__a,&#32;__b);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;13oo&#32;..oo</emphasis>
314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpacklo_epi16(__c,&#32;__d));&#32;<emphasis role="comment">//&#32;0123&#32;oooo</emphasis>
316 &#32;&#32;&#32;&#32;&#32;&#32;}
317 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_x&#32;&amp;&amp;&#32;__have_avx512vl)
318 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm256_cvtepi32_epi16(__intrin));
319 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_x&#32;&amp;&amp;&#32;__have_avx512f)
320 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lo128(_mm512_cvtepi32_epi16(__auto_bitcast(__v))));
322 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_x)
323 &#32;&#32;&#32;&#32;&#32;&#32;{
324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__a&#32;=&#32;_mm256_shuffle_epi8(
325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__intrin,
326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_setr_epi8(0,&#32;1,&#32;4,&#32;5,&#32;8,&#32;9,&#32;12,&#32;13,&#32;-0x80,&#32;-0x80,&#32;-0x80,
327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;0,&#32;1,&#32;4,&#32;5,&#32;8,
328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;9,&#32;12,&#32;13,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,
329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-0x80,&#32;-0x80,&#32;-0x80));
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(__lo128(
331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx2intrin_8h_1a54259d86453e39622e7e4f265a0c257b">_mm256_permute4x64_epi64</link>(__a,
332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xf8)));&#32;<emphasis role="comment">//&#32;__a[0]&#32;__a[2]&#32;|&#32;__a[3]&#32;__a[3]</emphasis>
333 &#32;&#32;&#32;&#32;&#32;&#32;}
334 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__z_to_y)
335 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm512_cvtepi32_epi16(__intrin));
336 &#32;&#32;&#32;&#32;&#32;&#32;}
337 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__i32_to_i8)&#32;<emphasis role="comment">//{{{2</emphasis>
338 &#32;&#32;&#32;&#32;&#32;&#32;{
339 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;__have_avx512vl)
340 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_cvtepi32_epi8(__intrin));
341 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;__have_avx512f)
342 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lo128(_mm512_cvtepi32_epi8(__zero_extend(__intrin))));
344 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;__have_ssse3)
345 &#32;&#32;&#32;&#32;&#32;&#32;{
346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_shuffle_epi8(__intrin,
348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_setr_epi8(0,&#32;4,&#32;8,&#32;12,&#32;-0x80,&#32;-0x80,&#32;-0x80,
349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,
350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80)));
351 &#32;&#32;&#32;&#32;&#32;&#32;}
352 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x)
353 &#32;&#32;&#32;&#32;&#32;&#32;{
354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__a
355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm_unpacklo_epi8(__intrin,&#32;__intrin);&#32;<emphasis role="comment">//&#32;0...&#32;....&#32;1...&#32;....</emphasis>
356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__b
357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm_unpackhi_epi8(__intrin,&#32;__intrin);&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2...&#32;....&#32;3...&#32;....</emphasis>
358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__c&#32;=&#32;_mm_unpacklo_epi8(__a,&#32;__b);&#32;<emphasis role="comment">//&#32;02..&#32;....&#32;....&#32;....</emphasis>
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__d&#32;=&#32;_mm_unpackhi_epi8(__a,&#32;__b);&#32;<emphasis role="comment">//&#32;13..&#32;....&#32;....&#32;....</emphasis>
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__e&#32;=&#32;_mm_unpacklo_epi8(__c,&#32;__d);&#32;<emphasis role="comment">//&#32;0123&#32;....&#32;....&#32;....</emphasis>
361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(__e&#32;&amp;&#32;_mm_cvtsi32_si128(-1));
362 &#32;&#32;&#32;&#32;&#32;&#32;}
363 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_x&#32;&amp;&amp;&#32;__have_avx512vl)
364 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm256_cvtepi32_epi8(__intrin));
365 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_x&#32;&amp;&amp;&#32;__have_avx512f)
366 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_cvtepi32_epi8(__zero_extend(__intrin)));
368 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__z_to_x)
369 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm512_cvtepi32_epi8(__intrin));
370 &#32;&#32;&#32;&#32;&#32;&#32;}
371 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__i16_to_i64)&#32;<emphasis role="comment">//{{{2</emphasis>
372 &#32;&#32;&#32;&#32;&#32;&#32;{
373 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;__have_sse4_1)
374 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(is_signed_v&lt;_Tp&gt;
375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;_mm_cvtepi16_epi64(__intrin)
376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_mm_cvtepu16_epi64(__intrin));
377 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;is_signed_v&lt;_Tp&gt;)
378 &#32;&#32;&#32;&#32;&#32;&#32;{
379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__x&#32;=&#32;_mm_srai_epi16(__intrin,&#32;15);
380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__y&#32;=&#32;_mm_unpacklo_epi16(__intrin,&#32;__x);
381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;_mm_unpacklo_epi16(__x,&#32;__x);
382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_unpacklo_epi32(__y,&#32;__x));
383 &#32;&#32;&#32;&#32;&#32;&#32;}
384 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x)
385 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpacklo_epi32(_mm_unpacklo_epi16(__intrin,&#32;__m128i()),
387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i()));
388 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_y)
389 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(is_signed_v&lt;_Tp&gt;
390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;_mm256_cvtepi16_epi64(__intrin)
391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_mm256_cvtepu16_epi64(__intrin));
392 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_z)
393 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(is_signed_v&lt;_Tp&gt;
394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;_mm512_cvtepi16_epi64(__intrin)
395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_mm512_cvtepu16_epi64(__intrin));
396 &#32;&#32;&#32;&#32;&#32;&#32;}
397 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__i16_to_i32)&#32;<emphasis role="comment">//{{{2</emphasis>
398 &#32;&#32;&#32;&#32;&#32;&#32;{
399 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;__have_sse4_1)
400 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(is_signed_v&lt;_Tp&gt;
401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;_mm_cvtepi16_epi32(__intrin)
402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_mm_cvtepu16_epi32(__intrin));
403 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;is_signed_v&lt;_Tp&gt;)
404 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_srai_epi32(_mm_unpacklo_epi16(__intrin,&#32;__intrin),&#32;16));
406 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Tp&gt;)
407 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_unpacklo_epi16(__intrin,&#32;__m128i()));
408 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_y)
409 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(is_signed_v&lt;_Tp&gt;
410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;_mm256_cvtepi16_epi32(__intrin)
411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_mm256_cvtepu16_epi32(__intrin));
412 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_z)
413 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(is_signed_v&lt;_Tp&gt;
414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;_mm512_cvtepi16_epi32(__intrin)
415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_mm512_cvtepu16_epi32(__intrin));
416 &#32;&#32;&#32;&#32;&#32;&#32;}
417 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__i16_to_i8)&#32;<emphasis role="comment">//{{{2</emphasis>
418 &#32;&#32;&#32;&#32;&#32;&#32;{
419 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;__have_avx512bw_vl)
420 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_cvtepi16_epi8(__intrin));
421 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;__have_avx512bw)
422 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lo128(_mm512_cvtepi16_epi8(__zero_extend(__intrin))));
424 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;__have_ssse3)
425 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_shuffle_epi8(
426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__intrin,&#32;_mm_setr_epi8(0,&#32;2,&#32;4,&#32;6,&#32;8,&#32;10,&#32;12,&#32;14,&#32;-0x80,&#32;-0x80,
427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80)));
428 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x)
429 &#32;&#32;&#32;&#32;&#32;&#32;{
430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__a
431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm_unpacklo_epi8(__intrin,&#32;__intrin);&#32;<emphasis role="comment">//&#32;00..&#32;11..&#32;22..&#32;33..</emphasis>
432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__b
433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm_unpackhi_epi8(__intrin,&#32;__intrin);&#32;<emphasis role="comment">//&#32;44..&#32;55..&#32;66..&#32;77..</emphasis>
434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__c&#32;=&#32;_mm_unpacklo_epi8(__a,&#32;__b);&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0404&#32;....&#32;1515&#32;....</emphasis>
435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__d&#32;=&#32;_mm_unpackhi_epi8(__a,&#32;__b);&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2626&#32;....&#32;3737&#32;....</emphasis>
436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__e&#32;=&#32;_mm_unpacklo_epi8(__c,&#32;__d);&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0246&#32;0246&#32;....&#32;....</emphasis>
437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__f&#32;=&#32;_mm_unpackhi_epi8(__c,&#32;__d);&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;1357&#32;1357&#32;....&#32;....</emphasis>
438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_unpacklo_epi8(__e,&#32;__f));
439 &#32;&#32;&#32;&#32;&#32;&#32;}
440 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_x&#32;&amp;&amp;&#32;__have_avx512bw_vl)
441 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm256_cvtepi16_epi8(__intrin));
442 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_x&#32;&amp;&amp;&#32;__have_avx512bw)
443 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lo256(_mm512_cvtepi16_epi8(__zero_extend(__intrin))));
445 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_x)
446 &#32;&#32;&#32;&#32;&#32;&#32;{
447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__a&#32;=&#32;_mm256_shuffle_epi8(
448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__intrin,
449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_setr_epi8(0,&#32;2,&#32;4,&#32;6,&#32;8,&#32;10,&#32;12,&#32;14,&#32;-0x80,&#32;-0x80,&#32;-0x80,
450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,
451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;0,&#32;2,
452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;4,&#32;6,&#32;8,&#32;10,&#32;12,&#32;14));
453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(__lo128(__a)&#32;|&#32;__hi128(__a));
454 &#32;&#32;&#32;&#32;&#32;&#32;}
455 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__z_to_y&#32;&amp;&amp;&#32;__have_avx512bw)
456 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm512_cvtepi16_epi8(__intrin));
457 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__z_to_y)
458 &#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
459 &#32;&#32;&#32;&#32;&#32;&#32;}
460 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__i8_to_i64)&#32;<emphasis role="comment">//{{{2</emphasis>
461 &#32;&#32;&#32;&#32;&#32;&#32;{
462 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;__have_sse4_1)
463 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(is_signed_v&lt;_Tp&gt;
464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;_mm_cvtepi8_epi64(__intrin)
465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_mm_cvtepu8_epi64(__intrin));
466 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;is_signed_v&lt;_Tp&gt;)
467 &#32;&#32;&#32;&#32;&#32;&#32;{
468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_ssse3)
469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__dup&#32;=&#32;_mm_unpacklo_epi8(__intrin,&#32;__intrin);
471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__epi16&#32;=&#32;_mm_srai_epi16(__dup,&#32;8);
472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_shuffle_epi8(__epi16,
473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_setr_epi8(0,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;1,&#32;2,&#32;3,&#32;3,
474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;3,&#32;3,&#32;3,&#32;3,&#32;3));
475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__x&#32;=&#32;_mm_unpacklo_epi8(__intrin,&#32;__intrin);
479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;_mm_unpacklo_epi16(__x,&#32;__x);
480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpacklo_epi32(_mm_srai_epi32(__x,&#32;24),
482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_srai_epi32(__x,&#32;31)));
483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
484 &#32;&#32;&#32;&#32;&#32;&#32;}
485 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x)
486 &#32;&#32;&#32;&#32;&#32;&#32;{
487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_unpacklo_epi32(
488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpacklo_epi16(_mm_unpacklo_epi8(__intrin,&#32;__m128i()),
489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i()),
490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i()));
491 &#32;&#32;&#32;&#32;&#32;&#32;}
492 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_y)
493 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(is_signed_v&lt;_Tp&gt;
494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;_mm256_cvtepi8_epi64(__intrin)
495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_mm256_cvtepu8_epi64(__intrin));
496 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_z)
497 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(is_signed_v&lt;_Tp&gt;
498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;_mm512_cvtepi8_epi64(__intrin)
499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_mm512_cvtepu8_epi64(__intrin));
500 &#32;&#32;&#32;&#32;&#32;&#32;}
501 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__i8_to_i32)&#32;<emphasis role="comment">//{{{2</emphasis>
502 &#32;&#32;&#32;&#32;&#32;&#32;{
503 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;__have_sse4_1)
504 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(is_signed_v&lt;_Tp&gt;
505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;_mm_cvtepi8_epi32(__intrin)
506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_mm_cvtepu8_epi32(__intrin));
507 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;is_signed_v&lt;_Tp&gt;)
508 &#32;&#32;&#32;&#32;&#32;&#32;{
509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__x&#32;=&#32;_mm_unpacklo_epi8(__intrin,&#32;__intrin);
510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_srai_epi32(_mm_unpacklo_epi16(__x,&#32;__x),&#32;24));
512 &#32;&#32;&#32;&#32;&#32;&#32;}
513 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Tp&gt;)
514 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpacklo_epi16(_mm_unpacklo_epi8(__intrin,&#32;__m128i()),
516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i()));
517 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_y)
518 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(is_signed_v&lt;_Tp&gt;
519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;_mm256_cvtepi8_epi32(__intrin)
520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_mm256_cvtepu8_epi32(__intrin));
521 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_z)
522 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(is_signed_v&lt;_Tp&gt;
523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;_mm512_cvtepi8_epi32(__intrin)
524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_mm512_cvtepu8_epi32(__intrin));
525 &#32;&#32;&#32;&#32;&#32;&#32;}
526 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__i8_to_i16)&#32;<emphasis role="comment">//{{{2</emphasis>
527 &#32;&#32;&#32;&#32;&#32;&#32;{
528 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;__have_sse4_1)
529 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(is_signed_v&lt;_Tp&gt;
530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;_mm_cvtepi8_epi16(__intrin)
531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_mm_cvtepu8_epi16(__intrin));
532 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;is_signed_v&lt;_Tp&gt;)
533 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_srai_epi16(_mm_unpacklo_epi8(__intrin,&#32;__intrin),&#32;8));
535 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Tp&gt;)
536 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_unpacklo_epi8(__intrin,&#32;__m128i()));
537 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_y)
538 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(is_signed_v&lt;_Tp&gt;
539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;_mm256_cvtepi8_epi16(__intrin)
540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_mm256_cvtepu8_epi16(__intrin));
541 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_z&#32;&amp;&amp;&#32;__have_avx512bw)
542 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(is_signed_v&lt;_Tp&gt;
543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;_mm512_cvtepi8_epi16(__intrin)
544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_mm512_cvtepu8_epi16(__intrin));
545 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_z)
546 &#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
547 &#32;&#32;&#32;&#32;&#32;&#32;}
548 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__f32_to_s64)&#32;<emphasis role="comment">//{{{2</emphasis>
549 &#32;&#32;&#32;&#32;&#32;&#32;{
550 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq_vl&#32;&amp;&amp;&#32;__x_to_x)
551 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_cvttps_epi64(__intrin));
552 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq_vl&#32;&amp;&amp;&#32;__x_to_y)
553 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm256_cvttps_epi64(__intrin));
554 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq&#32;&amp;&amp;&#32;__y_to_z)
555 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm512_cvttps_epi64(__intrin));
556 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;else&#32;use&#32;scalar&#32;fallback</emphasis>
557 &#32;&#32;&#32;&#32;&#32;&#32;}
558 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__f32_to_u64)&#32;<emphasis role="comment">//{{{2</emphasis>
559 &#32;&#32;&#32;&#32;&#32;&#32;{
560 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq_vl&#32;&amp;&amp;&#32;__x_to_x)
561 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_cvttps_epu64(__intrin));
562 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq_vl&#32;&amp;&amp;&#32;__x_to_y)
563 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm256_cvttps_epu64(__intrin));
564 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq&#32;&amp;&amp;&#32;__y_to_z)
565 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm512_cvttps_epu64(__intrin));
566 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;else&#32;use&#32;scalar&#32;fallback</emphasis>
567 &#32;&#32;&#32;&#32;&#32;&#32;}
568 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__f32_to_s32)&#32;<emphasis role="comment">//{{{2</emphasis>
569 &#32;&#32;&#32;&#32;&#32;&#32;{
570 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;||&#32;__y_to_y&#32;||&#32;__z_to_z)
571 &#32;&#32;&#32;&#32;&#32;&#32;{
572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;go&#32;to&#32;fallback,&#32;it&#32;does&#32;the&#32;right&#32;thing</emphasis>
573 &#32;&#32;&#32;&#32;&#32;&#32;}
574 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
575 &#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
576 &#32;&#32;&#32;&#32;&#32;&#32;}
577 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__f32_to_u32)&#32;<emphasis role="comment">//{{{2</emphasis>
578 &#32;&#32;&#32;&#32;&#32;&#32;{
579 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512vl&#32;&amp;&amp;&#32;__x_to_x)
580 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__auto_bitcast(_mm_cvttps_epu32(__intrin));
581 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f&#32;&amp;&amp;&#32;__x_to_x)
582 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__auto_bitcast(
583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lo128(_mm512_cvttps_epu32(__auto_bitcast(__v))));
584 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512vl&#32;&amp;&amp;&#32;__y_to_y)
585 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(_mm256_cvttps_epu32(__intrin));
586 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f&#32;&amp;&amp;&#32;__y_to_y)
587 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(
588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lo256(_mm512_cvttps_epu32(__auto_bitcast(__v))));
589 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;||&#32;__y_to_y&#32;||&#32;__z_to_z)
590 &#32;&#32;&#32;&#32;&#32;&#32;{
591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;go&#32;to&#32;fallback,&#32;it&#32;does&#32;the&#32;right&#32;thing.&#32;We&#32;can&apos;t&#32;use&#32;the</emphasis>
592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_mm_floor_ps&#32;-&#32;0x8000&apos;0000&#32;trick&#32;for&#32;f32-&gt;u32&#32;because&#32;it&#32;would</emphasis>
593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;discard&#32;small&#32;input&#32;values&#32;(only&#32;24&#32;mantissa&#32;bits)</emphasis>
594 &#32;&#32;&#32;&#32;&#32;&#32;}
595 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
596 &#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
597 &#32;&#32;&#32;&#32;&#32;&#32;}
598 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__f32_to_ibw)&#32;<emphasis role="comment">//{{{2</emphasis>
599 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__convert_x86&lt;_To&gt;(__convert_x86&lt;__vector_type_t&lt;int,&#32;_Np&gt;&gt;(__v));
600 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__f64_to_s64)&#32;<emphasis role="comment">//{{{2</emphasis>
601 &#32;&#32;&#32;&#32;&#32;&#32;{
602 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq_vl&#32;&amp;&amp;&#32;__x_to_x)
603 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_cvttpd_epi64(__intrin));
604 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq_vl&#32;&amp;&amp;&#32;__y_to_y)
605 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm256_cvttpd_epi64(__intrin));
606 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq&#32;&amp;&amp;&#32;__z_to_z)
607 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm512_cvttpd_epi64(__intrin));
608 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;else&#32;use&#32;scalar&#32;fallback</emphasis>
609 &#32;&#32;&#32;&#32;&#32;&#32;}
610 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__f64_to_u64)&#32;<emphasis role="comment">//{{{2</emphasis>
611 &#32;&#32;&#32;&#32;&#32;&#32;{
612 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq_vl&#32;&amp;&amp;&#32;__x_to_x)
613 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_cvttpd_epu64(__intrin));
614 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq_vl&#32;&amp;&amp;&#32;__y_to_y)
615 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm256_cvttpd_epu64(__intrin));
616 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq&#32;&amp;&amp;&#32;__z_to_z)
617 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm512_cvttpd_epu64(__intrin));
618 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;else&#32;use&#32;scalar&#32;fallback</emphasis>
619 &#32;&#32;&#32;&#32;&#32;&#32;}
620 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__f64_to_s32)&#32;<emphasis role="comment">//{{{2</emphasis>
621 &#32;&#32;&#32;&#32;&#32;&#32;{
622 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x)
623 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_cvttpd_epi32(__intrin));
624 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_x)
625 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm256_cvttpd_epi32(__intrin));
626 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__z_to_y)
627 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm512_cvttpd_epi32(__intrin));
628 &#32;&#32;&#32;&#32;&#32;&#32;}
629 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__f64_to_u32)&#32;<emphasis role="comment">//{{{2</emphasis>
630 &#32;&#32;&#32;&#32;&#32;&#32;{
631 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512vl&#32;&amp;&amp;&#32;__x_to_x)
632 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_cvttpd_epu32(__intrin));
633 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse4_1&#32;&amp;&amp;&#32;__x_to_x)
634 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up,&#32;_M&gt;(
635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_cvttpd_epi32(<link linkend="__classes_2lib_2include_2smmintrin_8h_1a94fbc09cc347ab1d796120010ee0e612">_mm_floor_pd</link>(__intrin)&#32;-&#32;0x8000&apos;0000u))
636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;^&#32;0x8000&apos;0000u;
637 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x)
638 &#32;&#32;&#32;&#32;&#32;&#32;{
639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;use&#32;scalar&#32;fallback:&#32;it&apos;s&#32;only&#32;2&#32;values&#32;to&#32;convert,&#32;can&apos;t&#32;get</emphasis>
640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;much&#32;better&#32;than&#32;scalar&#32;decomposition</emphasis>
641 &#32;&#32;&#32;&#32;&#32;&#32;}
642 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512vl&#32;&amp;&amp;&#32;__y_to_x)
643 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm256_cvttpd_epu32(__intrin));
644 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_x)
645 &#32;&#32;&#32;&#32;&#32;&#32;{
646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;_Up&gt;(
648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_cvttpd_epi32(<link linkend="__classes_2lib_2include_2avxintrin_8h_1a47af141c2c323557386b3d304aab4d3f">_mm256_floor_pd</link>(__intrin)&#32;-&#32;0x8000&apos;0000u))
649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;^&#32;0x8000&apos;0000u);
650 &#32;&#32;&#32;&#32;&#32;&#32;}
651 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__z_to_y)
652 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm512_cvttpd_epu32(__intrin));
653 &#32;&#32;&#32;&#32;&#32;&#32;}
654 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__f64_to_ibw)&#32;<emphasis role="comment">//{{{2</emphasis>
655 &#32;&#32;&#32;&#32;&#32;&#32;{
656 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__convert_x86&lt;_To&gt;(
657 &#32;&#32;&#32;&#32;&#32;&#32;__convert_x86&lt;__vector_type_t&lt;<emphasis role="keywordtype">int</emphasis>,&#32;(_Np&#32;&lt;&#32;4&#32;?&#32;4&#32;:&#32;_Np)&gt;&gt;(__v));
658 &#32;&#32;&#32;&#32;&#32;&#32;}
659 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__s64_to_f32)&#32;<emphasis role="comment">//{{{2</emphasis>
660 &#32;&#32;&#32;&#32;&#32;&#32;{
661 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;__have_avx512dq_vl)
662 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_cvtepi64_ps(__intrin));
663 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_x&#32;&amp;&amp;&#32;__have_avx512dq_vl)
664 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm256_cvtepi64_ps(__intrin));
665 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__z_to_y&#32;&amp;&amp;&#32;__have_avx512dq)
666 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm512_cvtepi64_ps(__intrin));
667 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__z_to_y)
668 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_cvtpd_ps(__convert_x86&lt;__vector_type_t&lt;double,&#32;8&gt;&gt;(__v)));
670 &#32;&#32;&#32;&#32;&#32;&#32;}
671 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__u64_to_f32)&#32;<emphasis role="comment">//{{{2</emphasis>
672 &#32;&#32;&#32;&#32;&#32;&#32;{
673 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;__have_avx512dq_vl)
674 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_cvtepu64_ps(__intrin));
675 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_x&#32;&amp;&amp;&#32;__have_avx512dq_vl)
676 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm256_cvtepu64_ps(__intrin));
677 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__z_to_y&#32;&amp;&amp;&#32;__have_avx512dq)
678 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm512_cvtepu64_ps(__intrin));
679 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__z_to_y)
680 &#32;&#32;&#32;&#32;&#32;&#32;{
681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lo256(_mm512_cvtepu32_ps(__auto_bitcast(
683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_cvtepi64_epi32(<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1ae68977bb9e8ec9501b0ebc1ea77f8baa">_mm512_srai_epi64</link>(__intrin,&#32;32)))))
684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;0x100000000LL
685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;__lo256(_mm512_cvtepu32_ps(
686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__auto_bitcast(_mm512_cvtepi64_epi32(__intrin)))));
687 &#32;&#32;&#32;&#32;&#32;&#32;}
688 &#32;&#32;&#32;&#32;&#32;&#32;}
689 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__s32_to_f32)&#32;<emphasis role="comment">//{{{2</emphasis>
690 &#32;&#32;&#32;&#32;&#32;&#32;{
691 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;use&#32;fallback&#32;(builtin&#32;conversion)</emphasis>
692 &#32;&#32;&#32;&#32;&#32;&#32;}
693 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__u32_to_f32)&#32;<emphasis role="comment">//{{{2</emphasis>
694 &#32;&#32;&#32;&#32;&#32;&#32;{
695 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;__have_avx512vl)
696 &#32;&#32;&#32;&#32;&#32;&#32;{
697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;use&#32;fallback</emphasis>
698 &#32;&#32;&#32;&#32;&#32;&#32;}
699 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;__have_avx512f)
700 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lo128(_mm512_cvtepu32_ps(__auto_bitcast(__v))));
702 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;(__have_fma&#32;||&#32;__have_fma4))
703 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;work&#32;around&#32;PR85819</emphasis>
704 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__auto_bitcast(0x10000
705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;_mm_cvtepi32_ps(__to_intrin(__v&#32;&gt;&gt;&#32;16))
706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;_mm_cvtepi32_ps(__to_intrin(__v&#32;&amp;&#32;0xffff)));
707 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_y&#32;&amp;&amp;&#32;__have_avx512vl)
708 &#32;&#32;&#32;&#32;&#32;&#32;{
709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;use&#32;fallback</emphasis>
710 &#32;&#32;&#32;&#32;&#32;&#32;}
711 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_y&#32;&amp;&amp;&#32;__have_avx512f)
712 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lo256(_mm512_cvtepu32_ps(__auto_bitcast(__v))));
714 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_y)
715 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;work&#32;around&#32;PR85819</emphasis>
716 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0x10000&#32;*&#32;_mm256_cvtepi32_ps(__to_intrin(__v&#32;&gt;&gt;&#32;16))
717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;_mm256_cvtepi32_ps(__to_intrin(__v&#32;&amp;&#32;0xffff));
718 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;else&#32;use&#32;fallback&#32;(builtin&#32;conversion)</emphasis>
719 &#32;&#32;&#32;&#32;&#32;&#32;}
720 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__ibw_to_f32)&#32;<emphasis role="comment">//{{{2</emphasis>
721 &#32;&#32;&#32;&#32;&#32;&#32;{
722 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_M&#32;&lt;=&#32;4&#32;||&#32;__have_avx2)
723 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__convert_x86&lt;_To&gt;(
724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__convert_x86&lt;__vector_type_t&lt;int,&#32;_M&gt;&gt;(__v));
725 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
726 &#32;&#32;&#32;&#32;&#32;&#32;{
727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__x_to_y);
728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i&#32;__a,&#32;__b;
729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse4_1)
730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2
732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;(is_signed_v&lt;_Tp&gt;&#32;?&#32;_mm_cvtepi16_epi32(__intrin)
733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_mm_cvtepu16_epi32(__intrin))
734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;(is_signed_v&lt;_Tp&gt;&#32;?&#32;_mm_cvtepi8_epi32(__intrin)
735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_mm_cvtepu8_epi32(__intrin));
736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__w
737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__classes_2lib_2include_2emmintrin_8h_1ac4e4fd624042288e02f3e842e466ed2c">_mm_shuffle_epi32</link>(__intrin,&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2&#32;?&#32;0xee&#32;:&#32;0xe9);
738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__b&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2
739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;(is_signed_v&lt;_Tp&gt;&#32;?&#32;_mm_cvtepi16_epi32(__w)
740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_mm_cvtepu16_epi32(__w))
741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;(is_signed_v&lt;_Tp&gt;&#32;?&#32;_mm_cvtepi8_epi32(__w)
742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_mm_cvtepu8_epi32(__w));
743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1)
748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;is_signed_v&lt;_Tp&gt;
750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;_mm_srai_epi16(_mm_unpacklo_epi8(__intrin,
751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__intrin),
752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;8)
753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_mm_unpacklo_epi8(__intrin,&#32;__m128i());
754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2);
758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__intrin;
759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a&#32;=&#32;is_signed_v&lt;_Tp&gt;
761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;_mm_srai_epi32(_mm_unpacklo_epi16(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>,&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>),&#32;16)
762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_mm_unpacklo_epi16(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>,&#32;__m128i());
763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__b&#32;=&#32;is_signed_v&lt;_Tp&gt;
764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;_mm_srai_epi32(_mm_unpackhi_epi16(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>,&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>),&#32;16)
765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_mm_unpackhi_epi16(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>,&#32;__m128i());
766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__convert_x86&lt;_To&gt;(__vector_bitcast&lt;int&gt;(__a),
768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;int&gt;(__b));
769 &#32;&#32;&#32;&#32;&#32;&#32;}
770 &#32;&#32;&#32;&#32;&#32;&#32;}
771 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__s64_to_f64)&#32;<emphasis role="comment">//{{{2</emphasis>
772 &#32;&#32;&#32;&#32;&#32;&#32;{
773 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;__have_avx512dq_vl)
774 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_cvtepi64_pd(__intrin));
775 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_y&#32;&amp;&amp;&#32;__have_avx512dq_vl)
776 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm256_cvtepi64_pd(__intrin));
777 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__z_to_z&#32;&amp;&amp;&#32;__have_avx512dq)
778 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm512_cvtepi64_pd(__intrin));
779 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__z_to_z)
780 &#32;&#32;&#32;&#32;&#32;&#32;{
781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_cvtepi32_pd(_mm512_cvtepi64_epi32(__to_intrin(__v&#32;&gt;&gt;&#32;32)))
783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;0x100000000LL
784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;_mm512_cvtepu32_pd(_mm512_cvtepi64_epi32(__intrin)));
785 &#32;&#32;&#32;&#32;&#32;&#32;}
786 &#32;&#32;&#32;&#32;&#32;&#32;}
787 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__u64_to_f64)&#32;<emphasis role="comment">//{{{2</emphasis>
788 &#32;&#32;&#32;&#32;&#32;&#32;{
789 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;__have_avx512dq_vl)
790 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_cvtepu64_pd(__intrin));
791 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_y&#32;&amp;&amp;&#32;__have_avx512dq_vl)
792 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm256_cvtepu64_pd(__intrin));
793 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__z_to_z&#32;&amp;&amp;&#32;__have_avx512dq)
794 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm512_cvtepu64_pd(__intrin));
795 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__z_to_z)
796 &#32;&#32;&#32;&#32;&#32;&#32;{
797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_cvtepu32_pd(_mm512_cvtepi64_epi32(__to_intrin(__v&#32;&gt;&gt;&#32;32)))
799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;0x100000000LL
800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;_mm512_cvtepu32_pd(_mm512_cvtepi64_epi32(__intrin)));
801 &#32;&#32;&#32;&#32;&#32;&#32;}
802 &#32;&#32;&#32;&#32;&#32;&#32;}
803 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__s32_to_f64)&#32;<emphasis role="comment">//{{{2</emphasis>
804 &#32;&#32;&#32;&#32;&#32;&#32;{
805 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x)
806 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_cvtepi32_pd(__intrin));
807 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_y)
808 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm256_cvtepi32_pd(__intrin));
809 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_z)
810 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm512_cvtepi32_pd(__intrin));
811 &#32;&#32;&#32;&#32;&#32;&#32;}
812 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__u32_to_f64)&#32;<emphasis role="comment">//{{{2</emphasis>
813 &#32;&#32;&#32;&#32;&#32;&#32;{
814 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;__have_avx512vl)
815 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_cvtepu32_pd(__intrin));
816 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;__have_avx512f)
817 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lo128(_mm512_cvtepu32_pd(__auto_bitcast(__v))));
819 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x)
820 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_cvtepi32_pd(__to_intrin(__v&#32;^&#32;0x8000&apos;0000u))&#32;+&#32;0x8000&apos;0000u);
822 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_y&#32;&amp;&amp;&#32;__have_avx512vl)
823 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm256_cvtepu32_pd(__intrin));
824 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_y&#32;&amp;&amp;&#32;__have_avx512f)
825 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lo256(_mm512_cvtepu32_pd(__auto_bitcast(__v))));
827 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_y)
828 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_cvtepi32_pd(__to_intrin(__v&#32;^&#32;0x8000&apos;0000u))&#32;+&#32;0x8000&apos;0000u);
830 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_z)
831 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm512_cvtepu32_pd(__intrin));
832 &#32;&#32;&#32;&#32;&#32;&#32;}
833 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__ibw_to_f64)&#32;<emphasis role="comment">//{{{2</emphasis>
834 &#32;&#32;&#32;&#32;&#32;&#32;{
835 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__convert_x86&lt;_To&gt;(
836 &#32;&#32;&#32;&#32;&#32;&#32;__convert_x86&lt;__vector_type_t&lt;<emphasis role="keywordtype">int</emphasis>,&#32;std::max(<emphasis role="keywordtype">size_t</emphasis>(4),&#32;_M)&gt;&gt;(__v));
837 &#32;&#32;&#32;&#32;&#32;&#32;}
838 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__f32_to_f64)&#32;<emphasis role="comment">//{{{2</emphasis>
839 &#32;&#32;&#32;&#32;&#32;&#32;{
840 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x)
841 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_cvtps_pd(__intrin));
842 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_y)
843 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm256_cvtps_pd(__intrin));
844 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_z)
845 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm512_cvtps_pd(__intrin));
846 &#32;&#32;&#32;&#32;&#32;&#32;}
847 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__f64_to_f32)&#32;<emphasis role="comment">//{{{2</emphasis>
848 &#32;&#32;&#32;&#32;&#32;&#32;{
849 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x)
850 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_cvtpd_ps(__intrin));
851 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_x)
852 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm256_cvtpd_ps(__intrin));
853 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__z_to_y)
854 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm512_cvtpd_ps(__intrin));
855 &#32;&#32;&#32;&#32;&#32;&#32;}
856 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//{{{2</emphasis>
857 &#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
858 
859 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;fallback:{{{2</emphasis>
860 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_convert&lt;_To&gt;(__v,&#32;make_index_sequence&lt;std::min(_M,&#32;_Np)&gt;());
861 &#32;&#32;&#32;&#32;<emphasis role="comment">//}}}</emphasis>
862 &#32;&#32;}
863 
864 <emphasis role="comment">//&#32;}}}</emphasis>
865 <emphasis role="comment">//&#32;2-arg&#32;__convert_x86&#32;{{{1</emphasis>
866 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keyword">typename</emphasis>&#32;_V,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
867 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_To
868 &#32;&#32;__convert_x86(_V&#32;__v0,&#32;_V&#32;__v1)
869 &#32;&#32;{
870 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__is_vector_type_v&lt;_V&gt;);
871 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits::value_type;
872 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&#32;=&#32;_Traits::_S_full_size;
873 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>&#32;=&#32;__to_intrin(__v0);
874 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;=&#32;__to_intrin(__v1);
875 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Up&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_VectorTraits&lt;_To&gt;::value_type;
876 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_M&#32;=&#32;_VectorTraits&lt;_To&gt;::_S_full_size;
877 
878 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(2&#32;*&#32;_Np&#32;&lt;=&#32;_M,
879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;__v1&#32;would&#32;be&#32;discarded;&#32;use&#32;the&#32;one-argument&#32;&quot;</emphasis>
880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;__convert_x86&#32;overload&#32;instead&quot;</emphasis>);
881 
882 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[xyz]_to_[xyz]&#32;{{{2</emphasis>
883 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__x_to_x
884 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;&lt;=&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;&lt;=&#32;16;
885 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__x_to_y
886 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;&lt;=&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;32;
887 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__x_to_z
888 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;&lt;=&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;64;
889 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__y_to_x
890 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;&lt;=&#32;16;
891 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__y_to_y
892 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;32;
893 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__y_to_z
894 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;64;
895 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__z_to_x
896 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;&lt;=&#32;16;
897 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__z_to_y
898 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;32;
899 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__z_to_z
900 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;64;
901 
902 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;iX_to_iX&#32;{{{2</emphasis>
903 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i_to_i
904 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Up&gt;&#32;&amp;&amp;&#32;is_integral_v&lt;_Tp&gt;;
905 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i8_to_i16
906 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__i_to_i&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;2;
907 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i8_to_i32
908 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__i_to_i&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4;
909 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i8_to_i64
910 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__i_to_i&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8;
911 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i16_to_i8
912 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__i_to_i&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;1;
913 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i16_to_i32
914 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__i_to_i&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4;
915 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i16_to_i64
916 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__i_to_i&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8;
917 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i32_to_i8
918 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__i_to_i&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;1;
919 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i32_to_i16
920 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__i_to_i&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;2;
921 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i32_to_i64
922 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__i_to_i&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8;
923 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i64_to_i8
924 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__i_to_i&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;1;
925 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i64_to_i16
926 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__i_to_i&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;2;
927 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i64_to_i32
928 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__i_to_i&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4;
929 
930 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[fsu]X_to_[fsu]X&#32;{{{2</emphasis>
931 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ibw&#32;=&#32;integral&#32;&amp;&amp;&#32;byte&#32;or&#32;word,&#32;i.e.&#32;char&#32;and&#32;short&#32;with&#32;any&#32;signedness</emphasis>
932 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i64_to_f32
933 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8
934 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4;
935 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__s32_to_f32
936 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4
937 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4;
938 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__s16_to_f32
939 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2
940 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4;
941 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__s8_to_f32
942 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1
943 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4;
944 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__u32_to_f32
945 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4
946 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4;
947 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__u16_to_f32
948 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2
949 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4;
950 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__u8_to_f32
951 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1
952 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4;
953 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__s64_to_f64
954 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8
955 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8;
956 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__s32_to_f64
957 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4
958 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8;
959 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__s16_to_f64
960 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2
961 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8;
962 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__s8_to_f64
963 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1
964 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8;
965 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__u64_to_f64
966 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8
967 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8;
968 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__u32_to_f64
969 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4
970 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8;
971 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__u16_to_f64
972 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2
973 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8;
974 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__u8_to_f64
975 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1
976 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8;
977 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__f32_to_s64
978 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Up&gt;&#32;&amp;&amp;&#32;is_signed_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8
979 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4;
980 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__f32_to_s32
981 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Up&gt;&#32;&amp;&amp;&#32;is_signed_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4
982 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4;
983 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__f32_to_u64
984 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Up&gt;&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8
985 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4;
986 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__f32_to_u32
987 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Up&gt;&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4
988 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4;
989 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__f64_to_s64
990 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Up&gt;&#32;&amp;&amp;&#32;is_signed_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8
991 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8;
992 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__f64_to_s32
993 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Up&gt;&#32;&amp;&amp;&#32;is_signed_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4
994 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8;
995 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__f64_to_u64
996 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Up&gt;&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8
997 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8;
998 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__f64_to_u32
999 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Up&gt;&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4
1000 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8;
1001 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__f32_to_ibw
1002 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;&lt;=&#32;2
1003 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4;
1004 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__f64_to_ibw
1005 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;&lt;=&#32;2
1006 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8;
1007 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__f32_to_f64
1008 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_floating_point_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4
1009 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8;
1010 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__f64_to_f32
1011 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_floating_point_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8
1012 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4;
1013 
1014 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__i_to_i&#32;&amp;&amp;&#32;__y_to_x&#32;&amp;&amp;&#32;!__have_avx2)&#32;<emphasis role="comment">//{{{2</emphasis>
1015 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&lt;double,&#32;4&gt;,&#32;&lt;double,&#32;4&gt;&#32;=&gt;&#32;&lt;short,&#32;8&gt;</emphasis>
1016 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__convert_x86&lt;_To&gt;(__lo128(__v0),&#32;__hi128(__v0),&#32;__lo128(__v1),
1017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__hi128(__v1));
1018 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__i_to_i)&#32;<emphasis role="comment">//&#32;assert&#32;ISA&#32;{{{2</emphasis>
1019 &#32;&#32;&#32;&#32;&#32;&#32;{
1020 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__x_to_x&#32;||&#32;__have_avx2,
1021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;integral&#32;conversions&#32;with&#32;ymm&#32;registers&#32;require&#32;AVX2&quot;</emphasis>);
1022 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__have_avx512bw
1023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;((<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;&gt;=&#32;4&#32;||&#32;<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;&lt;&#32;64)
1024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;&gt;=&#32;4&#32;||&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;&lt;&#32;64)),
1025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;8/16-bit&#32;integers&#32;in&#32;zmm&#32;registers&#32;require&#32;AVX512BW&quot;</emphasis>);
1026 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>((<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;&lt;&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;&lt;&#32;64)&#32;||&#32;__have_avx512f,
1027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;integral&#32;conversions&#32;with&#32;ymm&#32;registers&#32;require&#32;AVX2&quot;</emphasis>);
1028 &#32;&#32;&#32;&#32;&#32;&#32;}
1029 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concat&#32;=&gt;&#32;use&#32;1-arg&#32;__convert_x86&#32;{{{2</emphasis>
1030 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;&lt;&#32;16&#32;||&#32;(<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;==&#32;16&#32;&amp;&amp;&#32;__have_avx2)
1031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;(<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;==&#32;16&#32;&amp;&amp;&#32;__have_avx
1032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;)
1033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;(<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;==&#32;32&#32;&amp;&amp;&#32;__have_avx512f
1034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;&gt;=&#32;4&#32;||&#32;__have_avx512bw)))
1035 &#32;&#32;&#32;&#32;&#32;&#32;{
1036 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;ISA&#32;can&#32;handle&#32;wider&#32;input&#32;registers,&#32;so&#32;concat&#32;and&#32;use&#32;one-arg</emphasis>
1037 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;implementation.&#32;This&#32;reduces&#32;code&#32;duplication&#32;considerably.</emphasis>
1038 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__convert_x86&lt;_To&gt;(__concat(__v0,&#32;__v1));
1039 &#32;&#32;&#32;&#32;&#32;&#32;}
1040 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//{{{2</emphasis>
1041 &#32;&#32;&#32;&#32;&#32;&#32;{
1042 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;conversion&#32;using&#32;bit&#32;reinterpretation&#32;(or&#32;no&#32;conversion&#32;at&#32;all)</emphasis>
1043 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;should&#32;all&#32;go&#32;through&#32;the&#32;concat&#32;branch&#32;above:</emphasis>
1044 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(
1045 &#32;&#32;&#32;&#32;&#32;&#32;!(is_floating_point_v&lt;
1046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp&gt;&#32;==&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)));
1047 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;handle&#32;all&#32;zero&#32;extension{{{2</emphasis>
1048 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(2&#32;*&#32;_Np&#32;&lt;&#32;_M&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;&gt;&#32;16)
1049 &#32;&#32;&#32;&#32;&#32;&#32;{
1050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;Min&#32;=&#32;16&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Up);
1051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__zero_extend(
1052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__convert_x86&lt;
1053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_type_t&lt;_Up,&#32;(Min&#32;&gt;&#32;2&#32;*&#32;_Np)&#32;?&#32;Min&#32;:&#32;2&#32;*&#32;_Np&gt;&gt;(__v0,
1054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__v1));
1055 &#32;&#32;&#32;&#32;&#32;&#32;}
1056 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__i64_to_i32)&#32;<emphasis role="comment">//{{{2</emphasis>
1057 &#32;&#32;&#32;&#32;&#32;&#32;{
1058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x)
1059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__auto_bitcast(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1aee5c5734217b10ca090b1d449a653d73">_mm_shuffle_ps</link>(__auto_bitcast(__v0),
1060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__auto_bitcast(__v1),&#32;0x88));
1061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_y)
1062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;AVX512F&#32;is&#32;not&#32;available&#32;(would&#32;concat&#32;otherwise)</emphasis>
1064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__auto_bitcast(
1065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__xzyw(<link linkend="__classes_2lib_2include_2avxintrin_8h_1abac8378ee6937a3b38f01f57d7728ad0">_mm256_shuffle_ps</link>(__auto_bitcast(__v0),
1066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__auto_bitcast(__v1),&#32;0x88)));
1067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;alternative:</emphasis>
1068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;const&#32;auto&#32;v0_abxxcdxx&#32;=&#32;_mm256_shuffle_epi32(__v0,&#32;8);</emphasis>
1069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;const&#32;auto&#32;v1_efxxghxx&#32;=&#32;_mm256_shuffle_epi32(__v1,&#32;8);</emphasis>
1070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;const&#32;auto&#32;v_abefcdgh&#32;=&#32;_mm256_unpacklo_epi64(v0_abxxcdxx,</emphasis>
1071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;v1_efxxghxx);&#32;return&#32;_mm256_permute4x64_epi64(v_abefcdgh,</emphasis>
1072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0x01&#32;*&#32;0&#32;+&#32;0x04&#32;*&#32;2&#32;+&#32;0x10&#32;*&#32;1&#32;+&#32;0x40&#32;*&#32;3);&#32;&#32;//&#32;abcdefgh</emphasis>
1073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__z_to_z)
1075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
1076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__concat(_mm512_cvtepi64_epi32(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>),
1077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_cvtepi64_epi32(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>)));
1078 &#32;&#32;&#32;&#32;&#32;&#32;}
1079 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__i64_to_i16)&#32;<emphasis role="comment">//{{{2</emphasis>
1080 &#32;&#32;&#32;&#32;&#32;&#32;{
1081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x)
1082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;AVX2&#32;is&#32;not&#32;available&#32;(would&#32;concat&#32;otherwise)</emphasis>
1084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse4_1)
1085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_shuffle_epi8(
1087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2smmintrin_8h_1a825642c8598f770a50145fb75b4d4f12">_mm_blend_epi16</link>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>,&#32;<link linkend="__classes_2lib_2include_2emmintrin_8h_1a2091290bb42bdb544fbc4c652afc2751">_mm_slli_si128</link>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;4),&#32;0x44),
1088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_setr_epi8(0,&#32;1,&#32;8,&#32;9,&#32;4,&#32;5,&#32;12,&#32;13,&#32;-0x80,&#32;-0x80,
1089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80)));
1090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_type_t&lt;_Up,&#32;_M&gt;{_Up(__v0[0]),&#32;_Up(__v0[1]),
1094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Up(__v1[0]),&#32;_Up(__v1[1])};
1095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_x)
1098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__a
1100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm256_unpacklo_epi16(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>);&#32;<emphasis role="comment">//&#32;04..&#32;....&#32;26..&#32;....</emphasis>
1101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__b
1102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm256_unpackhi_epi16(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>);&#32;<emphasis role="comment">//&#32;15..&#32;....&#32;37..&#32;....</emphasis>
1103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__c
1104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm256_unpacklo_epi16(__a,&#32;__b);&#32;<emphasis role="comment">//&#32;0145&#32;....&#32;2367&#32;....</emphasis>
1105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
1106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpacklo_epi32(__lo128(__c),&#32;__hi128(__c)));&#32;<emphasis role="comment">//&#32;0123&#32;4567</emphasis>
1107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__z_to_y)
1109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
1110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__concat(_mm512_cvtepi64_epi16(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>),
1111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_cvtepi64_epi16(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>)));
1112 &#32;&#32;&#32;&#32;&#32;&#32;}
1113 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__i64_to_i8)&#32;<emphasis role="comment">//{{{2</emphasis>
1114 &#32;&#32;&#32;&#32;&#32;&#32;{
1115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;__have_sse4_1)
1116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_shuffle_epi8(
1118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2smmintrin_8h_1a825642c8598f770a50145fb75b4d4f12">_mm_blend_epi16</link>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>,&#32;<link linkend="__classes_2lib_2include_2emmintrin_8h_1a2091290bb42bdb544fbc4c652afc2751">_mm_slli_si128</link>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;4),&#32;0x44),
1119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_setr_epi8(0,&#32;8,&#32;4,&#32;12,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,
1120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,
1121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-0x80)));
1122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;__have_ssse3)
1124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_unpacklo_epi16(
1126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_shuffle_epi8(
1127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>,&#32;_mm_setr_epi8(0,&#32;8,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,
1128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,
1129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80)),
1130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_shuffle_epi8(
1131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;_mm_setr_epi8(0,&#32;8,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,
1132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,
1133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80))));
1134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x)
1136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_type_t&lt;_Up,&#32;_M&gt;{_Up(__v0[0]),&#32;_Up(__v0[1]),
1138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Up(__v1[0]),&#32;_Up(__v1[1])};
1139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_x)
1141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__a&#32;=&#32;_mm256_shuffle_epi8(
1143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx2intrin_8h_1af0910e8aa0d6bc6777e296f8bb616d5b">_mm256_blend_epi32</link>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>,&#32;_mm256_slli_epi64(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;32),&#32;0xAA),
1144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_setr_epi8(0,&#32;8,&#32;-0x80,&#32;-0x80,&#32;4,&#32;12,&#32;-0x80,&#32;-0x80,
1145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,
1146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;0,&#32;8,&#32;-0x80,
1147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-0x80,&#32;4,&#32;12,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,
1148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80));
1149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(__lo128(__a)&#32;|&#32;__hi128(__a));
1150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;__z_to_x&#32;uses&#32;concat&#32;fallback</emphasis>
1151 &#32;&#32;&#32;&#32;&#32;&#32;}
1152 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__i32_to_i16)&#32;<emphasis role="comment">//{{{2</emphasis>
1153 &#32;&#32;&#32;&#32;&#32;&#32;{
1154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x)
1155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;AVX2&#32;is&#32;not&#32;available&#32;(would&#32;concat&#32;otherwise)</emphasis>
1157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse4_1)
1158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_shuffle_epi8(
1160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2smmintrin_8h_1a825642c8598f770a50145fb75b4d4f12">_mm_blend_epi16</link>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>,&#32;<link linkend="__classes_2lib_2include_2emmintrin_8h_1a2091290bb42bdb544fbc4c652afc2751">_mm_slli_si128</link>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;2),&#32;0xaa),
1161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_setr_epi8(0,&#32;1,&#32;4,&#32;5,&#32;8,&#32;9,&#32;12,&#32;13,&#32;2,&#32;3,&#32;6,&#32;7,&#32;10,
1162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;11,&#32;14,&#32;15)));
1163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_ssse3)
1165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
1167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_hadd_epi16(__to_intrin(__v0&#32;&lt;&lt;&#32;16),
1168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_intrin(__v1&#32;&lt;&lt;&#32;16)));
1169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
1170 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;_mm_unpacklo_epi64(</emphasis>
1171 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_shuffle_epi8(__i0,&#32;_mm_setr_epi8(0,&#32;1,&#32;4,&#32;5,&#32;8,&#32;9,</emphasis>
1172 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;12,&#32;13,&#32;8,&#32;9,&#32;12,&#32;13,&#32;12,&#32;13,&#32;14,&#32;15)),</emphasis>
1173 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_shuffle_epi8(__i1,&#32;_mm_setr_epi8(0,&#32;1,&#32;4,&#32;5,&#32;8,&#32;9,&#32;12,</emphasis>
1174 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;13,&#32;8,&#32;9,&#32;12,&#32;13,&#32;12,&#32;13,&#32;14,&#32;15)));</emphasis>
1175 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
1176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__a&#32;=&#32;_mm_unpacklo_epi16(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>);&#32;<emphasis role="comment">//&#32;04..&#32;15..</emphasis>
1180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__b&#32;=&#32;_mm_unpackhi_epi16(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>);&#32;<emphasis role="comment">//&#32;26..&#32;37..</emphasis>
1181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__c&#32;=&#32;_mm_unpacklo_epi16(__a,&#32;__b);&#32;&#32;&#32;<emphasis role="comment">//&#32;0246&#32;....</emphasis>
1182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__d&#32;=&#32;_mm_unpackhi_epi16(__a,&#32;__b);&#32;&#32;&#32;<emphasis role="comment">//&#32;1357&#32;....</emphasis>
1183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
1184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpacklo_epi16(__c,&#32;__d));&#32;<emphasis role="comment">//&#32;0123&#32;4567</emphasis>
1185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_y)
1188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__shuf
1190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm256_setr_epi8(0,&#32;1,&#32;4,&#32;5,&#32;8,&#32;9,&#32;12,&#32;13,&#32;-0x80,&#32;-0x80,
1191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,
1192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;1,&#32;4,&#32;5,&#32;8,&#32;9,&#32;12,&#32;13,&#32;-0x80,&#32;-0x80,
1193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80);
1194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__a&#32;=&#32;_mm256_shuffle_epi8(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>,&#32;__shuf);
1195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__b&#32;=&#32;_mm256_shuffle_epi8(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__shuf);
1196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
1197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__xzyw(_mm256_unpacklo_epi64(__a,&#32;__b)));
1198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;__z_to_z&#32;uses&#32;concat&#32;fallback</emphasis>
1199 &#32;&#32;&#32;&#32;&#32;&#32;}
1200 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__i32_to_i8)&#32;<emphasis role="comment">//{{{2</emphasis>
1201 &#32;&#32;&#32;&#32;&#32;&#32;{
1202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;__have_ssse3)
1203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;shufmask
1205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm_setr_epi8(0,&#32;4,&#32;8,&#32;12,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,
1206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,
1207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-0x80,&#32;-0x80);
1208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
1209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpacklo_epi32(_mm_shuffle_epi8(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>,&#32;shufmask),
1210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_shuffle_epi8(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;shufmask)));
1211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x)
1213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__a&#32;=&#32;_mm_unpacklo_epi8(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>);&#32;<emphasis role="comment">//&#32;04..&#32;....&#32;15..&#32;....</emphasis>
1215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__b&#32;=&#32;_mm_unpackhi_epi8(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>);&#32;<emphasis role="comment">//&#32;26..&#32;....&#32;37..&#32;....</emphasis>
1216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__c&#32;=&#32;_mm_unpacklo_epi8(__a,&#32;__b);&#32;&#32;&#32;<emphasis role="comment">//&#32;0246&#32;....&#32;....&#32;....</emphasis>
1217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__d&#32;=&#32;_mm_unpackhi_epi8(__a,&#32;__b);&#32;&#32;&#32;<emphasis role="comment">//&#32;1357&#32;....&#32;....&#32;....</emphasis>
1218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__e&#32;=&#32;_mm_unpacklo_epi8(__c,&#32;__d);&#32;&#32;&#32;<emphasis role="comment">//&#32;0123&#32;4567&#32;....&#32;....</emphasis>
1219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(__e&#32;&amp;&#32;__m128i{-1,&#32;0});
1220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_x)
1222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__a&#32;=&#32;_mm256_shuffle_epi8(
1224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx2intrin_8h_1a0ef549bdb477511f50c537eb535e3f35">_mm256_blend_epi16</link>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>,&#32;_mm256_slli_epi32(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;16),&#32;0xAA),
1225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_setr_epi8(0,&#32;4,&#32;8,&#32;12,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;2,
1226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;6,&#32;10,&#32;14,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;-0x80,
1227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;0,&#32;4,&#32;8,&#32;12,&#32;-0x80,
1228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-0x80,&#32;-0x80,&#32;-0x80,&#32;2,&#32;6,&#32;10,&#32;14));
1229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(__lo128(__a)&#32;|&#32;__hi128(__a));
1230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;__z_to_y&#32;uses&#32;concat&#32;fallback</emphasis>
1231 &#32;&#32;&#32;&#32;&#32;&#32;}
1232 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__i16_to_i8)&#32;<emphasis role="comment">//{{{2</emphasis>
1233 &#32;&#32;&#32;&#32;&#32;&#32;{
1234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;__have_ssse3)
1235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__shuf&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__m128i<emphasis role="keyword">&gt;</emphasis>(
1237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_type_t&lt;_UChar,&#32;16&gt;{0,&#32;2,&#32;4,&#32;6,&#32;8,&#32;10,&#32;12,&#32;14,&#32;0x80,
1238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x80,&#32;0x80,&#32;0x80,&#32;0x80,&#32;0x80,
1239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x80,&#32;0x80});
1240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
1241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpacklo_epi64(_mm_shuffle_epi8(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>,&#32;__shuf),
1242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_shuffle_epi8(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__shuf)));
1243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x)
1245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__a&#32;=&#32;_mm_unpacklo_epi8(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>);&#32;<emphasis role="comment">//&#32;08..&#32;19..&#32;2A..&#32;3B..</emphasis>
1247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__b&#32;=&#32;_mm_unpackhi_epi8(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>);&#32;<emphasis role="comment">//&#32;4C..&#32;5D..&#32;6E..&#32;7F..</emphasis>
1248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__c&#32;=&#32;_mm_unpacklo_epi8(__a,&#32;__b);&#32;&#32;&#32;<emphasis role="comment">//&#32;048C&#32;....&#32;159D&#32;....</emphasis>
1249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__d&#32;=&#32;_mm_unpackhi_epi8(__a,&#32;__b);&#32;&#32;&#32;<emphasis role="comment">//&#32;26AE&#32;....&#32;37BF&#32;....</emphasis>
1250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__e&#32;=&#32;_mm_unpacklo_epi8(__c,&#32;__d);&#32;&#32;&#32;<emphasis role="comment">//&#32;0246&#32;8ACE&#32;....&#32;....</emphasis>
1251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__f&#32;=&#32;_mm_unpackhi_epi8(__c,&#32;__d);&#32;&#32;&#32;<emphasis role="comment">//&#32;1357&#32;9BDF&#32;....&#32;....</emphasis>
1252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_unpacklo_epi8(__e,&#32;__f));
1253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_y)
1255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(__xzyw(_mm256_shuffle_epi8(
1257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__to_intrin(__v0)&#32;&amp;&#32;_mm256_set1_epi32(0x00ff00ff))
1258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;_mm256_slli_epi16(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;8),
1259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_setr_epi8(0,&#32;2,&#32;4,&#32;6,&#32;8,&#32;10,&#32;12,&#32;14,&#32;1,&#32;3,&#32;5,&#32;7,&#32;9,&#32;11,
1260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;13,&#32;15,&#32;0,&#32;2,&#32;4,&#32;6,&#32;8,&#32;10,&#32;12,&#32;14,&#32;1,&#32;3,&#32;5,
1261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;7,&#32;9,&#32;11,&#32;13,&#32;15))));
1262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;__z_to_z&#32;uses&#32;concat&#32;fallback</emphasis>
1263 &#32;&#32;&#32;&#32;&#32;&#32;}
1264 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__i64_to_f32)&#32;<emphasis role="comment">//{{{2</emphasis>
1265 &#32;&#32;&#32;&#32;&#32;&#32;{
1266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x)
1267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__make_wrapper&lt;float&gt;(__v0[0],&#32;__v0[1],&#32;__v1[0],&#32;__v1[1]);
1268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_y)
1269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__y_to_y&#32;&amp;&amp;&#32;__have_avx2);
1271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__a&#32;=&#32;_mm256_unpacklo_epi32(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>);&#32;<emphasis role="comment">//&#32;aeAE&#32;cgCG</emphasis>
1272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__b&#32;=&#32;_mm256_unpackhi_epi32(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>);&#32;<emphasis role="comment">//&#32;bfBF&#32;dhDH</emphasis>
1273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__lo32
1274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm256_unpacklo_epi32(__a,&#32;__b);&#32;<emphasis role="comment">//&#32;abef&#32;cdgh</emphasis>
1275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__hi32&#32;=&#32;__vector_bitcast&lt;
1276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;conditional_t&lt;is_signed_v&lt;_Tp&gt;,&#32;int,&#32;_UInt&gt;&gt;(
1277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_unpackhi_epi32(__a,&#32;__b));&#32;<emphasis role="comment">//&#32;ABEF&#32;CDGH</emphasis>
1278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__hi
1279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0x100000000LL
1280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;__convert_x86&lt;__vector_type_t&lt;float,&#32;8&gt;&gt;(__hi32);
1281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__mid
1282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0x10000&#32;*&#32;_mm256_cvtepi32_ps(_mm256_srli_epi32(__lo32,&#32;16));
1283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__lo
1284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm256_cvtepi32_ps(_mm256_set1_epi32(0x0000ffffu)&#32;&amp;&#32;__lo32);
1285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__xzyw((__hi&#32;+&#32;__mid)&#32;+&#32;__lo);
1286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__z_to_z&#32;&amp;&amp;&#32;__have_avx512dq)
1288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_signed_v&lt;_Tp&gt;&#32;?&#32;__concat(_mm512_cvtepi64_ps(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>),
1290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_cvtepi64_ps(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>))
1291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;__concat(_mm512_cvtepu64_ps(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>),
1292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_cvtepu64_ps(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>));
1293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__z_to_z&#32;&amp;&amp;&#32;is_signed_v&lt;_Tp&gt;)
1295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m512&#32;__hi32&#32;=&#32;_mm512_cvtepi32_ps(
1297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__concat(_mm512_cvtepi64_epi32(__to_intrin(__v0&#32;&gt;&gt;&#32;32)),
1298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_cvtepi64_epi32(__to_intrin(__v1&#32;&gt;&gt;&#32;32))));
1299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m512i&#32;__lo32&#32;=&#32;__concat(_mm512_cvtepi64_epi32(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>),
1300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_cvtepi64_epi32(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>));
1301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;split&#32;low&#32;32-bits,&#32;because&#32;if&#32;__hi32&#32;is&#32;a&#32;small&#32;negative</emphasis>
1302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;number,&#32;the&#32;24-bit&#32;mantissa&#32;may&#32;lose&#32;important&#32;information&#32;if</emphasis>
1303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;any&#32;of&#32;the&#32;high&#32;8&#32;bits&#32;of&#32;__lo32&#32;is&#32;set,&#32;leading&#32;to</emphasis>
1304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;catastrophic&#32;cancelation&#32;in&#32;the&#32;FMA</emphasis>
1305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m512&#32;__hi16
1306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm512_cvtepu32_ps(_mm512_set1_epi32(0xffff0000u)&#32;&amp;&#32;__lo32);
1307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m512&#32;__lo16
1308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm512_cvtepi32_ps(_mm512_set1_epi32(0x0000ffffu)&#32;&amp;&#32;__lo32);
1309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__hi32&#32;*&#32;0x100000000LL&#32;+&#32;__hi16)&#32;+&#32;__lo16;
1310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__z_to_z&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Tp&gt;)
1312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
1314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_cvtepu32_ps(__concat(
1315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_cvtepi64_epi32(<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1ae68977bb9e8ec9501b0ebc1ea77f8baa">_mm512_srai_epi64</link>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>,&#32;32)),
1316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_cvtepi64_epi32(<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1ae68977bb9e8ec9501b0ebc1ea77f8baa">_mm512_srai_epi64</link>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;32))))
1317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;0x100000000LL
1318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;_mm512_cvtepu32_ps(__concat(_mm512_cvtepi64_epi32(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>),
1319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm512_cvtepi64_epi32(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>))));
1320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1321 &#32;&#32;&#32;&#32;&#32;&#32;}
1322 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__f64_to_s32)&#32;<emphasis role="comment">//{{{2</emphasis>
1323 &#32;&#32;&#32;&#32;&#32;&#32;{
1324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;use&#32;concat&#32;fallback</emphasis>
1325 &#32;&#32;&#32;&#32;&#32;&#32;}
1326 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__f64_to_u32)&#32;<emphasis role="comment">//{{{2</emphasis>
1327 &#32;&#32;&#32;&#32;&#32;&#32;{
1328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;__have_sse4_1)
1329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up,&#32;_M&gt;(_mm_unpacklo_epi64(
1331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_cvttpd_epi32(<link linkend="__classes_2lib_2include_2smmintrin_8h_1a94fbc09cc347ab1d796120010ee0e612">_mm_floor_pd</link>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>)&#32;-&#32;0x8000&apos;0000u),
1332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_cvttpd_epi32(<link linkend="__classes_2lib_2include_2smmintrin_8h_1a94fbc09cc347ab1d796120010ee0e612">_mm_floor_pd</link>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>)&#32;-&#32;0x8000&apos;0000u)))
1333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;^&#32;0x8000&apos;0000u;
1334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;without&#32;SSE4.1&#32;just&#32;use&#32;the&#32;scalar&#32;fallback,&#32;it&apos;s&#32;only&#32;four</emphasis>
1335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;values</emphasis>
1336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_y)
1338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Up&gt;(
1340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__concat(_mm256_cvttpd_epi32(<link linkend="__classes_2lib_2include_2avxintrin_8h_1a47af141c2c323557386b3d304aab4d3f">_mm256_floor_pd</link>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>)
1341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;0x8000&apos;0000u),
1342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_cvttpd_epi32(<link linkend="__classes_2lib_2include_2avxintrin_8h_1a47af141c2c323557386b3d304aab4d3f">_mm256_floor_pd</link>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>)
1343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;0x8000&apos;0000u)))
1344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;^&#32;0x8000&apos;0000u;
1345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;__z_to_z&#32;uses&#32;fallback</emphasis>
1346 &#32;&#32;&#32;&#32;&#32;&#32;}
1347 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__f64_to_ibw)&#32;<emphasis role="comment">//{{{2</emphasis>
1348 &#32;&#32;&#32;&#32;&#32;&#32;{
1349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;one-arg&#32;__f64_to_ibw&#32;goes&#32;via&#32;_SimdWrapper&lt;int,&#32;?&gt;.&#32;The&#32;fallback</emphasis>
1350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;would&#32;go&#32;via&#32;two&#32;independet&#32;conversions&#32;to&#32;_SimdWrapper&lt;_To&gt;&#32;and</emphasis>
1351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;subsequent&#32;interleaving.&#32;This&#32;is&#32;better,&#32;because&#32;f64-&gt;__i32</emphasis>
1352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;allows&#32;to&#32;combine&#32;__v0&#32;and&#32;__v1&#32;into&#32;one&#32;register:&#32;if&#32;constexpr</emphasis>
1353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(__z_to_x&#32;||&#32;__y_to_x)&#32;{</emphasis>
1354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__convert_x86&lt;_To&gt;(
1355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__convert_x86&lt;__vector_type_t&lt;int,&#32;_Np&#32;*&#32;2&gt;&gt;(__v0,&#32;__v1));
1356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//}</emphasis>
1357 &#32;&#32;&#32;&#32;&#32;&#32;}
1358 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__f32_to_ibw)&#32;<emphasis role="comment">//{{{2</emphasis>
1359 &#32;&#32;&#32;&#32;&#32;&#32;{
1360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__convert_x86&lt;_To&gt;(
1361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__convert_x86&lt;__vector_type_t&lt;int,&#32;_Np&gt;&gt;(__v0),
1362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__convert_x86&lt;__vector_type_t&lt;int,&#32;_Np&gt;&gt;(__v1));
1363 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//}}}</emphasis>
1364 
1365 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;fallback:&#32;{{{2</emphasis>
1366 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_To)&#32;&gt;=&#32;32)
1367 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;_To&#32;is&#32;ymm&#32;or&#32;zmm,&#32;then&#32;_SimdWrapper&lt;_Up,&#32;_M&#32;/&#32;2&gt;&#32;is&#32;xmm&#32;or&#32;ymm</emphasis>
1368 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__concat(__convert_x86&lt;__vector_type_t&lt;_Up,&#32;_M&#32;/&#32;2&gt;&gt;(__v0),
1369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__convert_x86&lt;__vector_type_t&lt;_Up,&#32;_M&#32;/&#32;2&gt;&gt;(__v1));
1370 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;16)
1371 &#32;&#32;&#32;&#32;&#32;&#32;{
1372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__lo&#32;=&#32;__to_intrin(__convert_x86&lt;_To&gt;(__v0));
1373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__hi&#32;=&#32;__to_intrin(__convert_x86&lt;_To&gt;(__v1));
1374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;*&#32;_Np&#32;==&#32;8)
1375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_floating_point_v&lt;_Up&gt;)
1377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__auto_bitcast(
1378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpacklo_pd(__vector_bitcast&lt;double&gt;(__lo),
1379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;double&gt;(__hi)));
1380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_unpacklo_epi64(__lo,&#32;__hi));
1382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;*&#32;_Np&#32;==&#32;4)
1384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_floating_point_v&lt;_Up&gt;)
1386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__auto_bitcast(
1387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpacklo_ps(__vector_bitcast&lt;float&gt;(__lo),
1388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;float&gt;(__hi)));
1389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_unpacklo_epi32(__lo,&#32;__hi));
1391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;*&#32;_Np&#32;==&#32;2)
1393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_unpacklo_epi16(__lo,&#32;__hi));
1394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
1396 &#32;&#32;&#32;&#32;&#32;&#32;}
1397 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1398 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_convert&lt;_To&gt;(__v0,&#32;__v1,&#32;make_index_sequence&lt;_Np&gt;());
1399 &#32;&#32;&#32;&#32;<emphasis role="comment">//}}}</emphasis>
1400 &#32;&#32;&#32;&#32;&#32;&#32;}
1401 &#32;&#32;}
1402 
1403 <emphasis role="comment">//}}}1</emphasis>
1404 <emphasis role="comment">//&#32;4-arg&#32;__convert_x86&#32;{{{1</emphasis>
1405 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keyword">typename</emphasis>&#32;_V,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
1406 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_To
1407 &#32;&#32;__convert_x86(_V&#32;__v0,&#32;_V&#32;__v1,&#32;_V&#32;__v2,&#32;_V&#32;__v3)
1408 &#32;&#32;{
1409 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__is_vector_type_v&lt;_V&gt;);
1410 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits::value_type;
1411 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&#32;=&#32;_Traits::_S_full_size;
1412 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>&#32;=&#32;__to_intrin(__v0);
1413 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;=&#32;__to_intrin(__v1);
1414 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__i2&#32;=&#32;__to_intrin(__v2);
1415 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__i3&#32;=&#32;__to_intrin(__v3);
1416 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Up&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_VectorTraits&lt;_To&gt;::value_type;
1417 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_M&#32;=&#32;_VectorTraits&lt;_To&gt;::_S_full_size;
1418 
1419 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(4&#32;*&#32;_Np&#32;&lt;=&#32;_M,
1420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;__v2/__v3&#32;would&#32;be&#32;discarded;&#32;use&#32;the&#32;two/one-argument&#32;&quot;</emphasis>
1421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;__convert_x86&#32;overload&#32;instead&quot;</emphasis>);
1422 
1423 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[xyz]_to_[xyz]&#32;{{{2</emphasis>
1424 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__x_to_x
1425 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;&lt;=&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;&lt;=&#32;16;
1426 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__x_to_y
1427 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;&lt;=&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;32;
1428 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__x_to_z
1429 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;&lt;=&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;64;
1430 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__y_to_x
1431 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;&lt;=&#32;16;
1432 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__y_to_y
1433 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;32;
1434 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__y_to_z
1435 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;64;
1436 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__z_to_x
1437 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;&lt;=&#32;16;
1438 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__z_to_y
1439 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;32;
1440 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__z_to_z
1441 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;64;
1442 
1443 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;iX_to_iX&#32;{{{2</emphasis>
1444 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i_to_i
1445 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Up&gt;&#32;&amp;&amp;&#32;is_integral_v&lt;_Tp&gt;;
1446 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i8_to_i16
1447 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__i_to_i&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;2;
1448 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i8_to_i32
1449 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__i_to_i&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4;
1450 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i8_to_i64
1451 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__i_to_i&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8;
1452 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i16_to_i8
1453 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__i_to_i&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;1;
1454 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i16_to_i32
1455 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__i_to_i&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4;
1456 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i16_to_i64
1457 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__i_to_i&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8;
1458 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i32_to_i8
1459 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__i_to_i&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;1;
1460 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i32_to_i16
1461 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__i_to_i&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;2;
1462 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i32_to_i64
1463 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__i_to_i&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8;
1464 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i64_to_i8
1465 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__i_to_i&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;1;
1466 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i64_to_i16
1467 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__i_to_i&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;2;
1468 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i64_to_i32
1469 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__i_to_i&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4;
1470 
1471 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[fsu]X_to_[fsu]X&#32;{{{2</emphasis>
1472 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ibw&#32;=&#32;integral&#32;&amp;&amp;&#32;byte&#32;or&#32;word,&#32;i.e.&#32;char&#32;and&#32;short&#32;with&#32;any&#32;signedness</emphasis>
1473 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i64_to_f32
1474 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8
1475 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4;
1476 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__s32_to_f32
1477 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4
1478 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4;
1479 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__s16_to_f32
1480 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2
1481 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4;
1482 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__s8_to_f32
1483 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1
1484 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4;
1485 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__u32_to_f32
1486 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4
1487 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4;
1488 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__u16_to_f32
1489 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2
1490 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4;
1491 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__u8_to_f32
1492 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1
1493 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4;
1494 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__s64_to_f64
1495 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8
1496 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8;
1497 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__s32_to_f64
1498 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4
1499 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8;
1500 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__s16_to_f64
1501 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2
1502 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8;
1503 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__s8_to_f64
1504 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1
1505 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8;
1506 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__u64_to_f64
1507 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8
1508 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8;
1509 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__u32_to_f64
1510 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4
1511 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8;
1512 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__u16_to_f64
1513 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;2
1514 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8;
1515 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__u8_to_f64
1516 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1
1517 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8;
1518 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__f32_to_s64
1519 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Up&gt;&#32;&amp;&amp;&#32;is_signed_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8
1520 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4;
1521 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__f32_to_s32
1522 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Up&gt;&#32;&amp;&amp;&#32;is_signed_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4
1523 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4;
1524 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__f32_to_u64
1525 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Up&gt;&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8
1526 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4;
1527 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__f32_to_u32
1528 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Up&gt;&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4
1529 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4;
1530 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__f64_to_s64
1531 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Up&gt;&#32;&amp;&amp;&#32;is_signed_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8
1532 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8;
1533 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__f64_to_s32
1534 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Up&gt;&#32;&amp;&amp;&#32;is_signed_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4
1535 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8;
1536 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__f64_to_u64
1537 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Up&gt;&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8
1538 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8;
1539 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__f64_to_u32
1540 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Up&gt;&#32;&amp;&amp;&#32;is_unsigned_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4
1541 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8;
1542 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__f32_to_ibw
1543 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;&lt;=&#32;2
1544 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4;
1545 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__f64_to_ibw
1546 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;&lt;=&#32;2
1547 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8;
1548 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__f32_to_f64
1549 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_floating_point_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4
1550 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;8;
1551 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__f64_to_f32
1552 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_floating_point_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8
1553 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;4;
1554 
1555 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__i_to_i&#32;&amp;&amp;&#32;__y_to_x&#32;&amp;&amp;&#32;!__have_avx2)&#32;<emphasis role="comment">//{{{2</emphasis>
1556 &#32;&#32;&#32;&#32;&#32;&#32;{
1557 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&lt;double,&#32;4&gt;,&#32;&lt;double,&#32;4&gt;,&#32;&lt;double,&#32;4&gt;,&#32;&lt;double,&#32;4&gt;&#32;=&gt;&#32;&lt;char,&#32;16&gt;</emphasis>
1558 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__convert_x86&lt;_To&gt;(__lo128(__v0),&#32;__hi128(__v0),&#32;__lo128(__v1),
1559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__hi128(__v1),&#32;__lo128(__v2),&#32;__hi128(__v2),
1560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lo128(__v3),&#32;__hi128(__v3));
1561 &#32;&#32;&#32;&#32;&#32;&#32;}
1562 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__i_to_i)&#32;<emphasis role="comment">//&#32;assert&#32;ISA&#32;{{{2</emphasis>
1563 &#32;&#32;&#32;&#32;&#32;&#32;{
1564 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__x_to_x&#32;||&#32;__have_avx2,
1565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;integral&#32;conversions&#32;with&#32;ymm&#32;registers&#32;require&#32;AVX2&quot;</emphasis>);
1566 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__have_avx512bw
1567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;((<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;&gt;=&#32;4&#32;||&#32;<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;&lt;&#32;64)
1568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;&gt;=&#32;4&#32;||&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;&lt;&#32;64)),
1569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;8/16-bit&#32;integers&#32;in&#32;zmm&#32;registers&#32;require&#32;AVX512BW&quot;</emphasis>);
1570 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>((<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;&lt;&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;&lt;&#32;64)&#32;||&#32;__have_avx512f,
1571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;integral&#32;conversions&#32;with&#32;ymm&#32;registers&#32;require&#32;AVX2&quot;</emphasis>);
1572 &#32;&#32;&#32;&#32;&#32;&#32;}
1573 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concat&#32;=&gt;&#32;use&#32;2-arg&#32;__convert_x86&#32;{{{2</emphasis>
1574 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;&lt;&#32;16&#32;||&#32;(<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;==&#32;16&#32;&amp;&amp;&#32;__have_avx2)
1575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;(<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;==&#32;16&#32;&amp;&amp;&#32;__have_avx
1576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;)
1577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;(<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;==&#32;32&#32;&amp;&amp;&#32;__have_avx512f))
1578 &#32;&#32;&#32;&#32;&#32;&#32;{
1579 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;ISA&#32;can&#32;handle&#32;wider&#32;input&#32;registers,&#32;so&#32;concat&#32;and&#32;use&#32;two-arg</emphasis>
1580 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;implementation.&#32;This&#32;reduces&#32;code&#32;duplication&#32;considerably.</emphasis>
1581 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__convert_x86&lt;_To&gt;(__concat(__v0,&#32;__v1),&#32;__concat(__v2,&#32;__v3));
1582 &#32;&#32;&#32;&#32;&#32;&#32;}
1583 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//{{{2</emphasis>
1584 &#32;&#32;&#32;&#32;&#32;&#32;{
1585 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;conversion&#32;using&#32;bit&#32;reinterpretation&#32;(or&#32;no&#32;conversion&#32;at&#32;all)</emphasis>
1586 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;should&#32;all&#32;go&#32;through&#32;the&#32;concat&#32;branch&#32;above:</emphasis>
1587 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(
1588 &#32;&#32;&#32;&#32;&#32;&#32;!(is_floating_point_v&lt;
1589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp&gt;&#32;==&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)));
1590 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;handle&#32;all&#32;zero&#32;extension{{{2</emphasis>
1591 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(4&#32;*&#32;_Np&#32;&lt;&#32;_M&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;&gt;&#32;16)
1592 &#32;&#32;&#32;&#32;&#32;&#32;{
1593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;Min&#32;=&#32;16&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Up);
1594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__zero_extend(
1595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__convert_x86&lt;
1596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_type_t&lt;_Up,&#32;(Min&#32;&gt;&#32;4&#32;*&#32;_Np)&#32;?&#32;Min&#32;:&#32;4&#32;*&#32;_Np&gt;&gt;(
1597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__v0,&#32;__v1,&#32;__v2,&#32;__v3));
1598 &#32;&#32;&#32;&#32;&#32;&#32;}
1599 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__i64_to_i16)&#32;<emphasis role="comment">//{{{2</emphasis>
1600 &#32;&#32;&#32;&#32;&#32;&#32;{
1601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;__have_sse4_1)
1602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_shuffle_epi8(
1604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2smmintrin_8h_1a825642c8598f770a50145fb75b4d4f12">_mm_blend_epi16</link>(
1605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2smmintrin_8h_1a825642c8598f770a50145fb75b4d4f12">_mm_blend_epi16</link>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>,&#32;<link linkend="__classes_2lib_2include_2emmintrin_8h_1a2091290bb42bdb544fbc4c652afc2751">_mm_slli_si128</link>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;2),&#32;0x22),
1606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2smmintrin_8h_1a825642c8598f770a50145fb75b4d4f12">_mm_blend_epi16</link>(<link linkend="__classes_2lib_2include_2emmintrin_8h_1a2091290bb42bdb544fbc4c652afc2751">_mm_slli_si128</link>(__i2,&#32;4),
1607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2emmintrin_8h_1a2091290bb42bdb544fbc4c652afc2751">_mm_slli_si128</link>(__i3,&#32;6),&#32;0x88),
1608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xcc),
1609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_setr_epi8(0,&#32;1,&#32;8,&#32;9,&#32;2,&#32;3,&#32;10,&#32;11,&#32;4,&#32;5,&#32;12,&#32;13,&#32;6,&#32;7,
1610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;14,&#32;15)));
1611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_y&#32;&amp;&amp;&#32;__have_avx2)
1613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm256_shuffle_epi8(
1615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__xzyw(<link linkend="__classes_2lib_2include_2avx2intrin_8h_1a0ef549bdb477511f50c537eb535e3f35">_mm256_blend_epi16</link>(
1616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__auto_bitcast(
1617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1abac8378ee6937a3b38f01f57d7728ad0">_mm256_shuffle_ps</link>(__vector_bitcast&lt;float&gt;(__v0),
1618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;float&gt;(__v2),
1619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x88)),&#32;<emphasis role="comment">//&#32;0.1.&#32;8.9.&#32;2.3.&#32;A.B.</emphasis>
1620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_intrin(__vector_bitcast&lt;int&gt;(<link linkend="__classes_2lib_2include_2avxintrin_8h_1abac8378ee6937a3b38f01f57d7728ad0">_mm256_shuffle_ps</link>(
1621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;float&gt;(__v1),
1622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;float&gt;(__v3),&#32;0x88))
1623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;16),&#32;<emphasis role="comment">//&#32;.4.5&#32;.C.D&#32;.6.7&#32;.E.F</emphasis>
1624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xaa)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0415&#32;8C9D&#32;2637&#32;AEBF</emphasis>
1625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;),&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0415&#32;2637&#32;8C9D&#32;AEBF</emphasis>
1626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_setr_epi8(0,&#32;1,&#32;4,&#32;5,&#32;8,&#32;9,&#32;12,&#32;13,&#32;2,&#32;3,&#32;6,&#32;7,&#32;10,&#32;11,
1627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;14,&#32;15,&#32;0,&#32;1,&#32;4,&#32;5,&#32;8,&#32;9,&#32;12,&#32;13,&#32;2,&#32;3,&#32;6,&#32;7,
1628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;10,&#32;11,&#32;14,&#32;15)));
1629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
1630 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;auto&#32;__a&#32;=&#32;_mm256_unpacklo_epi16(__v0,&#32;__v1);&#32;&#32;//&#32;04..&#32;....&#32;26..</emphasis>
1631 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;....&#32;auto&#32;__b&#32;=&#32;_mm256_unpackhi_epi16(__v0,&#32;__v1);&#32;&#32;//&#32;15..</emphasis>
1632 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;....&#32;37..&#32;....&#32;auto&#32;__c&#32;=&#32;_mm256_unpacklo_epi16(__v2,&#32;__v3);&#32;&#32;//</emphasis>
1633 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;8C..&#32;....&#32;AE..&#32;....&#32;auto&#32;__d&#32;=&#32;_mm256_unpackhi_epi16(__v2,</emphasis>
1634 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__v3);</emphasis>
1635 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;9D..&#32;....&#32;BF..&#32;....&#32;auto&#32;__e&#32;=&#32;_mm256_unpacklo_epi16(__a,</emphasis>
1636 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__b);</emphasis>
1637 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;0145&#32;....&#32;2367&#32;....&#32;auto&#32;__f&#32;=&#32;_mm256_unpacklo_epi16(__c,</emphasis>
1638 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__d);</emphasis>
1639 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;89CD&#32;....&#32;ABEF&#32;....&#32;auto&#32;__g&#32;=&#32;_mm256_unpacklo_epi64(__e,</emphasis>
1640 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__f);</emphasis>
1641 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;0145&#32;89CD&#32;2367&#32;ABEF&#32;return&#32;__concat(</emphasis>
1642 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpacklo_epi32(__lo128(__g),&#32;__hi128(__g)),</emphasis>
1643 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpackhi_epi32(__lo128(__g),&#32;__hi128(__g)));&#32;&#32;//&#32;0123</emphasis>
1644 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;4567&#32;89AB&#32;CDEF</emphasis>
1645 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
1646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;else&#32;use&#32;fallback</emphasis>
1647 &#32;&#32;&#32;&#32;&#32;&#32;}
1648 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__i64_to_i8)&#32;<emphasis role="comment">//{{{2</emphasis>
1649 &#32;&#32;&#32;&#32;&#32;&#32;{
1650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x)
1651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;use&#32;fallback&#32;for&#32;now</emphasis>
1653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_x)
1655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__a
1657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm256_srli_epi32(_mm256_slli_epi32(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>,&#32;24),&#32;24)
1658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;_mm256_srli_epi32(_mm256_slli_epi32(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;24),&#32;16)
1659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;_mm256_srli_epi32(_mm256_slli_epi32(__i2,&#32;24),&#32;8)
1660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;_mm256_slli_epi32(
1661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__i3,&#32;24);&#32;<emphasis role="comment">//&#32;048C&#32;....&#32;159D&#32;....&#32;26AE&#32;....&#32;37BF&#32;....</emphasis>
1662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*return&#32;_mm_shuffle_epi8(</emphasis>
1663 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_blend_epi32(__lo128(__a)&#32;&lt;&lt;&#32;32,&#32;__hi128(__a),&#32;0x5),</emphasis>
1664 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_setr_epi8(4,&#32;12,&#32;0,&#32;8,&#32;5,&#32;13,&#32;1,&#32;9,&#32;6,&#32;14,&#32;2,&#32;10,&#32;7,&#32;15,</emphasis>
1665 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;3,&#32;11));*/</emphasis>
1666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__b&#32;=&#32;_mm256_unpackhi_epi64(
1667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a,&#32;__a);&#32;<emphasis role="comment">//&#32;159D&#32;....&#32;159D&#32;....&#32;37BF&#32;....&#32;37BF&#32;....</emphasis>
1668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__c&#32;=&#32;_mm256_unpacklo_epi8(
1669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a,&#32;__b);&#32;<emphasis role="comment">//&#32;0145&#32;89CD&#32;....&#32;....&#32;2367&#32;ABEF&#32;....&#32;....</emphasis>
1670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
1671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpacklo_epi16(__lo128(__c),
1672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__hi128(__c)));&#32;<emphasis role="comment">//&#32;0123&#32;4567&#32;89AB&#32;CDEF</emphasis>
1673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1674 &#32;&#32;&#32;&#32;&#32;&#32;}
1675 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__i32_to_i8)&#32;<emphasis role="comment">//{{{2</emphasis>
1676 &#32;&#32;&#32;&#32;&#32;&#32;{
1677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x)
1678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_ssse3)
1680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__x0&#32;=&#32;__vector_bitcast&lt;_UInt&gt;(__v0)&#32;&amp;&#32;0xff;
1682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__x1&#32;=&#32;(__vector_bitcast&lt;_UInt&gt;(__v1)&#32;&amp;&#32;0xff)
1683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;8;
1684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__x2&#32;=&#32;(__vector_bitcast&lt;_UInt&gt;(__v2)&#32;&amp;&#32;0xff)
1685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;16;
1686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__x3&#32;=&#32;__vector_bitcast&lt;_UInt&gt;(__v3)&#32;&lt;&lt;&#32;24;
1687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(
1688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_shuffle_epi8(__to_intrin(__x0&#32;|&#32;__x1&#32;|&#32;__x2&#32;|&#32;__x3),
1689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_setr_epi8(0,&#32;4,&#32;8,&#32;12,&#32;1,&#32;5,&#32;9,&#32;13,
1690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;2,&#32;6,&#32;10,&#32;14,&#32;3,&#32;7,&#32;11,
1691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;15)));
1692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__a
1696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm_unpacklo_epi8(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>,&#32;__i2);&#32;<emphasis role="comment">//&#32;08..&#32;....&#32;19..&#32;....</emphasis>
1697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__b
1698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm_unpackhi_epi8(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>,&#32;__i2);&#32;<emphasis role="comment">//&#32;2A..&#32;....&#32;3B..&#32;....</emphasis>
1699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__c
1700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm_unpacklo_epi8(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__i3);&#32;<emphasis role="comment">//&#32;4C..&#32;....&#32;5D..&#32;....</emphasis>
1701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__d
1702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm_unpackhi_epi8(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__i3);&#32;<emphasis role="comment">//&#32;6E..&#32;....&#32;7F..&#32;....</emphasis>
1703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__e
1704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm_unpacklo_epi8(__a,&#32;__c);&#32;<emphasis role="comment">//&#32;048C&#32;....&#32;....&#32;....</emphasis>
1705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__f
1706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm_unpackhi_epi8(__a,&#32;__c);&#32;<emphasis role="comment">//&#32;159D&#32;....&#32;....&#32;....</emphasis>
1707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__g
1708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm_unpacklo_epi8(__b,&#32;__d);&#32;<emphasis role="comment">//&#32;26AE&#32;....&#32;....&#32;....</emphasis>
1709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__h
1710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm_unpackhi_epi8(__b,&#32;__d);&#32;<emphasis role="comment">//&#32;37BF&#32;....&#32;....&#32;....</emphasis>
1711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_unpacklo_epi8(
1712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpacklo_epi8(__e,&#32;__g),&#32;<emphasis role="comment">//&#32;0246&#32;8ACE&#32;....&#32;....</emphasis>
1713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpacklo_epi8(__f,&#32;__h)&#32;&#32;<emphasis role="comment">//&#32;1357&#32;9BDF&#32;....&#32;....</emphasis>
1714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0123&#32;4567&#32;89AB&#32;CDEF</emphasis>
1715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_y)
1718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__a&#32;=&#32;_mm256_shuffle_epi8(
1720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_intrin((__vector_bitcast&lt;_UShort&gt;(<link linkend="__classes_2lib_2include_2avx2intrin_8h_1a0ef549bdb477511f50c537eb535e3f35">_mm256_blend_epi16</link>(
1721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>,&#32;_mm256_slli_epi32(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;16),&#32;0xAA))
1722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&#32;0xff)
1723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__vector_bitcast&lt;_UShort&gt;(<link linkend="__classes_2lib_2include_2avx2intrin_8h_1a0ef549bdb477511f50c537eb535e3f35">_mm256_blend_epi16</link>(
1724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__i2,&#32;_mm256_slli_epi32(__i3,&#32;16),&#32;0xAA))
1725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;8)),
1726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_setr_epi8(0,&#32;4,&#32;8,&#32;12,&#32;2,&#32;6,&#32;10,&#32;14,&#32;1,&#32;5,&#32;9,&#32;13,&#32;3,&#32;7,
1727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;11,&#32;15,&#32;0,&#32;4,&#32;8,&#32;12,&#32;2,&#32;6,&#32;10,&#32;14,&#32;1,&#32;5,&#32;9,
1728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;13,&#32;3,&#32;7,&#32;11,&#32;15));
1729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm256_permutevar8x32_epi32(
1730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a,&#32;_mm256_setr_epi32(0,&#32;4,&#32;1,&#32;5,&#32;2,&#32;6,&#32;3,&#32;7)));
1731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1732 &#32;&#32;&#32;&#32;&#32;&#32;}
1733 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__i64_to_f32)&#32;<emphasis role="comment">//{{{2</emphasis>
1734 &#32;&#32;&#32;&#32;&#32;&#32;{
1735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;this&#32;branch&#32;is&#32;only&#32;relevant&#32;with&#32;AVX&#32;and&#32;w/o&#32;AVX2&#32;(i.e.&#32;no&#32;ymm</emphasis>
1736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;integers)</emphasis>
1737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_y)
1738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__make_wrapper&lt;float&gt;(__v0[0],&#32;__v0[1],&#32;__v1[0],&#32;__v1[1],
1740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__v2[0],&#32;__v2[1],&#32;__v3[0],
1741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__v3[1]);
1742 
1743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__a&#32;=&#32;_mm_unpacklo_epi32(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>);&#32;&#32;&#32;<emphasis role="comment">//&#32;acAC</emphasis>
1744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__b&#32;=&#32;_mm_unpackhi_epi32(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>);&#32;&#32;&#32;<emphasis role="comment">//&#32;bdBD</emphasis>
1745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__c&#32;=&#32;_mm_unpacklo_epi32(__i2,&#32;__i3);&#32;&#32;&#32;<emphasis role="comment">//&#32;egEG</emphasis>
1746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__d&#32;=&#32;_mm_unpackhi_epi32(__i2,&#32;__i3);&#32;&#32;&#32;<emphasis role="comment">//&#32;fhFH</emphasis>
1747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__lo32a&#32;=&#32;_mm_unpacklo_epi32(__a,&#32;__b);&#32;<emphasis role="comment">//&#32;abcd</emphasis>
1748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__lo32b&#32;=&#32;_mm_unpacklo_epi32(__c,&#32;__d);&#32;<emphasis role="comment">//&#32;efgh</emphasis>
1749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__hi32&#32;=&#32;__vector_bitcast&lt;
1750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;conditional_t&lt;is_signed_v&lt;_Tp&gt;,&#32;int,&#32;_UInt&gt;&gt;(
1751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__concat(_mm_unpackhi_epi32(__a,&#32;__b),
1752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpackhi_epi32(__c,&#32;__d)));&#32;<emphasis role="comment">//&#32;ABCD&#32;EFGH</emphasis>
1753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__hi
1754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0x100000000LL
1755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;__convert_x86&lt;__vector_type_t&lt;float,&#32;8&gt;&gt;(__hi32);
1756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__mid
1757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0x10000
1758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;_mm256_cvtepi32_ps(__concat(_mm_srli_epi32(__lo32a,&#32;16),
1759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_srli_epi32(__lo32b,&#32;16)));
1760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__lo&#32;=&#32;_mm256_cvtepi32_ps(
1761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__concat(_mm_set1_epi32(0x0000ffffu)&#32;&amp;&#32;__lo32a,
1762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_set1_epi32(0x0000ffffu)&#32;&amp;&#32;__lo32b));
1763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__hi&#32;+&#32;__mid)&#32;+&#32;__lo;
1764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1765 &#32;&#32;&#32;&#32;&#32;&#32;}
1766 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__f64_to_ibw)&#32;<emphasis role="comment">//{{{2</emphasis>
1767 &#32;&#32;&#32;&#32;&#32;&#32;{
1768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__convert_x86&lt;_To&gt;(
1769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__convert_x86&lt;__vector_type_t&lt;int,&#32;_Np&#32;*&#32;2&gt;&gt;(__v0,&#32;__v1),
1770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__convert_x86&lt;__vector_type_t&lt;int,&#32;_Np&#32;*&#32;2&gt;&gt;(__v2,&#32;__v3));
1771 &#32;&#32;&#32;&#32;&#32;&#32;}
1772 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__f32_to_ibw)&#32;<emphasis role="comment">//{{{2</emphasis>
1773 &#32;&#32;&#32;&#32;&#32;&#32;{
1774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__convert_x86&lt;_To&gt;(
1775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__convert_x86&lt;__vector_type_t&lt;int,&#32;_Np&gt;&gt;(__v0),
1776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__convert_x86&lt;__vector_type_t&lt;int,&#32;_Np&gt;&gt;(__v1),
1777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__convert_x86&lt;__vector_type_t&lt;int,&#32;_Np&gt;&gt;(__v2),
1778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__convert_x86&lt;__vector_type_t&lt;int,&#32;_Np&gt;&gt;(__v3));
1779 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//}}}</emphasis>
1780 
1781 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;fallback:&#32;{{{2</emphasis>
1782 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_To)&#32;&gt;=&#32;32)
1783 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;_To&#32;is&#32;ymm&#32;or&#32;zmm,&#32;then&#32;_SimdWrapper&lt;_Up,&#32;_M&#32;/&#32;2&gt;&#32;is&#32;xmm&#32;or&#32;ymm</emphasis>
1784 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__concat(__convert_x86&lt;__vector_type_t&lt;_Up,&#32;_M&#32;/&#32;2&gt;&gt;(__v0,
1785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__v1),
1786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__convert_x86&lt;__vector_type_t&lt;_Up,&#32;_M&#32;/&#32;2&gt;&gt;(__v2,
1787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__v3));
1788 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;16)
1789 &#32;&#32;&#32;&#32;&#32;&#32;{
1790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__lo&#32;=&#32;__to_intrin(__convert_x86&lt;_To&gt;(__v0,&#32;__v1));
1791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__hi&#32;=&#32;__to_intrin(__convert_x86&lt;_To&gt;(__v2,&#32;__v3));
1792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;*&#32;_Np&#32;*&#32;2&#32;==&#32;8)
1793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_floating_point_v&lt;_Up&gt;)
1795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__auto_bitcast(_mm_unpacklo_pd(__lo,&#32;__hi));
1796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_unpacklo_epi64(__lo,&#32;__hi));
1798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;*&#32;_Np&#32;*&#32;2&#32;==&#32;4)
1800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_floating_point_v&lt;_Up&gt;)
1802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__auto_bitcast(_mm_unpacklo_ps(__lo,&#32;__hi));
1803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_unpacklo_epi32(__lo,&#32;__hi));
1805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
1808 &#32;&#32;&#32;&#32;&#32;&#32;}
1809 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1810 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_convert&lt;_To&gt;(__v0,&#32;__v1,&#32;__v2,&#32;__v3,
1811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;make_index_sequence&lt;_Np&gt;());
1812 &#32;&#32;&#32;&#32;<emphasis role="comment">//}}}2</emphasis>
1813 &#32;&#32;&#32;&#32;&#32;&#32;}
1814 &#32;&#32;}
1815 
1816 <emphasis role="comment">//}}}</emphasis>
1817 <emphasis role="comment">//&#32;8-arg&#32;__convert_x86&#32;{{{1</emphasis>
1818 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keyword">typename</emphasis>&#32;_V,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
1819 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_To
1820 &#32;&#32;__convert_x86(_V&#32;__v0,&#32;_V&#32;__v1,&#32;_V&#32;__v2,&#32;_V&#32;__v3,&#32;_V&#32;__v4,&#32;_V&#32;__v5,&#32;_V&#32;__v6,
1821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_V&#32;__v7)
1822 &#32;&#32;{
1823 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__is_vector_type_v&lt;_V&gt;);
1824 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits::value_type;
1825 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&#32;=&#32;_Traits::_S_full_size;
1826 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>&#32;=&#32;__to_intrin(__v0);
1827 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;=&#32;__to_intrin(__v1);
1828 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__i2&#32;=&#32;__to_intrin(__v2);
1829 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__i3&#32;=&#32;__to_intrin(__v3);
1830 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__i4&#32;=&#32;__to_intrin(__v4);
1831 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__i5&#32;=&#32;__to_intrin(__v5);
1832 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__i6&#32;=&#32;__to_intrin(__v6);
1833 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__i7&#32;=&#32;__to_intrin(__v7);
1834 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Up&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_VectorTraits&lt;_To&gt;::value_type;
1835 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_M&#32;=&#32;_VectorTraits&lt;_To&gt;::_S_full_size;
1836 
1837 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(8&#32;*&#32;_Np&#32;&lt;=&#32;_M,
1838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;__v4-__v7&#32;would&#32;be&#32;discarded;&#32;use&#32;the&#32;four/two/one-argument&#32;&quot;</emphasis>
1839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;__convert_x86&#32;overload&#32;instead&quot;</emphasis>);
1840 
1841 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[xyz]_to_[xyz]&#32;{{{2</emphasis>
1842 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__x_to_x
1843 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;&lt;=&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;&lt;=&#32;16;
1844 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__x_to_y
1845 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;&lt;=&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;32;
1846 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__x_to_z
1847 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;&lt;=&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;64;
1848 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__y_to_x
1849 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;&lt;=&#32;16;
1850 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__y_to_y
1851 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;32;
1852 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__y_to_z
1853 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;64;
1854 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__z_to_x
1855 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;&lt;=&#32;16;
1856 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__z_to_y
1857 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;32;
1858 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__z_to_z
1859 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;==&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;64;
1860 
1861 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[if]X_to_i8&#32;{{{2</emphasis>
1862 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i_to_i
1863 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Up&gt;&#32;&amp;&amp;&#32;is_integral_v&lt;_Tp&gt;;
1864 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__i64_to_i8
1865 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__i_to_i&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;1;
1866 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__f64_to_i8
1867 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_integral_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;1
1868 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8;
1869 
1870 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__i_to_i)&#32;<emphasis role="comment">//&#32;assert&#32;ISA&#32;{{{2</emphasis>
1871 &#32;&#32;&#32;&#32;&#32;&#32;{
1872 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__x_to_x&#32;||&#32;__have_avx2,
1873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;integral&#32;conversions&#32;with&#32;ymm&#32;registers&#32;require&#32;AVX2&quot;</emphasis>);
1874 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__have_avx512bw
1875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;((<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;&gt;=&#32;4&#32;||&#32;<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;&lt;&#32;64)
1876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;&gt;=&#32;4&#32;||&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;&lt;&#32;64)),
1877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;8/16-bit&#32;integers&#32;in&#32;zmm&#32;registers&#32;require&#32;AVX512BW&quot;</emphasis>);
1878 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>((<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;&lt;&#32;64&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;&lt;&#32;64)&#32;||&#32;__have_avx512f,
1879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;integral&#32;conversions&#32;with&#32;ymm&#32;registers&#32;require&#32;AVX2&quot;</emphasis>);
1880 &#32;&#32;&#32;&#32;&#32;&#32;}
1881 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concat&#32;=&gt;&#32;use&#32;4-arg&#32;__convert_x86&#32;{{{2</emphasis>
1882 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;&lt;&#32;16&#32;||&#32;(<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;==&#32;16&#32;&amp;&amp;&#32;__have_avx2)
1883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;(<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;==&#32;16&#32;&amp;&amp;&#32;__have_avx
1884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;)
1885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;(<emphasis role="keyword">sizeof</emphasis>(__v0)&#32;==&#32;32&#32;&amp;&amp;&#32;__have_avx512f))
1886 &#32;&#32;&#32;&#32;&#32;&#32;{
1887 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;ISA&#32;can&#32;handle&#32;wider&#32;input&#32;registers,&#32;so&#32;concat&#32;and&#32;use&#32;two-arg</emphasis>
1888 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;implementation.&#32;This&#32;reduces&#32;code&#32;duplication&#32;considerably.</emphasis>
1889 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__convert_x86&lt;_To&gt;(__concat(__v0,&#32;__v1),&#32;__concat(__v2,&#32;__v3),
1890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__concat(__v4,&#32;__v5),&#32;__concat(__v6,&#32;__v7));
1891 &#32;&#32;&#32;&#32;&#32;&#32;}
1892 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//{{{2</emphasis>
1893 &#32;&#32;&#32;&#32;&#32;&#32;{
1894 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;conversion&#32;using&#32;bit&#32;reinterpretation&#32;(or&#32;no&#32;conversion&#32;at&#32;all)</emphasis>
1895 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;should&#32;all&#32;go&#32;through&#32;the&#32;concat&#32;branch&#32;above:</emphasis>
1896 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(
1897 &#32;&#32;&#32;&#32;&#32;&#32;!(is_floating_point_v&lt;
1898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp&gt;&#32;==&#32;is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)));
1899 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!(8&#32;*&#32;_Np&#32;&lt;&#32;_M&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;&gt;&#32;16),
1900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;zero&#32;extension&#32;should&#32;be&#32;impossible&quot;</emphasis>);
1901 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__i64_to_i8)&#32;<emphasis role="comment">//{{{2</emphasis>
1902 &#32;&#32;&#32;&#32;&#32;&#32;{
1903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x&#32;&amp;&amp;&#32;__have_ssse3)
1904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;unsure&#32;whether&#32;this&#32;is&#32;better&#32;than&#32;the&#32;variant&#32;below</emphasis>
1906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_shuffle_epi8(
1907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_intrin(
1908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(((__v0&#32;&amp;&#32;0xff)&#32;|&#32;((__v1&#32;&amp;&#32;0xff)&#32;&lt;&lt;&#32;8))
1909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(((__v2&#32;&amp;&#32;0xff)&#32;&lt;&lt;&#32;16)&#32;|&#32;((__v3&#32;&amp;&#32;0xff)&#32;&lt;&lt;&#32;24)))
1910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;((((__v4&#32;&amp;&#32;0xff)&#32;&lt;&lt;&#32;32)&#32;|&#32;((__v5&#32;&amp;&#32;0xff)&#32;&lt;&lt;&#32;40))
1911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(((__v6&#32;&amp;&#32;0xff)&#32;&lt;&lt;&#32;48)&#32;|&#32;(__v7&#32;&lt;&lt;&#32;56)))),
1912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_setr_epi8(0,&#32;8,&#32;1,&#32;9,&#32;2,&#32;10,&#32;3,&#32;11,&#32;4,&#32;12,&#32;5,&#32;13,&#32;6,&#32;14,
1913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;7,&#32;15)));
1914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__x_to_x)
1916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__a&#32;=&#32;_mm_unpacklo_epi8(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>);&#32;<emphasis role="comment">//&#32;ac</emphasis>
1918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__b&#32;=&#32;_mm_unpackhi_epi8(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa095b2a5dbd1c3f3c6d9e0f923fe4ff6">__i0</link>,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>);&#32;<emphasis role="comment">//&#32;bd</emphasis>
1919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__c&#32;=&#32;_mm_unpacklo_epi8(__i2,&#32;__i3);&#32;<emphasis role="comment">//&#32;eg</emphasis>
1920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__d&#32;=&#32;_mm_unpackhi_epi8(__i2,&#32;__i3);&#32;<emphasis role="comment">//&#32;fh</emphasis>
1921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__e&#32;=&#32;_mm_unpacklo_epi8(__i4,&#32;__i5);&#32;<emphasis role="comment">//&#32;ik</emphasis>
1922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__f&#32;=&#32;_mm_unpackhi_epi8(__i4,&#32;__i5);&#32;<emphasis role="comment">//&#32;jl</emphasis>
1923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__g&#32;=&#32;_mm_unpacklo_epi8(__i6,&#32;__i7);&#32;<emphasis role="comment">//&#32;mo</emphasis>
1924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__h&#32;=&#32;_mm_unpackhi_epi8(__i6,&#32;__i7);&#32;<emphasis role="comment">//&#32;np</emphasis>
1925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_unpacklo_epi64(
1926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpacklo_epi32(_mm_unpacklo_epi8(__a,&#32;__b),&#32;&#32;<emphasis role="comment">//&#32;abcd</emphasis>
1927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpacklo_epi8(__c,&#32;__d)),&#32;<emphasis role="comment">//&#32;efgh</emphasis>
1928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpacklo_epi32(_mm_unpacklo_epi8(__e,&#32;__f),&#32;&#32;<emphasis role="comment">//&#32;ijkl</emphasis>
1929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpacklo_epi8(__g,&#32;__h))&#32;&#32;<emphasis role="comment">//&#32;mnop</emphasis>
1930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;));
1931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__y_to_y)
1933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__a&#32;=&#32;<emphasis role="comment">//&#32;048C&#32;GKOS&#32;159D&#32;HLPT&#32;26AE&#32;IMQU&#32;37BF&#32;JNRV</emphasis>
1935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_intrin(
1936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(((__v0&#32;&amp;&#32;0xff)&#32;|&#32;((__v1&#32;&amp;&#32;0xff)&#32;&lt;&lt;&#32;8))
1937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(((__v2&#32;&amp;&#32;0xff)&#32;&lt;&lt;&#32;16)&#32;|&#32;((__v3&#32;&amp;&#32;0xff)&#32;&lt;&lt;&#32;24)))
1938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;((((__v4&#32;&amp;&#32;0xff)&#32;&lt;&lt;&#32;32)&#32;|&#32;((__v5&#32;&amp;&#32;0xff)&#32;&lt;&lt;&#32;40))
1939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(((__v6&#32;&amp;&#32;0xff)&#32;&lt;&lt;&#32;48)&#32;|&#32;((__v7&#32;&lt;&lt;&#32;56)))));
1940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
1941 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;auto&#32;__b&#32;=&#32;_mm256_unpackhi_epi64(__a,&#32;__a);&#32;&#32;//&#32;159D&#32;HLPT&#32;159D</emphasis>
1942 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HLPT&#32;37BF&#32;JNRV&#32;37BF&#32;JNRV&#32;auto&#32;__c&#32;=&#32;_mm256_unpacklo_epi8(__a,</emphasis>
1943 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__b);&#32;&#32;//&#32;0145&#32;89CD&#32;GHKL&#32;OPST&#32;2367&#32;ABEF&#32;IJMN&#32;QRUV&#32;auto&#32;__d&#32;=</emphasis>
1944 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__xzyw(__c);&#32;//&#32;0145&#32;89CD&#32;2367&#32;ABEF&#32;GHKL&#32;OPST&#32;IJMN&#32;QRUV&#32;return</emphasis>
1945 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_shuffle_epi8(</emphasis>
1946 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__d,&#32;_mm256_setr_epi8(0,&#32;1,&#32;8,&#32;9,&#32;2,&#32;3,&#32;10,&#32;11,&#32;4,&#32;5,&#32;12,</emphasis>
1947 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;13,&#32;6,&#32;7,&#32;14,&#32;15,&#32;0,&#32;1,&#32;8,&#32;9,&#32;2,&#32;3,&#32;10,&#32;11,&#32;4,&#32;5,&#32;12,&#32;13,&#32;6,&#32;7,</emphasis>
1948 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;14,&#32;15));</emphasis>
1949 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
1950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__b&#32;=&#32;_mm256_shuffle_epi8(&#32;<emphasis role="comment">//&#32;0145&#32;89CD&#32;GHKL&#32;OPST&#32;2367&#32;ABEF</emphasis>
1951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;IJMN&#32;QRUV</emphasis>
1952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a,&#32;_mm256_setr_epi8(0,&#32;8,&#32;1,&#32;9,&#32;2,&#32;10,&#32;3,&#32;11,&#32;4,&#32;12,&#32;5,&#32;13,
1953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;6,&#32;14,&#32;7,&#32;15,&#32;0,&#32;8,&#32;1,&#32;9,&#32;2,&#32;10,&#32;3,&#32;11,
1954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;4,&#32;12,&#32;5,&#32;13,&#32;6,&#32;14,&#32;7,&#32;15));
1955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__c
1956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__xzyw(__b);&#32;<emphasis role="comment">//&#32;0145&#32;89CD&#32;2367&#32;ABEF&#32;GHKL&#32;OPST&#32;IJMN&#32;QRUV</emphasis>
1957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm256_shuffle_epi8(
1958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__c,&#32;_mm256_setr_epi8(0,&#32;1,&#32;8,&#32;9,&#32;2,&#32;3,&#32;10,&#32;11,&#32;4,&#32;5,&#32;12,&#32;13,
1959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;6,&#32;7,&#32;14,&#32;15,&#32;0,&#32;1,&#32;8,&#32;9,&#32;2,&#32;3,&#32;10,&#32;11,
1960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;4,&#32;5,&#32;12,&#32;13,&#32;6,&#32;7,&#32;14,&#32;15)));
1961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__z_to_z)
1963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__concat(
1965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__convert_x86&lt;__vector_type_t&lt;_Up,&#32;_M&#32;/&#32;2&gt;&gt;(__v0,&#32;__v1,&#32;__v2,
1966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__v3),
1967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__convert_x86&lt;__vector_type_t&lt;_Up,&#32;_M&#32;/&#32;2&gt;&gt;(__v4,&#32;__v5,&#32;__v6,
1968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__v7));
1969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1970 &#32;&#32;&#32;&#32;&#32;&#32;}
1971 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__f64_to_i8)&#32;<emphasis role="comment">//{{{2</emphasis>
1972 &#32;&#32;&#32;&#32;&#32;&#32;{
1973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__convert_x86&lt;_To&gt;(
1974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__convert_x86&lt;__vector_type_t&lt;int,&#32;_Np&#32;*&#32;2&gt;&gt;(__v0,&#32;__v1),
1975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__convert_x86&lt;__vector_type_t&lt;int,&#32;_Np&#32;*&#32;2&gt;&gt;(__v2,&#32;__v3),
1976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__convert_x86&lt;__vector_type_t&lt;int,&#32;_Np&#32;*&#32;2&gt;&gt;(__v4,&#32;__v5),
1977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__convert_x86&lt;__vector_type_t&lt;int,&#32;_Np&#32;*&#32;2&gt;&gt;(__v6,&#32;__v7));
1978 &#32;&#32;&#32;&#32;&#32;&#32;}
1979 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;unreachable&#32;{{{2</emphasis>
1980 &#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
1981 &#32;&#32;&#32;&#32;<emphasis role="comment">//}}}</emphasis>
1982 
1983 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;fallback:&#32;{{{2</emphasis>
1984 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_To)&#32;&gt;=&#32;32)
1985 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;_To&#32;is&#32;ymm&#32;or&#32;zmm,&#32;then&#32;_SimdWrapper&lt;_Up,&#32;_M&#32;/&#32;2&gt;&#32;is&#32;xmm&#32;or&#32;ymm</emphasis>
1986 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__concat(
1987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__convert_x86&lt;__vector_type_t&lt;_Up,&#32;_M&#32;/&#32;2&gt;&gt;(__v0,&#32;__v1,&#32;__v2,&#32;__v3),
1988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__convert_x86&lt;__vector_type_t&lt;_Up,&#32;_M&#32;/&#32;2&gt;&gt;(__v4,&#32;__v5,&#32;__v6,
1989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__v7));
1990 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;16)
1991 &#32;&#32;&#32;&#32;&#32;&#32;{
1992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__lo
1993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__to_intrin(__convert_x86&lt;_To&gt;(__v0,&#32;__v1,&#32;__v2,&#32;__v3));
1994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__hi
1995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__to_intrin(__convert_x86&lt;_To&gt;(__v4,&#32;__v5,&#32;__v6,&#32;__v7));
1996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;1&#32;&amp;&amp;&#32;_Np&#32;==&#32;2);
1997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_To&gt;(_mm_unpacklo_epi64(__lo,&#32;__hi));
1998 &#32;&#32;&#32;&#32;&#32;&#32;}
1999 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2000 &#32;&#32;&#32;&#32;&#32;&#32;{
2001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
2002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;return&#32;__vector_convert&lt;_To&gt;(__v0,&#32;__v1,&#32;__v2,&#32;__v3,&#32;__v4,&#32;__v5,</emphasis>
2003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__v6,&#32;__v7,</emphasis>
2004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;make_index_sequence&lt;_Np&gt;());</emphasis>
2005 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//}}}2</emphasis>
2006 &#32;&#32;&#32;&#32;&#32;&#32;}
2007 &#32;&#32;}
2008 
2009 <emphasis role="comment">//}}}</emphasis>
2010 <emphasis role="comment">//&#32;16-arg&#32;__convert_x86&#32;{{{1</emphasis>
2011 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keyword">typename</emphasis>&#32;_V,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
2012 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_To
2013 &#32;&#32;__convert_x86(_V&#32;__v0,&#32;_V&#32;__v1,&#32;_V&#32;__v2,&#32;_V&#32;__v3,&#32;_V&#32;__v4,&#32;_V&#32;__v5,&#32;_V&#32;__v6,
2014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_V&#32;__v7,&#32;_V&#32;__v8,&#32;_V&#32;__v9,&#32;_V&#32;__v10,&#32;_V&#32;__v11,&#32;_V&#32;__v12,
2015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_V&#32;__v13,&#32;_V&#32;__v14,&#32;_V&#32;__v15)
2016 &#32;&#32;{
2017 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concat&#32;=&gt;&#32;use&#32;8-arg&#32;__convert_x86</emphasis>
2018 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__convert_x86&lt;_To&gt;(__concat(__v0,&#32;__v1),&#32;__concat(__v2,&#32;__v3),
2019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__concat(__v4,&#32;__v5),&#32;__concat(__v6,&#32;__v7),
2020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__concat(__v8,&#32;__v9),&#32;__concat(__v10,&#32;__v11),
2021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__concat(__v12,&#32;__v13),&#32;__concat(__v14,&#32;__v15));
2022 &#32;&#32;}
2023 
2024 <emphasis role="comment">//}}}</emphasis>
2025 
2026 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
2027 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_EXPERIMENTAL_SIMD_X86_CONVERSIONS_H</emphasis>
2028 
2029 <emphasis role="comment">//&#32;vim:&#32;foldmethod=marker</emphasis>
</programlisting></section>
