<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2thin__heap___2insert__fn__imps_8hpp_source" xml:lang="en-US">
<title>insert_fn_imps.hpp</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/ext/pb_ds/detail/thin_heap_/insert_fn_imps.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2005-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2004&#32;Ami&#32;Tavory&#32;and&#32;Vladimir&#32;Dreizin,&#32;IBM-HRL.</emphasis>
26 
27 <emphasis role="comment">//&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;sell,&#32;and&#32;distribute&#32;this&#32;software</emphasis>
28 <emphasis role="comment">//&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,&#32;provided&#32;that&#32;the&#32;above&#32;copyright</emphasis>
29 <emphasis role="comment">//&#32;notice&#32;appears&#32;in&#32;all&#32;copies,&#32;and&#32;that&#32;both&#32;that&#32;copyright&#32;notice</emphasis>
30 <emphasis role="comment">//&#32;and&#32;this&#32;permission&#32;notice&#32;appear&#32;in&#32;supporting&#32;documentation.&#32;None</emphasis>
31 <emphasis role="comment">//&#32;of&#32;the&#32;above&#32;authors,&#32;nor&#32;IBM&#32;Haifa&#32;Research&#32;Laboratories,&#32;make&#32;any</emphasis>
32 <emphasis role="comment">//&#32;representation&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
33 <emphasis role="comment">//&#32;purpose.&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied</emphasis>
34 <emphasis role="comment">//&#32;warranty.</emphasis>
35 
41 <emphasis role="preprocessor">#ifdef&#32;PB_DS_CLASS_C_DEC</emphasis>
42 
43 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
44 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::point_iterator
45 PB_DS_CLASS_C_DEC::
46 push(const_reference&#32;r_val)
47 {
48 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
49 &#32;&#32;node_pointer&#32;p_nd&#32;=&#32;base_type::get_new_node_for_insert(r_val);
50 &#32;&#32;p_nd-&gt;m_metadata&#32;=&#32;0;
51 &#32;&#32;p_nd-&gt;m_p_prev_or_parent&#32;=&#32;p_nd-&gt;m_p_l_child&#32;=&#32;0;
52 &#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(base_type::m_p_root&#32;==&#32;0)
53 &#32;&#32;&#32;&#32;{
54 &#32;&#32;&#32;&#32;&#32;&#32;p_nd-&gt;m_p_next_sibling&#32;=&#32;0;
55 &#32;&#32;&#32;&#32;&#32;&#32;m_p_max&#32;=&#32;base_type::m_p_root&#32;=&#32;p_nd;
56 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
57 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;point_iterator(p_nd);
58 &#32;&#32;&#32;&#32;}
59 
60 &#32;&#32;p_nd-&gt;m_p_next_sibling&#32;=&#32;base_type::m_p_root;
61 &#32;&#32;base_type::m_p_root-&gt;m_p_prev_or_parent&#32;=&#32;0;
62 &#32;&#32;base_type::m_p_root&#32;=&#32;p_nd;
63 &#32;&#32;update_max(p_nd);
64 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*this))
65 &#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;point_iterator(p_nd);
66 }
67 
68 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
69 inline&#32;<emphasis role="keywordtype">void</emphasis>
70 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::
71 make_root(node_pointer&#32;p_nd)
72 {
73 &#32;&#32;p_nd-&gt;m_metadata&#32;=&#32;p_nd-&gt;m_p_l_child&#32;==&#32;0&#32;
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;0&#32;:&#32;1&#32;+&#32;p_nd-&gt;m_p_l_child-&gt;m_metadata;
75 }
76 
77 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
78 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
79 PB_DS_CLASS_C_DEC::
80 make_root_and_link(node_pointer&#32;p_nd)
81 {
82 &#32;&#32;make_root(p_nd);
83 &#32;&#32;p_nd-&gt;m_p_prev_or_parent&#32;=&#32;0;
84 &#32;&#32;p_nd-&gt;m_p_next_sibling&#32;=&#32;base_type::m_p_root;
85 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(base_type::m_p_root&#32;!=&#32;0)
86 &#32;&#32;&#32;&#32;base_type::m_p_root-&gt;m_p_prev_or_parent&#32;=&#32;0;
87 
88 &#32;&#32;base_type::m_p_root&#32;=&#32;p_nd;
89 &#32;&#32;update_max(p_nd);
90 }
91 
92 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
93 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
94 PB_DS_CLASS_C_DEC::
95 fix(node_pointer&#32;p_y)
96 {
97 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)
98 &#32;&#32;&#32;&#32;{
99 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_y-&gt;m_p_prev_or_parent&#32;==&#32;0)
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
101 &#32;&#32;&#32;&#32;&#32;&#32;fix_root(p_y);
102 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
104 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_y-&gt;m_metadata&#32;==&#32;1&amp;&amp;&#32;&#32;p_y-&gt;m_p_next_sibling&#32;==&#32;0)
105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
106 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_y-&gt;m_p_l_child&#32;!=&#32;0)
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fix_sibling_rank_1_unmarked(p_y);
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
111 
112 &#32;&#32;&#32;&#32;&#32;&#32;fix_sibling_rank_1_marked(p_y);
113 &#32;&#32;&#32;&#32;&#32;&#32;p_y&#32;=&#32;p_y-&gt;m_p_prev_or_parent;
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
115 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_y-&gt;m_metadata&#32;&gt;&#32;p_y-&gt;m_p_next_sibling-&gt;m_metadata&#32;+&#32;1)
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
117 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_y-&gt;m_p_l_child&#32;!=&#32;0);
118 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_y-&gt;m_metadata&#32;!=&#32;p_y-&gt;m_p_l_child-&gt;m_metadata&#32;+&#32;2)
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fix_sibling_general_unmarked(p_y);
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
123 
124 &#32;&#32;&#32;&#32;&#32;&#32;fix_sibling_general_marked(p_y);
125 &#32;&#32;&#32;&#32;&#32;&#32;p_y&#32;=&#32;p_y-&gt;m_p_prev_or_parent;
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
127 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;((p_y-&gt;m_p_l_child&#32;==&#32;0&amp;&amp;&#32;
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_y-&gt;m_metadata&#32;==&#32;2)&#32;||(p_y-&gt;m_p_l_child&#32;!=&#32;0&amp;&amp;&#32;
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_y-&gt;m_metadata&#32;==&#32;p_y-&gt;m_p_l_child-&gt;m_metadata&#32;+&#32;3))
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
131 &#32;&#32;&#32;&#32;&#32;&#32;node_pointer&#32;p_z&#32;=&#32;p_y-&gt;m_p_prev_or_parent;
132 &#32;&#32;&#32;&#32;&#32;&#32;fix_child(p_y);
133 &#32;&#32;&#32;&#32;&#32;&#32;p_y&#32;=&#32;p_z;
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
135 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
136 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
137 &#32;&#32;&#32;&#32;}
138 }
139 
140 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
141 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
142 PB_DS_CLASS_C_DEC::
143 fix_root(node_pointer&#32;p_y)
144 {
145 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_y-&gt;m_p_prev_or_parent&#32;==&#32;0);
146 &#32;&#32;make_root(p_y);
147 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a1dc24f5a5b20713ee2e6c908035de418">PB_DS_ASSERT_NODE_CONSISTENT</link>(p_y,&#32;<emphasis role="keyword">true</emphasis>)
148 }
149 
150 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
151 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
152 PB_DS_CLASS_C_DEC::
153 fix_sibling_rank_1_unmarked(node_pointer&#32;p_y)
154 {
155 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_y-&gt;m_p_prev_or_parent&#32;!=&#32;0);
156 
157 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a784d392bfeacfb0e3e6e0d2719489fb6">_GLIBCXX_DEBUG_ONLY</link>(node_pointer&#32;p_w&#32;=&#32;p_y-&gt;m_p_l_child;)
158 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_w&#32;!=&#32;0);
159 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_w-&gt;m_p_next_sibling&#32;==&#32;0);
160 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_y-&gt;m_p_next_sibling&#32;==&#32;0);
161 
162 &#32;&#32;p_y-&gt;m_p_next_sibling&#32;=&#32;p_y-&gt;m_p_l_child;
163 &#32;&#32;p_y-&gt;m_p_next_sibling-&gt;m_p_prev_or_parent&#32;=&#32;p_y;
164 &#32;&#32;p_y-&gt;m_p_l_child&#32;=&#32;0;
165 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a1dc24f5a5b20713ee2e6c908035de418">PB_DS_ASSERT_NODE_CONSISTENT</link>(p_y,&#32;<emphasis role="keyword">false</emphasis>)
166 }
167 
168 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
169 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
170 PB_DS_CLASS_C_DEC::
171 fix_sibling_rank_1_marked(node_pointer&#32;p_y)
172 {
173 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_y-&gt;m_p_prev_or_parent&#32;!=&#32;0);
174 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_y-&gt;m_p_l_child&#32;==&#32;0);
175 &#32;&#32;p_y-&gt;m_metadata&#32;=&#32;0;
176 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a1dc24f5a5b20713ee2e6c908035de418">PB_DS_ASSERT_NODE_CONSISTENT</link>(p_y,&#32;<emphasis role="keyword">false</emphasis>)
177 }
178 
179 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
180 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
181 PB_DS_CLASS_C_DEC::
182 fix_sibling_general_unmarked(node_pointer&#32;p_y)
183 {
184 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_y-&gt;m_p_prev_or_parent&#32;!=&#32;0);
185 
186 &#32;&#32;node_pointer&#32;p_w&#32;=&#32;p_y-&gt;m_p_l_child;
187 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_w&#32;!=&#32;0);
188 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_w-&gt;m_p_next_sibling&#32;!=&#32;0);
189 
190 &#32;&#32;p_y-&gt;m_p_l_child&#32;=&#32;p_w-&gt;m_p_next_sibling;
191 &#32;&#32;p_w-&gt;m_p_next_sibling-&gt;m_p_prev_or_parent&#32;=&#32;p_y;
192 
193 &#32;&#32;p_w-&gt;m_p_next_sibling&#32;=&#32;p_y-&gt;m_p_next_sibling;
194 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_w-&gt;m_p_next_sibling&#32;!=&#32;0);
195 &#32;&#32;p_w-&gt;m_p_next_sibling-&gt;m_p_prev_or_parent&#32;=&#32;p_w;
196 
197 &#32;&#32;p_y-&gt;m_p_next_sibling&#32;=&#32;p_w;
198 &#32;&#32;p_w-&gt;m_p_prev_or_parent&#32;=&#32;p_y;
199 
200 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a1dc24f5a5b20713ee2e6c908035de418">PB_DS_ASSERT_NODE_CONSISTENT</link>(p_y,&#32;<emphasis role="keyword">false</emphasis>)
201 }
202 
203 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
204 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
205 PB_DS_CLASS_C_DEC::
206 fix_sibling_general_marked(node_pointer&#32;p_y)
207 {
208 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_y-&gt;m_p_prev_or_parent&#32;!=&#32;0);
209 &#32;&#32;--p_y-&gt;m_metadata;
210 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a1dc24f5a5b20713ee2e6c908035de418">PB_DS_ASSERT_NODE_CONSISTENT</link>(p_y,&#32;<emphasis role="keyword">false</emphasis>)
211 }
212 
213 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
214 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
215 PB_DS_CLASS_C_DEC::
216 fix_child(node_pointer&#32;p_y)
217 {
218 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_y-&gt;m_p_prev_or_parent&#32;!=&#32;0);
219 
220 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_y-&gt;m_p_next_sibling&#32;!=&#32;0)
221 &#32;&#32;&#32;&#32;p_y-&gt;m_p_next_sibling-&gt;m_p_prev_or_parent&#32;=&#32;p_y-&gt;m_p_prev_or_parent;
222 
223 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_y-&gt;m_p_prev_or_parent-&gt;m_p_l_child&#32;==&#32;p_y)
224 &#32;&#32;&#32;&#32;p_y-&gt;m_p_prev_or_parent-&gt;m_p_l_child&#32;=&#32;p_y-&gt;m_p_next_sibling;
225 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
226 &#32;&#32;&#32;&#32;p_y-&gt;m_p_prev_or_parent-&gt;m_p_next_sibling&#32;=&#32;p_y-&gt;m_p_next_sibling;
227 
228 &#32;&#32;make_root_and_link(p_y);
229 }
230 
231 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
232 <emphasis role="keywordtype">void</emphasis>
233 PB_DS_CLASS_C_DEC::
234 modify(point_iterator&#32;it,&#32;const_reference&#32;r_new_val)
235 {
236 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
237 &#32;&#32;node_pointer&#32;p_nd&#32;=&#32;it.m_p_nd;
238 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_nd&#32;!=&#32;0);
239 
240 &#32;&#32;const&#32;<emphasis role="keywordtype">bool</emphasis>&#32;smaller&#32;=&#32;Cmp_Fn::operator()(r_new_val,&#32;p_nd-&gt;m_value);
241 &#32;&#32;p_nd-&gt;m_value&#32;=&#32;r_new_val;
242 &#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(smaller)
243 &#32;&#32;&#32;&#32;{
244 &#32;&#32;&#32;&#32;&#32;&#32;remove_node(p_nd);
245 &#32;&#32;&#32;&#32;&#32;&#32;p_nd-&gt;m_p_l_child&#32;=&#32;0;
246 &#32;&#32;&#32;&#32;&#32;&#32;make_root_and_link(p_nd);
247 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
248 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>;
249 &#32;&#32;&#32;&#32;}
250 
251 &#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(p_nd-&gt;m_p_prev_or_parent&#32;==&#32;0)
252 &#32;&#32;&#32;&#32;{
253 &#32;&#32;&#32;&#32;&#32;&#32;update_max(p_nd);
254 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
255 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>;
256 &#32;&#32;&#32;&#32;}
257 
258 &#32;&#32;node_pointer&#32;p_y&#32;=&#32;p_nd-&gt;m_p_prev_or_parent;
259 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_y&#32;!=&#32;0);
260 
261 &#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(p_nd-&gt;m_p_next_sibling&#32;!=&#32;0)
262 &#32;&#32;&#32;&#32;p_nd-&gt;m_p_next_sibling-&gt;m_p_prev_or_parent&#32;=&#32;p_y;
263 
264 &#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(p_y-&gt;m_p_l_child&#32;==&#32;p_nd)
265 &#32;&#32;&#32;&#32;p_y-&gt;m_p_l_child&#32;=&#32;p_nd-&gt;m_p_next_sibling;
266 &#32;&#32;else
267 &#32;&#32;&#32;&#32;p_y-&gt;m_p_next_sibling&#32;=&#32;p_nd-&gt;m_p_next_sibling;
268 
269 &#32;&#32;fix(p_y);
270 &#32;&#32;make_root_and_link(p_nd);
271 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*this))
272 }
273 
274 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
275 inline&#32;<emphasis role="keywordtype">void</emphasis>
276 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::
277 update_max(node_pointer&#32;p_nd)
278 {
279 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_p_max&#32;==&#32;0&#32;||&#32;Cmp_Fn::operator()(m_p_max-&gt;m_value,&#32;p_nd-&gt;m_value))
280 &#32;&#32;&#32;&#32;m_p_max&#32;=&#32;p_nd;
281 }
282 
283 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
