<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2pstl_2algorithm__fwd_8h" xml:lang="en-US">
<title>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/pstl/algorithm_fwd.h File Reference</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/pstl/algorithm_fwd.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &lt;type_traits&gt;<?linebreak?>#include &lt;utility&gt;<?linebreak?></programlisting>Include dependency graph for algorithm_fwd.h:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="_old_2_classes_2lib_2include_2c_09_09_2pstl_2algorithm__fwd_8h__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
This graph shows which files directly or indirectly include this file:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="_old_2_classes_2lib_2include_2c_09_09_2pstl_2algorithm__fwd_8h__dep__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Namespaces    </title>
        <itemizedlist>
            <listitem><para>namespace <link linkend="_namespace____pstl">__pstl</link></para>
</listitem>
            <listitem><para>namespace <link linkend="_namespace____pstl_1_1____internal">__pstl::__internal</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>template&lt;class _ForwardIterator , class _Pred &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1a70dd7a72263c0d3f533749756766d752">__pstl::__internal::__brick_any_of</link> (const _ForwardIterator, const _ForwardIterator, _Pred, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _Pred &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1a9b2b912b52719adc814aec19b4ae5724">__pstl::__internal::__brick_any_of</link> (const _ForwardIterator, const _ForwardIterator, _Pred, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Pred , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1abab9a13bd7c30a7e4c10aafb238323dd">__pstl::__internal::__pattern_any_of</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _Pred, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Pred , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1ac1fcc787847842dc5354728aabdcaf52">__pstl::__internal::__pattern_any_of</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _Pred, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _Function &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a10f3fa367669b260a10c4b442772016f">__pstl::__internal::__brick_walk1</link> (_ForwardIterator, _ForwardIterator, _Function, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _RandomAccessIterator , class _Function &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a05a30a7d5e1521a48e690ef8894280d6">__pstl::__internal::__brick_walk1</link> (_RandomAccessIterator, _RandomAccessIterator, _Function, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Function , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1ab0763e7038c1a483b7905a47fb58f051">__pstl::__internal::__pattern_walk1</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _Function, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Function , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1af335f95356f4ebf43cf207b222405f41">__pstl::__internal::__pattern_walk1</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _Function, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Brick &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a9f0cc9e31db8bdd25f6e8d7233ffba3e">__pstl::__internal::__pattern_walk_brick</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _Brick, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Brick &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a18df289a04236eebcd56b382e71eee12">__pstl::__internal::__pattern_walk_brick</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _Brick, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _Size , class _Function &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1a7795b3eeca3e008e29421b018b374348">__pstl::__internal::__brick_walk1_n</link> (_ForwardIterator, _Size, _Function, std::false_type)</para>
</listitem>
            <listitem><para>template&lt;class _RandomAccessIterator , class _DifferenceType , class _Function &gt; </para><para>_RandomAccessIterator <link linkend="_namespace____pstl_1_1____internal_1a6378128671ed99ba10eca13fe91bece4">__pstl::__internal::__brick_walk1_n</link> (_RandomAccessIterator, _DifferenceType, _Function, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Size , class _Function , class _IsVector &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1a11dfb059348e8a4ad07857209d99bc87">__pstl::__internal::__pattern_walk1_n</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _Size, _Function, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Size , class _Function , class _IsVector &gt; </para><para>_RandomAccessIterator <link linkend="_namespace____pstl_1_1____internal_1aed0391a132d75451e377268d2c658440">__pstl::__internal::__pattern_walk1_n</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator, _Size, _Function, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Size , class _Brick &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1a33569d9fe129889d08729fa3424ac32f">__pstl::__internal::__pattern_walk_brick_n</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _Size, _Brick, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Size , class _Brick &gt; </para><para>_RandomAccessIterator <link linkend="_namespace____pstl_1_1____internal_1a82332631799d42f5a9da54f3fc13da21">__pstl::__internal::__pattern_walk_brick_n</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator, _Size, _Brick, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _Function &gt; </para><para>_ForwardIterator2 <link linkend="_namespace____pstl_1_1____internal_1a64612fede4b3b107931bb84c68e45e70">__pstl::__internal::__brick_walk2</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _Function, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _Function &gt; </para><para>_ForwardIterator2 <link linkend="_namespace____pstl_1_1____internal_1aaceae6601e9503c253986f2db46fc3cf">__pstl::__internal::__brick_walk2</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _Function, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _Size , class _ForwardIterator2 , class _Function &gt; </para><para>_ForwardIterator2 <link linkend="_namespace____pstl_1_1____internal_1a71c434f189a8195feda8458a188e6b93">__pstl::__internal::__brick_walk2_n</link> (_ForwardIterator1, _Size, _ForwardIterator2, _Function, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _Size , class _ForwardIterator2 , class _Function &gt; </para><para>_ForwardIterator2 <link linkend="_namespace____pstl_1_1____internal_1aea52cfdce93a0d5017b0668ad7113ad3">__pstl::__internal::__brick_walk2_n</link> (_ForwardIterator1, _Size, _ForwardIterator2, _Function, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Function , class _IsVector &gt; </para><para>_ForwardIterator2 <link linkend="_namespace____pstl_1_1____internal_1a70065033fe2904641ef4cceafc92c7a0">__pstl::__internal::__pattern_walk2</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _Function, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Function , class _IsVector &gt; </para><para>_ForwardIterator2 <link linkend="_namespace____pstl_1_1____internal_1af969c08a7c5fba72fe026426354c22cb">__pstl::__internal::__pattern_walk2</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _Function, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _Size , class _ForwardIterator2 , class _Function , class _IsVector &gt; </para><para>_ForwardIterator2 <link linkend="_namespace____pstl_1_1____internal_1aaf0adc66e234afd1485fde5689041a63">__pstl::__internal::__pattern_walk2_n</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _Size, _ForwardIterator2, _Function, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator1 , class _Size , class _RandomAccessIterator2 , class _Function , class _IsVector &gt; </para><para>_RandomAccessIterator2 <link linkend="_namespace____pstl_1_1____internal_1afbe880c5f7740c2d414c6487247ee527">__pstl::__internal::__pattern_walk2_n</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator1, _Size, _RandomAccessIterator2, _Function, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Brick &gt; </para><para>_ForwardIterator2 <link linkend="_namespace____pstl_1_1____internal_1a28e6956cf2cd3d8cfe4949d41a700cc5">__pstl::__internal::__pattern_walk2_brick</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _Brick, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator1 , class _RandomAccessIterator2 , class _Brick &gt; </para><para>_RandomAccessIterator2 <link linkend="_namespace____pstl_1_1____internal_1a8653f3d43fc8d6b095c57650fed9f77c">__pstl::__internal::__pattern_walk2_brick</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator1, _RandomAccessIterator1, _RandomAccessIterator2, _Brick, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _Size , class _ForwardIterator2 , class _Brick &gt; </para><para>_ForwardIterator2 <link linkend="_namespace____pstl_1_1____internal_1af9995ae7f7807a02b57d84a9053eb599">__pstl::__internal::__pattern_walk2_brick_n</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _Size, _ForwardIterator2, _Brick, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator1 , class _Size , class _RandomAccessIterator2 , class _Brick &gt; </para><para>_RandomAccessIterator2 <link linkend="_namespace____pstl_1_1____internal_1a2ce242375a503d9905db8a0e7ce1f016">__pstl::__internal::__pattern_walk2_brick_n</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator1, _Size, _RandomAccessIterator2, _Brick, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _ForwardIterator3 , class _Function &gt; </para><para>_ForwardIterator3 <link linkend="_namespace____pstl_1_1____internal_1aa8fb50c7cc913bbd3621876d84eb7739">__pstl::__internal::__brick_walk3</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator3, _Function, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _RandomAccessIterator1 , class _RandomAccessIterator2 , class _RandomAccessIterator3 , class _Function &gt; </para><para>_RandomAccessIterator3 <link linkend="_namespace____pstl_1_1____internal_1acae311291914182fd1ce298c044639f4">__pstl::__internal::__brick_walk3</link> (_RandomAccessIterator1, _RandomAccessIterator1, _RandomAccessIterator2, _RandomAccessIterator3, _Function, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _ForwardIterator3 , class _Function , class _IsVector &gt; </para><para>_ForwardIterator3 <link linkend="_namespace____pstl_1_1____internal_1a618223855e120744a00b409ddfb37ea3">__pstl::__internal::__pattern_walk3</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator3, _Function, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator1 , class _RandomAccessIterator2 , class _RandomAccessIterator3 , class _Function , class _IsVector &gt; </para><para>_RandomAccessIterator3 <link linkend="_namespace____pstl_1_1____internal_1a5686ea0a28913fdc233959a0f24f836f">__pstl::__internal::__pattern_walk3</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator1, _RandomAccessIterator1, _RandomAccessIterator2, _RandomAccessIterator3, _Function, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1a98e65b1d83eb66d32d3ebe20452a168a">__pstl::__internal::__brick_equal</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _BinaryPredicate, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _RandomAccessIterator1 , class _RandomAccessIterator2 , class _BinaryPredicate &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1a053bbd4b7e93e04d16e4df04e4d3838b">__pstl::__internal::__brick_equal</link> (_RandomAccessIterator1, _RandomAccessIterator1, _RandomAccessIterator2, _BinaryPredicate, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1a596361246dd948515acd5af4fffe2518">__pstl::__internal::__pattern_equal</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _BinaryPredicate, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator1 , class _RandomAccessIterator2 , class _BinaryPredicate , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1a332e322b408e2e79300d0905a08e618c">__pstl::__internal::__pattern_equal</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator1, _RandomAccessIterator1, _RandomAccessIterator2, _BinaryPredicate, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1a472d5691c7f9feb0200fddec85c9a568">__pstl::__internal::__brick_equal</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _BinaryPredicate, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _RandomAccessIterator1 , class _RandomAccessIterator2 , class _BinaryPredicate &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1a44ebc2d1dfe65c1228db698daa2e1cc7">__pstl::__internal::__brick_equal</link> (_RandomAccessIterator1, _RandomAccessIterator1, _RandomAccessIterator2, _RandomAccessIterator2, _BinaryPredicate, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1a36710873120eed2fa180a36e2b03a419">__pstl::__internal::__pattern_equal</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _BinaryPredicate, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator1 , class _RandomAccessIterator2 , class _BinaryPredicate , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1a6d8ee7abba31d48fda0226527ee72464">__pstl::__internal::__pattern_equal</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator1, _RandomAccessIterator1, _RandomAccessIterator2, _RandomAccessIterator2, _BinaryPredicate, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _Predicate &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1ac7d9945ca6e956c4953efb2594b3f761">__pstl::__internal::__brick_find_if</link> (_ForwardIterator, _ForwardIterator, _Predicate, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _RandomAccessIterator , class _Predicate &gt; </para><para>_RandomAccessIterator <link linkend="_namespace____pstl_1_1____internal_1a581d8543c481a200d1d83d18d5f4a6db">__pstl::__internal::__brick_find_if</link> (_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Predicate , class _IsVector &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1a048b6c9be4b418a089e7e1de87722139">__pstl::__internal::__pattern_find_if</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _Predicate, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Predicate , class _IsVector &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1ae297f95d5af67e7659376698b891d9b6">__pstl::__internal::__pattern_find_if</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _Predicate, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </para><para>_ForwardIterator1 <link linkend="_namespace____pstl_1_1____internal_1afc79e8c65046a86f9a2766afc203bdc6">__pstl::__internal::__brick_find_end</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _BinaryPredicate, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </para><para>_ForwardIterator1 <link linkend="_namespace____pstl_1_1____internal_1a2fccb31b7e808df816acc32eca1d7c8e">__pstl::__internal::__brick_find_end</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _BinaryPredicate, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate , class _IsVector &gt; </para><para>_ForwardIterator1 <link linkend="_namespace____pstl_1_1____internal_1ab41e2c44c1a0b564c5f9e350dc98cd07">__pstl::__internal::__pattern_find_end</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _BinaryPredicate, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate , class _IsVector &gt; </para><para>_ForwardIterator1 <link linkend="_namespace____pstl_1_1____internal_1a4bbac7fb426c503541d7a13f3f6a3ccd">__pstl::__internal::__pattern_find_end</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _BinaryPredicate, _IsVector, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </para><para>_ForwardIterator1 <link linkend="_namespace____pstl_1_1____internal_1a831367ff62774ae96f53ce675d0e5abd">__pstl::__internal::__brick_find_first_of</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _BinaryPredicate, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </para><para>_ForwardIterator1 <link linkend="_namespace____pstl_1_1____internal_1a8ff145b4e3b762807d7ef4ef380d2b6e">__pstl::__internal::__brick_find_first_of</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _BinaryPredicate, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate , class _IsVector &gt; </para><para>_ForwardIterator1 <link linkend="_namespace____pstl_1_1____internal_1ab87ed0d016b76e9009330174d6dd604f">__pstl::__internal::__pattern_find_first_of</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _BinaryPredicate, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate , class _IsVector &gt; </para><para>_ForwardIterator1 <link linkend="_namespace____pstl_1_1____internal_1a60c0a49ac96eb84fac73ad09bb67e9b2">__pstl::__internal::__pattern_find_first_of</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _BinaryPredicate, _IsVector, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </para><para>_ForwardIterator1 <link linkend="_namespace____pstl_1_1____internal_1a062af2a29d222a167d4abe66dc66fa1f">__pstl::__internal::__brick_search</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _BinaryPredicate, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </para><para>_ForwardIterator1 <link linkend="_namespace____pstl_1_1____internal_1a8cdbed978ba5750739475e7ef7118a5b">__pstl::__internal::__brick_search</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _BinaryPredicate, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate , class _IsVector &gt; </para><para>_ForwardIterator1 <link linkend="_namespace____pstl_1_1____internal_1af101203bfce74b08bef3c56eaa652f97">__pstl::__internal::__pattern_search</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _BinaryPredicate, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate , class _IsVector &gt; </para><para>_ForwardIterator1 <link linkend="_namespace____pstl_1_1____internal_1a8ccbebe06473a8864e3f075b85bac098">__pstl::__internal::__pattern_search</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _BinaryPredicate, _IsVector, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _Size , class _Tp , class _BinaryPredicate &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1a0da38e5c5a7d0f076295e36c34dd260f">__pstl::__internal::__brick_search_n</link> (_ForwardIterator, _ForwardIterator, _Size, const _Tp &amp;, _BinaryPredicate, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _Size , class _Tp , class _BinaryPredicate &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1aaf9729ce5af62bb1b0a1a2fdc7270345">__pstl::__internal::__brick_search_n</link> (_ForwardIterator, _ForwardIterator, _Size, const _Tp &amp;, _BinaryPredicate, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Size , class _Tp , class _BinaryPredicate , class IsVector &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1aeee6ca536b74ecbe6543c70b07b0bbf4">__pstl::__internal::__pattern_search_n</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _Size, const _Tp &amp;, _BinaryPredicate, IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Size , class _Tp , class _BinaryPredicate , class IsVector &gt; </para><para>_RandomAccessIterator <link linkend="_namespace____pstl_1_1____internal_1a1e4dd7de3f8c01c02c10cbc548099a90">__pstl::__internal::__pattern_search_n</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator, _RandomAccessIterator, _Size, const _Tp &amp;, _BinaryPredicate, IsVector, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _Size , class _OutputIterator &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a1f4de244878be866aa77d89e4f80a941">__pstl::__internal::__brick_copy_n</link> (_ForwardIterator, _Size, _OutputIterator, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _Size , class _OutputIterator &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a46dbb9cc91b8fdb864ff4e6ce460dd20">__pstl::__internal::__brick_copy_n</link> (_ForwardIterator, _Size, _OutputIterator, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _OutputIterator &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1afeb0a574201d45df430150e28155b9de">__pstl::__internal::__brick_copy</link> (_ForwardIterator, _ForwardIterator, _OutputIterator, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _RandomAccessIterator , class _OutputIterator &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a88fcc796f526a2ba6957acf3976dbbc3">__pstl::__internal::__brick_copy</link> (_RandomAccessIterator, _RandomAccessIterator, _OutputIterator, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _OutputIterator &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a6d4b0add6bd0d4764ea4e41cde92d975">__pstl::__internal::__brick_move</link> (_ForwardIterator, _ForwardIterator, _OutputIterator, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _RandomAccessIterator , class _OutputIterator &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a7680520275602d5e91c39a4d3d69c44a">__pstl::__internal::__brick_move</link> (_RandomAccessIterator, _RandomAccessIterator, _OutputIterator, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _OutputIterator &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a5859660f8d8c3308e80935f3bda79577">__pstl::__internal::__brick_swap_ranges</link> (_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _OutputIterator &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a53e8bfe6e5f007e9bf7dde1ca0e5ed11">__pstl::__internal::__brick_swap_ranges</link> (_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _OutputIterator , class _UnaryPredicate &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a7019046a2d066cebe7d5d084cf504afc">__pstl::__internal::__brick_copy_if</link> (_ForwardIterator, _ForwardIterator, _OutputIterator, _UnaryPredicate, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _OutputIterator , class _UnaryPredicate &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1acbebb21468389df805688ba0a2ab0ec1">__pstl::__internal::__brick_copy_if</link> (_ForwardIterator, _ForwardIterator, _OutputIterator, _UnaryPredicate, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _DifferenceType , class _ForwardIterator , class _UnaryPredicate &gt; </para><para>std::pair&lt; _DifferenceType, _DifferenceType &gt; <link linkend="_namespace____pstl_1_1____internal_1aa9f3335e6c5bc8f3c503f12c2c706399">__pstl::__internal::__brick_calc_mask_1</link> (_ForwardIterator, _ForwardIterator, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> *__restrict, _UnaryPredicate, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _DifferenceType , class _RandomAccessIterator , class _UnaryPredicate &gt; </para><para>std::pair&lt; _DifferenceType, _DifferenceType &gt; <link linkend="_namespace____pstl_1_1____internal_1a9a557df6c1ed000c198914129fb70ec1">__pstl::__internal::__brick_calc_mask_1</link> (_RandomAccessIterator, _RandomAccessIterator, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> *__restrict, _UnaryPredicate, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _OutputIterator &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a80a6116f76e81904dfc09a968b0557fc">__pstl::__internal::__brick_copy_by_mask</link> (_ForwardIterator, _ForwardIterator, _OutputIterator, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> *, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _OutputIterator &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a06aa8369aa54e91cb1f8b939f3fd2bc7">__pstl::__internal::__brick_copy_by_mask</link> (_ForwardIterator, _ForwardIterator, _OutputIterator, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> *__restrict, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _OutputIterator1 , class _OutputIterator2 &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1aa5a8f3647e8be9932ef2c1aa69e47f40">__pstl::__internal::__brick_partition_by_mask</link> (_ForwardIterator, _ForwardIterator, _OutputIterator1, _OutputIterator2, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> *, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _RandomAccessIterator , class _OutputIterator1 , class _OutputIterator2 &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a1944146783531194c658918287714564">__pstl::__internal::__brick_partition_by_mask</link> (_RandomAccessIterator, _RandomAccessIterator, _OutputIterator1, _OutputIterator2, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> *, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _OutputIterator , class _UnaryPredicate , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a00b73000f7d2c9884939b67f41de7bb3">__pstl::__internal::__pattern_copy_if</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _OutputIterator, _UnaryPredicate, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _OutputIterator , class _UnaryPredicate , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1aa037013595e41eca3362fb3a268ed297">__pstl::__internal::__pattern_copy_if</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator, _RandomAccessIterator, _OutputIterator, _UnaryPredicate, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _Predicate &gt; </para><para>std::iterator_traits&lt; _ForwardIterator &gt;::difference_type <link linkend="_namespace____pstl_1_1____internal_1a642be71b7c6b220885e392356dd4de91">__pstl::__internal::__brick_count</link> (_ForwardIterator, _ForwardIterator, _Predicate, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _Predicate &gt; </para><para>std::iterator_traits&lt; _ForwardIterator &gt;::difference_type <link linkend="_namespace____pstl_1_1____internal_1a2da220bb96436b8c805755018fb8aee7">__pstl::__internal::__brick_count</link> (_ForwardIterator, _ForwardIterator, _Predicate, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Predicate , class _IsVector &gt; </para><para>std::iterator_traits&lt; _ForwardIterator &gt;::difference_type <link linkend="_namespace____pstl_1_1____internal_1ab6c85c9e6daf1ae911a899fb47a2dac9">__pstl::__internal::__pattern_count</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _Predicate, std::false_type, _IsVector) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Predicate , class _IsVector &gt; </para><para>std::iterator_traits&lt; _ForwardIterator &gt;::difference_type <link linkend="_namespace____pstl_1_1____internal_1ac2f2f71c321b21d7898859b498562000">__pstl::__internal::__pattern_count</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _Predicate, std::true_type, _IsVector)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _BinaryPredicate &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1aa9a4a90870c131e96cd38ded4ae59774">__pstl::__internal::__brick_unique</link> (_ForwardIterator, _ForwardIterator, _BinaryPredicate, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _BinaryPredicate &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1affc5add2a525af1c97863d16e6aad934">__pstl::__internal::__brick_unique</link> (_ForwardIterator, _ForwardIterator, _BinaryPredicate, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _BinaryPredicate , class _IsVector &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1a7d71081d25f6bd099154a9d7ab2acc0b">__pstl::__internal::__pattern_unique</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _BinaryPredicate, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _BinaryPredicate , class _IsVector &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1a11935690aa5dac579ee657f013e63a34">__pstl::__internal::__pattern_unique</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _BinaryPredicate, _IsVector, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class OutputIterator , class _BinaryPredicate &gt; </para><para>OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a9beb05de0c0cca0210da6ad34342bb57">__pstl::__internal::__brick_unique_copy</link> (_ForwardIterator, _ForwardIterator, OutputIterator, _BinaryPredicate, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _RandomAccessIterator , class _OutputIterator , class _BinaryPredicate &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1aaa5e056a16dd2452e11d2b5946167a0f">__pstl::__internal::__brick_unique_copy</link> (_RandomAccessIterator, _RandomAccessIterator, _OutputIterator, _BinaryPredicate, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _OutputIterator , class _BinaryPredicate , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1ae5b4115f81569b63f8d0feb2bd3b90ec">__pstl::__internal::__pattern_unique_copy</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _OutputIterator, _BinaryPredicate, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _DifferenceType , class _RandomAccessIterator , class _BinaryPredicate &gt; </para><para>_DifferenceType <link linkend="_namespace____pstl_1_1____internal_1a0c5ab799fe2096f845371f4cc601a3e8">__pstl::__internal::__brick_calc_mask_2</link> (_RandomAccessIterator, _RandomAccessIterator, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> *__restrict, _BinaryPredicate, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _DifferenceType , class _RandomAccessIterator , class _BinaryPredicate &gt; </para><para>_DifferenceType <link linkend="_namespace____pstl_1_1____internal_1acbd907ca57b3934450a4f9e449412dc2">__pstl::__internal::__brick_calc_mask_2</link> (_RandomAccessIterator, _RandomAccessIterator, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> *__restrict, _BinaryPredicate, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _OutputIterator , class _BinaryPredicate , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a7b3e1f14245a12221c9a3e8bd3f1af5c">__pstl::__internal::__pattern_unique_copy</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator, _RandomAccessIterator, _OutputIterator, _BinaryPredicate, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _BidirectionalIterator &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a9faf5b36fe9b02dad4ff616e418d8bdd">__pstl::__internal::__brick_reverse</link> (_BidirectionalIterator, _BidirectionalIterator, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _BidirectionalIterator &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a0b4d274f65f477174b1552a456f8d908">__pstl::__internal::__brick_reverse</link> (_BidirectionalIterator, _BidirectionalIterator, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _BidirectionalIterator &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a2cc357497651525e564373c01db2a76a">__pstl::__internal::__brick_reverse</link> (_BidirectionalIterator, _BidirectionalIterator, _BidirectionalIterator, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _BidirectionalIterator &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a9d65cdb7fc2943b62938649b44ff97d1">__pstl::__internal::__brick_reverse</link> (_BidirectionalIterator, _BidirectionalIterator, _BidirectionalIterator, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _BidirectionalIterator , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a5f2267ae5935da96528156e02f6f4303">__pstl::__internal::__pattern_reverse</link> (_ExecutionPolicy &amp;&amp;, _BidirectionalIterator, _BidirectionalIterator, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _BidirectionalIterator , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a94ad8c6840c1904f7d52858e7be74354">__pstl::__internal::__pattern_reverse</link> (_ExecutionPolicy &amp;&amp;, _BidirectionalIterator, _BidirectionalIterator, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _BidirectionalIterator , class _OutputIterator &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a3d4a5a0406253133d06199c46d46e8d4">__pstl::__internal::__brick_reverse_copy</link> (_BidirectionalIterator, _BidirectionalIterator, _OutputIterator, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _BidirectionalIterator , class _OutputIterator &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a2d77b0bfe7a8ee8ad7fc9c37d2e09f9f">__pstl::__internal::__brick_reverse_copy</link> (_BidirectionalIterator, _BidirectionalIterator, _OutputIterator, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _BidirectionalIterator , class _OutputIterator , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1af2c72d8af8666a15b6ddcdbd7756cce0">__pstl::__internal::__pattern_reverse_copy</link> (_ExecutionPolicy &amp;&amp;, _BidirectionalIterator, _BidirectionalIterator, _OutputIterator, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _BidirectionalIterator , class _OutputIterator , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a1bbdf6f7bb9a5f3a4f31114a9043ddb4">__pstl::__internal::__pattern_reverse_copy</link> (_ExecutionPolicy &amp;&amp;, _BidirectionalIterator, _BidirectionalIterator, _OutputIterator, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1a4839fc534579a3fc930d2e75fac28bde">__pstl::__internal::__brick_rotate</link> (_ForwardIterator, _ForwardIterator, _ForwardIterator, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1a1441ac541a6e5a1fd3b0a243d89c8e38">__pstl::__internal::__brick_rotate</link> (_ForwardIterator, _ForwardIterator, _ForwardIterator, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _IsVector &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1aa1344d4c056259b28555671b7a23108d">__pstl::__internal::__pattern_rotate</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _ForwardIterator, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _IsVector &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1a94a7d55cfbf7d100e9c4605bb77112ca">__pstl::__internal::__pattern_rotate</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _ForwardIterator, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _OutputIterator &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a5e570a4fb18169e688868351cb36789d">__pstl::__internal::__brick_rotate_copy</link> (_ForwardIterator, _ForwardIterator, _ForwardIterator, _OutputIterator, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _OutputIterator &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a49a58246b209a35772ed9c026d5531a9">__pstl::__internal::__brick_rotate_copy</link> (_ForwardIterator, _ForwardIterator, _ForwardIterator, _OutputIterator, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _OutputIterator , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a6a5ba3b17e77b55a76e8ed1b6130f2e2">__pstl::__internal::__pattern_rotate_copy</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _ForwardIterator, _OutputIterator, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _OutputIterator , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a00eafc09ae70c395ab01c3f9a66fd235">__pstl::__internal::__pattern_rotate_copy</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _ForwardIterator, _OutputIterator, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _UnaryPredicate &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1a622621727d35e996e256f9b96d4680bd">__pstl::__internal::__brick_is_partitioned</link> (_ForwardIterator, _ForwardIterator, _UnaryPredicate, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _UnaryPredicate &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1abbf66af8bb8e1309bd15b4a84c7465e6">__pstl::__internal::__brick_is_partitioned</link> (_ForwardIterator, _ForwardIterator, _UnaryPredicate, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _UnaryPredicate , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1a3c61e6bb9156e92c5f8e13ad0c5e5e5b">__pstl::__internal::__pattern_is_partitioned</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _UnaryPredicate, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _UnaryPredicate , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1a731f25ad9c5911a4653029fe4daa672b">__pstl::__internal::__pattern_is_partitioned</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _UnaryPredicate, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _UnaryPredicate &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1ae322bd077e3fd6429c010272c9e48605">__pstl::__internal::__brick_partition</link> (_ForwardIterator, _ForwardIterator, _UnaryPredicate, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _UnaryPredicate &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1ae705dda6a3e436b790679fc77d04d7f5">__pstl::__internal::__brick_partition</link> (_ForwardIterator, _ForwardIterator, _UnaryPredicate, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _UnaryPredicate , class _IsVector &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1aad5bdaaadc2aee6f032d7188f9556523">__pstl::__internal::__pattern_partition</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _UnaryPredicate, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _UnaryPredicate , class _IsVector &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1a61f63e28f8029e1701e73ac7b545d735">__pstl::__internal::__pattern_partition</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _UnaryPredicate, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _BidirectionalIterator , class _UnaryPredicate &gt; </para><para>_BidirectionalIterator <link linkend="_namespace____pstl_1_1____internal_1a3cf8035d93d96d8e03fc862a9f691be3">__pstl::__internal::__brick_stable_partition</link> (_BidirectionalIterator, _BidirectionalIterator, _UnaryPredicate, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _BidirectionalIterator , class _UnaryPredicate &gt; </para><para>_BidirectionalIterator <link linkend="_namespace____pstl_1_1____internal_1a3e9891c584f6ee493a619a56d0bdde9c">__pstl::__internal::__brick_stable_partition</link> (_BidirectionalIterator, _BidirectionalIterator, _UnaryPredicate, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _BidirectionalIterator , class _UnaryPredicate , class _IsVector &gt; </para><para>_BidirectionalIterator <link linkend="_namespace____pstl_1_1____internal_1a8c278dd40fdab60b98fd9a0046876130">__pstl::__internal::__pattern_stable_partition</link> (_ExecutionPolicy &amp;&amp;, _BidirectionalIterator, _BidirectionalIterator, _UnaryPredicate, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _BidirectionalIterator , class _UnaryPredicate , class _IsVector &gt; </para><para>_BidirectionalIterator <link linkend="_namespace____pstl_1_1____internal_1a5adc5d57d7e462d14f717be5a4a1fc84">__pstl::__internal::__pattern_stable_partition</link> (_ExecutionPolicy &amp;&amp;, _BidirectionalIterator, _BidirectionalIterator, _UnaryPredicate, _IsVector, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _OutputIterator1 , class _OutputIterator2 , class _UnaryPredicate &gt; </para><para>std::pair&lt; _OutputIterator1, _OutputIterator2 &gt; <link linkend="_namespace____pstl_1_1____internal_1ad6a93bac17929ca09cd1ce3a78d73910">__pstl::__internal::__brick_partition_copy</link> (_ForwardIterator, _ForwardIterator, _OutputIterator1, _OutputIterator2, _UnaryPredicate, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _OutputIterator1 , class _OutputIterator2 , class _UnaryPredicate &gt; </para><para>std::pair&lt; _OutputIterator1, _OutputIterator2 &gt; <link linkend="_namespace____pstl_1_1____internal_1a697f3e432645ec6bd4d0d3005fa806e1">__pstl::__internal::__brick_partition_copy</link> (_ForwardIterator, _ForwardIterator, _OutputIterator1, _OutputIterator2, _UnaryPredicate, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _OutputIterator1 , class _OutputIterator2 , class _UnaryPredicate , class _IsVector &gt; </para><para>std::pair&lt; _OutputIterator1, _OutputIterator2 &gt; <link linkend="_namespace____pstl_1_1____internal_1a213f0e051dd1ea6261325ac6f2f65cb2">__pstl::__internal::__pattern_partition_copy</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _OutputIterator1, _OutputIterator2, _UnaryPredicate, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _OutputIterator1 , class _OutputIterator2 , class _UnaryPredicate , class _IsVector &gt; </para><para>std::pair&lt; _OutputIterator1, _OutputIterator2 &gt; <link linkend="_namespace____pstl_1_1____internal_1a39b7209a5f972f57dd561159aaef3301">__pstl::__internal::__pattern_partition_copy</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator, _RandomAccessIterator, _OutputIterator1, _OutputIterator2, _UnaryPredicate, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare , class _IsVector , class _IsMoveConstructible &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a5ccc13fdf58da10d6d45be7770ad0a4c">__pstl::__internal::__pattern_sort</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator, _RandomAccessIterator, _Compare, _IsVector, std::false_type, _IsMoveConstructible) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1ab5e5fe62a4b7da3722035a9a77ac890b">__pstl::__internal::__pattern_sort</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator, _RandomAccessIterator, _Compare, _IsVector, std::true_type, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1aee8744385f4f206ef9dd2c11f1af9b48">__pstl::__internal::__pattern_stable_sort</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator, _RandomAccessIterator, _Compare, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a0dbd23a8f6451b9d6a2faaa4abf0e1e1">__pstl::__internal::__pattern_stable_sort</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator, _RandomAccessIterator, _Compare, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a913b070daf38b8f0c138c1c5df02f47c">__pstl::__internal::__pattern_partial_sort</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator, _RandomAccessIterator, _RandomAccessIterator, _Compare, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1aba659375caae21864599440aa982bc74">__pstl::__internal::__pattern_partial_sort</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator, _RandomAccessIterator, _RandomAccessIterator, _Compare, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _RandomAccessIterator , class _Compare , class _IsVector &gt; </para><para>_RandomAccessIterator <link linkend="_namespace____pstl_1_1____internal_1ac7fa2ccc37779ff9c32374cab3d19453">__pstl::__internal::__pattern_partial_sort_copy</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _RandomAccessIterator, _RandomAccessIterator, _Compare, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _RandomAccessIterator , class _Compare , class _IsVector &gt; </para><para>_RandomAccessIterator <link linkend="_namespace____pstl_1_1____internal_1a0b0d1ce785beef64a5003271d4cd5c4a">__pstl::__internal::__pattern_partial_sort_copy</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _RandomAccessIterator, _RandomAccessIterator, _Compare, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _BinaryPredicate &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1a1b8170b65ea0cebedcc3348875bc4a26">__pstl::__internal::__brick_adjacent_find</link> (_ForwardIterator, _ForwardIterator, _BinaryPredicate, std::true_type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _BinaryPredicate &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1a3445e693a1a46acd217e4d7754a7f50f">__pstl::__internal::__brick_adjacent_find</link> (_ForwardIterator, _ForwardIterator, _BinaryPredicate, std::false_type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _BinaryPredicate , class _IsVector &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1a6baa124378ed7fdc525b00a43af706ab">__pstl::__internal::__pattern_adjacent_find</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _BinaryPredicate, std::false_type, _IsVector, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _BinaryPredicate , class _IsVector &gt; </para><para>_RandomAccessIterator <link linkend="_namespace____pstl_1_1____internal_1a9a5ef5a50f34242baa056308a62ce5cc">__pstl::__internal::__pattern_adjacent_find</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator, _RandomAccessIterator, _BinaryPredicate, std::true_type, _IsVector, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a1d4194f0c17340011a1f84e4123b368a">__pstl::__internal::__pattern_nth_element</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator, _RandomAccessIterator, _RandomAccessIterator, _Compare, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a6363ba028d1204de35e49c2992dc33be">__pstl::__internal::__pattern_nth_element</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator, _RandomAccessIterator, _RandomAccessIterator, _Compare, _IsVector, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _Tp &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a8609d730151cea711f5568745830001b">__pstl::__internal::__brick_fill</link> (_ForwardIterator, _ForwardIterator, const _Tp &amp;, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _Tp &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a19af0566e05f3357ce3695374cca0c2e">__pstl::__internal::__brick_fill</link> (_ForwardIterator, _ForwardIterator, const _Tp &amp;, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Tp , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1aff16869e1f76cf88c7dcdd1baa6304a9">__pstl::__internal::__pattern_fill</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, const _Tp &amp;, std::false_type, _IsVector) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Tp , class _IsVector &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1a476db1d5f698af0a5a952a4645a4af70">__pstl::__internal::__pattern_fill</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, const _Tp &amp;, std::true_type, _IsVector)</para>
</listitem>
            <listitem><para>template&lt;class _OutputIterator , class _Size , class _Tp &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1abf6e7beca88698d7433bf8f0a4271a01">__pstl::__internal::__brick_fill_n</link> (_OutputIterator, _Size, const _Tp &amp;, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _OutputIterator , class _Size , class _Tp &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1adf5ed1e8c383803a15d59309774cb0cb">__pstl::__internal::__brick_fill_n</link> (_OutputIterator, _Size, const _Tp &amp;, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _OutputIterator , class _Size , class _Tp , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1ad46a2d1af24aa54224f2adc68ef625ce">__pstl::__internal::__pattern_fill_n</link> (_ExecutionPolicy &amp;&amp;, _OutputIterator, _Size, const _Tp &amp;, std::false_type, _IsVector) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _OutputIterator , class _Size , class _Tp , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a56499de61c94cc462ef14f3fc499dc9e">__pstl::__internal::__pattern_fill_n</link> (_ExecutionPolicy &amp;&amp;, _OutputIterator, _Size, const _Tp &amp;, std::true_type, _IsVector)</para>
</listitem>
            <listitem><para>template&lt;class _RandomAccessIterator , class _Generator &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1aa4e8af00945dc77eacbc427e3c14bec5">__pstl::__internal::__brick_generate</link> (_RandomAccessIterator, _RandomAccessIterator, _Generator, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _Generator &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a6e77e64ed5384bd6a772763fdd2a70a9">__pstl::__internal::__brick_generate</link> (_ForwardIterator, _ForwardIterator, _Generator, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Generator , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a761ab81e053354013f7e051cca8bee7d">__pstl::__internal::__pattern_generate</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _Generator, std::false_type, _IsVector) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Generator , class _IsVector &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1a9a6fbb749f8b1ef63c3fc3ae5c81dc48">__pstl::__internal::__pattern_generate</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _Generator, std::true_type, _IsVector)</para>
</listitem>
            <listitem><para>template&lt;class OutputIterator , class <link linkend="_struct_size">Size</link> , class _Generator &gt; </para><para>OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a5da5e1e0c6ad779e9621a6403607fe23">__pstl::__internal::__brick_generate_n</link> (OutputIterator, <link linkend="_struct_size">Size</link>, _Generator, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class OutputIterator , class <link linkend="_struct_size">Size</link> , class _Generator &gt; </para><para>OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a63a2d4d1bf2db03ad2c4467854e5bb31">__pstl::__internal::__brick_generate_n</link> (OutputIterator, <link linkend="_struct_size">Size</link>, _Generator, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class OutputIterator , class <link linkend="_struct_size">Size</link> , class _Generator , class _IsVector &gt; </para><para>OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a89ba2dce127a80f7bc0578270c7fcb9c">__pstl::__internal::__pattern_generate_n</link> (_ExecutionPolicy &amp;&amp;, OutputIterator, <link linkend="_struct_size">Size</link>, _Generator, std::false_type, _IsVector) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class OutputIterator , class <link linkend="_struct_size">Size</link> , class _Generator , class _IsVector &gt; </para><para>OutputIterator <link linkend="_namespace____pstl_1_1____internal_1ae9558d53b020bc0bce2d465e61be16f0">__pstl::__internal::__pattern_generate_n</link> (_ExecutionPolicy &amp;&amp;, OutputIterator, <link linkend="_struct_size">Size</link>, _Generator, std::true_type, _IsVector)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _UnaryPredicate &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1acfc78209433e3b4840607a173bb5e75b">__pstl::__internal::__brick_remove_if</link> (_ForwardIterator, _ForwardIterator, _UnaryPredicate, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _RandomAccessIterator , class _UnaryPredicate &gt; </para><para>_RandomAccessIterator <link linkend="_namespace____pstl_1_1____internal_1ac0861501c2dea5f3bc26f3d05f2e6ce4">__pstl::__internal::__brick_remove_if</link> (_RandomAccessIterator, _RandomAccessIterator, _UnaryPredicate, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _UnaryPredicate , class _IsVector &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1ab7a6c74a4cb2c2ee930c2da12b6cd686">__pstl::__internal::__pattern_remove_if</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _UnaryPredicate, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _UnaryPredicate , class _IsVector &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1abaac748503657c571bfa47fdc1e0cc08">__pstl::__internal::__pattern_remove_if</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _UnaryPredicate, _IsVector, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a70ab125a9ca5e91d4e2716719b66e117">__pstl::__internal::__brick_merge</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _OutputIterator, _Compare, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a1b6ea99e4a5059dafcaa7365f69ab37e">__pstl::__internal::__brick_merge</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _OutputIterator, _Compare, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a76f9badc9cf4092c8e996b0564a8a8d2">__pstl::__internal::__pattern_merge</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _OutputIterator, _Compare, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator1 , class _RandomAccessIterator2 , class _OutputIterator , class _Compare , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a88efac728302414dc40ef03666a525b9">__pstl::__internal::__pattern_merge</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator1, _RandomAccessIterator1, _RandomAccessIterator2, _RandomAccessIterator2, _OutputIterator, _Compare, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _BidirectionalIterator , class _Compare &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a35908f407d1c98b3f5f57a9738fa1001">__pstl::__internal::__brick_inplace_merge</link> (_BidirectionalIterator, _BidirectionalIterator, _BidirectionalIterator, _Compare, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _BidirectionalIterator , class _Compare &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1ae6cb9d42f676a70f65ec28cac4fc47b9">__pstl::__internal::__brick_inplace_merge</link> (_BidirectionalIterator, _BidirectionalIterator, _BidirectionalIterator, _Compare, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _BidirectionalIterator , class _Compare , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a28f4f64e2180b392ca4c226ee3c76d7c">__pstl::__internal::__pattern_inplace_merge</link> (_ExecutionPolicy &amp;&amp;, _BidirectionalIterator, _BidirectionalIterator, _BidirectionalIterator, _Compare, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _BidirectionalIterator , class _Compare , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a4776592443a46071702773c7f7fd40d8">__pstl::__internal::__pattern_inplace_merge</link> (_ExecutionPolicy &amp;&amp;, _BidirectionalIterator, _BidirectionalIterator, _BidirectionalIterator, _Compare, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Compare , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1af4bd54f061b9f4a0d379383965a84e62">__pstl::__internal::__pattern_includes</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _Compare, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Compare , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1a4e83898b31f777a59d85ceca52311ff8">__pstl::__internal::__pattern_includes</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _Compare, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a665966afdcae3e29d9cf09d83592063e">__pstl::__internal::__brick_set_union</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _OutputIterator, _Compare, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a8960afc1a06baf39cd1a8a07e05c675a">__pstl::__internal::__brick_set_union</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _OutputIterator, _Compare, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a0b5347b92e571caa994698482c35535b">__pstl::__internal::__pattern_set_union</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _OutputIterator, _Compare, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1ac7e0e35e17f94ea6ac0b9a531e6805f6">__pstl::__internal::__pattern_set_union</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _OutputIterator, _Compare, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a02b4929b5a742ec0936b3831db5f6bd2">__pstl::__internal::__brick_set_intersection</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _OutputIterator, _Compare, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a776f0c606778603c1b1ad6ab0acdd8cb">__pstl::__internal::__brick_set_intersection</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _OutputIterator, _Compare, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1aa71f557e499f46f8fdfcb81c1ade34b3">__pstl::__internal::__pattern_set_intersection</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _OutputIterator, _Compare, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a505413fc2fcfaf823836f8ba2348a21d">__pstl::__internal::__pattern_set_intersection</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _OutputIterator, _Compare, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a07696af449269fcc74ef20fd53fd2db2">__pstl::__internal::__brick_set_difference</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _OutputIterator, _Compare, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a84aa3f0b49e2a585c1c41c7d36699c09">__pstl::__internal::__brick_set_difference</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _OutputIterator, _Compare, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1ae2ac09b3a487a7ba6061822478a08420">__pstl::__internal::__pattern_set_difference</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _OutputIterator, _Compare, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a21887a3e3ba35dc56e4d524dd6f2dde5">__pstl::__internal::__pattern_set_difference</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _OutputIterator, _Compare, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a7aee903e19ce015f8d17fc3ea6dc20f8">__pstl::__internal::__brick_set_symmetric_difference</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _OutputIterator, _Compare, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a21a50e296afe62174b2781e8578fde76">__pstl::__internal::__brick_set_symmetric_difference</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _OutputIterator, _Compare, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a2468e1a5821a3180a4352135b4ac89c9">__pstl::__internal::__pattern_set_symmetric_difference</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _OutputIterator, _Compare, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a0a3f69c5b0b60d4ea1e4127f8eab8ef2">__pstl::__internal::__pattern_set_symmetric_difference</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _OutputIterator, _Compare, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _RandomAccessIterator , class _Compare &gt; </para><para>_RandomAccessIterator <link linkend="_namespace____pstl_1_1____internal_1a25a06be9bdcfa0b99e3c30baf1a739a0">__pstl::__internal::__brick_is_heap_until</link> (_RandomAccessIterator, _RandomAccessIterator, _Compare, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _RandomAccessIterator , class _Compare &gt; </para><para>_RandomAccessIterator <link linkend="_namespace____pstl_1_1____internal_1a1e8373179634547b3c8361940e47cfba">__pstl::__internal::__brick_is_heap_until</link> (_RandomAccessIterator, _RandomAccessIterator, _Compare, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare , class _IsVector &gt; </para><para>_RandomAccessIterator <link linkend="_namespace____pstl_1_1____internal_1a0fe7d90d58490eee0f9aa2f92a0a48e1">__pstl::__internal::__pattern_is_heap_until</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator, _RandomAccessIterator, _Compare, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare , class _IsVector &gt; </para><para>_RandomAccessIterator <link linkend="_namespace____pstl_1_1____internal_1a71c7837f9acfc44b3fb3f952136e2100">__pstl::__internal::__pattern_is_heap_until</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator, _RandomAccessIterator, _Compare, _IsVector, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename _ForwardIterator , typename _Compare &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1a5911eb58c7d91507828d829ae22f5a33">__pstl::__internal::__brick_min_element</link> (_ForwardIterator, _ForwardIterator, _Compare, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename _ForwardIterator , typename _Compare &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1ae85230afa98e8cc1e1d28e4ba68f3265">__pstl::__internal::__brick_min_element</link> (_ForwardIterator, _ForwardIterator, _Compare, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename _ExecutionPolicy , typename _ForwardIterator , typename _Compare , typename _IsVector &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1afac22840ab45394d57a19b1b5c102a9b">__pstl::__internal::__pattern_min_element</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _Compare, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename _ExecutionPolicy , typename _RandomAccessIterator , typename _Compare , typename _IsVector &gt; </para><para>_RandomAccessIterator <link linkend="_namespace____pstl_1_1____internal_1a68e4819c62973487b53a5fd4c2bfb6e2">__pstl::__internal::__pattern_min_element</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator, _RandomAccessIterator, _Compare, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;typename _ForwardIterator , typename _Compare &gt; </para><para>std::pair&lt; _ForwardIterator, _ForwardIterator &gt; <link linkend="_namespace____pstl_1_1____internal_1a813346c7a8ea9a457346d85fb9b3ec13">__pstl::__internal::__brick_minmax_element</link> (_ForwardIterator, _ForwardIterator, _Compare, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename _ForwardIterator , typename _Compare &gt; </para><para>std::pair&lt; _ForwardIterator, _ForwardIterator &gt; <link linkend="_namespace____pstl_1_1____internal_1a1637cf51097a64736c8993b610374047">__pstl::__internal::__brick_minmax_element</link> (_ForwardIterator, _ForwardIterator, _Compare, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename _ExecutionPolicy , typename _ForwardIterator , typename _Compare , typename _IsVector &gt; </para><para>std::pair&lt; _ForwardIterator, _ForwardIterator &gt; <link linkend="_namespace____pstl_1_1____internal_1ac0ba54f6df57a5a9f3dfb520b1dffd37">__pstl::__internal::__pattern_minmax_element</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _Compare, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename _ExecutionPolicy , typename _ForwardIterator , typename _Compare , typename _IsVector &gt; </para><para>std::pair&lt; _ForwardIterator, _ForwardIterator &gt; <link linkend="_namespace____pstl_1_1____internal_1a20c5c80ff4a258db9f3fa9020ac1d544">__pstl::__internal::__pattern_minmax_element</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _Compare, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _Predicate &gt; </para><para>std::pair&lt; _ForwardIterator1, _ForwardIterator2 &gt; <link linkend="_namespace____pstl_1_1____internal_1a2011ee19f02c28a238c06f2b74b8106e">__pstl::__internal::__brick_mismatch</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _Predicate, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _Predicate &gt; </para><para>std::pair&lt; _ForwardIterator1, _ForwardIterator2 &gt; <link linkend="_namespace____pstl_1_1____internal_1ae0ab000d4488fd3f8a2b3690fc2a6e5f">__pstl::__internal::__brick_mismatch</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _Predicate, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Predicate , class _IsVector &gt; </para><para>std::pair&lt; _ForwardIterator1, _ForwardIterator2 &gt; <link linkend="_namespace____pstl_1_1____internal_1af94c79334ec95c8bccf8ce29d207f8b2">__pstl::__internal::__pattern_mismatch</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _Predicate, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator1 , class _RandomAccessIterator2 , class _Predicate , class _IsVector &gt; </para><para>std::pair&lt; _RandomAccessIterator1, _RandomAccessIterator2 &gt; <link linkend="_namespace____pstl_1_1____internal_1a86ddc2652f50a65b022beba313670f4d">__pstl::__internal::__pattern_mismatch</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator1, _RandomAccessIterator1, _RandomAccessIterator2, _RandomAccessIterator2, _Predicate, _IsVector, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _Compare &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1a25bc7cb77cfdd3c6c75cef7315fbbf50">__pstl::__internal::__brick_lexicographical_compare</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _Compare, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _Compare &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1a4e26a9f86fcb67483a36b7f60d34213c">__pstl::__internal::__brick_lexicographical_compare</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _Compare, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Compare , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1a87963436503d6c04ddbae7eb6827f60c">__pstl::__internal::__pattern_lexicographical_compare</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _Compare, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Compare , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1a0594b7be154260d4252b5fecdd79b5a8">__pstl::__internal::__pattern_lexicographical_compare</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _Compare, _IsVector, std::true_type) noexcept</para>
</listitem>
        </itemizedlist>
</simplesect>
</section>
