<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2bits_2allocator_8h_source" xml:lang="en-US">
<title>allocator.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/bits/allocator.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Allocators&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2001-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">/*</emphasis>
26 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1996-1997</emphasis>
27 <emphasis role="comment">&#32;*&#32;Silicon&#32;Graphics&#32;Computer&#32;Systems,&#32;Inc.</emphasis>
28 <emphasis role="comment">&#32;*</emphasis>
29 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
30 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
31 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
32 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
33 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Silicon&#32;Graphics&#32;makes&#32;no</emphasis>
34 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
35 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
36 <emphasis role="comment">&#32;*/</emphasis>
37 
43 <emphasis role="preprocessor">#ifndef&#32;_ALLOCATOR_H</emphasis>
44 <emphasis role="preprocessor">#define&#32;_ALLOCATOR_H&#32;1</emphasis>
45 
46 <emphasis role="preprocessor">#include&#32;&lt;bits/c++allocator.h&gt;</emphasis>&#32;<emphasis role="comment">//&#32;Define&#32;the&#32;base&#32;class&#32;to&#32;std::allocator.</emphasis>
47 <emphasis role="preprocessor">#include&#32;&lt;bits/memoryfwd.h&gt;</emphasis>
48 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
49 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>
50 <emphasis role="preprocessor">#endif</emphasis>
51 
52 <emphasis role="preprocessor">#define&#32;__cpp_lib_incomplete_container_elements&#32;201505L</emphasis>
53 
54 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
55 {
56 _GLIBCXX_BEGIN_NAMESPACE_VERSION
57 
63 &#32;&#32;<emphasis role="comment">//&#32;Since&#32;C++20&#32;the&#32;primary&#32;template&#32;should&#32;be&#32;used&#32;for&#32;allocator&lt;void&gt;,</emphasis>
64 &#32;&#32;<emphasis role="comment">//&#32;but&#32;then&#32;it&#32;would&#32;have&#32;a&#32;non-trivial&#32;default&#32;ctor&#32;and&#32;dtor&#32;for&#32;C++20,</emphasis>
65 &#32;&#32;<emphasis role="comment">//&#32;but&#32;trivial&#32;for&#32;C++98-17,&#32;which&#32;would&#32;be&#32;an&#32;ABI&#32;incompatibiliy&#32;between</emphasis>
66 &#32;&#32;<emphasis role="comment">//&#32;different&#32;standard&#32;dialects.&#32;So&#32;C++20&#32;still&#32;uses&#32;the&#32;allocator&lt;void&gt;</emphasis>
67 &#32;&#32;<emphasis role="comment">//&#32;explicit&#32;specialization,&#32;with&#32;the&#32;historical&#32;ABI&#32;properties,&#32;but&#32;with</emphasis>
68 &#32;&#32;<emphasis role="comment">//&#32;the&#32;same&#32;members&#32;that&#32;are&#32;present&#32;in&#32;the&#32;primary&#32;template.</emphasis>
69 
71 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
72 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>allocator&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
73 &#32;&#32;&#32;&#32;{
74 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
75 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
76 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;size_type;
77 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;&#32;&#32;difference_type;
78 
79 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;=&#32;201703L</emphasis>
80 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;These&#32;were&#32;removed&#32;for&#32;C++20,&#32;allocator_traits&#32;does&#32;the&#32;right&#32;thing.</emphasis>
81 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
82 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;const_pointer;
83 
84 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
85 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>rebind
86 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;allocator&lt;_Tp1&gt;&#32;other;&#32;};
87 <emphasis role="preprocessor">#endif</emphasis>
88 
89 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
90 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
91 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2103.&#32;std::allocator&#32;propagate_on_container_move_assignment</emphasis>
92 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>propagate_on_container_move_assignment&#32;=&#32;true_type;
93 
94 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>is_always_equal
95 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a48d62a57a72047fde348bfbbf40fd6c6">_GLIBCXX20_DEPRECATED_SUGGEST</link>(<emphasis role="stringliteral">&quot;std::allocator_traits::is_always_equal&quot;</emphasis>)
96 &#32;&#32;&#32;&#32;=&#32;true_type;
97 
98 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;202002L</emphasis>
99 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;As&#32;noted&#32;above,&#32;these&#32;members&#32;are&#32;present&#32;for&#32;C++20&#32;to&#32;provide&#32;the</emphasis>
100 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;same&#32;API&#32;as&#32;the&#32;primary&#32;template,&#32;but&#32;still&#32;trivial&#32;as&#32;in&#32;pre-C++20.</emphasis>
101 &#32;&#32;&#32;&#32;&#32;&#32;allocator()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
102 &#32;&#32;&#32;&#32;&#32;&#32;~allocator()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
103 
104 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
105 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
106 &#32;&#32;&#32;&#32;allocator(<emphasis role="keyword">const</emphasis>&#32;allocator&lt;_Up&gt;&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{&#32;}
107 
108 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;allocate&#32;member&#32;because&#32;it&apos;s&#32;ill-formed&#32;by&#32;LWG&#32;3307.</emphasis>
109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;deallocate&#32;member&#32;because&#32;it&#32;would&#32;be&#32;undefined&#32;to&#32;call&#32;it</emphasis>
110 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;with&#32;any&#32;pointer&#32;which&#32;wasn&apos;t&#32;obtained&#32;from&#32;allocate.</emphasis>
111 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++20</emphasis>
112 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
113 &#32;&#32;&#32;&#32;};
114 
123 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
124 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>allocator&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09allocator_8h_1aef634b3572284c69ad79822ce3d29fc6">__allocator_base</link>&lt;_Tp&gt;
125 &#32;&#32;&#32;&#32;{
126 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
127 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
128 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;size_type;
129 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;&#32;difference_type;
130 
131 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;=&#32;201703L</emphasis>
132 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;These&#32;were&#32;removed&#32;for&#32;C++20.</emphasis>
133 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp*&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
134 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;const_pointer;
135 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference;
136 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;const_reference;
137 
138 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
139 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>rebind
140 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;allocator&lt;_Tp1&gt;&#32;other;&#32;};
141 <emphasis role="preprocessor">#endif</emphasis>
142 
143 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
144 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
145 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2103.&#32;std::allocator&#32;propagate_on_container_move_assignment</emphasis>
146 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>propagate_on_container_move_assignment&#32;=&#32;true_type;
147 
148 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>is_always_equal
149 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a48d62a57a72047fde348bfbbf40fd6c6">_GLIBCXX20_DEPRECATED_SUGGEST</link>(<emphasis role="stringliteral">&quot;std::allocator_traits::is_always_equal&quot;</emphasis>)
150 &#32;&#32;&#32;&#32;=&#32;true_type;
151 <emphasis role="preprocessor">#endif</emphasis>
152 
153 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
154 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;3035.&#32;std::allocator&apos;s&#32;constructors&#32;should&#32;be&#32;constexpr</emphasis>
155 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
156 &#32;&#32;&#32;&#32;&#32;&#32;allocator()&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link>&#32;{&#32;}
157 
158 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
159 &#32;&#32;&#32;&#32;&#32;&#32;allocator(<emphasis role="keyword">const</emphasis>&#32;allocator&amp;&#32;__a)&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link>
160 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;__allocator_base&lt;_Tp&gt;(__a)&#32;{&#32;}
161 
162 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
163 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Avoid&#32;implicit&#32;deprecation.</emphasis>
164 &#32;&#32;&#32;&#32;&#32;&#32;allocator&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;allocator&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
165 <emphasis role="preprocessor">#endif</emphasis>
166 
167 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
168 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
169 &#32;&#32;&#32;&#32;allocator(<emphasis role="keyword">const</emphasis>&#32;allocator&lt;_Tp1&gt;&amp;)&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link>&#32;{&#32;}
170 
171 <emphasis role="preprocessor">#if&#32;__cpp_constexpr_dynamic_alloc</emphasis>
172 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
173 <emphasis role="preprocessor">#endif</emphasis>
174 &#32;&#32;&#32;&#32;&#32;&#32;~allocator()&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link>&#32;{&#32;}
175 
176 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
177 &#32;&#32;&#32;&#32;&#32;&#32;[[nodiscard,__gnu__::__always_inline__]]
178 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp*
179 &#32;&#32;&#32;&#32;&#32;&#32;allocate(<emphasis role="keywordtype">size_t</emphasis>&#32;__n)
180 &#32;&#32;&#32;&#32;&#32;&#32;{
181 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
182 &#32;&#32;&#32;&#32;&#32;&#32;{
183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_mul_overflow(__n,&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp),&#32;&amp;__n))
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__throw_bad_array_new_length();
185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp*<emphasis role="keyword">&gt;</emphasis>(::operator&#32;<emphasis role="keyword">new</emphasis>(__n));
186 &#32;&#32;&#32;&#32;&#32;&#32;}
187 
188 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__allocator_base&lt;_Tp&gt;::allocate(__n,&#32;0);
189 &#32;&#32;&#32;&#32;&#32;&#32;}
190 
191 &#32;&#32;&#32;&#32;&#32;&#32;[[__gnu__::__always_inline__]]
192 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
193 &#32;&#32;&#32;&#32;&#32;&#32;deallocate(_Tp*&#32;__p,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n)
194 &#32;&#32;&#32;&#32;&#32;&#32;{
195 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
196 &#32;&#32;&#32;&#32;&#32;&#32;{
197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::operator&#32;<emphasis role="keyword">delete</emphasis>(__p);
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
199 &#32;&#32;&#32;&#32;&#32;&#32;}
200 &#32;&#32;&#32;&#32;__allocator_base&lt;_Tp&gt;::deallocate(__p,&#32;__n);
201 &#32;&#32;&#32;&#32;&#32;&#32;}
202 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++20</emphasis>
203 
204 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
205 &#32;&#32;&#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;allocator&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;allocator&amp;)&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link>
206 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;&#32;}
207 
208 <emphasis role="preprocessor">#if&#32;__cpp_impl_three_way_comparison&#32;&lt;&#32;201907L</emphasis>
209 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
210 &#32;&#32;&#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;allocator&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;allocator&amp;)&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link>
211 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;}
212 <emphasis role="preprocessor">#endif</emphasis>
213 
214 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Inherit&#32;everything&#32;else.</emphasis>
215 &#32;&#32;&#32;&#32;};
216 
217 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T2&gt;
218 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
219 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;allocator&lt;_T1&gt;&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;allocator&lt;_T2&gt;&amp;)
220 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link>
221 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;&#32;}
222 
223 <emphasis role="preprocessor">#if&#32;__cpp_impl_three_way_comparison&#32;&lt;&#32;201907L</emphasis>
224 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T2&gt;
225 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
226 &#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;allocator&lt;_T1&gt;&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;allocator&lt;_T2&gt;&amp;)
227 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link>
228 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;}
229 <emphasis role="preprocessor">#endif</emphasis>
230 
231 &#32;&#32;<emphasis role="comment">//&#32;Invalid&#32;allocator&lt;cv&#32;T&gt;&#32;partial&#32;specializations.</emphasis>
232 &#32;&#32;<emphasis role="comment">//&#32;allocator_traits::rebind_alloc&#32;can&#32;be&#32;used&#32;to&#32;form&#32;a&#32;valid&#32;allocator&#32;type.</emphasis>
233 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
234 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>allocator&lt;const&#32;_Tp&gt;
235 &#32;&#32;&#32;&#32;{
236 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
237 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;value_type;
238 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;&#32;allocator(<emphasis role="keyword">const</emphasis>&#32;allocator&lt;_Up&gt;&amp;)&#32;{&#32;}
239 &#32;&#32;&#32;&#32;};
240 
241 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
242 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>allocator&lt;volatile&#32;_Tp&gt;
243 &#32;&#32;&#32;&#32;{
244 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
245 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;value_type;
246 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;&#32;allocator(<emphasis role="keyword">const</emphasis>&#32;allocator&lt;_Up&gt;&amp;)&#32;{&#32;}
247 &#32;&#32;&#32;&#32;};
248 
249 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
250 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>allocator&lt;const&#32;volatile&#32;_Tp&gt;
251 &#32;&#32;&#32;&#32;{
252 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
253 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;value_type;
254 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;&#32;allocator(<emphasis role="keyword">const</emphasis>&#32;allocator&lt;_Up&gt;&amp;)&#32;{&#32;}
255 &#32;&#32;&#32;&#32;};
256 
258 
259 &#32;&#32;<emphasis role="comment">//&#32;Inhibit&#32;implicit&#32;instantiations&#32;for&#32;required&#32;instantiations,</emphasis>
260 &#32;&#32;<emphasis role="comment">//&#32;which&#32;are&#32;defined&#32;via&#32;explicit&#32;instantiations&#32;elsewhere.</emphasis>
261 <emphasis role="preprocessor">#if&#32;_GLIBCXX_EXTERN_TEMPLATE</emphasis>
262 &#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">template</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>allocator&lt;char&gt;;
263 &#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">template</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>allocator&lt;wchar_t&gt;;
264 <emphasis role="preprocessor">#endif</emphasis>
265 
266 &#32;&#32;<emphasis role="comment">//&#32;Undefine.</emphasis>
267 <emphasis role="preprocessor">#undef&#32;__allocator_base</emphasis>
268 
269 &#32;&#32;<emphasis role="comment">//&#32;To&#32;implement&#32;Option&#32;3&#32;of&#32;DR&#32;431.</emphasis>
270 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;=&#32;__is_empty(_Alloc)&gt;
271 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__alloc_swap
272 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;_S_do_it(_Alloc&amp;,&#32;_Alloc&amp;)&#32;_GLIBCXX_NOEXCEPT&#32;{&#32;}&#32;};
273 
274 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
275 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__alloc_swap&lt;_Alloc,&#32;false&gt;
276 &#32;&#32;&#32;&#32;{
277 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
278 &#32;&#32;&#32;&#32;&#32;&#32;_S_do_it(_Alloc&amp;&#32;__one,&#32;_Alloc&amp;&#32;__two)&#32;_GLIBCXX_NOEXCEPT
279 &#32;&#32;&#32;&#32;&#32;&#32;{
280 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Precondition:&#32;swappable&#32;allocators.</emphasis>
281 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__one&#32;!=&#32;__two)
282 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(__one,&#32;__two);
283 &#32;&#32;&#32;&#32;&#32;&#32;}
284 &#32;&#32;&#32;&#32;};
285 
286 &#32;&#32;<emphasis role="comment">//&#32;Optimize&#32;for&#32;stateless&#32;allocators.</emphasis>
287 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;=&#32;__is_empty(_Alloc)&gt;
288 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__alloc_neq
289 &#32;&#32;&#32;&#32;{
290 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
291 &#32;&#32;&#32;&#32;&#32;&#32;_S_do_it(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;)
292 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;}
293 &#32;&#32;&#32;&#32;};
294 
295 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
296 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__alloc_neq&lt;_Alloc,&#32;false&gt;
297 &#32;&#32;&#32;&#32;{
298 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
299 &#32;&#32;&#32;&#32;&#32;&#32;_S_do_it(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__one,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__two)
300 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__one&#32;!=&#32;__two;&#32;}
301 &#32;&#32;&#32;&#32;};
302 
303 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
304 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">bool</emphasis>
305 &#32;&#32;&#32;&#32;=&#32;__or_&lt;is_copy_constructible&lt;typename&#32;_Tp::value_type&gt;,
306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_nothrow_move_constructible&lt;typename&#32;_Tp::value_type&gt;&gt;<link linkend="_classvalue">::value</link>&gt;
307 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__shrink_to_fit_aux
308 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_S_do_it(_Tp&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;}&#32;};
309 
310 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
311 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__shrink_to_fit_aux&lt;_Tp,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
312 &#32;&#32;&#32;&#32;{
313 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
314 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
315 &#32;&#32;&#32;&#32;&#32;&#32;_S_do_it(_Tp&amp;&#32;__c)&#32;<emphasis role="keyword">noexcept</emphasis>
316 &#32;&#32;&#32;&#32;&#32;&#32;{
317 <emphasis role="preprocessor">#if&#32;__cpp_exceptions</emphasis>
318 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>
319 &#32;&#32;&#32;&#32;&#32;&#32;{
320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp(__make_move_if_noexcept_iterator(__c.begin()),
321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__make_move_if_noexcept_iterator(__c.end()),
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__c.get_allocator()).swap(__c);
323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
324 &#32;&#32;&#32;&#32;&#32;&#32;}
325 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>(...)
326 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;}
327 <emphasis role="preprocessor">#else</emphasis>
328 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
329 <emphasis role="preprocessor">#endif</emphasis>
330 &#32;&#32;&#32;&#32;&#32;&#32;}
331 &#32;&#32;&#32;&#32;};
332 <emphasis role="preprocessor">#endif</emphasis>
333 
334 _GLIBCXX_END_NAMESPACE_VERSION
335 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
336 
337 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
