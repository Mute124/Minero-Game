<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2bits_2fs__dir_8h_source" xml:lang="en-US">
<title>fs_dir.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/bits/fs_dir.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Filesystem&#32;directory&#32;utilities&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2014-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_FS_DIR_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_GLIBCXX_FS_DIR_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
34 <emphasis role="preprocessor">#&#32;include&#32;&lt;typeinfo&gt;</emphasis>
35 <emphasis role="preprocessor">#&#32;include&#32;&lt;ext/concurrence.h&gt;</emphasis>
36 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/unique_ptr.h&gt;</emphasis>
37 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/shared_ptr.h&gt;</emphasis>
38 
39 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
40 <emphasis role="preprocessor">#&#32;include&#32;&lt;compare&gt;</emphasis>&#32;<emphasis role="comment">//&#32;std::strong_ordering</emphasis>
41 <emphasis role="preprocessor">#endif</emphasis>
42 
43 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
44 {
45 _GLIBCXX_BEGIN_NAMESPACE_VERSION
46 
47 <emphasis role="keyword">namespace&#32;</emphasis>filesystem
48 {
54 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>file_status
55 &#32;&#32;{
56 &#32;&#32;<emphasis role="keyword">public</emphasis>:
57 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;constructors&#32;and&#32;destructor</emphasis>
58 &#32;&#32;&#32;&#32;file_status()&#32;noexcept&#32;:&#32;file_status(file_type::none)&#32;{}
59 
60 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
61 &#32;&#32;&#32;&#32;file_status(file_type&#32;__ft,&#32;perms&#32;__prms&#32;=&#32;perms::unknown)&#32;noexcept
62 &#32;&#32;&#32;&#32;:&#32;_M_type(__ft),&#32;_M_perms(__prms)&#32;{&#32;}
63 
64 &#32;&#32;&#32;&#32;file_status(<emphasis role="keyword">const</emphasis>&#32;file_status&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
65 &#32;&#32;&#32;&#32;file_status(file_status&amp;&amp;)&#32;noexcept&#32;=&#32;default;
66 &#32;&#32;&#32;&#32;~file_status()&#32;=&#32;default;
67 
68 &#32;&#32;&#32;&#32;file_status&amp;&#32;operator=(const&#32;file_status&amp;)&#32;noexcept&#32;=&#32;default;
69 &#32;&#32;&#32;&#32;file_status&amp;&#32;operator=(file_status&amp;&amp;)&#32;noexcept&#32;=&#32;default;
70 
71 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;observers</emphasis>
72 &#32;&#32;&#32;&#32;file_type&#32;&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_type;&#32;}
73 &#32;&#32;&#32;&#32;perms&#32;&#32;&#32;&#32;&#32;&#32;permissions()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_perms;&#32;}
74 
75 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;modifiers</emphasis>
76 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>(file_type&#32;__ft)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{&#32;_M_type&#32;=&#32;__ft;&#32;}
77 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;permissions(perms&#32;__prms)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{&#32;_M_perms&#32;=&#32;__prms;&#32;}
78 
79 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
80 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
81 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;file_status&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;file_status&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
82 <emphasis role="preprocessor">#endif</emphasis>
83 
84 &#32;&#32;<emphasis role="keyword">private</emphasis>:
85 &#32;&#32;&#32;&#32;file_type&#32;&#32;&#32;_M_type;
86 &#32;&#32;&#32;&#32;perms&#32;&#32;&#32;_M_perms;
87 &#32;&#32;};
88 
89 _GLIBCXX_BEGIN_NAMESPACE_CXX11
90 
91 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Dir;
92 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>directory_iterator;
93 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>recursive_directory_iterator;
94 
96 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>directory_entry
97 &#32;&#32;{
98 &#32;&#32;<emphasis role="keyword">public</emphasis>:
99 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;constructors&#32;and&#32;destructor</emphasis>
100 &#32;&#32;&#32;&#32;directory_entry()&#32;noexcept&#32;=&#32;default;
101 &#32;&#32;&#32;&#32;directory_entry(const&#32;directory_entry&amp;)&#32;=&#32;default;
102 &#32;&#32;&#32;&#32;directory_entry(directory_entry&amp;&amp;)&#32;noexcept&#32;=&#32;default;
103 
104 &#32;&#32;&#32;&#32;explicit
105 &#32;&#32;&#32;&#32;directory_entry(const&#32;filesystem::<link linkend="_classpath">path</link>&amp;&#32;__p)
106 &#32;&#32;&#32;&#32;:&#32;_M_path(__p)
107 &#32;&#32;&#32;&#32;{&#32;refresh();&#32;}
108 
109 &#32;&#32;&#32;&#32;directory_entry(<emphasis role="keyword">const</emphasis>&#32;filesystem::path&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)
110 &#32;&#32;&#32;&#32;:&#32;_M_path(__p)
111 &#32;&#32;&#32;&#32;{
112 &#32;&#32;&#32;&#32;&#32;&#32;refresh(__ec);
113 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__ec)
114 &#32;&#32;&#32;&#32;_M_path.clear();
115 &#32;&#32;&#32;&#32;}
116 
117 &#32;&#32;&#32;&#32;~directory_entry()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
118 
119 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;modifiers</emphasis>
120 &#32;&#32;&#32;&#32;directory_entry&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;directory_entry&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
121 &#32;&#32;&#32;&#32;directory_entry&amp;&#32;operator=(directory_entry&amp;&amp;)&#32;noexcept&#32;=&#32;default;
122 
123 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
124 &#32;&#32;&#32;&#32;assign(const&#32;filesystem::<link linkend="_classpath">path</link>&amp;&#32;__p)
125 &#32;&#32;&#32;&#32;{
126 &#32;&#32;&#32;&#32;&#32;&#32;_M_path&#32;=&#32;__p;
127 &#32;&#32;&#32;&#32;&#32;&#32;refresh();
128 &#32;&#32;&#32;&#32;}
129 
130 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
131 &#32;&#32;&#32;&#32;assign(<emphasis role="keyword">const</emphasis>&#32;filesystem::path&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)
132 &#32;&#32;&#32;&#32;{
133 &#32;&#32;&#32;&#32;&#32;&#32;_M_path&#32;=&#32;__p;
134 &#32;&#32;&#32;&#32;&#32;&#32;refresh(__ec);
135 &#32;&#32;&#32;&#32;}
136 
137 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
138 &#32;&#32;&#32;&#32;replace_filename(<emphasis role="keyword">const</emphasis>&#32;filesystem::path&amp;&#32;__p)
139 &#32;&#32;&#32;&#32;{
140 &#32;&#32;&#32;&#32;&#32;&#32;_M_path.replace_filename(__p);
141 &#32;&#32;&#32;&#32;&#32;&#32;refresh();
142 &#32;&#32;&#32;&#32;}
143 
144 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
145 &#32;&#32;&#32;&#32;replace_filename(<emphasis role="keyword">const</emphasis>&#32;filesystem::path&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)
146 &#32;&#32;&#32;&#32;{
147 &#32;&#32;&#32;&#32;&#32;&#32;_M_path.replace_filename(__p);
148 &#32;&#32;&#32;&#32;&#32;&#32;refresh(__ec);
149 &#32;&#32;&#32;&#32;}
150 
151 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
152 &#32;&#32;&#32;&#32;refresh()
153 &#32;&#32;&#32;&#32;{&#32;_M_type&#32;=&#32;symlink_status().type();&#32;}
154 
155 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
156 &#32;&#32;&#32;&#32;refresh(error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>
157 &#32;&#32;&#32;&#32;{&#32;_M_type&#32;=&#32;symlink_status(__ec).type();&#32;}
158 
159 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;observers</emphasis>
160 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;filesystem::path&amp;&#32;<link linkend="_classpath">path</link>()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_path;&#32;}
161 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;filesystem::path&amp;&#32;()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_path;&#32;}
162 
163 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
164 &#32;&#32;&#32;&#32;exists()<emphasis role="keyword">&#32;const</emphasis>
165 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;filesystem::exists(file_status{_M_file_type()});&#32;}
166 
167 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
168 &#32;&#32;&#32;&#32;exists(error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
169 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;filesystem::exists(file_status{_M_file_type(__ec)});&#32;}
170 
171 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
172 &#32;&#32;&#32;&#32;is_block_file()<emphasis role="keyword">&#32;const</emphasis>
173 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_file_type()&#32;==&#32;file_type::block;&#32;}
174 
175 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
176 &#32;&#32;&#32;&#32;is_block_file(error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
177 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_file_type(__ec)&#32;==&#32;file_type::block;&#32;}
178 
179 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
180 &#32;&#32;&#32;&#32;is_character_file()<emphasis role="keyword">&#32;const</emphasis>
181 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_file_type()&#32;==&#32;file_type::character;&#32;}
182 
183 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
184 &#32;&#32;&#32;&#32;is_character_file(error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
185 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_file_type(__ec)&#32;==&#32;file_type::character;&#32;}
186 
187 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
188 &#32;&#32;&#32;&#32;is_directory()<emphasis role="keyword">&#32;const</emphasis>
189 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_file_type()&#32;==&#32;file_type::directory;&#32;}
190 
191 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
192 &#32;&#32;&#32;&#32;is_directory(error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
193 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_file_type(__ec)&#32;==&#32;file_type::directory;&#32;}
194 
195 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
196 &#32;&#32;&#32;&#32;is_fifo()<emphasis role="keyword">&#32;const</emphasis>
197 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_file_type()&#32;==&#32;file_type::fifo;&#32;}
198 
199 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
200 &#32;&#32;&#32;&#32;is_fifo(error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
201 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_file_type(__ec)&#32;==&#32;file_type::fifo;&#32;}
202 
203 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
204 &#32;&#32;&#32;&#32;is_other()<emphasis role="keyword">&#32;const</emphasis>
205 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;filesystem::is_other(file_status{_M_file_type()});&#32;}
206 
207 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
208 &#32;&#32;&#32;&#32;is_other(error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
209 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;filesystem::is_other(file_status{_M_file_type(__ec)});&#32;}
210 
211 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
212 &#32;&#32;&#32;&#32;is_regular_file()<emphasis role="keyword">&#32;const</emphasis>
213 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_file_type()&#32;==&#32;file_type::regular;&#32;}
214 
215 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
216 &#32;&#32;&#32;&#32;is_regular_file(error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
217 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_file_type(__ec)&#32;==&#32;file_type::regular;&#32;}
218 
219 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
220 &#32;&#32;&#32;&#32;is_socket()<emphasis role="keyword">&#32;const</emphasis>
221 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_file_type()&#32;==&#32;file_type::socket;&#32;}
222 
223 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
224 &#32;&#32;&#32;&#32;is_socket(error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
225 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_file_type(__ec)&#32;==&#32;file_type::socket;&#32;}
226 
227 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
228 &#32;&#32;&#32;&#32;is_symlink()<emphasis role="keyword">&#32;const</emphasis>
229 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
230 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_type&#32;!=&#32;file_type::none)
231 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_type&#32;==&#32;file_type::symlink;
232 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;symlink_status().type()&#32;==&#32;file_type::symlink;
233 &#32;&#32;&#32;&#32;}
234 
235 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
236 &#32;&#32;&#32;&#32;is_symlink(error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
237 &#32;&#32;&#32;&#32;{
238 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_type&#32;!=&#32;file_type::none)
239 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_type&#32;==&#32;file_type::symlink;
240 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;symlink_status(__ec).type()&#32;==&#32;file_type::symlink;
241 &#32;&#32;&#32;&#32;}
242 
243 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a2ba5f6c0633401558d277b2c0e4f758d">uintmax_t</link>
244 &#32;&#32;&#32;&#32;file_size()<emphasis role="keyword">&#32;const</emphasis>
245 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;filesystem::file_size(_M_path);&#32;}
246 
247 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a2ba5f6c0633401558d277b2c0e4f758d">uintmax_t</link>
248 &#32;&#32;&#32;&#32;file_size(error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
249 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;filesystem::file_size(_M_path,&#32;__ec);&#32;}
250 
251 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a2ba5f6c0633401558d277b2c0e4f758d">uintmax_t</link>
252 &#32;&#32;&#32;&#32;hard_link_count()<emphasis role="keyword">&#32;const</emphasis>
253 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;filesystem::hard_link_count(_M_path);&#32;}
254 
255 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a2ba5f6c0633401558d277b2c0e4f758d">uintmax_t</link>
256 &#32;&#32;&#32;&#32;hard_link_count(error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
257 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;filesystem::hard_link_count(_M_path,&#32;__ec);&#32;}
258 
259 &#32;&#32;&#32;&#32;file_time_type
260 &#32;&#32;&#32;&#32;last_write_time()<emphasis role="keyword">&#32;const</emphasis>
261 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;filesystem::last_write_time(_M_path);&#32;}
262 
263 
264 &#32;&#32;&#32;&#32;file_time_type
265 &#32;&#32;&#32;&#32;last_write_time(error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
266 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;filesystem::last_write_time(_M_path,&#32;__ec);&#32;}
267 
268 &#32;&#32;&#32;&#32;file_status
269 &#32;&#32;&#32;&#32;status()<emphasis role="keyword">&#32;const</emphasis>
270 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;filesystem::status(_M_path);&#32;}
271 
272 &#32;&#32;&#32;&#32;file_status
273 &#32;&#32;&#32;&#32;status(error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
274 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;filesystem::status(_M_path,&#32;__ec);&#32;}
275 
276 &#32;&#32;&#32;&#32;file_status
277 &#32;&#32;&#32;&#32;symlink_status()<emphasis role="keyword">&#32;const</emphasis>
278 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;filesystem::symlink_status(_M_path);&#32;}
279 
280 &#32;&#32;&#32;&#32;file_status
281 &#32;&#32;&#32;&#32;symlink_status(error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
282 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;filesystem::symlink_status(_M_path,&#32;__ec);&#32;}
283 
284 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
285 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;directory_entry&amp;&#32;__rhs)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
286 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_path&#32;==&#32;__rhs._M_path;&#32;}
287 
288 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
289 &#32;&#32;&#32;&#32;strong_ordering
290 &#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;directory_entry&amp;&#32;__rhs)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
291 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_path&#32;&lt;=&gt;&#32;__rhs._M_path;&#32;}
292 <emphasis role="preprocessor">#else</emphasis>
293 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
294 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;directory_entry&amp;&#32;__rhs)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
295 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_path&#32;!=&#32;__rhs._M_path;&#32;}
296 
297 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
298 &#32;&#32;&#32;&#32;operator&lt;&#32;(<emphasis role="keyword">const</emphasis>&#32;directory_entry&amp;&#32;__rhs)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
299 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_path&#32;&lt;&#32;__rhs._M_path;&#32;}
300 
301 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
302 &#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;directory_entry&amp;&#32;__rhs)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
303 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_path&#32;&lt;=&#32;__rhs._M_path;&#32;}
304 
305 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
306 &#32;&#32;&#32;&#32;operator&gt;&#32;(<emphasis role="keyword">const</emphasis>&#32;directory_entry&amp;&#32;__rhs)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
307 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_path&#32;&gt;&#32;__rhs._M_path;&#32;}
308 
309 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
310 &#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;directory_entry&amp;&#32;__rhs)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
311 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_path&#32;&gt;=&#32;__rhs._M_path;&#32;}
312 <emphasis role="preprocessor">#endif</emphasis>
313 
314 &#32;&#32;<emphasis role="keyword">private</emphasis>:
315 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>_Dir;
316 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>directory_iterator;
317 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>recursive_directory_iterator;
318 
319 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
320 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;3171.&#32;LWG&#32;2989&#32;breaks&#32;directory_entry&#32;stream&#32;insertion</emphasis>
321 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
322 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;
323 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__os,
324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;directory_entry&amp;&#32;__d)
325 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__os&#32;&lt;&lt;&#32;__d.path();&#32;}
326 
327 &#32;&#32;&#32;&#32;directory_entry(<emphasis role="keyword">const</emphasis>&#32;filesystem::path&amp;&#32;__p,&#32;file_type&#32;__t)
328 &#32;&#32;&#32;&#32;:&#32;_M_path(__p),&#32;_M_type(__t)
329 &#32;&#32;&#32;&#32;{&#32;}
330 
331 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Equivalent&#32;to&#32;status().type()&#32;but&#32;uses&#32;cached&#32;value,&#32;if&#32;any.</emphasis>
332 &#32;&#32;&#32;&#32;file_type
333 &#32;&#32;&#32;&#32;_M_file_type()<emphasis role="keyword">&#32;const</emphasis>
334 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
335 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_type&#32;!=&#32;file_type::none&#32;&amp;&amp;&#32;_M_type&#32;!=&#32;file_type::symlink)
336 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_type;
337 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status().type();
338 &#32;&#32;&#32;&#32;}
339 
340 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Equivalent&#32;to&#32;status(__ec).type()&#32;but&#32;uses&#32;cached&#32;value,&#32;if&#32;any.</emphasis>
341 &#32;&#32;&#32;&#32;file_type
342 &#32;&#32;&#32;&#32;_M_file_type(error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
343 &#32;&#32;&#32;&#32;{
344 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_type&#32;!=&#32;file_type::none&#32;&amp;&amp;&#32;_M_type&#32;!=&#32;file_type::symlink)
345 &#32;&#32;&#32;&#32;{
346 &#32;&#32;&#32;&#32;&#32;&#32;__ec.clear();
347 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_type;
348 &#32;&#32;&#32;&#32;}
349 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status(__ec).type();
350 &#32;&#32;&#32;&#32;}
351 
352 &#32;&#32;&#32;&#32;filesystem::path&#32;&#32;&#32;&#32;_M_path;
353 &#32;&#32;&#32;&#32;file_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_type&#32;=&#32;file_type::none;
354 &#32;&#32;};
355 
357 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__directory_iterator_proxy
358 &#32;&#32;{
359 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;directory_entry&amp;&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>()&#32;const&amp;&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_entry;&#32;}
360 
361 &#32;&#32;&#32;&#32;directory_entry&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>()&#32;&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(_M_entry);&#32;}
362 
363 &#32;&#32;<emphasis role="keyword">private</emphasis>:
364 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>directory_iterator;
365 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>recursive_directory_iterator;
366 
367 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
368 &#32;&#32;&#32;&#32;__directory_iterator_proxy(<emphasis role="keyword">const</emphasis>&#32;directory_entry&amp;&#32;__e)&#32;:&#32;_M_entry(__e)&#32;{&#32;}
369 
370 &#32;&#32;&#32;&#32;directory_entry&#32;_M_entry;
371 &#32;&#32;};
372 
374 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>directory_iterator
375 &#32;&#32;{
376 &#32;&#32;<emphasis role="keyword">public</emphasis>:
377 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;directory_entry&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
378 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;difference_type;
379 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;directory_entry*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
380 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;directory_entry&amp;&#32;reference;
381 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;input_iterator_tag&#32;&#32;&#32;&#32;&#32;iterator_category;
382 
383 &#32;&#32;&#32;&#32;directory_iterator()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
384 
385 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
386 &#32;&#32;&#32;&#32;directory_iterator(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p)
387 &#32;&#32;&#32;&#32;:&#32;directory_iterator(__p,&#32;directory_options::none,&#32;nullptr)&#32;{&#32;}
388 
389 &#32;&#32;&#32;&#32;directory_iterator(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;directory_options&#32;__options)
390 &#32;&#32;&#32;&#32;:&#32;directory_iterator(__p,&#32;__options,&#32;nullptr)&#32;{&#32;}
391 
392 &#32;&#32;&#32;&#32;directory_iterator(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)
393 &#32;&#32;&#32;&#32;:&#32;directory_iterator(__p,&#32;directory_options::none,&#32;__ec)&#32;{&#32;}
394 
395 &#32;&#32;&#32;&#32;directory_iterator(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;directory_options&#32;__options,
396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_code&amp;&#32;__ec)
397 &#32;&#32;&#32;&#32;:&#32;directory_iterator(__p,&#32;__options,&#32;&amp;__ec)&#32;{&#32;}
398 
399 &#32;&#32;&#32;&#32;directory_iterator(<emphasis role="keyword">const</emphasis>&#32;directory_iterator&amp;&#32;__rhs)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
400 
401 &#32;&#32;&#32;&#32;directory_iterator(directory_iterator&amp;&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
402 
403 &#32;&#32;&#32;&#32;~directory_iterator()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
404 
405 &#32;&#32;&#32;&#32;directory_iterator&amp;
406 &#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;directory_iterator&amp;&#32;__rhs)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
407 
408 &#32;&#32;&#32;&#32;directory_iterator&amp;
409 &#32;&#32;&#32;&#32;operator=(directory_iterator&amp;&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
410 
411 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;directory_entry&amp;&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>()&#32;const&#32;noexcept;
412 &#32;&#32;&#32;&#32;const&#32;directory_entry*&#32;operator-&gt;()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;**<emphasis role="keyword">this</emphasis>;&#32;}
413 &#32;&#32;&#32;&#32;directory_iterator&amp;&#32;&#32;&#32;&#32;operator++();
414 &#32;&#32;&#32;&#32;directory_iterator&amp;&#32;&#32;&#32;&#32;increment(error_code&amp;&#32;__ec);
415 
416 &#32;&#32;&#32;&#32;__directory_iterator_proxy&#32;operator++(<emphasis role="keywordtype">int</emphasis>)
417 &#32;&#32;&#32;&#32;{
418 &#32;&#32;&#32;&#32;&#32;&#32;__directory_iterator_proxy&#32;__pr{**<emphasis role="keyword">this</emphasis>};
419 &#32;&#32;&#32;&#32;&#32;&#32;++*<emphasis role="keyword">this</emphasis>;
420 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__pr;
421 &#32;&#32;&#32;&#32;}
422 
423 &#32;&#32;<emphasis role="keyword">private</emphasis>:
424 &#32;&#32;&#32;&#32;directory_iterator(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;,&#32;directory_options,&#32;error_code*);
425 
426 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
427 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;directory_iterator&amp;&#32;__lhs,
428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;directory_iterator&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
429 &#32;&#32;&#32;&#32;{
430 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!__rhs._M_dir.owner_before(__lhs._M_dir)
431 &#32;&#32;&#32;&#32;&amp;&amp;&#32;!__lhs._M_dir.owner_before(__rhs._M_dir);
432 &#32;&#32;&#32;&#32;}
433 
434 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
435 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;directory_iterator&amp;&#32;__lhs,
436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;directory_iterator&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
437 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__lhs&#32;==&#32;__rhs);&#32;}
438 
439 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>recursive_directory_iterator;
440 
441 &#32;&#32;&#32;&#32;std::__shared_ptr&lt;_Dir&gt;&#32;_M_dir;
442 &#32;&#32;};
443 
445 
450 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;directory_iterator
451 &#32;&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>(directory_iterator&#32;__iter)&#32;<emphasis role="keyword">noexcept</emphasis>
452 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__iter;&#32;}
453 
455 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;directory_iterator
456 &#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(directory_iterator)&#32;<emphasis role="keyword">noexcept</emphasis>
457 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;directory_iterator();&#32;}
459 
461 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>recursive_directory_iterator
462 &#32;&#32;{
463 &#32;&#32;<emphasis role="keyword">public</emphasis>:
464 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;directory_entry&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
465 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;difference_type;
466 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;directory_entry*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
467 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;directory_entry&amp;&#32;reference;
468 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;input_iterator_tag&#32;&#32;&#32;&#32;&#32;iterator_category;
469 
470 &#32;&#32;&#32;&#32;recursive_directory_iterator()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
471 
472 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
473 &#32;&#32;&#32;&#32;recursive_directory_iterator(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p)
474 &#32;&#32;&#32;&#32;:&#32;recursive_directory_iterator(__p,&#32;directory_options::none,&#32;nullptr)&#32;{&#32;}
475 
476 &#32;&#32;&#32;&#32;recursive_directory_iterator(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;directory_options&#32;__options)
477 &#32;&#32;&#32;&#32;:&#32;recursive_directory_iterator(__p,&#32;__options,&#32;nullptr)&#32;{&#32;}
478 
479 &#32;&#32;&#32;&#32;recursive_directory_iterator(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;directory_options&#32;__options,
480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_code&amp;&#32;__ec)
481 &#32;&#32;&#32;&#32;:&#32;recursive_directory_iterator(__p,&#32;__options,&#32;&amp;__ec)&#32;{&#32;}
482 
483 &#32;&#32;&#32;&#32;recursive_directory_iterator(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)
484 &#32;&#32;&#32;&#32;:&#32;recursive_directory_iterator(__p,&#32;directory_options::none,&#32;&amp;__ec)&#32;{&#32;}
485 
486 &#32;&#32;&#32;&#32;recursive_directory_iterator(
487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;recursive_directory_iterator&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
488 
489 &#32;&#32;&#32;&#32;recursive_directory_iterator(recursive_directory_iterator&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
490 
491 &#32;&#32;&#32;&#32;~recursive_directory_iterator();
492 
493 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;observers</emphasis>
494 &#32;&#32;&#32;&#32;directory_options&#32;&#32;options()&#32;const&#32;noexcept;
495 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1aa8bd8cf1eef34712fdb6ad58b540a2ee">depth</link>()&#32;const&#32;noexcept;
496 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursion_pending()&#32;const&#32;noexcept;
497 
498 &#32;&#32;&#32;&#32;const&#32;directory_entry&amp;&#32;operator*()&#32;const&#32;noexcept;
499 &#32;&#32;&#32;&#32;const&#32;directory_entry*&#32;operator-&gt;()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;**<emphasis role="keyword">this</emphasis>;&#32;}
500 
501 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;modifiers</emphasis>
502 &#32;&#32;&#32;&#32;recursive_directory_iterator&amp;
503 &#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;recursive_directory_iterator&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>;
504 &#32;&#32;&#32;&#32;recursive_directory_iterator&amp;
505 &#32;&#32;&#32;&#32;operator=(recursive_directory_iterator&amp;&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>;
506 
507 &#32;&#32;&#32;&#32;recursive_directory_iterator&amp;&#32;operator++();
508 &#32;&#32;&#32;&#32;recursive_directory_iterator&amp;&#32;increment(error_code&amp;&#32;__ec);
509 
510 &#32;&#32;&#32;&#32;__directory_iterator_proxy&#32;operator++(<emphasis role="keywordtype">int</emphasis>)
511 &#32;&#32;&#32;&#32;{
512 &#32;&#32;&#32;&#32;&#32;&#32;__directory_iterator_proxy&#32;__pr{**<emphasis role="keyword">this</emphasis>};
513 &#32;&#32;&#32;&#32;&#32;&#32;++*<emphasis role="keyword">this</emphasis>;
514 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__pr;
515 &#32;&#32;&#32;&#32;}
516 
517 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1af90aa2f32f9c39ddd552c1d27f65dbaf">pop</link>();
518 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1af90aa2f32f9c39ddd552c1d27f65dbaf">pop</link>(error_code&amp;);
519 
520 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;disable_recursion_pending()&#32;noexcept;
521 
522 &#32;&#32;private:
523 &#32;&#32;&#32;&#32;recursive_directory_iterator(const&#32;<link linkend="_classpath">path</link>&amp;,&#32;directory_options,&#32;error_code*);
524 
525 &#32;&#32;&#32;&#32;friend&#32;<emphasis role="keywordtype">bool</emphasis>
526 &#32;&#32;&#32;&#32;operator==(const&#32;recursive_directory_iterator&amp;&#32;__lhs,
527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;recursive_directory_iterator&amp;&#32;__rhs)&#32;noexcept
528 &#32;&#32;&#32;&#32;{
529 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!__rhs._M_dirs.owner_before(__lhs._M_dirs)
530 &#32;&#32;&#32;&#32;&amp;&amp;&#32;!__lhs._M_dirs.owner_before(__rhs._M_dirs);
531 &#32;&#32;&#32;&#32;}
532 
533 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
534 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;recursive_directory_iterator&amp;&#32;__lhs,
535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;recursive_directory_iterator&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
536 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__lhs&#32;==&#32;__rhs);&#32;}
537 
538 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Dir_stack;
539 &#32;&#32;&#32;&#32;std::__shared_ptr&lt;_Dir_stack&gt;&#32;_M_dirs;
540 
541 &#32;&#32;&#32;&#32;recursive_directory_iterator&amp;
542 &#32;&#32;&#32;&#32;__erase(error_code*&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>);
543 
544 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a2ba5f6c0633401558d277b2c0e4f758d">uintmax_t</link>
545 &#32;&#32;&#32;&#32;filesystem::remove_all(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;,&#32;error_code&amp;);
546 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a2ba5f6c0633401558d277b2c0e4f758d">uintmax_t</link>
547 &#32;&#32;&#32;&#32;filesystem::remove_all(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;);
548 &#32;&#32;};
549 
551 
556 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;recursive_directory_iterator
557 &#32;&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>(recursive_directory_iterator&#32;__iter)&#32;<emphasis role="keyword">noexcept</emphasis>
558 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__iter;&#32;}
559 
561 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;recursive_directory_iterator
562 &#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(recursive_directory_iterator)&#32;<emphasis role="keyword">noexcept</emphasis>
563 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;recursive_directory_iterator();&#32;}
565 
566 _GLIBCXX_END_NAMESPACE_CXX11
567 
569 }&#32;<emphasis role="comment">//&#32;namespace&#32;filesystem</emphasis>
570 
571 &#32;&#32;<emphasis role="comment">//&#32;Use&#32;explicit&#32;instantiations&#32;of&#32;these&#32;types.&#32;Any&#32;inconsistency&#32;in&#32;the</emphasis>
572 &#32;&#32;<emphasis role="comment">//&#32;value&#32;of&#32;__default_lock_policy&#32;between&#32;code&#32;including&#32;this&#32;header&#32;and</emphasis>
573 &#32;&#32;<emphasis role="comment">//&#32;the&#32;library&#32;will&#32;cause&#32;a&#32;linker&#32;error.</emphasis>
574 &#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">template</emphasis>&#32;<emphasis role="keyword">class</emphasis>
575 &#32;&#32;&#32;&#32;__shared_ptr&lt;filesystem::_Dir&gt;;
576 &#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">template</emphasis>&#32;<emphasis role="keyword">class</emphasis>
577 &#32;&#32;&#32;&#32;__shared_ptr&lt;filesystem::recursive_directory_iterator::_Dir_stack&gt;;
578 
579 _GLIBCXX_END_NAMESPACE_VERSION
580 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
581 
582 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
583 
584 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_FS_DIR_H</emphasis>
</programlisting></section>
