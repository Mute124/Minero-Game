digraph "__gnu_parallel::__get_max_threads"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="RL";
  Node1 [id="Node000001",label="__gnu_parallel::__get\l_max_threads",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip=" "];
  Node1 -> Node2 [id="edge63_Node000001_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="__gnu_parallel::__for\l_each_template_random\l_access_ed",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespace____gnu__parallel.html#a12c48efb47ea3e00a7ef666d595ae185",tooltip="Embarrassingly parallel algorithm for random access iterators, using hand-crafted parallelization by ..."];
  Node2 -> Node3 [id="edge64_Node000002_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="__gnu_parallel::__for\l_each_template_random\l_access",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespace____gnu__parallel.html#a0ebbe56e1b059cba72c3d706307a0e50",tooltip="Chose the desired algorithm by evaluating __parallelism_tag."];
  Node3 -> Node4 [id="edge65_Node000003_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="_GLIBCXX_VISIBILITY",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_classes_2lib_2include_2c_09_09_2parallel_2algo_8h.html#a544d74b2d5d0dd2197f5fd6f02691de0",tooltip=" "];
  Node1 -> Node5 [id="edge66_Node000001_Node000005",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="__gnu_parallel::__for\l_each_template_random\l_access_omp_loop",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespace____gnu__parallel.html#a6a5228179a033ede58cd143f66cdf354",tooltip="Embarrassingly parallel algorithm for random access iterators, using an OpenMP for loop."];
  Node5 -> Node3 [id="edge67_Node000005_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node6 [id="edge68_Node000001_Node000006",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="__gnu_parallel::__for\l_each_template_random\l_access_omp_loop_static",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespace____gnu__parallel.html#adfc9f0a346a7f323e8a3ba07b772587d",tooltip="Embarrassingly parallel algorithm for random access iterators, using an OpenMP for loop with static s..."];
  Node1 -> Node7 [id="edge69_Node000001_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="__gnu_parallel::__for\l_each_template_random\l_access_workstealing",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespace____gnu__parallel.html#a14bdca2e9c62cde7dd8478d972f60272",tooltip="Work stealing algorithm for random access iterators."];
  Node7 -> Node3 [id="edge70_Node000007_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node8 [id="edge71_Node000001_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="__gnu_parallel::__parallel\l_nth_element",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespace____gnu__parallel.html#a1567c37a7562eaee17d13ebda1172586",tooltip="Parallel implementation of std::nth_element()."];
  Node8 -> Node9 [id="edge72_Node000008_Node000009",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="__gnu_parallel::__parallel\l_partial_sort",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespace____gnu__parallel.html#abe60c5cc3788e1b1602175af0057d3f8",tooltip="Parallel implementation of std::partial_sort()."];
  Node9 -> Node4 [id="edge73_Node000009_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node8 -> Node4 [id="edge74_Node000008_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node10 [id="edge75_Node000001_Node000010",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="__gnu_parallel::__parallel\l_partial_sum_linear",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespace____gnu__parallel.html#a63017e821c2b4ff9f90c3641bc45f001",tooltip="Parallel partial sum implementation, two-phase approach, no recursion."];
  Node10 -> Node11 [id="edge76_Node000010_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="__gnu_parallel::__parallel\l_partial_sum",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespace____gnu__parallel.html#a0cf4a05b6f849cae06f9fb6098eb0628",tooltip="Parallel partial sum front-__end."];
  Node1 -> Node12 [id="edge77_Node000001_Node000012",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="__gnu_parallel::__parallel\l_random_shuffle",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespace____gnu__parallel.html#a6e78b59cb50c8e14ebf6990016af7342",tooltip="Parallel random public call."];
  Node12 -> Node4 [id="edge78_Node000012_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node13 [id="edge79_Node000001_Node000013",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="__gnu_parallel::__parallel\l_set_operation",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespace____gnu__parallel.html#ad6dc994e2f7245b108300cc529ee7410",tooltip=" "];
  Node13 -> Node14 [id="edge80_Node000013_Node000014",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="__gnu_parallel::__parallel\l_set_difference",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespace____gnu__parallel.html#abb75bc882413dc8cba7fce93c5eaaaf0",tooltip=" "];
  Node14 -> Node4 [id="edge81_Node000014_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node13 -> Node15 [id="edge82_Node000013_Node000015",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="__gnu_parallel::__parallel\l_set_intersection",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespace____gnu__parallel.html#aa2d25a01058104978680d0b5d934b54f",tooltip=" "];
  Node15 -> Node4 [id="edge83_Node000015_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node13 -> Node16 [id="edge84_Node000013_Node000016",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="__gnu_parallel::__parallel\l_set_symmetric_difference",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespace____gnu__parallel.html#a567012d512340614386402b7e3234ec6",tooltip=" "];
  Node16 -> Node4 [id="edge85_Node000016_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node13 -> Node17 [id="edge86_Node000013_Node000017",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="__gnu_parallel::__parallel\l_set_union",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespace____gnu__parallel.html#a56bac3b8498aadcd3ce073422f0b9822",tooltip=" "];
  Node17 -> Node4 [id="edge87_Node000017_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node18 [id="edge88_Node000001_Node000018",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node18 [id="Node000018",label="__gnu_parallel::__parallel\l_unique_copy",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespace____gnu__parallel.html#a15f31ee1c15e180d0d838571cd6c8b24",tooltip="Parallel std::unique_copy(), w/__o explicit equality predicate."];
  Node18 -> Node19 [id="edge89_Node000018_Node000019",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node19 [id="Node000019",label="__gnu_parallel::__parallel\l_unique_copy",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespace____gnu__parallel.html#a3b3bd19508b4e34708a1dc647f5bc131",tooltip="Parallel std::unique_copy(), without explicit equality predicate."];
  Node18 -> Node4 [id="edge90_Node000018_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node20 [id="edge91_Node000001_Node000020",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node20 [id="Node000020",label="__gnu_parallel::__search\l_template",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespace____gnu__parallel.html#af1e654f03e48e80a0c73db7ad88e8a86",tooltip="Parallel std::search."];
  Node20 -> Node4 [id="edge92_Node000020_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node4 [id="edge93_Node000001_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
}
