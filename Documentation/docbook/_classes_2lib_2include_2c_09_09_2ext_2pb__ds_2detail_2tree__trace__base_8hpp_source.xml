<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2tree__trace__base_8hpp_source" xml:lang="en-US">
<title>tree_trace_base.hpp</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/ext/pb_ds/detail/tree_trace_base.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2005-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2004&#32;Ami&#32;Tavory&#32;and&#32;Vladimir&#32;Dreizin,&#32;IBM-HRL.</emphasis>
26 
27 <emphasis role="comment">//&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;sell,&#32;and&#32;distribute&#32;this&#32;software</emphasis>
28 <emphasis role="comment">//&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,&#32;provided&#32;that&#32;the&#32;above&#32;copyright</emphasis>
29 <emphasis role="comment">//&#32;notice&#32;appears&#32;in&#32;all&#32;copies,&#32;and&#32;that&#32;both&#32;that&#32;copyright&#32;notice</emphasis>
30 <emphasis role="comment">//&#32;and&#32;this&#32;permission&#32;notice&#32;appear&#32;in&#32;supporting&#32;documentation.&#32;None</emphasis>
31 <emphasis role="comment">//&#32;of&#32;the&#32;above&#32;authors,&#32;nor&#32;IBM&#32;Haifa&#32;Research&#32;Laboratories,&#32;make&#32;any</emphasis>
32 <emphasis role="comment">//&#32;representation&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
33 <emphasis role="comment">//&#32;purpose.&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied</emphasis>
34 <emphasis role="comment">//&#32;warranty.</emphasis>
35 
41 <emphasis role="preprocessor">#ifndef&#32;PB_DS_TREE_TRACE_BASE_HPP</emphasis>
42 <emphasis role="preprocessor">#define&#32;PB_DS_TREE_TRACE_BASE_HPP</emphasis>
43 
44 <emphasis role="preprocessor">#ifdef&#32;PB_DS_TREE_TRACE</emphasis>
45 
46 <emphasis role="preprocessor">#include&#32;&lt;ext/pb_ds/detail/branch_policy/branch_policy.hpp&gt;</emphasis>
47 <emphasis role="preprocessor">#include&#32;&lt;ext/pb_ds/detail/branch_policy/null_node_metadata.hpp&gt;</emphasis>
48 
49 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__pbds">__gnu_pbds</link>
50 {
51 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>detail
52 &#32;&#32;{
53 <emphasis role="preprocessor">#ifdef&#32;PB_DS_TREE_TRACE</emphasis>
54 
55 <emphasis role="preprocessor">#define&#32;PB_DS_CLASS_T_DEC&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
56 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;typename&#32;Node_CItr,&#32;typename&#32;Node_Itr,&#32;\</emphasis>
57 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;Cmp_Fn,&#32;bool&#32;Node_Based,&#32;typename&#32;_Alloc&gt;</emphasis>
58 
59 <emphasis role="preprocessor">#define&#32;PB_DS_CLASS_C_DEC&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
60 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;tree_trace_base&lt;Node_CItr,&#32;Node_Itr,&#32;Cmp_Fn,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
61 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Node_Based,&#32;_Alloc&gt;</emphasis>
62 
63 <emphasis role="preprocessor">#define&#32;PB_DS_TRACE_BASE&#32;\</emphasis>
64 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;branch_policy&lt;Node_CItr,&#32;Node_Itr,&#32;_Alloc&gt;</emphasis>
65 
67 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Node_CItr,&#32;<emphasis role="keyword">typename</emphasis>&#32;Node_Itr,
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;Cmp_Fn,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Node_Based,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
69 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>tree_trace_base&#32;:&#32;<emphasis role="keyword">private</emphasis>&#32;PB_DS_TRACE_BASE
70 &#32;&#32;&#32;&#32;{
71 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
72 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
73 &#32;&#32;&#32;&#32;&#32;&#32;trace()&#32;<emphasis role="keyword">const</emphasis>;
74 
75 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
76 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;PB_DS_TRACE_BASE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;base_type;
77 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;Node_CItr&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node_const_iterator;
78 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc::size_type&#32;&#32;&#32;&#32;size_type;
79 
80 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
81 &#32;&#32;&#32;&#32;&#32;&#32;trace_node(node_const_iterator,&#32;size_type)&#32;<emphasis role="keyword">const</emphasis>;
82 
83 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
84 &#32;&#32;&#32;&#32;&#32;&#32;empty()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
85 
86 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;node_const_iterator
87 &#32;&#32;&#32;&#32;&#32;&#32;node_begin()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
88 
89 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;node_const_iterator
90 &#32;&#32;&#32;&#32;&#32;&#32;node_end()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
91 
92 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
93 &#32;&#32;&#32;&#32;&#32;&#32;print_node_pointer(Node_CItr,&#32;integral_constant&lt;int,true&gt;);
94 
95 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
96 &#32;&#32;&#32;&#32;&#32;&#32;print_node_pointer(Node_CItr,&#32;integral_constant&lt;int,false&gt;);
97 
98 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Metadata_&gt;
99 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
100 &#32;&#32;&#32;&#32;&#32;&#32;trace_it_metadata(Node_CItr,&#32;type_to_type&lt;Metadata_&gt;);
101 
102 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
103 &#32;&#32;&#32;&#32;&#32;&#32;trace_it_metadata(Node_CItr,&#32;type_to_type&lt;null_type&gt;);
104 &#32;&#32;&#32;&#32;};
105 
106 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
107 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
108 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
109 &#32;&#32;&#32;&#32;trace()<emphasis role="keyword">&#32;const</emphasis>
110 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
111 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(empty())
112 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
113 &#32;&#32;&#32;&#32;&#32;&#32;trace_node(node_begin(),&#32;0);
114 &#32;&#32;&#32;&#32;}
115 
116 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
117 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
118 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
119 &#32;&#32;&#32;&#32;trace_node(node_const_iterator&#32;nd_it,&#32;size_type&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a2424d012241ecec8ab2763eddf543736">level</link>)<emphasis role="keyword">&#32;const</emphasis>
120 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
121 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nd_it.get_r_child()&#32;!=&#32;node_end())
122 &#32;&#32;&#32;&#32;trace_node(nd_it.get_r_child(),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a2424d012241ecec8ab2763eddf543736">level</link>&#32;+&#32;1);
123 
124 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(size_type&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a2424d012241ecec8ab2763eddf543736">level</link>;&#32;++i)
125 &#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>;
126 
127 &#32;&#32;&#32;&#32;&#32;&#32;print_node_pointer(nd_it,&#32;integral_constant&lt;int,Node_Based&gt;());
128 &#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;base_type::extract_key(*(*nd_it));
129 
130 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;type_to_type&lt;typename&#32;node_const_iterator::metadata_type&gt;
131 &#32;&#32;&#32;&#32;m_type_ind_t;
132 
133 &#32;&#32;&#32;&#32;&#32;&#32;trace_it_metadata(nd_it,&#32;m_type_ind_t());
134 
135 &#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;std::endl;
136 
137 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nd_it.get_l_child()&#32;!=&#32;node_end())
138 &#32;&#32;&#32;&#32;trace_node(nd_it.get_l_child(),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a2424d012241ecec8ab2763eddf543736">level</link>&#32;+&#32;1);
139 &#32;&#32;&#32;&#32;}
140 
141 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
142 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Metadata_&gt;
143 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
144 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
145 &#32;&#32;&#32;&#32;trace_it_metadata(Node_CItr&#32;nd_it,&#32;type_to_type&lt;Metadata_&gt;)
146 &#32;&#32;&#32;&#32;{
147 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;ul&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis><emphasis role="keyword">&gt;</emphasis>(nd_it.get_metadata());
148 &#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;(&quot;</emphasis>&#32;&lt;&lt;&#32;ul&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;)&#32;&quot;</emphasis>;
149 &#32;&#32;&#32;&#32;}
150 
151 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
152 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
153 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
154 &#32;&#32;&#32;&#32;trace_it_metadata(Node_CItr,&#32;type_to_type&lt;null_type&gt;)
155 &#32;&#32;&#32;&#32;{&#32;}
156 
157 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
158 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
159 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
160 &#32;&#32;&#32;&#32;print_node_pointer(Node_CItr&#32;nd_it,&#32;integral_constant&lt;int,true&gt;)
161 &#32;&#32;&#32;&#32;{&#32;std::cerr&#32;&lt;&lt;&#32;nd_it.m_p_nd&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;&#32;}
162 
163 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
164 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
165 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
166 &#32;&#32;&#32;&#32;print_node_pointer(Node_CItr&#32;nd_it,&#32;integral_constant&lt;int,false&gt;)
167 &#32;&#32;&#32;&#32;{&#32;std::cerr&#32;&lt;&lt;&#32;*nd_it&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;&#32;}
168 
169 <emphasis role="preprocessor">#undef&#32;PB_DS_CLASS_T_DEC</emphasis>
170 <emphasis role="preprocessor">#undef&#32;PB_DS_CLASS_C_DEC</emphasis>
171 <emphasis role="preprocessor">#undef&#32;PB_DS_TRACE_BASE</emphasis>
172 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;#ifdef&#32;&#32;&#32;&#32;PB_DS_TREE_TRACE</emphasis>
173 
174 &#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
175 }&#32;<emphasis role="comment">//&#32;namespace&#32;__gnu_pbds</emphasis>
176 
177 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;#ifdef&#32;PB_DS_TREE_TRACE</emphasis>
178 
179 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;#ifndef&#32;PB_DS_TREE_TRACE_BASE_HPP</emphasis>
</programlisting></section>
