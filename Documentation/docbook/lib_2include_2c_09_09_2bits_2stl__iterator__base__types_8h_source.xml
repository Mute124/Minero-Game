<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2bits_2stl__iterator__base__types_8h_source" xml:lang="en-US">
<title>stl_iterator_base_types.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/bits/stl_iterator_base_types.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Types&#32;used&#32;in&#32;iterator&#32;implementation&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2001-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">/*</emphasis>
26 <emphasis role="comment">&#32;*</emphasis>
27 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1994</emphasis>
28 <emphasis role="comment">&#32;*&#32;Hewlett-Packard&#32;Company</emphasis>
29 <emphasis role="comment">&#32;*</emphasis>
30 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
31 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
32 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
33 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
34 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Hewlett-Packard&#32;Company&#32;makes&#32;no</emphasis>
35 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
36 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
37 <emphasis role="comment">&#32;*</emphasis>
38 <emphasis role="comment">&#32;*</emphasis>
39 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1996-1998</emphasis>
40 <emphasis role="comment">&#32;*&#32;Silicon&#32;Graphics&#32;Computer&#32;Systems,&#32;Inc.</emphasis>
41 <emphasis role="comment">&#32;*</emphasis>
42 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
43 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
44 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
45 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
46 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Silicon&#32;Graphics&#32;makes&#32;no</emphasis>
47 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
48 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
49 <emphasis role="comment">&#32;*/</emphasis>
50 
59 <emphasis role="preprocessor">#ifndef&#32;_STL_ITERATOR_BASE_TYPES_H</emphasis>
60 <emphasis role="preprocessor">#define&#32;_STL_ITERATOR_BASE_TYPES_H&#32;1</emphasis>
61 
62 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
63 
64 <emphasis role="preprocessor">#include&#32;&lt;bits/c++config.h&gt;</emphasis>
65 
66 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
67 <emphasis role="preprocessor">#&#32;include&#32;&lt;type_traits&gt;</emphasis>&#32;&#32;<emphasis role="comment">//&#32;For&#32;__void_t,&#32;is_convertible</emphasis>
68 <emphasis role="preprocessor">#endif</emphasis>
69 
70 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L&#32;&amp;&amp;&#32;__cpp_concepts&#32;&gt;=&#32;201907L</emphasis>
71 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/iterator_concepts.h&gt;</emphasis>
72 <emphasis role="preprocessor">#endif</emphasis>
73 
74 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
75 {
76 _GLIBCXX_BEGIN_NAMESPACE_VERSION
77 
83 
93 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>input_iterator_tag&#32;{&#32;};
94 
96 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>output_iterator_tag&#32;{&#32;};
97 
99 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>forward_iterator_tag&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;input_iterator_tag&#32;{&#32;};
100 
103 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>bidirectional_iterator_tag&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;forward_iterator_tag&#32;{&#32;};
104 
107 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>random_access_iterator_tag&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;bidirectional_iterator_tag&#32;{&#32;};
108 
109 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
111 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>contiguous_iterator_tag&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;random_access_iterator_tag&#32;{&#32;};
112 <emphasis role="preprocessor">#endif</emphasis>
114 
125 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Category,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Distance&#32;=&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>,
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pointer&#32;=&#32;_Tp*,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Reference&#32;=&#32;_Tp&amp;&gt;
127 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a9fc2e019cf58d1fd9471f83ca143155d">_GLIBCXX17_DEPRECATED</link>&#32;iterator
128 &#32;&#32;&#32;&#32;{
130 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Category&#32;&#32;iterator_category;
132 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
134 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Distance&#32;&#32;difference_type;
136 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Pointer&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
138 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Reference&#32;reference;
139 &#32;&#32;&#32;&#32;};
140 
149 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
150 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>iterator_traits;
151 
152 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
153 &#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
154 &#32;&#32;<emphasis role="comment">//&#32;2408.&#32;SFINAE-friendly&#32;common_type/iterator_traits&#32;is&#32;missing&#32;in&#32;C++14</emphasis>
155 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;__<emphasis role="keywordtype">void</emphasis>_t&lt;&gt;&gt;
156 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__iterator_traits&#32;{&#32;};
157 
158 <emphasis role="preprocessor">#if&#32;!&#32;__cpp_lib_concepts</emphasis>
159 
160 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
161 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__iterator_traits&lt;_Iterator,
162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__void_t&lt;typename&#32;_Iterator::iterator_category,
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_Iterator::value_type,
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_Iterator::difference_type,
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_Iterator::pointer,
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_Iterator::reference&gt;&gt;
167 &#32;&#32;&#32;&#32;{
168 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iterator::iterator_category&#32;iterator_category;
169 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iterator::value_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
170 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iterator::difference_type&#32;&#32;&#32;difference_type;
171 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iterator::pointer&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
172 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iterator::reference&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference;
173 &#32;&#32;&#32;&#32;};
174 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;!&#32;concepts</emphasis>
175 
176 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
177 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>iterator_traits
178 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__iterator_traits&lt;_Iterator&gt;&#32;{&#32;};
179 
180 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;!&#32;C++11</emphasis>
181 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
182 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>iterator_traits
183 &#32;&#32;&#32;&#32;{
184 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iterator::iterator_category&#32;iterator_category;
185 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iterator::value_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
186 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iterator::difference_type&#32;&#32;&#32;difference_type;
187 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iterator::pointer&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
188 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iterator::reference&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference;
189 &#32;&#32;&#32;&#32;};
190 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
191 
192 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
194 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
195 <emphasis role="preprocessor">#if&#32;__cpp_concepts&#32;&gt;=&#32;201907L</emphasis>
196 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;is_object_v&lt;_Tp&gt;
197 <emphasis role="preprocessor">#endif</emphasis>
198 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>iterator_traits&lt;_Tp*&gt;
199 &#32;&#32;&#32;&#32;{
200 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>iterator_concept&#32;&#32;=&#32;contiguous_iterator_tag;
201 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>iterator_category&#32;=&#32;random_access_iterator_tag;
202 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;remove_cv_t&lt;_Tp&gt;;
203 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>difference_type&#32;&#32;&#32;=&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>;
204 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_Tp*;
205 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>reference&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_Tp&amp;;
206 &#32;&#32;&#32;&#32;};
207 <emphasis role="preprocessor">#else</emphasis>
209 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
210 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>iterator_traits&lt;_Tp*&gt;
211 &#32;&#32;&#32;&#32;{
212 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;random_access_iterator_tag&#32;iterator_category;
213 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
214 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;difference_type;
215 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
216 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference;
217 &#32;&#32;&#32;&#32;};
218 
220 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
221 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>iterator_traits&lt;const&#32;_Tp*&gt;
222 &#32;&#32;&#32;&#32;{
223 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;random_access_iterator_tag&#32;iterator_category;
224 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
225 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;difference_type;
226 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
227 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference;
228 &#32;&#32;&#32;&#32;};
229 <emphasis role="preprocessor">#endif</emphasis>
230 
235 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
236 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR
237 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_Iter&gt;::iterator_category
238 &#32;&#32;&#32;&#32;__iterator_category(<emphasis role="keyword">const</emphasis>&#32;_Iter&amp;)
239 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_Iter&gt;::iterator_category();&#32;}
240 
242 
243 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
244 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
245 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__iterator_category_t
246 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_Iter&gt;::iterator_category;
247 
248 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InIter&gt;
249 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_RequireInputIter&#32;=
250 &#32;&#32;&#32;&#32;&#32;&#32;__enable_if_t&lt;is_convertible&lt;__iterator_category_t&lt;_InIter&gt;,
251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input_iterator_tag&gt;<link linkend="_classvalue">::value</link>&gt;;
252 
253 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_It,
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cat&#32;=&#32;__iterator_category_t&lt;_It&gt;&gt;
255 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_random_access_iter
256 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;is_base_of&lt;random_access_iterator_tag,&#32;_Cat&gt;
257 &#32;&#32;&#32;&#32;{
258 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;is_base_of&lt;random_access_iterator_tag,&#32;_Cat&gt;&#32;_Base;
259 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;_Base::value&#32;};
260 &#32;&#32;&#32;&#32;};
261 <emphasis role="preprocessor">#else</emphasis>
262 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_It,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&#32;=&#32;iterator_traits&lt;_It&gt;,
263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cat&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits::iterator_category&gt;
264 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_random_access_iter
265 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;__is_base_of(random_access_iterator_tag,&#32;_Cat)&#32;};&#32;};
266 <emphasis role="preprocessor">#endif</emphasis>
267 
268 _GLIBCXX_END_NAMESPACE_VERSION
269 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
270 
271 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_STL_ITERATOR_BASE_TYPES_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
