<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_path_8h_source" xml:lang="en-US">
<title>path.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/include/toml++/impl/path.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//#&#32;This&#32;file&#32;is&#32;a&#32;part&#32;of&#32;toml++&#32;and&#32;is&#32;subject&#32;to&#32;the&#32;the&#32;terms&#32;of&#32;the&#32;MIT&#32;license.</emphasis>
2 <emphasis role="comment">//#&#32;Copyright&#32;(c)&#32;Mark&#32;Gillard&#32;&lt;mark.gillard@outlook.com.au&gt;</emphasis>
3 <emphasis role="comment">//#&#32;See&#32;https://github.com/marzer/tomlplusplus/blob/master/LICENSE&#32;for&#32;the&#32;full&#32;license&#32;text.</emphasis>
4 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;MIT</emphasis>
5 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
6 
7 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_forward__declarations_8h">forward_declarations.h</link>&quot;</emphasis>
8 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_std__vector_8h">std_vector.h</link>&quot;</emphasis>
9 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_header__start_8h">header_start.h</link>&quot;</emphasis>
10 
11 <link linkend="_path_8h_1a24e5c42f7e94b0b0f3212744874731e6">TOML_NAMESPACE_START</link>
12 {
14 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;<link linkend="_preprocessor_8h_1a3c0b0ffb1299e1086599b0748e8e36a1">TOML_CLOSED_ENUM</link>&#32;path_component_type&#32;:&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>
15 &#32;&#32;&#32;&#32;{
16 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0x1,
17 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_index&#32;=&#32;0x2
18 &#32;&#32;&#32;&#32;};
19 
21 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_group__configuration_1ga3d7aebf91431575688d573f09a17559a">TOML_EXPORTED_CLASS</link>&#32;<link linkend="_classpath__component">path_component</link>
22 &#32;&#32;&#32;&#32;{
24 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>storage_t
25 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
26 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>&#32;=
27 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link>)&#32;&lt;&#32;<emphasis role="keyword">sizeof</emphasis>(std::string)&#32;?&#32;<emphasis role="keyword">sizeof</emphasis>(std::string)&#32;:&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link>));
28 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;align&#32;=
29 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keyword">alignof</emphasis>(<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link>)&#32;&lt;&#32;<emphasis role="keyword">alignof</emphasis>(std::string)&#32;?&#32;<emphasis role="keyword">alignof</emphasis>(std::string)&#32;:&#32;<emphasis role="keyword">alignof</emphasis>(<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link>));
30 
31 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">alignas</emphasis>(align)&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;bytes[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>];
32 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
33 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">alignas</emphasis>(storage_t::align)&#32;<emphasis role="keyword">mutable</emphasis>&#32;storage_t&#32;value_storage_;
34 
35 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;path_component_type&#32;type_;
36 
37 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
38 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga8436c6f378c73f3446a3b6f1e2c5e81c">TOML_EXPORTED_STATIC_FUNCTION</link>
39 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;equal(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath__component">path_component</link>&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath__component">path_component</link>&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>;
40 
41 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Type&gt;
42 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
43 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;Type*&#32;get_as(storage_t&amp;&#32;s)&#32;<emphasis role="keyword">noexcept</emphasis>
44 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
45 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_std__new_8h_1a50ef717d8403c782d1405902faca4b80">TOML_LAUNDER</link>(<emphasis role="keyword">reinterpret_cast&lt;</emphasis>Type*<emphasis role="keyword">&gt;</emphasis>(s.bytes));
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
47 
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;store_key(std::string_view&#32;key,&#32;storage_t&amp;&#32;storage_)
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
50 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::new&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(storage_.bytes))&#32;std::string{&#32;key&#32;};
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
52 
53 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;store_index(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>,&#32;storage_t&amp;&#32;storage_)&#32;<emphasis role="keyword">noexcept</emphasis>
54 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::new&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(storage_.bytes))&#32;std::size_t{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>&#32;};
56 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
57 
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;destroy()&#32;<emphasis role="keyword">noexcept</emphasis>
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(type_&#32;==&#32;path_component_type::key)
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_as&lt;std::string&gt;(value_storage_)-&gt;~basic_string();
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
63 
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;index_ref()&#32;<emphasis role="keyword">noexcept</emphasis>
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(type_&#32;==&#32;path_component_type::array_index);
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*get_as&lt;size_t&gt;(value_storage_);
69 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
70 
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&amp;&#32;key_ref()&#32;<emphasis role="keyword">noexcept</emphasis>
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(type_&#32;==&#32;path_component_type::key);
75 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*get_as&lt;std::string&gt;(value_storage_);
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
78 
79 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath__component_1a04c4df82cb6dc36db572e7a21a1b9819">path_component</link>();
84 
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
87 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath__component_1a9c746d28c254c75d9ffcac9a64045941">path_component</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>)&#32;<emphasis role="keyword">noexcept</emphasis>;
89 
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath__component_1abb61b78ec5f2ac784772ddfd573bc4db">path_component</link>(std::string_view&#32;key);
94 
95 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
96 
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath__component_1abdce177b91acfe1d810096d08bbccaf1">path_component</link>(std::wstring_view&#32;key);
103 
104 <emphasis role="preprocessor">#endif</emphasis>
105 
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath__component_1a3e9d15285e448a235228d328a69afd48">path_component</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;pc);
110 
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath__component_1acaef6dabd2dda07c4370e38df0d9f5a3">path_component</link>(<link linkend="_classpath__component">path_component</link>&amp;&amp;&#32;pc)&#32;<emphasis role="keyword">noexcept</emphasis>;
115 
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;<link linkend="_classpath__component_1a293a74d51a88f91ccda3105427496a2c">operator=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;rhs);
119 
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;<link linkend="_classpath__component_1ae825c9771ffc7cab2a1fa740d532ddd7">operator=</link>(<link linkend="_classpath__component">path_component</link>&amp;&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>;
123 
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;<link linkend="_classpath__component_1a824d910645a82cbc2ccc59e4041c9d66">operator=</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;new_index)&#32;<emphasis role="keyword">noexcept</emphasis>;
127 
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;<link linkend="_classpath__component_1a7311a244dd2fdfd4e76f18388b1e3f6d">operator=</link>(std::string_view&#32;new_key);
131 
132 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
133 
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;<link linkend="_classpath__component_1afb1d65960a8be3c24a36d58dbb102cc5">operator=</link>(std::wstring_view&#32;new_key);
139 
140 <emphasis role="preprocessor">#endif</emphasis>
141 
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath__component_1a579908366c69cec6136aba87aae49e30">~path_component</link>()&#32;noexcept
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;destroy();
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
147 
152 
154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classpath__component_1a89eb0855bfc3761316939641c4b10807">index</link>()&#32;const&#32;noexcept
156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(type_&#32;==&#32;path_component_type::array_index);
158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*get_as&lt;const&#32;size_t&gt;(value_storage_);
159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
160 
162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link>()&#32;const&#32;noexcept
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>();
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
167 
169 
174 
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;<link linkend="_classpath__component_1a43675807336b25e9bc5e7b895ecf0dff">key</link>()&#32;const&#32;noexcept
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(type_&#32;==&#32;path_component_type::key);
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*get_as&lt;const&#32;std::string&gt;(value_storage_);
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
182 
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;key();
188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
189 
191 
193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;path_component_type&#32;<link linkend="_classpath__component_1abdcd4310f75127c787ed709b0bb29873">type</link>()&#32;const&#32;noexcept
195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;type_;
197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
198 
201 
203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classpath__component_1a48922fdad9f293b0292e7af6b6ab2895">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;equal(lhs,&#32;rhs);
207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
208 
210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classpath__component_1a586e016a0434ffdcc6309ba031c29893">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!equal(lhs,&#32;rhs);
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
215 
217 &#32;&#32;&#32;&#32;};
218 
238 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_group__configuration_1ga3d7aebf91431575688d573f09a17559a">TOML_EXPORTED_CLASS</link>&#32;<link linkend="_classpath">path</link>
239 &#32;&#32;&#32;&#32;{
240 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
242 
243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;path_component&gt;&#32;components_;
244 
245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;print_to(std::ostream&amp;)&#32;<emphasis role="keyword">const</emphasis>;
247 
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga8436c6f378c73f3446a3b6f1e2c5e81c">TOML_EXPORTED_STATIC_FUNCTION</link>
250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;equal(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>;
251 
253 
254 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath_1a67032008d5e8b7d05a67eb20688ec27c">path</link>()&#32;noexcept&#32;=&#32;default;
258 
260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;explicit&#32;<link linkend="_classpath">path</link>(<link linkend="_namespacestd">std</link>::string_view);
263 
264 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
265 
269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_classpath_1ac1544ecdc18c0dcddbe2b246e44b33f7">path</link>(std::wstring_view);
272 
273 <emphasis role="preprocessor">#endif</emphasis>
274 
276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath_1af8cb55c04bfdcdfb2aa066cdaacc6ea6">~path</link>()&#32;noexcept&#32;=&#32;default;
277 
279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>(const&#32;<link linkend="_classpath">path</link>&amp;)&#32;=&#32;default;
281 
283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>(<link linkend="_classpath">path</link>&amp;&amp;)&#32;noexcept&#32;=&#32;default;
285 
287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;const&#32;noexcept
289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;components_.<link linkend="_classpath_1a4c5fe971603ea9fd3107ca14e9c60691">size</link>();
291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
292 
294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>()&#32;const&#32;noexcept
296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!components_.empty();
298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
299 
301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classpath_1acab74ce9c17856e48dfaa538d69d5d00">empty</link>()&#32;const&#32;noexcept
303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;components_.empty();
305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
306 
308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;<link linkend="_classpath_1a9cdc930401b6c973dd9c7d91b649f87e">operator[]</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga8c407a8f6fe52a795db35be3f00393f8">TOML_ASSERT</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>());
312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;components_[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>];
313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
314 
316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;<link linkend="_classpath_1a1a6eaebc56ebf6dfcb3bccd110f2f46a">operator[]</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga8c407a8f6fe52a795db35be3f00393f8">TOML_ASSERT</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>());
320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;components_[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>];
321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
322 
325 
327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1ae994d06e46e0f0fa99dd861af3695ded">operator=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
328 
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1a96333863378c9acd152057c39432e5eb">operator=</link>(<link linkend="_classpath">path</link>&amp;&amp;)&#32;noexcept&#32;=&#32;default;
331 
333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;operator=(<link linkend="_namespacestd">std</link>::string_view);
335 
336 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
337 
341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1abaf28303481a19dc0f69f5c4da1b198e">operator=</link>(std::wstring_view);
343 
344 <emphasis role="preprocessor">#endif</emphasis>
345 
347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1ace78199ce6abac6d6476bfb5e09de398">assign</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;p)
349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;p;
351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
352 
354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1ae054c9202b32da787732c0e117453786">assign</link>(<link linkend="_classpath">path</link>&amp;&amp;&#32;p)&#32;<emphasis role="keyword">noexcept</emphasis>
356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(p);
358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
359 
361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1af4e4141b488a07eca915e66025e58f56">assign</link>(std::string_view&#32;str)
363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;str;
365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
366 
367 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
368 
372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1a84913bb098d95f2320e1c0e9799be040">assign</link>(std::wstring_view&#32;str)
374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;str;
376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
377 
378 <emphasis role="preprocessor">#endif</emphasis>
379 
381 
384 
386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1ac4088e42d302fc936f17befaf31b13cd">operator+=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;);
388 
390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1a64495dea1b6bd512bb83b3c09f1179b7">operator+=</link>(<link linkend="_classpath">path</link>&amp;&amp;);
392 
394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1ada94a75d67f40659f162087348d795e6">operator+=</link>(std::string_view);
396 
397 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
398 
402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1a892d2e6a87e16e3fb689b0f31d9ac98b">operator+=</link>(std::wstring_view);
404 
405 <emphasis role="preprocessor">#endif</emphasis>
406 
408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1aa1716177c19817218cc4f98768932487">append</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;p)
410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;+=&#32;p;
412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
413 
415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1ae0bb96cdbc740ecab6c9d6f4992b479d">append</link>(<link linkend="_classpath">path</link>&amp;&amp;&#32;p)
417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;+=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(p);
419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
420 
422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1a36b760eeb46ab56800b6d5d16a156cf7">append</link>(std::string_view&#32;str)
424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;+=&#32;str;
426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
427 
428 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
429 
433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1a75518096712de0092ef2722e923db9e5">append</link>(std::wstring_view&#32;str)
435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;+=&#32;str;
437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
438 
439 <emphasis role="preprocessor">#endif</emphasis>
440 
442 
445 
447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1aa660d65893eeb1a91dada668633bc6fd">prepend</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;);
449 
451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1a41b121bfb894bf24fbba2524efd0e1ac">prepend</link>(<link linkend="_classpath">path</link>&amp;&amp;);
453 
455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1aa15d82e160b9efe3bfa888b4bfb79b81">prepend</link>(std::string_view);
457 
458 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
459 
463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1a8a60a6799ef2f3dfe7d95ace89f9bbc9">prepend</link>(std::wstring_view);
465 
466 <emphasis role="preprocessor">#endif</emphasis>
467 
469 
472 
474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<link linkend="_classpath">path</link>&#32;<link linkend="_classpath_1ad5e5060120620271acb20e8a74f2021f">operator+</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;rhs)
476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;lhs;
478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;+=&#32;rhs;
479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
481 
483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<link linkend="_classpath">path</link>&#32;<link linkend="_classpath_1a48d54d0f3eb9f644a45102ee73f1cff5">operator+</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;lhs,&#32;std::string_view&#32;rhs)
485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;lhs;
487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;+=&#32;rhs;
488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
490 
492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<link linkend="_classpath">path</link>&#32;<link linkend="_classpath_1a512781b98cad27ab8c8a59b110485fee">operator+</link>(std::string_view&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;rhs)
494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;rhs;
496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.<link linkend="_classpath_1aa660d65893eeb1a91dada668633bc6fd">prepend</link>(lhs);
497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
499 
500 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
501 
505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<link linkend="_classpath">path</link>&#32;<link linkend="_classpath_1a991f68ea1c70885c029a64bfbf445d69">operator+</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;lhs,&#32;std::wstring_view&#32;rhs)
507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;lhs;
509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;+=&#32;rhs;
510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
512 
516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<link linkend="_classpath">path</link>&#32;<link linkend="_classpath_1a06a9534d3f26fbcd1b563c5e90b34819">operator+</link>(std::wstring_view&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;rhs)
518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;rhs;
520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.<link linkend="_classpath_1aa660d65893eeb1a91dada668633bc6fd">prepend</link>(lhs);
521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
523 
524 <emphasis role="preprocessor">#endif</emphasis>
525 
527 
530 
532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_classpath_1a20e0b1c8c31800bc968cc1f67bc51556">operator&lt;&lt;</link>(std::ostream&amp;&#32;os,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;rhs)
534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rhs.print_to(os);
536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
538 
540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_classpath_1a57d9527113e1c8a12d75f2a56e7d0ae7">str</link>()&#32;<emphasis role="keyword">const</emphasis>;
543 
545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;std::string()<emphasis role="keyword">&#32;const</emphasis>
548 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;str();
550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
551 
552 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
553 
557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::wstring&#32;<link linkend="_classpath_1a0927a2cb65d7b1ef4305898276b2ca4a">wide_str</link>()&#32;<emphasis role="keyword">const</emphasis>;
560 
564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;std::wstring()<emphasis role="keyword">&#32;const</emphasis>
567 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;wide_str();
569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
570 
571 <emphasis role="preprocessor">#endif</emphasis>
572 
574 
577 
579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classpath_1a1a468cbd804317b18eafbaa91c06baf8">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;equal(lhs,&#32;rhs);
583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
584 
586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classpath_1a1733dc9036ef632af15486e604c4b477">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!equal(lhs,&#32;rhs);
590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
591 
593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classpath_1af5859e43bd1db2967505992d3087a193">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;lhs,&#32;std::string_view&#32;rhs)
596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;==&#32;<link linkend="_classpath">path</link>{&#32;rhs&#32;};
598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
599 
601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classpath_1ab673764882b72f84b82f34f51beeea6f">operator==</link>(std::string_view&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;rhs)
604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;rhs&#32;==&#32;lhs;
606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
607 
609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classpath_1a17adb560b17accb885ba871f492e45f2">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;lhs,&#32;std::string_view&#32;rhs)
612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;!=&#32;<link linkend="_classpath">path</link>{&#32;rhs&#32;};
614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
615 
617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classpath_1a0577876d473c22d81b5e3f6e519af57c">operator!=</link>(std::string_view&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;rhs)
620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;rhs&#32;!=&#32;lhs;
622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
623 
624 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
625 
629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classpath_1adb6aa7f1b9da69aac8853c17568130dd">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;lhs,&#32;std::wstring_view&#32;rhs)
632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;==&#32;<link linkend="_classpath">path</link>{&#32;rhs&#32;};
634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
635 
639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classpath_1aee32429464d115ed5e67d0332ddb8fc6">operator==</link>(std::wstring_view&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;rhs)
642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;rhs&#32;==&#32;lhs;
644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
645 
649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classpath_1ac3a98d28d7b1e94834ac73759a7789ec">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;lhs,&#32;std::wstring_view&#32;rhs)
652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;!=&#32;<link linkend="_classpath">path</link>{&#32;rhs&#32;};
654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
655 
659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classpath_1a5b024dec835f174a68a456a2da2f8d6d">operator!=</link>(std::wstring_view&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;rhs)
662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;rhs&#32;!=&#32;lhs;
664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
665 
666 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
667 
669 
672 
675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classpath_1a43033074faacf0d7081045d7fbc97c32">iterator</link>&#32;=&#32;std::vector&lt;path_component&gt;::iterator;
676 
679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link>&#32;=&#32;std::vector&lt;path_component&gt;::const_iterator;
680 
683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath_1a43033074faacf0d7081045d7fbc97c32">iterator</link>&#32;<link linkend="_classpath_1a82d976c5118224f5c69f543a4f32af38">begin</link>()&#32;noexcept
685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;components_.begin();
687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
688 
691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath_1a43033074faacf0d7081045d7fbc97c32">iterator</link>&#32;<link linkend="_classpath_1a337c19aa6a1a9ea9f505a166038b6e14">end</link>()&#32;noexcept
693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;components_.end();
695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
696 
699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link>&#32;<link linkend="_classpath_1a88f7b0b2f6b6b37e1920ec6f749fb12f">begin</link>()&#32;const&#32;noexcept
701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;components_.begin();
703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
704 
707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link>&#32;<link linkend="_classpath_1ab572386110f4f6c174fc982857e0a9a3">end</link>()&#32;const&#32;noexcept
709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;components_.end();
711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
712 
715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link>&#32;<link linkend="_classpath_1ac30c763b4f07605d526d8e1f9725e38c">cbegin</link>()&#32;const&#32;noexcept
717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;components_.begin();
719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
720 
723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link>&#32;<link linkend="_classpath_1ad2bb6cbe2c811a1d66ea528e5fdf8732">cend</link>()&#32;const&#32;noexcept
725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;components_.end();
727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
728 
730 
733 
735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classpath_1a0aba473e525c6bd36f429c34eb105de3">clear</link>()&#32;noexcept;
737 
739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;truncate(<emphasis role="keywordtype">size_t</emphasis>&#32;n);
741 
743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;truncated(<emphasis role="keywordtype">size_t</emphasis>&#32;n)&#32;const;
746 
748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;parent()&#32;const;
751 
753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;leaf(<emphasis role="keywordtype">size_t</emphasis>&#32;n&#32;=&#32;1)&#32;const;
756 
759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;subpath(<link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>,&#32;<link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>)&#32;const;
762 
765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;subpath(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_namespacelength">length</link>)&#32;const;
768 
770 &#32;&#32;&#32;&#32;};
771 
772 &#32;&#32;&#32;&#32;inline&#32;namespace&#32;<link linkend="_namespaceliterals">literals</link>
773 &#32;&#32;&#32;&#32;{
791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;<emphasis role="keyword">operator</emphasis><emphasis role="stringliteral">&quot;&quot;</emphasis>&#32;_tpath(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;str,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)
794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classpath">path</link>(std::string_view{&#32;str,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;});
796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
797 &#32;&#32;&#32;&#32;}
798 
838 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
839 &#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
840 &#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_at__path_8h_1a8fd45f603d445b914dc921213e6f2dc0">at_path</link>(node&#32;&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;toml::path&amp;&#32;<link linkend="_classpath">path</link>)&#32;<emphasis role="keyword">noexcept</emphasis>;
841 
845 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
846 &#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
847 &#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_at__path_8h_1a8fd45f603d445b914dc921213e6f2dc0">at_path</link>(<emphasis role="keyword">const</emphasis>&#32;node&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;toml::path&amp;&#32;<link linkend="_classpath">path</link>)&#32;<emphasis role="keyword">noexcept</emphasis>;
848 }
849 <link linkend="_path_8h_1afa65688cac47ce86021fef8d739f9fd8">TOML_NAMESPACE_END</link>;
850 
851 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_header__end_8h">header_end.h</link>&quot;</emphasis>
</programlisting></section>
