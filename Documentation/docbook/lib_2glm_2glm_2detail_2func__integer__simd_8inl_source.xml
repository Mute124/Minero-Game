<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2glm_2glm_2detail_2func__integer__simd_8inl_source" xml:lang="en-US">
<title>func_integer_simd.inl</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/glm/glm/detail/func_integer_simd.inl</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="preprocessor">#include&#32;&quot;../simd/integer.h&quot;</emphasis>
2 
3 <emphasis role="preprocessor">#if&#32;GLM_ARCH&#32;&amp;&#32;GLM_ARCH_SSE2_BIT</emphasis>
4 
5 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceglm">glm</link>{
6 <emphasis role="keyword">namespace&#32;</emphasis>detail
7 {
8 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;qualifier&#32;Q&gt;
9 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>compute_bitfieldReverseStep&lt;4,&#32;<link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link>,&#32;Q,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
10 &#32;&#32;&#32;&#32;{
11 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;vec&lt;4,&#32;uint,&#32;Q&gt;&#32;<link linkend="_structglm_1_1detail_1_1compute__bitfield_reverse_step_1af79cf2500bbf26d11bab38e353b84966">call</link>(vec&lt;4,&#32;uint,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>,&#32;<link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link>&#32;Mask,&#32;<link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link>&#32;Shift)
12 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i&#32;<emphasis role="keyword">const</emphasis>&#32;set0&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>.data;
14 
15 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i&#32;<emphasis role="keyword">const</emphasis>&#32;set1&#32;=&#32;_mm_set1_epi32(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(Mask));
16 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i&#32;<emphasis role="keyword">const</emphasis>&#32;and1&#32;=&#32;_mm_and_si128(set0,&#32;set1);
17 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i&#32;<emphasis role="keyword">const</emphasis>&#32;sft1&#32;=&#32;_mm_slli_epi32(and1,&#32;Shift);
18 
19 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i&#32;<emphasis role="keyword">const</emphasis>&#32;set2&#32;=&#32;_mm_andnot_si128(set0,&#32;_mm_set1_epi32(-1));
20 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i&#32;<emphasis role="keyword">const</emphasis>&#32;and2&#32;=&#32;_mm_and_si128(set0,&#32;set2);
21 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i&#32;<emphasis role="keyword">const</emphasis>&#32;sft2&#32;=&#32;_mm_srai_epi32(and2,&#32;Shift);
22 
23 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i&#32;<emphasis role="keyword">const</emphasis>&#32;or0&#32;=&#32;_mm_or_si128(sft1,&#32;sft2);
24 
25 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;or0;
26 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
27 &#32;&#32;&#32;&#32;};
28 
29 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;qualifier&#32;Q&gt;
30 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>compute_bitfieldBitCountStep&lt;4,&#32;<link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link>,&#32;Q,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
31 &#32;&#32;&#32;&#32;{
32 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;vec&lt;4,&#32;uint,&#32;Q&gt;&#32;<link linkend="_structglm_1_1detail_1_1compute__bitfield_bit_count_step_1a28ed640fb4617ba5f9d16704b939faad">call</link>(vec&lt;4,&#32;uint,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>,&#32;<link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link>&#32;Mask,&#32;<link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link>&#32;Shift)
33 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
34 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i&#32;<emphasis role="keyword">const</emphasis>&#32;set0&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>.data;
35 
36 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i&#32;<emphasis role="keyword">const</emphasis>&#32;set1&#32;=&#32;_mm_set1_epi32(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(Mask));
37 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i&#32;<emphasis role="keyword">const</emphasis>&#32;and0&#32;=&#32;_mm_and_si128(set0,&#32;set1);
38 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i&#32;<emphasis role="keyword">const</emphasis>&#32;sft0&#32;=&#32;_mm_slli_epi32(set0,&#32;Shift);
39 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i&#32;<emphasis role="keyword">const</emphasis>&#32;and1&#32;=&#32;_mm_and_si128(sft0,&#32;set1);
40 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i&#32;<emphasis role="keyword">const</emphasis>&#32;add0&#32;=&#32;_mm_add_epi32(and0,&#32;and1);
41 
42 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;add0;
43 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
44 &#32;&#32;&#32;&#32;};
45 }<emphasis role="comment">//namespace&#32;detail</emphasis>
46 
47 <emphasis role="preprocessor">#&#32;&#32;&#32;if&#32;GLM_ARCH&#32;&amp;&#32;GLM_ARCH_AVX_BIT</emphasis>
48 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
49 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespacebit_count">bitCount</link>(<link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
50 &#32;&#32;&#32;&#32;{
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_popcnt_u32(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>);
52 &#32;&#32;&#32;&#32;}
53 
54 <emphasis role="preprocessor">#&#32;&#32;&#32;if(GLM_MODEL&#32;==&#32;GLM_MODEL_64)</emphasis>
55 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
56 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespacebit_count">bitCount</link>(<link linkend="_namespaceglm_1_1detail_1ae110ab7b33b51165e9b99e03abe3947e">detail::uint64</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
57 &#32;&#32;&#32;&#32;{
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(_mm_popcnt_u64(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>));
59 &#32;&#32;&#32;&#32;}
60 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis><emphasis role="comment">//GLM_MODEL</emphasis>
61 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis><emphasis role="comment">//GLM_ARCH</emphasis>
62 
63 }<emphasis role="comment">//namespace&#32;glm</emphasis>
64 
65 <emphasis role="preprocessor">#endif</emphasis><emphasis role="comment">//GLM_ARCH&#32;&amp;&#32;GLM_ARCH_SSE2_BIT</emphasis>
</programlisting></section>
