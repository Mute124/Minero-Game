<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_namespace_catch_1_1_detail" xml:lang="en-US">
<title>Catch::Detail Namespace Reference</title>
<indexterm><primary>Catch::Detail</primary></indexterm>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_catch_1_1_detail_1_1_enum_info">EnumInfo</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_catch_1_1_detail_1_1_is_stream_insertable">IsStreamInsertable</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>template std::string <link linkend="_namespace_catch_1_1_detail_1a84aa484e594118061dd09de134a49cf7">stringify</link> (const <link linkend="_classnode__view">node_view</link>&lt; node &gt; &amp;)</para>
</listitem>
            <listitem><para>template std::string <link linkend="_namespace_catch_1_1_detail_1a6a0b1a147b0268f4e758e54a97e743c8">stringify</link> (const <link linkend="_classnode__view">node_view</link>&lt; const node &gt; &amp;)</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespace_catch_1_1_detail_1ac5d6c510e565ee5bddcc2236194ce29e">rawMemoryToString</link> (const <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> *<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab49790263c78300fbf05719e38246198">object</link>, std::size_t <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>)</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>std::string <link linkend="_namespace_catch_1_1_detail_1a371620ed524abfcae5c3772bf49b563a">rawMemoryToString</link> (const T &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab49790263c78300fbf05719e38246198">object</link>)</para>
</listitem>
            <listitem><para>template&lt;typename E &gt; </para><para>std::string <link linkend="_namespace_catch_1_1_detail_1a242396de537c5176710d680cc9ca6b93">convertUnknownEnumToString</link> (E e)</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>std::enable_if&lt;!std::is_enum&lt; T &gt;<link linkend="_classvalue">::value</link> &amp;&amp;!std::is_base_of&lt; <link linkend="_classstd_1_1exception">std::exception</link>, T &gt;<link linkend="_classvalue">::value</link>, std::string &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> <link linkend="_namespace_catch_1_1_detail_1aa4fbd846029625d08378606ffe9ebc3b">convertUnstreamable</link> (T const &amp;)</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>std::enable_if&lt;!std::is_enum&lt; T &gt;<link linkend="_classvalue">::value</link> &amp;&amp;std::is_base_of&lt; <link linkend="_classstd_1_1exception">std::exception</link>, T &gt;<link linkend="_classvalue">::value</link>, std::string &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> <link linkend="_namespace_catch_1_1_detail_1a669969ab020f5a314d6fa97749a99f56">convertUnstreamable</link> (T const &amp;ex)</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>std::enable_if&lt; std::is_enum&lt; T &gt;<link linkend="_classvalue">::value</link>, std::string &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> <link linkend="_namespace_catch_1_1_detail_1af5310e4687d8c000e7911b91164756e6">convertUnstreamable</link> (T const &amp;<link linkend="_classvalue">value</link>)</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>std::string <link linkend="_namespace_catch_1_1_detail_1af0ad48344ffd3f92f3568465248a9880">stringify</link> (const T &amp;e)</para>
</listitem>
            <listitem><para>template&lt;typename InputIterator , typename Sentinel  = InputIterator&gt; </para><para>std::string <link linkend="_namespace_catch_1_1_detail_1ac954cf158347a76a5b0c3f4fa9a9fa52">rangeToString</link> (InputIterator <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, Sentinel last)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para>const std::string <link linkend="_namespace_catch_1_1_detail_1a466775f4eec29ffef29ab334cd885136">unprintableString</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_namespace_catch_1_1_detail_1a242396de537c5176710d680cc9ca6b93"/><section>
    <title>convertUnknownEnumToString()</title>
<indexterm><primary>convertUnknownEnumToString</primary><secondary>Catch::Detail</secondary></indexterm>
<indexterm><primary>Catch::Detail</primary><secondary>convertUnknownEnumToString</secondary></indexterm>
<computeroutput>template&lt;typename E &gt; </computeroutput><para><computeroutput>std::string Catch::Detail::convertUnknownEnumToString (E e)</computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace_catch_1_1_detail_a242396de537c5176710d680cc9ca6b93_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace_catch_1_1_detail_1aa4fbd846029625d08378606ffe9ebc3b"/><section>
    <title>convertUnstreamable()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>convertUnstreamable</primary><secondary>Catch::Detail</secondary></indexterm>
<indexterm><primary>Catch::Detail</primary><secondary>convertUnstreamable</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>std::enable_if&lt;!std::is_enum&lt; T &gt;<link linkend="_classvalue">::value</link> &amp;&amp;!std::is_base_of&lt; <link linkend="_classstd_1_1exception">std::exception</link>, T &gt;<link linkend="_classvalue">::value</link>, std::string &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> Catch::Detail::convertUnstreamable (T const &amp; )</computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace_catch_1_1_detail_aa4fbd846029625d08378606ffe9ebc3b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace_catch_1_1_detail_1a669969ab020f5a314d6fa97749a99f56"/><section>
    <title>convertUnstreamable()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>convertUnstreamable</primary><secondary>Catch::Detail</secondary></indexterm>
<indexterm><primary>Catch::Detail</primary><secondary>convertUnstreamable</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>std::enable_if&lt;!std::is_enum&lt; T &gt;<link linkend="_classvalue">::value</link> &amp;&amp;std::is_base_of&lt; <link linkend="_classstd_1_1exception">std::exception</link>, T &gt;<link linkend="_classvalue">::value</link>, std::string &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> Catch::Detail::convertUnstreamable (T const &amp; ex)</computeroutput></para></section>
<anchor xml:id="_namespace_catch_1_1_detail_1af5310e4687d8c000e7911b91164756e6"/><section>
    <title>convertUnstreamable()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>convertUnstreamable</primary><secondary>Catch::Detail</secondary></indexterm>
<indexterm><primary>Catch::Detail</primary><secondary>convertUnstreamable</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>std::enable_if&lt; std::is_enum&lt; T &gt;<link linkend="_classvalue">::value</link>, std::string &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> Catch::Detail::convertUnstreamable (T const &amp; value)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace_catch_1_1_detail_af5310e4687d8c000e7911b91164756e6_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace_catch_1_1_detail_1ac954cf158347a76a5b0c3f4fa9a9fa52"/><section>
    <title>rangeToString()</title>
<indexterm><primary>rangeToString</primary><secondary>Catch::Detail</secondary></indexterm>
<indexterm><primary>Catch::Detail</primary><secondary>rangeToString</secondary></indexterm>
<computeroutput>template&lt;typename InputIterator , typename Sentinel  = InputIterator&gt; </computeroutput><para><computeroutput>std::string Catch::Detail::rangeToString (InputIterator first, Sentinel last)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace_catch_1_1_detail_ac954cf158347a76a5b0c3f4fa9a9fa52_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace_catch_1_1_detail_1a371620ed524abfcae5c3772bf49b563a"/><section>
    <title>rawMemoryToString()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>rawMemoryToString</primary><secondary>Catch::Detail</secondary></indexterm>
<indexterm><primary>Catch::Detail</primary><secondary>rawMemoryToString</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>std::string Catch::Detail::rawMemoryToString (const T &amp; object)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace_catch_1_1_detail_a371620ed524abfcae5c3772bf49b563a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace_catch_1_1_detail_1ac5d6c510e565ee5bddcc2236194ce29e"/><section>
    <title>rawMemoryToString()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>rawMemoryToString</primary><secondary>Catch::Detail</secondary></indexterm>
<indexterm><primary>Catch::Detail</primary><secondary>rawMemoryToString</secondary></indexterm>
<para><computeroutput>std::string Catch::Detail::rawMemoryToString (const <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> * object, std::size_t size)</computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace_catch_1_1_detail_ac5d6c510e565ee5bddcc2236194ce29e_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace_catch_1_1_detail_1a6a0b1a147b0268f4e758e54a97e743c8"/><section>
    <title>stringify()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>stringify</primary><secondary>Catch::Detail</secondary></indexterm>
<indexterm><primary>Catch::Detail</primary><secondary>stringify</secondary></indexterm>
<para><computeroutput>template std::string Catch::Detail::stringify (const <link linkend="_classnode__view">node_view</link>&lt; const node &gt; &amp; )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace_catch_1_1_detail_a6a0b1a147b0268f4e758e54a97e743c8_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace_catch_1_1_detail_1a84aa484e594118061dd09de134a49cf7"/><section>
    <title>stringify()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>stringify</primary><secondary>Catch::Detail</secondary></indexterm>
<indexterm><primary>Catch::Detail</primary><secondary>stringify</secondary></indexterm>
<para><computeroutput>template std::string Catch::Detail::stringify (const <link linkend="_classnode__view">node_view</link>&lt; node &gt; &amp; )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace_catch_1_1_detail_a84aa484e594118061dd09de134a49cf7_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace_catch_1_1_detail_a84aa484e594118061dd09de134a49cf7_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace_catch_1_1_detail_1af0ad48344ffd3f92f3568465248a9880"/><section>
    <title>stringify()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>stringify</primary><secondary>Catch::Detail</secondary></indexterm>
<indexterm><primary>Catch::Detail</primary><secondary>stringify</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>std::string Catch::Detail::stringify (const T &amp; e)</computeroutput></para></section>
</section>
<section>
<title>Variable Documentation</title>
<anchor xml:id="_namespace_catch_1_1_detail_1a466775f4eec29ffef29ab334cd885136"/><section>
    <title>unprintableString</title>
<indexterm><primary>unprintableString</primary><secondary>Catch::Detail</secondary></indexterm>
<indexterm><primary>Catch::Detail</primary><secondary>unprintableString</secondary></indexterm>
<para><computeroutput>const std::string Catch::Detail::unprintableString<computeroutput>[extern]</computeroutput></computeroutput></para></section>
</section>
</section>
