<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_parser_8inl" xml:lang="en-US">
<title>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/include/toml++/impl/parser.inl File Reference</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/include/toml++/impl/parser.inl</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &quot;preprocessor.h&quot;<?linebreak?>#include &quot;parser.h&quot;<?linebreak?>#include &quot;std_optional.h&quot;<?linebreak?>#include &quot;source_region.h&quot;<?linebreak?>#include &quot;parse_error.h&quot;<?linebreak?>#include &quot;date_time.h&quot;<?linebreak?>#include &quot;value.h&quot;<?linebreak?>#include &quot;array.h&quot;<?linebreak?>#include &quot;table.h&quot;<?linebreak?>#include &quot;unicode.h&quot;<?linebreak?>#include &lt;istream&gt;<?linebreak?>#include &lt;fstream&gt;<?linebreak?>#include &lt;sstream&gt;<?linebreak?>#include &lt;iomanip&gt;<?linebreak?>#include &quot;header_start.h&quot;<?linebreak?>#include &quot;header_end.h&quot;<?linebreak?></programlisting>Include dependency graph for parser.inl:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="parser_8inl__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
This graph shows which files directly or indirectly include this file:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="parser_8inl__dep__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4">utf8_byte_stream&lt; std::basic_string_view&lt; Char &gt; &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_classutf8__byte__stream_3_01std_1_1istream_01_4">utf8_byte_stream&lt; std::istream &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structutf8__codepoint">utf8_codepoint</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structutf8__reader__interface">utf8_reader_interface</link></para>
</listitem>
            <listitem><para>class <link linkend="_classutf8__reader">utf8_reader&lt; T &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_classutf8__buffered__reader">utf8_buffered_reader</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structparse__integer__traits_3_012_01_4">parse_integer_traits&lt; 2 &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structparse__integer__traits_3_018_01_4">parse_integer_traits&lt; 8 &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structparse__integer__traits_3_0110_01_4">parse_integer_traits&lt; 10 &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structparse__integer__traits_3_0116_01_4">parse_integer_traits&lt; 16 &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structescaped__codepoint">escaped_codepoint</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structerror__builder">error_builder</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structparse__scope">parse_scope</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structparse__key__buffer">parse_key_buffer</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structdepth__counter__scope">depth_counter_scope</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structparsed__string">parsed_string</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structtable__vector__scope">table_vector_scope</link></para>
</listitem>
            <listitem><para>class <link linkend="_classparser">parser</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_parser_8inl_1a7807884a92014643ba5f592263d86bb0">utf8_reader_error</link>(...)&#160;&#160;&#160;err_.emplace(__VA_ARGS__)</para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_parser_8inl_1af8d77e747aff2b90c099d213469c63da">utf8_reader_return_after_error</link>(...)&#160;&#160;&#160;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link> __VA_ARGS__</para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_parser_8inl_1a9786bc2cc56c908d0a845891896f4de8">utf8_reader_error_check</link>(...)</para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_parser_8inl_1a738efc76b091799c4b312ad69c8773bc">TOML_OVERALIGNED</link>&#160;&#160;&#160;<link linkend="__classes_2lib_2include_2stdalign_8h_1ac2d9dab29c1c9e7069f1d6f19fbbd115">alignas</link>(32)</para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_parser_8inl_1ac78113fc8c30dd400d9b8b3a82b0cbb9">utf8_buffered_reader_error_check</link>(...)</para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_parser_8inl_1a20dec4fc2cdf7f5ff2372b1d7827aa7c">TOML_RETURNS_BY_THROWING</link></para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_parser_8inl_1a52caa35291dee569134ba11765e327a2">push_parse_scope_2</link>(scope,  line)&#160;&#160;&#160;<link linkend="_structparse__scope">parse_scope</link> ps_##line(current_scope, scope)</para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_parser_8inl_1add6a523ca8236fc20c97f11e7485a5ec">push_parse_scope_1</link>(scope,  line)&#160;&#160;&#160;<link linkend="_parser_8inl_1a52caa35291dee569134ba11765e327a2">push_parse_scope_2</link>(scope, line)</para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_parser_8inl_1a973cefa1364e120a5b2f2ec712a0fa35">push_parse_scope</link>(scope)&#160;&#160;&#160;<link linkend="_parser_8inl_1add6a523ca8236fc20c97f11e7485a5ec">push_parse_scope_1</link>(scope, __LINE__)</para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_parser_8inl_1aca74b37bcd6c077f58f262e43c8a8aa3">is_eof</link>()&#160;&#160;&#160;!cp</para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_parser_8inl_1ad1ac3723bbf0d358f9df5b44be71c36e">assert_not_eof</link>()&#160;&#160;&#160;<link linkend="_group__configuration_1ga989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(cp != nullptr)</para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_parser_8inl_1a0ff18edcdf96b5ad412eef62409e5c33">return_if_eof</link>(...)</para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_parser_8inl_1a633cbdc0b71907d8e9bce9ecf54ad16d">is_error</link>()&#160;&#160;&#160;!!err</para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_parser_8inl_1a8f28cbcf24d908558aeb26e271823adf">return_after_error</link>(...)&#160;&#160;&#160;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link> __VA_ARGS__</para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_parser_8inl_1a9e2dd718c4dcf40b8a25b3b35402bfc8">assert_not_error</link>()&#160;&#160;&#160;<link linkend="_group__configuration_1ga8c407a8f6fe52a795db35be3f00393f8">TOML_ASSERT</link>(!<link linkend="_parser_8inl_1a633cbdc0b71907d8e9bce9ecf54ad16d">is_error</link>())</para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_parser_8inl_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>(...)</para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_parser_8inl_1a625e0562629966fb24c082b163e593bf">return_if_error_or_eof</link>(...)</para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_parser_8inl_1ac6bf913c1b74fc5a47c2675e99c60155">parse_error_break</link>()&#160;&#160;&#160;static_assert(<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)</para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_parser_8inl_1afebbe731773f450d41f800b13ee3ca8b">set_error_and_return</link>(ret, ...)</para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_parser_8inl_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(...)&#160;&#160;&#160;<link linkend="_parser_8inl_1afebbe731773f450d41f800b13ee3ca8b">set_error_and_return</link>({}, __VA_ARGS__)</para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_parser_8inl_1a367ca88c87eb601c25350b729b5d2699">set_error_and_return_if_eof</link>(...)</para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_parser_8inl_1ad01675bc2d478a261e2ae9898c8d8371">advance_and_return_if_error</link>(...)</para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_parser_8inl_1aa21605e78d9d44ea396e3df072fc99e0">advance_and_return_if_error_or_eof</link>(...)</para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_parser_8inl_1a80b3e84c102efec5a37153b958cb6535">TOML_PARSE_FILE_ERROR</link>(msg,  <link linkend="_classpath">path</link>)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>template&lt;typename Char &gt; </para><para><link linkend="_parser_8inl_1a793492352f386bbddbdd421fc57b4416">utf8_reader</link> (std::basic_string_view&lt; Char &gt;, std::string_view) -&gt; <link linkend="_classutf8__reader">utf8_reader</link>&lt; std::basic_string_view&lt; Char &gt; &gt;</para>
</listitem>
            <listitem><para>template&lt;typename Char &gt; </para><para><link linkend="_parser_8inl_1a20cea9002d83cfb131823c4e83303742">utf8_reader</link> (std::basic_string_view&lt; Char &gt;, <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">std::string</link> &amp;&amp;) -&gt; <link linkend="_classutf8__reader">utf8_reader</link>&lt; std::basic_string_view&lt; Char &gt; &gt;</para>
</listitem>
            <listitem><para>template&lt;typename Char &gt; </para><para><link linkend="_parser_8inl_1ac4f840d9fc9ea1fab6ce0ada8bd188e4">utf8_reader</link> (std::basic_istream&lt; Char &gt; &amp;, std::string_view) -&gt; <link linkend="_classutf8__reader">utf8_reader</link>&lt; std::basic_istream&lt; Char &gt; &gt;</para>
</listitem>
            <listitem><para>template&lt;typename Char &gt; </para><para><link linkend="_parser_8inl_1aab349cc793a42bf80a8946c1225b83d4">utf8_reader</link> (std::basic_istream&lt; Char &gt; &amp;, <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">std::string</link> &amp;&amp;) -&gt; <link linkend="_classutf8__reader">utf8_reader</link>&lt; std::basic_istream&lt; Char &gt; &gt;</para>
</listitem>
            <listitem><para><link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_preprocessor_8h_1a31ffc2d7129c04c13914b97c0a6e8417">TOML_INTERNAL_LINKAGE</link> std::string_view <link linkend="_parser_8inl_1a7962d3d78317c0c0bed873999e311627">to_sv</link> (node_type <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>) noexcept</para>
</listitem>
            <listitem><para><link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_preprocessor_8h_1a31ffc2d7129c04c13914b97c0a6e8417">TOML_INTERNAL_LINKAGE</link> std::string_view <link linkend="_parser_8inl_1ae4f30923e17123fe56d55e8d1b196e9c">to_sv</link> (const <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">std::string</link> &amp;str) noexcept</para>
</listitem>
            <listitem><para><link linkend="_preprocessor_8h_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link> <link linkend="_preprocessor_8h_1a31ffc2d7129c04c13914b97c0a6e8417">TOML_INTERNAL_LINKAGE</link> std::string_view <link linkend="_parser_8inl_1a974c77f6e2d3304feb91d6d33530d470">to_sv</link> (<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>) noexcept</para>
</listitem>
            <listitem><para><link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_preprocessor_8h_1a31ffc2d7129c04c13914b97c0a6e8417">TOML_INTERNAL_LINKAGE</link> std::string_view <link linkend="_parser_8inl_1a5b611afbfbdcea26f392bbaf0bea418f">to_sv</link> (const <link linkend="_structutf8__codepoint">utf8_codepoint</link> &amp;cp) noexcept</para>
</listitem>
            <listitem><para><link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_preprocessor_8h_1a31ffc2d7129c04c13914b97c0a6e8417">TOML_INTERNAL_LINKAGE</link> std::string_view <link linkend="_parser_8inl_1afedf520caed9f1b7ff4f6349ef5f97d6">to_sv</link> (const <link linkend="_structutf8__codepoint">utf8_codepoint</link> *cp) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para><link linkend="_preprocessor_8h_1a31ffc2d7129c04c13914b97c0a6e8417">TOML_INTERNAL_LINKAGE</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_parser_8inl_1af49131ba8c9d457cc429110e01808f9a">concatenate</link> (char *&amp;write_pos, char *const buf_end, const T &amp;arg) noexcept</para>
</listitem>
            <listitem><para><link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link> <link linkend="_classparse__result">parse_result</link> <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> <link linkend="_parser_8inl_1a26db2eceff1a0a58fbad394c04a5c34d">parse</link> (std::string_view doc, std::string_view source_path)</para>

<para>Parses a TOML document from a string view. </para>
</listitem>
            <listitem><para><link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link> <link linkend="_classparse__result">parse_result</link> <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> <link linkend="_parser_8inl_1a7a51328708d4b49b888c396e6cca1b3b">parse</link> (std::string_view doc, <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">std::string</link> &amp;&amp;source_path)</para>

<para>Parses a TOML document from a string view. </para>
</listitem>
            <listitem><para><link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link> <link linkend="_classparse__result">parse_result</link> <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> <link linkend="_parser_8inl_1afbd76c0e0e4a6bffa62c29e4b68ea6ec">parse</link> (std::istream &amp;doc, std::string_view source_path)</para>

<para>Parses a TOML document from a stream. </para>
</listitem>
            <listitem><para><link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link> <link linkend="_classparse__result">parse_result</link> <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> <link linkend="_parser_8inl_1a7daecd4e375556f01d626c178620a9b2">parse</link> (std::istream &amp;doc, <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">std::string</link> &amp;&amp;source_path)</para>

<para>Parses a TOML document from a stream. </para>
</listitem>
            <listitem><para><link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link> <link linkend="_classparse__result">parse_result</link> <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> <link linkend="_parser_8inl_1a46871a821db14b2bcd5b5b9cc4571317">parse_file</link> (std::string_view file_path)</para>

<para>Parses a TOML document from a file. </para>
</listitem>
            <listitem><para><link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link> <link linkend="_classparse__result">parse_result</link> <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> <link linkend="_parser_8inl_1a4ddd9e4285c3c17c54f8996e8acca7f5">parse</link> (std::string_view doc, std::wstring_view source_path)</para>

<para>Parses a TOML document from a string view. </para>
</listitem>
            <listitem><para><link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link> <link linkend="_classparse__result">parse_result</link> <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> <link linkend="_parser_8inl_1ada026e4e0df4c338bc85ff84410d1a29">parse</link> (std::istream &amp;doc, std::wstring_view source_path)</para>

<para>Parses a TOML document from a stream. </para>
</listitem>
            <listitem><para><link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link> <link linkend="_classparse__result">parse_result</link> <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> <link linkend="_parser_8inl_1a58c721819a190afef6e9617049279f54">parse_file</link> (std::wstring_view file_path)</para>

<para>Parses a TOML document from a file. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para><link linkend="_parser_8inl_1a6c2a5b158c0a6d208edd992229d91d78">TOML_DISABLE_WARNINGS</link></para>
</listitem>
            <listitem><para><link linkend="_parser_8inl_1a4e1f9eaceb60becba33cd64d3a85e3ed">TOML_ENABLE_WARNINGS</link></para>
</listitem>
            <listitem><para><link linkend="_parser_8inl_1a3e6bf84af897e30e783c8365170eb278">TOML_ANON_NAMESPACE_START</link></para>
</listitem>
            <listitem><para><link linkend="_preprocessor_8h_1a31ffc2d7129c04c13914b97c0a6e8417">TOML_INTERNAL_LINKAGE</link> constexpr auto <link linkend="_parser_8inl_1adc25ea9f06030e43e1cf5333d39e3237">utf8_byte_order_mark</link> = &quot;\xEF\xBB\xBF&quot;sv</para>
</listitem>
            <listitem><para><link linkend="_parser_8inl_1add7da6ab746a2f655de5a68f56dc763a">TOML_ANON_NAMESPACE_END</link></para>
</listitem>
            <listitem><para><link linkend="_parser_8inl_1af62a64490c99e43956a0f41548262369">TOML_IMPL_NAMESPACE_START</link></para>
</listitem>
            <listitem><para><link linkend="_parser_8inl_1aa188664cce4904ae8832f7fa59f10211">TOML_ABI_NAMESPACE_END</link></para>
</listitem>
            <listitem><para><link linkend="_parser_8inl_1a66ea8ec36b215f9ccb1b419f52b89805">TOML_IMPL_NAMESPACE_END</link></para>
</listitem>
            <listitem><para><link linkend="_parser_8inl_1a24e5c42f7e94b0b0f3212744874731e6">TOML_NAMESPACE_START</link></para>
</listitem>
            <listitem><para><link linkend="_parser_8inl_1afa65688cac47ce86021fef8d739f9fd8">TOML_NAMESPACE_END</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_parser_8inl_1ad01675bc2d478a261e2ae9898c8d8371"/><section>
    <title>advance_and_return_if_error</title>
<indexterm><primary>advance_and_return_if_error</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>advance_and_return_if_error</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> advance_and_return_if_error( ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert_not_eof();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;advance
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return_if_error(__VA_ARGS__);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;while&#32;(<emphasis role="keyword">false</emphasis>)
</programlisting></section>
<anchor xml:id="_parser_8inl_1aa21605e78d9d44ea396e3df072fc99e0"/><section>
    <title>advance_and_return_if_error_or_eof</title>
<indexterm><primary>advance_and_return_if_error_or_eof</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>advance_and_return_if_error_or_eof</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> advance_and_return_if_error_or_eof( ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert_not_eof();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;advance
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return_if_error(__VA_ARGS__);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_error_and_return_if_eof(__VA_ARGS__);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;while&#32;(<emphasis role="keyword">false</emphasis>)
</programlisting></section>
<anchor xml:id="_parser_8inl_1ad1ac3723bbf0d358f9df5b44be71c36e"/><section>
    <title>assert_not_eof</title>
<indexterm><primary>assert_not_eof</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>assert_not_eof</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> assert_not_eof( )&#160;&#160;&#160;<link linkend="_group__configuration_1ga989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(cp != nullptr)</computeroutput></para></section>
<anchor xml:id="_parser_8inl_1a9e2dd718c4dcf40b8a25b3b35402bfc8"/><section>
    <title>assert_not_error</title>
<indexterm><primary>assert_not_error</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>assert_not_error</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> assert_not_error( )&#160;&#160;&#160;<link linkend="_group__configuration_1ga8c407a8f6fe52a795db35be3f00393f8">TOML_ASSERT</link>(!<link linkend="_parser_8inl_1a633cbdc0b71907d8e9bce9ecf54ad16d">is_error</link>())</computeroutput></para></section>
<anchor xml:id="_parser_8inl_1aca74b37bcd6c077f58f262e43c8a8aa3"/><section>
    <title>is_eof</title>
<indexterm><primary>is_eof</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>is_eof</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> is_eof( )&#160;&#160;&#160;!cp</computeroutput></para></section>
<anchor xml:id="_parser_8inl_1a633cbdc0b71907d8e9bce9ecf54ad16d"/><section>
    <title>is_error</title>
<indexterm><primary>is_error</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>is_error</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> is_error( )&#160;&#160;&#160;!!err</computeroutput></para></section>
<anchor xml:id="_parser_8inl_1ac6bf913c1b74fc5a47c2675e99c60155"/><section>
    <title>parse_error_break</title>
<indexterm><primary>parse_error_break</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>parse_error_break</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> parse_error_break( )&#160;&#160;&#160;static_assert(<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)</computeroutput></para></section>
<anchor xml:id="_parser_8inl_1a973cefa1364e120a5b2f2ec712a0fa35"/><section>
    <title>push_parse_scope</title>
<indexterm><primary>push_parse_scope</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>push_parse_scope</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> push_parse_scope( scope)&#160;&#160;&#160;<link linkend="_parser_8inl_1add6a523ca8236fc20c97f11e7485a5ec">push_parse_scope_1</link>(scope, __LINE__)</computeroutput></para></section>
<anchor xml:id="_parser_8inl_1add6a523ca8236fc20c97f11e7485a5ec"/><section>
    <title>push_parse_scope_1</title>
<indexterm><primary>push_parse_scope_1</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>push_parse_scope_1</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> push_parse_scope_1( scope,  line)&#160;&#160;&#160;<link linkend="_parser_8inl_1a52caa35291dee569134ba11765e327a2">push_parse_scope_2</link>(scope, line)</computeroutput></para></section>
<anchor xml:id="_parser_8inl_1a52caa35291dee569134ba11765e327a2"/><section>
    <title>push_parse_scope_2</title>
<indexterm><primary>push_parse_scope_2</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>push_parse_scope_2</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> push_parse_scope_2( scope,  line)&#160;&#160;&#160;<link linkend="_structparse__scope">parse_scope</link> ps_##line(current_scope, scope)</computeroutput></para></section>
<anchor xml:id="_parser_8inl_1a8f28cbcf24d908558aeb26e271823adf"/><section>
    <title>return_after_error</title>
<indexterm><primary>return_after_error</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>return_after_error</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> return_after_error( ...)&#160;&#160;&#160;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link> __VA_ARGS__</computeroutput></para></section>
<anchor xml:id="_parser_8inl_1a0ff18edcdf96b5ad412eef62409e5c33"/><section>
    <title>return_if_eof</title>
<indexterm><primary>return_if_eof</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>return_if_eof</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> return_if_eof( ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_preprocessor_8h_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(<link linkend="_parser_8inl_1aca74b37bcd6c077f58f262e43c8a8aa3">is_eof</link>())&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__VA_ARGS__;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;while&#32;(<emphasis role="keyword">false</emphasis>)
</programlisting></section>
<anchor xml:id="_parser_8inl_1a899e5e612179f84d3b14d6c881dc151b"/><section>
    <title>return_if_error</title>
<indexterm><primary>return_if_error</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>return_if_error</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> return_if_error( ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_preprocessor_8h_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(<link linkend="_parser_8inl_1a633cbdc0b71907d8e9bce9ecf54ad16d">is_error</link>())&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__VA_ARGS__;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;while&#32;(<emphasis role="keyword">false</emphasis>)
</programlisting></section>
<anchor xml:id="_parser_8inl_1a625e0562629966fb24c082b163e593bf"/><section>
    <title>return_if_error_or_eof</title>
<indexterm><primary>return_if_error_or_eof</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>return_if_error_or_eof</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> return_if_error_or_eof( ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_preprocessor_8h_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(<link linkend="_parser_8inl_1aca74b37bcd6c077f58f262e43c8a8aa3">is_eof</link>()&#32;||&#32;<link linkend="_parser_8inl_1a633cbdc0b71907d8e9bce9ecf54ad16d">is_error</link>())&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__VA_ARGS__;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;while&#32;(<emphasis role="keyword">false</emphasis>)
</programlisting></section>
<anchor xml:id="_parser_8inl_1afebbe731773f450d41f800b13ee3ca8b"/><section>
    <title>set_error_and_return</title>
<indexterm><primary>set_error_and_return</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>set_error_and_return</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> set_error_and_return( ret,  ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(!<link linkend="_parser_8inl_1a633cbdc0b71907d8e9bce9ecf54ad16d">is_error</link>())&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_error(__VA_ARGS__);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return_after_error(ret);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;while&#32;(<emphasis role="keyword">false</emphasis>)
</programlisting></section>
<anchor xml:id="_parser_8inl_1a44a192b247bc4686a968814009ecee14"/><section>
    <title>set_error_and_return_default</title>
<indexterm><primary>set_error_and_return_default</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>set_error_and_return_default</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> set_error_and_return_default( ...)&#160;&#160;&#160;<link linkend="_parser_8inl_1afebbe731773f450d41f800b13ee3ca8b">set_error_and_return</link>({}, __VA_ARGS__)</computeroutput></para></section>
<anchor xml:id="_parser_8inl_1a367ca88c87eb601c25350b729b5d2699"/><section>
    <title>set_error_and_return_if_eof</title>
<indexterm><primary>set_error_and_return_if_eof</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>set_error_and_return_if_eof</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> set_error_and_return_if_eof( ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_preprocessor_8h_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(<link linkend="_parser_8inl_1aca74b37bcd6c077f58f262e43c8a8aa3">is_eof</link>())&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_error_and_return(__VA_ARGS__,&#32;<emphasis role="stringliteral">&quot;encountered&#32;end-of-file&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;while&#32;(<emphasis role="keyword">false</emphasis>)
</programlisting></section>
<anchor xml:id="_parser_8inl_1a738efc76b091799c4b312ad69c8773bc"/><section>
    <title>TOML_OVERALIGNED</title>
<indexterm><primary>TOML_OVERALIGNED</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>TOML_OVERALIGNED</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> TOML_OVERALIGNED&#160;&#160;&#160;<link linkend="__classes_2lib_2include_2stdalign_8h_1ac2d9dab29c1c9e7069f1d6f19fbbd115">alignas</link>(32)</computeroutput></para></section>
<anchor xml:id="_parser_8inl_1a80b3e84c102efec5a37153b958cb6535"/><section>
    <title>TOML_PARSE_FILE_ERROR</title>
<indexterm><primary>TOML_PARSE_FILE_ERROR</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>TOML_PARSE_FILE_ERROR</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> TOML_PARSE_FILE_ERROR( msg,  <link linkend="_classpath">path</link>)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classparse__result">parse_result</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parse_error
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;msg,&#32;<link linkend="_structsource__position">source_position</link>{},&#32;std::make_shared&lt;const&#32;std::string&gt;(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="_classpath">path</link>))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_parser_8inl_1a20dec4fc2cdf7f5ff2372b1d7827aa7c"/><section>
    <title>TOML_RETURNS_BY_THROWING</title>
<indexterm><primary>TOML_RETURNS_BY_THROWING</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>TOML_RETURNS_BY_THROWING</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> TOML_RETURNS_BY_THROWING</computeroutput></para></section>
<anchor xml:id="_parser_8inl_1ac78113fc8c30dd400d9b8b3a82b0cbb9"/><section>
    <title>utf8_buffered_reader_error_check</title>
<indexterm><primary>utf8_buffered_reader_error_check</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>utf8_buffered_reader_error_check</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> utf8_buffered_reader_error_check( ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_preprocessor_8h_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(reader_.error())&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__VA_ARGS__;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;while&#32;(<emphasis role="keyword">false</emphasis>)
</programlisting></section>
<anchor xml:id="_parser_8inl_1a7807884a92014643ba5f592263d86bb0"/><section>
    <title>utf8_reader_error</title>
<indexterm><primary>utf8_reader_error</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>utf8_reader_error</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> utf8_reader_error( ...)&#160;&#160;&#160;err_.emplace(__VA_ARGS__)</computeroutput></para></section>
<anchor xml:id="_parser_8inl_1a9786bc2cc56c908d0a845891896f4de8"/><section>
    <title>utf8_reader_error_check</title>
<indexterm><primary>utf8_reader_error_check</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>utf8_reader_error_check</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> utf8_reader_error_check( ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis
&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_preprocessor_8h_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(err_)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__VA_ARGS__;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;while&#32;(<emphasis role="keyword">false</emphasis>)
</programlisting></section>
<anchor xml:id="_parser_8inl_1af8d77e747aff2b90c099d213469c63da"/><section>
    <title>utf8_reader_return_after_error</title>
<indexterm><primary>utf8_reader_return_after_error</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>utf8_reader_return_after_error</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> utf8_reader_return_after_error( ...)&#160;&#160;&#160;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link> __VA_ARGS__</computeroutput></para></section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_parser_8inl_1af49131ba8c9d457cc429110e01808f9a"/><section>
    <title>concatenate()</title>
<indexterm><primary>concatenate</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>concatenate</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_preprocessor_8h_1a31ffc2d7129c04c13914b97c0a6e8417">TOML_INTERNAL_LINKAGE</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> concatenate (char *&amp; write_pos, char *const buf_end, const T &amp; arg)<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="parser_8inl_af49131ba8c9d457cc429110e01808f9a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="parser_8inl_af49131ba8c9d457cc429110e01808f9a_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_parser_8inl_1a7daecd4e375556f01d626c178620a9b2"/><section>
    <title>parse()<computeroutput>[1/6]</computeroutput></title>
<indexterm><primary>parse</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>parse</secondary></indexterm>
<para><computeroutput><link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link> <link linkend="_classparse__result">parse_result</link> <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> parse (std::istream &amp; doc, <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">std::string</link> &amp;&amp; source_path)</computeroutput></para><para>

<para>Parses a TOML document from a stream. </para>
</para>

<para>\detail \cpp std::stringstream ss; ss &lt;&lt; &quot;a = 3&quot;sv;</para>

<para>auto tbl = toml::parse(ss, &quot;foo.toml&quot;); std::cout &lt;&lt; tbl[&quot;a&quot;] &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out 3 \eout</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>doc</entry><entry>
<para>The TOML document to parse. Must be valid UTF-8. </para>
</entry>
                            </row>
                            <row>
<entry>source_path</entry><entry>
<para>The path used to initialize each node&apos;s <computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source()</link>.path</computeroutput>. If you don&apos;t have a path (or you have no intention of using paths in diagnostics) then this parameter can safely be left blank.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>\conditional_return{With exceptions} A toml::table. \conditional_return{Without exceptions} A toml::parse_result. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="parser_8inl_a7daecd4e375556f01d626c178620a9b2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_parser_8inl_1afbd76c0e0e4a6bffa62c29e4b68ea6ec"/><section>
    <title>parse()<computeroutput>[2/6]</computeroutput></title>
<indexterm><primary>parse</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>parse</secondary></indexterm>
<para><computeroutput><link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link> <link linkend="_classparse__result">parse_result</link> <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> parse (std::istream &amp; doc, std::string_view source_path)</computeroutput></para><para>

<para>Parses a TOML document from a stream. </para>
</para>

<para>\detail \cpp std::stringstream ss; ss &lt;&lt; &quot;a = 3&quot;sv;</para>

<para>auto tbl = toml::parse(ss); std::cout &lt;&lt; tbl[&quot;a&quot;] &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out 3 \eout</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>doc</entry><entry>
<para>The TOML document to parse. Must be valid UTF-8. </para>
</entry>
                            </row>
                            <row>
<entry>source_path</entry><entry>
<para>The path used to initialize each node&apos;s <computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source()</link>.path</computeroutput>. If you don&apos;t have a path (or you have no intention of using paths in diagnostics) then this parameter can safely be left blank.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>\conditional_return{With exceptions} A toml::table. \conditional_return{Without exceptions} A toml::parse_result. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_parser_8inl_1ada026e4e0df4c338bc85ff84410d1a29"/><section>
    <title>parse()<computeroutput>[3/6]</computeroutput></title>
<indexterm><primary>parse</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>parse</secondary></indexterm>
<para><computeroutput><link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link> <link linkend="_classparse__result">parse_result</link> <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> parse (std::istream &amp; doc, std::wstring_view source_path)</computeroutput></para><para>

<para>Parses a TOML document from a stream. </para>
</para>

<para>\availability This overload is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled.</para>

<para>\detail \cpp std::stringstream ss; ss &lt;&lt; &quot;a = 3&quot;sv;</para>

<para>auto tbl = toml::parse(ss); std::cout &lt;&lt; tbl[&quot;a&quot;] &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out 3 \eout</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>doc</entry><entry>
<para>The TOML document to parse. Must be valid UTF-8. </para>
</entry>
                            </row>
                            <row>
<entry>source_path</entry><entry>
<para>The path used to initialize each node&apos;s <computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source()</link>.path</computeroutput>. If you don&apos;t have a path (or you have no intention of using paths in diagnostics) then this parameter can safely be left blank.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>\conditional_return{With exceptions} A toml::table. \conditional_return{Without exceptions} A toml::parse_result. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_parser_8inl_1a7a51328708d4b49b888c396e6cca1b3b"/><section>
    <title>parse()<computeroutput>[4/6]</computeroutput></title>
<indexterm><primary>parse</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>parse</secondary></indexterm>
<para><computeroutput><link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link> <link linkend="_classparse__result">parse_result</link> <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> parse (std::string_view doc, <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">std::string</link> &amp;&amp; source_path)</computeroutput></para><para>

<para>Parses a TOML document from a string view. </para>
</para>

<para>\detail \cpp auto tbl = toml::parse(&quot;a = 3&quot;sv, &quot;foo.toml&quot;); std::cout &lt;&lt; tbl[&quot;a&quot;] &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out 3 \eout</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>doc</entry><entry>
<para>The TOML document to parse. Must be valid UTF-8. </para>
</entry>
                            </row>
                            <row>
<entry>source_path</entry><entry>
<para>The path used to initialize each node&apos;s <computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source()</link>.path</computeroutput>. If you don&apos;t have a path (or you have no intention of using paths in diagnostics) then this parameter can safely be left blank.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>\conditional_return{With exceptions} A toml::table. \conditional_return{Without exceptions} A toml::parse_result. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="parser_8inl_a7a51328708d4b49b888c396e6cca1b3b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_parser_8inl_1a26db2eceff1a0a58fbad394c04a5c34d"/><section>
    <title>parse()<computeroutput>[5/6]</computeroutput></title>
<indexterm><primary>parse</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>parse</secondary></indexterm>
<para><computeroutput><link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link> <link linkend="_classparse__result">parse_result</link> <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> parse (std::string_view doc, std::string_view source_path)</computeroutput></para><para>

<para>Parses a TOML document from a string view. </para>
</para>

<para>\detail \cpp auto tbl = toml::parse(&quot;a = 3&quot;sv); std::cout &lt;&lt; tbl[&quot;a&quot;] &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out 3 \eout</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>doc</entry><entry>
<para>The TOML document to parse. Must be valid UTF-8. </para>
</entry>
                            </row>
                            <row>
<entry>source_path</entry><entry>
<para>The path used to initialize each node&apos;s <computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source()</link>.path</computeroutput>. If you don&apos;t have a path (or you have no intention of using paths in diagnostics) then this parameter can safely be left blank.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>\conditional_return{With exceptions} A toml::table. \conditional_return{Without exceptions} A toml::parse_result. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_parser_8inl_1a4ddd9e4285c3c17c54f8996e8acca7f5"/><section>
    <title>parse()<computeroutput>[6/6]</computeroutput></title>
<indexterm><primary>parse</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>parse</secondary></indexterm>
<para><computeroutput><link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link> <link linkend="_classparse__result">parse_result</link> <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> parse (std::string_view doc, std::wstring_view source_path)</computeroutput></para><para>

<para>Parses a TOML document from a string view. </para>
</para>

<para>\availability This overload is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled.</para>

<para>\detail \cpp auto tbl = toml::parse(&quot;a = 3&quot;sv, L&quot;foo.toml&quot;); std::cout &lt;&lt; tbl[&quot;a&quot;] &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out 3 \eout</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>doc</entry><entry>
<para>The TOML document to parse. Must be valid UTF-8. </para>
</entry>
                            </row>
                            <row>
<entry>source_path</entry><entry>
<para>The path used to initialize each node&apos;s <computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source()</link>.path</computeroutput>. If you don&apos;t have a path (or you have no intention of using paths in diagnostics) then this parameter can safely be left blank.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>\conditional_return{With exceptions} A toml::table. \conditional_return{Without exceptions} A toml::parse_result. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_parser_8inl_1a46871a821db14b2bcd5b5b9cc4571317"/><section>
    <title>parse_file()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>parse_file</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>parse_file</secondary></indexterm>
<para><computeroutput><link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link> <link linkend="_classparse__result">parse_result</link> <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> parse_file (std::string_view file_path)</computeroutput></para><para>

<para>Parses a TOML document from a file. </para>
</para>

<para>\detail \cpp toml::parse_result get_foo_toml() { return toml::parse_file(&quot;foo.toml&quot;); } \ecpp</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>file_path</entry><entry>
<para>The TOML document to parse. Must be valid UTF-8.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>\conditional_return{With exceptions} A toml::table. \conditional_return{Without exceptions} A toml::parse_result. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_parser_8inl_1a58c721819a190afef6e9617049279f54"/><section>
    <title>parse_file()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>parse_file</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>parse_file</secondary></indexterm>
<para><computeroutput><link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link> <link linkend="_classparse__result">parse_result</link> <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> parse_file (std::wstring_view file_path)</computeroutput></para><para>

<para>Parses a TOML document from a file. </para>
</para>

<para>\availability This overload is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled.</para>

<para>\detail \cpp toml::parse_result get_foo_toml() { return toml::parse_file(L&quot;foo.toml&quot;); } \ecpp</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>file_path</entry><entry>
<para>The TOML document to parse. Must be valid UTF-8.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>\conditional_return{With exceptions} A toml::table. \conditional_return{Without exceptions} A toml::parse_result. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_parser_8inl_1a974c77f6e2d3304feb91d6d33530d470"/><section>
    <title>to_sv()<computeroutput>[1/5]</computeroutput></title>
<indexterm><primary>to_sv</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>to_sv</secondary></indexterm>
<para><computeroutput><link linkend="_preprocessor_8h_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link> <link linkend="_preprocessor_8h_1a31ffc2d7129c04c13914b97c0a6e8417">TOML_INTERNAL_LINKAGE</link> std::string_view to_sv (<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> val)<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_parser_8inl_1ae4f30923e17123fe56d55e8d1b196e9c"/><section>
    <title>to_sv()<computeroutput>[2/5]</computeroutput></title>
<indexterm><primary>to_sv</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>to_sv</secondary></indexterm>
<para><computeroutput><link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_preprocessor_8h_1a31ffc2d7129c04c13914b97c0a6e8417">TOML_INTERNAL_LINKAGE</link> std::string_view to_sv (const <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">std::string</link> &amp; str)<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_parser_8inl_1a5b611afbfbdcea26f392bbaf0bea418f"/><section>
    <title>to_sv()<computeroutput>[3/5]</computeroutput></title>
<indexterm><primary>to_sv</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>to_sv</secondary></indexterm>
<para><computeroutput><link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_preprocessor_8h_1a31ffc2d7129c04c13914b97c0a6e8417">TOML_INTERNAL_LINKAGE</link> std::string_view to_sv (const <link linkend="_structutf8__codepoint">utf8_codepoint</link> &amp; cp)<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_parser_8inl_1afedf520caed9f1b7ff4f6349ef5f97d6"/><section>
    <title>to_sv()<computeroutput>[4/5]</computeroutput></title>
<indexterm><primary>to_sv</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>to_sv</secondary></indexterm>
<para><computeroutput><link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_preprocessor_8h_1a31ffc2d7129c04c13914b97c0a6e8417">TOML_INTERNAL_LINKAGE</link> std::string_view to_sv (const <link linkend="_structutf8__codepoint">utf8_codepoint</link> * cp)<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="parser_8inl_afedf520caed9f1b7ff4f6349ef5f97d6_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_parser_8inl_1a7962d3d78317c0c0bed873999e311627"/><section>
    <title>to_sv()<computeroutput>[5/5]</computeroutput></title>
<indexterm><primary>to_sv</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>to_sv</secondary></indexterm>
<para><computeroutput><link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_preprocessor_8h_1a31ffc2d7129c04c13914b97c0a6e8417">TOML_INTERNAL_LINKAGE</link> std::string_view to_sv (node_type val)<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="parser_8inl_a7962d3d78317c0c0bed873999e311627_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_parser_8inl_1aab349cc793a42bf80a8946c1225b83d4"/><section>
    <title>utf8_reader()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>utf8_reader</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>utf8_reader</secondary></indexterm>
<computeroutput>template&lt;typename Char &gt; </computeroutput><para><computeroutput><link linkend="_classutf8__reader">utf8_reader</link> (std::basic_istream&lt; Char &gt; &amp; , <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">std::string</link> &amp;&amp; ) -&gt;  <link linkend="_classutf8__reader">utf8_reader</link>&lt; std::basic_istream&lt; Char &gt; &gt;</computeroutput></para></section>
<anchor xml:id="_parser_8inl_1ac4f840d9fc9ea1fab6ce0ada8bd188e4"/><section>
    <title>utf8_reader()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>utf8_reader</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>utf8_reader</secondary></indexterm>
<computeroutput>template&lt;typename Char &gt; </computeroutput><para><computeroutput><link linkend="_classutf8__reader">utf8_reader</link> (std::basic_istream&lt; Char &gt; &amp; , std::string_view ) -&gt;  <link linkend="_classutf8__reader">utf8_reader</link>&lt; std::basic_istream&lt; Char &gt; &gt;</computeroutput></para></section>
<anchor xml:id="_parser_8inl_1a20cea9002d83cfb131823c4e83303742"/><section>
    <title>utf8_reader()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>utf8_reader</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>utf8_reader</secondary></indexterm>
<computeroutput>template&lt;typename Char &gt; </computeroutput><para><computeroutput><link linkend="_classutf8__reader">utf8_reader</link> (std::basic_string_view&lt; Char &gt; , <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">std::string</link> &amp;&amp; ) -&gt;  <link linkend="_classutf8__reader">utf8_reader</link>&lt; std::basic_string_view&lt; Char &gt; &gt;</computeroutput></para></section>
<anchor xml:id="_parser_8inl_1a793492352f386bbddbdd421fc57b4416"/><section>
    <title>utf8_reader()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>utf8_reader</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>utf8_reader</secondary></indexterm>
<computeroutput>template&lt;typename Char &gt; </computeroutput><para><computeroutput><link linkend="_classutf8__reader">utf8_reader</link> (std::basic_string_view&lt; Char &gt; , std::string_view ) -&gt;  <link linkend="_classutf8__reader">utf8_reader</link>&lt; std::basic_string_view&lt; Char &gt; &gt;</computeroutput></para></section>
</section>
<section>
<title>Variable Documentation</title>
<anchor xml:id="_parser_8inl_1aa188664cce4904ae8832f7fa59f10211"/><section>
    <title>TOML_ABI_NAMESPACE_END</title>
<indexterm><primary>TOML_ABI_NAMESPACE_END</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>TOML_ABI_NAMESPACE_END</secondary></indexterm>
<para><computeroutput>TOML_ABI_NAMESPACE_END</computeroutput></para></section>
<anchor xml:id="_parser_8inl_1add7da6ab746a2f655de5a68f56dc763a"/><section>
    <title>TOML_ANON_NAMESPACE_END</title>
<indexterm><primary>TOML_ANON_NAMESPACE_END</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>TOML_ANON_NAMESPACE_END</secondary></indexterm>
<para><computeroutput>TOML_ANON_NAMESPACE_END</computeroutput></para></section>
<anchor xml:id="_parser_8inl_1a3e6bf84af897e30e783c8365170eb278"/><section>
    <title>TOML_ANON_NAMESPACE_START</title>
<indexterm><primary>TOML_ANON_NAMESPACE_START</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>TOML_ANON_NAMESPACE_START</secondary></indexterm>
<para><computeroutput>TOML_ANON_NAMESPACE_START</computeroutput></para><emphasis role="strong">Initial value:</emphasis><programlisting linenumbering="unnumbered">{
&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>utf8_byte_stream
</programlisting></section>
<anchor xml:id="_parser_8inl_1a6c2a5b158c0a6d208edd992229d91d78"/><section>
    <title>TOML_DISABLE_WARNINGS</title>
<indexterm><primary>TOML_DISABLE_WARNINGS</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>TOML_DISABLE_WARNINGS</secondary></indexterm>
<para><computeroutput>TOML_DISABLE_WARNINGS</computeroutput></para></section>
<anchor xml:id="_parser_8inl_1a4e1f9eaceb60becba33cd64d3a85e3ed"/><section>
    <title>TOML_ENABLE_WARNINGS</title>
<indexterm><primary>TOML_ENABLE_WARNINGS</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>TOML_ENABLE_WARNINGS</secondary></indexterm>
<para><computeroutput>TOML_ENABLE_WARNINGS</computeroutput></para></section>
<anchor xml:id="_parser_8inl_1a66ea8ec36b215f9ccb1b419f52b89805"/><section>
    <title>TOML_IMPL_NAMESPACE_END</title>
<indexterm><primary>TOML_IMPL_NAMESPACE_END</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>TOML_IMPL_NAMESPACE_END</secondary></indexterm>
<para><computeroutput>TOML_IMPL_NAMESPACE_END</computeroutput></para></section>
<anchor xml:id="_parser_8inl_1af62a64490c99e43956a0f41548262369"/><section>
    <title>TOML_IMPL_NAMESPACE_START</title>
<indexterm><primary>TOML_IMPL_NAMESPACE_START</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>TOML_IMPL_NAMESPACE_START</secondary></indexterm>
<para><computeroutput>TOML_IMPL_NAMESPACE_START</computeroutput></para><emphasis role="strong">Initial value:</emphasis><programlisting linenumbering="unnumbered">{
&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a1b2e27349c9e21d35138a1196acd6d58">TOML_ABI_NAMESPACE_BOOL</link>(<link linkend="_group__configuration_1ga93097ecd88ca4bca393f60a78bda643b">TOML_EXCEPTIONS</link>,&#32;impl_ex,&#32;impl_noex)
</programlisting></section>
<anchor xml:id="_parser_8inl_1afa65688cac47ce86021fef8d739f9fd8"/><section>
    <title>TOML_NAMESPACE_END</title>
<indexterm><primary>TOML_NAMESPACE_END</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>TOML_NAMESPACE_END</secondary></indexterm>
<para><computeroutput>TOML_NAMESPACE_END</computeroutput></para></section>
<anchor xml:id="_parser_8inl_1a24e5c42f7e94b0b0f3212744874731e6"/><section>
    <title>TOML_NAMESPACE_START</title>
<indexterm><primary>TOML_NAMESPACE_START</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>TOML_NAMESPACE_START</secondary></indexterm>
<para><computeroutput>TOML_NAMESPACE_START</computeroutput></para><emphasis role="strong">Initial value:</emphasis><programlisting linenumbering="unnumbered">{
&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a1b2e27349c9e21d35138a1196acd6d58">TOML_ABI_NAMESPACE_BOOL</link>(<link linkend="_group__configuration_1ga93097ecd88ca4bca393f60a78bda643b">TOML_EXCEPTIONS</link>,&#32;ex,&#32;noex)
</programlisting></section>
<anchor xml:id="_parser_8inl_1adc25ea9f06030e43e1cf5333d39e3237"/><section>
    <title>utf8_byte_order_mark</title>
<indexterm><primary>utf8_byte_order_mark</primary><secondary>parser.inl</secondary></indexterm>
<indexterm><primary>parser.inl</primary><secondary>utf8_byte_order_mark</secondary></indexterm>
<para><computeroutput><link linkend="_preprocessor_8h_1a31ffc2d7129c04c13914b97c0a6e8417">TOML_INTERNAL_LINKAGE</link> constexpr auto utf8_byte_order_mark = &quot;\xEF\xBB\xBF&quot;sv<computeroutput>[constexpr]</computeroutput></computeroutput></para></section>
</section>
</section>
