<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2split__join__fn__imps_8hpp_source" xml:lang="en-US">
<title>split_join_fn_imps.hpp</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/ext/pb_ds/detail/binary_heap_/split_join_fn_imps.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2005-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2004&#32;Ami&#32;Tavory&#32;and&#32;Vladimir&#32;Dreizin,&#32;IBM-HRL.</emphasis>
26 
27 <emphasis role="comment">//&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;sell,&#32;and&#32;distribute&#32;this&#32;software</emphasis>
28 <emphasis role="comment">//&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,&#32;provided&#32;that&#32;the&#32;above&#32;copyright</emphasis>
29 <emphasis role="comment">//&#32;notice&#32;appears&#32;in&#32;all&#32;copies,&#32;and&#32;that&#32;both&#32;that&#32;copyright&#32;notice</emphasis>
30 <emphasis role="comment">//&#32;and&#32;this&#32;permission&#32;notice&#32;appear&#32;in&#32;supporting&#32;documentation.&#32;None</emphasis>
31 <emphasis role="comment">//&#32;of&#32;the&#32;above&#32;authors,&#32;nor&#32;IBM&#32;Haifa&#32;Research&#32;Laboratories,&#32;make&#32;any</emphasis>
32 <emphasis role="comment">//&#32;representation&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
33 <emphasis role="comment">//&#32;purpose.&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied</emphasis>
34 <emphasis role="comment">//&#32;warranty.</emphasis>
35 
41 <emphasis role="preprocessor">#ifdef&#32;PB_DS_CLASS_C_DEC</emphasis>
42 
43 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
44 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Pred&gt;
45 <emphasis role="keywordtype">void</emphasis>
46 PB_DS_CLASS_C_DEC::
47 split(Pred&#32;pred,&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>&amp;&#32;other)
48 {
49 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
50 
51 &#32;&#32;typedef
52 &#32;&#32;&#32;&#32;typename&#32;entry_pred&lt;value_type,&#32;Pred,&#32;_Alloc,&#32;simple_value&gt;::<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>
53 &#32;&#32;&#32;&#32;pred_t;
54 
55 &#32;&#32;const&#32;size_type&#32;left&#32;=&#32;partition(pred_t(pred));
56 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(m_size&#32;&gt;=&#32;left);
57 
58 &#32;&#32;const&#32;size_type&#32;ersd&#32;=&#32;m_size&#32;-&#32;left;
59 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(m_size&#32;&gt;=&#32;ersd);
60 
61 &#32;&#32;const&#32;size_type&#32;new_size&#32;=&#32;resize_policy::get_new_size_for_arbitrary(left);
62 &#32;&#32;const&#32;size_type&#32;other_actual_size&#32;=&#32;other.get_new_size_for_arbitrary(ersd);
63 
64 &#32;&#32;entry_pointer&#32;a_entries&#32;=&#32;0;
65 &#32;&#32;entry_pointer&#32;a_other_entries&#32;=&#32;0;
66 
67 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
68 &#32;&#32;&#32;&#32;{
69 &#32;&#32;&#32;&#32;&#32;&#32;a_entries&#32;=&#32;s_entry_allocator.allocate(new_size);
70 &#32;&#32;&#32;&#32;&#32;&#32;a_other_entries&#32;=&#32;s_entry_allocator.allocate(other_actual_size);
71 &#32;&#32;&#32;&#32;}
72 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
73 &#32;&#32;&#32;&#32;{
74 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(a_entries&#32;!=&#32;0)
75 &#32;&#32;&#32;&#32;s_entry_allocator.deallocate(a_entries,&#32;new_size);
76 
77 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(a_other_entries&#32;!=&#32;0)
78 &#32;&#32;&#32;&#32;s_entry_allocator.deallocate(a_other_entries,&#32;other_actual_size);
79 
80 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
81 &#32;&#32;&#32;&#32;};
82 
83 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(size_type&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;other.m_size;&#32;++i)
84 &#32;&#32;&#32;&#32;erase_at(other.m_a_entries,&#32;i,&#32;s_no_throw_copies_ind);
85 
86 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(new_size&#32;&gt;=&#32;left);
87 &#32;&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link>(m_a_entries,&#32;m_a_entries&#32;+&#32;left,&#32;a_entries);
88 &#32;&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link>(m_a_entries&#32;+&#32;left,&#32;m_a_entries&#32;+&#32;m_size,&#32;a_other_entries);
89 
90 &#32;&#32;s_entry_allocator.deallocate(m_a_entries,&#32;m_actual_size);
91 &#32;&#32;s_entry_allocator.deallocate(other.m_a_entries,&#32;other.m_actual_size);
92 
93 &#32;&#32;m_actual_size&#32;=&#32;new_size;
94 &#32;&#32;other.m_actual_size&#32;=&#32;other_actual_size;
95 
96 &#32;&#32;m_size&#32;=&#32;left;
97 &#32;&#32;other.m_size&#32;=&#32;ersd;
98 
99 &#32;&#32;m_a_entries&#32;=&#32;a_entries;
100 &#32;&#32;other.m_a_entries&#32;=&#32;a_other_entries;
101 
102 &#32;&#32;make_heap();
103 &#32;&#32;other.make_heap();
104 
105 &#32;&#32;resize_policy::notify_arbitrary(m_actual_size);
106 &#32;&#32;other.notify_arbitrary(other.m_actual_size);
107 
108 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
109 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>(other)
110 }
111 
112 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
113 inline&#32;<emphasis role="keywordtype">void</emphasis>
114 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::
115 join(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>&amp;&#32;other)
116 {
117 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
118 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>(other)
119 
120 &#32;&#32;const&#32;size_type&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;=&#32;m_size&#32;+&#32;other.m_size;
121 &#32;&#32;const&#32;size_type&#32;new_size&#32;=&#32;resize_policy::get_new_size_for_arbitrary(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>);
122 
123 &#32;&#32;entry_pointer&#32;a_entries&#32;=&#32;0;
124 &#32;&#32;entry_pointer&#32;a_other_entries&#32;=&#32;0;
125 
126 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
127 &#32;&#32;&#32;&#32;{
128 &#32;&#32;&#32;&#32;&#32;&#32;a_entries&#32;=&#32;s_entry_allocator.allocate(new_size);
129 &#32;&#32;&#32;&#32;&#32;&#32;a_other_entries&#32;=&#32;s_entry_allocator.allocate(resize_policy::min_size);
130 &#32;&#32;&#32;&#32;}
131 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
132 &#32;&#32;&#32;&#32;{
133 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(a_entries&#32;!=&#32;0)
134 &#32;&#32;&#32;&#32;s_entry_allocator.deallocate(a_entries,&#32;new_size);
135 
136 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(a_other_entries&#32;!=&#32;0)
137 &#32;&#32;&#32;&#32;s_entry_allocator.deallocate(a_other_entries,&#32;resize_policy::min_size);
138 
139 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
140 &#32;&#32;&#32;&#32;}
141 
142 &#32;&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link>(m_a_entries,&#32;m_a_entries&#32;+&#32;m_size,&#32;a_entries);
143 &#32;&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link>(other.m_a_entries,&#32;other.m_a_entries&#32;+&#32;other.m_size,
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;a_entries&#32;+&#32;m_size);
145 
146 &#32;&#32;s_entry_allocator.deallocate(m_a_entries,&#32;m_actual_size);
147 &#32;&#32;m_a_entries&#32;=&#32;a_entries;
148 &#32;&#32;m_size&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>;
149 &#32;&#32;m_actual_size&#32;=&#32;new_size;
150 &#32;&#32;resize_policy::notify_arbitrary(new_size);
151 &#32;&#32;make_heap();
152 
153 &#32;&#32;s_entry_allocator.deallocate(other.m_a_entries,&#32;other.m_actual_size);
154 &#32;&#32;other.m_a_entries&#32;=&#32;a_other_entries;
155 &#32;&#32;other.m_size&#32;=&#32;0;
156 &#32;&#32;other.m_actual_size&#32;=&#32;resize_policy::min_size;
157 &#32;&#32;other.notify_arbitrary(resize_policy::min_size);
158 &#32;&#32;other.make_heap();
159 &#32;&#32;
160 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
161 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>(other)
162 }
163 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
