<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2parallel_2find_8h_source" xml:lang="en-US">
<title>find.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/parallel/find.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2007-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
31 <emphasis role="comment">//&#32;Written&#32;by&#32;Felix&#32;Putze&#32;and&#32;Johannes&#32;Singler.</emphasis>
32 
33 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_PARALLEL_FIND_H</emphasis>
34 <emphasis role="preprocessor">#define&#32;_GLIBCXX_PARALLEL_FIND_H&#32;1</emphasis>
35 
36 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_algobase.h&gt;</emphasis>
37 
38 <emphasis role="preprocessor">#include&#32;&lt;parallel/features.h&gt;</emphasis>
39 <emphasis role="preprocessor">#include&#32;&lt;parallel/parallel.h&gt;</emphasis>
40 <emphasis role="preprocessor">#include&#32;&lt;parallel/compatibility.h&gt;</emphasis>
41 <emphasis role="preprocessor">#include&#32;&lt;parallel/equally_split.h&gt;</emphasis>
42 
43 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__parallel">__gnu_parallel</link>
44 {
55 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter1,
56 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_RAIter2,
57 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred,
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Selector&gt;
59 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::pair&lt;_RAIter1,&#32;_RAIter2&gt;
60 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1af4b3d28761a76e60f6836a50f5cebb7d">__find_template</link>(_RAIter1&#32;__begin1,&#32;_RAIter1&#32;__end1,
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter2&#32;__begin2,&#32;_Pred&#32;__pred,&#32;_Selector&#32;__selector)
62 &#32;&#32;&#32;&#32;{
63 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="_struct____gnu__parallel_1_1___settings_1adf11d9453707f1145a9e221ab7630bd3">_Settings::get</link>().find_algorithm)
64 &#32;&#32;&#32;&#32;{
65 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252a3af1a4fe251c64cc86ce6e743038fb4b">GROWING_BLOCKS</link>:
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1af4b3d28761a76e60f6836a50f5cebb7d">__find_template</link>(__begin1,&#32;__end1,&#32;__begin2,&#32;__pred,
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__selector,&#32;growing_blocks_tag());
68 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252a3d258f4654b997f6bc74d45134fd40e7">CONSTANT_SIZE_BLOCKS</link>:
69 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1af4b3d28761a76e60f6836a50f5cebb7d">__find_template</link>(__begin1,&#32;__end1,&#32;__begin2,&#32;__pred,
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__selector,&#32;constant_size_blocks_tag());
71 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252ad9c04a6356ca7106b988d7bfb2f44a5f">EQUAL_SPLIT</link>:
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1af4b3d28761a76e60f6836a50f5cebb7d">__find_template</link>(__begin1,&#32;__end1,&#32;__begin2,&#32;__pred,
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__selector,&#32;equal_split_tag());
74 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
75 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2base_8h_1acff27ea0a7532ee31661cbd47a95d3de">_GLIBCXX_PARALLEL_ASSERT</link>(<emphasis role="keyword">false</emphasis>);
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(__begin1,&#32;__begin2);
77 &#32;&#32;&#32;&#32;}
78 &#32;&#32;&#32;&#32;}
79 
80 <emphasis role="preprocessor">#if&#32;_GLIBCXX_FIND_EQUAL_SPLIT</emphasis>
81 
92 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter1,
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_RAIter2,
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred,
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Selector&gt;
96 &#32;&#32;&#32;&#32;std::pair&lt;_RAIter1,&#32;_RAIter2&gt;
97 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1af4b3d28761a76e60f6836a50f5cebb7d">__find_template</link>(_RAIter1&#32;__begin1,&#32;_RAIter1&#32;__end1,
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter2&#32;__begin2,&#32;_Pred&#32;__pred,
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Selector&#32;__selector,&#32;equal_split_tag)
100 &#32;&#32;&#32;&#32;{
101 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2compiletime__settings_8h_1a77fb93c9cecec331ccee755972695128">_GLIBCXX_CALL</link>(__end1&#32;-&#32;__begin1)
102 
103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::iterator_traits&lt;_RAIter1&gt;&#32;_TraitsType;
104 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::difference_type&#32;_DifferenceType;
105 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::value_type&#32;_ValueType;
106 
107 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__length&#32;=&#32;__end1&#32;-&#32;__begin1;
108 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__result&#32;=&#32;__length;
109 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType*&#32;__borders;
110 
111 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structomp__lock__t">omp_lock_t</link>&#32;__result_lock;
112 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2omp_8h_1ab9c82451011f65593480a3ba21ce46bc">omp_init_lock</link>(&amp;__result_lock);
113 
114 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__num_threads&#32;=&#32;<link linkend="_namespace____gnu__parallel_1aa72851b809c2b314bc09580c3512f281">__get_max_threads</link>();
115 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;parallel&#32;num_threads(__num_threads)</emphasis>
116 &#32;&#32;&#32;&#32;&#32;&#32;{
117 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;single</emphasis>
118 &#32;&#32;&#32;&#32;{
119 &#32;&#32;&#32;&#32;&#32;&#32;__num_threads&#32;=&#32;<link linkend="__classes_2lib_2include_2omp_8h_1ac42ead04531fd33507e3d3a6f648b200">omp_get_num_threads</link>();
120 &#32;&#32;&#32;&#32;&#32;&#32;__borders&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;_DifferenceType[__num_threads&#32;+&#32;1];
121 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1ac799255921e70b0378d145924d673f9c">__equally_split</link>(__length,&#32;__num_threads,&#32;__borders);
122 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//single</emphasis>
123 
124 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__iam&#32;=&#32;<link linkend="__classes_2lib_2include_2omp_8h_1aa03cf372d8266eef024262a68d304e1b">omp_get_thread_num</link>();
125 &#32;&#32;&#32;&#32;_DifferenceType&#32;__start&#32;=&#32;__borders[__iam],
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__stop&#32;=&#32;__borders[__iam&#32;+&#32;1];
127 
128 &#32;&#32;&#32;&#32;_RAIter1&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;=&#32;__begin1&#32;+&#32;__start;
129 &#32;&#32;&#32;&#32;_RAIter2&#32;__i2&#32;=&#32;__begin2&#32;+&#32;__start;
130 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_DifferenceType&#32;__pos&#32;=&#32;__start;&#32;__pos&#32;&lt;&#32;__stop;&#32;++__pos)
131 &#32;&#32;&#32;&#32;&#32;&#32;{
132 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;flush(__result)</emphasis>
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Result&#32;has&#32;been&#32;set&#32;to&#32;something&#32;lower.</emphasis>
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__result&#32;&lt;&#32;__pos)
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
136 
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__selector(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__i2,&#32;__pred))
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2omp_8h_1ab7a6a9f1b9a08b10b4770c3389cb8d3c">omp_set_lock</link>(&amp;__result_lock);
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pos&#32;&lt;&#32;__result)
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result&#32;=&#32;__pos;
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2omp_8h_1a9671d710d3c51bdc9940b81a3e23dcf6">omp_unset_lock</link>(&amp;__result_lock);
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>;
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__i2;
147 &#32;&#32;&#32;&#32;&#32;&#32;}
148 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//parallel</emphasis>
149 
150 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2omp_8h_1a7f838ad86590395c9aaaf7eabf80665e">omp_destroy_lock</link>(&amp;__result_lock);
151 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;__borders;
152 
153 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::pair&lt;_RAIter1,&#32;_RAIter2&gt;(__begin1&#32;+&#32;__result,
154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin2&#32;+&#32;__result);
155 &#32;&#32;&#32;&#32;}
156 
157 <emphasis role="preprocessor">#endif</emphasis>
158 
159 <emphasis role="preprocessor">#if&#32;_GLIBCXX_FIND_GROWING_BLOCKS</emphasis>
160 
180 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter1,
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_RAIter2,
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred,
183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Selector&gt;
184 &#32;&#32;&#32;&#32;std::pair&lt;_RAIter1,&#32;_RAIter2&gt;
185 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1af4b3d28761a76e60f6836a50f5cebb7d">__find_template</link>(_RAIter1&#32;__begin1,&#32;_RAIter1&#32;__end1,
186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter2&#32;__begin2,&#32;_Pred&#32;__pred,&#32;_Selector&#32;__selector,
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;growing_blocks_tag)
188 &#32;&#32;&#32;&#32;{
189 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2compiletime__settings_8h_1a77fb93c9cecec331ccee755972695128">_GLIBCXX_CALL</link>(__end1&#32;-&#32;__begin1)
190 
191 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::iterator_traits&lt;_RAIter1&gt;&#32;_TraitsType;
192 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::difference_type&#32;_DifferenceType;
193 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::value_type&#32;_ValueType;
194 
195 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Settings&amp;&#32;__s&#32;=&#32;<link linkend="_struct____gnu__parallel_1_1___settings_1adf11d9453707f1145a9e221ab7630bd3">_Settings::get</link>();
196 
197 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__length&#32;=&#32;__end1&#32;-&#32;__begin1;
198 
199 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType
200 &#32;&#32;&#32;&#32;__sequential_search_size&#32;=&#32;std::min&lt;_DifferenceType&gt;
201 &#32;&#32;&#32;&#32;(__length,&#32;__s.find_sequential_search_size);
202 
203 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Try&#32;it&#32;sequentially&#32;first.</emphasis>
204 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;_RAIter1,&#32;_RAIter2&gt;
205 &#32;&#32;&#32;&#32;__find_seq_result&#32;=&#32;__selector._M_sequential_algorithm
206 &#32;&#32;&#32;&#32;(__begin1,&#32;__begin1&#32;+&#32;__sequential_search_size,
207 &#32;&#32;&#32;&#32;&#32;__begin2,&#32;__pred);
208 
209 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__find_seq_result.first&#32;!=&#32;(__begin1&#32;+&#32;__sequential_search_size))
210 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__find_seq_result;
211 
212 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Index&#32;of&#32;beginning&#32;of&#32;next&#32;free&#32;block&#32;(after&#32;sequential&#32;find).</emphasis>
213 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__next_block_start&#32;=&#32;__sequential_search_size;
214 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__result&#32;=&#32;__length;
215 
216 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structomp__lock__t">omp_lock_t</link>&#32;__result_lock;
217 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2omp_8h_1ab9c82451011f65593480a3ba21ce46bc">omp_init_lock</link>(&amp;__result_lock);
218 
219 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;__scale_factor&#32;=&#32;__s.find_scale_factor;
220 
221 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__num_threads&#32;=&#32;<link linkend="_namespace____gnu__parallel_1aa72851b809c2b314bc09580c3512f281">__get_max_threads</link>();
222 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;parallel&#32;shared(__result)&#32;num_threads(__num_threads)</emphasis>
223 &#32;&#32;&#32;&#32;&#32;&#32;{
224 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;single</emphasis>
225 &#32;&#32;&#32;&#32;__num_threads&#32;=&#32;<link linkend="__classes_2lib_2include_2omp_8h_1ac42ead04531fd33507e3d3a6f648b200">omp_get_num_threads</link>();
226 
227 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Not&#32;within&#32;first&#32;__k&#32;elements&#32;-&gt;&#32;start&#32;parallel.</emphasis>
228 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__iam&#32;=&#32;<link linkend="__classes_2lib_2include_2omp_8h_1aa03cf372d8266eef024262a68d304e1b">omp_get_thread_num</link>();
229 
230 &#32;&#32;&#32;&#32;_DifferenceType&#32;__block_size&#32;=
231 &#32;&#32;&#32;&#32;&#32;&#32;std::max&lt;_DifferenceType&gt;(1,&#32;__scale_factor&#32;*&#32;__next_block_start);
232 &#32;&#32;&#32;&#32;_DifferenceType&#32;__start&#32;=&#32;__fetch_and_add&lt;_DifferenceType&gt;
233 &#32;&#32;&#32;&#32;&#32;&#32;(&amp;__next_block_start,&#32;__block_size);
234 
235 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;new&#32;block,&#32;update&#32;pointer&#32;to&#32;next&#32;block.</emphasis>
236 &#32;&#32;&#32;&#32;_DifferenceType&#32;__stop&#32;=
237 &#32;&#32;&#32;&#32;&#32;&#32;std::min&lt;_DifferenceType&gt;(__length,&#32;__start&#32;+&#32;__block_size);
238 
239 &#32;&#32;&#32;&#32;std::pair&lt;_RAIter1,&#32;_RAIter2&gt;&#32;__local_result;
240 
241 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__start&#32;&lt;&#32;__length)
242 &#32;&#32;&#32;&#32;&#32;&#32;{
243 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;flush(__result)</emphasis>
244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;new&#32;value&#32;of&#32;result.</emphasis>
245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__result&#32;&lt;&#32;__start)
246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;chance&#32;to&#32;find&#32;first&#32;element.</emphasis>
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
250 
251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__local_result&#32;=&#32;__selector._M_sequential_algorithm
252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__begin1&#32;+&#32;__start,&#32;__begin1&#32;+&#32;__stop,
253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin2&#32;+&#32;__start,&#32;__pred);
254 
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__local_result.first&#32;!=&#32;(__begin1&#32;+&#32;__stop))
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2omp_8h_1ab7a6a9f1b9a08b10b4770c3389cb8d3c">omp_set_lock</link>(&amp;__result_lock);
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((__local_result.first&#32;-&#32;__begin1)&#32;&lt;&#32;__result)
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result&#32;=&#32;__local_result.first&#32;-&#32;__begin1;
261 
262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Result&#32;cannot&#32;be&#32;in&#32;future&#32;blocks,&#32;stop&#32;algorithm.</emphasis>
263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__fetch_and_add&lt;_DifferenceType&gt;(&amp;__next_block_start,
264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__length);
265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2omp_8h_1a9671d710d3c51bdc9940b81a3e23dcf6">omp_unset_lock</link>(&amp;__result_lock);
267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
268 
269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__block_size&#32;=
270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::max&lt;_DifferenceType&gt;(1,&#32;__scale_factor&#32;*&#32;__next_block_start);
271 
272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;new&#32;block,&#32;update&#32;pointer&#32;to&#32;next&#32;block.</emphasis>
273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__start&#32;=&#32;__fetch_and_add&lt;_DifferenceType&gt;(&amp;__next_block_start,
274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__block_size);
275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__stop&#32;=
276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::min&lt;_DifferenceType&gt;(__length,&#32;__start&#32;+&#32;__block_size);
277 &#32;&#32;&#32;&#32;&#32;&#32;}
278 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//parallel</emphasis>
279 
280 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2omp_8h_1a7f838ad86590395c9aaaf7eabf80665e">omp_destroy_lock</link>(&amp;__result_lock);
281 
282 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Return&#32;iterator&#32;on&#32;found&#32;element.</emphasis>
283 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>
284 &#32;&#32;&#32;&#32;std::pair&lt;_RAIter1,&#32;_RAIter2&gt;(__begin1&#32;+&#32;__result,
285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin2&#32;+&#32;__result);
286 &#32;&#32;&#32;&#32;}
287 
288 <emphasis role="preprocessor">#endif</emphasis>
289 
290 <emphasis role="preprocessor">#if&#32;_GLIBCXX_FIND_CONSTANT_SIZE_BLOCKS</emphasis>
291 
310 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter1,
311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_RAIter2,
312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred,
313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Selector&gt;
314 &#32;&#32;&#32;&#32;std::pair&lt;_RAIter1,&#32;_RAIter2&gt;
315 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1af4b3d28761a76e60f6836a50f5cebb7d">__find_template</link>(_RAIter1&#32;__begin1,&#32;_RAIter1&#32;__end1,
316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter2&#32;__begin2,&#32;_Pred&#32;__pred,&#32;_Selector&#32;__selector,
317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;constant_size_blocks_tag)
318 &#32;&#32;&#32;&#32;{
319 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2compiletime__settings_8h_1a77fb93c9cecec331ccee755972695128">_GLIBCXX_CALL</link>(__end1&#32;-&#32;__begin1)
320 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::iterator_traits&lt;_RAIter1&gt;&#32;_TraitsType;
321 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::difference_type&#32;_DifferenceType;
322 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::value_type&#32;_ValueType;
323 
324 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Settings&amp;&#32;__s&#32;=&#32;<link linkend="_struct____gnu__parallel_1_1___settings_1adf11d9453707f1145a9e221ab7630bd3">_Settings::get</link>();
325 
326 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__length&#32;=&#32;__end1&#32;-&#32;__begin1;
327 
328 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__sequential_search_size&#32;=&#32;std::min&lt;_DifferenceType&gt;
329 &#32;&#32;&#32;&#32;(__length,&#32;__s.find_sequential_search_size);
330 
331 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Try&#32;it&#32;sequentially&#32;first.</emphasis>
332 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;_RAIter1,&#32;_RAIter2&gt;
333 &#32;&#32;&#32;&#32;__find_seq_result&#32;=&#32;__selector._M_sequential_algorithm
334 &#32;&#32;&#32;&#32;(__begin1,&#32;__begin1&#32;+&#32;__sequential_search_size,&#32;__begin2,&#32;__pred);
335 
336 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__find_seq_result.first&#32;!=&#32;(__begin1&#32;+&#32;__sequential_search_size))
337 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__find_seq_result;
338 
339 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__result&#32;=&#32;__length;
340 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structomp__lock__t">omp_lock_t</link>&#32;__result_lock;
341 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2omp_8h_1ab9c82451011f65593480a3ba21ce46bc">omp_init_lock</link>(&amp;__result_lock);
342 
343 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Not&#32;within&#32;first&#32;__sequential_search_size&#32;elements&#32;-&gt;&#32;start&#32;parallel.</emphasis>
344 
345 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__num_threads&#32;=&#32;<link linkend="_namespace____gnu__parallel_1aa72851b809c2b314bc09580c3512f281">__get_max_threads</link>();
346 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;parallel&#32;shared(__result)&#32;num_threads(__num_threads)</emphasis>
347 &#32;&#32;&#32;&#32;&#32;&#32;{
348 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;single</emphasis>
349 &#32;&#32;&#32;&#32;__num_threads&#32;=&#32;<link linkend="__classes_2lib_2include_2omp_8h_1ac42ead04531fd33507e3d3a6f648b200">omp_get_num_threads</link>();
350 
351 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__iam&#32;=&#32;<link linkend="__classes_2lib_2include_2omp_8h_1aa03cf372d8266eef024262a68d304e1b">omp_get_thread_num</link>();
352 &#32;&#32;&#32;&#32;_DifferenceType&#32;__block_size&#32;=&#32;__s.find_initial_block_size;
353 
354 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;First&#32;element&#32;of&#32;thread&apos;s&#32;current&#32;iteration.</emphasis>
355 &#32;&#32;&#32;&#32;_DifferenceType&#32;__iteration_start&#32;=&#32;__sequential_search_size;
356 
357 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Where&#32;to&#32;work&#32;(initialization).</emphasis>
358 &#32;&#32;&#32;&#32;_DifferenceType&#32;__start&#32;=&#32;__iteration_start&#32;+&#32;__iam&#32;*&#32;__block_size;
359 &#32;&#32;&#32;&#32;_DifferenceType&#32;__stop&#32;=&#32;std::min&lt;_DifferenceType&gt;(__length,
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__start
361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;__block_size);
362 
363 &#32;&#32;&#32;&#32;std::pair&lt;_RAIter1,&#32;_RAIter2&gt;&#32;__local_result;
364 
365 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__start&#32;&lt;&#32;__length)
366 &#32;&#32;&#32;&#32;&#32;&#32;{
367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;new&#32;value&#32;of&#32;result.</emphasis>
368 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;flush(__result)</emphasis>
369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;chance&#32;to&#32;find&#32;first&#32;element.</emphasis>
370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__result&#32;&lt;&#32;__start)
371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
372 
373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__local_result&#32;=&#32;__selector._M_sequential_algorithm
374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__begin1&#32;+&#32;__start,&#32;__begin1&#32;+&#32;__stop,
375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin2&#32;+&#32;__start,&#32;__pred);
376 
377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__local_result.first&#32;!=&#32;(__begin1&#32;+&#32;__stop))
378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2omp_8h_1ab7a6a9f1b9a08b10b4770c3389cb8d3c">omp_set_lock</link>(&amp;__result_lock);
380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((__local_result.first&#32;-&#32;__begin1)&#32;&lt;&#32;__result)
381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result&#32;=&#32;__local_result.first&#32;-&#32;__begin1;
382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2omp_8h_1a9671d710d3c51bdc9940b81a3e23dcf6">omp_unset_lock</link>(&amp;__result_lock);
383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Will&#32;not&#32;find&#32;better&#32;value&#32;in&#32;its&#32;interval.</emphasis>
384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
386 
387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__iteration_start&#32;+=&#32;__num_threads&#32;*&#32;__block_size;
388 
389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Where&#32;to&#32;work.</emphasis>
390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__start&#32;=&#32;__iteration_start&#32;+&#32;__iam&#32;*&#32;__block_size;
391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__stop&#32;=&#32;std::min&lt;_DifferenceType&gt;(__length,
392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__start&#32;+&#32;__block_size);
393 &#32;&#32;&#32;&#32;&#32;&#32;}
394 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//parallel</emphasis>
395 
396 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2omp_8h_1a7f838ad86590395c9aaaf7eabf80665e">omp_destroy_lock</link>(&amp;__result_lock);
397 
398 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Return&#32;iterator&#32;on&#32;found&#32;element.</emphasis>
399 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::pair&lt;_RAIter1,&#32;_RAIter2&gt;(__begin1&#32;+&#32;__result,
400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin2&#32;+&#32;__result);
401 &#32;&#32;&#32;&#32;}
402 <emphasis role="preprocessor">#endif</emphasis>
403 }&#32;<emphasis role="comment">//&#32;end&#32;namespace</emphasis>
404 
405 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_GLIBCXX_PARALLEL_FIND_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
