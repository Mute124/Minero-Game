<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2parallel_2set__operations_8h_source" xml:lang="en-US">
<title>set_operations.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/parallel/set_operations.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2007-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
32 <emphasis role="comment">//&#32;Written&#32;by&#32;Marius&#32;Elvert&#32;and&#32;Felix&#32;Bondarenko.</emphasis>
33 
34 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_PARALLEL_SET_OPERATIONS_H</emphasis>
35 <emphasis role="preprocessor">#define&#32;_GLIBCXX_PARALLEL_SET_OPERATIONS_H&#32;1</emphasis>
36 
37 <emphasis role="preprocessor">#include&#32;&lt;omp.h&gt;</emphasis>
38 
39 <emphasis role="preprocessor">#include&#32;&lt;parallel/settings.h&gt;</emphasis>
40 <emphasis role="preprocessor">#include&#32;&lt;parallel/multiseq_selection.h&gt;</emphasis>
41 
42 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__parallel">__gnu_parallel</link>
43 {
44 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator&gt;
45 &#32;&#32;&#32;&#32;_OutputIterator
46 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a8e1bf93702dd25b08e296ef85aa0c7fb">__copy_tail</link>(std::pair&lt;_IIter,&#32;_IIter&gt;&#32;__b,
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;_IIter,&#32;_IIter&gt;&#32;__e,&#32;_OutputIterator&#32;__r)
48 &#32;&#32;&#32;&#32;{
49 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__b.first&#32;!=&#32;__e.first)
50 &#32;&#32;&#32;&#32;{
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
53 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__r++&#32;=&#32;*__b.first++;
54 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__b.first&#32;!=&#32;__e.first);
56 &#32;&#32;&#32;&#32;}
57 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
58 &#32;&#32;&#32;&#32;{
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__b.second&#32;!=&#32;__e.second)
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__r++&#32;=&#32;*__b.second++;
61 &#32;&#32;&#32;&#32;}
62 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
63 &#32;&#32;&#32;&#32;}
64 
65 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
68 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct____gnu__parallel_1_1____symmetric__difference__func">__symmetric_difference_func</link>
69 &#32;&#32;&#32;&#32;{
70 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::iterator_traits&lt;_IIter&gt;&#32;<link linkend="_struct____gnu__parallel_1_1____symmetric__difference__func_1a2f2cee5a39744ab3ca5ad1b7cc42f234">_TraitsType</link>;
71 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::difference_type&#32;<link linkend="_struct____gnu__parallel_1_1____symmetric__difference__func_1a4a36381105360349f13097f3c88dcc69">_DifferenceType</link>;
72 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::pair&lt;_IIter,&#32;_IIter&gt;&#32;<link linkend="_struct____gnu__parallel_1_1____symmetric__difference__func_1a32bb51cc0a283c9cba392eea3f02ce74">_IteratorPair</link>;
73 
74 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____symmetric__difference__func_1a61954a506347620b3aa11d6af26f6548">__symmetric_difference_func</link>(_Compare&#32;__comp)&#32;:&#32;<link linkend="_struct____gnu__parallel_1_1____symmetric__difference__func_1aab715f1af4314de172c43a345158d864">_M_comp</link>(__comp)&#32;{}
75 
76 &#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;<link linkend="_struct____gnu__parallel_1_1____symmetric__difference__func_1aab715f1af4314de172c43a345158d864">_M_comp</link>;
77 
78 &#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator
79 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____symmetric__difference__func_1ad0991ae1292e3609031af73e45e9359b">_M_invoke</link>(_IIter&#32;__a,&#32;_IIter&#32;__b,&#32;_IIter&#32;__c,&#32;_IIter&#32;__d,
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__r)<emphasis role="keyword">&#32;const</emphasis>
81 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
82 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__a&#32;!=&#32;__b&#32;&amp;&amp;&#32;__c&#32;!=&#32;__d)
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct____gnu__parallel_1_1____symmetric__difference__func_1aab715f1af4314de172c43a345158d864">_M_comp</link>(*__a,&#32;*__c))
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__r&#32;=&#32;*__a;
87 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__a;
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__r;
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
90 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct____gnu__parallel_1_1____symmetric__difference__func_1aab715f1af4314de172c43a345158d864">_M_comp</link>(*__c,&#32;*__a))
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__r&#32;=&#32;*__c;
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__c;
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__r;
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__a;
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__c;
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
102 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link>(__c,&#32;__d,&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link>(__a,&#32;__b,&#32;__r));
103 &#32;&#32;&#32;&#32;&#32;&#32;}
104 
105 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____symmetric__difference__func_1a4a36381105360349f13097f3c88dcc69">_DifferenceType</link>
106 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____symmetric__difference__func_1a0e714b914870acd52b7cc659cc908d1b">__count</link>(_IIter&#32;__a,&#32;_IIter&#32;__b,&#32;_IIter&#32;__c,&#32;_IIter&#32;__d)<emphasis role="keyword">&#32;const</emphasis>
107 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
108 &#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____symmetric__difference__func_1a4a36381105360349f13097f3c88dcc69">_DifferenceType</link>&#32;__counter&#32;=&#32;0;
109 
110 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__a&#32;!=&#32;__b&#32;&amp;&amp;&#32;__c&#32;!=&#32;__d)
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct____gnu__parallel_1_1____symmetric__difference__func_1aab715f1af4314de172c43a345158d864">_M_comp</link>(*__a,&#32;*__c))
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__a;
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__counter;
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct____gnu__parallel_1_1____symmetric__difference__func_1aab715f1af4314de172c43a345158d864">_M_comp</link>(*__c,&#32;*__a))
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__c;
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__counter;
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__a;
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__c;
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
128 
129 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__counter&#32;+&#32;(__b&#32;-&#32;__a)&#32;+&#32;(__d&#32;-&#32;__c);
130 &#32;&#32;&#32;&#32;&#32;&#32;}
131 
132 &#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator
133 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____symmetric__difference__func_1ad0c58badf7c8e795fbae1b8db27f317e">__first_empty</link>(_IIter&#32;__c,&#32;_IIter&#32;__d,&#32;_OutputIterator&#32;__out)<emphasis role="keyword">&#32;const</emphasis>
134 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link>(__c,&#32;__d,&#32;__out);&#32;}
135 
136 &#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator
137 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____symmetric__difference__func_1a758f7306bf9693c804cae6859f028774">__second_empty</link>(_IIter&#32;__a,&#32;_IIter&#32;__b,&#32;_OutputIterator&#32;__out)<emphasis role="keyword">&#32;const</emphasis>
138 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link>(__a,&#32;__b,&#32;__out);&#32;}
139 &#32;&#32;&#32;&#32;};
140 
141 
142 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
145 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct____gnu__parallel_1_1____difference__func">__difference_func</link>
146 &#32;&#32;&#32;&#32;{
147 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::iterator_traits&lt;_IIter&gt;&#32;<link linkend="_struct____gnu__parallel_1_1____difference__func_1a70da5e08a203113ef40471d6f8a12f38">_TraitsType</link>;
148 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::difference_type&#32;<link linkend="_struct____gnu__parallel_1_1____difference__func_1a98901669558a5fa3526218962adf758e">_DifferenceType</link>;
149 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::pair&lt;_IIter,&#32;_IIter&gt;&#32;<link linkend="_struct____gnu__parallel_1_1____difference__func_1afaf01454aa19fa2bd3900406185336e1">_IteratorPair</link>;
150 
151 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____difference__func_1a35173bcb6b6dfc61e5fcd89d450551a8">__difference_func</link>(_Compare&#32;__comp)&#32;:&#32;<link linkend="_struct____gnu__parallel_1_1____difference__func_1abf4f0530108f81acf49a9872cfc394f6">_M_comp</link>(__comp)&#32;{}
152 
153 &#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;<link linkend="_struct____gnu__parallel_1_1____difference__func_1abf4f0530108f81acf49a9872cfc394f6">_M_comp</link>;
154 
155 &#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator
156 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____difference__func_1ac3d368ab71561228c073cf2cda62a67d">_M_invoke</link>(_IIter&#32;__a,&#32;_IIter&#32;__b,&#32;_IIter&#32;__c,&#32;_IIter&#32;__d,
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__r)<emphasis role="keyword">&#32;const</emphasis>
158 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
159 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__a&#32;!=&#32;__b&#32;&amp;&amp;&#32;__c&#32;!=&#32;__d)
160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct____gnu__parallel_1_1____difference__func_1abf4f0530108f81acf49a9872cfc394f6">_M_comp</link>(*__a,&#32;*__c))
162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__r&#32;=&#32;*__a;
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__a;
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__r;
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct____gnu__parallel_1_1____difference__func_1abf4f0530108f81acf49a9872cfc394f6">_M_comp</link>(*__c,&#32;*__a))
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;++__c;&#32;}
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__a;
172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__c;
173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
175 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link>(__a,&#32;__b,&#32;__r);
176 &#32;&#32;&#32;&#32;&#32;&#32;}
177 
178 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____difference__func_1a98901669558a5fa3526218962adf758e">_DifferenceType</link>
179 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____difference__func_1a649636d5450fe227de1ddd797ee7ba1b">__count</link>(_IIter&#32;__a,&#32;_IIter&#32;__b,
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IIter&#32;__c,&#32;_IIter&#32;__d)<emphasis role="keyword">&#32;const</emphasis>
181 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
182 &#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____difference__func_1a98901669558a5fa3526218962adf758e">_DifferenceType</link>&#32;__counter&#32;=&#32;0;
183 
184 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__a&#32;!=&#32;__b&#32;&amp;&amp;&#32;__c&#32;!=&#32;__d)
185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct____gnu__parallel_1_1____difference__func_1abf4f0530108f81acf49a9872cfc394f6">_M_comp</link>(*__a,&#32;*__c))
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__a;
189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__counter;
190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct____gnu__parallel_1_1____difference__func_1abf4f0530108f81acf49a9872cfc394f6">_M_comp</link>(*__c,&#32;*__a))
192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;++__c;&#32;}
193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;++__a;&#32;++__c;&#32;}
195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
196 
197 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__counter&#32;+&#32;(__b&#32;-&#32;__a);
198 &#32;&#32;&#32;&#32;&#32;&#32;}
199 
200 &#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator
201 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____difference__func_1a01ce271a4b3db56675b9ad3e7009bc03">__first_empty</link>(_IIter,&#32;_IIter,&#32;_OutputIterator&#32;__out)<emphasis role="keyword">&#32;const</emphasis>
202 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__out;&#32;}
203 
204 &#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator
205 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____difference__func_1ac3e5dc1e1b3a6e966f81f153a6e71cf7">__second_empty</link>(_IIter&#32;__a,&#32;_IIter&#32;__b,&#32;_OutputIterator&#32;__out)<emphasis role="keyword">&#32;const</emphasis>
206 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link>(__a,&#32;__b,&#32;__out);&#32;}
207 &#32;&#32;&#32;&#32;};
208 
209 
210 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
213 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct____gnu__parallel_1_1____intersection__func">__intersection_func</link>
214 &#32;&#32;&#32;&#32;{
215 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::iterator_traits&lt;_IIter&gt;&#32;<link linkend="_struct____gnu__parallel_1_1____intersection__func_1a910baccfab36636b1ee2ae4a2cb6d471">_TraitsType</link>;
216 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::difference_type&#32;<link linkend="_struct____gnu__parallel_1_1____intersection__func_1a731850aaa371b07df4714fb9687ee6e2">_DifferenceType</link>;
217 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::pair&lt;_IIter,&#32;_IIter&gt;&#32;<link linkend="_struct____gnu__parallel_1_1____intersection__func_1a5f8bab921de3204546567b175d20e1a7">_IteratorPair</link>;
218 
219 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____intersection__func_1ad850f7ce6c8dd5766e6afaa5fcd12ddd">__intersection_func</link>(_Compare&#32;__comp)&#32;:&#32;<link linkend="_struct____gnu__parallel_1_1____intersection__func_1af87c3f480c0a1d71e96e3c99853db6d1">_M_comp</link>(__comp)&#32;{}
220 
221 &#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;<link linkend="_struct____gnu__parallel_1_1____intersection__func_1af87c3f480c0a1d71e96e3c99853db6d1">_M_comp</link>;
222 
223 &#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator
224 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____intersection__func_1a4f6ddaf8bc7c88dfef71c0e9d3083aff">_M_invoke</link>(_IIter&#32;__a,&#32;_IIter&#32;__b,&#32;_IIter&#32;__c,&#32;_IIter&#32;__d,
225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__r)<emphasis role="keyword">&#32;const</emphasis>
226 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
227 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__a&#32;!=&#32;__b&#32;&amp;&amp;&#32;__c&#32;!=&#32;__d)
228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct____gnu__parallel_1_1____intersection__func_1af87c3f480c0a1d71e96e3c99853db6d1">_M_comp</link>(*__a,&#32;*__c))
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;++__a;&#32;}
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct____gnu__parallel_1_1____intersection__func_1af87c3f480c0a1d71e96e3c99853db6d1">_M_comp</link>(*__c,&#32;*__a))
232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;++__c;&#32;}
233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__r&#32;=&#32;*__a;
236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__a;
237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__c;
238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__r;
239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
241 
242 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
243 &#32;&#32;&#32;&#32;&#32;&#32;}
244 
245 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____intersection__func_1a731850aaa371b07df4714fb9687ee6e2">_DifferenceType</link>
246 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____intersection__func_1a7687e309e6b92cefface06adb220bba8">__count</link>(_IIter&#32;__a,&#32;_IIter&#32;__b,&#32;_IIter&#32;__c,&#32;_IIter&#32;__d)<emphasis role="keyword">&#32;const</emphasis>
247 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
248 &#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____intersection__func_1a731850aaa371b07df4714fb9687ee6e2">_DifferenceType</link>&#32;__counter&#32;=&#32;0;
249 
250 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__a&#32;!=&#32;__b&#32;&amp;&amp;&#32;__c&#32;!=&#32;__d)
251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct____gnu__parallel_1_1____intersection__func_1af87c3f480c0a1d71e96e3c99853db6d1">_M_comp</link>(*__a,&#32;*__c))
253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;++__a;&#32;}
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct____gnu__parallel_1_1____intersection__func_1af87c3f480c0a1d71e96e3c99853db6d1">_M_comp</link>(*__c,&#32;*__a))
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;++__c;&#32;}
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__a;
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__c;
260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__counter;
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
263 
264 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__counter;
265 &#32;&#32;&#32;&#32;&#32;&#32;}
266 
267 &#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator
268 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____intersection__func_1ac967c63c65176bd0513f739d13435310">__first_empty</link>(_IIter,&#32;_IIter,&#32;_OutputIterator&#32;__out)<emphasis role="keyword">&#32;const</emphasis>
269 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__out;&#32;}
270 
271 &#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator
272 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____intersection__func_1a4d8d76497f11961e68f90d4da2db4d5e">__second_empty</link>(_IIter,&#32;_IIter,&#32;_OutputIterator&#32;__out)<emphasis role="keyword">&#32;const</emphasis>
273 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__out;&#32;}
274 &#32;&#32;&#32;&#32;};
275 
276 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare&gt;
277 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct____gnu__parallel_1_1____union__func">__union_func</link>
278 &#32;&#32;&#32;&#32;{
279 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_IIter&gt;::difference_type
280 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____union__func_1ad4991934dc872ecfa47ae793e4729db6">_DifferenceType</link>;
281 
282 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____union__func_1afa55431c5278e4f536008cd5036c62cd">__union_func</link>(_Compare&#32;__comp)&#32;:&#32;<link linkend="_struct____gnu__parallel_1_1____union__func_1aaaa5629f0f61ef9c96e373734f2fa2f3">_M_comp</link>(__comp)&#32;{}
283 
284 &#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;<link linkend="_struct____gnu__parallel_1_1____union__func_1aaaa5629f0f61ef9c96e373734f2fa2f3">_M_comp</link>;
285 
286 &#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator
287 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____union__func_1a6c6e3431433fd495dc36abc0bf53adf3">_M_invoke</link>(_IIter&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;_IIter&#32;__b,&#32;_IIter&#32;__c,
288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_IIter&#32;__d,&#32;_OutputIterator&#32;__r)<emphasis role="keyword">&#32;const</emphasis>
289 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
290 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__a&#32;!=&#32;__b&#32;&amp;&amp;&#32;__c&#32;!=&#32;__d)
291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct____gnu__parallel_1_1____union__func_1aaaa5629f0f61ef9c96e373734f2fa2f3">_M_comp</link>(*__a,&#32;*__c))
293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__r&#32;=&#32;*__a;
295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__a;
296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct____gnu__parallel_1_1____union__func_1aaaa5629f0f61ef9c96e373734f2fa2f3">_M_comp</link>(*__c,&#32;*__a))
298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__r&#32;=&#32;*__c;
300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__c;
301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__r&#32;=&#32;*__a;
305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__a;
306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__c;
307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__r;
309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
310 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link>(__c,&#32;__d,&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link>(__a,&#32;__b,&#32;__r));
311 &#32;&#32;&#32;&#32;&#32;&#32;}
312 
313 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____union__func_1ad4991934dc872ecfa47ae793e4729db6">_DifferenceType</link>
314 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____union__func_1a729d29c4f1da6d98ee4f77c74b3c6606">__count</link>(_IIter&#32;__a,&#32;_IIter&#32;__b,&#32;_IIter&#32;__c,&#32;_IIter&#32;__d)<emphasis role="keyword">&#32;const</emphasis>
315 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
316 &#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____union__func_1ad4991934dc872ecfa47ae793e4729db6">_DifferenceType</link>&#32;__counter&#32;=&#32;0;
317 
318 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__a&#32;!=&#32;__b&#32;&amp;&amp;&#32;__c&#32;!=&#32;__d)
319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct____gnu__parallel_1_1____union__func_1aaaa5629f0f61ef9c96e373734f2fa2f3">_M_comp</link>(*__a,&#32;*__c))
321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;++__a;&#32;}
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct____gnu__parallel_1_1____union__func_1aaaa5629f0f61ef9c96e373734f2fa2f3">_M_comp</link>(*__c,&#32;*__a))
323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;++__c;&#32;}
324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__a;
327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__c;
328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__counter;
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
331 
332 &#32;&#32;&#32;&#32;__counter&#32;+=&#32;(__b&#32;-&#32;__a);
333 &#32;&#32;&#32;&#32;__counter&#32;+=&#32;(__d&#32;-&#32;__c);
334 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__counter;
335 &#32;&#32;&#32;&#32;&#32;&#32;}
336 
337 &#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator
338 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____union__func_1a1a76a888a827bd73fe72033a9ef5b391">__first_empty</link>(_IIter&#32;__c,&#32;_IIter&#32;__d,&#32;_OutputIterator&#32;__out)<emphasis role="keyword">&#32;const</emphasis>
339 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link>(__c,&#32;__d,&#32;__out);&#32;}
340 
341 &#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator
342 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____union__func_1af59937451b57960f91b97253a478ada3">__second_empty</link>(_IIter&#32;__a,&#32;_IIter&#32;__b,&#32;_OutputIterator&#32;__out)<emphasis role="keyword">&#32;const</emphasis>
343 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link>(__a,&#32;__b,&#32;__out);&#32;}
344 &#32;&#32;&#32;&#32;};
345 
346 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,
347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,
348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Operation&gt;
349 &#32;&#32;&#32;&#32;_OutputIterator
350 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1ad6dc994e2f7245b108300cc529ee7410">__parallel_set_operation</link>(_IIter&#32;__begin1,&#32;_IIter&#32;__end1,
351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IIter&#32;__begin2,&#32;_IIter&#32;__end2,
352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,&#32;_Operation&#32;__op)
353 &#32;&#32;&#32;&#32;{
354 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2compiletime__settings_8h_1a77fb93c9cecec331ccee755972695128">_GLIBCXX_CALL</link>((__end1&#32;-&#32;__begin1)&#32;+&#32;(__end2&#32;-&#32;__begin2))
355 
356 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::iterator_traits&lt;_IIter&gt;&#32;_TraitsType;
357 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::difference_type&#32;_DifferenceType;
358 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::pair&lt;_IIter,&#32;_IIter&gt;&#32;<link linkend="_class____gnu__parallel_1_1___iterator_pair">_IteratorPair</link>;
359 
360 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__begin1&#32;==&#32;__end1)
361 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__op.__first_empty(__begin2,&#32;__end2,&#32;__result);
362 
363 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__begin2&#32;==&#32;__end2)
364 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__op.__second_empty(__begin1,&#32;__end1,&#32;__result);
365 
366 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_DifferenceType&#32;__size&#32;=&#32;(__end1&#32;-&#32;__begin1)&#32;+&#32;(__end2&#32;-&#32;__begin2);
367 
368 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____gnu__parallel_1_1___iterator_pair">_IteratorPair</link>&#32;__sequence[2]&#32;=&#32;{&#32;std::make_pair(__begin1,&#32;__end1),
369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::make_pair(__begin2,&#32;__end2)&#32;};
370 &#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__return_value&#32;=&#32;__result;
371 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;*__borders;
372 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1___iterator_pair">_IteratorPair</link>&#32;*__block_begins;
373 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType*&#32;__lengths;
374 
375 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__num_threads&#32;=
376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::min&lt;_DifferenceType&gt;(<link linkend="_namespace____gnu__parallel_1aa72851b809c2b314bc09580c3512f281">__get_max_threads</link>(),
377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::min(__end1&#32;-&#32;__begin1,&#32;__end2&#32;-&#32;__begin2));
378 
379 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;parallel&#32;num_threads(__num_threads)</emphasis>
380 &#32;&#32;&#32;&#32;&#32;&#32;{
381 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;single</emphasis>
382 &#32;&#32;&#32;&#32;{
383 &#32;&#32;&#32;&#32;&#32;&#32;__num_threads&#32;=&#32;<link linkend="__classes_2lib_2include_2omp_8h_1ac42ead04531fd33507e3d3a6f648b200">omp_get_num_threads</link>();
384 
385 &#32;&#32;&#32;&#32;&#32;&#32;__borders&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;_DifferenceType[__num_threads&#32;+&#32;2];
386 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1ac799255921e70b0378d145924d673f9c">__equally_split</link>(__size,&#32;__num_threads&#32;+&#32;1,&#32;__borders);
387 &#32;&#32;&#32;&#32;&#32;&#32;__block_begins&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class____gnu__parallel_1_1___iterator_pair">_IteratorPair</link>[__num_threads&#32;+&#32;1];
388 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Very&#32;__start.</emphasis>
389 &#32;&#32;&#32;&#32;&#32;&#32;__block_begins[0]&#32;=&#32;std::make_pair(__begin1,&#32;__begin2);
390 &#32;&#32;&#32;&#32;&#32;&#32;__lengths&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;_DifferenceType[__num_threads];
391 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//single</emphasis>
392 
393 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__iam&#32;=&#32;<link linkend="__classes_2lib_2include_2omp_8h_1aa03cf372d8266eef024262a68d304e1b">omp_get_thread_num</link>();
394 
395 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_Result&#32;from&#32;multiseq_partition.</emphasis>
396 &#32;&#32;&#32;&#32;_IIter&#32;__offset[2];
397 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_DifferenceType&#32;__rank&#32;=&#32;__borders[__iam&#32;+&#32;1];
398 
399 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1ade1f4c5da0794c4f1a09465d4aee6c1d">multiseq_partition</link>(__sequence,&#32;__sequence&#32;+&#32;2,
400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__rank,&#32;__offset,&#32;__op._M_comp);
401 
402 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;allowed&#32;to&#32;read?</emphasis>
403 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;together</emphasis>
404 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;*(__offset[&#32;0&#32;]&#32;-&#32;1)&#32;==&#32;*__offset[&#32;1&#32;]</emphasis>
405 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__offset[&#32;0&#32;]&#32;!=&#32;__begin1&#32;&amp;&amp;&#32;__offset[1]&#32;!=&#32;__end2
406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!__op._M_comp(*(__offset[0]&#32;-&#32;1),&#32;*__offset[1])
407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!__op._M_comp(*__offset[1],&#32;*(__offset[0]&#32;-&#32;1)))
408 &#32;&#32;&#32;&#32;&#32;&#32;{
409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Avoid&#32;split&#32;between&#32;globally&#32;equal&#32;elements:&#32;move&#32;one&#32;to</emphasis>
410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;front&#32;in&#32;first&#32;sequence.</emphasis>
411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__offset[0];
412 &#32;&#32;&#32;&#32;&#32;&#32;}
413 
414 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1___iterator_pair">_IteratorPair</link>&#32;__block_end&#32;=&#32;__block_begins[__iam&#32;+&#32;1]&#32;=
415 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1___iterator_pair">_IteratorPair</link>(__offset[0],&#32;__offset[1]);
416 
417 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Make&#32;sure&#32;all&#32;threads&#32;have&#32;their&#32;block_begin&#32;result&#32;written&#32;out.</emphasis>
418 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;barrier</emphasis>
419 
420 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1___iterator_pair">_IteratorPair</link>&#32;__block_begin&#32;=&#32;__block_begins[__iam];
421 
422 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Begin&#32;working&#32;for&#32;the&#32;first&#32;block,&#32;while&#32;the&#32;others&#32;except</emphasis>
423 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;last&#32;start&#32;to&#32;count.</emphasis>
424 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__iam&#32;==&#32;0)
425 &#32;&#32;&#32;&#32;&#32;&#32;{
426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;first&#32;thread&#32;can&#32;copy&#32;already.</emphasis>
427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lengths[&#32;__iam&#32;]&#32;=
428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__op._M_invoke(__block_begin.first,&#32;__block_end.first,
429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__block_begin.second,&#32;__block_end.second,
430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result)&#32;-&#32;__result;
431 &#32;&#32;&#32;&#32;&#32;&#32;}
432 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
433 &#32;&#32;&#32;&#32;&#32;&#32;{
434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lengths[&#32;__iam&#32;]&#32;=
435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__op.__count(__block_begin.first,&#32;__block_end.first,
436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__block_begin.second,&#32;__block_end.second);
437 &#32;&#32;&#32;&#32;&#32;&#32;}
438 
439 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Make&#32;sure&#32;everyone&#32;wrote&#32;their&#32;lengths.</emphasis>
440 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;barrier</emphasis>
441 
442 &#32;&#32;&#32;&#32;_OutputIterator&#32;__r&#32;=&#32;__result;
443 
444 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__iam&#32;==&#32;0)
445 &#32;&#32;&#32;&#32;&#32;&#32;{
446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Do&#32;the&#32;last&#32;block.</emphasis>
447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__num_threads;&#32;++__i)
448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__r&#32;+=&#32;__lengths[__i];
449 
450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__block_begin&#32;=&#32;__block_begins[__num_threads];
451 
452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Return&#32;the&#32;result&#32;iterator&#32;of&#32;the&#32;last&#32;block.</emphasis>
453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__return_value&#32;=
454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__op._M_invoke(__block_begin.first,&#32;__end1,
455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__block_begin.second,&#32;__end2,&#32;__r);
456 
457 &#32;&#32;&#32;&#32;&#32;&#32;}
458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__iam;&#32;++__i)
461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__r&#32;+=&#32;__lengths[&#32;__i&#32;];
462 
463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Reset&#32;begins&#32;for&#32;copy&#32;pass.</emphasis>
464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__op._M_invoke(__block_begin.first,&#32;__block_end.first,
465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__block_begin.second,&#32;__block_end.second,&#32;__r);
466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
467 &#32;&#32;&#32;&#32;}
468 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__return_value;
469 &#32;&#32;&#32;&#32;}
470 
471 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,
472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,
473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
474 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
475 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a56bac3b8498aadcd3ce073422f0b9822">__parallel_set_union</link>(_IIter&#32;__begin1,&#32;_IIter&#32;__end1,
476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IIter&#32;__begin2,&#32;_IIter&#32;__end2,
477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,&#32;_Compare&#32;__comp)
478 &#32;&#32;&#32;&#32;{
479 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1ad6dc994e2f7245b108300cc529ee7410">__parallel_set_operation</link>(__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,
480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result,
481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____union__func">__union_func</link>&lt;&#32;_IIter,&#32;_OutputIterator,
482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&gt;(__comp));
483 &#32;&#32;&#32;&#32;}
484 
485 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,
486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,
487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
488 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
489 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1aa2d25a01058104978680d0b5d934b54f">__parallel_set_intersection</link>(_IIter&#32;__begin1,&#32;_IIter&#32;__end1,
490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IIter&#32;__begin2,&#32;_IIter&#32;__end2,
491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,&#32;_Compare&#32;__comp)
492 &#32;&#32;&#32;&#32;{
493 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1ad6dc994e2f7245b108300cc529ee7410">__parallel_set_operation</link>(__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,
494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result,
495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____intersection__func">__intersection_func</link>&lt;_IIter,
496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator,&#32;_Compare&gt;(__comp));
497 &#32;&#32;&#32;&#32;}
498 
499 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,
500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,
501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
502 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
503 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1abb75bc882413dc8cba7fce93c5eaaaf0">__parallel_set_difference</link>(_IIter&#32;__begin1,&#32;_IIter&#32;__end1,
504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IIter&#32;__begin2,&#32;_IIter&#32;__end2,
505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,&#32;_Compare&#32;__comp)
506 &#32;&#32;&#32;&#32;{
507 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1ad6dc994e2f7245b108300cc529ee7410">__parallel_set_operation</link>(__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,
508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result,
509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____difference__func">__difference_func</link>&lt;_IIter,
510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator,&#32;_Compare&gt;(__comp));
511 &#32;&#32;&#32;&#32;}
512 
513 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,
514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,
515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
516 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
517 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a567012d512340614386402b7e3234ec6">__parallel_set_symmetric_difference</link>(_IIter&#32;__begin1,&#32;_IIter&#32;__end1,
518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IIter&#32;__begin2,&#32;_IIter&#32;__end2,
519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,
520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)
521 &#32;&#32;&#32;&#32;{
522 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1ad6dc994e2f7245b108300cc529ee7410">__parallel_set_operation</link>(__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,
523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result,
524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____symmetric__difference__func">__symmetric_difference_func</link>&lt;_IIter,
525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator,&#32;_Compare&gt;(__comp));
526 &#32;&#32;&#32;&#32;}
527 }
528 
529 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_GLIBCXX_PARALLEL_SET_OPERATIONS_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
