<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2bits_2locale__facets_8h_source" xml:lang="en-US">
<title>locale_facets.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/bits/locale_facets.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Locale&#32;support&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;1997-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="comment">//</emphasis>
31 <emphasis role="comment">//&#32;ISO&#32;C++&#32;14882:&#32;22.1&#32;&#32;Locales</emphasis>
32 <emphasis role="comment">//</emphasis>
33 
34 <emphasis role="preprocessor">#ifndef&#32;_LOCALE_FACETS_H</emphasis>
35 <emphasis role="preprocessor">#define&#32;_LOCALE_FACETS_H&#32;1</emphasis>
36 
37 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
38 
39 <emphasis role="preprocessor">#include&#32;&lt;cwctype&gt;</emphasis>&#32;&#32;<emphasis role="comment">//&#32;For&#32;wctype_t</emphasis>
40 <emphasis role="preprocessor">#include&#32;&lt;cctype&gt;</emphasis>
41 <emphasis role="preprocessor">#include&#32;&lt;bits/ctype_base.h&gt;</emphasis>
42 <emphasis role="preprocessor">#include&#32;&lt;iosfwd&gt;</emphasis>
43 <emphasis role="preprocessor">#include&#32;&lt;bits/ios_base.h&gt;</emphasis>&#32;&#32;<emphasis role="comment">//&#32;For&#32;ios_base,&#32;ios_base::iostate</emphasis>
44 <emphasis role="preprocessor">#include&#32;&lt;streambuf&gt;</emphasis>
45 <emphasis role="preprocessor">#include&#32;&lt;bits/cpp_type_traits.h&gt;</emphasis>
46 <emphasis role="preprocessor">#include&#32;&lt;ext/type_traits.h&gt;</emphasis>
47 <emphasis role="preprocessor">#include&#32;&lt;ext/numeric_traits.h&gt;</emphasis>
48 <emphasis role="preprocessor">#include&#32;&lt;bits/streambuf_iterator.h&gt;</emphasis>
49 
50 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
51 {
52 _GLIBCXX_BEGIN_NAMESPACE_VERSION
53 
54 <emphasis role="comment">//&#32;Number&#32;of&#32;standard&#32;facets&#32;(for&#32;narrow&#32;characters&#32;only)</emphasis>
55 <emphasis role="preprocessor">#define&#32;&#32;_GLIBCXX_NUM_FACETS&#32;14</emphasis>
56 
57 <emphasis role="comment">//&#32;Number&#32;of&#32;duplicated&#32;facets&#32;for&#32;cxx11&#32;ABI</emphasis>
58 <emphasis role="preprocessor">#define&#32;&#32;_GLIBCXX_NUM_CXX11_FACETS&#32;(_GLIBCXX_USE_DUAL_ABI&#32;?&#32;8&#32;:&#32;0)</emphasis>
59 
60 <emphasis role="comment">//&#32;codecvt&lt;char16_t&gt;&#32;and&#32;codecvt&lt;char32_t&gt;</emphasis>
61 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_CHAR8_T</emphasis>
62 <emphasis role="preprocessor">#&#32;define&#32;_GLIBCXX_NUM_UNICODE_FACETS&#32;4</emphasis>
63 <emphasis role="preprocessor">#else</emphasis>
64 <emphasis role="preprocessor">#&#32;define&#32;_GLIBCXX_NUM_UNICODE_FACETS&#32;2</emphasis>
65 <emphasis role="preprocessor">#endif</emphasis>
66 
67 <emphasis role="comment">//&#32;Facets&#32;duplicated&#32;for&#32;alt128&#32;long&#32;double&#32;format</emphasis>
68 <emphasis role="comment">//&#32;num_get,&#32;num_put,&#32;money_get,&#32;money_put&#32;(+&#32;cxx11&#32;money_get,&#32;money_put)</emphasis>
69 <emphasis role="preprocessor">#define&#32;_GLIBCXX_NUM_LBDL_ALT128_FACETS&#32;(4&#32;+&#32;(_GLIBCXX_USE_DUAL_ABI&#32;?&#32;2&#32;:&#32;0))</emphasis>
70 
71 &#32;&#32;<emphasis role="comment">//&#32;Convert&#32;string&#32;to&#32;numeric&#32;value&#32;of&#32;type&#32;_Tp&#32;and&#32;store&#32;results.</emphasis>
72 &#32;&#32;<emphasis role="comment">//&#32;NB:&#32;This&#32;is&#32;specialized&#32;for&#32;all&#32;required&#32;types,&#32;there&#32;is&#32;no</emphasis>
73 &#32;&#32;<emphasis role="comment">//&#32;generic&#32;definition.</emphasis>
74 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
75 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
76 &#32;&#32;&#32;&#32;__convert_to_v(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*,&#32;_Tp&amp;,&#32;ios_base::iostate&amp;,
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__c_locale&amp;)&#32;<emphasis role="keywordflow">throw</emphasis>();
78 
79 &#32;&#32;<emphasis role="comment">//&#32;Explicit&#32;specializations&#32;for&#32;required&#32;types.</emphasis>
80 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
81 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
82 &#32;&#32;&#32;&#32;__convert_to_v(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*,&#32;<emphasis role="keywordtype">float</emphasis>&amp;,&#32;ios_base::iostate&amp;,
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__c_locale&amp;)&#32;<emphasis role="keywordflow">throw</emphasis>();
84 
85 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
86 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
87 &#32;&#32;&#32;&#32;__convert_to_v(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*,&#32;<emphasis role="keywordtype">double</emphasis>&amp;,&#32;ios_base::iostate&amp;,
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__c_locale&amp;)&#32;<emphasis role="keywordflow">throw</emphasis>();
89 
90 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
91 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
92 &#32;&#32;&#32;&#32;__convert_to_v(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&amp;,&#32;ios_base::iostate&amp;,
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__c_locale&amp;)&#32;<emphasis role="keywordflow">throw</emphasis>();
94 
95 &#32;&#32;<emphasis role="comment">//&#32;NB:&#32;__pad&#32;is&#32;a&#32;struct,&#32;rather&#32;than&#32;a&#32;function,&#32;so&#32;it&#32;can&#32;be</emphasis>
96 &#32;&#32;<emphasis role="comment">//&#32;partially-specialized.</emphasis>
97 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
98 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__pad
99 &#32;&#32;&#32;&#32;{
100 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
101 &#32;&#32;&#32;&#32;&#32;&#32;_S_pad(ios_base&amp;&#32;__io,&#32;_CharT&#32;__fill,&#32;_CharT*&#32;__news,
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__olds,&#32;streamsize&#32;__newlen,&#32;streamsize&#32;__oldlen);
103 &#32;&#32;&#32;&#32;};
104 
105 &#32;&#32;<emphasis role="comment">//&#32;Used&#32;by&#32;both&#32;numeric&#32;and&#32;monetary&#32;facets.</emphasis>
106 &#32;&#32;<emphasis role="comment">//&#32;Inserts&#32;&quot;group&#32;separator&quot;&#32;characters&#32;into&#32;an&#32;array&#32;of&#32;characters.</emphasis>
107 &#32;&#32;<emphasis role="comment">//&#32;It&apos;s&#32;recursive,&#32;one&#32;iteration&#32;per&#32;group.&#32;&#32;It&#32;moves&#32;the&#32;characters</emphasis>
108 &#32;&#32;<emphasis role="comment">//&#32;in&#32;the&#32;buffer&#32;this&#32;way:&#32;&quot;xxxx12345&quot;&#32;-&gt;&#32;&quot;12,345xxx&quot;.&#32;&#32;Call&#32;this</emphasis>
109 &#32;&#32;<emphasis role="comment">//&#32;only&#32;with&#32;__gsize&#32;!=&#32;0.</emphasis>
110 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
111 &#32;&#32;&#32;&#32;_CharT*
112 &#32;&#32;&#32;&#32;__add_grouping(_CharT*&#32;__s,&#32;_CharT&#32;__sep,
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__gbeg,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__gsize,
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__first,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__last);
115 
116 &#32;&#32;<emphasis role="comment">//&#32;This&#32;template&#32;permits&#32;specializing&#32;facet&#32;output&#32;code&#32;for</emphasis>
117 &#32;&#32;<emphasis role="comment">//&#32;ostreambuf_iterator.&#32;&#32;For&#32;ostreambuf_iterator,&#32;sputn&#32;is</emphasis>
118 &#32;&#32;<emphasis role="comment">//&#32;significantly&#32;more&#32;efficient&#32;than&#32;incrementing&#32;iterators.</emphasis>
119 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
120 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>
121 &#32;&#32;&#32;&#32;ostreambuf_iterator&lt;_CharT&gt;
122 &#32;&#32;&#32;&#32;__write(ostreambuf_iterator&lt;_CharT&gt;&#32;__s,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__ws,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__len)
123 &#32;&#32;&#32;&#32;{
124 &#32;&#32;&#32;&#32;&#32;&#32;__s._M_put(__ws,&#32;__len);
125 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s;
126 &#32;&#32;&#32;&#32;}
127 
128 &#32;&#32;<emphasis role="comment">//&#32;This&#32;is&#32;the&#32;unspecialized&#32;form&#32;of&#32;the&#32;template.</emphasis>
129 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutIter&gt;
130 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>
131 &#32;&#32;&#32;&#32;_OutIter
132 &#32;&#32;&#32;&#32;__write(_OutIter&#32;__s,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__ws,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__len)
133 &#32;&#32;&#32;&#32;{
134 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;__j&#32;=&#32;0;&#32;__j&#32;&lt;&#32;__len;&#32;__j++,&#32;++__s)
135 &#32;&#32;&#32;&#32;*__s&#32;=&#32;__ws[__j];
136 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s;
137 &#32;&#32;&#32;&#32;}
138 
139 
140 &#32;&#32;<emphasis role="comment">//&#32;22.2.1.1&#32;&#32;Template&#32;class&#32;ctype</emphasis>
141 &#32;&#32;<emphasis role="comment">//&#32;Include&#32;host&#32;and&#32;configuration&#32;specific&#32;ctype&#32;enums&#32;for&#32;ctype_base.</emphasis>
142 
152 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
153 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__ctype_abstract_base&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;locale::facet,&#32;<emphasis role="keyword">public</emphasis>&#32;ctype_base
154 &#32;&#32;&#32;&#32;{
155 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
156 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Types:</emphasis>
158 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_CharT&#32;char_type;
159 
171 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
172 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__monobehavior_8h_1a9870e0caa2f8e3e5700c4cbb21d73c07">is</link>(<link linkend="_namespacemask">mask</link>&#32;__m,&#32;char_type&#32;__c)<emphasis role="keyword">&#32;const</emphasis>
173 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_is(__m,&#32;__c);&#32;}
174 
188 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*
189 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__monobehavior_8h_1a9870e0caa2f8e3e5700c4cbb21d73c07">is</link>(<emphasis role="keyword">const</emphasis>&#32;char_type&#32;*__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type&#32;*__hi,&#32;<link linkend="_namespacemask">mask</link>&#32;*__vec)<emphasis role="keyword">&#32;const</emphasis>
190 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_is(__lo,&#32;__hi,&#32;__vec);&#32;}
191 
204 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*
205 &#32;&#32;&#32;&#32;&#32;&#32;scan_is(<link linkend="_namespacemask">mask</link>&#32;__m,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__hi)<emphasis role="keyword">&#32;const</emphasis>
206 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_scan_is(__m,&#32;__lo,&#32;__hi);&#32;}
207 
220 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*
221 &#32;&#32;&#32;&#32;&#32;&#32;scan_not(<link linkend="_namespacemask">mask</link>&#32;__m,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__hi)<emphasis role="keyword">&#32;const</emphasis>
222 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_scan_not(__m,&#32;__lo,&#32;__hi);&#32;}
223 
234 &#32;&#32;&#32;&#32;&#32;&#32;char_type
235 &#32;&#32;&#32;&#32;&#32;&#32;toupper(char_type&#32;__c)<emphasis role="keyword">&#32;const</emphasis>
236 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_toupper(__c);&#32;}
237 
249 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*
250 &#32;&#32;&#32;&#32;&#32;&#32;toupper(char_type&#32;*__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__hi)<emphasis role="keyword">&#32;const</emphasis>
251 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_toupper(__lo,&#32;__hi);&#32;}
252 
263 &#32;&#32;&#32;&#32;&#32;&#32;char_type
264 &#32;&#32;&#32;&#32;&#32;&#32;tolower(char_type&#32;__c)<emphasis role="keyword">&#32;const</emphasis>
265 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_tolower(__c);&#32;}
266 
278 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*
279 &#32;&#32;&#32;&#32;&#32;&#32;tolower(char_type*&#32;__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__hi)<emphasis role="keyword">&#32;const</emphasis>
280 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_tolower(__lo,&#32;__hi);&#32;}
281 
295 &#32;&#32;&#32;&#32;&#32;&#32;char_type
296 &#32;&#32;&#32;&#32;&#32;&#32;widen(<emphasis role="keywordtype">char</emphasis>&#32;__c)<emphasis role="keyword">&#32;const</emphasis>
297 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_widen(__c);&#32;}
298 
314 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*
315 &#32;&#32;&#32;&#32;&#32;&#32;widen(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__hi,&#32;char_type*&#32;__to)<emphasis role="keyword">&#32;const</emphasis>
316 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_widen(__lo,&#32;__hi,&#32;__to);&#32;}
317 
333 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>
334 &#32;&#32;&#32;&#32;&#32;&#32;narrow(char_type&#32;__c,&#32;<emphasis role="keywordtype">char</emphasis>&#32;__dfault)<emphasis role="keyword">&#32;const</emphasis>
335 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_narrow(__c,&#32;__dfault);&#32;}
336 
355 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*
356 &#32;&#32;&#32;&#32;&#32;&#32;narrow(<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__hi,
357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;__dfault,&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__to)<emphasis role="keyword">&#32;const</emphasis>
358 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_narrow(__lo,&#32;__hi,&#32;__dfault,&#32;__to);&#32;}
359 
360 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
361 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
362 &#32;&#32;&#32;&#32;&#32;&#32;__ctype_abstract_base(<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0):&#32;facet(__refs)&#32;{&#32;}
363 
364 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
365 &#32;&#32;&#32;&#32;&#32;&#32;~__ctype_abstract_base()&#32;{&#32;}
366 
380 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
381 &#32;&#32;&#32;&#32;&#32;&#32;do_is(<link linkend="_namespacemask">mask</link>&#32;__m,&#32;char_type&#32;__c)&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
382 
399 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*
400 &#32;&#32;&#32;&#32;&#32;&#32;do_is(<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__hi,
401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacemask">mask</link>*&#32;__vec)&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
402 
418 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*
419 &#32;&#32;&#32;&#32;&#32;&#32;do_scan_is(<link linkend="_namespacemask">mask</link>&#32;__m,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__lo,
420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__hi)&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
421 
437 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*
438 &#32;&#32;&#32;&#32;&#32;&#32;do_scan_not(<link linkend="_namespacemask">mask</link>&#32;__m,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__lo,
439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__hi)&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
440 
455 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;char_type
456 &#32;&#32;&#32;&#32;&#32;&#32;do_toupper(char_type&#32;__c)&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
457 
472 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*
473 &#32;&#32;&#32;&#32;&#32;&#32;do_toupper(char_type*&#32;__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__hi)&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
474 
488 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;char_type
489 &#32;&#32;&#32;&#32;&#32;&#32;do_tolower(char_type&#32;__c)&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
490 
505 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*
506 &#32;&#32;&#32;&#32;&#32;&#32;do_tolower(char_type*&#32;__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__hi)&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
507 
524 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;char_type
525 &#32;&#32;&#32;&#32;&#32;&#32;do_widen(<emphasis role="keywordtype">char</emphasis>&#32;__c)&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
526 
545 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*
546 &#32;&#32;&#32;&#32;&#32;&#32;do_widen(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__hi,&#32;char_type*&#32;__to)&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
547 
566 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>
567 &#32;&#32;&#32;&#32;&#32;&#32;do_narrow(char_type&#32;__c,&#32;<emphasis role="keywordtype">char</emphasis>&#32;__dfault)&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
568 
591 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*
592 &#32;&#32;&#32;&#32;&#32;&#32;do_narrow(<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__hi,
593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;__dfault,&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__to)&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
594 &#32;&#32;&#32;&#32;};
595 
614 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
615 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>ctype&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__ctype_abstract_base&lt;_CharT&gt;
616 &#32;&#32;&#32;&#32;{
617 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
618 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Types:</emphasis>
619 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char_type;
620 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__ctype_abstract_base&lt;_CharT&gt;::mask&#32;<link linkend="_namespacemask">mask</link>;
621 
623 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;locale::id&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2src_2cocoa__platform_8h_1ae52362b10d585638f5b96140e90f1b7a">id</link>;
624 
625 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
626 &#32;&#32;&#32;&#32;&#32;&#32;ctype(<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0)&#32;:&#32;__ctype_abstract_base&lt;_CharT&gt;(__refs)&#32;{&#32;}
627 
628 &#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
629 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
630 &#32;&#32;&#32;&#32;&#32;&#32;~ctype();
631 
632 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
633 &#32;&#32;&#32;&#32;&#32;&#32;do_is(<link linkend="_namespacemask">mask</link>&#32;__m,&#32;char_type&#32;__c)&#32;<emphasis role="keyword">const</emphasis>;
634 
635 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*
636 &#32;&#32;&#32;&#32;&#32;&#32;do_is(<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__hi,&#32;<link linkend="_namespacemask">mask</link>*&#32;__vec)&#32;<emphasis role="keyword">const</emphasis>;
637 
638 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*
639 &#32;&#32;&#32;&#32;&#32;&#32;do_scan_is(<link linkend="_namespacemask">mask</link>&#32;__m,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__hi)&#32;<emphasis role="keyword">const</emphasis>;
640 
641 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*
642 &#32;&#32;&#32;&#32;&#32;&#32;do_scan_not(<link linkend="_namespacemask">mask</link>&#32;__m,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__lo,
643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__hi)&#32;<emphasis role="keyword">const</emphasis>;
644 
645 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;char_type
646 &#32;&#32;&#32;&#32;&#32;&#32;do_toupper(char_type&#32;__c)&#32;<emphasis role="keyword">const</emphasis>;
647 
648 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*
649 &#32;&#32;&#32;&#32;&#32;&#32;do_toupper(char_type*&#32;__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__hi)&#32;<emphasis role="keyword">const</emphasis>;
650 
651 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;char_type
652 &#32;&#32;&#32;&#32;&#32;&#32;do_tolower(char_type&#32;__c)&#32;<emphasis role="keyword">const</emphasis>;
653 
654 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*
655 &#32;&#32;&#32;&#32;&#32;&#32;do_tolower(char_type*&#32;__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__hi)&#32;<emphasis role="keyword">const</emphasis>;
656 
657 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;char_type
658 &#32;&#32;&#32;&#32;&#32;&#32;do_widen(<emphasis role="keywordtype">char</emphasis>&#32;__c)&#32;<emphasis role="keyword">const</emphasis>;
659 
660 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*
661 &#32;&#32;&#32;&#32;&#32;&#32;do_widen(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__hi,&#32;char_type*&#32;__dest)&#32;<emphasis role="keyword">const</emphasis>;
662 
663 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>
664 &#32;&#32;&#32;&#32;&#32;&#32;do_narrow(char_type,&#32;<emphasis role="keywordtype">char</emphasis>&#32;__dfault)&#32;<emphasis role="keyword">const</emphasis>;
665 
666 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*
667 &#32;&#32;&#32;&#32;&#32;&#32;do_narrow(<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__hi,
668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;__dfault,&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__to)&#32;<emphasis role="keyword">const</emphasis>;
669 &#32;&#32;&#32;&#32;};
670 
671 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
672 &#32;&#32;&#32;&#32;locale::id&#32;ctype&lt;_CharT&gt;::id;
673 
674 &#32;&#32;<emphasis role="comment">//&#32;Incomplete&#32;to&#32;provide&#32;a&#32;compile&#32;time&#32;diagnostics&#32;for&#32;common&#32;misuse</emphasis>
675 &#32;&#32;<emphasis role="comment">//&#32;of&#32;[locale.convenience]&#32;functions&#32;with&#32;basic_string&#32;as&#32;a&#32;character&#32;type.</emphasis>
676 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
677 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>ctype&lt;<link linkend="_classbasic__string">basic_string</link>&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;&#32;&gt;;
678 
688 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
689 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>ctype&lt;char&gt;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;locale::facet,&#32;<emphasis role="keyword">public</emphasis>&#32;ctype_base
690 &#32;&#32;&#32;&#32;{
691 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
692 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Types:</emphasis>
694 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;char_type;
695 
696 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
697 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Data&#32;Members:</emphasis>
698 &#32;&#32;&#32;&#32;&#32;&#32;__c_locale&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_c_locale_ctype;
699 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_del;
700 &#32;&#32;&#32;&#32;&#32;&#32;__to_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_toupper;
701 &#32;&#32;&#32;&#32;&#32;&#32;__to_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_tolower;
702 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespacemask">mask</link>*&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_table;
703 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;_M_widen_ok;
704 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;_M_widen[1&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(-1)];
705 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;_M_narrow[1&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(-1)];
706 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;_M_narrow_ok;&#32;&#32;&#32;<emphasis role="comment">//&#32;0&#32;uninitialized,&#32;1&#32;init,</emphasis>
707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2&#32;memcpy&#32;can&apos;t&#32;be&#32;used</emphasis>
708 
709 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
711 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;locale::id&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2src_2cocoa__platform_8h_1ae52362b10d585638f5b96140e90f1b7a">id</link>;
713 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;table_size&#32;=&#32;1&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(-1);
714 
725 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
726 &#32;&#32;&#32;&#32;&#32;&#32;ctype(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespacemask">mask</link>*&#32;__table&#32;=&#32;0,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__del&#32;=&#32;<emphasis role="keyword">false</emphasis>,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0);
727 
738 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
739 &#32;&#32;&#32;&#32;&#32;&#32;ctype(__c_locale&#32;__cloc,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespacemask">mask</link>*&#32;__table&#32;=&#32;0,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__del&#32;=&#32;<emphasis role="keyword">false</emphasis>,
740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0);
741 
751 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
752 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__monobehavior_8h_1a9870e0caa2f8e3e5700c4cbb21d73c07">is</link>(<link linkend="_namespacemask">mask</link>&#32;__m,&#32;<emphasis role="keywordtype">char</emphasis>&#32;__c)&#32;<emphasis role="keyword">const</emphasis>;
753 
766 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*
767 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__monobehavior_8h_1a9870e0caa2f8e3e5700c4cbb21d73c07">is</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__hi,&#32;<link linkend="_namespacemask">mask</link>*&#32;__vec)&#32;<emphasis role="keyword">const</emphasis>;
768 
780 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*
781 &#32;&#32;&#32;&#32;&#32;&#32;scan_is(<link linkend="_namespacemask">mask</link>&#32;__m,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__hi)&#32;<emphasis role="keyword">const</emphasis>;
782 
794 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*
795 &#32;&#32;&#32;&#32;&#32;&#32;scan_not(<link linkend="_namespacemask">mask</link>&#32;__m,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__hi)&#32;<emphasis role="keyword">const</emphasis>;
796 
809 &#32;&#32;&#32;&#32;&#32;&#32;char_type
810 &#32;&#32;&#32;&#32;&#32;&#32;toupper(char_type&#32;__c)<emphasis role="keyword">&#32;const</emphasis>
811 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_toupper(__c);&#32;}
812 
826 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*
827 &#32;&#32;&#32;&#32;&#32;&#32;toupper(char_type&#32;*__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__hi)<emphasis role="keyword">&#32;const</emphasis>
828 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_toupper(__lo,&#32;__hi);&#32;}
829 
842 &#32;&#32;&#32;&#32;&#32;&#32;char_type
843 &#32;&#32;&#32;&#32;&#32;&#32;tolower(char_type&#32;__c)<emphasis role="keyword">&#32;const</emphasis>
844 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_tolower(__c);&#32;}
845 
859 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*
860 &#32;&#32;&#32;&#32;&#32;&#32;tolower(char_type*&#32;__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__hi)<emphasis role="keyword">&#32;const</emphasis>
861 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_tolower(__lo,&#32;__hi);&#32;}
862 
879 &#32;&#32;&#32;&#32;&#32;&#32;char_type
880 &#32;&#32;&#32;&#32;&#32;&#32;widen(<emphasis role="keywordtype">char</emphasis>&#32;__c)<emphasis role="keyword">&#32;const</emphasis>
881 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
882 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_widen_ok)
883 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_widen[<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(__c)];
884 &#32;&#32;&#32;&#32;this-&gt;_M_widen_init();
885 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_widen(__c);
886 &#32;&#32;&#32;&#32;&#32;&#32;}
887 
906 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*
907 &#32;&#32;&#32;&#32;&#32;&#32;widen(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__hi,&#32;char_type*&#32;__to)<emphasis role="keyword">&#32;const</emphasis>
908 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
909 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_widen_ok&#32;==&#32;1)
910 &#32;&#32;&#32;&#32;&#32;&#32;{
911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_expect(__hi&#32;!=&#32;__lo,&#32;<emphasis role="keyword">true</emphasis>))
912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(__to,&#32;__lo,&#32;__hi&#32;-&#32;__lo);
913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__hi;
914 &#32;&#32;&#32;&#32;&#32;&#32;}
915 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_widen_ok)
916 &#32;&#32;&#32;&#32;&#32;&#32;_M_widen_init();
917 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_widen(__lo,&#32;__hi,&#32;__to);
918 &#32;&#32;&#32;&#32;&#32;&#32;}
919 
938 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>
939 &#32;&#32;&#32;&#32;&#32;&#32;narrow(char_type&#32;__c,&#32;<emphasis role="keywordtype">char</emphasis>&#32;__dfault)<emphasis role="keyword">&#32;const</emphasis>
940 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
941 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_narrow[<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(__c)])
942 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_narrow[<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(__c)];
943 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;__t&#32;=&#32;do_narrow(__c,&#32;__dfault);
944 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__t&#32;!=&#32;__dfault)
945 &#32;&#32;&#32;&#32;&#32;&#32;_M_narrow[<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(__c)]&#32;=&#32;__t;
946 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__t;
947 &#32;&#32;&#32;&#32;&#32;&#32;}
948 
971 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*
972 &#32;&#32;&#32;&#32;&#32;&#32;narrow(<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__hi,
973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;__dfault,&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__to)<emphasis role="keyword">&#32;const</emphasis>
974 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
975 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_expect(_M_narrow_ok&#32;==&#32;1,&#32;<emphasis role="keyword">true</emphasis>))
976 &#32;&#32;&#32;&#32;&#32;&#32;{
977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_expect(__hi&#32;!=&#32;__lo,&#32;<emphasis role="keyword">true</emphasis>))
978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(__to,&#32;__lo,&#32;__hi&#32;-&#32;__lo);
979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__hi;
980 &#32;&#32;&#32;&#32;&#32;&#32;}
981 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_narrow_ok)
982 &#32;&#32;&#32;&#32;&#32;&#32;_M_narrow_init();
983 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_narrow(__lo,&#32;__hi,&#32;__dfault,&#32;__to);
984 &#32;&#32;&#32;&#32;&#32;&#32;}
985 
986 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
987 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;DR&#32;695.&#32;ctype&lt;char&gt;::classic_table()&#32;not&#32;accessible.</emphasis>
990 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespacemask">mask</link>*
991 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;throw()
992 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_table;&#32;}
993 
995 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespacemask">mask</link>*
996 &#32;&#32;&#32;&#32;&#32;&#32;classic_table()&#32;throw();
997 &#32;&#32;&#32;&#32;protected:
998 
1005 &#32;&#32;&#32;&#32;&#32;&#32;virtual
1006 &#32;&#32;&#32;&#32;&#32;&#32;~ctype();
1007 
1021 &#32;&#32;&#32;&#32;&#32;&#32;virtual&#32;char_type
1022 &#32;&#32;&#32;&#32;&#32;&#32;do_toupper(char_type&#32;__c)&#32;const;
1023 
1038 &#32;&#32;&#32;&#32;&#32;&#32;virtual&#32;const&#32;char_type*
1039 &#32;&#32;&#32;&#32;&#32;&#32;do_toupper(char_type*&#32;__lo,&#32;const&#32;char_type*&#32;__hi)&#32;const;
1040 
1054 &#32;&#32;&#32;&#32;&#32;&#32;virtual&#32;char_type
1055 &#32;&#32;&#32;&#32;&#32;&#32;do_tolower(char_type&#32;__c)&#32;const;
1056 
1071 &#32;&#32;&#32;&#32;&#32;&#32;virtual&#32;const&#32;char_type*
1072 &#32;&#32;&#32;&#32;&#32;&#32;do_tolower(char_type*&#32;__lo,&#32;const&#32;char_type*&#32;__hi)&#32;const;
1073 
1091 &#32;&#32;&#32;&#32;&#32;&#32;virtual&#32;char_type
1092 &#32;&#32;&#32;&#32;&#32;&#32;do_widen(<emphasis role="keywordtype">char</emphasis>&#32;__c)<emphasis role="keyword">&#32;const</emphasis>
1093 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__c;&#32;}
1094 
1114 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*
1115 &#32;&#32;&#32;&#32;&#32;&#32;do_widen(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__hi,&#32;char_type*&#32;__to)<emphasis role="keyword">&#32;const</emphasis>
1116 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
1117 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_expect(__hi&#32;!=&#32;__lo,&#32;<emphasis role="keyword">true</emphasis>))
1118 &#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(__to,&#32;__lo,&#32;__hi&#32;-&#32;__lo);
1119 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__hi;
1120 &#32;&#32;&#32;&#32;&#32;&#32;}
1121 
1141 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>
1142 &#32;&#32;&#32;&#32;&#32;&#32;do_narrow(char_type&#32;__c,&#32;<emphasis role="keywordtype">char</emphasis>&#32;__dfault&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__unused__)))<emphasis role="keyword">&#32;const</emphasis>
1143 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__c;&#32;}
1144 
1167 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*
1168 &#32;&#32;&#32;&#32;&#32;&#32;do_narrow(<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__hi,
1169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;__dfault&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__unused__)),&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__to)<emphasis role="keyword">&#32;const</emphasis>
1170 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
1171 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_expect(__hi&#32;!=&#32;__lo,&#32;<emphasis role="keyword">true</emphasis>))
1172 &#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(__to,&#32;__lo,&#32;__hi&#32;-&#32;__lo);
1173 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__hi;
1174 &#32;&#32;&#32;&#32;&#32;&#32;}
1175 
1176 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1177 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_narrow_init()&#32;<emphasis role="keyword">const</emphasis>;
1178 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_widen_init()&#32;<emphasis role="keyword">const</emphasis>;
1179 &#32;&#32;&#32;&#32;};
1180 
1181 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_WCHAR_T</emphasis>
1193 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1194 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>ctype&lt;<link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link>&gt;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__ctype_abstract_base&lt;wchar_t&gt;
1195 &#32;&#32;&#32;&#32;{
1196 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1197 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Types:</emphasis>
1199 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">wchar_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;char_type;
1200 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;wctype_t&#32;&#32;&#32;&#32;&#32;&#32;__wmask_type;
1201 
1202 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
1203 &#32;&#32;&#32;&#32;&#32;&#32;__c_locale&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_c_locale_ctype;
1204 
1205 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Pre-computed&#32;narrowed&#32;and&#32;widened&#32;chars.</emphasis>
1206 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_narrow_ok;
1207 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_narrow[128];
1208 &#32;&#32;&#32;&#32;&#32;&#32;wint_t&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_widen[1&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(-1)];
1209 
1210 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Pre-computed&#32;elements&#32;for&#32;do_is.</emphasis>
1211 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacemask">mask</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_bit[16];
1212 &#32;&#32;&#32;&#32;&#32;&#32;__wmask_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_wmask[16];
1213 
1214 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1215 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Data&#32;Members:</emphasis>
1217 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;locale::id&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2src_2cocoa__platform_8h_1ae52362b10d585638f5b96140e90f1b7a">id</link>;
1218 
1226 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1227 &#32;&#32;&#32;&#32;&#32;&#32;ctype(<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0);
1228 
1237 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1238 &#32;&#32;&#32;&#32;&#32;&#32;ctype(__c_locale&#32;__cloc,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0);
1239 
1240 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
1241 &#32;&#32;&#32;&#32;&#32;&#32;__wmask_type
1242 &#32;&#32;&#32;&#32;&#32;&#32;_M_convert_to_wmask(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespacemask">mask</link>&#32;__m)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordflow">throw</emphasis>();
1243 
1245 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
1246 &#32;&#32;&#32;&#32;&#32;&#32;~ctype();
1247 
1261 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1262 &#32;&#32;&#32;&#32;&#32;&#32;do_is(<link linkend="_namespacemask">mask</link>&#32;__m,&#32;char_type&#32;__c)&#32;<emphasis role="keyword">const</emphasis>;
1263 
1280 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*
1281 &#32;&#32;&#32;&#32;&#32;&#32;do_is(<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__hi,&#32;<link linkend="_namespacemask">mask</link>*&#32;__vec)&#32;<emphasis role="keyword">const</emphasis>;
1282 
1298 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*
1299 &#32;&#32;&#32;&#32;&#32;&#32;do_scan_is(<link linkend="_namespacemask">mask</link>&#32;__m,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__hi)&#32;<emphasis role="keyword">const</emphasis>;
1300 
1316 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*
1317 &#32;&#32;&#32;&#32;&#32;&#32;do_scan_not(<link linkend="_namespacemask">mask</link>&#32;__m,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__lo,
1318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__hi)&#32;<emphasis role="keyword">const</emphasis>;
1319 
1333 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;char_type
1334 &#32;&#32;&#32;&#32;&#32;&#32;do_toupper(char_type&#32;__c)&#32;<emphasis role="keyword">const</emphasis>;
1335 
1350 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*
1351 &#32;&#32;&#32;&#32;&#32;&#32;do_toupper(char_type*&#32;__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__hi)&#32;<emphasis role="keyword">const</emphasis>;
1352 
1366 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;char_type
1367 &#32;&#32;&#32;&#32;&#32;&#32;do_tolower(char_type&#32;__c)&#32;<emphasis role="keyword">const</emphasis>;
1368 
1383 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*
1384 &#32;&#32;&#32;&#32;&#32;&#32;do_tolower(char_type*&#32;__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__hi)&#32;<emphasis role="keyword">const</emphasis>;
1385 
1403 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;char_type
1404 &#32;&#32;&#32;&#32;&#32;&#32;do_widen(<emphasis role="keywordtype">char</emphasis>&#32;__c)&#32;<emphasis role="keyword">const</emphasis>;
1405 
1425 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*
1426 &#32;&#32;&#32;&#32;&#32;&#32;do_widen(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__hi,&#32;char_type*&#32;__to)&#32;<emphasis role="keyword">const</emphasis>;
1427 
1448 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>
1449 &#32;&#32;&#32;&#32;&#32;&#32;do_narrow(char_type&#32;__c,&#32;<emphasis role="keywordtype">char</emphasis>&#32;__dfault)&#32;<emphasis role="keyword">const</emphasis>;
1450 
1474 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*
1475 &#32;&#32;&#32;&#32;&#32;&#32;do_narrow(<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__hi,
1476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;__dfault,&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__to)&#32;<emphasis role="keyword">const</emphasis>;
1477 
1478 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;use&#32;at&#32;construction&#32;time&#32;only.</emphasis>
1479 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1480 &#32;&#32;&#32;&#32;&#32;&#32;_M_initialize_ctype()&#32;throw();
1481 &#32;&#32;&#32;&#32;};
1482 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//_GLIBCXX_USE_WCHAR_T</emphasis>
1483 
1485 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
1486 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>ctype_byname&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;ctype&lt;_CharT&gt;
1487 &#32;&#32;&#32;&#32;{
1488 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1489 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;ctype&lt;_CharT&gt;::mask&#32;&#32;<link linkend="_namespacemask">mask</link>;
1490 
1491 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1492 &#32;&#32;&#32;&#32;&#32;&#32;ctype_byname(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0);
1493 
1494 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1495 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1496 &#32;&#32;&#32;&#32;&#32;&#32;ctype_byname(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&amp;&#32;__s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0)
1497 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;ctype_byname(__s.c_str(),&#32;__refs)&#32;{&#32;}
1498 <emphasis role="preprocessor">#endif</emphasis>
1499 
1500 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
1501 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
1502 &#32;&#32;&#32;&#32;&#32;&#32;~ctype_byname()&#32;{&#32;}
1503 &#32;&#32;&#32;&#32;};
1504 
1506 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1507 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>ctype_byname&lt;char&gt;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;ctype&lt;char&gt;
1508 &#32;&#32;&#32;&#32;{
1509 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1510 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1511 &#32;&#32;&#32;&#32;&#32;&#32;ctype_byname(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0);
1512 
1513 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1514 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1515 &#32;&#32;&#32;&#32;&#32;&#32;ctype_byname(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&amp;&#32;__s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0);
1516 <emphasis role="preprocessor">#endif</emphasis>
1517 
1518 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
1519 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
1520 &#32;&#32;&#32;&#32;&#32;&#32;~ctype_byname();
1521 &#32;&#32;&#32;&#32;};
1522 
1523 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_WCHAR_T</emphasis>
1524 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1525 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>ctype_byname&lt;<link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link>&gt;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;ctype&lt;wchar_t&gt;
1526 &#32;&#32;&#32;&#32;{
1527 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1528 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1529 &#32;&#32;&#32;&#32;&#32;&#32;ctype_byname(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0);
1530 
1531 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1532 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1533 &#32;&#32;&#32;&#32;&#32;&#32;ctype_byname(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&amp;&#32;__s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0);
1534 <emphasis role="preprocessor">#endif</emphasis>
1535 
1536 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
1537 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
1538 &#32;&#32;&#32;&#32;&#32;&#32;~ctype_byname();
1539 &#32;&#32;&#32;&#32;};
1540 <emphasis role="preprocessor">#endif</emphasis>
1541 
1542 _GLIBCXX_END_NAMESPACE_VERSION
1543 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
1544 
1545 <emphasis role="comment">//&#32;Include&#32;host&#32;and&#32;configuration&#32;specific&#32;ctype&#32;inlines.</emphasis>
1546 <emphasis role="preprocessor">#include&#32;&lt;bits/ctype_inline.h&gt;</emphasis>
1547 
1548 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
1549 {
1550 _GLIBCXX_BEGIN_NAMESPACE_VERSION
1551 
1552 &#32;&#32;<emphasis role="comment">//&#32;22.2.2&#32;&#32;The&#32;numeric&#32;category.</emphasis>
1553 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__num_base
1554 &#32;&#32;{
1555 &#32;&#32;<emphasis role="keyword">public</emphasis>:
1556 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NB:&#32;Code&#32;depends&#32;on&#32;the&#32;order&#32;of&#32;_S_atoms_out&#32;elements.</emphasis>
1557 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Below&#32;are&#32;the&#32;indices&#32;into&#32;_S_atoms_out.</emphasis>
1558 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>
1559 &#32;&#32;&#32;&#32;&#32;&#32;{
1560 &#32;&#32;&#32;&#32;_S_ominus,
1561 &#32;&#32;&#32;&#32;_S_oplus,
1562 &#32;&#32;&#32;&#32;_S_ox,
1563 &#32;&#32;&#32;&#32;_S_oX,
1564 &#32;&#32;&#32;&#32;_S_odigits,
1565 &#32;&#32;&#32;&#32;_S_odigits_end&#32;=&#32;_S_odigits&#32;+&#32;16,
1566 &#32;&#32;&#32;&#32;_S_oudigits&#32;=&#32;_S_odigits_end,
1567 &#32;&#32;&#32;&#32;_S_oudigits_end&#32;=&#32;_S_oudigits&#32;+&#32;16,
1568 &#32;&#32;&#32;&#32;_S_oe&#32;=&#32;_S_odigits&#32;+&#32;14,&#32;&#32;<emphasis role="comment">//&#32;For&#32;scientific&#32;notation,&#32;&apos;e&apos;</emphasis>
1569 &#32;&#32;&#32;&#32;_S_oE&#32;=&#32;_S_oudigits&#32;+&#32;14,&#32;<emphasis role="comment">//&#32;For&#32;scientific&#32;notation,&#32;&apos;E&apos;</emphasis>
1570 &#32;&#32;&#32;&#32;_S_oend&#32;=&#32;_S_oudigits_end
1571 &#32;&#32;&#32;&#32;&#32;&#32;};
1572 
1573 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;A&#32;list&#32;of&#32;valid&#32;numeric&#32;literals&#32;for&#32;output.&#32;&#32;This&#32;array</emphasis>
1574 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;contains&#32;chars&#32;that&#32;will&#32;be&#32;passed&#32;through&#32;the&#32;current&#32;locale&apos;s</emphasis>
1575 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ctype&lt;_CharT&gt;.widen()&#32;and&#32;then&#32;used&#32;to&#32;render&#32;numbers.</emphasis>
1576 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;the&#32;standard&#32;&quot;C&quot;&#32;locale,&#32;this&#32;is</emphasis>
1577 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;-+xX0123456789abcdef0123456789ABCDEF&quot;.</emphasis>
1578 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;_S_atoms_out;
1579 
1580 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;String&#32;literal&#32;of&#32;acceptable&#32;(narrow)&#32;input,&#32;for&#32;num_get.</emphasis>
1581 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;-+xX0123456789abcdefABCDEF&quot;</emphasis>
1582 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;_S_atoms_in;
1583 
1584 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>
1585 &#32;&#32;&#32;&#32;{
1586 &#32;&#32;&#32;&#32;&#32;&#32;_S_iminus,
1587 &#32;&#32;&#32;&#32;&#32;&#32;_S_iplus,
1588 &#32;&#32;&#32;&#32;&#32;&#32;_S_ix,
1589 &#32;&#32;&#32;&#32;&#32;&#32;_S_iX,
1590 &#32;&#32;&#32;&#32;&#32;&#32;_S_izero,
1591 &#32;&#32;&#32;&#32;&#32;&#32;_S_ie&#32;=&#32;_S_izero&#32;+&#32;14,
1592 &#32;&#32;&#32;&#32;&#32;&#32;_S_iE&#32;=&#32;_S_izero&#32;+&#32;20,
1593 &#32;&#32;&#32;&#32;&#32;&#32;_S_iend&#32;=&#32;26
1594 &#32;&#32;&#32;&#32;};
1595 
1596 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;num_put</emphasis>
1597 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Construct&#32;and&#32;return&#32;valid&#32;scanf&#32;format&#32;for&#32;floating&#32;point&#32;types.</emphasis>
1598 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1599 &#32;&#32;&#32;&#32;_S_format_float(<emphasis role="keyword">const</emphasis>&#32;ios_base&amp;&#32;__io,&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__fptr,&#32;<emphasis role="keywordtype">char</emphasis>&#32;__mod)&#32;<emphasis role="keywordflow">throw</emphasis>();
1600 &#32;&#32;};
1601 
1602 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
1603 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__numpunct_cache&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;locale::facet
1604 &#32;&#32;&#32;&#32;{
1605 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_grouping;
1606 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_grouping_size;
1607 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_use_grouping;
1608 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_truename;
1609 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_truename_size;
1610 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_falsename;
1611 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_falsename_size;
1612 &#32;&#32;&#32;&#32;&#32;&#32;_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_decimal_point;
1613 &#32;&#32;&#32;&#32;&#32;&#32;_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_thousands_sep;
1614 
1615 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;A&#32;list&#32;of&#32;valid&#32;numeric&#32;literals&#32;for&#32;output:&#32;in&#32;the&#32;standard</emphasis>
1616 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;C&quot;&#32;locale,&#32;this&#32;is&#32;&quot;-+xX0123456789abcdef0123456789ABCDEF&quot;.</emphasis>
1617 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;array&#32;contains&#32;the&#32;chars&#32;after&#32;having&#32;been&#32;passed</emphasis>
1618 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;through&#32;the&#32;current&#32;locale&apos;s&#32;ctype&lt;_CharT&gt;.widen().</emphasis>
1619 &#32;&#32;&#32;&#32;&#32;&#32;_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_atoms_out[__num_base::_S_oend];
1620 
1621 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;A&#32;list&#32;of&#32;valid&#32;numeric&#32;literals&#32;for&#32;input:&#32;in&#32;the&#32;standard</emphasis>
1622 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;C&quot;&#32;locale,&#32;this&#32;is&#32;&quot;-+xX0123456789abcdefABCDEF&quot;</emphasis>
1623 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;array&#32;contains&#32;the&#32;chars&#32;after&#32;having&#32;been&#32;passed</emphasis>
1624 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;through&#32;the&#32;current&#32;locale&apos;s&#32;ctype&lt;_CharT&gt;.widen().</emphasis>
1625 &#32;&#32;&#32;&#32;&#32;&#32;_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_atoms_in[__num_base::_S_iend];
1626 
1627 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_allocated;
1628 
1629 &#32;&#32;&#32;&#32;&#32;&#32;__numpunct_cache(<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0)
1630 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;facet(__refs),&#32;_M_grouping(0),&#32;_M_grouping_size(0),
1631 &#32;&#32;&#32;&#32;_M_use_grouping(<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>),
1632 &#32;&#32;&#32;&#32;_M_truename(0),&#32;_M_truename_size(0),&#32;_M_falsename(0),
1633 &#32;&#32;&#32;&#32;_M_falsename_size(0),&#32;_M_decimal_point(_CharT()),
1634 &#32;&#32;&#32;&#32;_M_thousands_sep(_CharT()),&#32;_M_allocated(<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)
1635 &#32;&#32;&#32;&#32;{&#32;}
1636 
1637 &#32;&#32;&#32;&#32;&#32;&#32;~__numpunct_cache();
1638 
1639 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1640 &#32;&#32;&#32;&#32;&#32;&#32;_M_cache(<emphasis role="keyword">const</emphasis>&#32;locale&amp;&#32;__loc);
1641 
1642 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1643 &#32;&#32;&#32;&#32;&#32;&#32;__numpunct_cache&amp;
1644 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;__numpunct_cache&amp;);
1645 
1646 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1647 &#32;&#32;&#32;&#32;&#32;&#32;__numpunct_cache(<emphasis role="keyword">const</emphasis>&#32;__numpunct_cache&amp;);
1648 &#32;&#32;&#32;&#32;};
1649 
1650 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
1651 &#32;&#32;&#32;&#32;__numpunct_cache&lt;_CharT&gt;::~__numpunct_cache()
1652 &#32;&#32;&#32;&#32;{
1653 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_allocated)
1654 &#32;&#32;&#32;&#32;{
1655 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;[]&#32;_M_grouping;
1656 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;[]&#32;_M_truename;
1657 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;[]&#32;_M_falsename;
1658 &#32;&#32;&#32;&#32;}
1659 &#32;&#32;&#32;&#32;}
1660 
1661 _GLIBCXX_BEGIN_NAMESPACE_CXX11
1662 
1677 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
1678 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>numpunct&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;locale::facet
1679 &#32;&#32;&#32;&#32;{
1680 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1681 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Types:</emphasis>
1684 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char_type;
1685 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT&gt;</link>&#32;&#32;string_type;
1687 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__numpunct_cache&lt;_CharT&gt;&#32;&#32;__cache_type;
1688 
1689 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
1690 &#32;&#32;&#32;&#32;&#32;&#32;__cache_type*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_data;
1691 
1692 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1694 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;locale::id&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2src_2cocoa__platform_8h_1ae52362b10d585638f5b96140e90f1b7a">id</link>;
1695 
1701 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1702 &#32;&#32;&#32;&#32;&#32;&#32;numpunct(<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0)
1703 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;facet(__refs),&#32;_M_data(0)
1704 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_initialize_numpunct();&#32;}
1705 
1715 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1716 &#32;&#32;&#32;&#32;&#32;&#32;numpunct(__cache_type*&#32;__cache,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0)
1717 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;facet(__refs),&#32;_M_data(__cache)
1718 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_initialize_numpunct();&#32;}
1719 
1729 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1730 &#32;&#32;&#32;&#32;&#32;&#32;numpunct(__c_locale&#32;__cloc,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0)
1731 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;facet(__refs),&#32;_M_data(0)
1732 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_initialize_numpunct(__cloc);&#32;}
1733 
1743 &#32;&#32;&#32;&#32;&#32;&#32;char_type
1744 &#32;&#32;&#32;&#32;&#32;&#32;decimal_point()<emphasis role="keyword">&#32;const</emphasis>
1745 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_decimal_point();&#32;}
1746 
1756 &#32;&#32;&#32;&#32;&#32;&#32;char_type
1757 &#32;&#32;&#32;&#32;&#32;&#32;thousands_sep()<emphasis role="keyword">&#32;const</emphasis>
1758 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_thousands_sep();&#32;}
1759 
1787 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>
1788 &#32;&#32;&#32;&#32;&#32;&#32;grouping()<emphasis role="keyword">&#32;const</emphasis>
1789 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_grouping();&#32;}
1790 
1800 &#32;&#32;&#32;&#32;&#32;&#32;string_type
1801 &#32;&#32;&#32;&#32;&#32;&#32;truename()<emphasis role="keyword">&#32;const</emphasis>
1802 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_truename();&#32;}
1803 
1813 &#32;&#32;&#32;&#32;&#32;&#32;string_type
1814 &#32;&#32;&#32;&#32;&#32;&#32;falsename()<emphasis role="keyword">&#32;const</emphasis>
1815 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_falsename();&#32;}
1816 
1817 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
1819 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
1820 &#32;&#32;&#32;&#32;&#32;&#32;~numpunct();
1821 
1830 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;char_type
1831 &#32;&#32;&#32;&#32;&#32;&#32;do_decimal_point()<emphasis role="keyword">&#32;const</emphasis>
1832 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data-&gt;_M_decimal_point;&#32;}
1833 
1842 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;char_type
1843 &#32;&#32;&#32;&#32;&#32;&#32;do_thousands_sep()<emphasis role="keyword">&#32;const</emphasis>
1844 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data-&gt;_M_thousands_sep;&#32;}
1845 
1855 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>
1856 &#32;&#32;&#32;&#32;&#32;&#32;do_grouping()<emphasis role="keyword">&#32;const</emphasis>
1857 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data-&gt;_M_grouping;&#32;}
1858 
1868 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;string_type
1869 &#32;&#32;&#32;&#32;&#32;&#32;do_truename()<emphasis role="keyword">&#32;const</emphasis>
1870 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data-&gt;_M_truename;&#32;}
1871 
1881 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;string_type
1882 &#32;&#32;&#32;&#32;&#32;&#32;do_falsename()<emphasis role="keyword">&#32;const</emphasis>
1883 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data-&gt;_M_falsename;&#32;}
1884 
1885 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;use&#32;at&#32;construction&#32;time&#32;only.</emphasis>
1886 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1887 &#32;&#32;&#32;&#32;&#32;&#32;_M_initialize_numpunct(__c_locale&#32;__cloc&#32;=&#32;0);
1888 &#32;&#32;&#32;&#32;};
1889 
1890 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
1891 &#32;&#32;&#32;&#32;locale::id&#32;numpunct&lt;_CharT&gt;::id;
1892 
1893 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1894 &#32;&#32;&#32;&#32;numpunct&lt;char&gt;::~numpunct();
1895 
1896 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1897 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1898 &#32;&#32;&#32;&#32;numpunct&lt;char&gt;::_M_initialize_numpunct(__c_locale&#32;__cloc);
1899 
1900 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_WCHAR_T</emphasis>
1901 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1902 &#32;&#32;&#32;&#32;numpunct&lt;wchar_t&gt;::~numpunct();
1903 
1904 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1905 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1906 &#32;&#32;&#32;&#32;numpunct&lt;wchar_t&gt;::_M_initialize_numpunct(__c_locale&#32;__cloc);
1907 <emphasis role="preprocessor">#endif</emphasis>
1908 
1910 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
1911 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>numpunct_byname&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;numpunct&lt;_CharT&gt;
1912 &#32;&#32;&#32;&#32;{
1913 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1914 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char_type;
1915 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT&gt;</link>&#32;&#32;string_type;
1916 
1917 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1918 &#32;&#32;&#32;&#32;&#32;&#32;numpunct_byname(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0)
1919 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;numpunct&lt;_CharT&gt;(__refs)
1920 &#32;&#32;&#32;&#32;&#32;&#32;{
1921 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_strcmp(__s,&#32;<emphasis role="stringliteral">&quot;C&quot;</emphasis>)&#32;!=&#32;0
1922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__builtin_strcmp(__s,&#32;<emphasis role="stringliteral">&quot;POSIX&quot;</emphasis>)&#32;!=&#32;0)
1923 &#32;&#32;&#32;&#32;&#32;&#32;{
1924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__c_locale&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
1925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_S_create_c_locale(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>,&#32;__s);
1926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_initialize_numpunct(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
1927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_S_destroy_c_locale(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
1928 &#32;&#32;&#32;&#32;&#32;&#32;}
1929 &#32;&#32;&#32;&#32;&#32;&#32;}
1930 
1931 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1932 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1933 &#32;&#32;&#32;&#32;&#32;&#32;numpunct_byname(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&amp;&#32;__s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0)
1934 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;numpunct_byname(__s.c_str(),&#32;__refs)&#32;{&#32;}
1935 <emphasis role="preprocessor">#endif</emphasis>
1936 
1937 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
1938 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
1939 &#32;&#32;&#32;&#32;&#32;&#32;~numpunct_byname()&#32;{&#32;}
1940 &#32;&#32;&#32;&#32;};
1941 
1942 _GLIBCXX_END_NAMESPACE_CXX11
1943 
1944 _GLIBCXX_BEGIN_NAMESPACE_LDBL
1945 
1959 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_InIter&gt;
1960 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>num_get&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;locale::facet
1961 &#32;&#32;&#32;&#32;{
1962 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1963 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Types:</emphasis>
1966 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char_type;
1967 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_InIter&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iter_type;
1969 
1971 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;locale::id&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2src_2cocoa__platform_8h_1ae52362b10d585638f5b96140e90f1b7a">id</link>;
1972 
1980 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1981 &#32;&#32;&#32;&#32;&#32;&#32;num_get(<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0)&#32;:&#32;facet(__refs)&#32;{&#32;}
1982 
2006 &#32;&#32;&#32;&#32;&#32;&#32;iter_type
2007 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(iter_type&#32;__in,&#32;iter_type&#32;__end,&#32;ios_base&amp;&#32;__io,
2008 &#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;<emphasis role="keywordtype">bool</emphasis>&amp;&#32;__v)<emphasis role="keyword">&#32;const</emphasis>
2009 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_get(__in,&#32;__end,&#32;__io,&#32;__err,&#32;__v);&#32;}
2010 
2012 
2043 &#32;&#32;&#32;&#32;&#32;&#32;iter_type
2044 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(iter_type&#32;__in,&#32;iter_type&#32;__end,&#32;ios_base&amp;&#32;__io,
2045 &#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;<emphasis role="keywordtype">long</emphasis>&amp;&#32;__v)<emphasis role="keyword">&#32;const</emphasis>
2046 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_get(__in,&#32;__end,&#32;__io,&#32;__err,&#32;__v);&#32;}
2047 
2048 &#32;&#32;&#32;&#32;&#32;&#32;iter_type
2049 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(iter_type&#32;__in,&#32;iter_type&#32;__end,&#32;ios_base&amp;&#32;__io,
2050 &#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&amp;&#32;__v)<emphasis role="keyword">&#32;const</emphasis>
2051 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_get(__in,&#32;__end,&#32;__io,&#32;__err,&#32;__v);&#32;}
2052 
2053 &#32;&#32;&#32;&#32;&#32;&#32;iter_type
2054 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(iter_type&#32;__in,&#32;iter_type&#32;__end,&#32;ios_base&amp;&#32;__io,
2055 &#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&amp;&#32;__v)<emphasis role="keyword">&#32;&#32;&#32;const</emphasis>
2056 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_get(__in,&#32;__end,&#32;__io,&#32;__err,&#32;__v);&#32;}
2057 
2058 &#32;&#32;&#32;&#32;&#32;&#32;iter_type
2059 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(iter_type&#32;__in,&#32;iter_type&#32;__end,&#32;ios_base&amp;&#32;__io,
2060 &#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&amp;&#32;__v)<emphasis role="keyword">&#32;&#32;const</emphasis>
2061 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_get(__in,&#32;__end,&#32;__io,&#32;__err,&#32;__v);&#32;}
2062 
2063 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_LONG_LONG</emphasis>
2064 &#32;&#32;&#32;&#32;&#32;&#32;iter_type
2065 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(iter_type&#32;__in,&#32;iter_type&#32;__end,&#32;ios_base&amp;&#32;__io,
2066 &#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&amp;&#32;__v)<emphasis role="keyword">&#32;const</emphasis>
2067 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_get(__in,&#32;__end,&#32;__io,&#32;__err,&#32;__v);&#32;}
2068 
2069 &#32;&#32;&#32;&#32;&#32;&#32;iter_type
2070 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(iter_type&#32;__in,&#32;iter_type&#32;__end,&#32;ios_base&amp;&#32;__io,
2071 &#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&amp;&#32;__v)<emphasis role="keyword">&#32;&#32;const</emphasis>
2072 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_get(__in,&#32;__end,&#32;__io,&#32;__err,&#32;__v);&#32;}
2073 <emphasis role="preprocessor">#endif</emphasis>
2075 
2077 
2103 &#32;&#32;&#32;&#32;&#32;&#32;iter_type
2104 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(iter_type&#32;__in,&#32;iter_type&#32;__end,&#32;ios_base&amp;&#32;__io,
2105 &#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;<emphasis role="keywordtype">float</emphasis>&amp;&#32;__v)<emphasis role="keyword">&#32;const</emphasis>
2106 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_get(__in,&#32;__end,&#32;__io,&#32;__err,&#32;__v);&#32;}
2107 
2108 &#32;&#32;&#32;&#32;&#32;&#32;iter_type
2109 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(iter_type&#32;__in,&#32;iter_type&#32;__end,&#32;ios_base&amp;&#32;__io,
2110 &#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;<emphasis role="keywordtype">double</emphasis>&amp;&#32;__v)<emphasis role="keyword">&#32;const</emphasis>
2111 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_get(__in,&#32;__end,&#32;__io,&#32;__err,&#32;__v);&#32;}
2112 
2113 &#32;&#32;&#32;&#32;&#32;&#32;iter_type
2114 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(iter_type&#32;__in,&#32;iter_type&#32;__end,&#32;ios_base&amp;&#32;__io,
2115 &#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&amp;&#32;__v)<emphasis role="keyword">&#32;const</emphasis>
2116 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_get(__in,&#32;__end,&#32;__io,&#32;__err,&#32;__v);&#32;}
2118 
2146 &#32;&#32;&#32;&#32;&#32;&#32;iter_type
2147 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(iter_type&#32;__in,&#32;iter_type&#32;__end,&#32;ios_base&amp;&#32;__io,
2148 &#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;<emphasis role="keywordtype">void</emphasis>*&amp;&#32;__v)<emphasis role="keyword">&#32;const</emphasis>
2149 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_get(__in,&#32;__end,&#32;__io,&#32;__err,&#32;__v);&#32;}
2150 
2151 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
2153 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;~num_get()&#32;{&#32;}
2154 
2155 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_DEFAULT_ABI_TAG
2156 &#32;&#32;&#32;&#32;&#32;&#32;iter_type
2157 &#32;&#32;&#32;&#32;&#32;&#32;_M_extract_float(iter_type,&#32;iter_type,&#32;ios_base&amp;,&#32;ios_base::iostate&amp;,
2158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&amp;)&#32;<emphasis role="keyword">const</emphasis>;
2159 
2160 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ValueT&gt;
2161 &#32;&#32;&#32;&#32;_GLIBCXX_DEFAULT_ABI_TAG
2162 &#32;&#32;&#32;&#32;iter_type
2163 &#32;&#32;&#32;&#32;_M_extract_int(iter_type,&#32;iter_type,&#32;ios_base&amp;,&#32;ios_base::iostate&amp;,
2164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ValueT&amp;)&#32;<emphasis role="keyword">const</emphasis>;
2165 
2166 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT2&gt;
2167 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__enable_if&lt;__is_char&lt;_CharT2&gt;::__value,&#32;<emphasis role="keywordtype">int</emphasis>&gt;::__type
2168 &#32;&#32;&#32;&#32;_M_find(<emphasis role="keyword">const</emphasis>&#32;_CharT2*,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__len,&#32;_CharT2&#32;__c)<emphasis role="keyword">&#32;const</emphasis>
2169 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
2170 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;__ret&#32;=&#32;-1;
2171 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__len&#32;&lt;=&#32;10)
2172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__c&#32;&gt;=&#32;_CharT2(<emphasis role="charliteral">&apos;0&apos;</emphasis>)&#32;&amp;&amp;&#32;__c&#32;&lt;&#32;_CharT2(_CharT2(<emphasis role="charliteral">&apos;0&apos;</emphasis>)&#32;+&#32;__len))
2174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ret&#32;=&#32;__c&#32;-&#32;_CharT2(<emphasis role="charliteral">&apos;0&apos;</emphasis>);
2175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2176 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__c&#32;&gt;=&#32;_CharT2(<emphasis role="charliteral">&apos;0&apos;</emphasis>)&#32;&amp;&amp;&#32;__c&#32;&lt;=&#32;_CharT2(<emphasis role="charliteral">&apos;9&apos;</emphasis>))
2179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ret&#32;=&#32;__c&#32;-&#32;_CharT2(<emphasis role="charliteral">&apos;0&apos;</emphasis>);
2180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__c&#32;&gt;=&#32;_CharT2(<emphasis role="charliteral">&apos;a&apos;</emphasis>)&#32;&amp;&amp;&#32;__c&#32;&lt;=&#32;_CharT2(<emphasis role="charliteral">&apos;f&apos;</emphasis>))
2181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ret&#32;=&#32;10&#32;+&#32;(__c&#32;-&#32;_CharT2(<emphasis role="charliteral">&apos;a&apos;</emphasis>));
2182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__c&#32;&gt;=&#32;_CharT2(<emphasis role="charliteral">&apos;A&apos;</emphasis>)&#32;&amp;&amp;&#32;__c&#32;&lt;=&#32;_CharT2(<emphasis role="charliteral">&apos;F&apos;</emphasis>))
2183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ret&#32;=&#32;10&#32;+&#32;(__c&#32;-&#32;_CharT2(<emphasis role="charliteral">&apos;A&apos;</emphasis>));
2184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2185 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
2186 &#32;&#32;&#32;&#32;}
2187 
2188 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT2&gt;
2189 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__enable_if&lt;!__is_char&lt;_CharT2&gt;::__value,
2190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&gt;::__type
2191 &#32;&#32;&#32;&#32;_M_find(<emphasis role="keyword">const</emphasis>&#32;_CharT2*&#32;__zero,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__len,&#32;_CharT2&#32;__c)<emphasis role="keyword">&#32;const</emphasis>
2192 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
2193 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;__ret&#32;=&#32;-1;
2194 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__q&#32;=&#32;char_traits&lt;_CharT2&gt;::find(__zero,&#32;__len,&#32;__c);
2195 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__q)
2196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ret&#32;=&#32;__q&#32;-&#32;__zero;
2198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__ret&#32;&gt;&#32;15)
2199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ret&#32;-=&#32;6;
2200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2201 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
2202 &#32;&#32;&#32;&#32;}
2203 
2205 
2219 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
2220 &#32;&#32;&#32;&#32;&#32;&#32;do_get(iter_type,&#32;iter_type,&#32;ios_base&amp;,&#32;ios_base::iostate&amp;,&#32;<emphasis role="keywordtype">bool</emphasis>&amp;)&#32;<emphasis role="keyword">const</emphasis>;
2221 
2222 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
2223 &#32;&#32;&#32;&#32;&#32;&#32;do_get(iter_type&#32;__beg,&#32;iter_type&#32;__end,&#32;ios_base&amp;&#32;__io,
2224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;<emphasis role="keywordtype">long</emphasis>&amp;&#32;__v)<emphasis role="keyword">&#32;const</emphasis>
2225 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_extract_int(__beg,&#32;__end,&#32;__io,&#32;__err,&#32;__v);&#32;}
2226 
2227 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
2228 &#32;&#32;&#32;&#32;&#32;&#32;do_get(iter_type&#32;__beg,&#32;iter_type&#32;__end,&#32;ios_base&amp;&#32;__io,
2229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&amp;&#32;__v)<emphasis role="keyword">&#32;const</emphasis>
2230 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_extract_int(__beg,&#32;__end,&#32;__io,&#32;__err,&#32;__v);&#32;}
2231 
2232 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
2233 &#32;&#32;&#32;&#32;&#32;&#32;do_get(iter_type&#32;__beg,&#32;iter_type&#32;__end,&#32;ios_base&amp;&#32;__io,
2234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&amp;&#32;__v)<emphasis role="keyword">&#32;const</emphasis>
2235 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_extract_int(__beg,&#32;__end,&#32;__io,&#32;__err,&#32;__v);&#32;}
2236 
2237 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
2238 &#32;&#32;&#32;&#32;&#32;&#32;do_get(iter_type&#32;__beg,&#32;iter_type&#32;__end,&#32;ios_base&amp;&#32;__io,
2239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&amp;&#32;__v)<emphasis role="keyword">&#32;const</emphasis>
2240 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_extract_int(__beg,&#32;__end,&#32;__io,&#32;__err,&#32;__v);&#32;}
2241 
2242 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_LONG_LONG</emphasis>
2243 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
2244 &#32;&#32;&#32;&#32;&#32;&#32;do_get(iter_type&#32;__beg,&#32;iter_type&#32;__end,&#32;ios_base&amp;&#32;__io,
2245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&amp;&#32;__v)<emphasis role="keyword">&#32;const</emphasis>
2246 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_extract_int(__beg,&#32;__end,&#32;__io,&#32;__err,&#32;__v);&#32;}
2247 
2248 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
2249 &#32;&#32;&#32;&#32;&#32;&#32;do_get(iter_type&#32;__beg,&#32;iter_type&#32;__end,&#32;ios_base&amp;&#32;__io,
2250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&amp;&#32;__v)<emphasis role="keyword">&#32;const</emphasis>
2251 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_extract_int(__beg,&#32;__end,&#32;__io,&#32;__err,&#32;__v);&#32;}
2252 <emphasis role="preprocessor">#endif</emphasis>
2253 
2254 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
2255 &#32;&#32;&#32;&#32;&#32;&#32;do_get(iter_type,&#32;iter_type,&#32;ios_base&amp;,&#32;ios_base::iostate&amp;,&#32;<emphasis role="keywordtype">float</emphasis>&amp;)&#32;<emphasis role="keyword">const</emphasis>;
2256 
2257 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
2258 &#32;&#32;&#32;&#32;&#32;&#32;do_get(iter_type,&#32;iter_type,&#32;ios_base&amp;,&#32;ios_base::iostate&amp;,
2259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&amp;)&#32;<emphasis role="keyword">const</emphasis>;
2260 
2261 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;XXX&#32;GLIBCXX_ABI&#32;Deprecated</emphasis>
2262 <emphasis role="preprocessor">#if&#32;defined&#32;_GLIBCXX_LONG_DOUBLE_COMPAT&#32;&amp;&amp;&#32;defined&#32;__LONG_DOUBLE_128__</emphasis>
2263 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;__gnu_cxx_ldbl128::num_get&#32;and&#32;__gnu_cxx_ieee128::num_get</emphasis>
2264 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;this&#32;entry&#32;in&#32;the&#32;vtable&#32;is&#32;for&#32;a&#32;64-bit&#32;&quot;long&#32;double&quot;&#32;with&#32;the</emphasis>
2265 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;same&#32;format&#32;as&#32;double.&#32;This&#32;keeps&#32;the&#32;vtable&#32;layout&#32;consistent</emphasis>
2266 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;with&#32;std::num_get&#32;(visible&#32;when&#32;-mlong-double-64&#32;is&#32;used).</emphasis>
2267 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
2268 &#32;&#32;&#32;&#32;&#32;&#32;__do_get(iter_type,&#32;iter_type,&#32;ios_base&amp;,&#32;ios_base::iostate&amp;,
2269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&amp;)&#32;<emphasis role="keyword">const</emphasis>;
2270 <emphasis role="preprocessor">#else</emphasis>
2271 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
2272 &#32;&#32;&#32;&#32;&#32;&#32;do_get(iter_type,&#32;iter_type,&#32;ios_base&amp;,&#32;ios_base::iostate&amp;,
2273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&amp;)&#32;<emphasis role="keyword">const</emphasis>;
2274 <emphasis role="preprocessor">#endif</emphasis>
2275 
2276 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
2277 &#32;&#32;&#32;&#32;&#32;&#32;do_get(iter_type,&#32;iter_type,&#32;ios_base&amp;,&#32;ios_base::iostate&amp;,&#32;<emphasis role="keywordtype">void</emphasis>*&amp;)&#32;<emphasis role="keyword">const</emphasis>;
2278 
2279 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;XXX&#32;GLIBCXX_ABI&#32;Deprecated</emphasis>
2280 <emphasis role="preprocessor">#if&#32;defined&#32;_GLIBCXX_LONG_DOUBLE_ALT128_COMPAT&#32;\</emphasis>
2281 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;defined&#32;__LONG_DOUBLE_IEEE128__</emphasis>
2282 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;__gnu_cxx_ieee128::num_get&#32;this&#32;entry&#32;in&#32;the&#32;vtable&#32;is&#32;for</emphasis>
2283 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;non-IEEE&#32;128-bit&#32;&quot;long&#32;double&quot;&#32;(aka&#32;&quot;double&#32;double&quot;).&#32;This</emphasis>
2284 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;is&#32;consistent&#32;with&#32;__gnu_cxx_ldbl128::num_get&#32;(-mabi=ibmlongdouble)</emphasis>
2285 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
2286 &#32;&#32;&#32;&#32;&#32;&#32;__do_get(iter_type,&#32;iter_type,&#32;ios_base&amp;,&#32;ios_base::iostate&amp;,
2287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ibm128&amp;)&#32;<emphasis role="keyword">const</emphasis>;
2288 <emphasis role="preprocessor">#endif</emphasis>
2289 
2290 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;XXX&#32;GLIBCXX_ABI&#32;Deprecated</emphasis>
2291 <emphasis role="preprocessor">#if&#32;defined&#32;_GLIBCXX_LONG_DOUBLE_COMPAT&#32;&amp;&amp;&#32;defined&#32;__LONG_DOUBLE_128__</emphasis>
2292 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;__gnu_cxx_ldbl128::num_get&#32;and&#32;__gnu_cxx_ieee128::num_get</emphasis>
2293 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;this&#32;entry&#32;in&#32;the&#32;vtable&#32;is&#32;for&#32;the&#32;128-bit&#32;&quot;long&#32;double&quot;&#32;type.</emphasis>
2294 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
2295 &#32;&#32;&#32;&#32;&#32;&#32;do_get(iter_type,&#32;iter_type,&#32;ios_base&amp;,&#32;ios_base::iostate&amp;,
2296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&amp;)&#32;<emphasis role="keyword">const</emphasis>;
2297 <emphasis role="preprocessor">#endif</emphasis>
2299 &#32;&#32;&#32;&#32;};
2300 
2301 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_InIter&gt;
2302 &#32;&#32;&#32;&#32;locale::id&#32;num_get&lt;_CharT,&#32;_InIter&gt;::id;
2303 
2304 
2317 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutIter&gt;
2318 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>num_put&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;locale::facet
2319 &#32;&#32;&#32;&#32;{
2320 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
2321 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Types:</emphasis>
2324 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char_type;
2325 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_OutIter&#32;&#32;&#32;&#32;&#32;&#32;iter_type;
2327 
2329 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;locale::id&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2src_2cocoa__platform_8h_1ae52362b10d585638f5b96140e90f1b7a">id</link>;
2330 
2338 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
2339 &#32;&#32;&#32;&#32;&#32;&#32;num_put(<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0)&#32;:&#32;facet(__refs)&#32;{&#32;}
2340 
2356 &#32;&#32;&#32;&#32;&#32;&#32;iter_type
2357 &#32;&#32;&#32;&#32;&#32;&#32;put(iter_type&#32;__s,&#32;ios_base&amp;&#32;__io,&#32;char_type&#32;__fill,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__v)<emphasis role="keyword">&#32;const</emphasis>
2358 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_put(__s,&#32;__io,&#32;__fill,&#32;__v);&#32;}
2359 
2361 
2398 &#32;&#32;&#32;&#32;&#32;&#32;iter_type
2399 &#32;&#32;&#32;&#32;&#32;&#32;put(iter_type&#32;__s,&#32;ios_base&amp;&#32;__io,&#32;char_type&#32;__fill,&#32;<emphasis role="keywordtype">long</emphasis>&#32;__v)<emphasis role="keyword">&#32;const</emphasis>
2400 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_put(__s,&#32;__io,&#32;__fill,&#32;__v);&#32;}
2401 
2402 &#32;&#32;&#32;&#32;&#32;&#32;iter_type
2403 &#32;&#32;&#32;&#32;&#32;&#32;put(iter_type&#32;__s,&#32;ios_base&amp;&#32;__io,&#32;char_type&#32;__fill,
2404 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;__v)<emphasis role="keyword">&#32;const</emphasis>
2405 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_put(__s,&#32;__io,&#32;__fill,&#32;__v);&#32;}
2406 
2407 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_LONG_LONG</emphasis>
2408 &#32;&#32;&#32;&#32;&#32;&#32;iter_type
2409 &#32;&#32;&#32;&#32;&#32;&#32;put(iter_type&#32;__s,&#32;ios_base&amp;&#32;__io,&#32;char_type&#32;__fill,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;__v)<emphasis role="keyword">&#32;const</emphasis>
2410 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_put(__s,&#32;__io,&#32;__fill,&#32;__v);&#32;}
2411 
2412 &#32;&#32;&#32;&#32;&#32;&#32;iter_type
2413 &#32;&#32;&#32;&#32;&#32;&#32;put(iter_type&#32;__s,&#32;ios_base&amp;&#32;__io,&#32;char_type&#32;__fill,
2414 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;__v)<emphasis role="keyword">&#32;const</emphasis>
2415 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_put(__s,&#32;__io,&#32;__fill,&#32;__v);&#32;}
2416 <emphasis role="preprocessor">#endif</emphasis>
2418 
2420 
2461 &#32;&#32;&#32;&#32;&#32;&#32;iter_type
2462 &#32;&#32;&#32;&#32;&#32;&#32;put(iter_type&#32;__s,&#32;ios_base&amp;&#32;__io,&#32;char_type&#32;__fill,&#32;<emphasis role="keywordtype">double</emphasis>&#32;__v)<emphasis role="keyword">&#32;const</emphasis>
2463 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_put(__s,&#32;__io,&#32;__fill,&#32;__v);&#32;}
2464 
2465 &#32;&#32;&#32;&#32;&#32;&#32;iter_type
2466 &#32;&#32;&#32;&#32;&#32;&#32;put(iter_type&#32;__s,&#32;ios_base&amp;&#32;__io,&#32;char_type&#32;__fill,
2467 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;__v)<emphasis role="keyword">&#32;const</emphasis>
2468 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_put(__s,&#32;__io,&#32;__fill,&#32;__v);&#32;}
2470 
2486 &#32;&#32;&#32;&#32;&#32;&#32;iter_type
2487 &#32;&#32;&#32;&#32;&#32;&#32;put(iter_type&#32;__s,&#32;ios_base&amp;&#32;__io,&#32;char_type&#32;__fill,
2488 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;__v)<emphasis role="keyword">&#32;const</emphasis>
2489 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_put(__s,&#32;__io,&#32;__fill,&#32;__v);&#32;}
2490 
2491 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
2492 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ValueT&gt;
2493 &#32;&#32;&#32;&#32;iter_type
2494 &#32;&#32;&#32;&#32;_M_insert_float(iter_type,&#32;ios_base&amp;&#32;__io,&#32;char_type&#32;__fill,
2495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;__mod,&#32;_ValueT&#32;__v)&#32;<emphasis role="keyword">const</emphasis>;
2496 
2497 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2498 &#32;&#32;&#32;&#32;&#32;&#32;_M_group_float(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__grouping,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__grouping_size,
2499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char_type&#32;__sep,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__p,&#32;char_type*&#32;__new,
2500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char_type*&#32;__cs,&#32;<emphasis role="keywordtype">int</emphasis>&amp;&#32;__len)&#32;<emphasis role="keyword">const</emphasis>;
2501 
2502 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ValueT&gt;
2503 &#32;&#32;&#32;&#32;iter_type
2504 &#32;&#32;&#32;&#32;_M_insert_int(iter_type,&#32;ios_base&amp;&#32;__io,&#32;char_type&#32;__fill,
2505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ValueT&#32;__v)&#32;<emphasis role="keyword">const</emphasis>;
2506 
2507 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2508 &#32;&#32;&#32;&#32;&#32;&#32;_M_group_int(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__grouping,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__grouping_size,
2509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char_type&#32;__sep,&#32;ios_base&amp;&#32;__io,&#32;char_type*&#32;__new,
2510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char_type*&#32;__cs,&#32;<emphasis role="keywordtype">int</emphasis>&amp;&#32;__len)&#32;<emphasis role="keyword">const</emphasis>;
2511 
2512 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2513 &#32;&#32;&#32;&#32;&#32;&#32;_M_pad(char_type&#32;__fill,&#32;streamsize&#32;__w,&#32;ios_base&amp;&#32;__io,
2514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char_type*&#32;__new,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__cs,&#32;<emphasis role="keywordtype">int</emphasis>&amp;&#32;__len)&#32;<emphasis role="keyword">const</emphasis>;
2515 
2517 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
2518 &#32;&#32;&#32;&#32;&#32;&#32;~num_put()&#32;{&#32;}
2519 
2521 
2534 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
2535 &#32;&#32;&#32;&#32;&#32;&#32;do_put(iter_type&#32;__s,&#32;ios_base&amp;&#32;__io,&#32;char_type&#32;__fill,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__v)&#32;<emphasis role="keyword">const</emphasis>;
2536 
2537 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
2538 &#32;&#32;&#32;&#32;&#32;&#32;do_put(iter_type&#32;__s,&#32;ios_base&amp;&#32;__io,&#32;char_type&#32;__fill,&#32;<emphasis role="keywordtype">long</emphasis>&#32;__v)<emphasis role="keyword">&#32;const</emphasis>
2539 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_insert_int(__s,&#32;__io,&#32;__fill,&#32;__v);&#32;}
2540 
2541 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
2542 &#32;&#32;&#32;&#32;&#32;&#32;do_put(iter_type&#32;__s,&#32;ios_base&amp;&#32;__io,&#32;char_type&#32;__fill,
2543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;__v)<emphasis role="keyword">&#32;const</emphasis>
2544 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_insert_int(__s,&#32;__io,&#32;__fill,&#32;__v);&#32;}
2545 
2546 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_LONG_LONG</emphasis>
2547 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
2548 &#32;&#32;&#32;&#32;&#32;&#32;do_put(iter_type&#32;__s,&#32;ios_base&amp;&#32;__io,&#32;char_type&#32;__fill,
2549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;__v)<emphasis role="keyword">&#32;const</emphasis>
2550 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_insert_int(__s,&#32;__io,&#32;__fill,&#32;__v);&#32;}
2551 
2552 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
2553 &#32;&#32;&#32;&#32;&#32;&#32;do_put(iter_type&#32;__s,&#32;ios_base&amp;&#32;__io,&#32;char_type&#32;__fill,
2554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;__v)<emphasis role="keyword">&#32;const</emphasis>
2555 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_insert_int(__s,&#32;__io,&#32;__fill,&#32;__v);&#32;}
2556 <emphasis role="preprocessor">#endif</emphasis>
2557 
2558 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
2559 &#32;&#32;&#32;&#32;&#32;&#32;do_put(iter_type,&#32;ios_base&amp;,&#32;char_type,&#32;<emphasis role="keywordtype">double</emphasis>)&#32;<emphasis role="keyword">const</emphasis>;
2560 
2561 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;XXX&#32;GLIBCXX_ABI&#32;Deprecated</emphasis>
2562 <emphasis role="preprocessor">#if&#32;defined&#32;_GLIBCXX_LONG_DOUBLE_COMPAT&#32;&amp;&amp;&#32;defined&#32;__LONG_DOUBLE_128__</emphasis>
2563 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
2564 &#32;&#32;&#32;&#32;&#32;&#32;__do_put(iter_type,&#32;ios_base&amp;,&#32;char_type,&#32;<emphasis role="keywordtype">double</emphasis>)&#32;<emphasis role="keyword">const</emphasis>;
2565 <emphasis role="preprocessor">#else</emphasis>
2566 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
2567 &#32;&#32;&#32;&#32;&#32;&#32;do_put(iter_type,&#32;ios_base&amp;,&#32;char_type,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>)&#32;<emphasis role="keyword">const</emphasis>;
2568 <emphasis role="preprocessor">#endif</emphasis>
2569 
2570 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
2571 &#32;&#32;&#32;&#32;&#32;&#32;do_put(iter_type,&#32;ios_base&amp;,&#32;char_type,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*)&#32;<emphasis role="keyword">const</emphasis>;
2572 
2573 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;XXX&#32;GLIBCXX_ABI&#32;Deprecated</emphasis>
2574 <emphasis role="preprocessor">#if&#32;defined&#32;_GLIBCXX_LONG_DOUBLE_ALT128_COMPAT&#32;\</emphasis>
2575 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;defined&#32;__LONG_DOUBLE_IEEE128__</emphasis>
2576 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
2577 &#32;&#32;&#32;&#32;&#32;&#32;__do_put(iter_type,&#32;ios_base&amp;,&#32;char_type,&#32;__ibm128)&#32;<emphasis role="keyword">const</emphasis>;
2578 <emphasis role="preprocessor">#endif</emphasis>
2579 
2580 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;XXX&#32;GLIBCXX_ABI&#32;Deprecated</emphasis>
2581 <emphasis role="preprocessor">#if&#32;defined&#32;_GLIBCXX_LONG_DOUBLE_COMPAT&#32;&amp;&amp;&#32;defined&#32;__LONG_DOUBLE_128__</emphasis>
2582 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
2583 &#32;&#32;&#32;&#32;&#32;&#32;do_put(iter_type,&#32;ios_base&amp;,&#32;char_type,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>)&#32;<emphasis role="keyword">const</emphasis>;
2584 <emphasis role="preprocessor">#endif</emphasis>
2586 &#32;&#32;&#32;&#32;};
2587 
2588 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutIter&gt;
2589 &#32;&#32;&#32;&#32;locale::id&#32;num_put&lt;_CharT,&#32;_OutIter&gt;::id;
2590 
2591 _GLIBCXX_END_NAMESPACE_LDBL
2592 
2593 &#32;&#32;<emphasis role="comment">//&#32;Subclause&#32;convenience&#32;interfaces,&#32;inlines.</emphasis>
2594 &#32;&#32;<emphasis role="comment">//&#32;NB:&#32;These&#32;are&#32;inline&#32;because,&#32;when&#32;used&#32;in&#32;a&#32;loop,&#32;some&#32;compilers</emphasis>
2595 &#32;&#32;<emphasis role="comment">//&#32;can&#32;hoist&#32;the&#32;body&#32;out&#32;of&#32;the&#32;loop;&#32;then&#32;it&apos;s&#32;just&#32;as&#32;fast&#32;as&#32;the</emphasis>
2596 &#32;&#32;<emphasis role="comment">//&#32;C&#32;is*()&#32;function.</emphasis>
2597 
2599 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
2600 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2601 &#32;&#32;&#32;&#32;isspace(_CharT&#32;__c,&#32;<emphasis role="keyword">const</emphasis>&#32;locale&amp;&#32;__loc)
2602 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;use_facet&lt;ctype&lt;_CharT&gt;&#32;&gt;(__loc).<link linkend="__monobehavior_8h_1a9870e0caa2f8e3e5700c4cbb21d73c07">is</link>(ctype_base::space,&#32;__c);&#32;}
2603 
2605 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
2606 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2607 &#32;&#32;&#32;&#32;isprint(_CharT&#32;__c,&#32;<emphasis role="keyword">const</emphasis>&#32;locale&amp;&#32;__loc)
2608 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;use_facet&lt;ctype&lt;_CharT&gt;&#32;&gt;(__loc).<link linkend="__monobehavior_8h_1a9870e0caa2f8e3e5700c4cbb21d73c07">is</link>(ctype_base::print,&#32;__c);&#32;}
2609 
2611 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
2612 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2613 &#32;&#32;&#32;&#32;iscntrl(_CharT&#32;__c,&#32;<emphasis role="keyword">const</emphasis>&#32;locale&amp;&#32;__loc)
2614 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;use_facet&lt;ctype&lt;_CharT&gt;&#32;&gt;(__loc).<link linkend="__monobehavior_8h_1a9870e0caa2f8e3e5700c4cbb21d73c07">is</link>(ctype_base::cntrl,&#32;__c);&#32;}
2615 
2617 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
2618 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2619 &#32;&#32;&#32;&#32;isupper(_CharT&#32;__c,&#32;<emphasis role="keyword">const</emphasis>&#32;locale&amp;&#32;__loc)
2620 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;use_facet&lt;ctype&lt;_CharT&gt;&#32;&gt;(__loc).<link linkend="__monobehavior_8h_1a9870e0caa2f8e3e5700c4cbb21d73c07">is</link>(ctype_base::upper,&#32;__c);&#32;}
2621 
2623 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
2624 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2625 &#32;&#32;&#32;&#32;islower(_CharT&#32;__c,&#32;<emphasis role="keyword">const</emphasis>&#32;locale&amp;&#32;__loc)
2626 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;use_facet&lt;ctype&lt;_CharT&gt;&#32;&gt;(__loc).<link linkend="__monobehavior_8h_1a9870e0caa2f8e3e5700c4cbb21d73c07">is</link>(ctype_base::lower,&#32;__c);&#32;}
2627 
2629 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
2630 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2631 &#32;&#32;&#32;&#32;isalpha(_CharT&#32;__c,&#32;<emphasis role="keyword">const</emphasis>&#32;locale&amp;&#32;__loc)
2632 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;use_facet&lt;ctype&lt;_CharT&gt;&#32;&gt;(__loc).<link linkend="__monobehavior_8h_1a9870e0caa2f8e3e5700c4cbb21d73c07">is</link>(ctype_base::alpha,&#32;__c);&#32;}
2633 
2635 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
2636 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2637 &#32;&#32;&#32;&#32;isdigit(_CharT&#32;__c,&#32;<emphasis role="keyword">const</emphasis>&#32;locale&amp;&#32;__loc)
2638 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;use_facet&lt;ctype&lt;_CharT&gt;&#32;&gt;(__loc).<link linkend="__monobehavior_8h_1a9870e0caa2f8e3e5700c4cbb21d73c07">is</link>(ctype_base::digit,&#32;__c);&#32;}
2639 
2641 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
2642 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2643 &#32;&#32;&#32;&#32;ispunct(_CharT&#32;__c,&#32;<emphasis role="keyword">const</emphasis>&#32;locale&amp;&#32;__loc)
2644 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;use_facet&lt;ctype&lt;_CharT&gt;&#32;&gt;(__loc).<link linkend="__monobehavior_8h_1a9870e0caa2f8e3e5700c4cbb21d73c07">is</link>(ctype_base::punct,&#32;__c);&#32;}
2645 
2647 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
2648 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2649 &#32;&#32;&#32;&#32;isxdigit(_CharT&#32;__c,&#32;<emphasis role="keyword">const</emphasis>&#32;locale&amp;&#32;__loc)
2650 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;use_facet&lt;ctype&lt;_CharT&gt;&#32;&gt;(__loc).<link linkend="__monobehavior_8h_1a9870e0caa2f8e3e5700c4cbb21d73c07">is</link>(ctype_base::xdigit,&#32;__c);&#32;}
2651 
2653 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
2654 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2655 &#32;&#32;&#32;&#32;isalnum(_CharT&#32;__c,&#32;<emphasis role="keyword">const</emphasis>&#32;locale&amp;&#32;__loc)
2656 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;use_facet&lt;ctype&lt;_CharT&gt;&#32;&gt;(__loc).<link linkend="__monobehavior_8h_1a9870e0caa2f8e3e5700c4cbb21d73c07">is</link>(ctype_base::alnum,&#32;__c);&#32;}
2657 
2659 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
2660 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2661 &#32;&#32;&#32;&#32;isgraph(_CharT&#32;__c,&#32;<emphasis role="keyword">const</emphasis>&#32;locale&amp;&#32;__loc)
2662 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;use_facet&lt;ctype&lt;_CharT&gt;&#32;&gt;(__loc).<link linkend="__monobehavior_8h_1a9870e0caa2f8e3e5700c4cbb21d73c07">is</link>(ctype_base::graph,&#32;__c);&#32;}
2663 
2664 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
2666 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
2667 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2668 &#32;&#32;&#32;&#32;isblank(_CharT&#32;__c,&#32;<emphasis role="keyword">const</emphasis>&#32;locale&amp;&#32;__loc)
2669 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;use_facet&lt;ctype&lt;_CharT&gt;&#32;&gt;(__loc).<link linkend="__monobehavior_8h_1a9870e0caa2f8e3e5700c4cbb21d73c07">is</link>(ctype_base::blank,&#32;__c);&#32;}
2670 <emphasis role="preprocessor">#endif</emphasis>
2671 
2673 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
2674 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_CharT
2675 &#32;&#32;&#32;&#32;toupper(_CharT&#32;__c,&#32;<emphasis role="keyword">const</emphasis>&#32;locale&amp;&#32;__loc)
2676 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;use_facet&lt;ctype&lt;_CharT&gt;&#32;&gt;(__loc).toupper(__c);&#32;}
2677 
2679 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
2680 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_CharT
2681 &#32;&#32;&#32;&#32;tolower(_CharT&#32;__c,&#32;<emphasis role="keyword">const</emphasis>&#32;locale&amp;&#32;__loc)
2682 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;use_facet&lt;ctype&lt;_CharT&gt;&#32;&gt;(__loc).tolower(__c);&#32;}
2683 
2684 _GLIBCXX_END_NAMESPACE_VERSION
2685 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
2686 
2687 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/locale_facets.tcc&gt;</emphasis>
2688 
2689 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
