<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2bits_2boost__concept__check_8h_source" xml:lang="en-US">
<title>boost_concept_check.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/bits/boost_concept_check.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2004-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">//&#32;(C)&#32;Copyright&#32;Jeremy&#32;Siek&#32;2000.&#32;Permission&#32;to&#32;copy,&#32;use,&#32;modify,</emphasis>
26 <emphasis role="comment">//&#32;sell&#32;and&#32;distribute&#32;this&#32;software&#32;is&#32;granted&#32;provided&#32;this</emphasis>
27 <emphasis role="comment">//&#32;copyright&#32;notice&#32;appears&#32;in&#32;all&#32;copies.&#32;This&#32;software&#32;is&#32;provided</emphasis>
28 <emphasis role="comment">//&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty,&#32;and&#32;with&#32;no&#32;claim&#32;as</emphasis>
29 <emphasis role="comment">//&#32;to&#32;its&#32;suitability&#32;for&#32;any&#32;purpose.</emphasis>
30 <emphasis role="comment">//</emphasis>
31 
37 <emphasis role="comment">//&#32;GCC&#32;Note:&#32;&#32;based&#32;on&#32;version&#32;1.12.0&#32;of&#32;the&#32;Boost&#32;library.</emphasis>
38 
39 <emphasis role="preprocessor">#ifndef&#32;_BOOST_CONCEPT_CHECK_H</emphasis>
40 <emphasis role="preprocessor">#define&#32;_BOOST_CONCEPT_CHECK_H&#32;1</emphasis>
41 
42 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
43 
44 <emphasis role="preprocessor">#include&#32;&lt;bits/c++config.h&gt;</emphasis>
45 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_iterator_base_types.h&gt;</emphasis>&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;traits&#32;and&#32;tags</emphasis>
46 
47 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
48 {
49 _GLIBCXX_BEGIN_NAMESPACE_VERSION
50 _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
51 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Bit_iterator;
52 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Bit_const_iterator;
53 _GLIBCXX_END_NAMESPACE_CONTAINER
54 _GLIBCXX_END_NAMESPACE_VERSION
55 }
56 
57 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__debug">__gnu_debug</link>
58 {
59 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sequence,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Category&gt;
60 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Safe_iterator;
61 }
62 
63 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__cxx">__gnu_cxx</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
64 {
65 _GLIBCXX_BEGIN_NAMESPACE_VERSION
66 
67 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
68 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wunused-local-typedefs&quot;</emphasis>
69 
70 <emphasis role="preprocessor">#define&#32;_IsUnused&#32;__attribute__&#32;((__unused__))</emphasis>
71 
72 <emphasis role="comment">//&#32;When&#32;the&#32;C-C&#32;code&#32;is&#32;in&#32;use,&#32;we&#32;would&#32;like&#32;this&#32;function&#32;to&#32;do&#32;as&#32;little</emphasis>
73 <emphasis role="comment">//&#32;as&#32;possible&#32;at&#32;runtime,&#32;use&#32;as&#32;few&#32;resources&#32;as&#32;possible,&#32;and&#32;hopefully</emphasis>
74 <emphasis role="comment">//&#32;be&#32;elided&#32;out&#32;of&#32;existence...&#32;hmmm.</emphasis>
75 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Concept&gt;
76 _GLIBCXX14_CONSTEXPR&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;__function_requires()
77 {
78 &#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&#32;(_Concept::*__x)()&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2boost__concept__check_8h_1ab33b31bb28f666f533313ab27de6505c">_IsUnused</link>&#32;=&#32;&amp;_Concept::__constraints;
79 }
80 
81 <emphasis role="comment">//&#32;No&#32;definition:&#32;if&#32;this&#32;is&#32;referenced,&#32;there&apos;s&#32;a&#32;problem&#32;with</emphasis>
82 <emphasis role="comment">//&#32;the&#32;instantiating&#32;type&#32;not&#32;being&#32;one&#32;of&#32;the&#32;required&#32;integer&#32;types.</emphasis>
83 <emphasis role="comment">//&#32;Unfortunately,&#32;this&#32;results&#32;in&#32;a&#32;link-time&#32;error,&#32;not&#32;a&#32;compile-time&#32;error.</emphasis>
84 <emphasis role="keywordtype">void</emphasis>&#32;__error_type_must_be_an_integer_type();
85 <emphasis role="keywordtype">void</emphasis>&#32;__error_type_must_be_an_unsigned_integer_type();
86 <emphasis role="keywordtype">void</emphasis>&#32;__error_type_must_be_a_signed_integer_type();
87 
88 <emphasis role="comment">//&#32;???&#32;Should&#32;the&#32;&quot;concept_checking*&quot;&#32;structs&#32;begin&#32;with&#32;more&#32;than&#32;_&#32;?</emphasis>
89 <emphasis role="preprocessor">#define&#32;_GLIBCXX_CLASS_REQUIRES(_type_var,&#32;_ns,&#32;_concept)&#32;\</emphasis>
90 <emphasis role="preprocessor">&#32;&#32;typedef&#32;void&#32;(_ns::_concept&#32;&lt;_type_var&gt;::*&#32;_func##_type_var##_concept)();&#32;\</emphasis>
91 <emphasis role="preprocessor">&#32;&#32;template&#32;&lt;_func##_type_var##_concept&#32;_Tp1&gt;&#32;\</emphasis>
92 <emphasis role="preprocessor">&#32;&#32;struct&#32;_concept_checking##_type_var##_concept&#32;{&#32;};&#32;\</emphasis>
93 <emphasis role="preprocessor">&#32;&#32;typedef&#32;_concept_checking##_type_var##_concept&lt;&#32;\</emphasis>
94 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&amp;_ns::_concept&#32;&lt;_type_var&gt;::__constraints&gt;&#32;\</emphasis>
95 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_concept_checking_typedef##_type_var##_concept</emphasis>
96 
97 <emphasis role="preprocessor">#define&#32;_GLIBCXX_CLASS_REQUIRES2(_type_var1,&#32;_type_var2,&#32;_ns,&#32;_concept)&#32;\</emphasis>
98 <emphasis role="preprocessor">&#32;&#32;typedef&#32;void&#32;(_ns::_concept&#32;&lt;_type_var1,_type_var2&gt;::*&#32;_func##_type_var1##_type_var2##_concept)();&#32;\</emphasis>
99 <emphasis role="preprocessor">&#32;&#32;template&#32;&lt;_func##_type_var1##_type_var2##_concept&#32;_Tp1&gt;&#32;\</emphasis>
100 <emphasis role="preprocessor">&#32;&#32;struct&#32;_concept_checking##_type_var1##_type_var2##_concept&#32;{&#32;};&#32;\</emphasis>
101 <emphasis role="preprocessor">&#32;&#32;typedef&#32;_concept_checking##_type_var1##_type_var2##_concept&lt;&#32;\</emphasis>
102 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&amp;_ns::_concept&#32;&lt;_type_var1,_type_var2&gt;::__constraints&gt;&#32;\</emphasis>
103 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_concept_checking_typedef##_type_var1##_type_var2##_concept</emphasis>
104 
105 <emphasis role="preprocessor">#define&#32;_GLIBCXX_CLASS_REQUIRES3(_type_var1,&#32;_type_var2,&#32;_type_var3,&#32;_ns,&#32;_concept)&#32;\</emphasis>
106 <emphasis role="preprocessor">&#32;&#32;typedef&#32;void&#32;(_ns::_concept&#32;&lt;_type_var1,_type_var2,_type_var3&gt;::*&#32;_func##_type_var1##_type_var2##_type_var3##_concept)();&#32;\</emphasis>
107 <emphasis role="preprocessor">&#32;&#32;template&#32;&lt;_func##_type_var1##_type_var2##_type_var3##_concept&#32;_Tp1&gt;&#32;\</emphasis>
108 <emphasis role="preprocessor">&#32;&#32;struct&#32;_concept_checking##_type_var1##_type_var2##_type_var3##_concept&#32;{&#32;};&#32;\</emphasis>
109 <emphasis role="preprocessor">&#32;&#32;typedef&#32;_concept_checking##_type_var1##_type_var2##_type_var3##_concept&lt;&#32;\</emphasis>
110 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&amp;_ns::_concept&#32;&lt;_type_var1,_type_var2,_type_var3&gt;::__constraints&gt;&#32;&#32;\</emphasis>
111 <emphasis role="preprocessor">&#32;&#32;_concept_checking_typedef##_type_var1##_type_var2##_type_var3##_concept</emphasis>
112 
113 <emphasis role="preprocessor">#define&#32;_GLIBCXX_CLASS_REQUIRES4(_type_var1,&#32;_type_var2,&#32;_type_var3,&#32;_type_var4,&#32;_ns,&#32;_concept)&#32;\</emphasis>
114 <emphasis role="preprocessor">&#32;&#32;typedef&#32;void&#32;(_ns::_concept&#32;&lt;_type_var1,_type_var2,_type_var3,_type_var4&gt;::*&#32;_func##_type_var1##_type_var2##_type_var3##_type_var4##_concept)();&#32;\</emphasis>
115 <emphasis role="preprocessor">&#32;&#32;template&#32;&lt;_func##_type_var1##_type_var2##_type_var3##_type_var4##_concept&#32;_Tp1&gt;&#32;\</emphasis>
116 <emphasis role="preprocessor">&#32;&#32;struct&#32;_concept_checking##_type_var1##_type_var2##_type_var3##_type_var4##_concept&#32;{&#32;};&#32;\</emphasis>
117 <emphasis role="preprocessor">&#32;&#32;typedef&#32;_concept_checking##_type_var1##_type_var2##_type_var3##_type_var4##_concept&lt;&#32;\</emphasis>
118 <emphasis role="preprocessor">&#32;&#32;&amp;_ns::_concept&#32;&lt;_type_var1,_type_var2,_type_var3,_type_var4&gt;::__constraints&gt;&#32;\</emphasis>
119 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_concept_checking_typedef##_type_var1##_type_var2##_type_var3##_type_var4##_concept</emphasis>
120 
121 
122 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp2&gt;
123 <emphasis role="keyword">struct&#32;</emphasis>_Aux_require_same&#32;{&#32;};
124 
125 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Tp&gt;
126 <emphasis role="keyword">struct&#32;</emphasis>_Aux_require_same&lt;_Tp,_Tp&gt;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;_Type;&#32;};
127 
128 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp2&gt;
129 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SameTypeConcept
130 &#32;&#32;{
131 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
132 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Aux_require_same&lt;_Tp1,&#32;_Tp2&gt;::_Type&#32;_Required;
133 &#32;&#32;&#32;&#32;}
134 &#32;&#32;};
135 
136 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Tp&gt;
137 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_IntegerConcept&#32;{
138 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
139 &#32;&#32;&#32;&#32;&#32;&#32;__error_type_must_be_an_integer_type();
140 &#32;&#32;&#32;&#32;}
141 &#32;&#32;};
142 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>_IntegerConcept&lt;short&gt;&#32;{&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{}&#32;};
143 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>_IntegerConcept&lt;unsigned&#32;short&gt;&#32;{&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints(){}&#32;};
144 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>_IntegerConcept&lt;int&gt;&#32;{&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{}&#32;};
145 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>_IntegerConcept&lt;unsigned&#32;int&gt;&#32;{&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{}&#32;};
146 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>_IntegerConcept&lt;long&gt;&#32;{&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{}&#32;};
147 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>_IntegerConcept&lt;unsigned&#32;long&gt;&#32;{&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{}&#32;};
148 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>_IntegerConcept&lt;long&#32;long&gt;&#32;{&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{}&#32;};
149 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>_IntegerConcept&lt;unsigned&#32;long&#32;long&gt;
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{}&#32;};
151 
152 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Tp&gt;
153 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SignedIntegerConcept&#32;{
154 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
155 &#32;&#32;&#32;&#32;&#32;&#32;__error_type_must_be_a_signed_integer_type();
156 &#32;&#32;&#32;&#32;}
157 &#32;&#32;};
158 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SignedIntegerConcept&lt;short&gt;&#32;{&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{}&#32;};
159 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SignedIntegerConcept&lt;int&gt;&#32;{&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{}&#32;};
160 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SignedIntegerConcept&lt;long&gt;&#32;{&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{}&#32;};
161 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SignedIntegerConcept&lt;long&#32;long&gt;&#32;{&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints(){}};
162 
163 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Tp&gt;
164 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_UnsignedIntegerConcept&#32;{
165 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
166 &#32;&#32;&#32;&#32;&#32;&#32;__error_type_must_be_an_unsigned_integer_type();
167 &#32;&#32;&#32;&#32;}
168 &#32;&#32;};
169 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>_UnsignedIntegerConcept&lt;unsigned&#32;short&gt;
170 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{}&#32;};
171 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>_UnsignedIntegerConcept&lt;unsigned&#32;int&gt;
172 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{}&#32;};
173 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>_UnsignedIntegerConcept&lt;unsigned&#32;long&gt;
174 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{}&#32;};
175 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>_UnsignedIntegerConcept&lt;unsigned&#32;long&#32;long&gt;
176 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{}&#32;};
177 
178 &#32;&#32;<emphasis role="comment">//===========================================================================</emphasis>
179 &#32;&#32;<emphasis role="comment">//&#32;Basic&#32;Concepts</emphasis>
180 
181 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Tp&gt;
182 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_DefaultConstructibleConcept
183 &#32;&#32;{
184 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
185 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;__a&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2boost__concept__check_8h_1ab33b31bb28f666f533313ab27de6505c">_IsUnused</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;require&#32;default&#32;constructor</emphasis>
186 &#32;&#32;&#32;&#32;}
187 &#32;&#32;};
188 
189 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Tp&gt;
190 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_AssignableConcept
191 &#32;&#32;{
192 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
193 &#32;&#32;&#32;&#32;&#32;&#32;__a&#32;=&#32;__a;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;require&#32;assignment&#32;operator</emphasis>
194 &#32;&#32;&#32;&#32;&#32;&#32;__const_constraints(__a);
195 &#32;&#32;&#32;&#32;}
196 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__const_constraints(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__b)&#32;{
197 &#32;&#32;&#32;&#32;&#32;&#32;__a&#32;=&#32;__b;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;const&#32;required&#32;for&#32;argument&#32;to&#32;assignment</emphasis>
198 &#32;&#32;&#32;&#32;}
199 &#32;&#32;&#32;&#32;_Tp&#32;__a;
200 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;possibly&#32;should&#32;be&#32;&quot;Tp*&#32;a;&quot;&#32;and&#32;then&#32;dereference&#32;&quot;a&quot;&#32;in&#32;constraint</emphasis>
201 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;functions?&#32;&#32;present&#32;way&#32;would&#32;require&#32;a&#32;default&#32;ctor,&#32;i&#32;think...</emphasis>
202 &#32;&#32;};
203 
204 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Tp&gt;
205 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_CopyConstructibleConcept
206 &#32;&#32;{
207 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
208 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;__a(__b);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;require&#32;copy&#32;constructor</emphasis>
209 &#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;__ptr&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2boost__concept__check_8h_1ab33b31bb28f666f533313ab27de6505c">_IsUnused</link>&#32;=&#32;&amp;__a;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;require&#32;address&#32;of&#32;operator</emphasis>
210 &#32;&#32;&#32;&#32;&#32;&#32;__const_constraints(__a);
211 &#32;&#32;&#32;&#32;}
212 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__const_constraints(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__a)&#32;{
213 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;__c&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2boost__concept__check_8h_1ab33b31bb28f666f533313ab27de6505c">_IsUnused</link>(__a);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;require&#32;const&#32;copy&#32;constructor</emphasis>
214 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__ptr&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2boost__concept__check_8h_1ab33b31bb28f666f533313ab27de6505c">_IsUnused</link>&#32;=&#32;&amp;__a;&#32;<emphasis role="comment">//&#32;require&#32;const&#32;address&#32;of&#32;operator</emphasis>
215 &#32;&#32;&#32;&#32;}
216 &#32;&#32;&#32;&#32;_Tp&#32;__b;
217 &#32;&#32;};
218 
219 &#32;&#32;<emphasis role="comment">//&#32;The&#32;SGI&#32;STL&#32;version&#32;of&#32;Assignable&#32;requires&#32;copy&#32;constructor&#32;and&#32;operator=</emphasis>
220 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Tp&gt;
221 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SGIAssignableConcept
222 &#32;&#32;{
223 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
224 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;__b&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2boost__concept__check_8h_1ab33b31bb28f666f533313ab27de6505c">_IsUnused</link>(__a);
225 &#32;&#32;&#32;&#32;&#32;&#32;__a&#32;=&#32;__a;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;require&#32;assignment&#32;operator</emphasis>
226 &#32;&#32;&#32;&#32;&#32;&#32;__const_constraints(__a);
227 &#32;&#32;&#32;&#32;}
228 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__const_constraints(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__b)&#32;{
229 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;__c&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2boost__concept__check_8h_1ab33b31bb28f666f533313ab27de6505c">_IsUnused</link>(__b);
230 &#32;&#32;&#32;&#32;&#32;&#32;__a&#32;=&#32;__b;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;const&#32;required&#32;for&#32;argument&#32;to&#32;assignment</emphasis>
231 &#32;&#32;&#32;&#32;}
232 &#32;&#32;&#32;&#32;_Tp&#32;__a;
233 &#32;&#32;};
234 
235 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_From,&#32;<emphasis role="keyword">class</emphasis>&#32;_To&gt;
236 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_ConvertibleConcept
237 &#32;&#32;{
238 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
239 &#32;&#32;&#32;&#32;&#32;&#32;_To&#32;__y&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2boost__concept__check_8h_1ab33b31bb28f666f533313ab27de6505c">_IsUnused</link>&#32;=&#32;__x;
240 &#32;&#32;&#32;&#32;}
241 &#32;&#32;&#32;&#32;_From&#32;__x;
242 &#32;&#32;};
243 
244 &#32;&#32;<emphasis role="comment">//&#32;The&#32;C++&#32;standard&#32;requirements&#32;for&#32;many&#32;concepts&#32;talk&#32;about&#32;return</emphasis>
245 &#32;&#32;<emphasis role="comment">//&#32;types&#32;that&#32;must&#32;be&#32;&quot;convertible&#32;to&#32;bool&quot;.&#32;&#32;The&#32;problem&#32;with&#32;this</emphasis>
246 &#32;&#32;<emphasis role="comment">//&#32;requirement&#32;is&#32;that&#32;it&#32;leaves&#32;the&#32;door&#32;open&#32;for&#32;evil&#32;proxies&#32;that</emphasis>
247 &#32;&#32;<emphasis role="comment">//&#32;define&#32;things&#32;like&#32;operator||&#32;with&#32;strange&#32;return&#32;types.&#32;&#32;Two</emphasis>
248 &#32;&#32;<emphasis role="comment">//&#32;possible&#32;solutions&#32;are:</emphasis>
249 &#32;&#32;<emphasis role="comment">//&#32;1)&#32;require&#32;the&#32;return&#32;type&#32;to&#32;be&#32;exactly&#32;bool</emphasis>
250 &#32;&#32;<emphasis role="comment">//&#32;2)&#32;stay&#32;with&#32;convertible&#32;to&#32;bool,&#32;and&#32;also</emphasis>
251 &#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;specify&#32;stuff&#32;about&#32;all&#32;the&#32;logical&#32;operators.</emphasis>
252 &#32;&#32;<emphasis role="comment">//&#32;For&#32;now&#32;we&#32;just&#32;test&#32;for&#32;convertible&#32;to&#32;bool.</emphasis>
253 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Tp&gt;
254 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__aux_require_boolean_expr(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__t)&#32;{
255 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__x&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2boost__concept__check_8h_1ab33b31bb28f666f533313ab27de6505c">_IsUnused</link>&#32;=&#32;__t;
256 &#32;&#32;}
257 
258 <emphasis role="comment">//&#32;FIXME</emphasis>
259 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Tp&gt;
260 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_EqualityComparableConcept
261 &#32;&#32;{
262 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
263 &#32;&#32;&#32;&#32;&#32;&#32;__aux_require_boolean_expr(__a&#32;==&#32;__b);
264 &#32;&#32;&#32;&#32;}
265 &#32;&#32;&#32;&#32;_Tp&#32;__a,&#32;__b;
266 &#32;&#32;};
267 
268 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Tp&gt;
269 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_LessThanComparableConcept
270 &#32;&#32;{
271 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
272 &#32;&#32;&#32;&#32;&#32;&#32;__aux_require_boolean_expr(__a&#32;&lt;&#32;__b);
273 &#32;&#32;&#32;&#32;}
274 &#32;&#32;&#32;&#32;_Tp&#32;__a,&#32;__b;
275 &#32;&#32;};
276 
277 &#32;&#32;<emphasis role="comment">//&#32;This&#32;is&#32;equivalent&#32;to&#32;SGI&#32;STL&apos;s&#32;LessThanComparable.</emphasis>
278 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Tp&gt;
279 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_ComparableConcept
280 &#32;&#32;{
281 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
282 &#32;&#32;&#32;&#32;&#32;&#32;__aux_require_boolean_expr(__a&#32;&lt;&#32;__b);
283 &#32;&#32;&#32;&#32;&#32;&#32;__aux_require_boolean_expr(__a&#32;&gt;&#32;__b);
284 &#32;&#32;&#32;&#32;&#32;&#32;__aux_require_boolean_expr(__a&#32;&lt;=&#32;__b);
285 &#32;&#32;&#32;&#32;&#32;&#32;__aux_require_boolean_expr(__a&#32;&gt;=&#32;__b);
286 &#32;&#32;&#32;&#32;}
287 &#32;&#32;&#32;&#32;_Tp&#32;__a,&#32;__b;
288 &#32;&#32;};
289 
290 <emphasis role="preprocessor">#define&#32;_GLIBCXX_DEFINE_BINARY_PREDICATE_OP_CONSTRAINT(_OP,_NAME)&#32;\</emphasis>
291 <emphasis role="preprocessor">&#32;&#32;template&#32;&lt;class&#32;_First,&#32;class&#32;_Second&gt;&#32;\</emphasis>
292 <emphasis role="preprocessor">&#32;&#32;struct&#32;_NAME&#32;{&#32;\</emphasis>
293 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;void&#32;__constraints()&#32;{&#32;(void)__constraints_();&#32;}&#32;\</emphasis>
294 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;bool&#32;__constraints_()&#32;{&#32;&#32;\</emphasis>
295 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;return&#32;&#32;__a&#32;_OP&#32;__b;&#32;\</emphasis>
296 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;\</emphasis>
297 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_First&#32;__a;&#32;\</emphasis>
298 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_Second&#32;__b;&#32;\</emphasis>
299 <emphasis role="preprocessor">&#32;&#32;}</emphasis>
300 
301 <emphasis role="preprocessor">#define&#32;_GLIBCXX_DEFINE_BINARY_OPERATOR_CONSTRAINT(_OP,_NAME)&#32;\</emphasis>
302 <emphasis role="preprocessor">&#32;&#32;template&#32;&lt;class&#32;_Ret,&#32;class&#32;_First,&#32;class&#32;_Second&gt;&#32;\</emphasis>
303 <emphasis role="preprocessor">&#32;&#32;struct&#32;_NAME&#32;{&#32;\</emphasis>
304 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;void&#32;__constraints()&#32;{&#32;(void)__constraints_();&#32;}&#32;\</emphasis>
305 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_Ret&#32;__constraints_()&#32;{&#32;&#32;\</emphasis>
306 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;return&#32;__a&#32;_OP&#32;__b;&#32;\</emphasis>
307 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;\</emphasis>
308 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_First&#32;__a;&#32;\</emphasis>
309 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_Second&#32;__b;&#32;\</emphasis>
310 <emphasis role="preprocessor">&#32;&#32;}</emphasis>
311 
312 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2boost__concept__check_8h_1a7a789b061236e8d9c0aaddbd8c6239fc">_GLIBCXX_DEFINE_BINARY_PREDICATE_OP_CONSTRAINT</link>(==,&#32;_EqualOpConcept);
313 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2boost__concept__check_8h_1a7a789b061236e8d9c0aaddbd8c6239fc">_GLIBCXX_DEFINE_BINARY_PREDICATE_OP_CONSTRAINT</link>(!=,&#32;_NotEqualOpConcept);
314 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2boost__concept__check_8h_1a7a789b061236e8d9c0aaddbd8c6239fc">_GLIBCXX_DEFINE_BINARY_PREDICATE_OP_CONSTRAINT</link>(&lt;,&#32;_LessThanOpConcept);
315 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2boost__concept__check_8h_1a7a789b061236e8d9c0aaddbd8c6239fc">_GLIBCXX_DEFINE_BINARY_PREDICATE_OP_CONSTRAINT</link>(&lt;=,&#32;_LessEqualOpConcept);
316 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2boost__concept__check_8h_1a7a789b061236e8d9c0aaddbd8c6239fc">_GLIBCXX_DEFINE_BINARY_PREDICATE_OP_CONSTRAINT</link>(&gt;,&#32;_GreaterThanOpConcept);
317 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2boost__concept__check_8h_1a7a789b061236e8d9c0aaddbd8c6239fc">_GLIBCXX_DEFINE_BINARY_PREDICATE_OP_CONSTRAINT</link>(&gt;=,&#32;_GreaterEqualOpConcept);
318 
319 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2boost__concept__check_8h_1a6dee97441d35ffc4f51192d299bc69d2">_GLIBCXX_DEFINE_BINARY_OPERATOR_CONSTRAINT</link>(+,&#32;_PlusOpConcept);
320 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2boost__concept__check_8h_1a6dee97441d35ffc4f51192d299bc69d2">_GLIBCXX_DEFINE_BINARY_OPERATOR_CONSTRAINT</link>(*,&#32;_TimesOpConcept);
321 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2boost__concept__check_8h_1a6dee97441d35ffc4f51192d299bc69d2">_GLIBCXX_DEFINE_BINARY_OPERATOR_CONSTRAINT</link>(/,&#32;_DivideOpConcept);
322 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2boost__concept__check_8h_1a6dee97441d35ffc4f51192d299bc69d2">_GLIBCXX_DEFINE_BINARY_OPERATOR_CONSTRAINT</link>(-,&#32;_SubtractOpConcept);
323 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2boost__concept__check_8h_1a6dee97441d35ffc4f51192d299bc69d2">_GLIBCXX_DEFINE_BINARY_OPERATOR_CONSTRAINT</link>(%,&#32;_ModOpConcept);
324 
325 <emphasis role="preprocessor">#undef&#32;_GLIBCXX_DEFINE_BINARY_PREDICATE_OP_CONSTRAINT</emphasis>
326 <emphasis role="preprocessor">#undef&#32;_GLIBCXX_DEFINE_BINARY_OPERATOR_CONSTRAINT</emphasis>
327 
328 &#32;&#32;<emphasis role="comment">//===========================================================================</emphasis>
329 &#32;&#32;<emphasis role="comment">//&#32;Function&#32;Object&#32;Concepts</emphasis>
330 
331 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Func,&#32;<emphasis role="keyword">class</emphasis>&#32;_Return&gt;
332 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_GeneratorConcept
333 &#32;&#32;{
334 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
335 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Return&amp;&#32;__r&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2boost__concept__check_8h_1ab33b31bb28f666f533313ab27de6505c">_IsUnused</link>&#32;=&#32;__f();<emphasis role="comment">//&#32;require&#32;operator()&#32;member&#32;function</emphasis>
336 &#32;&#32;&#32;&#32;}
337 &#32;&#32;&#32;&#32;_Func&#32;__f;
338 &#32;&#32;};
339 
340 
341 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Func&gt;
342 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_GeneratorConcept&lt;_Func,<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
343 &#32;&#32;{
344 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
345 &#32;&#32;&#32;&#32;&#32;&#32;__f();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;require&#32;operator()&#32;member&#32;function</emphasis>
346 &#32;&#32;&#32;&#32;}
347 &#32;&#32;&#32;&#32;_Func&#32;__f;
348 &#32;&#32;};
349 
350 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Func,&#32;<emphasis role="keyword">class</emphasis>&#32;_Return,&#32;<emphasis role="keyword">class</emphasis>&#32;_Arg&gt;
351 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_UnaryFunctionConcept
352 &#32;&#32;{
353 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
354 &#32;&#32;&#32;&#32;&#32;&#32;__r&#32;=&#32;__f(__arg);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;require&#32;operator()</emphasis>
355 &#32;&#32;&#32;&#32;}
356 &#32;&#32;&#32;&#32;_Func&#32;__f;
357 &#32;&#32;&#32;&#32;_Arg&#32;__arg;
358 &#32;&#32;&#32;&#32;_Return&#32;__r;
359 &#32;&#32;};
360 
361 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Func,&#32;<emphasis role="keyword">class</emphasis>&#32;_Arg&gt;
362 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_UnaryFunctionConcept&lt;_Func,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>,&#32;_Arg&gt;&#32;{
363 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
364 &#32;&#32;&#32;&#32;&#32;&#32;__f(__arg);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;require&#32;operator()</emphasis>
365 &#32;&#32;&#32;&#32;}
366 &#32;&#32;&#32;&#32;_Func&#32;__f;
367 &#32;&#32;&#32;&#32;_Arg&#32;__arg;
368 &#32;&#32;};
369 
370 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Func,&#32;<emphasis role="keyword">class</emphasis>&#32;_Return,&#32;<emphasis role="keyword">class</emphasis>&#32;_First,&#32;<emphasis role="keyword">class</emphasis>&#32;_Second&gt;
371 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_BinaryFunctionConcept
372 &#32;&#32;{
373 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
374 &#32;&#32;&#32;&#32;&#32;&#32;__r&#32;=&#32;__f(__first,&#32;__second);&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;require&#32;operator()</emphasis>
375 &#32;&#32;&#32;&#32;}
376 &#32;&#32;&#32;&#32;_Func&#32;__f;
377 &#32;&#32;&#32;&#32;_First&#32;__first;
378 &#32;&#32;&#32;&#32;_Second&#32;__second;
379 &#32;&#32;&#32;&#32;_Return&#32;__r;
380 &#32;&#32;};
381 
382 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Func,&#32;<emphasis role="keyword">class</emphasis>&#32;_First,&#32;<emphasis role="keyword">class</emphasis>&#32;_Second&gt;
383 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_BinaryFunctionConcept&lt;_Func,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>,&#32;_First,&#32;_Second&gt;
384 &#32;&#32;{
385 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
386 &#32;&#32;&#32;&#32;&#32;&#32;__f(__first,&#32;__second);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;require&#32;operator()</emphasis>
387 &#32;&#32;&#32;&#32;}
388 &#32;&#32;&#32;&#32;_Func&#32;__f;
389 &#32;&#32;&#32;&#32;_First&#32;__first;
390 &#32;&#32;&#32;&#32;_Second&#32;__second;
391 &#32;&#32;};
392 
393 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Func,&#32;<emphasis role="keyword">class</emphasis>&#32;_Arg&gt;
394 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_UnaryPredicateConcept
395 &#32;&#32;{
396 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
397 &#32;&#32;&#32;&#32;&#32;&#32;__aux_require_boolean_expr(__f(__arg));&#32;<emphasis role="comment">//&#32;require&#32;op()&#32;returning&#32;bool</emphasis>
398 &#32;&#32;&#32;&#32;}
399 &#32;&#32;&#32;&#32;_Func&#32;__f;
400 &#32;&#32;&#32;&#32;_Arg&#32;__arg;
401 &#32;&#32;};
402 
403 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Func,&#32;<emphasis role="keyword">class</emphasis>&#32;_First,&#32;<emphasis role="keyword">class</emphasis>&#32;_Second&gt;
404 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_BinaryPredicateConcept
405 &#32;&#32;{
406 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
407 &#32;&#32;&#32;&#32;&#32;&#32;__aux_require_boolean_expr(__f(__a,&#32;__b));&#32;<emphasis role="comment">//&#32;require&#32;op()&#32;returning&#32;bool</emphasis>
408 &#32;&#32;&#32;&#32;}
409 &#32;&#32;&#32;&#32;_Func&#32;__f;
410 &#32;&#32;&#32;&#32;_First&#32;__a;
411 &#32;&#32;&#32;&#32;_Second&#32;__b;
412 &#32;&#32;};
413 
414 &#32;&#32;<emphasis role="comment">//&#32;use&#32;this&#32;when&#32;functor&#32;is&#32;used&#32;inside&#32;a&#32;container&#32;class&#32;like&#32;std::set</emphasis>
415 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Func,&#32;<emphasis role="keyword">class</emphasis>&#32;_First,&#32;<emphasis role="keyword">class</emphasis>&#32;_Second&gt;
416 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Const_BinaryPredicateConcept&#32;{
417 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
418 &#32;&#32;&#32;&#32;&#32;&#32;__const_constraints(__f);
419 &#32;&#32;&#32;&#32;}
420 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__const_constraints(<emphasis role="keyword">const</emphasis>&#32;_Func&amp;&#32;__fun)&#32;{
421 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;_BinaryPredicateConcept&lt;_Func,&#32;_First,&#32;_Second&gt;&#32;&gt;();
422 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;operator()&#32;must&#32;be&#32;a&#32;const&#32;member&#32;function</emphasis>
423 &#32;&#32;&#32;&#32;&#32;&#32;__aux_require_boolean_expr(__fun(__a,&#32;__b));
424 &#32;&#32;&#32;&#32;}
425 &#32;&#32;&#32;&#32;_Func&#32;__f;
426 &#32;&#32;&#32;&#32;_First&#32;__a;
427 &#32;&#32;&#32;&#32;_Second&#32;__b;
428 &#32;&#32;};
429 
430 &#32;&#32;<emphasis role="comment">//===========================================================================</emphasis>
431 &#32;&#32;<emphasis role="comment">//&#32;Iterator&#32;Concepts</emphasis>
432 
433 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Tp&gt;
434 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_TrivialIteratorConcept
435 &#32;&#32;{
436 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
437 <emphasis role="comment">//&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_DefaultConstructibleConcept&lt;_Tp&gt;&#32;&gt;();</emphasis>
438 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_AssignableConcept&lt;_Tp&gt;&#32;&gt;();
439 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_EqualityComparableConcept&lt;_Tp&gt;&#32;&gt;();
440 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;typedef&#32;typename&#32;std::iterator_traits&lt;_Tp&gt;::value_type&#32;_V;</emphasis>
441 &#32;&#32;&#32;&#32;&#32;&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)*__i;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;require&#32;dereference&#32;operator</emphasis>
442 &#32;&#32;&#32;&#32;}
443 &#32;&#32;&#32;&#32;_Tp&#32;__i;
444 &#32;&#32;};
445 
446 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Tp&gt;
447 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Mutable_TrivialIteratorConcept
448 &#32;&#32;{
449 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
450 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_TrivialIteratorConcept&lt;_Tp&gt;&#32;&gt;();
451 &#32;&#32;&#32;&#32;&#32;&#32;*__i&#32;=&#32;*__j;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;require&#32;dereference&#32;and&#32;assignment</emphasis>
452 &#32;&#32;&#32;&#32;}
453 &#32;&#32;&#32;&#32;_Tp&#32;__i,&#32;__j;
454 &#32;&#32;};
455 
456 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Tp&gt;
457 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_InputIteratorConcept
458 &#32;&#32;{
459 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
460 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_TrivialIteratorConcept&lt;_Tp&gt;&#32;&gt;();
461 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;require&#32;iterator_traits&#32;typedef&apos;s</emphasis>
462 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_Tp&gt;::difference_type&#32;_Diff;
463 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_SignedIntegerConcept&lt;_Diff&gt;&#32;&gt;();</emphasis>
464 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_Tp&gt;::reference&#32;_Ref;
465 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_Tp&gt;::pointer&#32;_Pt;
466 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_Tp&gt;::iterator_category&#32;_Cat;
467 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_ConvertibleConcept&lt;
468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_Tp&gt;::iterator_category,
469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::input_iterator_tag&gt;&#32;&gt;();
470 &#32;&#32;&#32;&#32;&#32;&#32;++__i;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;require&#32;preincrement&#32;operator</emphasis>
471 &#32;&#32;&#32;&#32;&#32;&#32;__i++;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;require&#32;postincrement&#32;operator</emphasis>
472 &#32;&#32;&#32;&#32;}
473 &#32;&#32;&#32;&#32;_Tp&#32;__i;
474 &#32;&#32;};
475 
476 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">class</emphasis>&#32;_ValueT&gt;
477 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_OutputIteratorConcept
478 &#32;&#32;{
479 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
480 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_AssignableConcept&lt;_Tp&gt;&#32;&gt;();
481 &#32;&#32;&#32;&#32;&#32;&#32;++__i;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;require&#32;preincrement&#32;operator</emphasis>
482 &#32;&#32;&#32;&#32;&#32;&#32;__i++;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;require&#32;postincrement&#32;operator</emphasis>
483 &#32;&#32;&#32;&#32;&#32;&#32;*__i++&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;require&#32;postincrement&#32;and&#32;assignment</emphasis>
484 &#32;&#32;&#32;&#32;}
485 &#32;&#32;&#32;&#32;_Tp&#32;__i;
486 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Use&#32;a&#32;function&#32;pointer&#32;here&#32;so&#32;no&#32;definition&#32;of&#32;the&#32;function&#32;needed.</emphasis>
487 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Just&#32;need&#32;something&#32;that&#32;returns&#32;a&#32;_ValueT&#32;(which&#32;might&#32;be&#32;a&#32;reference).</emphasis>
488 &#32;&#32;&#32;&#32;_ValueT&#32;(*<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)();
489 &#32;&#32;};
490 
491 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
492 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Is_vector_bool_iterator
493 &#32;&#32;{&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__value&#32;=&#32;<emphasis role="keyword">false</emphasis>;&#32;};
494 
495 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_DEBUG</emphasis>
496 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>__cont&#32;=&#32;::std::_GLIBCXX_STD_C;
497 <emphasis role="preprocessor">#else</emphasis>
498 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>__cont&#32;=&#32;::std;
499 <emphasis role="preprocessor">#endif</emphasis>
500 
501 &#32;&#32;<emphasis role="comment">//&#32;Trait&#32;to&#32;identify&#32;vector&lt;bool&gt;::iterator</emphasis>
502 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
503 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Is_vector_bool_iterator&lt;__cont::_Bit_iterator&gt;
504 &#32;&#32;{&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__value&#32;=&#32;<emphasis role="keyword">true</emphasis>;&#32;};
505 
506 &#32;&#32;<emphasis role="comment">//&#32;And&#32;for&#32;vector&lt;bool&gt;::const_iterator.</emphasis>
507 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
508 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Is_vector_bool_iterator&lt;__cont::_Bit_const_iterator&gt;
509 &#32;&#32;{&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__value&#32;=&#32;<emphasis role="keyword">true</emphasis>;&#32;};
510 
511 &#32;&#32;<emphasis role="comment">//&#32;And&#32;for&#32;__gnu_debug::vector&lt;bool&gt;&#32;iterators&#32;too.</emphasis>
512 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_It,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Seq,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tag&gt;
513 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Is_vector_bool_iterator&lt;<link linkend="_namespace____gnu__debug">__gnu_debug</link>::_Safe_iterator&lt;_It,&#32;_Seq,&#32;_Tag&gt;&#32;&gt;
514 &#32;&#32;:&#32;_Is_vector_bool_iterator&lt;_It&gt;&#32;{&#32;};
515 
516 &#32;&#32;template&#32;&lt;class&#32;_Tp,&#32;bool&#32;=&#32;_Is_vector_bool_iterator&lt;_Tp&gt;::__value&gt;
517 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_ForwardIteratorReferenceConcept
518 &#32;&#32;{
519 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
520 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
521 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_Tp&gt;::reference&#32;_Ref;
522 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_reference&lt;_Ref&gt;::value,
523 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;reference&#32;type&#32;of&#32;a&#32;forward&#32;iterator&#32;must&#32;be&#32;a&#32;real&#32;reference&quot;</emphasis>);
524 <emphasis role="preprocessor">#endif</emphasis>
525 &#32;&#32;&#32;&#32;}
526 &#32;&#32;};
527 
528 &#32;&#32;template&#32;&lt;class&#32;_Tp,&#32;bool&#32;=&#32;_Is_vector_bool_iterator&lt;_Tp&gt;::__value&gt;
529 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Mutable_ForwardIteratorReferenceConcept
530 &#32;&#32;{
531 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
532 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_Tp&gt;::reference&#32;_Ref;
533 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_Tp&gt;::value_type&#32;_Val;
534 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_SameTypeConcept&lt;_Ref,&#32;_Val&amp;&gt;&#32;&gt;();
535 &#32;&#32;&#32;&#32;}
536 &#32;&#32;};
537 
538 &#32;&#32;<emphasis role="comment">//&#32;vector&lt;bool&gt;&#32;iterators&#32;are&#32;not&#32;real&#32;forward&#32;iterators,&#32;but&#32;we&#32;ignore&#32;that.</emphasis>
539 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Tp&gt;
540 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_ForwardIteratorReferenceConcept&lt;_Tp,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
541 &#32;&#32;{
542 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{&#32;}
543 &#32;&#32;};
544 
545 &#32;&#32;<emphasis role="comment">//&#32;vector&lt;bool&gt;&#32;iterators&#32;are&#32;not&#32;real&#32;forward&#32;iterators,&#32;but&#32;we&#32;ignore&#32;that.</emphasis>
546 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Tp&gt;
547 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Mutable_ForwardIteratorReferenceConcept&lt;_Tp,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
548 &#32;&#32;{
549 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{&#32;}
550 &#32;&#32;};
551 
552 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
553 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wunused-variable&quot;</emphasis>
554 
555 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Tp&gt;
556 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_ForwardIteratorConcept
557 &#32;&#32;{
558 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
559 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_InputIteratorConcept&lt;_Tp&gt;&#32;&gt;();
560 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_DefaultConstructibleConcept&lt;_Tp&gt;&#32;&gt;();
561 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_ConvertibleConcept&lt;
562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_Tp&gt;::iterator_category,
563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward_iterator_tag&gt;&#32;&gt;();
564 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_ForwardIteratorReferenceConcept&lt;_Tp&gt;&#32;&gt;();
565 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&amp;&#32;__j&#32;=&#32;++__i;
566 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__k&#32;=&#32;__i++;
567 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_Tp&gt;::reference&#32;_Ref;
568 &#32;&#32;&#32;&#32;&#32;&#32;_Ref&#32;__r&#32;=&#32;*__k;
569 &#32;&#32;&#32;&#32;&#32;&#32;_Ref&#32;__r2&#32;=&#32;*__i++;
570 &#32;&#32;&#32;&#32;}
571 &#32;&#32;&#32;&#32;_Tp&#32;__i;
572 &#32;&#32;};
573 
574 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Tp&gt;
575 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Mutable_ForwardIteratorConcept
576 &#32;&#32;{
577 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
578 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_ForwardIteratorConcept&lt;_Tp&gt;&#32;&gt;();
579 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_Tp&gt;::reference&#32;_Ref;
580 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_Tp&gt;::value_type&#32;_Val;
581 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_Mutable_ForwardIteratorReferenceConcept&lt;_Tp&gt;&#32;&gt;();
582 &#32;&#32;&#32;&#32;}
583 &#32;&#32;&#32;&#32;_Tp&#32;__i;
584 &#32;&#32;};
585 
586 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Tp&gt;
587 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_BidirectionalIteratorConcept
588 &#32;&#32;{
589 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
590 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_ForwardIteratorConcept&lt;_Tp&gt;&#32;&gt;();
591 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_ConvertibleConcept&lt;
592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_Tp&gt;::iterator_category,
593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::bidirectional_iterator_tag&gt;&#32;&gt;();
594 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&amp;&#32;__j&#32;=&#32;--__i;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;require&#32;predecrement&#32;operator</emphasis>
595 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__k&#32;=&#32;__i--;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;require&#32;postdecrement&#32;operator</emphasis>
596 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_Tp&gt;::reference&#32;_Ref;
597 &#32;&#32;&#32;&#32;&#32;&#32;_Ref&#32;__r&#32;=&#32;*__j--;
598 &#32;&#32;&#32;&#32;}
599 &#32;&#32;&#32;&#32;_Tp&#32;__i;
600 &#32;&#32;};
601 
602 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Tp&gt;
603 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Mutable_BidirectionalIteratorConcept
604 &#32;&#32;{
605 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
606 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_BidirectionalIteratorConcept&lt;_Tp&gt;&#32;&gt;();
607 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_Mutable_ForwardIteratorConcept&lt;_Tp&gt;&#32;&gt;();
608 &#32;&#32;&#32;&#32;}
609 &#32;&#32;&#32;&#32;_Tp&#32;__i;
610 &#32;&#32;};
611 
612 
613 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Tp&gt;
614 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_RandomAccessIteratorConcept
615 &#32;&#32;{
616 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
617 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_BidirectionalIteratorConcept&lt;_Tp&gt;&#32;&gt;();
618 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_ComparableConcept&lt;_Tp&gt;&#32;&gt;();
619 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_ConvertibleConcept&lt;
620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_Tp&gt;::iterator_category,
621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::random_access_iterator_tag&gt;&#32;&gt;();
622 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_Tp&gt;::reference&#32;_Ref;
623 
624 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&amp;&#32;__j&#32;=&#32;__i&#32;+=&#32;__n;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;require&#32;assignment&#32;addition&#32;operator</emphasis>
625 &#32;&#32;&#32;&#32;&#32;&#32;__i&#32;=&#32;__i&#32;+&#32;__n;&#32;__i&#32;=&#32;__n&#32;+&#32;__i;&#32;<emphasis role="comment">//&#32;require&#32;addition&#32;with&#32;difference&#32;type</emphasis>
626 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&amp;&#32;__k&#32;=&#32;__i&#32;-=&#32;__n;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;require&#32;assignment&#32;subtraction&#32;op</emphasis>
627 &#32;&#32;&#32;&#32;&#32;&#32;__i&#32;=&#32;__i&#32;-&#32;__n;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;require&#32;subtraction&#32;with</emphasis>
628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;difference&#32;type</emphasis>
629 &#32;&#32;&#32;&#32;&#32;&#32;__n&#32;=&#32;__i&#32;-&#32;__j;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;require&#32;difference&#32;operator</emphasis>
630 &#32;&#32;&#32;&#32;&#32;&#32;_Ref&#32;__r&#32;=&#32;__i[__n];&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;require&#32;element&#32;access&#32;operator</emphasis>
631 &#32;&#32;&#32;&#32;}
632 &#32;&#32;&#32;&#32;_Tp&#32;__a,&#32;__b;
633 &#32;&#32;&#32;&#32;_Tp&#32;__i,&#32;__j;
634 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_Tp&gt;::difference_type&#32;__n;
635 &#32;&#32;};
636 
637 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Tp&gt;
638 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Mutable_RandomAccessIteratorConcept
639 &#32;&#32;{
640 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
641 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_RandomAccessIteratorConcept&lt;_Tp&gt;&#32;&gt;();
642 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_Mutable_BidirectionalIteratorConcept&lt;_Tp&gt;&#32;&gt;();
643 &#32;&#32;&#32;&#32;}
644 &#32;&#32;&#32;&#32;_Tp&#32;__i;
645 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_Tp&gt;::difference_type&#32;__n;
646 &#32;&#32;};
647 
648 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
649 
650 &#32;&#32;<emphasis role="comment">//===========================================================================</emphasis>
651 &#32;&#32;<emphasis role="comment">//&#32;Container&#32;Concepts</emphasis>
652 
653 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Container&gt;
654 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_ContainerConcept
655 &#32;&#32;{
656 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container::value_type&#32;_Value_type;
657 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container::difference_type&#32;_Difference_type;
658 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container::size_type&#32;_Size_type;
659 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container::const_reference&#32;_Const_reference;
660 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container::const_pointer&#32;_Const_pointer;
661 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container::const_iterator&#32;_Const_iterator;
662 
663 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
664 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_InputIteratorConcept&lt;_Const_iterator&gt;&#32;&gt;();
665 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_AssignableConcept&lt;_Container&gt;&#32;&gt;();
666 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Container&#32;__c;
667 &#32;&#32;&#32;&#32;&#32;&#32;__i&#32;=&#32;__c.begin();
668 &#32;&#32;&#32;&#32;&#32;&#32;__i&#32;=&#32;__c.end();
669 &#32;&#32;&#32;&#32;&#32;&#32;__n&#32;=&#32;__c.size();
670 &#32;&#32;&#32;&#32;&#32;&#32;__n&#32;=&#32;__c.max_size();
671 &#32;&#32;&#32;&#32;&#32;&#32;__b&#32;=&#32;__c.empty();
672 &#32;&#32;&#32;&#32;}
673 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__b;
674 &#32;&#32;&#32;&#32;_Const_iterator&#32;__i;
675 &#32;&#32;&#32;&#32;_Size_type&#32;__n;
676 &#32;&#32;};
677 
678 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Container&gt;
679 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Mutable_ContainerConcept
680 &#32;&#32;{
681 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container::value_type&#32;_Value_type;
682 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container::reference&#32;_Reference;
683 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container::iterator&#32;_Iterator;
684 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container::pointer&#32;_Pointer;
685 
686 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
687 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_ContainerConcept&lt;_Container&gt;&#32;&gt;();
688 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_AssignableConcept&lt;_Value_type&gt;&#32;&gt;();
689 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_InputIteratorConcept&lt;_Iterator&gt;&#32;&gt;();
690 
691 &#32;&#32;&#32;&#32;&#32;&#32;__i&#32;=&#32;__c.begin();
692 &#32;&#32;&#32;&#32;&#32;&#32;__i&#32;=&#32;__c.end();
693 &#32;&#32;&#32;&#32;&#32;&#32;__c.swap(__c2);
694 &#32;&#32;&#32;&#32;}
695 &#32;&#32;&#32;&#32;_Iterator&#32;__i;
696 &#32;&#32;&#32;&#32;_Container&#32;__c,&#32;__c2;
697 &#32;&#32;};
698 
699 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardContainer&gt;
700 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_ForwardContainerConcept
701 &#32;&#32;{
702 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
703 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_ContainerConcept&lt;_ForwardContainer&gt;&#32;&gt;();
704 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardContainer::const_iterator&#32;_Const_iterator;
705 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_ForwardIteratorConcept&lt;_Const_iterator&gt;&#32;&gt;();
706 &#32;&#32;&#32;&#32;}
707 &#32;&#32;};
708 
709 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardContainer&gt;
710 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Mutable_ForwardContainerConcept
711 &#32;&#32;{
712 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
713 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_ForwardContainerConcept&lt;_ForwardContainer&gt;&#32;&gt;();
714 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_Mutable_ContainerConcept&lt;_ForwardContainer&gt;&#32;&gt;();
715 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardContainer::iterator&#32;_Iterator;
716 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_Mutable_ForwardIteratorConcept&lt;_Iterator&gt;&#32;&gt;();
717 &#32;&#32;&#32;&#32;}
718 &#32;&#32;};
719 
720 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ReversibleContainer&gt;
721 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_ReversibleContainerConcept
722 &#32;&#32;{
723 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_ReversibleContainer::const_iterator&#32;_Const_iterator;
724 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_ReversibleContainer::const_reverse_iterator
725 &#32;&#32;&#32;&#32;&#32;&#32;_Const_reverse_iterator;
726 
727 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
728 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_ForwardContainerConcept&lt;_ReversibleContainer&gt;&#32;&gt;();
729 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_BidirectionalIteratorConcept&lt;_Const_iterator&gt;&#32;&gt;();
730 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;
731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIteratorConcept&lt;_Const_reverse_iterator&gt;&#32;&gt;();
732 
733 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_ReversibleContainer&#32;__c;
734 &#32;&#32;&#32;&#32;&#32;&#32;_Const_reverse_iterator&#32;__i&#32;=&#32;__c.rbegin();
735 &#32;&#32;&#32;&#32;&#32;&#32;__i&#32;=&#32;__c.rend();
736 &#32;&#32;&#32;&#32;}
737 &#32;&#32;};
738 
739 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ReversibleContainer&gt;
740 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Mutable_ReversibleContainerConcept
741 &#32;&#32;{
742 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_ReversibleContainer::iterator&#32;_Iterator;
743 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_ReversibleContainer::reverse_iterator&#32;_Reverse_iterator;
744 
745 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
746 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;_ReversibleContainerConcept&lt;_ReversibleContainer&gt;&#32;&gt;();
747 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;
748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Mutable_ForwardContainerConcept&lt;_ReversibleContainer&gt;&#32;&gt;();
749 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;_Mutable_BidirectionalIteratorConcept&lt;_Iterator&gt;&#32;&gt;();
750 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;
751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Mutable_BidirectionalIteratorConcept&lt;_Reverse_iterator&gt;&#32;&gt;();
752 
753 &#32;&#32;&#32;&#32;&#32;&#32;_Reverse_iterator&#32;__i&#32;=&#32;__c.rbegin();
754 &#32;&#32;&#32;&#32;&#32;&#32;__i&#32;=&#32;__c.rend();
755 &#32;&#32;&#32;&#32;}
756 &#32;&#32;&#32;&#32;_ReversibleContainer&#32;__c;
757 &#32;&#32;};
758 
759 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessContainer&gt;
760 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_RandomAccessContainerConcept
761 &#32;&#32;{
762 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessContainer::size_type&#32;_Size_type;
763 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessContainer::const_reference&#32;_Const_reference;
764 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessContainer::const_iterator&#32;_Const_iterator;
765 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessContainer::const_reverse_iterator
766 &#32;&#32;&#32;&#32;&#32;&#32;_Const_reverse_iterator;
767 
768 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
769 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;
770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ReversibleContainerConcept&lt;_RandomAccessContainer&gt;&#32;&gt;();
771 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_RandomAccessIteratorConcept&lt;_Const_iterator&gt;&#32;&gt;();
772 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;
773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIteratorConcept&lt;_Const_reverse_iterator&gt;&#32;&gt;();
774 
775 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_RandomAccessContainer&#32;__c;
776 &#32;&#32;&#32;&#32;&#32;&#32;_Const_reference&#32;__r&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2boost__concept__check_8h_1ab33b31bb28f666f533313ab27de6505c">_IsUnused</link>&#32;=&#32;__c[__n];
777 &#32;&#32;&#32;&#32;}
778 &#32;&#32;&#32;&#32;_Size_type&#32;__n;
779 &#32;&#32;};
780 
781 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessContainer&gt;
782 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Mutable_RandomAccessContainerConcept
783 &#32;&#32;{
784 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessContainer::size_type&#32;_Size_type;
785 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessContainer::reference&#32;_Reference;
786 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessContainer::iterator&#32;_Iterator;
787 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessContainer::reverse_iterator&#32;_Reverse_iterator;
788 
789 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
790 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;
791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessContainerConcept&lt;_RandomAccessContainer&gt;&#32;&gt;();
792 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;
793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Mutable_ReversibleContainerConcept&lt;_RandomAccessContainer&gt;&#32;&gt;();
794 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_Mutable_RandomAccessIteratorConcept&lt;_Iterator&gt;&#32;&gt;();
795 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;
796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Mutable_RandomAccessIteratorConcept&lt;_Reverse_iterator&gt;&#32;&gt;();
797 
798 &#32;&#32;&#32;&#32;&#32;&#32;_Reference&#32;__r&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2boost__concept__check_8h_1ab33b31bb28f666f533313ab27de6505c">_IsUnused</link>&#32;=&#32;__c[__i];
799 &#32;&#32;&#32;&#32;}
800 &#32;&#32;&#32;&#32;_Size_type&#32;__i;
801 &#32;&#32;&#32;&#32;_RandomAccessContainer&#32;__c;
802 &#32;&#32;};
803 
804 &#32;&#32;<emphasis role="comment">//&#32;A&#32;Sequence&#32;is&#32;inherently&#32;mutable</emphasis>
805 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Sequence&gt;
806 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SequenceConcept
807 &#32;&#32;{
808 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sequence::reference&#32;_Reference;
809 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sequence::const_reference&#32;_Const_reference;
810 
811 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
812 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Matt&#32;Austern&apos;s&#32;book&#32;puts&#32;DefaultConstructible&#32;here,&#32;the&#32;C++</emphasis>
813 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;standard&#32;places&#32;it&#32;in&#32;Container</emphasis>
814 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;function_requires&lt;&#32;DefaultConstructible&lt;Sequence&gt;&#32;&gt;();</emphasis>
815 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_Mutable_ForwardContainerConcept&lt;_Sequence&gt;&#32;&gt;();
816 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_DefaultConstructibleConcept&lt;_Sequence&gt;&#32;&gt;();
817 
818 &#32;&#32;&#32;&#32;&#32;&#32;_Sequence
819 &#32;&#32;&#32;&#32;__c&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2boost__concept__check_8h_1ab33b31bb28f666f533313ab27de6505c">_IsUnused</link>(__n,&#32;__t),
820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__c2&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2boost__concept__check_8h_1ab33b31bb28f666f533313ab27de6505c">_IsUnused</link>(__first,&#32;__last);
821 
822 &#32;&#32;&#32;&#32;&#32;&#32;__c.insert(__p,&#32;__t);
823 &#32;&#32;&#32;&#32;&#32;&#32;__c.insert(__p,&#32;__n,&#32;__t);
824 &#32;&#32;&#32;&#32;&#32;&#32;__c.insert(__p,&#32;__first,&#32;__last);
825 
826 &#32;&#32;&#32;&#32;&#32;&#32;__c.erase(__p);
827 &#32;&#32;&#32;&#32;&#32;&#32;__c.erase(__p,&#32;__q);
828 
829 &#32;&#32;&#32;&#32;&#32;&#32;_Reference&#32;__r&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2boost__concept__check_8h_1ab33b31bb28f666f533313ab27de6505c">_IsUnused</link>&#32;=&#32;__c.front();
830 
831 &#32;&#32;&#32;&#32;&#32;&#32;__const_constraints(__c);
832 &#32;&#32;&#32;&#32;}
833 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__const_constraints(<emphasis role="keyword">const</emphasis>&#32;_Sequence&amp;&#32;__c)&#32;{
834 &#32;&#32;&#32;&#32;&#32;&#32;_Const_reference&#32;__r&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2boost__concept__check_8h_1ab33b31bb28f666f533313ab27de6505c">_IsUnused</link>&#32;=&#32;__c.front();
835 &#32;&#32;&#32;&#32;}
836 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sequence::value_type&#32;__t;
837 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sequence::size_type&#32;__n;
838 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sequence::value_type&#32;*__first,&#32;*__last;
839 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sequence::iterator&#32;__p,&#32;__q;
840 &#32;&#32;};
841 
842 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_FrontInsertionSequence&gt;
843 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_FrontInsertionSequenceConcept
844 &#32;&#32;{
845 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
846 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_SequenceConcept&lt;_FrontInsertionSequence&gt;&#32;&gt;();
847 
848 &#32;&#32;&#32;&#32;&#32;&#32;__c.push_front(__t);
849 &#32;&#32;&#32;&#32;&#32;&#32;__c.pop_front();
850 &#32;&#32;&#32;&#32;}
851 &#32;&#32;&#32;&#32;_FrontInsertionSequence&#32;__c;
852 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_FrontInsertionSequence::value_type&#32;__t;
853 &#32;&#32;};
854 
855 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_BackInsertionSequence&gt;
856 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_BackInsertionSequenceConcept
857 &#32;&#32;{
858 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_BackInsertionSequence::reference&#32;_Reference;
859 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_BackInsertionSequence::const_reference&#32;_Const_reference;
860 
861 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__constraints()&#32;{
862 &#32;&#32;&#32;&#32;&#32;&#32;__function_requires&lt;&#32;_SequenceConcept&lt;_BackInsertionSequence&gt;&#32;&gt;();
863 
864 &#32;&#32;&#32;&#32;&#32;&#32;__c.push_back(__t);
865 &#32;&#32;&#32;&#32;&#32;&#32;__c.pop_back();
866 &#32;&#32;&#32;&#32;&#32;&#32;_Reference&#32;__r&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2boost__concept__check_8h_1ab33b31bb28f666f533313ab27de6505c">_IsUnused</link>&#32;=&#32;__c.back();
867 &#32;&#32;&#32;&#32;}
868 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__const_constraints(<emphasis role="keyword">const</emphasis>&#32;_BackInsertionSequence&amp;&#32;__c)&#32;{
869 &#32;&#32;&#32;&#32;&#32;&#32;_Const_reference&#32;__r&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2boost__concept__check_8h_1ab33b31bb28f666f533313ab27de6505c">_IsUnused</link>&#32;=&#32;__c.back();
870 &#32;&#32;&#32;&#32;};
871 &#32;&#32;&#32;&#32;_BackInsertionSequence&#32;__c;
872 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_BackInsertionSequence::value_type&#32;__t;
873 &#32;&#32;};
874 
875 _GLIBCXX_END_NAMESPACE_VERSION
876 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
877 
878 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
879 <emphasis role="preprocessor">#undef&#32;_IsUnused</emphasis>
880 
881 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_BOOST_CONCEPT_CHECK</emphasis>
882 
883 
</programlisting></section>
