<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classarray" xml:lang="en-US">
<title>array Class Reference</title>
<indexterm><primary>array</primary></indexterm>
<para>

<para>A TOML array. </para>
 
</para>
<para>
<computeroutput>#include &lt;array.h&gt;</computeroutput>
</para>
Inheritance diagram for array:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classarray__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for array:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classarray__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_classarray_1af0e812608d7d0f58415f98a112d939cb">value_type</link> = node</para>
</listitem>
            <listitem><para>using <link linkend="_classarray_1ab5532fb7056099ba0485affa76694cc7">size_type</link> = <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link></para>
</listitem>
            <listitem><para>using <link linkend="_classarray_1ac6d6744974ffee1dca66ee63e6bd3139">difference_type</link> = <link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link></para>
</listitem>
            <listitem><para>using <link linkend="_classarray_1a55744407041edf5e34d374ed10ca4809">reference</link> = node &amp;</para>
</listitem>
            <listitem><para>using <link linkend="_classarray_1a0e221fb96f0fbdc07e20b811591fa686">const_reference</link> = const node &amp;</para>
</listitem>
            <listitem><para>using <link linkend="_classarray_1af0e812608d7d0f58415f98a112d939cb">value_type</link> = node</para>
</listitem>
            <listitem><para>using <link linkend="_classarray_1ab5532fb7056099ba0485affa76694cc7">size_type</link> = <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link></para>
</listitem>
            <listitem><para>using <link linkend="_classarray_1ac6d6744974ffee1dca66ee63e6bd3139">difference_type</link> = <link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link></para>
</listitem>
            <listitem><para>using <link linkend="_classarray_1a55744407041edf5e34d374ed10ca4809">reference</link> = node &amp;</para>
</listitem>
            <listitem><para>using <link linkend="_classarray_1a0e221fb96f0fbdc07e20b811591fa686">const_reference</link> = const node &amp;</para>
</listitem>
            <listitem><para>using <link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> = array_iterator</para>
</listitem>
            <listitem><para>using <link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> = <link linkend="_toml_8hpp_1ae3fd8742e4c8e5256fbcdce909c40770">const_array_iterator</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classarray_1ae461d55c88baa4edfc9ae21a33234edb">array</link> () noexcept</para>

<para>Default constructor. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classarray_1a1d7469751b7a1f350f5a4e6561f67dd2">~array</link> () noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classarray_1a99d9d3c50e0a3c58e0dde6cb77fde2ca">array</link> (const <link linkend="_classarray">array</link> &amp;)</para>

<para>Copy constructor. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classarray_1ae614f9aec13214292eabd483ac653d35">array</link> (<link linkend="_classarray">array</link> &amp;&amp;other) noexcept</para>

<para>Move constructor. </para>
</listitem>
            <listitem><para><link linkend="_classarray_1a1bcea1b1c740f3f45fa776b595606e73">TOML_CONSTRAINED_TEMPLATE</link> ((sizeof...(ElemTypes) &gt; 0||!std::is_same_v&lt; impl::remove_cvref&lt; ElemType &gt;, <link linkend="_classarray">array</link> &gt;), typename ElemType, typename... ElemTypes) <link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> explicit <link linkend="_classarray">array</link>(ElemType &amp;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link></para>

<para>Constructs an array with one or more initial elements. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classarray">array</link> &amp; <link linkend="_classarray_1a1e8c1ad2f0705c91a9722ed61024aefb">operator=</link> (<link linkend="_classarray">array</link> &amp;&amp;rhs) noexcept</para>

<para>Move-assignment operator. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classarray_1ae461d55c88baa4edfc9ae21a33234edb">array</link> () noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classarray_1a1d7469751b7a1f350f5a4e6561f67dd2">~array</link> () noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classarray_1a99d9d3c50e0a3c58e0dde6cb77fde2ca">array</link> (const <link linkend="_classarray">array</link> &amp;)</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classarray_1ae614f9aec13214292eabd483ac653d35">array</link> (<link linkend="_classarray">array</link> &amp;&amp;other) noexcept</para>
</listitem>
            <listitem><para><link linkend="_classarray_1a1bcea1b1c740f3f45fa776b595606e73">TOML_CONSTRAINED_TEMPLATE</link> ((sizeof...(ElemTypes) &gt; 0||!std::is_same_v&lt; impl::remove_cvref&lt; ElemType &gt;, <link linkend="_classarray">array</link> &gt;), typename ElemType, typename... ElemTypes) <link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> explicit <link linkend="_classarray">array</link>(ElemType &amp;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link></para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classarray">array</link> &amp; <link linkend="_classarray_1a1e8c1ad2f0705c91a9722ed61024aefb">operator=</link> (<link linkend="_classarray">array</link> &amp;&amp;rhs) noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> node_type <link linkend="_classarray_1a9ccff2347a4e44e86ec966c0aba8aec3">type</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1ac515de2b5c9aeebd65b046191fe53c20">is_homogeneous</link> (node_type ntype) const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1add3b969719a6b19e177f3e1cb444b29a">is_homogeneous</link> (node_type ntype, node *&amp;first_nonmatch) noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1a34a1b4f03f0deeb196920867060a1ed2">is_homogeneous</link> (node_type ntype, const node *&amp;first_nonmatch) const noexcept final</para>
</listitem>
            <listitem><para>template&lt;typename ElemType  = void&gt; </para><para><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1a0f6a36df19a4ea52d2dada6359e59024">is_homogeneous</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1af12f1f0b923817f79649514f378345b1">is_table</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1a15f11553a26aadc2b6035e5bebc1b82e">is_array</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1a6efebd20b162d0297dc45cdcb312f885">is_array_of_tables</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1aa1efcb5bf28b4d1e4f6ccd144fdcf2a1">is_value</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1a26e7c61caa26aceb1d680d3a166039c5">is_string</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1a6d29b7aa90c36ef1ed49e36f98839528">is_integer</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1a4fab255d87c6ae9d36e4a3c246dd5f07">is_floating_point</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1adc342485eeabade65bba8e71174855a4">is_number</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1a1372f03a89df119b74840c3827ca9a5f">is_boolean</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1af962a263286ae8226de1e21808ff0dc5">is_date</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1a64896e10538bbdf9580b847541ddc24a">is_time</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1a17bec6bcc814ae17ec6c677008d331c4">is_date_time</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="_classtable">table</link> * <link linkend="_classarray_1a0392038ae47856939bdb69a45aa02f19">as_table</link> () noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="_classarray">array</link> * <link linkend="_classarray_1ae1acd61c688b255230a78ca6ec23fe90">as_array</link> () noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; std::string &gt; * <link linkend="_classarray_1a2c565b702d0e7f7d0a8b7b560d6942e7">as_string</link> () noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> &gt; * <link linkend="_classarray_1a6eac9d65fd5fc42999c7899d1667e2e7">as_integer</link> () noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; double &gt; * <link linkend="_classarray_1a1e9d91f1eb1bffd5ccb413c5a8629a06">as_floating_point</link> () noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; * <link linkend="_classarray_1a5201cfd7b1e4f781120c57f1bd5bd261">as_boolean</link> () noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; date &gt; * <link linkend="_classarray_1ada3cb4f3e2e02845457837b34b2f51c5">as_date</link> () noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; <link linkend="_structtime">time</link> &gt; * <link linkend="_classarray_1ac6177c03c1242d5e48b8c551350d9bb1">as_time</link> () noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; <link linkend="_structdate__time">date_time</link> &gt; * <link linkend="_classarray_1a9ca76642edccdd01cc1c03d807364afa">as_date_time</link> () noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const <link linkend="_classtable">table</link> * <link linkend="_classarray_1a9ebc4e46a6a25419f143fbb887ceb4ec">as_table</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const <link linkend="_classarray">array</link> * <link linkend="_classarray_1a786d5d347389737ed95296f430449fe6">as_array</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; std::string &gt; * <link linkend="_classarray_1ac584a174d9fe2520d4abde7d70e9a4dd">as_string</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> &gt; * <link linkend="_classarray_1abde810ec6aaffdf0da0b7f8392e875df">as_integer</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; double &gt; * <link linkend="_classarray_1ab720c1761d1c4a4fc3ebba4a8ea5cde6">as_floating_point</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; * <link linkend="_classarray_1a1eabfb6e7690206fc06319c75f9f5ade">as_boolean</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; date &gt; * <link linkend="_classarray_1ad7bd73a6b8abce589acab23df19d7441">as_date</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; <link linkend="_structtime">time</link> &gt; * <link linkend="_classarray_1a63e8132f3b5cad45f09e8afcd4f037d1">as_time</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; <link linkend="_structdate__time">date_time</link> &gt; * <link linkend="_classarray_1a6ca747ebe568724fa759593cfde35c53">as_date_time</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> node * <link linkend="_classarray_1a0b94266548e749456885847091128b5d">get</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>) noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> const node * <link linkend="_classarray_1a5308a8ac094c5dd4d4303f984e3c5755">get</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>) const noexcept</para>
</listitem>
            <listitem><para>template&lt;typename ElemType &gt; </para><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> impl::wrap_node&lt; ElemType &gt; * <link linkend="_classarray_1ae355770b27d72e41a7dca38378ff0c94">get_as</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename ElemType &gt; </para><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const impl::wrap_node&lt; ElemType &gt; * <link linkend="_classarray_1af2c374bb1623a733d0e5abd1a541bc16">get_as</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>) const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> node &amp; <link linkend="_classarray_1aae0a2380f27a021993e6e17afd8068d9">operator[]</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>) noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const node &amp; <link linkend="_classarray_1a5c3b961db194cf3d6e693c5df831f383">operator[]</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>) const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> node &amp; <link linkend="_classarray_1a68878b9acb36940fbd8aa1177110cda1">at</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>)</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const node &amp; <link linkend="_classarray_1ac8e8f2da27ed77280b6ee02d65dd2f82">at</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>) const</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> node &amp; <link linkend="_classarray_1acdfb2184dd4948a173bbd628f59ec2d4">front</link> () noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const node &amp; <link linkend="_classarray_1ae5e63a15acd4888e0fa4e1ddb4811c01">front</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> node &amp; <link linkend="_classarray_1a379242a7c65182981d5ce24535c58296">back</link> () noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const node &amp; <link linkend="_classarray_1aeb918af97cb9bd5d14b705fcef029064">back</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> <link linkend="_classarray_1a0215ba81d7547fcd4e81fed83140b40a">begin</link> () noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> <link linkend="_classarray_1a70e3c270fd06429236eca61c7925a247">begin</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> <link linkend="_classarray_1a2bfcf1d4ba89ba33ced81668ead5d704">cbegin</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> <link linkend="_classarray_1a2027254bbe0a3e797c461a0b2446f656">end</link> () noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> <link linkend="_classarray_1a743a646eff478e5095337b65eea00d16">end</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> <link linkend="_classarray_1a5d0e8fa3ed1e0d92c7c07dab08109aad">cend</link> () const noexcept</para>
</listitem>
            <listitem><para>template&lt;typename Func &gt; </para><para><link linkend="_classarray">array</link> &amp; <link linkend="_classarray_1a6dc6f1d0d32faa3cb32e7632de55cc8d">for_each</link> (Func &amp;&amp;visitor) &amp;noexcept(for_each_is_nothrow&lt; Func &amp;&amp;, <link linkend="_classarray">array</link> &amp; &gt;)</para>
</listitem>
            <listitem><para>template&lt;typename Func &gt; </para><para><link linkend="_classarray">array</link> &amp;&amp; <link linkend="_classarray_1a55e1737c21aa6c44b546bce4a02792f0">for_each</link> (Func &amp;&amp;visitor) &amp;&amp;noexcept(for_each_is_nothrow&lt; Func &amp;&amp;, <link linkend="_classarray">array</link> &amp;&amp; &gt;)</para>
</listitem>
            <listitem><para>template&lt;typename Func &gt; </para><para>const <link linkend="_classarray">array</link> &amp; <link linkend="_classarray_1aab741ce674cbf0b4975bc4fa7f2f7440">for_each</link> (Func &amp;&amp;visitor) const &amp;noexcept(for_each_is_nothrow&lt; Func &amp;&amp;, const <link linkend="_classarray">array</link> &amp; &gt;)</para>
</listitem>
            <listitem><para>template&lt;typename Func &gt; </para><para>const <link linkend="_classarray">array</link> &amp;&amp; <link linkend="_classarray_1aeb60ad85d6a1704300e289ebfb6f4a97">for_each</link> (Func &amp;&amp;visitor) const &amp;&amp;noexcept(for_each_is_nothrow&lt; Func &amp;&amp;, const <link linkend="_classarray">array</link> &amp;&amp; &gt;)</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1aaea8c1a0137a49b14637584bb2aa5d94">empty</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="_classarray_1aeb9d2f12b9199641b8b340365a59174b">size</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="_classarray_1ab4acea77b99e7840afc6d2547a2b0dc2">max_size</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="_classarray_1a3b63fa3d1dce25204338afaa72bb9ba7">capacity</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classarray_1a11fae0d179d11cc04ce16c4cd99cb8d1">reserve</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> new_capacity)</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classarray_1ae420782d223545646c2f76a0f557bf1d">shrink_to_fit</link> ()</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classarray_1a8f0452eded5f124b52b5b31ecfe3ca22">truncate</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> new_size)</para>
</listitem>
            <listitem><para>template&lt;typename ElemType &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classarray_1accdc8c2b96ab9b8dc1355d06be0c268b">resize</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> new_size, ElemType &amp;&amp;default_init_val, <link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link> default_init_flags=<link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> <link linkend="_classarray_1a546d26becf24ade8e2fea51275e076c0">erase</link> (<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> pos) noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> <link linkend="_classarray_1a84e61ee425b558cf7e6e97369afe298d">erase</link> (<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, <link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> last) noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classarray">array</link> &amp; <link linkend="_classarray_1ad02eb6d4631b38d436733d693773eed0">flatten</link> () &amp;</para>
</listitem>
            <listitem><para><link linkend="_classarray">array</link> &amp;&amp; <link linkend="_classarray_1a6e0f6f40c784f569c2b9943d8764312a">flatten</link> () &amp;&amp;</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classarray">array</link> &amp; <link linkend="_classarray_1a6dda9e6ee37dad724f39b2f46ae72f39">prune</link> (<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> recursive=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>) &amp;noexcept</para>
</listitem>
            <listitem><para><link linkend="_classarray">array</link> &amp;&amp; <link linkend="_classarray_1a3abd5f1417098187f796bb4c6717aa60">prune</link> (<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> recursive=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>) &amp;&amp;noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classarray_1a6327207c728cef7a8b406684ee85b66d">pop_back</link> () noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classarray_1a6e618e14b5f8c217bc593837bb3dbeb8">clear</link> () noexcept</para>
</listitem>
            <listitem><para>template&lt;typename ElemType &gt; </para><para><link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> <link linkend="_classarray_1af07cf129863beb7620a07c5eceb08bd2">insert</link> (<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> pos, ElemType &amp;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>, <link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>=<link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)</para>
</listitem>
            <listitem><para>template&lt;typename ElemType &gt; </para><para><link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> <link linkend="_classarray_1a44fd9887f4b76eacdd07ec1a5a0e57f3">insert</link> (<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> pos, <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>, ElemType &amp;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>, <link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>=<link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)</para>
</listitem>
            <listitem><para>template&lt;typename Iter &gt; </para><para><link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> <link linkend="_classarray_1ae11cb9d4ccde0e89d73b14cd929e8449">insert</link> (<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> pos, Iter <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, Iter last, <link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>=<link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)</para>
</listitem>
            <listitem><para>template&lt;typename ElemType &gt; </para><para><link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> <link linkend="_classarray_1a7b9e455ccd8331a7205f9ce66d4593d4">insert</link> (<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> pos, std::initializer_list&lt; ElemType &gt; ilist, <link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>=<link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)</para>
</listitem>
            <listitem><para>template&lt;typename ElemType  = void, typename... Args&gt; </para><para><link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> <link linkend="_classarray_1ae05181bf0df8b0c85da9ae13458b0a06">emplace</link> (<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> pos, Args &amp;&amp;... args)</para>
</listitem>
            <listitem><para>template&lt;typename ElemType &gt; </para><para><link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> <link linkend="_classarray_1ad47525682635a4ae40f663ed52bb05e7">replace</link> (<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> pos, ElemType &amp;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>, <link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>=<link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)</para>
</listitem>
            <listitem><para>template&lt;typename ElemType &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classarray_1afa5750f44dfcc2e9c7097a3efb02019c">push_back</link> (ElemType &amp;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>, <link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>=<link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)</para>
</listitem>
            <listitem><para>template&lt;typename ElemType  = void, typename... Args&gt; </para><para>decltype(auto) <link linkend="_classarray_1a59266d6b5fce72dc6fe0db2e16446bb0">emplace_back</link> (Args &amp;&amp;... args)</para>
</listitem>
            <listitem><para><link linkend="_classarray_1a5940e61991f3006afb94e17d0b1d93ac">TOML_ASYMMETRICAL_EQUALITY_OPS</link> (const <link linkend="_classarray">array</link> &amp;, const std::initializer_list&lt; T &gt; &amp;, template&lt; typename T &gt;)</para>
</listitem>
            <listitem><para><link linkend="_classarray_1a54e1e8b41a7532a12d719b232f22d5f2">TOML_ASYMMETRICAL_EQUALITY_OPS</link> (const <link linkend="_classarray">array</link> &amp;, const std::vector&lt; T &gt; &amp;, template&lt; typename T &gt;)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title>Type checks</title>
        <itemizedlist>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> node_type <link linkend="_classarray_1a9ccff2347a4e44e86ec966c0aba8aec3">type</link> () const noexcept final</para>

<para>Returns #toml::node_type::array. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1ac515de2b5c9aeebd65b046191fe53c20">is_homogeneous</link> (node_type ntype) const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1add3b969719a6b19e177f3e1cb444b29a">is_homogeneous</link> (node_type ntype, node *&amp;first_nonmatch) noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1a34a1b4f03f0deeb196920867060a1ed2">is_homogeneous</link> (node_type ntype, const node *&amp;first_nonmatch) const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1af12f1f0b923817f79649514f378345b1">is_table</link> () const noexcept final</para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1a15f11553a26aadc2b6035e5bebc1b82e">is_array</link> () const noexcept final</para>

<para>Returns <computeroutput>true</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1a6efebd20b162d0297dc45cdcb312f885">is_array_of_tables</link> () const noexcept final</para>

<para>Returns <computeroutput>true</computeroutput> if the array contains only tables. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1aa1efcb5bf28b4d1e4f6ccd144fdcf2a1">is_value</link> () const noexcept final</para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1a26e7c61caa26aceb1d680d3a166039c5">is_string</link> () const noexcept final</para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1a6d29b7aa90c36ef1ed49e36f98839528">is_integer</link> () const noexcept final</para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1a4fab255d87c6ae9d36e4a3c246dd5f07">is_floating_point</link> () const noexcept final</para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1adc342485eeabade65bba8e71174855a4">is_number</link> () const noexcept final</para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1a1372f03a89df119b74840c3827ca9a5f">is_boolean</link> () const noexcept final</para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1af962a263286ae8226de1e21808ff0dc5">is_date</link> () const noexcept final</para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1a64896e10538bbdf9580b847541ddc24a">is_time</link> () const noexcept final</para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1a17bec6bcc814ae17ec6c677008d331c4">is_date_time</link> () const noexcept final</para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title>Type casts</title>
        <itemizedlist>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="_classtable">table</link> * <link linkend="_classarray_1a0392038ae47856939bdb69a45aa02f19">as_table</link> () noexcept final</para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="_classarray">array</link> * <link linkend="_classarray_1ae1acd61c688b255230a78ca6ec23fe90">as_array</link> () noexcept final</para>

<para>Returns a pointer to the array. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; std::string &gt; * <link linkend="_classarray_1a2c565b702d0e7f7d0a8b7b560d6942e7">as_string</link> () noexcept final</para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> &gt; * <link linkend="_classarray_1a6eac9d65fd5fc42999c7899d1667e2e7">as_integer</link> () noexcept final</para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; double &gt; * <link linkend="_classarray_1a1e9d91f1eb1bffd5ccb413c5a8629a06">as_floating_point</link> () noexcept final</para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; * <link linkend="_classarray_1a5201cfd7b1e4f781120c57f1bd5bd261">as_boolean</link> () noexcept final</para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; date &gt; * <link linkend="_classarray_1ada3cb4f3e2e02845457837b34b2f51c5">as_date</link> () noexcept final</para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; <link linkend="_structtime">time</link> &gt; * <link linkend="_classarray_1ac6177c03c1242d5e48b8c551350d9bb1">as_time</link> () noexcept final</para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; <link linkend="_structdate__time">date_time</link> &gt; * <link linkend="_classarray_1a9ca76642edccdd01cc1c03d807364afa">as_date_time</link> () noexcept final</para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const <link linkend="_classtable">table</link> * <link linkend="_classarray_1a9ebc4e46a6a25419f143fbb887ceb4ec">as_table</link> () const noexcept final</para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const <link linkend="_classarray">array</link> * <link linkend="_classarray_1a786d5d347389737ed95296f430449fe6">as_array</link> () const noexcept final</para>

<para>Returns a const-qualified pointer to the array. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; std::string &gt; * <link linkend="_classarray_1ac584a174d9fe2520d4abde7d70e9a4dd">as_string</link> () const noexcept final</para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> &gt; * <link linkend="_classarray_1abde810ec6aaffdf0da0b7f8392e875df">as_integer</link> () const noexcept final</para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; double &gt; * <link linkend="_classarray_1ab720c1761d1c4a4fc3ebba4a8ea5cde6">as_floating_point</link> () const noexcept final</para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; * <link linkend="_classarray_1a1eabfb6e7690206fc06319c75f9f5ade">as_boolean</link> () const noexcept final</para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; date &gt; * <link linkend="_classarray_1ad7bd73a6b8abce589acab23df19d7441">as_date</link> () const noexcept final</para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; <link linkend="_structtime">time</link> &gt; * <link linkend="_classarray_1a63e8132f3b5cad45f09e8afcd4f037d1">as_time</link> () const noexcept final</para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; <link linkend="_structdate__time">date_time</link> &gt; * <link linkend="_classarray_1a6ca747ebe568724fa759593cfde35c53">as_date_time</link> () const noexcept final</para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title>Value retrieval</title>
        <itemizedlist>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> node * <link linkend="_classarray_1a0b94266548e749456885847091128b5d">get</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>) noexcept</para>

<para>Gets a pointer to the element at a specific index. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> const node * <link linkend="_classarray_1a5308a8ac094c5dd4d4303f984e3c5755">get</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>) const noexcept</para>

<para>Gets a pointer to the element at a specific index (const overload). </para>
</listitem>
            <listitem><para>template&lt;typename ElemType &gt; </para><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> impl::wrap_node&lt; ElemType &gt; * <link linkend="_classarray_1ae355770b27d72e41a7dca38378ff0c94">get_as</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>) noexcept</para>

<para>Gets a pointer to the element at a specific index if it is a particular type. </para>
</listitem>
            <listitem><para>template&lt;typename ElemType &gt; </para><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const impl::wrap_node&lt; ElemType &gt; * <link linkend="_classarray_1af2c374bb1623a733d0e5abd1a541bc16">get_as</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>) const noexcept</para>

<para>Gets a pointer to the element at a specific index if it is a particular type (const overload). </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> node &amp; <link linkend="_classarray_1aae0a2380f27a021993e6e17afd8068d9">operator[]</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>) noexcept</para>

<para>Gets a reference to the element at a specific index. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const node &amp; <link linkend="_classarray_1a5c3b961db194cf3d6e693c5df831f383">operator[]</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>) const noexcept</para>

<para>Gets a reference to the element at a specific index. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> node &amp; <link linkend="_classarray_1a68878b9acb36940fbd8aa1177110cda1">at</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>)</para>

<para>Gets a reference to the element at a specific index, throwing <computeroutput>std::out_of_range</computeroutput> if none existed. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const node &amp; <link linkend="_classarray_1ac8e8f2da27ed77280b6ee02d65dd2f82">at</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>) const</para>

<para>Gets a reference to the element at a specific index, throwing <computeroutput>std::out_of_range</computeroutput> if none existed. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> node &amp; <link linkend="_classarray_1acdfb2184dd4948a173bbd628f59ec2d4">front</link> () noexcept</para>

<para>Returns a reference to the first element in the array. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const node &amp; <link linkend="_classarray_1ae5e63a15acd4888e0fa4e1ddb4811c01">front</link> () const noexcept</para>

<para>Returns a reference to the first element in the array. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> node &amp; <link linkend="_classarray_1a379242a7c65182981d5ce24535c58296">back</link> () noexcept</para>

<para>Returns a reference to the last element in the array. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const node &amp; <link linkend="_classarray_1aeb918af97cb9bd5d14b705fcef029064">back</link> () const noexcept</para>

<para>Returns a reference to the last element in the array. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title>Size and Capacity</title>
        <itemizedlist>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1aaea8c1a0137a49b14637584bb2aa5d94">empty</link> () const noexcept</para>

<para>Returns true if the array is empty. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="_classarray_1aeb9d2f12b9199641b8b340365a59174b">size</link> () const noexcept</para>

<para>Returns the number of elements in the array. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="_classarray_1ab4acea77b99e7840afc6d2547a2b0dc2">max_size</link> () const noexcept</para>

<para>Returns the maximum number of elements that can be stored in an array on the current platform. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="_classarray_1a3b63fa3d1dce25204338afaa72bb9ba7">capacity</link> () const noexcept</para>

<para>Returns the current max number of elements that may be held in the array&apos;s internal storage. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classarray_1a11fae0d179d11cc04ce16c4cd99cb8d1">reserve</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> new_capacity)</para>

<para>Reserves internal storage capacity up to a pre-determined number of elements. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classarray_1ae420782d223545646c2f76a0f557bf1d">shrink_to_fit</link> ()</para>

<para>Requests the removal of any unused internal storage capacity. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classarray_1a8f0452eded5f124b52b5b31ecfe3ca22">truncate</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> new_size)</para>

<para>Shrinks the array to the given size. </para>
</listitem>
            <listitem><para>template&lt;typename ElemType &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classarray_1accdc8c2b96ab9b8dc1355d06be0c268b">resize</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> new_size, ElemType &amp;&amp;default_init_val, <link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link> default_init_flags=<link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)</para>

<para>Resizes the array. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title>Erasure</title>
        <itemizedlist>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> <link linkend="_classarray_1a546d26becf24ade8e2fea51275e076c0">erase</link> (<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> pos) noexcept</para>

<para>Removes the specified element from the array. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> <link linkend="_classarray_1a84e61ee425b558cf7e6e97369afe298d">erase</link> (<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, <link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> last) noexcept</para>

<para>Removes the elements in the range [first, last) from the array. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classarray">array</link> &amp; <link linkend="_classarray_1ad02eb6d4631b38d436733d693773eed0">flatten</link> () &amp;</para>

<para>Flattens this array, recursively hoisting the contents of child arrays up into itself. </para>
</listitem>
            <listitem><para><link linkend="_classarray">array</link> &amp;&amp; <link linkend="_classarray_1a6e0f6f40c784f569c2b9943d8764312a">flatten</link> () &amp;&amp;</para>

<para>Flattens this array, recursively hoisting the contents of child arrays up into itself (rvalue overload). </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classarray">array</link> &amp; <link linkend="_classarray_1a6dda9e6ee37dad724f39b2f46ae72f39">prune</link> (<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> recursive=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>) &amp;noexcept</para>

<para>Removes empty child arrays and tables. </para>
</listitem>
            <listitem><para><link linkend="_classarray">array</link> &amp;&amp; <link linkend="_classarray_1a3abd5f1417098187f796bb4c6717aa60">prune</link> (<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> recursive=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>) &amp;&amp;noexcept</para>

<para>Removes empty child arrays and tables (rvalue overload). </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classarray_1a6327207c728cef7a8b406684ee85b66d">pop_back</link> () noexcept</para>

<para>Removes the last element from the array. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classarray_1a6e618e14b5f8c217bc593837bb3dbeb8">clear</link> () noexcept</para>

<para>Removes all elements from the array. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title>Insertion and Emplacement</title>
        <itemizedlist>
            <listitem><para>template&lt;typename ElemType &gt; </para><para><link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> <link linkend="_classarray_1af07cf129863beb7620a07c5eceb08bd2">insert</link> (<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> pos, ElemType &amp;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>, <link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>=<link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)</para>

<para>Inserts a new element at a specific position in the array. </para>
</listitem>
            <listitem><para>template&lt;typename ElemType &gt; </para><para><link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> <link linkend="_classarray_1a44fd9887f4b76eacdd07ec1a5a0e57f3">insert</link> (<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> pos, <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>, ElemType &amp;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>, <link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>=<link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)</para>

<para>Repeatedly inserts a new element starting at a specific position in the array. </para>
</listitem>
            <listitem><para>template&lt;typename Iter &gt; </para><para><link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> <link linkend="_classarray_1ae11cb9d4ccde0e89d73b14cd929e8449">insert</link> (<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> pos, Iter <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, Iter last, <link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>=<link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)</para>

<para>Inserts a range of elements into the array at a specific position. </para>
</listitem>
            <listitem><para>template&lt;typename ElemType &gt; </para><para><link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> <link linkend="_classarray_1a7b9e455ccd8331a7205f9ce66d4593d4">insert</link> (<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> pos, std::initializer_list&lt; ElemType &gt; ilist, <link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>=<link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)</para>

<para>Inserts a range of elements into the array at a specific position. </para>
</listitem>
            <listitem><para>template&lt;typename ElemType  = void, typename... Args&gt; </para><para><link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> <link linkend="_classarray_1ae05181bf0df8b0c85da9ae13458b0a06">emplace</link> (<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> pos, Args &amp;&amp;... args)</para>

<para>Emplaces a new element at a specific position in the array. </para>
</listitem>
            <listitem><para>template&lt;typename ElemType &gt; </para><para><link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> <link linkend="_classarray_1ad47525682635a4ae40f663ed52bb05e7">replace</link> (<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> pos, ElemType &amp;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>, <link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>=<link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)</para>

<para>Replaces the element at a specific position in the array with a different value. </para>
</listitem>
            <listitem><para>template&lt;typename ElemType &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classarray_1afa5750f44dfcc2e9c7097a3efb02019c">push_back</link> (ElemType &amp;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>, <link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>=<link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)</para>

<para>Appends a new element to the end of the array. </para>
</listitem>
            <listitem><para>template&lt;typename ElemType  = void, typename... Args&gt; </para><para>decltype(auto) <link linkend="_classarray_1a59266d6b5fce72dc6fe0db2e16446bb0">emplace_back</link> (Args &amp;&amp;... args)</para>

<para>Emplaces a new element at the end of the array. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para>ElemTypes &amp;&amp; <link linkend="_classarray_1ad3adfb805aded9285440bb4a31cd38b1">vals</link>: <link linkend="_classarray">array</link>{ std::false_type{}</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Friends    </title>
        <itemizedlist>
            <listitem><para>std::ostream &amp; <link linkend="_classarray_1ada82b30641e7546cfe89ece1db7436cc">operator&lt;&lt;</link> (std::ostream &amp;lhs, const <link linkend="_classarray">array</link> &amp;rhs)</para>

<para>Prints the array out to a stream as formatted TOML. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1a9b0bbc5272ae44ea14a06ec70cfa1882">operator==</link> (const <link linkend="_classarray">array</link> &amp;lhs, const <link linkend="_classarray">array</link> &amp;rhs) noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1a45e3c17332ca62a1e0bff55d0808116c">operator!=</link> (const <link linkend="_classarray">array</link> &amp;lhs, const <link linkend="_classarray">array</link> &amp;rhs) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1a12cf27ed8dbb468cff18164aad02e289">operator==</link> (const <link linkend="_classarray">array</link> &amp;lhs, const std::initializer_list&lt; T &gt; &amp;rhs) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1a1afcb945a833cd794f4696d0965bcb15">operator==</link> (const <link linkend="_classarray">array</link> &amp;lhs, const std::vector&lt; T &gt; &amp;rhs) noexcept</para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_classarray_1ada82b30641e7546cfe89ece1db7436cc">operator&lt;&lt;</link> (std::ostream &amp;lhs, const <link linkend="_classarray">array</link> &amp;rhs)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Iteration    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> = array_iterator</para>

<para>A RandomAccessIterator for iterating over elements in a toml::array. </para>
</listitem>
            <listitem><para>using <link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> = <link linkend="_toml_8hpp_1ae3fd8742e4c8e5256fbcdce909c40770">const_array_iterator</link></para>

<para>A RandomAccessIterator for iterating over const elements in a toml::array. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> <link linkend="_classarray_1a0215ba81d7547fcd4e81fed83140b40a">begin</link> () noexcept</para>

<para>Returns an iterator to the first element. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> <link linkend="_classarray_1a70e3c270fd06429236eca61c7925a247">begin</link> () const noexcept</para>

<para>Returns an iterator to the first element. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> <link linkend="_classarray_1a2bfcf1d4ba89ba33ced81668ead5d704">cbegin</link> () const noexcept</para>

<para>Returns an iterator to the first element. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> <link linkend="_classarray_1a2027254bbe0a3e797c461a0b2446f656">end</link> () noexcept</para>

<para>Returns an iterator to one-past-the-last element. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> <link linkend="_classarray_1a743a646eff478e5095337b65eea00d16">end</link> () const noexcept</para>

<para>Returns an iterator to one-past-the-last element. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> <link linkend="_classarray_1a5d0e8fa3ed1e0d92c7c07dab08109aad">cend</link> () const noexcept</para>

<para>Returns an iterator to one-past-the-last element. </para>
</listitem>
            <listitem><para>template&lt;typename Func &gt; </para><para><link linkend="_classarray">array</link> &amp; <link linkend="_classarray_1a6dc6f1d0d32faa3cb32e7632de55cc8d">for_each</link> (Func &amp;&amp;visitor) &amp;noexcept(for_each_is_nothrow&lt; Func &amp;&amp;, <link linkend="_classarray">array</link> &amp; &gt;)</para>

<para>Invokes a visitor on each element in the array. </para>
</listitem>
            <listitem><para>template&lt;typename Func &gt; </para><para><link linkend="_classarray">array</link> &amp;&amp; <link linkend="_classarray_1a55e1737c21aa6c44b546bce4a02792f0">for_each</link> (Func &amp;&amp;visitor) &amp;&amp;noexcept(for_each_is_nothrow&lt; Func &amp;&amp;, <link linkend="_classarray">array</link> &amp;&amp; &gt;)</para>

<para>Invokes a visitor on each element in the array (rvalue overload). </para>
</listitem>
            <listitem><para>template&lt;typename Func &gt; </para><para>const <link linkend="_classarray">array</link> &amp; <link linkend="_classarray_1aab741ce674cbf0b4975bc4fa7f2f7440">for_each</link> (Func &amp;&amp;visitor) const &amp;noexcept(for_each_is_nothrow&lt; Func &amp;&amp;, const <link linkend="_classarray">array</link> &amp; &gt;)</para>

<para>Invokes a visitor on each element in the array (const lvalue overload). </para>
</listitem>
            <listitem><para>template&lt;typename Func &gt; </para><para>const <link linkend="_classarray">array</link> &amp;&amp; <link linkend="_classarray_1aeb60ad85d6a1704300e289ebfb6f4a97">for_each</link> (Func &amp;&amp;visitor) const &amp;&amp;noexcept(for_each_is_nothrow&lt; Func &amp;&amp;, const <link linkend="_classarray">array</link> &amp;&amp; &gt;)</para>

<para>Invokes a visitor on each element in the array (const rvalue overload). </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Equality    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classarray_1a5940e61991f3006afb94e17d0b1d93ac">TOML_ASYMMETRICAL_EQUALITY_OPS</link> (const <link linkend="_classarray">array</link> &amp;, const std::initializer_list&lt; T &gt; &amp;, template&lt; typename T &gt;)</para>
</listitem>
            <listitem><para><link linkend="_classarray_1a54e1e8b41a7532a12d719b232f22d5f2">TOML_ASYMMETRICAL_EQUALITY_OPS</link> (const <link linkend="_classarray">array</link> &amp;, const std::vector&lt; T &gt; &amp;, template&lt; typename T &gt;)</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1a9b0bbc5272ae44ea14a06ec70cfa1882">operator==</link> (const <link linkend="_classarray">array</link> &amp;lhs, const <link linkend="_classarray">array</link> &amp;rhs) noexcept</para>

<para>Equality operator. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1a45e3c17332ca62a1e0bff55d0808116c">operator!=</link> (const <link linkend="_classarray">array</link> &amp;lhs, const <link linkend="_classarray">array</link> &amp;rhs) noexcept</para>

<para>Inequality operator. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1a12cf27ed8dbb468cff18164aad02e289">operator==</link> (const <link linkend="_classarray">array</link> &amp;lhs, const std::initializer_list&lt; T &gt; &amp;rhs) noexcept</para>

<para>Initializer list equality operator. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classarray_1a1afcb945a833cd794f4696d0965bcb15">operator==</link> (const <link linkend="_classarray">array</link> &amp;lhs, const std::vector&lt; T &gt; &amp;rhs) noexcept</para>

<para>Vector equality operator. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>A TOML array. </para>



<para>\detail The interface of this type is modeled after std::vector, with some additional considerations made for the heterogeneous nature of a TOML array.</para>

<para>\godbolt{sjK4da}</para>

<para>\cpp</para>

<para>toml::table tbl = toml::parse(R&quot;(
    arr = [1, 2, 3, 4, &apos;five&apos;]
)&quot;sv);</para>

<para>// get the element as an array toml::array&amp; arr = *tbl.<link linkend="_classarray_1ae355770b27d72e41a7dca38378ff0c94">get_as&lt;toml::array&gt;</link>(&quot;arr&quot;); std::cout &lt;&lt; arr &lt;&lt; &quot;\n&quot;;</para>

<para>// increment each element with visit() for (auto&amp;&amp; elem : arr) { elem.visit([](auto&amp;&amp; el) noexcept { if constexpr (toml::is_number&lt;decltype(el)&gt;) (*el)++; else if constexpr (toml::is_string&lt;decltype(el)&gt;) el = &quot;six&quot;sv; }); } std::cout &lt;&lt; arr &lt;&lt; &quot;\n&quot;;</para>

<para>// add and remove elements arr.push_back(7); arr.push_back(8.0f); arr.push_back(&quot;nine&quot;sv); arr.erase(arr.cbegin()); std::cout &lt;&lt; arr &lt;&lt; &quot;\n&quot;;</para>

<para>// emplace elements arr.emplace_back(&quot;ten&quot;); arr.emplace_back&lt;toml::array&gt;(11, 12.0); std::cout &lt;&lt; arr &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out [ 1, 2, 3, 4, &apos;five&apos; ] [ 2, 3, 4, 5, &apos;six&apos; ] [ 3, 4, 5, &apos;six&apos;, 7, 8.0, &apos;nine&apos; ] [ 3, 4, 5, &apos;six&apos;, 7, 8.0, &apos;nine&apos;, &apos;ten&apos;, [ 11, 12.0 ] ] \eout </para>
</section>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983"/><section>
    <title>const_iterator<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>const_iterator</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>const_iterator</secondary></indexterm>
<para><computeroutput>using <link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">array::const_iterator</link> =  <link linkend="_toml_8hpp_1ae3fd8742e4c8e5256fbcdce909c40770">const_array_iterator</link></computeroutput></para><para>

<para>A RandomAccessIterator for iterating over const elements in a toml::array. </para>
</para>
</section>
<anchor xml:id="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983"/><section>
    <title>const_iterator<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>const_iterator</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>const_iterator</secondary></indexterm>
<para><computeroutput>using <link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">array::const_iterator</link> =  <link linkend="_toml_8hpp_1ae3fd8742e4c8e5256fbcdce909c40770">const_array_iterator</link></computeroutput></para></section>
<anchor xml:id="_classarray_1a0e221fb96f0fbdc07e20b811591fa686"/><section>
    <title>const_reference<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>const_reference</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>const_reference</secondary></indexterm>
<para><computeroutput>using <link linkend="_classarray_1a0e221fb96f0fbdc07e20b811591fa686">array::const_reference</link> =  const node&amp;</computeroutput></para></section>
<anchor xml:id="_classarray_1a0e221fb96f0fbdc07e20b811591fa686"/><section>
    <title>const_reference<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>const_reference</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>const_reference</secondary></indexterm>
<para><computeroutput>using <link linkend="_classarray_1a0e221fb96f0fbdc07e20b811591fa686">array::const_reference</link> =  const node&amp;</computeroutput></para></section>
<anchor xml:id="_classarray_1ac6d6744974ffee1dca66ee63e6bd3139"/><section>
    <title>difference_type<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>difference_type</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>difference_type</secondary></indexterm>
<para><computeroutput>using <link linkend="_classarray_1ac6d6744974ffee1dca66ee63e6bd3139">array::difference_type</link> =  <link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link></computeroutput></para></section>
<anchor xml:id="_classarray_1ac6d6744974ffee1dca66ee63e6bd3139"/><section>
    <title>difference_type<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>difference_type</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>difference_type</secondary></indexterm>
<para><computeroutput>using <link linkend="_classarray_1ac6d6744974ffee1dca66ee63e6bd3139">array::difference_type</link> =  <link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link></computeroutput></para></section>
<anchor xml:id="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a"/><section>
    <title>iterator<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>iterator</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>iterator</secondary></indexterm>
<para><computeroutput>using <link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">array::iterator</link> =  array_iterator</computeroutput></para><para>

<para>A RandomAccessIterator for iterating over elements in a toml::array. </para>
</para>
</section>
<anchor xml:id="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a"/><section>
    <title>iterator<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>iterator</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>iterator</secondary></indexterm>
<para><computeroutput>using <link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">array::iterator</link> =  array_iterator</computeroutput></para></section>
<anchor xml:id="_classarray_1a55744407041edf5e34d374ed10ca4809"/><section>
    <title>reference<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>reference</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>reference</secondary></indexterm>
<para><computeroutput>using <link linkend="_classarray_1a55744407041edf5e34d374ed10ca4809">array::reference</link> =  node&amp;</computeroutput></para></section>
<anchor xml:id="_classarray_1a55744407041edf5e34d374ed10ca4809"/><section>
    <title>reference<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>reference</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>reference</secondary></indexterm>
<para><computeroutput>using <link linkend="_classarray_1a55744407041edf5e34d374ed10ca4809">array::reference</link> =  node&amp;</computeroutput></para></section>
<anchor xml:id="_classarray_1ab5532fb7056099ba0485affa76694cc7"/><section>
    <title>size_type<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>size_type</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>size_type</secondary></indexterm>
<para><computeroutput>using <link linkend="_classarray_1ab5532fb7056099ba0485affa76694cc7">array::size_type</link> =  <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link></computeroutput></para></section>
<anchor xml:id="_classarray_1ab5532fb7056099ba0485affa76694cc7"/><section>
    <title>size_type<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>size_type</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>size_type</secondary></indexterm>
<para><computeroutput>using <link linkend="_classarray_1ab5532fb7056099ba0485affa76694cc7">array::size_type</link> =  <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link></computeroutput></para></section>
<anchor xml:id="_classarray_1af0e812608d7d0f58415f98a112d939cb"/><section>
    <title>value_type<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>value_type</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>value_type</secondary></indexterm>
<para><computeroutput>using <link linkend="_classarray_1af0e812608d7d0f58415f98a112d939cb">array::value_type</link> =  node</computeroutput></para></section>
<anchor xml:id="_classarray_1af0e812608d7d0f58415f98a112d939cb"/><section>
    <title>value_type<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>value_type</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>value_type</secondary></indexterm>
<para><computeroutput>using <link linkend="_classarray_1af0e812608d7d0f58415f98a112d939cb">array::value_type</link> =  node</computeroutput></para></section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classarray_1ae461d55c88baa4edfc9ae21a33234edb"/><section>
    <title>array()<computeroutput>[1/6]</computeroutput></title>
<indexterm><primary>array</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>array</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> array::array ( )<computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Default constructor. </para>
</para>
</section>
<anchor xml:id="_classarray_1a1d7469751b7a1f350f5a4e6561f67dd2"/><section>
    <title>~array()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>~array</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>~array</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> array::~array ( )<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a99d9d3c50e0a3c58e0dde6cb77fde2ca"/><section>
    <title>array()<computeroutput>[2/6]</computeroutput></title>
<indexterm><primary>array</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>array</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> array::array (const <link linkend="_classarray">array</link> &amp; )</computeroutput></para><para>

<para>Copy constructor. </para>
</para>
</section>
<anchor xml:id="_classarray_1ae614f9aec13214292eabd483ac653d35"/><section>
    <title>array()<computeroutput>[3/6]</computeroutput></title>
<indexterm><primary>array</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>array</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> array::array (<link linkend="_classarray">array</link> &amp;&amp; other)<computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Move constructor. </para>
</para>
</section>
<anchor xml:id="_classarray_1ae461d55c88baa4edfc9ae21a33234edb"/><section>
    <title>array()<computeroutput>[4/6]</computeroutput></title>
<indexterm><primary>array</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>array</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> array::array ( )<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a1d7469751b7a1f350f5a4e6561f67dd2"/><section>
    <title>~array()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>~array</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>~array</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> array::~array ( )<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a99d9d3c50e0a3c58e0dde6cb77fde2ca"/><section>
    <title>array()<computeroutput>[5/6]</computeroutput></title>
<indexterm><primary>array</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>array</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> array::array (const <link linkend="_classarray">array</link> &amp; )</computeroutput></para></section>
<anchor xml:id="_classarray_1ae614f9aec13214292eabd483ac653d35"/><section>
    <title>array()<computeroutput>[6/6]</computeroutput></title>
<indexterm><primary>array</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>array</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> array::array (<link linkend="_classarray">array</link> &amp;&amp; other)<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classarray_1a786d5d347389737ed95296f430449fe6"/><section>
    <title>as_array()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>as_array</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>as_array</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const <link linkend="_classarray">array</link> * array::as_array ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns a const-qualified pointer to the array. </para>
</para>
</section>
<anchor xml:id="_classarray_1a786d5d347389737ed95296f430449fe6"/><section>
    <title>as_array()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>as_array</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>as_array</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const <link linkend="_classarray">array</link> * array::as_array ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1ae1acd61c688b255230a78ca6ec23fe90"/><section>
    <title>as_array()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>as_array</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>as_array</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="_classarray">array</link> * array::as_array ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns a pointer to the array. </para>
</para>
</section>
<anchor xml:id="_classarray_1ae1acd61c688b255230a78ca6ec23fe90"/><section>
    <title>as_array()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>as_array</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>as_array</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="_classarray">array</link> * array::as_array ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a1eabfb6e7690206fc06319c75f9f5ade"/><section>
    <title>as_boolean()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>as_boolean</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>as_boolean</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; * array::as_boolean ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classarray_1a1eabfb6e7690206fc06319c75f9f5ade"/><section>
    <title>as_boolean()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>as_boolean</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>as_boolean</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; * array::as_boolean ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a5201cfd7b1e4f781120c57f1bd5bd261"/><section>
    <title>as_boolean()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>as_boolean</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>as_boolean</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; * array::as_boolean ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classarray_1a5201cfd7b1e4f781120c57f1bd5bd261"/><section>
    <title>as_boolean()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>as_boolean</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>as_boolean</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; * array::as_boolean ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1ad7bd73a6b8abce589acab23df19d7441"/><section>
    <title>as_date()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>as_date</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>as_date</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; date &gt; * array::as_date ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classarray_1ad7bd73a6b8abce589acab23df19d7441"/><section>
    <title>as_date()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>as_date</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>as_date</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; date &gt; * array::as_date ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1ada3cb4f3e2e02845457837b34b2f51c5"/><section>
    <title>as_date()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>as_date</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>as_date</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; date &gt; * array::as_date ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classarray_1ada3cb4f3e2e02845457837b34b2f51c5"/><section>
    <title>as_date()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>as_date</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>as_date</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; date &gt; * array::as_date ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a6ca747ebe568724fa759593cfde35c53"/><section>
    <title>as_date_time()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>as_date_time</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>as_date_time</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; <link linkend="_structdate__time">date_time</link> &gt; * array::as_date_time ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classarray_1a6ca747ebe568724fa759593cfde35c53"/><section>
    <title>as_date_time()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>as_date_time</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>as_date_time</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; <link linkend="_structdate__time">date_time</link> &gt; * array::as_date_time ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a9ca76642edccdd01cc1c03d807364afa"/><section>
    <title>as_date_time()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>as_date_time</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>as_date_time</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; <link linkend="_structdate__time">date_time</link> &gt; * array::as_date_time ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classarray_1a9ca76642edccdd01cc1c03d807364afa"/><section>
    <title>as_date_time()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>as_date_time</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>as_date_time</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; <link linkend="_structdate__time">date_time</link> &gt; * array::as_date_time ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1ab720c1761d1c4a4fc3ebba4a8ea5cde6"/><section>
    <title>as_floating_point()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>as_floating_point</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>as_floating_point</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; double &gt; * array::as_floating_point ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classarray_1ab720c1761d1c4a4fc3ebba4a8ea5cde6"/><section>
    <title>as_floating_point()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>as_floating_point</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>as_floating_point</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; double &gt; * array::as_floating_point ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a1e9d91f1eb1bffd5ccb413c5a8629a06"/><section>
    <title>as_floating_point()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>as_floating_point</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>as_floating_point</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; double &gt; * array::as_floating_point ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classarray_1a1e9d91f1eb1bffd5ccb413c5a8629a06"/><section>
    <title>as_floating_point()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>as_floating_point</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>as_floating_point</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; double &gt; * array::as_floating_point ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1abde810ec6aaffdf0da0b7f8392e875df"/><section>
    <title>as_integer()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>as_integer</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>as_integer</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> &gt; * array::as_integer ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classarray_1abde810ec6aaffdf0da0b7f8392e875df"/><section>
    <title>as_integer()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>as_integer</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>as_integer</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> &gt; * array::as_integer ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a6eac9d65fd5fc42999c7899d1667e2e7"/><section>
    <title>as_integer()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>as_integer</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>as_integer</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> &gt; * array::as_integer ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classarray_1a6eac9d65fd5fc42999c7899d1667e2e7"/><section>
    <title>as_integer()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>as_integer</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>as_integer</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> &gt; * array::as_integer ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1ac584a174d9fe2520d4abde7d70e9a4dd"/><section>
    <title>as_string()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>as_string</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>as_string</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; std::string &gt; * array::as_string ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classarray_1ac584a174d9fe2520d4abde7d70e9a4dd"/><section>
    <title>as_string()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>as_string</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>as_string</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; std::string &gt; * array::as_string ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a2c565b702d0e7f7d0a8b7b560d6942e7"/><section>
    <title>as_string()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>as_string</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>as_string</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; std::string &gt; * array::as_string ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classarray_1a2c565b702d0e7f7d0a8b7b560d6942e7"/><section>
    <title>as_string()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>as_string</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>as_string</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; std::string &gt; * array::as_string ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a9ebc4e46a6a25419f143fbb887ceb4ec"/><section>
    <title>as_table()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>as_table</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>as_table</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const <link linkend="_classtable">table</link> * array::as_table ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classarray_1a9ebc4e46a6a25419f143fbb887ceb4ec"/><section>
    <title>as_table()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>as_table</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>as_table</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const <link linkend="_classtable">table</link> * array::as_table ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a0392038ae47856939bdb69a45aa02f19"/><section>
    <title>as_table()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>as_table</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>as_table</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="_classtable">table</link> * array::as_table ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classarray_1a0392038ae47856939bdb69a45aa02f19"/><section>
    <title>as_table()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>as_table</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>as_table</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="_classtable">table</link> * array::as_table ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a63e8132f3b5cad45f09e8afcd4f037d1"/><section>
    <title>as_time()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>as_time</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>as_time</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; <link linkend="_structtime">time</link> &gt; * array::as_time ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classarray_1a63e8132f3b5cad45f09e8afcd4f037d1"/><section>
    <title>as_time()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>as_time</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>as_time</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; <link linkend="_structtime">time</link> &gt; * array::as_time ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1ac6177c03c1242d5e48b8c551350d9bb1"/><section>
    <title>as_time()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>as_time</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>as_time</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; <link linkend="_structtime">time</link> &gt; * array::as_time ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classarray_1ac6177c03c1242d5e48b8c551350d9bb1"/><section>
    <title>as_time()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>as_time</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>as_time</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; <link linkend="_structtime">time</link> &gt; * array::as_time ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a68878b9acb36940fbd8aa1177110cda1"/><section>
    <title>at()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>at</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>at</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> node &amp; array::at (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> index)</computeroutput></para><para>

<para>Gets a reference to the element at a specific index, throwing <computeroutput>std::out_of_range</computeroutput> if none existed. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classarray_a68878b9acb36940fbd8aa1177110cda1_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classarray_1a68878b9acb36940fbd8aa1177110cda1"/><section>
    <title>at()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>at</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>at</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> node &amp; array::at (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> index)</computeroutput></para></section>
<anchor xml:id="_classarray_1ac8e8f2da27ed77280b6ee02d65dd2f82"/><section>
    <title>at()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>at</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>at</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const node &amp; array::at (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> index) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Gets a reference to the element at a specific index, throwing <computeroutput>std::out_of_range</computeroutput> if none existed. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classarray_ac8e8f2da27ed77280b6ee02d65dd2f82_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classarray_1ac8e8f2da27ed77280b6ee02d65dd2f82"/><section>
    <title>at()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>at</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>at</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const node &amp; array::at (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> index) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classarray_ac8e8f2da27ed77280b6ee02d65dd2f82_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classarray_1aeb918af97cb9bd5d14b705fcef029064"/><section>
    <title>back()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>back</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>back</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const node &amp; array::back ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns a reference to the last element in the array. </para>
</para>
</section>
<anchor xml:id="_classarray_1aeb918af97cb9bd5d14b705fcef029064"/><section>
    <title>back()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>back</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>back</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const node &amp; array::back ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a379242a7c65182981d5ce24535c58296"/><section>
    <title>back()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>back</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>back</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> node &amp; array::back ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns a reference to the last element in the array. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classarray_a379242a7c65182981d5ce24535c58296_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classarray_1a379242a7c65182981d5ce24535c58296"/><section>
    <title>back()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>back</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>back</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> node &amp; array::back ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a70e3c270fd06429236eca61c7925a247"/><section>
    <title>begin()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>begin</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>begin</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> array::begin ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns an iterator to the first element. </para>
</para>
</section>
<anchor xml:id="_classarray_1a70e3c270fd06429236eca61c7925a247"/><section>
    <title>begin()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>begin</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>begin</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> array::begin ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a0215ba81d7547fcd4e81fed83140b40a"/><section>
    <title>begin()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>begin</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>begin</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> array::begin ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns an iterator to the first element. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classarray_a0215ba81d7547fcd4e81fed83140b40a_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classarray_1a0215ba81d7547fcd4e81fed83140b40a"/><section>
    <title>begin()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>begin</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>begin</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> array::begin ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a3b63fa3d1dce25204338afaa72bb9ba7"/><section>
    <title>capacity()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>capacity</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>capacity</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> array::capacity ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns the current max number of elements that may be held in the array&apos;s internal storage. </para>
</para>
</section>
<anchor xml:id="_classarray_1a3b63fa3d1dce25204338afaa72bb9ba7"/><section>
    <title>capacity()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>capacity</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>capacity</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> array::capacity ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a2bfcf1d4ba89ba33ced81668ead5d704"/><section>
    <title>cbegin()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>cbegin</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>cbegin</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> array::cbegin ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns an iterator to the first element. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classarray_a2bfcf1d4ba89ba33ced81668ead5d704_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classarray_1a2bfcf1d4ba89ba33ced81668ead5d704"/><section>
    <title>cbegin()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>cbegin</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>cbegin</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> array::cbegin ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a5d0e8fa3ed1e0d92c7c07dab08109aad"/><section>
    <title>cend()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>cend</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>cend</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> array::cend ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns an iterator to one-past-the-last element. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classarray_a5d0e8fa3ed1e0d92c7c07dab08109aad_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classarray_1a5d0e8fa3ed1e0d92c7c07dab08109aad"/><section>
    <title>cend()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>cend</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>cend</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> array::cend ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a6e618e14b5f8c217bc593837bb3dbeb8"/><section>
    <title>clear()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>clear</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>clear</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> array::clear ( )<computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Removes all elements from the array. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classarray_a6e618e14b5f8c217bc593837bb3dbeb8_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classarray_1a6e618e14b5f8c217bc593837bb3dbeb8"/><section>
    <title>clear()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>clear</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>clear</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> array::clear ( )<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1ae05181bf0df8b0c85da9ae13458b0a06"/><section>
    <title>emplace()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>emplace</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>emplace</secondary></indexterm>
<computeroutput>template&lt;typename ElemType  = void, typename... Args&gt; </computeroutput><para><computeroutput><link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> array::emplace (<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> pos, Args &amp;&amp;... args)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Emplaces a new element at a specific position in the array. </para>
</para>

<para>\detail \cpp auto arr = toml::array{ 1, 2 };</para>

<para>//add a string using std::string&apos;s substring constructor arr.emplace&lt;std::string&gt;(arr.cbegin() + 1, &quot;this is not a drill&quot;sv, 14, 5); std::cout &lt;&lt; arr &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out [ 1, &apos;drill&apos;, 2 ] \eout</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ElemType</entry><entry>
<para>toml::table, toml::array, or any native TOML value type. </para>
</entry>
                            </row>
                            <row>
<entry>Args</entry><entry>
<para>Value constructor argument types. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>pos</entry><entry>
<para>The insertion position. </para>
</entry>
                            </row>
                            <row>
<entry>args</entry><entry>
<para>Arguments to forward to the value&apos;s constructor.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>An iterator to the inserted element.</para>
</formalpara>
<formalpara><title>Remarks</title>

<para>There is no difference between <link linkend="_classarray_1af07cf129863beb7620a07c5eceb08bd2">insert()</link> and <link linkend="_classarray_1ae05181bf0df8b0c85da9ae13458b0a06">emplace()</link> for trivial value types (floats, ints, bools). </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classarray_ae05181bf0df8b0c85da9ae13458b0a06_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classarray_1ae05181bf0df8b0c85da9ae13458b0a06"/><section>
    <title>emplace()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>emplace</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>emplace</secondary></indexterm>
<computeroutput>template&lt;typename ElemType  = void, typename... Args&gt; </computeroutput><para><computeroutput><link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> array::emplace (<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> pos, Args &amp;&amp;... args)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a59266d6b5fce72dc6fe0db2e16446bb0"/><section>
    <title>emplace_back()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>emplace_back</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>emplace_back</secondary></indexterm>
<computeroutput>template&lt;typename ElemType  = void, typename... Args&gt; </computeroutput><para><computeroutput>decltype(auto) array::emplace_back (Args &amp;&amp;... args)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Emplaces a new element at the end of the array. </para>
</para>

<para>\detail \cpp auto arr = toml::array{ 1, 2 }; arr.emplace_back&lt;toml::array&gt;(3, &quot;four&quot;sv); std::cout &lt;&lt; arr &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out [ 1, 2, [ 3, &apos;four&apos; ] ] \eout</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ElemType</entry><entry>
<para>toml::table, toml::array, or a native TOML value type </para>
</entry>
                            </row>
                            <row>
<entry>Args</entry><entry>
<para>Element constructor argument types. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>args</entry><entry>
<para>Arguments to forward to the elements&apos;s constructor.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A reference to the newly-constructed element.</para>
</formalpara>
<formalpara><title>Remarks</title>

<para>There is no difference between <link linkend="_classarray_1afa5750f44dfcc2e9c7097a3efb02019c">push_back()</link> and <link linkend="_classarray_1a59266d6b5fce72dc6fe0db2e16446bb0">emplace_back()</link> For trivial value types (floats, ints, bools). </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classarray_a59266d6b5fce72dc6fe0db2e16446bb0_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classarray_1a59266d6b5fce72dc6fe0db2e16446bb0"/><section>
    <title>emplace_back()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>emplace_back</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>emplace_back</secondary></indexterm>
<computeroutput>template&lt;typename ElemType  = void, typename... Args&gt; </computeroutput><para><computeroutput>decltype(auto) array::emplace_back (Args &amp;&amp;... args)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1aaea8c1a0137a49b14637584bb2aa5d94"/><section>
    <title>empty()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>empty</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>empty</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> array::empty ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns true if the array is empty. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classarray_aaea8c1a0137a49b14637584bb2aa5d94_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classarray_1aaea8c1a0137a49b14637584bb2aa5d94"/><section>
    <title>empty()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>empty</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>empty</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> array::empty ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a743a646eff478e5095337b65eea00d16"/><section>
    <title>end()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>end</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>end</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> array::end ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns an iterator to one-past-the-last element. </para>
</para>
</section>
<anchor xml:id="_classarray_1a743a646eff478e5095337b65eea00d16"/><section>
    <title>end()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>end</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>end</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> array::end ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a2027254bbe0a3e797c461a0b2446f656"/><section>
    <title>end()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>end</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>end</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> array::end ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns an iterator to one-past-the-last element. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classarray_a2027254bbe0a3e797c461a0b2446f656_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classarray_1a2027254bbe0a3e797c461a0b2446f656"/><section>
    <title>end()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>end</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>end</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> array::end ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a84e61ee425b558cf7e6e97369afe298d"/><section>
    <title>erase()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>erase</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>erase</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> array::erase (<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> first, <link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> last)<computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Removes the elements in the range [first, last) from the array. </para>
</para>

<para>\detail \cpp auto arr = toml::array{ 1, &quot;bad&quot;, &quot;karma&quot; 2 }; std::cout &lt;&lt; arr &lt;&lt; &quot;\n&quot;;</para>

<para>arr.erase(arr.cbegin() + 1, arr.cbegin() + 3); std::cout &lt;&lt; arr &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out [ 1, &apos;bad&apos;, &apos;karma&apos;, 3 ] [ 1, 3 ] \eout</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>first</entry><entry>
<para>Iterator to the first element being erased. </para>
</entry>
                            </row>
                            <row>
<entry>last</entry><entry>
<para>Iterator to the one-past-the-last element being erased.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Iterator to the first element immediately following the last removed element. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classarray_1a84e61ee425b558cf7e6e97369afe298d"/><section>
    <title>erase()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>erase</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>erase</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> array::erase (<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> first, <link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> last)<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a546d26becf24ade8e2fea51275e076c0"/><section>
    <title>erase()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>erase</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>erase</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> array::erase (<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> pos)<computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Removes the specified element from the array. </para>
</para>

<para>\detail \cpp auto arr = toml::array{ 1, 2, 3 }; std::cout &lt;&lt; arr &lt;&lt; &quot;\n&quot;;</para>

<para>arr.erase(arr.cbegin() + 1); std::cout &lt;&lt; arr &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out [ 1, 2, 3 ] [ 1, 3 ] \eout</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>pos</entry><entry>
<para>Iterator to the element being erased.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Iterator to the first element immediately following the removed element. </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classarray_a546d26becf24ade8e2fea51275e076c0_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classarray_1a546d26becf24ade8e2fea51275e076c0"/><section>
    <title>erase()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>erase</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>erase</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> array::erase (<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> pos)<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1ad02eb6d4631b38d436733d693773eed0"/><section>
    <title>flatten()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>flatten</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>flatten</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classarray">array</link> &amp; array::flatten ( ) &amp;</computeroutput></para><para>

<para>Flattens this array, recursively hoisting the contents of child arrays up into itself. </para>
</para>

<para>\detail \cpp</para>

<para>auto arr = toml::array{ 1, 2, toml::array{ 3, 4, toml::array{ 5 } }, 6, toml::array{} }; std::cout &lt;&lt; arr &lt;&lt; &quot;\n&quot;;</para>

<para>arr.flatten(); std::cout &lt;&lt; arr &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out [ 1, 2, [ 3, 4, [ 5 ] ], 6, [] ] [ 1, 2, 3, 4, 5, 6 ] \eout</para>

<para><formalpara><title>Remarks</title>

<para>Arrays inside child tables are not flattened.</para>
</formalpara>
<formalpara><title>Returns</title>

<para>A reference to the array. </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classarray_ad02eb6d4631b38d436733d693773eed0_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classarray_1ad02eb6d4631b38d436733d693773eed0"/><section>
    <title>flatten()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>flatten</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>flatten</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classarray">array</link> &amp; array::flatten ( ) &amp;</computeroutput></para></section>
<anchor xml:id="_classarray_1a6e0f6f40c784f569c2b9943d8764312a"/><section>
    <title>flatten()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>flatten</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>flatten</secondary></indexterm>
<para><computeroutput><link linkend="_classarray">array</link> &amp;&amp; array::flatten ( ) &amp;&amp;<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Flattens this array, recursively hoisting the contents of child arrays up into itself (rvalue overload). </para>
</para>
</section>
<anchor xml:id="_classarray_1a6e0f6f40c784f569c2b9943d8764312a"/><section>
    <title>flatten()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>flatten</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>flatten</secondary></indexterm>
<para><computeroutput><link linkend="_classarray">array</link> &amp;&amp; array::flatten ( ) &amp;&amp;<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a55e1737c21aa6c44b546bce4a02792f0"/><section>
    <title>for_each()<computeroutput>[1/8]</computeroutput></title>
<indexterm><primary>for_each</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>for_each</secondary></indexterm>
<computeroutput>template&lt;typename Func &gt; </computeroutput><para><computeroutput><link linkend="_classarray">array</link> &amp;&amp; array::for_each (Func &amp;&amp; visitor) &amp;&amp;<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Invokes a visitor on each element in the array (rvalue overload). </para>
</para>
</section>
<anchor xml:id="_classarray_1a55e1737c21aa6c44b546bce4a02792f0"/><section>
    <title>for_each()<computeroutput>[2/8]</computeroutput></title>
<indexterm><primary>for_each</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>for_each</secondary></indexterm>
<computeroutput>template&lt;typename Func &gt; </computeroutput><para><computeroutput><link linkend="_classarray">array</link> &amp;&amp; array::for_each (Func &amp;&amp; visitor) &amp;&amp;<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a6dc6f1d0d32faa3cb32e7632de55cc8d"/><section>
    <title>for_each()<computeroutput>[3/8]</computeroutput></title>
<indexterm><primary>for_each</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>for_each</secondary></indexterm>
<computeroutput>template&lt;typename Func &gt; </computeroutput><para><computeroutput><link linkend="_classarray">array</link> &amp; array::for_each (Func &amp;&amp; visitor) &amp;<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Invokes a visitor on each element in the array. </para>
</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Func</entry><entry>
<para>A callable type invocable with one of the following signatures: <itemizedlist>
<listitem>

<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a18ae3ab36a07e388833b568cfdfa90c8">func(elem, index)</link></computeroutput> </para>
</listitem>
<listitem>

<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a18ae3ab36a07e388833b568cfdfa90c8">func(elem)</link></computeroutput> </para>
</listitem>
<listitem>

<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a18ae3ab36a07e388833b568cfdfa90c8">func(index, elem)</link></computeroutput> </para>
</listitem>
</itemizedlist>
Where: <itemizedlist>
<listitem>

<para><computeroutput>elem</computeroutput> will recieve the element as it&apos;s concrete type with cvref-qualifications matching the array </para>
</listitem>
<listitem>

<para><computeroutput>index</computeroutput> will recieve a <computeroutput>size_t</computeroutput> indicating the element&apos;s index </para>
</listitem>
</itemizedlist>
Visitors returning <computeroutput>bool</computeroutput> (or something convertible to <computeroutput>bool</computeroutput>) will cause iteration to stop if they return <computeroutput>false</computeroutput>.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>visitor</entry><entry>
<para>The visitor object.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A reference to the array.</para>
</formalpara>
\cpp toml::array arr{ 0, 1, 2, 3.0, &quot;four&quot;, &quot;five&quot;, 6 };</para>

<para>// select only the integers using a strongly-typed visitor arr.for_each([](toml::value&lt;int64_t&gt;&amp; elem) { std::cout &lt;&lt; elem &lt;&lt; &quot;, &quot;; }); std::cout &lt;&lt; &quot;\n&quot;;</para>

<para>// select all the numeric values using a generic visitor + is_number&lt;&gt; metafunction arr.for_each([](auto&amp;&amp; elem) { if constexpr (toml::is_number&lt;decltype(elem)&gt;) std::cout &lt;&lt; elem &lt;&lt; &quot;, &quot;; }); std::cout &lt;&lt; &quot;\n&quot;;</para>

<para>// select all the numeric values until we encounter something non-numeric arr.for_each([](auto&amp;&amp; elem) { if constexpr (toml::is_number&lt;decltype(elem)&gt;) { std::cout &lt;&lt; elem &lt;&lt; &quot;, &quot;; return true; // &quot;keep going&quot; } else return false; // &quot;stop!&quot;</para>

<para>}); std::cout &lt;&lt; &quot;\n&quot;;</para>

<para>\ecpp \out 0, 1, 2, 6, 0, 1, 2, 3.0, 6, 0, 1, 2, 3.0, \eout</para>

<para><formalpara><title>See also</title>

<para>node::visit() </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classarray_1a6dc6f1d0d32faa3cb32e7632de55cc8d"/><section>
    <title>for_each()<computeroutput>[4/8]</computeroutput></title>
<indexterm><primary>for_each</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>for_each</secondary></indexterm>
<computeroutput>template&lt;typename Func &gt; </computeroutput><para><computeroutput><link linkend="_classarray">array</link> &amp; array::for_each (Func &amp;&amp; visitor) &amp;<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1aeb60ad85d6a1704300e289ebfb6f4a97"/><section>
    <title>for_each()<computeroutput>[5/8]</computeroutput></title>
<indexterm><primary>for_each</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>for_each</secondary></indexterm>
<computeroutput>template&lt;typename Func &gt; </computeroutput><para><computeroutput>const <link linkend="_classarray">array</link> &amp;&amp; array::for_each (Func &amp;&amp; visitor) const &amp;&amp;<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Invokes a visitor on each element in the array (const rvalue overload). </para>
</para>
</section>
<anchor xml:id="_classarray_1aeb60ad85d6a1704300e289ebfb6f4a97"/><section>
    <title>for_each()<computeroutput>[6/8]</computeroutput></title>
<indexterm><primary>for_each</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>for_each</secondary></indexterm>
<computeroutput>template&lt;typename Func &gt; </computeroutput><para><computeroutput>const <link linkend="_classarray">array</link> &amp;&amp; array::for_each (Func &amp;&amp; visitor) const &amp;&amp;<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1aab741ce674cbf0b4975bc4fa7f2f7440"/><section>
    <title>for_each()<computeroutput>[7/8]</computeroutput></title>
<indexterm><primary>for_each</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>for_each</secondary></indexterm>
<computeroutput>template&lt;typename Func &gt; </computeroutput><para><computeroutput>const <link linkend="_classarray">array</link> &amp; array::for_each (Func &amp;&amp; visitor) const &amp;<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Invokes a visitor on each element in the array (const lvalue overload). </para>
</para>
</section>
<anchor xml:id="_classarray_1aab741ce674cbf0b4975bc4fa7f2f7440"/><section>
    <title>for_each()<computeroutput>[8/8]</computeroutput></title>
<indexterm><primary>for_each</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>for_each</secondary></indexterm>
<computeroutput>template&lt;typename Func &gt; </computeroutput><para><computeroutput>const <link linkend="_classarray">array</link> &amp; array::for_each (Func &amp;&amp; visitor) const &amp;<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1ae5e63a15acd4888e0fa4e1ddb4811c01"/><section>
    <title>front()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>front</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>front</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const node &amp; array::front ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns a reference to the first element in the array. </para>
</para>
</section>
<anchor xml:id="_classarray_1ae5e63a15acd4888e0fa4e1ddb4811c01"/><section>
    <title>front()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>front</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>front</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const node &amp; array::front ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1acdfb2184dd4948a173bbd628f59ec2d4"/><section>
    <title>front()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>front</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>front</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> node &amp; array::front ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns a reference to the first element in the array. </para>
</para>
</section>
<anchor xml:id="_classarray_1acdfb2184dd4948a173bbd628f59ec2d4"/><section>
    <title>front()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>front</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>front</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> node &amp; array::front ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a5308a8ac094c5dd4d4303f984e3c5755"/><section>
    <title>get()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>get</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>get</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> const node * array::get (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> index) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Gets a pointer to the element at a specific index (const overload). </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>index</entry><entry>
<para>The element&apos;s index.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A pointer to the element at the specified index if one existed, or nullptr. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classarray_a5308a8ac094c5dd4d4303f984e3c5755_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classarray_1a5308a8ac094c5dd4d4303f984e3c5755"/><section>
    <title>get()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>get</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>get</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> const node * array::get (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> index) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classarray_a5308a8ac094c5dd4d4303f984e3c5755_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classarray_1a0b94266548e749456885847091128b5d"/><section>
    <title>get()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>get</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>get</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> node * array::get (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> index)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Gets a pointer to the element at a specific index. </para>
</para>

<para>\detail \cpp auto arr = toml::array{ 99, &quot;bottles of beer on the wall&quot; }; std::cout &lt;&lt; &quot;element [0] exists: &quot;sv &lt;&lt; !!arr.<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get(0)</link> &lt;&lt; &quot;\n&quot;; std::cout &lt;&lt; &quot;element [1] exists: &quot;sv &lt;&lt; !!arr.<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get(1)</link> &lt;&lt; &quot;\n&quot;; std::cout &lt;&lt; &quot;element [2] exists: &quot;sv &lt;&lt; !!arr.<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get(2)</link> &lt;&lt; &quot;\n&quot;; if (toml::node* val = arr.get(0)) std::cout &lt;&lt; &quot;element [0] is an &quot;sv &lt;&lt; val-&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type()</link> &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out element [0] exists: true element [1] exists: true element [2] exists: false element [0] is an integer \eout</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>index</entry><entry>
<para>The element&apos;s index.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A pointer to the element at the specified index if one existed, or nullptr. </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classarray_a0b94266548e749456885847091128b5d_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classarray_1a0b94266548e749456885847091128b5d"/><section>
    <title>get()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>get</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>get</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> node * array::get (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> index)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1af2c374bb1623a733d0e5abd1a541bc16"/><section>
    <title>get_as()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>get_as</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>get_as</secondary></indexterm>
<computeroutput>template&lt;typename ElemType &gt; </computeroutput><para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const impl::wrap_node&lt; ElemType &gt; * array::get_as (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> index) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Gets a pointer to the element at a specific index if it is a particular type (const overload). </para>
</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ElemType</entry><entry>
<para>toml::table, toml::array, or a native TOML value type </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>index</entry><entry>
<para>The element&apos;s index.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A pointer to the selected element if it existed and was of the specified type, or nullptr. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classarray_1af2c374bb1623a733d0e5abd1a541bc16"/><section>
    <title>get_as()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>get_as</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>get_as</secondary></indexterm>
<computeroutput>template&lt;typename ElemType &gt; </computeroutput><para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const impl::wrap_node&lt; ElemType &gt; * array::get_as (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> index) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1ae355770b27d72e41a7dca38378ff0c94"/><section>
    <title>get_as()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>get_as</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>get_as</secondary></indexterm>
<computeroutput>template&lt;typename ElemType &gt; </computeroutput><para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> impl::wrap_node&lt; ElemType &gt; * array::get_as (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> index)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Gets a pointer to the element at a specific index if it is a particular type. </para>
</para>

<para>\detail \cpp auto arr = toml::array{ 42, &quot;is the meaning of life, apparently.&quot;sv }; if (toml::value&lt;int64_t&gt;* val = arr.get_as&lt;int64_t&gt;(0)) std::cout &lt;&lt; &quot;element [0] is an integer with value &quot;sv &lt;&lt; *val &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out element [0] is an integer with value 42 \eout</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ElemType</entry><entry>
<para>toml::table, toml::array, or a native TOML value type </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>index</entry><entry>
<para>The element&apos;s index.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A pointer to the selected element if it existed and was of the specified type, or nullptr. </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classarray_ae355770b27d72e41a7dca38378ff0c94_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classarray_1ae355770b27d72e41a7dca38378ff0c94"/><section>
    <title>get_as()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>get_as</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>get_as</secondary></indexterm>
<computeroutput>template&lt;typename ElemType &gt; </computeroutput><para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> impl::wrap_node&lt; ElemType &gt; * array::get_as (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> index)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1af07cf129863beb7620a07c5eceb08bd2"/><section>
    <title>insert()<computeroutput>[1/8]</computeroutput></title>
<indexterm><primary>insert</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>insert</secondary></indexterm>
<computeroutput>template&lt;typename ElemType &gt; </computeroutput><para><computeroutput><link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> array::insert (<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> pos, ElemType &amp;&amp; val, <link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link> flags = <computeroutput><link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link></computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Inserts a new element at a specific position in the array. </para>
</para>

<para>\detail \cpp auto arr = toml::array{ 1, 3 }; arr.insert(arr.cbegin() + 1, &quot;two&quot;); arr.insert(arr.cend(), toml::array{ 4, 5 }); std::cout &lt;&lt; arr &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out [ 1, &apos;two&apos;, 3, [ 4, 5 ] ] \eout</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ElemType</entry><entry>
<para>toml::node, toml::node_view, toml::table, toml::array, or a native TOML value type (or a type promotable to one). </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>pos</entry><entry>
<para>The insertion position. </para>
</entry>
                            </row>
                            <row>
<entry>val</entry><entry>
<para>The node or value being inserted. </para>
</entry>
                            </row>
                            <row>
<entry>flags</entry><entry>
<para>Value flags to apply to new values.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>\conditional_return{Valid input} An iterator to the newly-inserted element. \conditional_return{Input is a null toml::node_view} <link linkend="_classarray_1a2027254bbe0a3e797c461a0b2446f656">end()</link></para>
</formalpara>
<caution><title>Attention</title>

<para>The return value will always be <computeroutput><link linkend="_classarray_1a2027254bbe0a3e797c461a0b2446f656">end()</link></computeroutput> if the input value was a null toml::node_view, because no insertion can take place. This is the only circumstance in which this can occur. </para>
</caution>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classarray_af07cf129863beb7620a07c5eceb08bd2_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classarray_1af07cf129863beb7620a07c5eceb08bd2"/><section>
    <title>insert()<computeroutput>[2/8]</computeroutput></title>
<indexterm><primary>insert</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>insert</secondary></indexterm>
<computeroutput>template&lt;typename ElemType &gt; </computeroutput><para><computeroutput><link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> array::insert (<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> pos, ElemType &amp;&amp; val, <link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link> flags = <computeroutput><link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link></computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1ae11cb9d4ccde0e89d73b14cd929e8449"/><section>
    <title>insert()<computeroutput>[3/8]</computeroutput></title>
<indexterm><primary>insert</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>insert</secondary></indexterm>
<computeroutput>template&lt;typename Iter &gt; </computeroutput><para><computeroutput><link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> array::insert (<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> pos, Iter first, Iter last, <link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link> flags = <computeroutput><link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link></computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Inserts a range of elements into the array at a specific position. </para>
</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Iter</entry><entry>
<para>An iterator type. Must satisfy ForwardIterator. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>pos</entry><entry>
<para>The insertion position. </para>
</entry>
                            </row>
                            <row>
<entry>first</entry><entry>
<para>Iterator to the first node or value being inserted. </para>
</entry>
                            </row>
                            <row>
<entry>last</entry><entry>
<para>Iterator to the one-past-the-last node or value being inserted. </para>
</entry>
                            </row>
                            <row>
<entry>flags</entry><entry>
<para>Value flags to apply to new values.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>\conditional_return{Valid input} An iterator to the first newly-inserted element. \conditional_return{first &gt;= last} A copy of pos \conditional_return{All objects in the range were null toml::node_views} A copy of pos </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classarray_ae11cb9d4ccde0e89d73b14cd929e8449_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classarray_1ae11cb9d4ccde0e89d73b14cd929e8449"/><section>
    <title>insert()<computeroutput>[4/8]</computeroutput></title>
<indexterm><primary>insert</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>insert</secondary></indexterm>
<computeroutput>template&lt;typename Iter &gt; </computeroutput><para><computeroutput><link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> array::insert (<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> pos, Iter first, Iter last, <link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link> flags = <computeroutput><link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link></computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classarray_ae11cb9d4ccde0e89d73b14cd929e8449_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classarray_1a44fd9887f4b76eacdd07ec1a5a0e57f3"/><section>
    <title>insert()<computeroutput>[5/8]</computeroutput></title>
<indexterm><primary>insert</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>insert</secondary></indexterm>
<computeroutput>template&lt;typename ElemType &gt; </computeroutput><para><computeroutput><link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> array::insert (<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> pos, <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> count, ElemType &amp;&amp; val, <link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link> flags = <computeroutput><link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link></computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Repeatedly inserts a new element starting at a specific position in the array. </para>
</para>

<para>\detail \cpp auto arr = toml::array{ &quot;with an evil twinkle in its eye the goose said&quot;, &quot;and immediately we knew peace was never an option.&quot; }; arr.insert(arr.cbegin() + 1, 3, &quot;honk&quot;); std::cout &lt;&lt; arr &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out [ &apos;with an evil twinkle in its eye the goose said&apos;, &apos;honk&apos;, &apos;honk&apos;, &apos;honk&apos;, &apos;and immediately we knew peace was never an option.&apos; ] \eout</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ElemType</entry><entry>
<para>toml::node, toml::node_view, toml::table, toml::array, or a native TOML value type (or a type promotable to one). </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>pos</entry><entry>
<para>The insertion position. </para>
</entry>
                            </row>
                            <row>
<entry>count</entry><entry>
<para>The number of times the node or value should be inserted. </para>
</entry>
                            </row>
                            <row>
<entry>val</entry><entry>
<para>The node or value being inserted. </para>
</entry>
                            </row>
                            <row>
<entry>flags</entry><entry>
<para>Value flags to apply to new values.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>\conditional_return{Valid input} An iterator to the newly-inserted element. \conditional_return{count == 0} A copy of pos \conditional_return{Input is a null toml::node_view} <link linkend="_classarray_1a2027254bbe0a3e797c461a0b2446f656">end()</link></para>
</formalpara>
<caution><title>Attention</title>

<para>The return value will always be <computeroutput><link linkend="_classarray_1a2027254bbe0a3e797c461a0b2446f656">end()</link></computeroutput> if the input value was a null toml::node_view, because no insertion can take place. This is the only circumstance in which this can occur. </para>
</caution>
</para>
</section>
<anchor xml:id="_classarray_1a44fd9887f4b76eacdd07ec1a5a0e57f3"/><section>
    <title>insert()<computeroutput>[6/8]</computeroutput></title>
<indexterm><primary>insert</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>insert</secondary></indexterm>
<computeroutput>template&lt;typename ElemType &gt; </computeroutput><para><computeroutput><link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> array::insert (<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> pos, <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> count, ElemType &amp;&amp; val, <link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link> flags = <computeroutput><link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link></computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a7b9e455ccd8331a7205f9ce66d4593d4"/><section>
    <title>insert()<computeroutput>[7/8]</computeroutput></title>
<indexterm><primary>insert</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>insert</secondary></indexterm>
<computeroutput>template&lt;typename ElemType &gt; </computeroutput><para><computeroutput><link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> array::insert (<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> pos, std::initializer_list&lt; ElemType &gt; ilist, <link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link> flags = <computeroutput><link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link></computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Inserts a range of elements into the array at a specific position. </para>
</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ElemType</entry><entry>
<para>toml::node_view, toml::table, toml::array, or a native TOML value type (or a type promotable to one). </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>pos</entry><entry>
<para>The insertion position. </para>
</entry>
                            </row>
                            <row>
<entry>ilist</entry><entry>
<para>An initializer list containing the values to be inserted. </para>
</entry>
                            </row>
                            <row>
<entry>flags</entry><entry>
<para>Value flags to apply to new values.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>\conditional_return{Valid input} An iterator to the first newly-inserted element. \conditional_return{Input list is empty} A copy of pos \conditional_return{All objects in the list were null toml::node_views} A copy of pos </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classarray_1a7b9e455ccd8331a7205f9ce66d4593d4"/><section>
    <title>insert()<computeroutput>[8/8]</computeroutput></title>
<indexterm><primary>insert</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>insert</secondary></indexterm>
<computeroutput>template&lt;typename ElemType &gt; </computeroutput><para><computeroutput><link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> array::insert (<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> pos, std::initializer_list&lt; ElemType &gt; ilist, <link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link> flags = <computeroutput><link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link></computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a15f11553a26aadc2b6035e5bebc1b82e"/><section>
    <title>is_array()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>is_array</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>is_array</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> array::is_array ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>true</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classarray_1a15f11553a26aadc2b6035e5bebc1b82e"/><section>
    <title>is_array()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>is_array</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>is_array</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> array::is_array ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a6efebd20b162d0297dc45cdcb312f885"/><section>
    <title>is_array_of_tables()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>is_array_of_tables</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>is_array_of_tables</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> array::is_array_of_tables ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>true</computeroutput> if the array contains only tables. </para>
</para>
</section>
<anchor xml:id="_classarray_1a6efebd20b162d0297dc45cdcb312f885"/><section>
    <title>is_array_of_tables()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>is_array_of_tables</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>is_array_of_tables</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> array::is_array_of_tables ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a1372f03a89df119b74840c3827ca9a5f"/><section>
    <title>is_boolean()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>is_boolean</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>is_boolean</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> array::is_boolean ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classarray_1a1372f03a89df119b74840c3827ca9a5f"/><section>
    <title>is_boolean()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>is_boolean</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>is_boolean</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> array::is_boolean ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1af962a263286ae8226de1e21808ff0dc5"/><section>
    <title>is_date()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>is_date</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>is_date</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> array::is_date ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classarray_1af962a263286ae8226de1e21808ff0dc5"/><section>
    <title>is_date()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>is_date</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>is_date</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> array::is_date ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a17bec6bcc814ae17ec6c677008d331c4"/><section>
    <title>is_date_time()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>is_date_time</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>is_date_time</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> array::is_date_time ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classarray_1a17bec6bcc814ae17ec6c677008d331c4"/><section>
    <title>is_date_time()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>is_date_time</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>is_date_time</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> array::is_date_time ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a4fab255d87c6ae9d36e4a3c246dd5f07"/><section>
    <title>is_floating_point()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>is_floating_point</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>is_floating_point</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> array::is_floating_point ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classarray_1a4fab255d87c6ae9d36e4a3c246dd5f07"/><section>
    <title>is_floating_point()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>is_floating_point</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>is_floating_point</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> array::is_floating_point ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a0f6a36df19a4ea52d2dada6359e59024"/><section>
    <title>is_homogeneous()<computeroutput>[1/7]</computeroutput></title>
<indexterm><primary>is_homogeneous</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>is_homogeneous</secondary></indexterm>
<computeroutput>template&lt;typename ElemType  = void&gt; </computeroutput><para><computeroutput><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> array::is_homogeneous ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1ac515de2b5c9aeebd65b046191fe53c20"/><section>
    <title>is_homogeneous()<computeroutput>[2/7]</computeroutput></title>
<indexterm><primary>is_homogeneous</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>is_homogeneous</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> array::is_homogeneous (node_type ntype) const<computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classarray_ac515de2b5c9aeebd65b046191fe53c20_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classarray_1ac515de2b5c9aeebd65b046191fe53c20"/><section>
    <title>is_homogeneous()<computeroutput>[3/7]</computeroutput></title>
<indexterm><primary>is_homogeneous</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>is_homogeneous</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> array::is_homogeneous (node_type ntype) const<computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a34a1b4f03f0deeb196920867060a1ed2"/><section>
    <title>is_homogeneous()<computeroutput>[4/7]</computeroutput></title>
<indexterm><primary>is_homogeneous</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>is_homogeneous</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> array::is_homogeneous (node_type ntype, const node *&amp; first_nonmatch) const<computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a34a1b4f03f0deeb196920867060a1ed2"/><section>
    <title>is_homogeneous()<computeroutput>[5/7]</computeroutput></title>
<indexterm><primary>is_homogeneous</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>is_homogeneous</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> array::is_homogeneous (node_type ntype, const node *&amp; first_nonmatch) const<computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1add3b969719a6b19e177f3e1cb444b29a"/><section>
    <title>is_homogeneous()<computeroutput>[6/7]</computeroutput></title>
<indexterm><primary>is_homogeneous</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>is_homogeneous</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> array::is_homogeneous (node_type ntype, node *&amp; first_nonmatch)<computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1add3b969719a6b19e177f3e1cb444b29a"/><section>
    <title>is_homogeneous()<computeroutput>[7/7]</computeroutput></title>
<indexterm><primary>is_homogeneous</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>is_homogeneous</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> array::is_homogeneous (node_type ntype, node *&amp; first_nonmatch)<computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a6d29b7aa90c36ef1ed49e36f98839528"/><section>
    <title>is_integer()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>is_integer</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>is_integer</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> array::is_integer ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classarray_1a6d29b7aa90c36ef1ed49e36f98839528"/><section>
    <title>is_integer()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>is_integer</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>is_integer</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> array::is_integer ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1adc342485eeabade65bba8e71174855a4"/><section>
    <title>is_number()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>is_number</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>is_number</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> array::is_number ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classarray_1adc342485eeabade65bba8e71174855a4"/><section>
    <title>is_number()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>is_number</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>is_number</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> array::is_number ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a26e7c61caa26aceb1d680d3a166039c5"/><section>
    <title>is_string()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>is_string</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>is_string</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> array::is_string ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classarray_1a26e7c61caa26aceb1d680d3a166039c5"/><section>
    <title>is_string()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>is_string</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>is_string</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> array::is_string ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1af12f1f0b923817f79649514f378345b1"/><section>
    <title>is_table()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>is_table</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>is_table</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> array::is_table ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classarray_1af12f1f0b923817f79649514f378345b1"/><section>
    <title>is_table()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>is_table</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>is_table</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> array::is_table ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a64896e10538bbdf9580b847541ddc24a"/><section>
    <title>is_time()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>is_time</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>is_time</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> array::is_time ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classarray_1a64896e10538bbdf9580b847541ddc24a"/><section>
    <title>is_time()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>is_time</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>is_time</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> array::is_time ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1aa1efcb5bf28b4d1e4f6ccd144fdcf2a1"/><section>
    <title>is_value()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>is_value</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>is_value</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> array::is_value ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classarray_1aa1efcb5bf28b4d1e4f6ccd144fdcf2a1"/><section>
    <title>is_value()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>is_value</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>is_value</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> array::is_value ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1ab4acea77b99e7840afc6d2547a2b0dc2"/><section>
    <title>max_size()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>max_size</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>max_size</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> array::max_size ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns the maximum number of elements that can be stored in an array on the current platform. </para>
</para>
</section>
<anchor xml:id="_classarray_1ab4acea77b99e7840afc6d2547a2b0dc2"/><section>
    <title>max_size()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>max_size</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>max_size</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> array::max_size ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a1e8c1ad2f0705c91a9722ed61024aefb"/><section>
    <title>operator=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classarray">array</link> &amp; array::operator= (<link linkend="_classarray">array</link> &amp;&amp; rhs)<computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Move-assignment operator. </para>
</para>
</section>
<anchor xml:id="_classarray_1a1e8c1ad2f0705c91a9722ed61024aefb"/><section>
    <title>operator=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classarray">array</link> &amp; array::operator= (<link linkend="_classarray">array</link> &amp;&amp; rhs)<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a5c3b961db194cf3d6e693c5df831f383"/><section>
    <title>operator[]()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const node &amp; array::operator[] (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> index) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Gets a reference to the element at a specific index. </para>
</para>
</section>
<anchor xml:id="_classarray_1a5c3b961db194cf3d6e693c5df831f383"/><section>
    <title>operator[]()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const node &amp; array::operator[] (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> index) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1aae0a2380f27a021993e6e17afd8068d9"/><section>
    <title>operator[]()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> node &amp; array::operator[] (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> index)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Gets a reference to the element at a specific index. </para>
</para>
</section>
<anchor xml:id="_classarray_1aae0a2380f27a021993e6e17afd8068d9"/><section>
    <title>operator[]()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> node &amp; array::operator[] (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> index)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a6327207c728cef7a8b406684ee85b66d"/><section>
    <title>pop_back()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>pop_back</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>pop_back</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> array::pop_back ( )<computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Removes the last element from the array. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classarray_a6327207c728cef7a8b406684ee85b66d_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classarray_1a6327207c728cef7a8b406684ee85b66d"/><section>
    <title>pop_back()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>pop_back</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>pop_back</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> array::pop_back ( )<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a3abd5f1417098187f796bb4c6717aa60"/><section>
    <title>prune()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>prune</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>prune</secondary></indexterm>
<para><computeroutput><link linkend="_classarray">array</link> &amp;&amp; array::prune (<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> recursive = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
) &amp;&amp;<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Removes empty child arrays and tables (rvalue overload). </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>recursive</entry><entry>
<para>Should child arrays and tables themselves be pruned?</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>An rvalue reference to the array. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classarray_1a3abd5f1417098187f796bb4c6717aa60"/><section>
    <title>prune()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>prune</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>prune</secondary></indexterm>
<para><computeroutput><link linkend="_classarray">array</link> &amp;&amp; array::prune (<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> recursive = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
) &amp;&amp;<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a6dda9e6ee37dad724f39b2f46ae72f39"/><section>
    <title>prune()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>prune</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>prune</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classarray">array</link> &amp; array::prune (<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> recursive = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
) &amp;<computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Removes empty child arrays and tables. </para>
</para>

<para>\detail \cpp</para>

<para>auto arr = toml::array{ 1, 2, toml::array{ }, toml::array{ 3, toml::array{ } }, 4 }; std::cout &lt;&lt; arr &lt;&lt; &quot;\n&quot;;</para>

<para>arr.prune(true); std::cout &lt;&lt; arr &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out [ 1, 2, [], [ 3, [] ], 4 ] [ 1, 2, [ 3 ], 4 ] \eout</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>recursive</entry><entry>
<para>Should child arrays and tables themselves be pruned?</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A reference to the array. </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classarray_a6dda9e6ee37dad724f39b2f46ae72f39_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classarray_1a6dda9e6ee37dad724f39b2f46ae72f39"/><section>
    <title>prune()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>prune</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>prune</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classarray">array</link> &amp; array::prune (<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> recursive = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
) &amp;<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1afa5750f44dfcc2e9c7097a3efb02019c"/><section>
    <title>push_back()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>push_back</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>push_back</secondary></indexterm>
<computeroutput>template&lt;typename ElemType &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> array::push_back (ElemType &amp;&amp; val, <link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link> flags = <computeroutput><link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link></computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Appends a new element to the end of the array. </para>
</para>

<para>\detail \cpp auto arr = toml::array{ 1, 2 }; arr.push_back(3); arr.push_back(4.0); arr.push_back(toml::array{ 5, &quot;six&quot;sv }); std::cout &lt;&lt; arr &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out [ 1, 2, 3, 4.0, [ 5, &apos;six&apos; ] ] \eout</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ElemType</entry><entry>
<para>toml::node, toml::node_view, toml::table, toml::array, or a native TOML value type </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>val</entry><entry>
<para>The node or value being added. </para>
</entry>
                            </row>
                            <row>
<entry>flags</entry><entry>
<para>Value flags to apply to new values.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <caution><title>Attention</title>

<para>No insertion takes place if the input value is a null toml::node_view. This is the only circumstance in which this can occur. </para>
</caution>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classarray_afa5750f44dfcc2e9c7097a3efb02019c_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classarray_1afa5750f44dfcc2e9c7097a3efb02019c"/><section>
    <title>push_back()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>push_back</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>push_back</secondary></indexterm>
<computeroutput>template&lt;typename ElemType &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> array::push_back (ElemType &amp;&amp; val, <link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link> flags = <computeroutput><link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link></computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1ad47525682635a4ae40f663ed52bb05e7"/><section>
    <title>replace()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>replace</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>replace</secondary></indexterm>
<computeroutput>template&lt;typename ElemType &gt; </computeroutput><para><computeroutput><link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> array::replace (<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> pos, ElemType &amp;&amp; val, <link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link> flags = <computeroutput><link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link></computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Replaces the element at a specific position in the array with a different value. </para>
</para>

<para>\detail \cpp auto arr = toml::array{ 1, 2, 3 }; std::cout &lt;&lt; arr &lt;&lt; &quot;\n&quot;; arr.replace(arr.cbegin() + 1, &quot;two&quot;); std::cout &lt;&lt; arr &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out [ 1, 2, 3 ] [ 1, &apos;two&apos;, 3 ] \eout</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ElemType</entry><entry>
<para>toml::node, toml::node_view, toml::table, toml::array, or a native TOML value type (or a type promotable to one). </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>pos</entry><entry>
<para>The insertion position. </para>
</entry>
                            </row>
                            <row>
<entry>val</entry><entry>
<para>The node or value being inserted. </para>
</entry>
                            </row>
                            <row>
<entry>flags</entry><entry>
<para>Value flags to apply to new values.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>\conditional_return{Valid input} An iterator to the replaced element. \conditional_return{Input is a null toml::node_view} <link linkend="_classarray_1a2027254bbe0a3e797c461a0b2446f656">end()</link></para>
</formalpara>
<caution><title>Attention</title>

<para>The return value will always be <computeroutput><link linkend="_classarray_1a2027254bbe0a3e797c461a0b2446f656">end()</link></computeroutput> if the input value was a null toml::node_view, because no replacement can take place. This is the only circumstance in which this can occur. </para>
</caution>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classarray_ad47525682635a4ae40f663ed52bb05e7_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classarray_1ad47525682635a4ae40f663ed52bb05e7"/><section>
    <title>replace()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>replace</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>replace</secondary></indexterm>
<computeroutput>template&lt;typename ElemType &gt; </computeroutput><para><computeroutput><link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link> array::replace (<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link> pos, ElemType &amp;&amp; val, <link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link> flags = <computeroutput><link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link></computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a11fae0d179d11cc04ce16c4cd99cb8d1"/><section>
    <title>reserve()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>reserve</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>reserve</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> array::reserve (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> new_capacity)</computeroutput></para><para>

<para>Reserves internal storage capacity up to a pre-determined number of elements. </para>
</para>
</section>
<anchor xml:id="_classarray_1a11fae0d179d11cc04ce16c4cd99cb8d1"/><section>
    <title>reserve()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>reserve</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>reserve</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> array::reserve (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> new_capacity)</computeroutput></para></section>
<anchor xml:id="_classarray_1accdc8c2b96ab9b8dc1355d06be0c268b"/><section>
    <title>resize()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>resize</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>resize</secondary></indexterm>
<computeroutput>template&lt;typename ElemType &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> array::resize (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> new_size, ElemType &amp;&amp; default_init_val, <link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link> default_init_flags = <computeroutput><link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link></computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Resizes the array. </para>
</para>

<para>\detail \godbolt{W5zqx3}</para>

<para>\cpp auto arr = toml::array{ 1, 2, 3 }; std::cout &lt;&lt; arr &lt;&lt; &quot;\n&quot;;</para>

<para>arr.resize(6, 42); std::cout &lt;&lt; arr &lt;&lt; &quot;\n&quot;;</para>

<para>arr.resize(2, 0); std::cout &lt;&lt; arr &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out [ 1, 2, 3 ] [ 1, 2, 3, 42, 42, 42 ] [ 1, 2 ] \eout</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ElemType</entry><entry>
<para>toml::node, toml::table, toml::array, or a native TOML value type (or a type promotable to one).</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>new_size</entry><entry>
<para>The number of elements the array will have after resizing. </para>
</entry>
                            </row>
                            <row>
<entry>default_init_val</entry><entry>
<para>The node or value used to initialize new elements if the array needs to grow. </para>
</entry>
                            </row>
                            <row>
<entry>default_init_flags</entry><entry>
<para>Value flags to apply to new values created if new elements are created by growing. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classarray_1accdc8c2b96ab9b8dc1355d06be0c268b"/><section>
    <title>resize()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>resize</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>resize</secondary></indexterm>
<computeroutput>template&lt;typename ElemType &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> array::resize (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> new_size, ElemType &amp;&amp; default_init_val, <link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link> default_init_flags = <computeroutput><link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link></computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1ae420782d223545646c2f76a0f557bf1d"/><section>
    <title>shrink_to_fit()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>shrink_to_fit</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>shrink_to_fit</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> array::shrink_to_fit ( )</computeroutput></para><para>

<para>Requests the removal of any unused internal storage capacity. </para>
</para>
</section>
<anchor xml:id="_classarray_1ae420782d223545646c2f76a0f557bf1d"/><section>
    <title>shrink_to_fit()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>shrink_to_fit</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>shrink_to_fit</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> array::shrink_to_fit ( )</computeroutput></para></section>
<anchor xml:id="_classarray_1aeb9d2f12b9199641b8b340365a59174b"/><section>
    <title>size()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>size</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>size</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> array::size ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns the number of elements in the array. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classarray_aeb9d2f12b9199641b8b340365a59174b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classarray_1aeb9d2f12b9199641b8b340365a59174b"/><section>
    <title>size()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>size</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>size</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> array::size ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a5940e61991f3006afb94e17d0b1d93ac"/><section>
    <title>TOML_ASYMMETRICAL_EQUALITY_OPS()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>TOML_ASYMMETRICAL_EQUALITY_OPS</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>TOML_ASYMMETRICAL_EQUALITY_OPS</secondary></indexterm>
<para><computeroutput>array::TOML_ASYMMETRICAL_EQUALITY_OPS (const <link linkend="_classarray">array</link> &amp; , const std::initializer_list&lt; T &gt; &amp; , template&lt; typename T &gt; )</computeroutput></para></section>
<anchor xml:id="_classarray_1a5940e61991f3006afb94e17d0b1d93ac"/><section>
    <title>TOML_ASYMMETRICAL_EQUALITY_OPS()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>TOML_ASYMMETRICAL_EQUALITY_OPS</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>TOML_ASYMMETRICAL_EQUALITY_OPS</secondary></indexterm>
<para><computeroutput>array::TOML_ASYMMETRICAL_EQUALITY_OPS (const <link linkend="_classarray">array</link> &amp; , const std::initializer_list&lt; T &gt; &amp; , template&lt; typename T &gt; )</computeroutput></para></section>
<anchor xml:id="_classarray_1a54e1e8b41a7532a12d719b232f22d5f2"/><section>
    <title>TOML_ASYMMETRICAL_EQUALITY_OPS()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>TOML_ASYMMETRICAL_EQUALITY_OPS</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>TOML_ASYMMETRICAL_EQUALITY_OPS</secondary></indexterm>
<para><computeroutput>array::TOML_ASYMMETRICAL_EQUALITY_OPS (const <link linkend="_classarray">array</link> &amp; , const std::vector&lt; T &gt; &amp; , template&lt; typename T &gt; )</computeroutput></para></section>
<anchor xml:id="_classarray_1a54e1e8b41a7532a12d719b232f22d5f2"/><section>
    <title>TOML_ASYMMETRICAL_EQUALITY_OPS()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>TOML_ASYMMETRICAL_EQUALITY_OPS</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>TOML_ASYMMETRICAL_EQUALITY_OPS</secondary></indexterm>
<para><computeroutput>array::TOML_ASYMMETRICAL_EQUALITY_OPS (const <link linkend="_classarray">array</link> &amp; , const std::vector&lt; T &gt; &amp; , template&lt; typename T &gt; )</computeroutput></para></section>
<anchor xml:id="_classarray_1a1bcea1b1c740f3f45fa776b595606e73"/><section>
    <title>TOML_CONSTRAINED_TEMPLATE()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>TOML_CONSTRAINED_TEMPLATE</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>TOML_CONSTRAINED_TEMPLATE</secondary></indexterm>
<para><computeroutput>array::TOML_CONSTRAINED_TEMPLATE ((sizeof...(ElemTypes) &gt; 0||!std::is_same_v&lt; impl::remove_cvref&lt; ElemType &gt;, <link linkend="_classarray">array</link> &gt;) , typename ElemType , typename... ElemTypes) &amp;&amp;</computeroutput></para><para>

<para>Constructs an array with one or more initial elements. </para>
</para>

<para>\detail \cpp auto arr = toml::array{ 1, 2.0, &quot;three&quot;sv, toml::array{ 4, 5 } }; std::cout &lt;&lt; arr &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out [ 1, 2.0, &apos;three&apos;, [ 4, 5 ] ] \eout</para>

<para><formalpara><title>Remarks</title>

<para>
<para>If you need to construct an array with one child array element, the array&apos;s move constructor will take precedence and perform a move-construction instead. You can use toml::inserter to suppress this behaviour: \cpp // desired result: [ [ 42 ] ] auto bad = toml::array{ toml::array{ 42 } } auto good = toml::array{ toml::inserter{ toml::array{ 42 } } } std::cout &lt;&lt; &quot;bad: &quot; &lt;&lt; bad &lt;&lt; &quot;\n&quot;; std::cout &lt;&lt; &quot;good:&quot; &lt;&lt; good &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out bad: [ 42 ] good: [ [ 42 ] ] \eout</para>

<para></para>
</para>
</formalpara>
</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ElemType</entry><entry>
<para>One of the TOML node or value types (or a type promotable to one). </para>
</entry>
                            </row>
                            <row>
<entry>ElemTypes</entry><entry>
<para>One of the TOML node or value types (or a type promotable to one). </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>val</entry><entry>
<para>The node or value used to initialize element 0. </para>
</entry>
                            </row>
                            <row>
<entry>vals</entry><entry>
<para>The nodes or values used to initialize elements 1...N. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classarray_1a1bcea1b1c740f3f45fa776b595606e73"/><section>
    <title>TOML_CONSTRAINED_TEMPLATE()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>TOML_CONSTRAINED_TEMPLATE</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>TOML_CONSTRAINED_TEMPLATE</secondary></indexterm>
<para><computeroutput>array::TOML_CONSTRAINED_TEMPLATE ((sizeof...(ElemTypes) &gt; 0||!std::is_same_v&lt; impl::remove_cvref&lt; ElemType &gt;, <link linkend="_classarray">array</link> &gt;) , typename ElemType , typename... ElemTypes) &amp;&amp;</computeroutput></para></section>
<anchor xml:id="_classarray_1a8f0452eded5f124b52b5b31ecfe3ca22"/><section>
    <title>truncate()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>truncate</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>truncate</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> array::truncate (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> new_size)</computeroutput></para><para>

<para>Shrinks the array to the given size. </para>
</para>

<para>\detail \godbolt{rxEzK5}</para>

<para>\cpp auto arr = toml::array{ 1, 2, 3 }; std::cout &lt;&lt; arr &lt;&lt; &quot;\n&quot;;</para>

<para>arr.truncate(5); // no-op std::cout &lt;&lt; arr &lt;&lt; &quot;\n&quot;;</para>

<para>arr.truncate(1); std::cout &lt;&lt; arr &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out [ 1, 2, 3 ] [ 1, 2, 3 ] [ 1] \eout</para>

<para><formalpara><title>Remarks</title>

<para>Does nothing if the requested size is larger than or equal to the current size. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classarray_1a8f0452eded5f124b52b5b31ecfe3ca22"/><section>
    <title>truncate()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>truncate</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>truncate</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> array::truncate (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> new_size)</computeroutput></para></section>
<anchor xml:id="_classarray_1a9ccff2347a4e44e86ec966c0aba8aec3"/><section>
    <title>type()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>type</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>type</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> node_type array::type ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns #toml::node_type::array. </para>
</para>
</section>
<anchor xml:id="_classarray_1a9ccff2347a4e44e86ec966c0aba8aec3"/><section>
    <title>type()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>type</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>type</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> node_type array::type ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Friends And Related Symbol Documentation</title>
<anchor xml:id="_classarray_1a45e3c17332ca62a1e0bff55d0808116c"/><section>
    <title>operator!=<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>operator!=</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator!= (const <link linkend="_classarray">array</link> &amp; lhs, const <link linkend="_classarray">array</link> &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Inequality operator. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>lhs</entry><entry>
<para>The LHS array. </para>
</entry>
                            </row>
                            <row>
<entry>rhs</entry><entry>
<para>The RHS array.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>True if the arrays did not contain the same elements. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classarray_1a45e3c17332ca62a1e0bff55d0808116c"/><section>
    <title>operator!=<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>operator!=</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator!= (const <link linkend="_classarray">array</link> &amp; lhs, const <link linkend="_classarray">array</link> &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1ada82b30641e7546cfe89ece1db7436cc"/><section>
    <title>operator&lt;&lt;<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream &amp; operator&lt;&lt; (std::ostream &amp; lhs, const <link linkend="_classarray">array</link> &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Prints the array out to a stream as formatted TOML. </para>
</para>

<para>\availability This operator is only available when <link linkend="_group__configuration_1ga9fc77582d9de77f59d2ddc9ae1f748ca">TOML_ENABLE_FORMATTERS</link> is enabled. </para>
</section>
<anchor xml:id="_classarray_1ada82b30641e7546cfe89ece1db7436cc"/><section>
    <title>operator&lt;&lt;<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream &amp; operator&lt;&lt; (std::ostream &amp; lhs, const <link linkend="_classarray">array</link> &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a9b0bbc5272ae44ea14a06ec70cfa1882"/><section>
    <title>operator==<computeroutput>[1/6]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator== (const <link linkend="_classarray">array</link> &amp; lhs, const <link linkend="_classarray">array</link> &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Equality operator. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>lhs</entry><entry>
<para>The LHS array. </para>
</entry>
                            </row>
                            <row>
<entry>rhs</entry><entry>
<para>The RHS array.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>True if the arrays contained the same elements. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classarray_1a9b0bbc5272ae44ea14a06ec70cfa1882"/><section>
    <title>operator==<computeroutput>[2/6]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator== (const <link linkend="_classarray">array</link> &amp; lhs, const <link linkend="_classarray">array</link> &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a12cf27ed8dbb468cff18164aad02e289"/><section>
    <title>operator==<computeroutput>[3/6]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator== (const <link linkend="_classarray">array</link> &amp; lhs, const std::initializer_list&lt; T &gt; &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Initializer list equality operator. </para>
</para>
</section>
<anchor xml:id="_classarray_1a12cf27ed8dbb468cff18164aad02e289"/><section>
    <title>operator==<computeroutput>[4/6]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator== (const <link linkend="_classarray">array</link> &amp; lhs, const std::initializer_list&lt; T &gt; &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classarray_1a1afcb945a833cd794f4696d0965bcb15"/><section>
    <title>operator==<computeroutput>[5/6]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator== (const <link linkend="_classarray">array</link> &amp; lhs, const std::vector&lt; T &gt; &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Vector equality operator. </para>
</para>
</section>
<anchor xml:id="_classarray_1a1afcb945a833cd794f4696d0965bcb15"/><section>
    <title>operator==<computeroutput>[6/6]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator== (const <link linkend="_classarray">array</link> &amp; lhs, const std::vector&lt; T &gt; &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_classarray_1ad3adfb805aded9285440bb4a31cd38b1"/><section>
    <title>vals</title>
<indexterm><primary>vals</primary><secondary>array</secondary></indexterm>
<indexterm><primary>array</primary><secondary>vals</secondary></indexterm>
<para><computeroutput>ElemTypes &amp;&amp; array::vals</computeroutput></para></section>
<para>
The documentation for this class was generated from the following files:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/include/toml++/impl/<link linkend="_array_8h">array.h</link>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/<link linkend="_toml_8hpp">toml.hpp</link></section>
</section>
