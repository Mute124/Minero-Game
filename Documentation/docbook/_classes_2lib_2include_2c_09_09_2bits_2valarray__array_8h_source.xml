<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2bits_2valarray__array_8h_source" xml:lang="en-US">
<title>valarray_array.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/bits/valarray_array.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;The&#32;template&#32;and&#32;inlines&#32;for&#32;the&#32;-*-&#32;C++&#32;-*-&#32;internal&#32;_Array&#32;helper&#32;class.</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;1997-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="comment">//&#32;Written&#32;by&#32;Gabriel&#32;Dos&#32;Reis&#32;&lt;Gabriel.Dos-Reis@DPTMaths.ENS-Cachan.Fr&gt;</emphasis>
31 
32 <emphasis role="preprocessor">#ifndef&#32;_VALARRAY_ARRAY_H</emphasis>
33 <emphasis role="preprocessor">#define&#32;_VALARRAY_ARRAY_H&#32;1</emphasis>
34 
35 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
36 
37 <emphasis role="preprocessor">#include&#32;&lt;bits/c++config.h&gt;</emphasis>
38 <emphasis role="preprocessor">#include&#32;&lt;bits/cpp_type_traits.h&gt;</emphasis>
39 <emphasis role="preprocessor">#include&#32;&lt;cstdlib&gt;</emphasis>
40 <emphasis role="preprocessor">#include&#32;&lt;new&gt;</emphasis>
41 
42 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
43 {
44 _GLIBCXX_BEGIN_NAMESPACE_VERSION
45 
46 &#32;&#32;<emphasis role="comment">//</emphasis>
47 &#32;&#32;<emphasis role="comment">//&#32;Helper&#32;functions&#32;on&#32;raw&#32;pointers</emphasis>
48 &#32;&#32;<emphasis role="comment">//</emphasis>
49 
50 &#32;&#32;<emphasis role="comment">//&#32;We&#32;get&#32;memory&#32;the&#32;old&#32;fashioned&#32;way</emphasis>
51 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
52 &#32;&#32;&#32;&#32;_Tp*
53 &#32;&#32;&#32;&#32;__valarray_get_storage(<emphasis role="keywordtype">size_t</emphasis>)&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((<link linkend="__classes_2lib_2include_2omp_8h_1a7966dad6f43beaaf70d3a210b206199f">__malloc__</link>));
54 
55 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
56 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_Tp*
57 &#32;&#32;&#32;&#32;__valarray_get_storage(<emphasis role="keywordtype">size_t</emphasis>&#32;__n)
58 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">new</emphasis>(__n&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)));&#32;}
59 
60 &#32;&#32;<emphasis role="comment">//&#32;Return&#32;memory&#32;to&#32;the&#32;system</emphasis>
61 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
62 &#32;&#32;__valarray_release_memory(<emphasis role="keywordtype">void</emphasis>*&#32;__p)
63 &#32;&#32;{&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">delete</emphasis>(__p);&#32;}
64 
65 &#32;&#32;<emphasis role="comment">//&#32;Turn&#32;a&#32;raw-memory&#32;into&#32;an&#32;array&#32;of&#32;_Tp&#32;filled&#32;with&#32;_Tp()</emphasis>
66 &#32;&#32;<emphasis role="comment">//&#32;This&#32;is&#32;required&#32;in&#32;&apos;valarray&lt;T&gt;&#32;v(n);&apos;</emphasis>
67 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">bool</emphasis>&gt;
68 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Array_default_ctor
69 &#32;&#32;&#32;&#32;{
70 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Please&#32;note&#32;that&#32;this&#32;isn&apos;t&#32;exception&#32;safe.&#32;&#32;But</emphasis>
71 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;valarrays&#32;aren&apos;t&#32;required&#32;to&#32;be&#32;exception&#32;safe.</emphasis>
72 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
73 &#32;&#32;&#32;&#32;&#32;&#32;_S_do_it(_Tp*&#32;__b,&#32;_Tp*&#32;__e)
74 &#32;&#32;&#32;&#32;&#32;&#32;{
75 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__b&#32;!=&#32;__e)
76 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>(__b++)&#32;_Tp();
77 &#32;&#32;&#32;&#32;&#32;&#32;}
78 &#32;&#32;&#32;&#32;};
79 
80 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
81 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Array_default_ctor&lt;_Tp,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
82 &#32;&#32;&#32;&#32;{
83 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;fundamental&#32;types,&#32;it&#32;suffices&#32;to&#32;say&#32;&apos;memset()&apos;</emphasis>
84 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
85 &#32;&#32;&#32;&#32;&#32;&#32;_S_do_it(_Tp*&#32;__b,&#32;_Tp*&#32;__e)
86 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__builtin_memset(__b,&#32;0,&#32;(__e&#32;-&#32;__b)&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp));&#32;}
87 &#32;&#32;&#32;&#32;};
88 
89 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
90 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
91 &#32;&#32;&#32;&#32;__valarray_default_construct(_Tp*&#32;__b,&#32;_Tp*&#32;__e)
92 &#32;&#32;&#32;&#32;{
93 &#32;&#32;&#32;&#32;&#32;&#32;_Array_default_ctor&lt;_Tp,&#32;__is_scalar&lt;_Tp&gt;::__value&gt;::_S_do_it(__b,&#32;__e);
94 &#32;&#32;&#32;&#32;}
95 
96 &#32;&#32;<emphasis role="comment">//&#32;Turn&#32;a&#32;raw-memory&#32;into&#32;an&#32;array&#32;of&#32;_Tp&#32;filled&#32;with&#32;__t</emphasis>
97 &#32;&#32;<emphasis role="comment">//&#32;This&#32;is&#32;the&#32;required&#32;in&#32;valarray&lt;T&gt;&#32;v(n,&#32;t).&#32;&#32;Also</emphasis>
98 &#32;&#32;<emphasis role="comment">//&#32;used&#32;in&#32;valarray&lt;&gt;::resize().</emphasis>
99 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">bool</emphasis>&gt;
100 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Array_init_ctor
101 &#32;&#32;&#32;&#32;{
102 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Please&#32;note&#32;that&#32;this&#32;isn&apos;t&#32;exception&#32;safe.&#32;&#32;But</emphasis>
103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;valarrays&#32;aren&apos;t&#32;required&#32;to&#32;be&#32;exception&#32;safe.</emphasis>
104 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
105 &#32;&#32;&#32;&#32;&#32;&#32;_S_do_it(_Tp*&#32;__b,&#32;_Tp*&#32;__e,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&#32;__t)
106 &#32;&#32;&#32;&#32;&#32;&#32;{
107 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__b&#32;!=&#32;__e)
108 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>(__b++)&#32;_Tp(__t);
109 &#32;&#32;&#32;&#32;&#32;&#32;}
110 &#32;&#32;&#32;&#32;};
111 
112 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
113 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Array_init_ctor&lt;_Tp,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
114 &#32;&#32;&#32;&#32;{
115 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
116 &#32;&#32;&#32;&#32;&#32;&#32;_S_do_it(_Tp*&#32;__b,&#32;_Tp*&#32;__e,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&#32;__t)
117 &#32;&#32;&#32;&#32;&#32;&#32;{
118 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__b&#32;!=&#32;__e)
119 &#32;&#32;&#32;&#32;&#32;&#32;*__b++&#32;=&#32;__t;
120 &#32;&#32;&#32;&#32;&#32;&#32;}
121 &#32;&#32;&#32;&#32;};
122 
123 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
124 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
125 &#32;&#32;&#32;&#32;__valarray_fill_construct(_Tp*&#32;__b,&#32;_Tp*&#32;__e,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&#32;__t)
126 &#32;&#32;&#32;&#32;{
127 &#32;&#32;&#32;&#32;&#32;&#32;_Array_init_ctor&lt;_Tp,&#32;__is_trivial(_Tp)&gt;::_S_do_it(__b,&#32;__e,&#32;__t);
128 &#32;&#32;&#32;&#32;}
129 
130 &#32;&#32;<emphasis role="comment">//</emphasis>
131 &#32;&#32;<emphasis role="comment">//&#32;copy-construct&#32;raw&#32;array&#32;[__o,&#32;*)&#32;from&#32;plain&#32;array&#32;[__b,&#32;__e)</emphasis>
132 &#32;&#32;<emphasis role="comment">//&#32;We&#32;can&apos;t&#32;just&#32;say&#32;&apos;memcpy()&apos;</emphasis>
133 &#32;&#32;<emphasis role="comment">//</emphasis>
134 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">bool</emphasis>&gt;
135 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Array_copy_ctor
136 &#32;&#32;&#32;&#32;{
137 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Please&#32;note&#32;that&#32;this&#32;isn&apos;t&#32;exception&#32;safe.&#32;&#32;But</emphasis>
138 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;valarrays&#32;aren&apos;t&#32;required&#32;to&#32;be&#32;exception&#32;safe.</emphasis>
139 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
140 &#32;&#32;&#32;&#32;&#32;&#32;_S_do_it(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__b,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__e,&#32;_Tp*&#32;__restrict__&#32;__o)
141 &#32;&#32;&#32;&#32;&#32;&#32;{
142 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__b&#32;!=&#32;__e)
143 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>(__o++)&#32;_Tp(*__b++);
144 &#32;&#32;&#32;&#32;&#32;&#32;}
145 &#32;&#32;&#32;&#32;};
146 
147 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
148 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Array_copy_ctor&lt;_Tp,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
149 &#32;&#32;&#32;&#32;{
150 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
151 &#32;&#32;&#32;&#32;&#32;&#32;_S_do_it(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__b,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__e,&#32;_Tp*&#32;__restrict__&#32;__o)
152 &#32;&#32;&#32;&#32;&#32;&#32;{
153 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__b)
154 &#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(__o,&#32;__b,&#32;(__e&#32;-&#32;__b)&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp));
155 &#32;&#32;&#32;&#32;&#32;&#32;}
156 &#32;&#32;&#32;&#32;};
157 
158 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
159 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
160 &#32;&#32;&#32;&#32;__valarray_copy_construct(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__b,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__e,
161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;__restrict__&#32;__o)
162 &#32;&#32;&#32;&#32;{
163 &#32;&#32;&#32;&#32;&#32;&#32;_Array_copy_ctor&lt;_Tp,&#32;__is_trivial(_Tp)&gt;::_S_do_it(__b,&#32;__e,&#32;__o);
164 &#32;&#32;&#32;&#32;}
165 
166 &#32;&#32;<emphasis role="comment">//&#32;copy-construct&#32;raw&#32;array&#32;[__o,&#32;*)&#32;from&#32;strided&#32;array&#32;__a[&lt;__n&#32;:&#32;__s&gt;]</emphasis>
167 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
168 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
169 &#32;&#32;&#32;&#32;__valarray_copy_construct&#32;(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__restrict__&#32;__a,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n,
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__s,&#32;_Tp*&#32;__restrict__&#32;__o)
171 &#32;&#32;&#32;&#32;{
172 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__is_trivial(_Tp))
173 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__n--)
174 &#32;&#32;&#32;&#32;&#32;&#32;{
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__o++&#32;=&#32;*__a;
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a&#32;+=&#32;__s;
177 &#32;&#32;&#32;&#32;&#32;&#32;}
178 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
179 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__n--)
180 &#32;&#32;&#32;&#32;&#32;&#32;{
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>(__o++)&#32;_Tp(*__a);
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a&#32;+=&#32;__s;
183 &#32;&#32;&#32;&#32;&#32;&#32;}
184 &#32;&#32;&#32;&#32;}
185 
186 &#32;&#32;<emphasis role="comment">//&#32;copy-construct&#32;raw&#32;array&#32;[__o,&#32;*)&#32;from&#32;indexed&#32;array&#32;__a[__i[&lt;__n&gt;]]</emphasis>
187 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
188 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
189 &#32;&#32;&#32;&#32;__valarray_copy_construct&#32;(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__restrict__&#32;__a,
190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;__restrict__&#32;__i,
191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;__restrict__&#32;__o,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n)
192 &#32;&#32;&#32;&#32;{
193 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__is_trivial(_Tp))
194 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__n--)
195 &#32;&#32;&#32;&#32;&#32;&#32;*__o++&#32;=&#32;__a[*__i++];
196 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
197 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__n--)
198 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;(__o++)&#32;_Tp(__a[*__i++]);
199 &#32;&#32;&#32;&#32;}
200 
201 &#32;&#32;<emphasis role="comment">//&#32;Do&#32;the&#32;necessary&#32;cleanup&#32;when&#32;we&apos;re&#32;done&#32;with&#32;arrays.</emphasis>
202 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
203 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
204 &#32;&#32;&#32;&#32;__valarray_destroy_elements(_Tp*&#32;__b,&#32;_Tp*&#32;__e)
205 &#32;&#32;&#32;&#32;{
206 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__is_trivial(_Tp))
207 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__b&#32;!=&#32;__e)
208 &#32;&#32;&#32;&#32;&#32;&#32;{
209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__b-&gt;~_Tp();
210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__b;
211 &#32;&#32;&#32;&#32;&#32;&#32;}
212 &#32;&#32;&#32;&#32;}
213 
214 &#32;&#32;<emphasis role="comment">//&#32;Fill&#32;a&#32;plain&#32;array&#32;__a[&lt;__n&gt;]&#32;with&#32;__t</emphasis>
215 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
216 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
217 &#32;&#32;&#32;&#32;__valarray_fill(_Tp*&#32;__restrict__&#32;__a,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__t)
218 &#32;&#32;&#32;&#32;{
219 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__n--)
220 &#32;&#32;&#32;&#32;*__a++&#32;=&#32;__t;
221 &#32;&#32;&#32;&#32;}
222 &#32;&#32;
223 &#32;&#32;<emphasis role="comment">//&#32;fill&#32;strided&#32;array&#32;__a[&lt;__n-1&#32;:&#32;__s&gt;]&#32;with&#32;__t</emphasis>
224 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
225 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
226 &#32;&#32;&#32;&#32;__valarray_fill(_Tp*&#32;__restrict__&#32;__a,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n,
227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__s,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__t)
228 &#32;&#32;&#32;&#32;{&#32;
229 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__n;&#32;++__i,&#32;__a&#32;+=&#32;__s)
230 &#32;&#32;&#32;&#32;*__a&#32;=&#32;__t;
231 &#32;&#32;&#32;&#32;}
232 
233 &#32;&#32;<emphasis role="comment">//&#32;fill&#32;indirect&#32;array&#32;__a[__i[&lt;__n&gt;]]&#32;with&#32;__i</emphasis>
234 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
235 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
236 &#32;&#32;&#32;&#32;__valarray_fill(_Tp*&#32;__restrict__&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;__restrict__&#32;__i,
237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__t)
238 &#32;&#32;&#32;&#32;{
239 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;__j&#32;=&#32;0;&#32;__j&#32;&lt;&#32;__n;&#32;++__j,&#32;++__i)
240 &#32;&#32;&#32;&#32;__a[*__i]&#32;=&#32;__t;
241 &#32;&#32;&#32;&#32;}
242 &#32;&#32;
243 &#32;&#32;<emphasis role="comment">//&#32;copy&#32;plain&#32;array&#32;__a[&lt;__n&gt;]&#32;in&#32;__b[&lt;__n&gt;]</emphasis>
244 &#32;&#32;<emphasis role="comment">//&#32;For&#32;non-fundamental&#32;types,&#32;it&#32;is&#32;wrong&#32;to&#32;say&#32;&apos;memcpy()&apos;</emphasis>
245 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">bool</emphasis>&gt;
246 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Array_copier
247 &#32;&#32;&#32;&#32;{
248 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
249 &#32;&#32;&#32;&#32;&#32;&#32;_S_do_it(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__restrict__&#32;__a,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n,&#32;_Tp*&#32;__restrict__&#32;__b)
250 &#32;&#32;&#32;&#32;&#32;&#32;{
251 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(__n--)
252 &#32;&#32;&#32;&#32;&#32;&#32;*__b++&#32;=&#32;*__a++;
253 &#32;&#32;&#32;&#32;&#32;&#32;}
254 &#32;&#32;&#32;&#32;};
255 
256 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
257 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Array_copier&lt;_Tp,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
258 &#32;&#32;&#32;&#32;{
259 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
260 &#32;&#32;&#32;&#32;&#32;&#32;_S_do_it(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__restrict__&#32;__a,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n,&#32;_Tp*&#32;__restrict__&#32;__b)
261 &#32;&#32;&#32;&#32;&#32;&#32;{
262 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;!=&#32;0)
263 &#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(__b,&#32;__a,&#32;__n&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>&#32;(_Tp));
264 &#32;&#32;&#32;&#32;&#32;&#32;}
265 &#32;&#32;&#32;&#32;};
266 
267 &#32;&#32;<emphasis role="comment">//&#32;Copy&#32;a&#32;plain&#32;array&#32;__a[&lt;__n&gt;]&#32;into&#32;a&#32;play&#32;array&#32;__b[&lt;&gt;]</emphasis>
268 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
269 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
270 &#32;&#32;&#32;&#32;__valarray_copy(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__restrict__&#32;__a,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n,
271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;__restrict__&#32;__b)
272 &#32;&#32;&#32;&#32;{
273 &#32;&#32;&#32;&#32;&#32;&#32;_Array_copier&lt;_Tp,&#32;__is_trivial(_Tp)&gt;::_S_do_it(__a,&#32;__n,&#32;__b);
274 &#32;&#32;&#32;&#32;}
275 
276 &#32;&#32;<emphasis role="comment">//&#32;Copy&#32;strided&#32;array&#32;__a[&lt;__n&#32;:&#32;__s&gt;]&#32;in&#32;plain&#32;__b[&lt;__n&gt;]</emphasis>
277 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
278 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
279 &#32;&#32;&#32;&#32;__valarray_copy(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__restrict__&#32;__a,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__s,
280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;__restrict__&#32;__b)
281 &#32;&#32;&#32;&#32;{
282 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__n;&#32;++__i,&#32;++__b,&#32;__a&#32;+=&#32;__s)
283 &#32;&#32;&#32;&#32;*__b&#32;=&#32;*__a;
284 &#32;&#32;&#32;&#32;}
285 
286 &#32;&#32;<emphasis role="comment">//&#32;Copy&#32;a&#32;plain&#32;array&#32;&#32;__a[&lt;__n&gt;]&#32;into&#32;a&#32;strided&#32;array&#32;__b[&lt;__n&#32;:&#32;__s&gt;]</emphasis>
287 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
288 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
289 &#32;&#32;&#32;&#32;__valarray_copy(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__restrict__&#32;__a,&#32;_Tp*&#32;__restrict__&#32;__b,
290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__s)
291 &#32;&#32;&#32;&#32;{
292 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__n;&#32;++__i,&#32;++__a,&#32;__b&#32;+=&#32;__s)
293 &#32;&#32;&#32;&#32;*__b&#32;=&#32;*__a;
294 &#32;&#32;&#32;&#32;}
295 
296 &#32;&#32;<emphasis role="comment">//&#32;Copy&#32;strided&#32;array&#32;__src[&lt;__n&#32;:&#32;__s1&gt;]&#32;into&#32;another</emphasis>
297 &#32;&#32;<emphasis role="comment">//&#32;strided&#32;array&#32;__dst[&lt;&#32;:&#32;__s2&gt;].&#32;&#32;Their&#32;sizes&#32;must&#32;match.</emphasis>
298 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
299 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
300 &#32;&#32;&#32;&#32;__valarray_copy(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__restrict__&#32;__src,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__s1,
301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;__restrict__&#32;__dst,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__s2)
302 &#32;&#32;&#32;&#32;{
303 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__n;&#32;++__i)
304 &#32;&#32;&#32;&#32;__dst[__i&#32;*&#32;__s2]&#32;=&#32;__src[__i&#32;*&#32;__s1];
305 &#32;&#32;&#32;&#32;}
306 
307 &#32;&#32;<emphasis role="comment">//&#32;Copy&#32;an&#32;indexed&#32;array&#32;__a[__i[&lt;__n&gt;]]&#32;in&#32;plain&#32;array&#32;__b[&lt;__n&gt;]</emphasis>
308 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
309 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
310 &#32;&#32;&#32;&#32;__valarray_copy(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__restrict__&#32;__a,
311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;__restrict__&#32;__i,
312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;__restrict__&#32;__b,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n)
313 &#32;&#32;&#32;&#32;{
314 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;__j&#32;=&#32;0;&#32;__j&#32;&lt;&#32;__n;&#32;++__j,&#32;++__b,&#32;++__i)
315 &#32;&#32;&#32;&#32;*__b&#32;=&#32;__a[*__i];
316 &#32;&#32;&#32;&#32;}
317 
318 &#32;&#32;<emphasis role="comment">//&#32;Copy&#32;a&#32;plain&#32;array&#32;__a[&lt;__n&gt;]&#32;in&#32;an&#32;indexed&#32;array&#32;__b[__i[&lt;__n&gt;]]</emphasis>
319 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
320 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
321 &#32;&#32;&#32;&#32;__valarray_copy(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__restrict__&#32;__a,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n,
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;__restrict__&#32;__b,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;__restrict__&#32;__i)
323 &#32;&#32;&#32;&#32;{
324 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;__j&#32;=&#32;0;&#32;__j&#32;&lt;&#32;__n;&#32;++__j,&#32;++__a,&#32;++__i)
325 &#32;&#32;&#32;&#32;__b[*__i]&#32;=&#32;*__a;
326 &#32;&#32;&#32;&#32;}
327 
328 &#32;&#32;<emphasis role="comment">//&#32;Copy&#32;the&#32;__n&#32;first&#32;elements&#32;of&#32;an&#32;indexed&#32;array&#32;__src[&lt;__i&gt;]&#32;into</emphasis>
329 &#32;&#32;<emphasis role="comment">//&#32;another&#32;indexed&#32;array&#32;__dst[&lt;__j&gt;].</emphasis>
330 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
331 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
332 &#32;&#32;&#32;&#32;__valarray_copy(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__restrict__&#32;__src,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n,
333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;__restrict__&#32;__i,
334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;__restrict__&#32;__dst,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;__restrict__&#32;__j)
335 &#32;&#32;&#32;&#32;{
336 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;__k&#32;=&#32;0;&#32;__k&#32;&lt;&#32;__n;&#32;++__k)
337 &#32;&#32;&#32;&#32;__dst[*__j++]&#32;=&#32;__src[*__i++];
338 &#32;&#32;&#32;&#32;}
339 
340 &#32;&#32;<emphasis role="comment">//</emphasis>
341 &#32;&#32;<emphasis role="comment">//&#32;Compute&#32;the&#32;sum&#32;of&#32;elements&#32;in&#32;range&#32;[__f,&#32;__l)&#32;which&#32;must&#32;not&#32;be&#32;empty.</emphasis>
342 &#32;&#32;<emphasis role="comment">//&#32;This&#32;is&#32;a&#32;naive&#32;algorithm.&#32;&#32;It&#32;suffers&#32;from&#32;cancelling.</emphasis>
343 &#32;&#32;<emphasis role="comment">//&#32;In&#32;the&#32;future&#32;try&#32;to&#32;specialize&#32;for&#32;_Tp&#32;=&#32;float,&#32;double,&#32;long&#32;double</emphasis>
344 &#32;&#32;<emphasis role="comment">//&#32;using&#32;a&#32;more&#32;accurate&#32;algorithm.</emphasis>
345 &#32;&#32;<emphasis role="comment">//</emphasis>
346 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
347 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_Tp
348 &#32;&#32;&#32;&#32;__valarray_sum(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__f,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__l)
349 &#32;&#32;&#32;&#32;{
350 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;__r&#32;=&#32;*__f++;
351 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__f&#32;!=&#32;__l)
352 &#32;&#32;&#32;&#32;__r&#32;+=&#32;*__f++;
353 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
354 &#32;&#32;&#32;&#32;}
355 
356 &#32;&#32;<emphasis role="comment">//&#32;Compute&#32;the&#32;min/max&#32;of&#32;an&#32;array-expression</emphasis>
357 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ta&gt;
358 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ta::value_type
359 &#32;&#32;&#32;&#32;__valarray_min(<emphasis role="keyword">const</emphasis>&#32;_Ta&amp;&#32;__a)
360 &#32;&#32;&#32;&#32;{
361 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__s&#32;=&#32;__a.size();
362 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ta::value_type&#32;_Value_type;
363 &#32;&#32;&#32;&#32;&#32;&#32;_Value_type&#32;__r&#32;=&#32;__s&#32;==&#32;0&#32;?&#32;_Value_type()&#32;:&#32;__a[0];
364 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;__i&#32;=&#32;1;&#32;__i&#32;&lt;&#32;__s;&#32;++__i)
365 &#32;&#32;&#32;&#32;{
366 &#32;&#32;&#32;&#32;&#32;&#32;_Value_type&#32;__t&#32;=&#32;__a[__i];
367 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__t&#32;&lt;&#32;__r)
368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__r&#32;=&#32;__t;
369 &#32;&#32;&#32;&#32;}
370 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
371 &#32;&#32;&#32;&#32;}
372 
373 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ta&gt;
374 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ta::value_type
375 &#32;&#32;&#32;&#32;__valarray_max(<emphasis role="keyword">const</emphasis>&#32;_Ta&amp;&#32;__a)
376 &#32;&#32;&#32;&#32;{
377 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__s&#32;=&#32;__a.size();
378 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ta::value_type&#32;_Value_type;
379 &#32;&#32;&#32;&#32;&#32;&#32;_Value_type&#32;__r&#32;=&#32;__s&#32;==&#32;0&#32;?&#32;_Value_type()&#32;:&#32;__a[0];
380 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;__i&#32;=&#32;1;&#32;__i&#32;&lt;&#32;__s;&#32;++__i)
381 &#32;&#32;&#32;&#32;{
382 &#32;&#32;&#32;&#32;&#32;&#32;_Value_type&#32;__t&#32;=&#32;__a[__i];
383 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__t&#32;&gt;&#32;__r)
384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__r&#32;=&#32;__t;
385 &#32;&#32;&#32;&#32;}
386 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
387 &#32;&#32;&#32;&#32;}
388 
389 &#32;&#32;<emphasis role="comment">//</emphasis>
390 &#32;&#32;<emphasis role="comment">//&#32;Helper&#32;class&#32;_Array,&#32;first&#32;layer&#32;of&#32;valarray&#32;abstraction.</emphasis>
391 &#32;&#32;<emphasis role="comment">//&#32;All&#32;operations&#32;on&#32;valarray&#32;should&#32;be&#32;forwarded&#32;to&#32;this&#32;class</emphasis>
392 &#32;&#32;<emphasis role="comment">//&#32;whenever&#32;possible.&#32;--&#32;gdr</emphasis>
393 &#32;&#32;<emphasis role="comment">//</emphasis>
394 
395 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
396 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Array
397 &#32;&#32;&#32;&#32;{
398 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;_Array(_Tp*&#32;<emphasis role="keyword">const</emphasis>&#32;__restrict__);
399 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;_Array(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;);
400 &#32;&#32;&#32;&#32;&#32;&#32;_Array(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__restrict__,&#32;<emphasis role="keywordtype">size_t</emphasis>);
401 &#32;&#32;&#32;&#32;&#32;&#32;
402 &#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;begin()&#32;<emphasis role="keyword">const</emphasis>;
403 &#32;&#32;&#32;&#32;&#32;&#32;
404 &#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;<emphasis role="keyword">const</emphasis>&#32;__restrict__&#32;_M_data;
405 &#32;&#32;&#32;&#32;};
406 
407 
408 &#32;&#32;<emphasis role="comment">//&#32;Copy-construct&#32;plain&#32;array&#32;__b[&lt;__n&gt;]&#32;from&#32;indexed&#32;array&#32;__a[__i[&lt;__n&gt;]]</emphasis>
409 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
410 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
411 &#32;&#32;&#32;&#32;__valarray_copy_construct(_Array&lt;_Tp&gt;&#32;__a,&#32;_Array&lt;size_t&gt;&#32;__i,
412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Array&lt;_Tp&gt;&#32;__b,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n)
413 &#32;&#32;&#32;&#32;{&#32;std::__valarray_copy_construct(__a._M_data,&#32;__i._M_data,
414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__b._M_data,&#32;__n);&#32;}
415 
416 &#32;&#32;<emphasis role="comment">//&#32;Copy-construct&#32;plain&#32;array&#32;__b[&lt;__n&gt;]&#32;from&#32;strided&#32;array&#32;__a[&lt;__n&#32;:&#32;__s&gt;]</emphasis>
417 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
418 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
419 &#32;&#32;&#32;&#32;__valarray_copy_construct(_Array&lt;_Tp&gt;&#32;__a,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__s,
420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Array&lt;_Tp&gt;&#32;__b)
421 &#32;&#32;&#32;&#32;{&#32;std::__valarray_copy_construct(__a._M_data,&#32;__n,&#32;__s,&#32;__b._M_data);&#32;}
422 
423 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
424 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
425 &#32;&#32;&#32;&#32;__valarray_fill&#32;(_Array&lt;_Tp&gt;&#32;__a,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__t)
426 &#32;&#32;&#32;&#32;{&#32;std::__valarray_fill(__a._M_data,&#32;__n,&#32;__t);&#32;}
427 
428 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
429 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
430 &#32;&#32;&#32;&#32;__valarray_fill(_Array&lt;_Tp&gt;&#32;__a,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__s,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__t)
431 &#32;&#32;&#32;&#32;{&#32;std::__valarray_fill(__a._M_data,&#32;__n,&#32;__s,&#32;__t);&#32;}
432 
433 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
434 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
435 &#32;&#32;&#32;&#32;__valarray_fill(_Array&lt;_Tp&gt;&#32;__a,&#32;_Array&lt;size_t&gt;&#32;__i,
436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__t)
437 &#32;&#32;&#32;&#32;{&#32;std::__valarray_fill(__a._M_data,&#32;__i._M_data,&#32;__n,&#32;__t);&#32;}
438 
439 &#32;&#32;<emphasis role="comment">//&#32;Copy&#32;a&#32;plain&#32;array&#32;__a[&lt;__n&gt;]&#32;into&#32;a&#32;play&#32;array&#32;__b[&lt;&gt;]</emphasis>
440 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
441 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
442 &#32;&#32;&#32;&#32;__valarray_copy(_Array&lt;_Tp&gt;&#32;__a,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n,&#32;_Array&lt;_Tp&gt;&#32;__b)
443 &#32;&#32;&#32;&#32;{&#32;std::__valarray_copy(__a._M_data,&#32;__n,&#32;__b._M_data);&#32;}
444 
445 &#32;&#32;<emphasis role="comment">//&#32;Copy&#32;strided&#32;array&#32;__a[&lt;__n&#32;:&#32;__s&gt;]&#32;in&#32;plain&#32;__b[&lt;__n&gt;]</emphasis>
446 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
447 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
448 &#32;&#32;&#32;&#32;__valarray_copy(_Array&lt;_Tp&gt;&#32;__a,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__s,&#32;_Array&lt;_Tp&gt;&#32;__b)
449 &#32;&#32;&#32;&#32;{&#32;std::__valarray_copy(__a._M_data,&#32;__n,&#32;__s,&#32;__b._M_data);&#32;}
450 
451 &#32;&#32;<emphasis role="comment">//&#32;Copy&#32;a&#32;plain&#32;array&#32;&#32;__a[&lt;__n&gt;]&#32;into&#32;a&#32;strided&#32;array&#32;__b[&lt;__n&#32;:&#32;__s&gt;]</emphasis>
452 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
453 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
454 &#32;&#32;&#32;&#32;__valarray_copy(_Array&lt;_Tp&gt;&#32;__a,&#32;_Array&lt;_Tp&gt;&#32;__b,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__s)
455 &#32;&#32;&#32;&#32;{&#32;__valarray_copy(__a._M_data,&#32;__b._M_data,&#32;__n,&#32;__s);&#32;}
456 
457 &#32;&#32;<emphasis role="comment">//&#32;Copy&#32;strided&#32;array&#32;__src[&lt;__n&#32;:&#32;__s1&gt;]&#32;into&#32;another</emphasis>
458 &#32;&#32;<emphasis role="comment">//&#32;strided&#32;array&#32;__dst[&lt;&#32;:&#32;__s2&gt;].&#32;&#32;Their&#32;sizes&#32;must&#32;match.</emphasis>
459 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
460 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
461 &#32;&#32;&#32;&#32;__valarray_copy(_Array&lt;_Tp&gt;&#32;__a,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__s1,
462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Array&lt;_Tp&gt;&#32;__b,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__s2)
463 &#32;&#32;&#32;&#32;{&#32;std::__valarray_copy(__a._M_data,&#32;__n,&#32;__s1,&#32;__b._M_data,&#32;__s2);&#32;}
464 
465 &#32;&#32;<emphasis role="comment">//&#32;Copy&#32;an&#32;indexed&#32;array&#32;__a[__i[&lt;__n&gt;]]&#32;in&#32;plain&#32;array&#32;__b[&lt;__n&gt;]</emphasis>
466 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
467 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
468 &#32;&#32;&#32;&#32;__valarray_copy(_Array&lt;_Tp&gt;&#32;__a,&#32;_Array&lt;size_t&gt;&#32;__i,
469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Array&lt;_Tp&gt;&#32;__b,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n)
470 &#32;&#32;&#32;&#32;{&#32;std::__valarray_copy(__a._M_data,&#32;__i._M_data,&#32;__b._M_data,&#32;__n);&#32;}
471 
472 &#32;&#32;<emphasis role="comment">//&#32;Copy&#32;a&#32;plain&#32;array&#32;__a[&lt;__n&gt;]&#32;in&#32;an&#32;indexed&#32;array&#32;__b[__i[&lt;__n&gt;]]</emphasis>
473 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
474 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
475 &#32;&#32;&#32;&#32;__valarray_copy(_Array&lt;_Tp&gt;&#32;__a,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n,&#32;_Array&lt;_Tp&gt;&#32;__b,
476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Array&lt;size_t&gt;&#32;__i)
477 &#32;&#32;&#32;&#32;{&#32;std::__valarray_copy(__a._M_data,&#32;__n,&#32;__b._M_data,&#32;__i._M_data);&#32;}
478 
479 &#32;&#32;<emphasis role="comment">//&#32;Copy&#32;the&#32;__n&#32;first&#32;elements&#32;of&#32;an&#32;indexed&#32;array&#32;__src[&lt;__i&gt;]&#32;into</emphasis>
480 &#32;&#32;<emphasis role="comment">//&#32;another&#32;indexed&#32;array&#32;__dst[&lt;__j&gt;].</emphasis>
481 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
482 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
483 &#32;&#32;&#32;&#32;__valarray_copy(_Array&lt;_Tp&gt;&#32;__src,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n,&#32;_Array&lt;size_t&gt;&#32;__i,
484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Array&lt;_Tp&gt;&#32;__dst,&#32;_Array&lt;size_t&gt;&#32;__j)
485 &#32;&#32;&#32;&#32;{
486 &#32;&#32;&#32;&#32;&#32;&#32;std::__valarray_copy(__src._M_data,&#32;__n,&#32;__i._M_data,
487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__dst._M_data,&#32;__j._M_data);
488 &#32;&#32;&#32;&#32;}
489 
490 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
491 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>
492 &#32;&#32;&#32;&#32;_Array&lt;_Tp&gt;::_Array(_Tp*&#32;<emphasis role="keyword">const</emphasis>&#32;__restrict__&#32;__p)
493 &#32;&#32;&#32;&#32;:&#32;_M_data&#32;(__p)&#32;{}
494 
495 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
496 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>
497 &#32;&#32;&#32;&#32;_Array&lt;_Tp&gt;::_Array(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;&#32;__v)
498 &#32;&#32;&#32;&#32;:&#32;_M_data&#32;(__v._M_data)&#32;{}
499 
500 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
501 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>
502 &#32;&#32;&#32;&#32;_Array&lt;_Tp&gt;::_Array(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__restrict__&#32;__b,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__s)
503 &#32;&#32;&#32;&#32;:&#32;_M_data(__valarray_get_storage&lt;_Tp&gt;(__s))
504 &#32;&#32;&#32;&#32;{&#32;std::__valarray_copy_construct(__b,&#32;__s,&#32;_M_data);&#32;}
505 
506 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
507 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_Tp*
508 &#32;&#32;&#32;&#32;_Array&lt;_Tp&gt;::begin&#32;()<emphasis role="keyword">&#32;const</emphasis>
509 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data;&#32;}
510 
511 <emphasis role="preprocessor">#define&#32;_DEFINE_ARRAY_FUNCTION(_Op,&#32;_Name)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
512 <emphasis role="preprocessor">&#32;&#32;template&lt;typename&#32;_Tp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
513 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;inline&#32;void&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
514 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_Array_augmented_##_Name(_Array&lt;_Tp&gt;&#32;__a,&#32;size_t&#32;__n,&#32;const&#32;_Tp&amp;&#32;__t)&#32;\</emphasis>
515 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
516 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;for&#32;(_Tp*&#32;__p&#32;=&#32;__a._M_data;&#32;__p&#32;&lt;&#32;__a._M_data&#32;+&#32;__n;&#32;++__p)&#32;&#32;\</emphasis>
517 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__p&#32;_Op##=&#32;__t;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
518 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
519 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
520 <emphasis role="preprocessor">&#32;&#32;template&lt;typename&#32;_Tp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
521 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;inline&#32;void&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
522 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_Array_augmented_##_Name(_Array&lt;_Tp&gt;&#32;__a,&#32;size_t&#32;__n,&#32;_Array&lt;_Tp&gt;&#32;__b)&#32;\</emphasis>
523 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
524 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;__p&#32;=&#32;__a._M_data;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
525 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;for&#32;(_Tp*&#32;__q&#32;=&#32;__b._M_data;&#32;__q&#32;&lt;&#32;__b._M_data&#32;+&#32;__n;&#32;++__p,&#32;++__q)&#32;\</emphasis>
526 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__p&#32;_Op##=&#32;*__q;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
527 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
528 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
529 <emphasis role="preprocessor">&#32;&#32;template&lt;typename&#32;_Tp,&#32;class&#32;_Dom&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
530 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;void&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
531 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_Array_augmented_##_Name(_Array&lt;_Tp&gt;&#32;__a,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
532 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;_Expr&lt;_Dom,&#32;_Tp&gt;&amp;&#32;__e,&#32;size_t&#32;__n)&#32;&#32;&#32;\</emphasis>
533 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
534 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;__p(__a._M_data);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
535 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;for&#32;(size_t&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__n;&#32;++__i,&#32;++__p)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
536 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__p&#32;_Op##=&#32;__e[__i];&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
537 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
538 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
539 <emphasis role="preprocessor">&#32;&#32;template&lt;typename&#32;_Tp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
540 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;inline&#32;void&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
541 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_Array_augmented_##_Name(_Array&lt;_Tp&gt;&#32;__a,&#32;size_t&#32;__n,&#32;size_t&#32;__s,&#32;&#32;&#32;\</emphasis>
542 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Array&lt;_Tp&gt;&#32;__b)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
543 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
544 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;__q(__b._M_data);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
545 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;for&#32;(_Tp*&#32;__p&#32;=&#32;__a._M_data;&#32;__p&#32;&lt;&#32;__a._M_data&#32;+&#32;__s&#32;*&#32;__n;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
546 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;__p&#32;+=&#32;__s,&#32;++__q)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
547 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__p&#32;_Op##=&#32;*__q;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
548 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
549 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
550 <emphasis role="preprocessor">&#32;&#32;template&lt;typename&#32;_Tp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
551 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;inline&#32;void&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
552 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_Array_augmented_##_Name(_Array&lt;_Tp&gt;&#32;__a,&#32;_Array&lt;_Tp&gt;&#32;__b,&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
553 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_t&#32;__n,&#32;size_t&#32;__s)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
554 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
555 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;__q(__b._M_data);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
556 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;for&#32;(_Tp*&#32;__p&#32;=&#32;__a._M_data;&#32;__p&#32;&lt;&#32;__a._M_data&#32;+&#32;__n;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
557 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__p,&#32;__q&#32;+=&#32;__s)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
558 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__p&#32;_Op##=&#32;*__q;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
559 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
560 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
561 <emphasis role="preprocessor">&#32;&#32;template&lt;typename&#32;_Tp,&#32;class&#32;_Dom&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
562 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;void&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
563 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_Array_augmented_##_Name(_Array&lt;_Tp&gt;&#32;__a,&#32;size_t&#32;__s,&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
564 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;_Expr&lt;_Dom,&#32;_Tp&gt;&amp;&#32;__e,&#32;size_t&#32;__n)&#32;&#32;&#32;\</emphasis>
565 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
566 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;__p(__a._M_data);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
567 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;for&#32;(size_t&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__n;&#32;++__i,&#32;__p&#32;+=&#32;__s)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
568 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__p&#32;_Op##=&#32;__e[__i];&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
569 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
570 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
571 <emphasis role="preprocessor">&#32;&#32;template&lt;typename&#32;_Tp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
572 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;inline&#32;void&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
573 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_Array_augmented_##_Name(_Array&lt;_Tp&gt;&#32;__a,&#32;_Array&lt;size_t&gt;&#32;__i,&#32;&#32;&#32;\</emphasis>
574 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Array&lt;_Tp&gt;&#32;__b,&#32;size_t&#32;__n)&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
575 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
576 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;__q(__b._M_data);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
577 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;for&#32;(size_t*&#32;__j&#32;=&#32;__i._M_data;&#32;__j&#32;&lt;&#32;__i._M_data&#32;+&#32;__n;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
578 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__j,&#32;++__q)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
579 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a._M_data[*__j]&#32;_Op##=&#32;*__q;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
580 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
581 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
582 <emphasis role="preprocessor">&#32;&#32;template&lt;typename&#32;_Tp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
583 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;inline&#32;void&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
584 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_Array_augmented_##_Name(_Array&lt;_Tp&gt;&#32;__a,&#32;size_t&#32;__n,&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
585 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Array&lt;_Tp&gt;&#32;__b,&#32;_Array&lt;size_t&gt;&#32;__i)&#32;&#32;&#32;\</emphasis>
586 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
587 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;__p(__a._M_data);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
588 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;for&#32;(size_t*&#32;__j&#32;=&#32;__i._M_data;&#32;__j&lt;__i._M_data&#32;+&#32;__n;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
589 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__j,&#32;++__p)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
590 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__p&#32;_Op##=&#32;__b._M_data[*__j];&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
591 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
592 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
593 <emphasis role="preprocessor">&#32;&#32;template&lt;typename&#32;_Tp,&#32;class&#32;_Dom&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
594 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;void&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
595 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_Array_augmented_##_Name(_Array&lt;_Tp&gt;&#32;__a,&#32;_Array&lt;size_t&gt;&#32;__i,&#32;&#32;&#32;\</emphasis>
596 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;_Expr&lt;_Dom,&#32;_Tp&gt;&amp;&#32;__e,&#32;size_t&#32;__n)&#32;&#32;&#32;\</emphasis>
597 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
598 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;size_t*&#32;__j(__i._M_data);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
599 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;for&#32;(size_t&#32;__k&#32;=&#32;0;&#32;__k&lt;__n;&#32;++__k,&#32;++__j)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
600 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a._M_data[*__j]&#32;_Op##=&#32;__e[__k];&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
601 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
602 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
603 <emphasis role="preprocessor">&#32;&#32;template&lt;typename&#32;_Tp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
604 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;void&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
605 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_Array_augmented_##_Name(_Array&lt;_Tp&gt;&#32;__a,&#32;_Array&lt;bool&gt;&#32;__m,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
606 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Array&lt;_Tp&gt;&#32;__b,&#32;size_t&#32;__n)&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
607 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
608 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;bool*&#32;__ok(__m._M_data);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
609 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;__p(__a._M_data);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
610 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;for&#32;(_Tp*&#32;__q&#32;=&#32;__b._M_data;&#32;__q&#32;&lt;&#32;__b._M_data&#32;+&#32;__n;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
611 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__q,&#32;++__ok,&#32;++__p)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
612 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
613 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;while&#32;(!&#32;*__ok)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
614 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
615 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__ok;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
616 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__p;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
617 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
618 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__p&#32;_Op##=&#32;*__q;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
619 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
620 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
621 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
622 <emphasis role="preprocessor">&#32;&#32;template&lt;typename&#32;_Tp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
623 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;void&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
624 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_Array_augmented_##_Name(_Array&lt;_Tp&gt;&#32;__a,&#32;size_t&#32;__n,&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
625 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Array&lt;_Tp&gt;&#32;__b,&#32;_Array&lt;bool&gt;&#32;__m)&#32;&#32;&#32;&#32;&#32;\</emphasis>
626 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
627 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;bool*&#32;__ok(__m._M_data);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
628 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;__q(__b._M_data);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
629 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;for&#32;(_Tp*&#32;__p&#32;=&#32;__a._M_data;&#32;__p&#32;&lt;&#32;__a._M_data&#32;+&#32;__n;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
630 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__p,&#32;++__ok,&#32;++__q)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
631 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
632 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;while&#32;(!&#32;*__ok)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
633 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
634 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__ok;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
635 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__q;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
636 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
637 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__p&#32;_Op##=&#32;*__q;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
638 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
639 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
640 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
641 <emphasis role="preprocessor">&#32;&#32;template&lt;typename&#32;_Tp,&#32;class&#32;_Dom&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
642 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;void&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
643 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_Array_augmented_##_Name(_Array&lt;_Tp&gt;&#32;__a,&#32;_Array&lt;bool&gt;&#32;__m,&#32;&#32;&#32;&#32;&#32;\</emphasis>
644 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;_Expr&lt;_Dom,&#32;_Tp&gt;&amp;&#32;__e,&#32;size_t&#32;__n)&#32;&#32;&#32;\</emphasis>
645 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
646 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;bool*&#32;__ok(__m._M_data);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
647 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;__p(__a._M_data);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
648 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;for&#32;(size_t&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__n;&#32;++__i,&#32;++__ok,&#32;++__p)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
649 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
650 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;while&#32;(!&#32;*__ok)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
651 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
652 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__ok;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
653 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__p;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
654 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
655 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__p&#32;_Op##=&#32;__e[__i];&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
656 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
657 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}</emphasis>
658 
659 &#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2valarray__array_8h_1a1b2375a3dfeb32e0020d35c42b021b24">_DEFINE_ARRAY_FUNCTION</link>(+,&#32;__plus)
660 &#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2valarray__array_8h_1a1b2375a3dfeb32e0020d35c42b021b24">_DEFINE_ARRAY_FUNCTION</link>(-,&#32;__minus)
661 &#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2valarray__array_8h_1a1b2375a3dfeb32e0020d35c42b021b24">_DEFINE_ARRAY_FUNCTION</link>(*,&#32;__multiplies)
662 &#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2valarray__array_8h_1a1b2375a3dfeb32e0020d35c42b021b24">_DEFINE_ARRAY_FUNCTION</link>(/,&#32;__divides)
663 &#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2valarray__array_8h_1a1b2375a3dfeb32e0020d35c42b021b24">_DEFINE_ARRAY_FUNCTION</link>(%,&#32;__modulus)
664 &#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2valarray__array_8h_1a1b2375a3dfeb32e0020d35c42b021b24">_DEFINE_ARRAY_FUNCTION</link>(^,&#32;__bitwise_xor)
665 &#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2valarray__array_8h_1a1b2375a3dfeb32e0020d35c42b021b24">_DEFINE_ARRAY_FUNCTION</link>(|,&#32;__bitwise_or)
666 &#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2valarray__array_8h_1a1b2375a3dfeb32e0020d35c42b021b24">_DEFINE_ARRAY_FUNCTION</link>(&amp;,&#32;__bitwise_and)
667 &#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2valarray__array_8h_1a1b2375a3dfeb32e0020d35c42b021b24">_DEFINE_ARRAY_FUNCTION</link>(&lt;&lt;,&#32;__shift_left)
668 &#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2valarray__array_8h_1a1b2375a3dfeb32e0020d35c42b021b24">_DEFINE_ARRAY_FUNCTION</link>(&gt;&gt;,&#32;__shift_right)
669 
670 <emphasis role="preprocessor">#undef&#32;_DEFINE_ARRAY_FUNCTION</emphasis>
671 
672 _GLIBCXX_END_NAMESPACE_VERSION
673 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
674 
675 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/valarray_array.tcc&gt;</emphasis>
676 
677 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_ARRAY_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
