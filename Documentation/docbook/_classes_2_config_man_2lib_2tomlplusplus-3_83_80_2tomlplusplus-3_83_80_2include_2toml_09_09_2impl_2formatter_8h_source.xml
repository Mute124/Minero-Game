<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2_config_man_2lib_2tomlplusplus-3_83_80_2tomlplusplus-3_83_80_2include_2toml_09_09_2impl_2formatter_8h_source" xml:lang="en-US">
<title>formatter.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/include/toml++/impl/formatter.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//#&#32;This&#32;file&#32;is&#32;a&#32;part&#32;of&#32;toml++&#32;and&#32;is&#32;subject&#32;to&#32;the&#32;the&#32;terms&#32;of&#32;the&#32;MIT&#32;license.</emphasis>
2 <emphasis role="comment">//#&#32;Copyright&#32;(c)&#32;Mark&#32;Gillard&#32;&lt;mark.gillard@outlook.com.au&gt;</emphasis>
3 <emphasis role="comment">//#&#32;See&#32;https://github.com/marzer/tomlplusplus/blob/master/LICENSE&#32;for&#32;the&#32;full&#32;license&#32;text.</emphasis>
4 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;MIT</emphasis>
5 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
6 
7 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_preprocessor_8h">preprocessor.h</link>&quot;</emphasis>
8 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_FORMATTERS</emphasis>
9 
10 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_forward__declarations_8h">forward_declarations.h</link>&quot;</emphasis>
11 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_print__to__stream_8h">print_to_stream.h</link>&quot;</emphasis>
12 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_header__start_8h">header_start.h</link>&quot;</emphasis>
14 
15 <link linkend="_preprocessor_8h_1ac9e12bb017879603274ac1765b85b872">TOML_IMPL_NAMESPACE_START</link>
16 {
17 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>formatter_constants
18 &#32;&#32;&#32;&#32;{
19 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ac3bcacae523bb832111f5195c46d68f4">format_flags</link>&#32;mandatory_flags;
20 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ac3bcacae523bb832111f5195c46d68f4">format_flags</link>&#32;ignored_flags;
21 
22 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string_view&#32;float_pos_inf;
23 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string_view&#32;float_neg_inf;
24 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string_view&#32;float_nan;
25 
26 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string_view&#32;bool_true;
27 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string_view&#32;bool_false;
28 &#32;&#32;&#32;&#32;};
29 
30 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structformatter__config">formatter_config</link>
31 &#32;&#32;&#32;&#32;{
32 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac3bcacae523bb832111f5195c46d68f4">format_flags</link>&#32;<link linkend="_structformatter__config_1a2eeb91ebfb3aebb5f3fb12c66ed4b3ea">flags</link>;
33 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string_view&#32;<link linkend="_structformatter__config_1a1a2ae49c7de03d0014d24e9397455733">indent</link>;
34 &#32;&#32;&#32;&#32;};
35 
36 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_group__configuration_1ga3d7aebf91431575688d573f09a17559a">TOML_EXPORTED_CLASS</link>&#32;<link linkend="_classformatter">formatter</link>
37 &#32;&#32;&#32;&#32;{
38 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
39 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;node*&#32;source_;
40 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_PARSER&#32;&amp;&amp;&#32;!TOML_EXCEPTIONS</emphasis>
41 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classparse__result">parse_result</link>*&#32;result_;
42 <emphasis role="preprocessor">#endif</emphasis>
43 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;formatter_constants*&#32;constants_;
44 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structformatter__config">formatter_config</link>&#32;config_;
45 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;indent_columns_;
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ac3bcacae523bb832111f5195c46d68f4">format_flags</link>&#32;int_format_mask_;
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ostream*&#32;stream_;&#32;<emphasis role="comment">//</emphasis>
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;indent_;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;these&#32;are&#32;set&#32;in&#32;attach()</emphasis>
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;naked_newline_;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
50 
51 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
53 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;node&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>()&#32;const&#32;noexcept
54 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*source_;
56 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
57 
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ostream&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>()&#32;const&#32;noexcept
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*stream_;
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
63 
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;indent()&#32;const&#32;noexcept
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;indent_;
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
69 
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;indent(<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a2424d012241ecec8ab2763eddf543736">level</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indent_&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a2424d012241ecec8ab2763eddf543736">level</link>;
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
74 
75 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;increase_indent()&#32;noexcept
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indent_++;
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
79 
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;decrease_indent()&#32;noexcept
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indent_--;
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
84 
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;indent_columns()&#32;const&#32;noexcept
87 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;indent_columns_;
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
90 
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1af3a33663e90d253686912eba69982c35">indent_array_elements</link>()&#32;const&#32;noexcept
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!!(config_.<link linkend="_structformatter__config_1a2eeb91ebfb3aebb5f3fb12c66ed4b3ea">flags</link>&#32;&amp;&#32;format_flags::indent_array_elements);
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
96 
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1ae225507e97029b1deaa6b3c2fb8634ea">indent_sub_tables</link>()&#32;const&#32;noexcept
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!!(config_.<link linkend="_structformatter__config_1a2eeb91ebfb3aebb5f3fb12c66ed4b3ea">flags</link>&#32;&amp;&#32;format_flags::indent_sub_tables);
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
102 
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;literal_strings_allowed()&#32;const&#32;noexcept
105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!!(config_.<link linkend="_structformatter__config_1a2eeb91ebfb3aebb5f3fb12c66ed4b3ea">flags</link>&#32;&amp;&#32;format_flags::allow_literal_strings);
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
108 
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;multi_line_strings_allowed()&#32;const&#32;noexcept
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!!(config_.<link linkend="_structformatter__config_1a2eeb91ebfb3aebb5f3fb12c66ed4b3ea">flags</link>&#32;&amp;&#32;format_flags::allow_multi_line_strings);
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
114 
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;real_tabs_in_strings_allowed()&#32;const&#32;noexcept
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!!(config_.<link linkend="_structformatter__config_1a2eeb91ebfb3aebb5f3fb12c66ed4b3ea">flags</link>&#32;&amp;&#32;format_flags::allow_real_tabs_in_strings);
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
120 
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;unicode_strings_allowed()&#32;const&#32;noexcept
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!!(config_.<link linkend="_structformatter__config_1a2eeb91ebfb3aebb5f3fb12c66ed4b3ea">flags</link>&#32;&amp;&#32;format_flags::allow_unicode_strings);
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
126 
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;terse_kvps()&#32;const&#32;noexcept
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!!(config_.<link linkend="_structformatter__config_1a2eeb91ebfb3aebb5f3fb12c66ed4b3ea">flags</link>&#32;&amp;&#32;format_flags::terse_key_value_pairs);
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
132 
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;attach(std::ostream&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>)&#32;<emphasis role="keyword">noexcept</emphasis>;
135 
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;detach()&#32;noexcept;
138 
139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;print_newline(<emphasis role="keywordtype">bool</emphasis>&#32;force&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>);
141 
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;print_indent();
144 
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;print_unformatted(<emphasis role="keywordtype">char</emphasis>);
147 
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;print_unformatted(<link linkend="_namespacestd">std</link>::string_view);
150 
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;print_string(<link linkend="_namespacestd">std</link>::string_view&#32;str,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;allow_multi_line&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;allow_bare&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>);
153 
154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2gtx_2gtx__type__aligned_8cpp_1a5df63d15d7c51355174224d9d0c6518a">print</link>(const&#32;<link linkend="_classvalue">value</link>&lt;<link linkend="_namespacestd">std</link>::<emphasis role="keywordtype">string</emphasis>&gt;&amp;);
156 
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2gtx_2gtx__type__aligned_8cpp_1a5df63d15d7c51355174224d9d0c6518a">print</link>(const&#32;<link linkend="_classvalue">value</link>&lt;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>&gt;&amp;);
159 
160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2gtx_2gtx__type__aligned_8cpp_1a5df63d15d7c51355174224d9d0c6518a">print</link>(const&#32;<link linkend="_classvalue">value</link>&lt;<emphasis role="keywordtype">double</emphasis>&gt;&amp;);
162 
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2gtx_2gtx__type__aligned_8cpp_1a5df63d15d7c51355174224d9d0c6518a">print</link>(const&#32;<link linkend="_classvalue">value</link>&lt;<emphasis role="keywordtype">bool</emphasis>&gt;&amp;);
165 
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2gtx_2gtx__type__aligned_8cpp_1a5df63d15d7c51355174224d9d0c6518a">print</link>(const&#32;<link linkend="_classvalue">value</link>&lt;date&gt;&amp;);
168 
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2gtx_2gtx__type__aligned_8cpp_1a5df63d15d7c51355174224d9d0c6518a">print</link>(const&#32;<link linkend="_classvalue">value</link>&lt;<link linkend="_structtime">time</link>&gt;&amp;);
171 
172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2gtx_2gtx__type__aligned_8cpp_1a5df63d15d7c51355174224d9d0c6518a">print</link>(const&#32;<link linkend="_classvalue">value</link>&lt;<link linkend="_structdate__time">date_time</link>&gt;&amp;);
174 
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2gtc_2gtc__packing_8cpp_1a57a79a4ef71048df91475bed8ba43e2b">print_value</link>(const&#32;node&amp;,&#32;node_type);
177 
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;dump_failed_parse_result();
181 
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter">formatter</link>(const&#32;node*,&#32;const&#32;<link linkend="_classparse__result">parse_result</link>*,&#32;const&#32;formatter_constants&amp;,&#32;const&#32;<link linkend="_structformatter__config">formatter_config</link>&amp;)&#32;noexcept;
185 &#32;&#32;&#32;&#32;};
186 }
187 <link linkend="_preprocessor_8h_1abec69dd25f1e4c1dfbdd288441864939">TOML_IMPL_NAMESPACE_END</link>;
188 
190 <emphasis role="preprocessor">#include&#32;&quot;header_end.h&quot;</emphasis>
191 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_FORMATTERS</emphasis>
</programlisting></section>
