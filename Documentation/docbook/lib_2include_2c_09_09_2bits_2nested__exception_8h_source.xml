<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2bits_2nested__exception_8h_source" xml:lang="en-US">
<title>nested_exception.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/bits/nested_exception.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Nested&#32;Exception&#32;support&#32;header&#32;(nested_exception&#32;class)&#32;for&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2009-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_NESTED_EXCEPTION_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_GLIBCXX_NESTED_EXCEPTION_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#pragma&#32;GCC&#32;visibility&#32;push(default)</emphasis>
34 
35 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
36 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/c++0x_warning.h&gt;</emphasis>
37 <emphasis role="preprocessor">#else</emphasis>
38 
39 <emphasis role="preprocessor">#include&#32;&lt;bits/c++config.h&gt;</emphasis>
40 <emphasis role="preprocessor">#include&#32;&lt;bits/move.h&gt;</emphasis>
41 
42 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="stringliteral">&quot;C++&quot;</emphasis>&#32;{
43 
44 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>
45 {
52 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>nested_exception
53 &#32;&#32;{
54 &#32;&#32;&#32;&#32;exception_ptr&#32;_M_ptr;
55 
56 &#32;&#32;<emphasis role="keyword">public</emphasis>:
57 &#32;&#32;&#32;&#32;nested_exception()&#32;noexcept&#32;:&#32;_M_ptr(current_exception())&#32;{&#32;}
58 
59 &#32;&#32;&#32;&#32;nested_exception(<emphasis role="keyword">const</emphasis>&#32;nested_exception&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
60 
61 &#32;&#32;&#32;&#32;nested_exception&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;nested_exception&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
62 
63 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;~nested_exception()&#32;noexcept;
64 
65 &#32;&#32;&#32;&#32;[[<link linkend="__classes_2lib_2include_2stdnoreturn_8h_1a4a453f3a748e55cbdac6fcc79357cfef">noreturn</link>]]
66 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
67 &#32;&#32;&#32;&#32;rethrow_nested()<emphasis role="keyword">&#32;const</emphasis>
68 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
69 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_ptr)
70 &#32;&#32;&#32;&#32;<link linkend="_group__exceptions_1ga64d0b68338d7edbfd7d95f4177dbc442">rethrow_exception</link>(_M_ptr);
71 &#32;&#32;&#32;&#32;&#32;&#32;std::terminate();
72 &#32;&#32;&#32;&#32;}
73 
74 &#32;&#32;&#32;&#32;exception_ptr
75 &#32;&#32;&#32;&#32;nested_ptr()&#32;const&#32;noexcept
76 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_ptr;&#32;}
77 &#32;&#32;};
78 
80 
81 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Except&gt;
82 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Nested_exception&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Except,&#32;<emphasis role="keyword">public</emphasis>&#32;nested_exception
83 &#32;&#32;&#32;&#32;{
84 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;_Nested_exception(<emphasis role="keyword">const</emphasis>&#32;_Except&amp;&#32;__ex)
85 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Except(__ex)
86 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
87 
88 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;_Nested_exception(_Except&amp;&amp;&#32;__ex)
89 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Except(static_cast&lt;_Except&amp;&amp;&gt;(__ex))
90 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
91 &#32;&#32;&#32;&#32;};
92 
93 &#32;&#32;<emphasis role="comment">//&#32;[except.nested]/8</emphasis>
94 &#32;&#32;<emphasis role="comment">//&#32;Throw&#32;an&#32;exception&#32;of&#32;unspecified&#32;type&#32;that&#32;is&#32;publicly&#32;derived&#32;from</emphasis>
95 &#32;&#32;<emphasis role="comment">//&#32;both&#32;remove_reference_t&lt;_Tp&gt;&#32;and&#32;nested_exception.</emphasis>
96 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
97 &#32;&#32;&#32;&#32;[[<link linkend="__classes_2lib_2include_2stdnoreturn_8h_1a4a453f3a748e55cbdac6fcc79357cfef">noreturn</link>]]
98 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
99 &#32;&#32;&#32;&#32;__throw_with_nested_impl(_Tp&amp;&amp;&#32;__t,&#32;true_type)
100 &#32;&#32;&#32;&#32;{
101 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Up&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;remove_reference&lt;_Tp&gt;::type;
102 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;_Nested_exception&lt;_Up&gt;{std::forward&lt;_Tp&gt;(__t)};
103 &#32;&#32;&#32;&#32;}
104 
105 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
106 &#32;&#32;&#32;&#32;[[<link linkend="__classes_2lib_2include_2stdnoreturn_8h_1a4a453f3a748e55cbdac6fcc79357cfef">noreturn</link>]]
107 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
108 &#32;&#32;&#32;&#32;__throw_with_nested_impl(_Tp&amp;&amp;&#32;__t,&#32;false_type)
109 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::forward&lt;_Tp&gt;(__t);&#32;}
110 
112 
115 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
116 &#32;&#32;&#32;&#32;[[<link linkend="__classes_2lib_2include_2stdnoreturn_8h_1a4a453f3a748e55cbdac6fcc79357cfef">noreturn</link>]]
117 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
118 &#32;&#32;&#32;&#32;throw_with_nested(_Tp&amp;&amp;&#32;__t)
119 &#32;&#32;&#32;&#32;{
120 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Up&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;decay&lt;_Tp&gt;::type;
121 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_CopyConstructible
122 &#32;&#32;&#32;&#32;=&#32;__and_&lt;is_copy_constructible&lt;_Up&gt;,&#32;is_move_constructible&lt;_Up&gt;&gt;;
123 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_CopyConstructible::value,
124 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;throw_with_nested&#32;argument&#32;must&#32;be&#32;CopyConstructible&quot;</emphasis>);
125 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__nest&#32;=&#32;__and_&lt;is_class&lt;_Up&gt;,&#32;__bool_constant&lt;!__is_final(_Up)&gt;,
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__not_&lt;is_base_of&lt;nested_exception,&#32;_Up&gt;&gt;&gt;;
127 &#32;&#32;&#32;&#32;&#32;&#32;std::__throw_with_nested_impl(std::forward&lt;_Tp&gt;(__t),&#32;__nest{});
128 &#32;&#32;&#32;&#32;}
129 
131 
132 &#32;&#32;<emphasis role="comment">//&#32;Determine&#32;if&#32;dynamic_cast&lt;const&#32;nested_exception&amp;&gt;&#32;would&#32;be&#32;well-formed.</emphasis>
133 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
134 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__rethrow_if_nested_cond&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;enable_if&lt;
135 &#32;&#32;&#32;&#32;&#32;&#32;__and_&lt;is_polymorphic&lt;_Tp&gt;,
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__or_&lt;__not_&lt;is_base_of&lt;nested_exception,&#32;_Tp&gt;&gt;,
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_convertible&lt;_Tp*,&#32;nested_exception*&gt;&gt;&gt;<link linkend="_classvalue">::value</link>
138 &#32;&#32;&#32;&#32;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
139 
140 &#32;&#32;<emphasis role="comment">//&#32;Attempt&#32;dynamic_cast&#32;to&#32;nested_exception&#32;and&#32;call&#32;rethrow_nested().</emphasis>
141 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ex&gt;
142 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;__rethrow_if_nested_cond&lt;_Ex&gt;
143 &#32;&#32;&#32;&#32;__rethrow_if_nested_impl(<emphasis role="keyword">const</emphasis>&#32;_Ex*&#32;__ptr)
144 &#32;&#32;&#32;&#32;{
145 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;__ne_ptr&#32;=&#32;<emphasis role="keyword">dynamic_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>nested_exception*<emphasis role="keyword">&gt;</emphasis>(__ptr))
146 &#32;&#32;&#32;&#32;__ne_ptr-&gt;rethrow_nested();
147 &#32;&#32;&#32;&#32;}
148 
149 &#32;&#32;<emphasis role="comment">//&#32;Otherwise,&#32;no&#32;effects.</emphasis>
150 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
151 &#32;&#32;__rethrow_if_nested_impl(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*)
152 &#32;&#32;{&#32;}
153 
155 
157 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ex&gt;
158 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
159 &#32;&#32;&#32;&#32;rethrow_if_nested(<emphasis role="keyword">const</emphasis>&#32;_Ex&amp;&#32;__ex)
160 &#32;&#32;&#32;&#32;{&#32;std::__rethrow_if_nested_impl(std::__addressof(__ex));&#32;}
161 
163 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
164 
165 }&#32;<emphasis role="comment">//&#32;extern&#32;&quot;C++&quot;</emphasis>
166 
167 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
168 
169 <emphasis role="preprocessor">#pragma&#32;GCC&#32;visibility&#32;pop</emphasis>
170 
171 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_NESTED_EXCEPTION_H</emphasis>
</programlisting></section>
