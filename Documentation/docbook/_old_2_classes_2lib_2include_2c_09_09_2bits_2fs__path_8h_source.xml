<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2bits_2fs__path_8h_source" xml:lang="en-US">
<title>fs_path.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/bits/fs_path.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Class&#32;filesystem::path&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2014-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_FS_PATH_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_GLIBCXX_FS_PATH_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
34 
35 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>
36 <emphasis role="preprocessor">#include&#32;&lt;locale&gt;</emphasis>
37 <emphasis role="preprocessor">#include&#32;&lt;iosfwd&gt;</emphasis>
38 <emphasis role="preprocessor">#include&#32;&lt;iomanip&gt;</emphasis>
39 <emphasis role="preprocessor">#include&#32;&lt;codecvt&gt;</emphasis>
40 <emphasis role="preprocessor">#include&#32;&lt;string_view&gt;</emphasis>
41 <emphasis role="preprocessor">#include&#32;&lt;system_error&gt;</emphasis>
42 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_algobase.h&gt;</emphasis>
43 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_pair.h&gt;</emphasis>
44 <emphasis role="preprocessor">#include&#32;&lt;bits/locale_conv.h&gt;</emphasis>
45 <emphasis role="preprocessor">#include&#32;&lt;ext/concurrence.h&gt;</emphasis>
46 <emphasis role="preprocessor">#include&#32;&lt;bits/shared_ptr.h&gt;</emphasis>
47 <emphasis role="preprocessor">#include&#32;&lt;bits/unique_ptr.h&gt;</emphasis>
48 
49 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
50 <emphasis role="preprocessor">#&#32;include&#32;&lt;compare&gt;</emphasis>
51 <emphasis role="preprocessor">#endif</emphasis>
52 
53 <emphasis role="preprocessor">#if&#32;defined(_WIN32)&#32;&amp;&amp;&#32;!defined(__CYGWIN__)</emphasis>
54 <emphasis role="preprocessor">#&#32;define&#32;_GLIBCXX_FILESYSTEM_IS_WINDOWS&#32;1</emphasis>
55 <emphasis role="preprocessor">#endif</emphasis>
56 
57 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
58 {
59 _GLIBCXX_BEGIN_NAMESPACE_VERSION
60 
61 <emphasis role="keyword">namespace&#32;</emphasis>filesystem
62 {
63 _GLIBCXX_BEGIN_NAMESPACE_CXX11
64 
65 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classpath">path</link>;
66 
68 <emphasis role="keyword">namespace&#32;</emphasis>__detail
69 {
72 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
73 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_encoded_char&#32;=&#32;<emphasis role="keyword">false</emphasis>;
74 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
75 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_encoded_char&lt;char&gt;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
76 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_CHAR8_T</emphasis>
77 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
78 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_encoded_char&lt;char8_t&gt;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
79 <emphasis role="preprocessor">#endif</emphasis>
80 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_WCHAR_T</emphasis>
81 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
82 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_encoded_char&lt;wchar_t&gt;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
83 <emphasis role="preprocessor">#endif</emphasis>
84 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
85 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_encoded_char&lt;char16_t&gt;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
86 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
87 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_encoded_char&lt;char32_t&gt;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
88 
89 <emphasis role="preprocessor">#if&#32;__cpp_concepts&#32;&gt;=&#32;201907L</emphasis>
90 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
91 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__safe_iterator_traits&#32;=&#32;std::iterator_traits&lt;_Iter&gt;;
92 <emphasis role="preprocessor">#else</emphasis>
93 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
94 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__safe_iterator_traits&#32;:&#32;std::iterator_traits&lt;_Iter&gt;
95 &#32;&#32;&#32;&#32;{&#32;};
96 
97 &#32;&#32;<emphasis role="comment">//&#32;Protect&#32;against&#32;ill-formed&#32;iterator_traits&#32;specializations&#32;in&#32;C++17</emphasis>
98 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>__safe_iterator_traits&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>*&gt;&#32;{&#32;};
99 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>__safe_iterator_traits&lt;const&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>*&gt;&#32;{&#32;};
100 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>__safe_iterator_traits&lt;volatile&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>*&gt;&#32;{&#32;};
101 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>__safe_iterator_traits&lt;const&#32;volatile&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>*&gt;&#32;{&#32;};
102 <emphasis role="preprocessor">#endif</emphasis>
103 
104 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter_traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
105 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_path_iter_src
106 &#32;&#32;&#32;&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a05db727ae5396f8d8518969cd59fff55">false_type</link>
107 &#32;&#32;&#32;&#32;{&#32;};
108 
109 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter_traits&gt;
110 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_path_iter_src&lt;_Iter_traits,
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a92a167c49c6697b6ffe4f79492c705e5">void_t</link>&lt;typename&#32;_Iter_traits::value_type&gt;&gt;
112 &#32;&#32;&#32;&#32;:&#32;bool_constant&lt;__is_encoded_char&lt;typename&#32;_Iter_traits::value_type&gt;&gt;
113 &#32;&#32;&#32;&#32;{&#32;};
114 
115 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Source&gt;
116 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_path_src
117 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__is_path_iter_src&lt;iterator_traits&lt;decay_t&lt;_Source&gt;&gt;&gt;<link linkend="_classvalue">::value</link>;
118 
119 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
120 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_path_src&lt;path&gt;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
121 
122 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
123 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_path_src&lt;volatile&#32;path&gt;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
124 
125 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
126 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_path_src&lt;void*&gt;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
127 
128 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
129 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_path_src&lt;const&#32;void*&gt;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
130 
131 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
132 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_path_src&lt;volatile&#32;void*&gt;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
133 
134 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
135 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_path_src&lt;const&#32;volatile&#32;void*&gt;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
136 
137 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
138 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
139 &#32;&#32;&#32;&#32;&#32;&#32;__is_path_src&lt;basic_string&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;&gt;
140 &#32;&#32;&#32;&#32;=&#32;__is_encoded_char&lt;_CharT&gt;;
141 
142 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
143 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
144 &#32;&#32;&#32;&#32;&#32;&#32;__is_path_src&lt;basic_string_view&lt;_CharT,&#32;_Traits&gt;&gt;
145 &#32;&#32;&#32;&#32;=&#32;__is_encoded_char&lt;_CharT&gt;;
146 
147 &#32;&#32;<emphasis role="comment">//&#32;SFINAE&#32;constraint&#32;for&#32;Source&#32;parameters&#32;as&#32;required&#32;by&#32;[fs.path.req].</emphasis>
148 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
149 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Path&#32;=&#32;enable_if_t&lt;__is_path_src&lt;_Tp&gt;,&#32;<link linkend="_classpath">path</link>&gt;;
150 
151 &#32;&#32;<emphasis role="comment">//&#32;SFINAE&#32;constraint&#32;for&#32;InputIterator&#32;parameters&#32;as&#32;required&#32;by&#32;[fs.req].</emphasis>
152 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tr&#32;=&#32;__safe_iterator_traits&lt;_Iter&gt;&gt;
153 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Path2&#32;=&#32;enable_if_t&lt;__is_path_iter_src&lt;_Tr&gt;::value,&#32;<link linkend="_classpath">path</link>&gt;;
154 
155 <emphasis role="preprocessor">#if&#32;__cpp_lib_concepts</emphasis>
156 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
157 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_contiguous&#32;=&#32;std::contiguous_iterator&lt;_Iter&gt;;
158 <emphasis role="preprocessor">#else</emphasis>
159 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
160 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_contiguous&#32;=&#32;<emphasis role="keyword">false</emphasis>;
161 <emphasis role="preprocessor">#endif</emphasis>
162 
163 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
164 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_contiguous&lt;_Tp*&gt;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
165 
166 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Seq&gt;
167 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
168 &#32;&#32;&#32;&#32;__is_contiguous&lt;__gnu_cxx::__normal_iterator&lt;_Tp*,&#32;_Seq&gt;&gt;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
169 
170 <emphasis role="preprocessor">#if&#32;!defined&#32;_GLIBCXX_FILESYSTEM_IS_WINDOWS&#32;&amp;&amp;&#32;defined&#32;_GLIBCXX_USE_CHAR8_T</emphasis>
171 &#32;&#32;<emphasis role="comment">//&#32;For&#32;POSIX&#32;treat&#32;char8_t&#32;sequences&#32;as&#32;char&#32;without&#32;encoding&#32;conversions.</emphasis>
172 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_E<emphasis role="keywordtype">char</emphasis>T&gt;
173 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__unified_u8_t
174 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__conditional_t&lt;is_same_v&lt;_EcharT,&#32;char8_t&gt;,&#32;char,&#32;_EcharT&gt;;
175 <emphasis role="preprocessor">#else</emphasis>
176 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_E<emphasis role="keywordtype">char</emphasis>T&gt;
177 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__unified_u8_t&#32;=&#32;_EcharT;
178 <emphasis role="preprocessor">#endif</emphasis>
179 
180 &#32;&#32;<emphasis role="comment">//&#32;The&#32;__effective_range&#32;overloads&#32;convert&#32;a&#32;Source&#32;parameter&#32;into</emphasis>
181 &#32;&#32;<emphasis role="comment">//&#32;either&#32;a&#32;basic_string_view&lt;C&gt;&#32;or&#32;basic_string&lt;C&gt;&#32;containing&#32;the</emphasis>
182 &#32;&#32;<emphasis role="comment">//&#32;effective&#32;range&#32;of&#32;the&#32;Source,&#32;as&#32;defined&#32;in&#32;[fs.path.req].</emphasis>
183 
184 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
185 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;basic_string_view&lt;_CharT&gt;
186 &#32;&#32;&#32;&#32;__effective_range(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__source)
187 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>
188 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__source;&#32;}
189 
190 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
191 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;basic_string_view&lt;_CharT&gt;
192 &#32;&#32;&#32;&#32;__effective_range(<emphasis role="keyword">const</emphasis>&#32;basic_string_view&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__source)
193 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>
194 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__source;&#32;}
195 
196 &#32;&#32;<emphasis role="comment">//&#32;Return&#32;the&#32;effective&#32;range&#32;of&#32;an&#32;NTCTS.</emphasis>
197 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Source&gt;
198 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
199 &#32;&#32;&#32;&#32;__effective_range(<emphasis role="keyword">const</emphasis>&#32;_Source&amp;&#32;__source)
200 &#32;&#32;&#32;&#32;{
201 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Remove&#32;a&#32;level&#32;of&#32;normal/safe&#32;iterator&#32;indirection,&#32;or&#32;decay&#32;an&#32;array.</emphasis>
202 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Iter&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(std::__niter_base(__source));
203 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_Iter&gt;::value_type;
204 
205 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_contiguous&lt;_Iter&gt;)
206 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;basic_string_view&lt;value_type&gt;{&amp;*__source};
207 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
208 &#32;&#32;&#32;&#32;{
209 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_Source&#32;is&#32;an&#32;input&#32;iterator&#32;that&#32;iterates&#32;over&#32;an&#32;NTCTS.</emphasis>
210 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;a&#32;basic_string&#32;by&#32;reading&#32;until&#32;the&#32;null&#32;character.</emphasis>
211 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;__unified_u8_t&lt;value_type&gt;</link>&gt;&#32;__str;
212 &#32;&#32;&#32;&#32;&#32;&#32;_Source&#32;__it&#32;=&#32;__source;
213 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(value_type&#32;__ch&#32;=&#32;*__it;&#32;__ch&#32;!=&#32;value_type();&#32;__ch&#32;=&#32;*++__it)
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__str.push_back(__ch);
215 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__str;
216 &#32;&#32;&#32;&#32;}
217 &#32;&#32;&#32;&#32;}
218 
219 &#32;&#32;<emphasis role="comment">//&#32;The&#32;value&#32;type&#32;of&#32;a&#32;Source&#32;parameter&apos;s&#32;effective&#32;range.</emphasis>
220 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Source&gt;
221 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__source_value_type_impl
222 &#32;&#32;&#32;&#32;{
223 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>
224 &#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__safe_iterator_traits&lt;decay_t&lt;_Source&gt;&gt;::value_type;
225 &#32;&#32;&#32;&#32;};
226 
227 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
228 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__source_value_type_impl&lt;<link linkend="_classbasic__string">basic_string</link>&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;&gt;
229 &#32;&#32;&#32;&#32;{
230 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;_CharT;
231 &#32;&#32;&#32;&#32;};
232 
233 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
234 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__source_value_type_impl&lt;basic_string_view&lt;_CharT,&#32;_Traits&gt;&gt;
235 &#32;&#32;&#32;&#32;{
236 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;_CharT;
237 &#32;&#32;&#32;&#32;};
238 
239 &#32;&#32;<emphasis role="comment">//&#32;The&#32;value&#32;type&#32;of&#32;a&#32;Source&#32;parameter&apos;s&#32;effective&#32;range.</emphasis>
240 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Source&gt;
241 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__source_value_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__source_value_type_impl&lt;_Source&gt;::type;
242 
243 &#32;&#32;<emphasis role="comment">//&#32;SFINAE&#32;helper&#32;to&#32;check&#32;that&#32;an&#32;effective&#32;range&#32;has&#32;value_type&#32;char,</emphasis>
244 &#32;&#32;<emphasis role="comment">//&#32;as&#32;required&#32;by&#32;path&#32;constructors&#32;taking&#32;a&#32;std::locale&#32;parameter.</emphasis>
245 &#32;&#32;<emphasis role="comment">//&#32;The&#32;type&#32;_Tp&#32;must&#32;have&#32;already&#32;been&#32;checked&#32;by&#32;_Path&lt;Tp&gt;&#32;or&#32;_Path2&lt;_Tp&gt;.</emphasis>
246 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val&#32;=&#32;__source_value_t&lt;_Tp&gt;&gt;
247 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__value_type_is_char
248 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::enable_if_t&lt;std::is_same_v&lt;_Val,&#32;char&gt;,&#32;_Val&gt;;
249 
250 &#32;&#32;<emphasis role="comment">//&#32;As&#32;above,&#32;but&#32;also&#32;allows&#32;char8_t,&#32;as&#32;required&#32;by&#32;u8path</emphasis>
251 &#32;&#32;<emphasis role="comment">//&#32;C++20&#32;[depr.fs.path.factory]</emphasis>
252 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val&#32;=&#32;__source_value_t&lt;_Tp&gt;&gt;
253 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__value_type_is_char_or_char8_t
254 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::enable_if_t&lt;std::is_same_v&lt;_Val,&#32;char&gt;
255 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_CHAR8_T</emphasis>
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;std::is_same_v&lt;_Val,&#32;char8_t&gt;
257 <emphasis role="preprocessor">#endif</emphasis>
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;_Val&gt;;
259 
260 &#32;&#32;<emphasis role="comment">//&#32;Create&#32;a&#32;basic_string&lt;C&gt;&#32;or&#32;basic_string_view&lt;C&gt;&#32;from&#32;an&#32;iterator&#32;range.</emphasis>
261 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
262 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
263 &#32;&#32;&#32;&#32;__string_from_range(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
264 &#32;&#32;&#32;&#32;{
265 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_EcharT
266 &#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_InputIterator&gt;::value_type;
267 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__is_encoded_char&lt;_EcharT&gt;);&#32;<emphasis role="comment">//&#32;C++17&#32;[fs.req]/3</emphasis>
268 
269 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_contiguous&lt;_InputIterator&gt;)
270 &#32;&#32;&#32;&#32;{
271 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;contiguous&#32;iterators&#32;we&#32;can&#32;just&#32;return&#32;a&#32;string&#32;view.</emphasis>
272 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;__len&#32;=&#32;__last&#32;-&#32;__first)&#32;[[__likely__]]
273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;basic_string_view&lt;_EcharT&gt;(&amp;*__first,&#32;__len);
274 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;basic_string_view&lt;_EcharT&gt;();
275 &#32;&#32;&#32;&#32;}
276 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
277 &#32;&#32;&#32;&#32;{
278 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Conversion&#32;requires&#32;contiguous&#32;characters,&#32;so&#32;create&#32;a&#32;string.</emphasis>
279 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;__unified_u8_t&lt;_EcharT&gt;</link>&gt;(__first,&#32;__last);
280 &#32;&#32;&#32;&#32;}
281 &#32;&#32;&#32;&#32;}
282 
284 }&#32;<emphasis role="comment">//&#32;namespace&#32;__detail</emphasis>
286 
289 
292 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classpath">path</link>
293 &#32;&#32;{
294 &#32;&#32;<emphasis role="keyword">public</emphasis>:
295 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_FILESYSTEM_IS_WINDOWS</emphasis>
296 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link>;
297 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;value_type&#32;preferred_separator&#32;=&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link><emphasis role="charliteral">&apos;\\&apos;</emphasis>;
298 <emphasis role="preprocessor">#else</emphasis>
299 <emphasis role="preprocessor">#&#32;ifdef&#32;_GLIBCXX_DOXYGEN</emphasis>
301 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;__os_dependent__;
302 <emphasis role="preprocessor">#&#32;else</emphasis>
303 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;&#32;char;
304 <emphasis role="preprocessor">#&#32;endif</emphasis>
305 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;value_type&#32;preferred_separator&#32;=&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>;
306 <emphasis role="preprocessor">#endif</emphasis>
307 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>string_type&#32;=&#32;std::basic_string&lt;value_type&gt;;
308 
310 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>&#32;:&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;{&#32;native_format,&#32;generic_format,&#32;auto_format&#32;};
311 
312 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;constructors&#32;and&#32;destructor</emphasis>
313 
314 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>()&#32;noexcept&#32;{&#32;}
315 
316 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
317 
318 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>(<link linkend="_classpath">path</link>&amp;&amp;&#32;__p)&#32;noexcept
319 &#32;&#32;&#32;&#32;:&#32;_M_pathname(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__p._M_pathname)),
320 &#32;&#32;&#32;&#32;&#32;&#32;_M_cmpts(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__p._M_cmpts))
321 &#32;&#32;&#32;&#32;{&#32;__p.<link linkend="_classpath_1a0aba473e525c6bd36f429c34eb105de3">clear</link>();&#32;}
322 
323 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>(string_type&amp;&amp;&#32;__source,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>&#32;=&#32;auto_format)
324 &#32;&#32;&#32;&#32;:&#32;_M_pathname(<link linkend="_namespacestd">std</link>::<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(__source))
325 &#32;&#32;&#32;&#32;{&#32;_M_split_cmpts();&#32;}
326 
327 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Source,
328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Require&#32;=&#32;__detail::_Path&lt;_Source&gt;&gt;
329 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>(_Source&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;__source,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>&#32;=&#32;auto_format)
330 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_pathname(_S_convert(__detail::__effective_range(__source)))
331 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_split_cmpts();&#32;}
332 
333 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Require&#32;=&#32;__detail::_Path2&lt;_InputIterator&gt;&gt;
335 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>&#32;=&#32;auto_format)
336 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_pathname(_S_convert(__detail::__string_from_range(__first,&#32;__last)))
337 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_split_cmpts();&#32;}
338 
339 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Source,
340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Require&#32;=&#32;__detail::_Path&lt;_Source&gt;,
341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Require2&#32;=&#32;__detail::__value_type_is_char&lt;_Source&gt;&gt;
342 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>(_Source&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;__src,&#32;<emphasis role="keyword">const</emphasis>&#32;locale&amp;&#32;__loc,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>&#32;=&#32;auto_format)
343 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_pathname(_S_convert_loc(__detail::__effective_range(__src),&#32;__loc))
344 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_split_cmpts();&#32;}
345 
346 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Require&#32;=&#32;__detail::_Path2&lt;_InputIterator&gt;,
348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Req2&#32;=&#32;__detail::__value_type_is_char&lt;_InputIterator&gt;&gt;
349 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,&#32;<emphasis role="keyword">const</emphasis>&#32;locale&amp;&#32;__loc,
350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>&#32;=&#32;auto_format)
351 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_pathname(_S_convert_loc(__first,&#32;__last,&#32;__loc))
352 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_split_cmpts();&#32;}
353 
354 &#32;&#32;&#32;&#32;<link linkend="_classpath">~path</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
355 
356 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;assignments</emphasis>
357 
358 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;);
359 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;operator=(<link linkend="_classpath">path</link>&amp;&amp;)&#32;noexcept;
360 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;operator=(string_type&amp;&amp;&#32;__source);
361 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;assign(string_type&amp;&amp;&#32;__source);
362 
363 &#32;&#32;&#32;&#32;template&lt;typename&#32;_Source&gt;
364 &#32;&#32;&#32;&#32;&#32;&#32;__detail::_Path&lt;_Source&gt;&amp;
365 &#32;&#32;&#32;&#32;&#32;&#32;operator=(_Source&#32;const&amp;&#32;__source)
366 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;<link linkend="_classpath">path</link>(__source);&#32;}
367 
368 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Source&gt;
369 &#32;&#32;&#32;&#32;&#32;&#32;__detail::_Path&lt;_Source&gt;&amp;
370 &#32;&#32;&#32;&#32;&#32;&#32;assign(_Source&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;__source)
371 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;<link linkend="_classpath">path</link>(__source);&#32;}
372 
373 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
374 &#32;&#32;&#32;&#32;&#32;&#32;__detail::_Path2&lt;_InputIterator&gt;&amp;
375 &#32;&#32;&#32;&#32;&#32;&#32;assign(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
376 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;<link linkend="_classpath">path</link>(__first,&#32;__last);&#32;}
377 
378 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;appends</emphasis>
379 
380 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;operator/=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p);
381 
382 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Source&gt;
383 &#32;&#32;&#32;&#32;&#32;&#32;__detail::_Path&lt;_Source&gt;&amp;
384 &#32;&#32;&#32;&#32;&#32;&#32;operator/=(_Source&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;__source)
385 &#32;&#32;&#32;&#32;&#32;&#32;{
386 &#32;&#32;&#32;&#32;_M_append(_S_convert(__detail::__effective_range(__source)));
387 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
388 &#32;&#32;&#32;&#32;&#32;&#32;}
389 
390 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Source&gt;
391 &#32;&#32;&#32;&#32;&#32;&#32;__detail::_Path&lt;_Source&gt;&amp;
392 &#32;&#32;&#32;&#32;&#32;&#32;append(_Source&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;__source)
393 &#32;&#32;&#32;&#32;&#32;&#32;{
394 &#32;&#32;&#32;&#32;_M_append(_S_convert(__detail::__effective_range(__source)));
395 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
396 &#32;&#32;&#32;&#32;&#32;&#32;}
397 
398 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
399 &#32;&#32;&#32;&#32;&#32;&#32;__detail::_Path2&lt;_InputIterator&gt;&amp;
400 &#32;&#32;&#32;&#32;&#32;&#32;append(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
401 &#32;&#32;&#32;&#32;&#32;&#32;{
402 &#32;&#32;&#32;&#32;_M_append(_S_convert(__detail::__string_from_range(__first,&#32;__last)));
403 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
404 &#32;&#32;&#32;&#32;&#32;&#32;}
405 
406 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concatenation</emphasis>
407 
408 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__x);
409 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(<emphasis role="keyword">const</emphasis>&#32;string_type&amp;&#32;__x);
410 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(<emphasis role="keyword">const</emphasis>&#32;value_type*&#32;__x);
411 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(value_type&#32;__x);
412 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(basic_string_view&lt;value_type&gt;&#32;__x);
413 
414 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Source&gt;
415 &#32;&#32;&#32;&#32;&#32;&#32;__detail::_Path&lt;_Source&gt;&amp;
416 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(_Source&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;__x)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(__x);&#32;}
417 
418 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
419 &#32;&#32;&#32;&#32;&#32;&#32;__detail::_Path2&lt;_CharT*&gt;&amp;
420 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(_CharT&#32;__x);
421 
422 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Source&gt;
423 &#32;&#32;&#32;&#32;&#32;&#32;__detail::_Path&lt;_Source&gt;&amp;
424 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(_Source&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;__x)
425 &#32;&#32;&#32;&#32;&#32;&#32;{
426 &#32;&#32;&#32;&#32;_M_concat(_S_convert(__detail::__effective_range(__x)));
427 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
428 &#32;&#32;&#32;&#32;&#32;&#32;}
429 
430 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
431 &#32;&#32;&#32;&#32;&#32;&#32;__detail::_Path2&lt;_InputIterator&gt;&amp;
432 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
433 &#32;&#32;&#32;&#32;&#32;&#32;{
434 &#32;&#32;&#32;&#32;_M_concat(_S_convert(__detail::__string_from_range(__first,&#32;__last)));
435 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
436 &#32;&#32;&#32;&#32;&#32;&#32;}
437 
438 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;modifiers</emphasis>
439 
440 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;clear()&#32;noexcept&#32;{&#32;_M_pathname.clear();&#32;_M_split_cmpts();&#32;}
441 
442 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;make_preferred();
443 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;remove_filename();
444 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;replace_filename(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__replacement);
445 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;replace_extension(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__replacement&#32;=&#32;<link linkend="_classpath">path</link>());
446 
447 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(<link linkend="_classpath">path</link>&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>;
448 
449 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;native&#32;format&#32;observers</emphasis>
450 
451 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;string_type&amp;&#32;&#32;native()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_pathname;&#32;}
452 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;value_type*&#32;&#32;&#32;c_str()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_pathname.c_str();&#32;}
453 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;string_type()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_pathname;&#32;}
454 
455 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&#32;=&#32;std::<emphasis role="keywordtype">char</emphasis>_traits&lt;_CharT&gt;,
456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&#32;=&#32;std::allocator&lt;_CharT&gt;&gt;
457 &#32;&#32;&#32;&#32;&#32;&#32;std::basic_string&lt;_CharT,&#32;_Traits,&#32;_Allocator&gt;
458 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string</link>(<emphasis role="keyword">const</emphasis>&#32;_Allocator&amp;&#32;__a&#32;=&#32;_Allocator())&#32;<emphasis role="keyword">const</emphasis>;
459 
460 &#32;&#32;&#32;&#32;std::string&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string</link>()&#32;<emphasis role="keyword">const</emphasis>;
461 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_WCHAR_T</emphasis>
462 &#32;&#32;&#32;&#32;std::wstring&#32;&#32;&#32;wstring()&#32;<emphasis role="keyword">const</emphasis>;
463 <emphasis role="preprocessor">#endif</emphasis>
464 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_CHAR8_T</emphasis>
465 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__abi_tag__(<emphasis role="stringliteral">&quot;__u8&quot;</emphasis>)))
466 &#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::u8string&#32;&#32;u8string()&#32;const;
467 <emphasis role="preprocessor">#else</emphasis>
468 &#32;&#32;&#32;&#32;std::string&#32;&#32;&#32;&#32;u8string()&#32;<emphasis role="keyword">const</emphasis>;
469 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_USE_CHAR8_T</emphasis>
470 &#32;&#32;&#32;&#32;std::u16string&#32;u16string()&#32;<emphasis role="keyword">const</emphasis>;
471 &#32;&#32;&#32;&#32;std::u32string&#32;u32string()&#32;<emphasis role="keyword">const</emphasis>;
472 
473 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;generic&#32;format&#32;observers</emphasis>
474 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&#32;=&#32;std::<emphasis role="keywordtype">char</emphasis>_traits&lt;_CharT&gt;,
475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&#32;=&#32;std::allocator&lt;_CharT&gt;&gt;
476 &#32;&#32;&#32;&#32;&#32;&#32;std::basic_string&lt;_CharT,&#32;_Traits,&#32;_Allocator&gt;
477 &#32;&#32;&#32;&#32;&#32;&#32;generic_string(<emphasis role="keyword">const</emphasis>&#32;_Allocator&amp;&#32;__a&#32;=&#32;_Allocator())&#32;<emphasis role="keyword">const</emphasis>;
478 
479 &#32;&#32;&#32;&#32;std::string&#32;&#32;&#32;&#32;generic_string()&#32;<emphasis role="keyword">const</emphasis>;
480 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_WCHAR_T</emphasis>
481 &#32;&#32;&#32;&#32;std::wstring&#32;&#32;&#32;generic_wstring()&#32;<emphasis role="keyword">const</emphasis>;
482 <emphasis role="preprocessor">#endif</emphasis>
483 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_CHAR8_T</emphasis>
484 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__abi_tag__(<emphasis role="stringliteral">&quot;__u8&quot;</emphasis>)))
485 &#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::u8string&#32;&#32;generic_u8string()&#32;const;
486 <emphasis role="preprocessor">#else</emphasis>
487 &#32;&#32;&#32;&#32;std::string&#32;&#32;&#32;&#32;generic_u8string()&#32;<emphasis role="keyword">const</emphasis>;
488 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_USE_CHAR8_T</emphasis>
489 &#32;&#32;&#32;&#32;std::u16string&#32;generic_u16string()&#32;<emphasis role="keyword">const</emphasis>;
490 &#32;&#32;&#32;&#32;std::u32string&#32;generic_u32string()&#32;<emphasis role="keyword">const</emphasis>;
491 
492 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;compare</emphasis>
493 
494 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;compare(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>;
495 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;compare(<emphasis role="keyword">const</emphasis>&#32;string_type&amp;&#32;__s)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>;
496 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;compare(<emphasis role="keyword">const</emphasis>&#32;value_type*&#32;__s)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>;
497 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;compare(basic_string_view&lt;value_type&gt;&#32;__s)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>;
498 
499 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;decomposition</emphasis>
500 
501 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;root_name()&#32;<emphasis role="keyword">const</emphasis>;
502 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;root_directory()&#32;<emphasis role="keyword">const</emphasis>;
503 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;root_path()&#32;<emphasis role="keyword">const</emphasis>;
504 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;relative_path()&#32;<emphasis role="keyword">const</emphasis>;
505 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;parent_path()&#32;<emphasis role="keyword">const</emphasis>;
506 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;<link linkend="__classes_2lib_2m_i_n_i-master_2tests_2testhuge_8cpp_1a42a21beb8018ac623f4d09db1343b9cf">filename</link>()&#32;<emphasis role="keyword">const</emphasis>;
507 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;stem()&#32;<emphasis role="keyword">const</emphasis>;
508 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;extension()&#32;<emphasis role="keyword">const</emphasis>;
509 
510 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;query</emphasis>
511 
512 &#32;&#32;&#32;&#32;[[nodiscard]]&#32;<emphasis role="keywordtype">bool</emphasis>&#32;empty()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_pathname.empty();&#32;}
513 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;has_root_name()&#32;const&#32;noexcept;
514 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;has_root_directory()&#32;const&#32;noexcept;
515 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;has_root_path()&#32;const&#32;noexcept;
516 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;has_relative_path()&#32;const&#32;noexcept;
517 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;has_parent_path()&#32;const&#32;noexcept;
518 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;has_filename()&#32;const&#32;noexcept;
519 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;has_stem()&#32;const&#32;noexcept;
520 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;has_extension()&#32;const&#32;noexcept;
521 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_absolute()&#32;const&#32;noexcept;
522 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_relative()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!is_absolute();&#32;}
523 
524 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;generation</emphasis>
525 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;lexically_normal()&#32;<emphasis role="keyword">const</emphasis>;
526 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;lexically_relative(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;base)&#32;<emphasis role="keyword">const</emphasis>;
527 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;lexically_proximate(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;base)&#32;<emphasis role="keyword">const</emphasis>;
528 
529 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;iterators</emphasis>
530 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>iterator;
531 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>const_iterator&#32;=&#32;iterator;
532 
533 &#32;&#32;&#32;&#32;iterator&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>()&#32;const&#32;noexcept;
534 &#32;&#32;&#32;&#32;iterator&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;const&#32;noexcept;
535 
537 &#32;&#32;&#32;&#32;template&lt;typename&#32;_CharT,&#32;typename&#32;_Traits&gt;
538 &#32;&#32;&#32;&#32;&#32;&#32;friend&#32;<link linkend="_namespacestd">std</link>::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;
539 &#32;&#32;&#32;&#32;&#32;&#32;operator&lt;&lt;(<link linkend="_namespacestd">std</link>::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__os,&#32;const&#32;<link linkend="_classpath">path</link>&amp;&#32;__p)
540 &#32;&#32;&#32;&#32;&#32;&#32;{
541 &#32;&#32;&#32;&#32;__os&#32;&lt;&lt;&#32;std::quoted(__p.string&lt;_CharT,&#32;_Traits&gt;());
542 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__os;
543 &#32;&#32;&#32;&#32;&#32;&#32;}
544 
546 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
547 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;
548 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a4560e59cc4f5ddaf0ec23d1a7050b611">operator&gt;&gt;</link>(std::basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__is,&#32;<link linkend="_classpath">path</link>&amp;&#32;__p)
549 &#32;&#32;&#32;&#32;&#32;&#32;{
550 &#32;&#32;&#32;&#32;std::basic_string&lt;_CharT,&#32;_Traits&gt;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
551 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__is&#32;&gt;&gt;&#32;std::quoted(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>))
552 &#32;&#32;&#32;&#32;&#32;&#32;__p&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
553 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__is;
554 &#32;&#32;&#32;&#32;&#32;&#32;}
555 
556 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;non-member&#32;operators</emphasis>
557 
559 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
560 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;path::_S_compare(__lhs,&#32;__rhs)&#32;==&#32;0;&#32;}
561 
562 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
564 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;strong_ordering
565 &#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
566 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;path::_S_compare(__lhs,&#32;__rhs)&#32;&lt;=&gt;&#32;0;&#32;}
567 <emphasis role="preprocessor">#else</emphasis>
569 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
570 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__lhs&#32;==&#32;__rhs);&#32;}
571 
573 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
574 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.compare(__rhs)&#32;&lt;&#32;0;&#32;}
575 
577 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
578 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__rhs&#32;&lt;&#32;__lhs);&#32;}
579 
581 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
582 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__rhs&#32;&lt;&#32;__lhs;&#32;}
583 
585 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
586 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__lhs&#32;&lt;&#32;__rhs);&#32;}
587 <emphasis role="preprocessor">#endif</emphasis>
588 
590 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<link linkend="_classpath">path</link>&#32;<link linkend="_namespaceglm_1a3d4e77a9763e858fed5eed89a6f2637f">operator/</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__rhs)
591 &#32;&#32;&#32;&#32;{
592 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;__result(__lhs);
593 &#32;&#32;&#32;&#32;&#32;&#32;__result&#32;/=&#32;__rhs;
594 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
595 &#32;&#32;&#32;&#32;}
596 
597 &#32;&#32;<emphasis role="keyword">private</emphasis>:
598 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;_Type&#32;:&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;{
599 &#32;&#32;&#32;&#32;&#32;&#32;_Multi&#32;=&#32;0,&#32;_Root_name,&#32;_Root_dir,&#32;_Filename
600 &#32;&#32;&#32;&#32;};
601 
602 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>(basic_string_view&lt;value_type&gt;&#32;__str,&#32;_Type&#32;__type)
603 &#32;&#32;&#32;&#32;:&#32;_M_pathname(__str)
604 &#32;&#32;&#32;&#32;{
605 &#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(__type&#32;!=&#32;_Type::_Multi);
606 &#32;&#32;&#32;&#32;&#32;&#32;_M_cmpts.type(__type);
607 &#32;&#32;&#32;&#32;}
608 
609 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;_Split&#32;{&#32;_Stem,&#32;_Extension&#32;};
610 
611 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_append(basic_string_view&lt;value_type&gt;);
612 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_concat(basic_string_view&lt;value_type&gt;);
613 
614 &#32;&#32;&#32;&#32;pair&lt;const&#32;string_type*,&#32;size_t&gt;&#32;_M_find_extension()&#32;const&#32;noexcept;
615 
616 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;path::_S_convert&#32;creates&#32;a&#32;basic_string&lt;value_type&gt;&#32;or</emphasis>
617 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;basic_string_view&lt;value_type&gt;&#32;from&#32;a&#32;basic_string&lt;C&gt;&#32;or</emphasis>
618 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;basic_string_view&lt;C&gt;,&#32;for&#32;an&#32;encoded&#32;character&#32;type&#32;C,</emphasis>
619 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;performing&#32;the&#32;conversions&#32;required&#32;by&#32;[fs.path.type.cvt].</emphasis>
620 &#32;&#32;&#32;&#32;template&lt;typename&#32;_Tp&gt;
621 &#32;&#32;&#32;&#32;&#32;&#32;static&#32;auto
622 &#32;&#32;&#32;&#32;&#32;&#32;_S_convert(_Tp&#32;__str)
623 &#32;&#32;&#32;&#32;&#32;&#32;noexcept(is_same_v&lt;typename&#32;_Tp::value_type,&#32;value_type&gt;)
624 &#32;&#32;&#32;&#32;&#32;&#32;{
625 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;typename&#32;_Tp::value_type,&#32;value_type&gt;)
626 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__str;&#32;<emphasis role="comment">//&#32;No&#32;conversion&#32;needed.</emphasis>
627 <emphasis role="preprocessor">#if&#32;!defined&#32;_GLIBCXX_FILESYSTEM_IS_WINDOWS&#32;&amp;&amp;&#32;defined&#32;_GLIBCXX_USE_CHAR8_T</emphasis>
628 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Tp,&#32;std::u8string&gt;)
629 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calling&#32;_S_convert&lt;char8_t&gt;&#32;will&#32;return&#32;a&#32;u8string_view&#32;that</emphasis>
630 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;refers&#32;to&#32;__str&#32;and&#32;would&#32;dangle&#32;after&#32;this&#32;function&#32;returns.</emphasis>
631 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Return&#32;a&#32;string_type&#32;instead,&#32;to&#32;avoid&#32;dangling.</emphasis>
632 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;string_type(_S_convert(__str.data(),
633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__str.data()&#32;+&#32;__str.size()));
634 <emphasis role="preprocessor">#endif</emphasis>
635 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
636 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_convert(__str.data(),&#32;__str.data()&#32;+&#32;__str.size());
637 &#32;&#32;&#32;&#32;&#32;&#32;}
638 
639 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_E<emphasis role="keywordtype">char</emphasis>T&gt;
640 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
641 &#32;&#32;&#32;&#32;&#32;&#32;_S_convert(<emphasis role="keyword">const</emphasis>&#32;_EcharT*&#32;__first,&#32;<emphasis role="keyword">const</emphasis>&#32;_EcharT*&#32;__last);
642 
643 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_convert_loc&#32;converts&#32;a&#32;range&#32;of&#32;char&#32;to&#32;string_type,&#32;using&#32;the</emphasis>
644 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;supplied&#32;locale&#32;for&#32;encoding&#32;conversions.</emphasis>
645 
646 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;string_type
647 &#32;&#32;&#32;&#32;_S_convert_loc(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__first,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__last,
648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::locale&amp;&#32;__loc);
649 
650 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
651 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;string_type
652 &#32;&#32;&#32;&#32;&#32;&#32;_S_convert_loc(_Iter&#32;__first,&#32;_Iter&#32;__last,&#32;<emphasis role="keyword">const</emphasis>&#32;std::locale&amp;&#32;__loc)
653 &#32;&#32;&#32;&#32;&#32;&#32;{
654 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__s&#32;=&#32;__detail::__string_from_range(__first,&#32;__last);
655 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_convert_loc(__s.data(),&#32;__s.data()&#32;+&#32;__s.size(),&#32;__loc);
656 &#32;&#32;&#32;&#32;&#32;&#32;}
657 
658 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
659 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;string_type
660 &#32;&#32;&#32;&#32;&#32;&#32;_S_convert_loc(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__s,&#32;<emphasis role="keyword">const</emphasis>&#32;std::locale&amp;&#32;__loc)
661 &#32;&#32;&#32;&#32;&#32;&#32;{
662 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_convert_loc(__s.data(),&#32;__s.data()&#32;+&#32;__s.size(),&#32;__loc);
663 &#32;&#32;&#32;&#32;&#32;&#32;}
664 
665 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&gt;
666 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Allocator&gt;</link>
667 &#32;&#32;&#32;&#32;&#32;&#32;_S_str_convert(basic_string_view&lt;value_type&gt;,&#32;<emphasis role="keyword">const</emphasis>&#32;_Allocator&amp;);
668 
669 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Returns&#32;lhs.compare(rhs),&#32;but&#32;defined&#32;after&#32;path::iterator&#32;is&#32;complete.</emphasis>
670 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__always_inline__))
671 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
672 &#32;&#32;&#32;&#32;_S_compare(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>;
673 
674 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_split_cmpts();
675 
676 &#32;&#32;&#32;&#32;_Type&#32;_M_type()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_cmpts.type();&#32;}
677 
678 &#32;&#32;&#32;&#32;string_type&#32;_M_pathname;
679 
680 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Cmpt;
681 
682 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_List
683 &#32;&#32;&#32;&#32;{
684 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;_Cmpt;
685 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>iterator&#32;=&#32;value_type*;
686 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>const_iterator&#32;=&#32;<emphasis role="keyword">const</emphasis>&#32;value_type*;
687 
688 &#32;&#32;&#32;&#32;&#32;&#32;_List();
689 &#32;&#32;&#32;&#32;&#32;&#32;_List(<emphasis role="keyword">const</emphasis>&#32;_List&amp;);
690 &#32;&#32;&#32;&#32;&#32;&#32;_List(_List&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
691 &#32;&#32;&#32;&#32;&#32;&#32;_List&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;_List&amp;);
692 &#32;&#32;&#32;&#32;&#32;&#32;_List&amp;&#32;operator=(_List&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
693 &#32;&#32;&#32;&#32;&#32;&#32;~_List()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
694 
695 &#32;&#32;&#32;&#32;&#32;&#32;_Type&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>()&#32;const&#32;noexcept
696 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Type(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a31b85deecb45924320becd11d3ee16ce">uintptr_t</link><emphasis role="keyword">&gt;</emphasis>(_M_impl.get())&#32;&amp;&#32;0x3);&#32;}
697 
698 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>(_Type)&#32;<emphasis role="keyword">noexcept</emphasis>;
699 
700 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;const&#32;noexcept;&#32;<emphasis role="comment">//&#32;zero&#32;unless&#32;type()&#32;==&#32;_Type::_Multi</emphasis>
701 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;empty()&#32;const&#32;noexcept;&#32;<emphasis role="comment">//&#32;true&#32;unless&#32;type()&#32;==&#32;_Type::_Multi</emphasis>
702 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;clear();
703 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;swap(_List&amp;&#32;__l)&#32;noexcept&#32;{&#32;_M_impl.swap(__l._M_impl);&#32;}
704 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;capacity()&#32;const&#32;noexcept;
705 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;reserve(<emphasis role="keywordtype">int</emphasis>,&#32;<emphasis role="keywordtype">bool</emphasis>);&#32;
706 
707 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;All&#32;the&#32;member&#32;functions&#32;below&#32;here&#32;have&#32;a&#32;precondition&#32;!empty()</emphasis>
708 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(and&#32;they&#32;should&#32;only&#32;be&#32;called&#32;from&#32;within&#32;the&#32;library).</emphasis>
709 
710 &#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;begin()&#32;noexcept;
711 &#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;noexcept;
712 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator&#32;begin()&#32;const&#32;noexcept;
713 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;const&#32;noexcept;
714 
715 &#32;&#32;&#32;&#32;&#32;&#32;value_type&amp;&#32;front()&#32;noexcept;
716 &#32;&#32;&#32;&#32;&#32;&#32;value_type&amp;&#32;back()&#32;noexcept;
717 &#32;&#32;&#32;&#32;&#32;&#32;const&#32;value_type&amp;&#32;front()&#32;const&#32;noexcept;
718 &#32;&#32;&#32;&#32;&#32;&#32;const&#32;value_type&amp;&#32;back()&#32;const&#32;noexcept;
719 
720 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;pop_back();
721 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_erase_from(const_iterator&#32;__pos);&#32;<emphasis role="comment">//&#32;erases&#32;[__pos,end())</emphasis>
722 
723 &#32;&#32;&#32;&#32;&#32;&#32;struct&#32;_Impl;
724 &#32;&#32;&#32;&#32;&#32;&#32;struct&#32;_Impl_deleter
725 &#32;&#32;&#32;&#32;&#32;&#32;{
726 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator()(_Impl*)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>;
727 &#32;&#32;&#32;&#32;&#32;&#32;};
728 &#32;&#32;&#32;&#32;&#32;&#32;unique_ptr&lt;_Impl,&#32;_Impl_deleter&gt;&#32;_M_impl;
729 &#32;&#32;&#32;&#32;};
730 &#32;&#32;&#32;&#32;_List&#32;_M_cmpts;
731 
732 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Parser;
733 &#32;&#32;};
734 
737 
738 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(<link linkend="_classpath">path</link>&amp;&#32;__lhs,&#32;<link linkend="_classpath">path</link>&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{&#32;__lhs.swap(__rhs);&#32;}
739 
740 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;hash_value(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p)&#32;<emphasis role="keyword">noexcept</emphasis>;
741 
743 
745 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>filesystem_error&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;std::system_error
746 &#32;&#32;{
747 &#32;&#32;<emphasis role="keyword">public</emphasis>:
748 &#32;&#32;&#32;&#32;filesystem_error(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&amp;&#32;__what_arg,&#32;error_code&#32;__ec);
749 
750 &#32;&#32;&#32;&#32;filesystem_error(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&amp;&#32;__what_arg,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p1,
751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_code&#32;__ec);
752 
753 &#32;&#32;&#32;&#32;filesystem_error(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&amp;&#32;__what_arg,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p1,
754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p2,&#32;error_code&#32;__ec);
755 
756 &#32;&#32;&#32;&#32;filesystem_error(<emphasis role="keyword">const</emphasis>&#32;filesystem_error&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
757 &#32;&#32;&#32;&#32;filesystem_error&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;filesystem_error&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
758 
759 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;move&#32;constructor&#32;or&#32;assignment&#32;operator.</emphasis>
760 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Copy&#32;rvalues&#32;instead,&#32;so&#32;that&#32;_M_impl&#32;is&#32;not&#32;left&#32;empty.</emphasis>
761 
762 &#32;&#32;&#32;&#32;~filesystem_error();
763 
764 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;path1()&#32;const&#32;noexcept;
765 &#32;&#32;&#32;&#32;const&#32;<link linkend="_classpath">path</link>&amp;&#32;path2()&#32;const&#32;noexcept;
766 &#32;&#32;&#32;&#32;const&#32;<emphasis role="keywordtype">char</emphasis>*&#32;what()&#32;const&#32;noexcept;
767 
768 &#32;&#32;private:
769 &#32;&#32;&#32;&#32;struct&#32;_Impl;
770 &#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::__shared_ptr&lt;const&#32;_Impl&gt;&#32;_M_impl;
771 &#32;&#32;};
772 
774 namespace&#32;__detail
775 {
776 &#32;&#32;[[<link linkend="__classes_2lib_2include_2stdnoreturn_8h_1a4a453f3a748e55cbdac6fcc79357cfef">noreturn</link>]]&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
777 &#32;&#32;__throw_conversion_error()
778 &#32;&#32;{
779 &#32;&#32;&#32;&#32;_GLIBCXX_THROW_OR_ABORT(filesystem_error(
780 &#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Cannot&#32;convert&#32;character&#32;sequence&quot;</emphasis>,
781 &#32;&#32;&#32;&#32;&#32;std::make_error_code(errc::illegal_byte_sequence)));
782 &#32;&#32;}
783 
784 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_FILESYSTEM_IS_WINDOWS</emphasis>
785 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
786 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::wstring
787 &#32;&#32;&#32;&#32;__wstr_from_utf8(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__str)
788 &#32;&#32;&#32;&#32;{
789 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_same_v&lt;typename&#32;_Tp::value_type,&#32;char&gt;);
790 &#32;&#32;&#32;&#32;&#32;&#32;std::wstring&#32;__wstr;
791 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;XXX&#32;This&#32;assumes&#32;native&#32;wide&#32;encoding&#32;is&#32;UTF-16.</emphasis>
792 &#32;&#32;&#32;&#32;&#32;&#32;std::codecvt_utf8_utf16&lt;wchar_t&gt;&#32;__wcvt;
793 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__p&#32;=&#32;__str.data();
794 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__str_codecvt_in_all(__p,&#32;__p&#32;+&#32;__str.size(),&#32;__wstr,&#32;__wcvt))
795 &#32;&#32;&#32;&#32;__detail::__throw_conversion_error();
796 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__wstr;
797 &#32;&#32;&#32;&#32;}
798 <emphasis role="preprocessor">#endif</emphasis>
799 
800 }&#32;<emphasis role="comment">//&#32;namespace&#32;__detail</emphasis>
802 
803 
808 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Require&#32;=&#32;__detail::_Path2&lt;_InputIterator&gt;,
810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT
811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__detail::__value_type_is_char_or_char8_t&lt;_InputIterator&gt;&gt;
812 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath">path</link>
813 &#32;&#32;&#32;&#32;u8path(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
814 &#32;&#32;&#32;&#32;{
815 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_FILESYSTEM_IS_WINDOWS</emphasis>
816 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_CharT,&#32;char&gt;)
817 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classpath">path</link>{&#32;__detail::__wstr_from_utf8(
818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::__string_from_range(__first,&#32;__last))&#32;};
819 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
820 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classpath">path</link>{&#32;__first,&#32;__last&#32;};&#32;<emphasis role="comment">//&#32;constructor&#32;handles&#32;char8_t</emphasis>
821 <emphasis role="preprocessor">#else</emphasis>
822 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;assumes&#32;native&#32;normal&#32;encoding&#32;is&#32;UTF-8.</emphasis>
823 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classpath">path</link>{&#32;__first,&#32;__last&#32;};
824 <emphasis role="preprocessor">#endif</emphasis>
825 &#32;&#32;&#32;&#32;}
826 
831 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Source,
832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Require&#32;=&#32;__detail::_Path&lt;_Source&gt;,
833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT&#32;=&#32;__detail::__value_type_is_char_or_char8_t&lt;_Source&gt;&gt;
834 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath">path</link>
835 &#32;&#32;&#32;&#32;u8path(<emphasis role="keyword">const</emphasis>&#32;_Source&amp;&#32;__source)
836 &#32;&#32;&#32;&#32;{
837 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_FILESYSTEM_IS_WINDOWS</emphasis>
838 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_CharT,&#32;char&gt;)
839 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classpath">path</link>{&#32;__detail::__wstr_from_utf8(
840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::__effective_range(__source))&#32;};
841 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
842 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classpath">path</link>{&#32;__source&#32;};&#32;<emphasis role="comment">//&#32;constructor&#32;handles&#32;char8_t</emphasis>
843 <emphasis role="preprocessor">#else</emphasis>
844 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;assumes&#32;native&#32;normal&#32;encoding&#32;is&#32;UTF-8.</emphasis>
845 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classpath">path</link>{&#32;__source&#32;};
846 <emphasis role="preprocessor">#endif</emphasis>
847 &#32;&#32;&#32;&#32;}
848 
850 
851 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>path::_Cmpt&#32;:&#32;<link linkend="_classpath">path</link>
852 &#32;&#32;{
853 &#32;&#32;&#32;&#32;_Cmpt(basic_string_view&lt;value_type&gt;&#32;__s,&#32;_Type&#32;__t,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__pos)
854 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classpath">path</link>(__s,&#32;__t),&#32;_M_pos(__pos)&#32;{&#32;}
855 
856 &#32;&#32;&#32;&#32;_Cmpt()&#32;:&#32;_M_pos(-1)&#32;{&#32;}
857 
858 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_M_pos;
859 &#32;&#32;};
860 
861 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_E<emphasis role="keywordtype">char</emphasis>T&gt;
862 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
863 &#32;&#32;&#32;&#32;path::_S_convert(<emphasis role="keyword">const</emphasis>&#32;_EcharT*&#32;__f,&#32;<emphasis role="keyword">const</emphasis>&#32;_EcharT*&#32;__l)
864 &#32;&#32;&#32;&#32;{
865 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__detail::__is_encoded_char&lt;_EcharT&gt;);
866 
867 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_EcharT,&#32;value_type&gt;)
868 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;basic_string_view&lt;value_type&gt;(__f,&#32;__l&#32;-&#32;__f);
869 <emphasis role="preprocessor">#if&#32;!defined&#32;_GLIBCXX_FILESYSTEM_IS_WINDOWS&#32;&amp;&amp;&#32;defined&#32;_GLIBCXX_USE_CHAR8_T</emphasis>
870 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_EcharT,&#32;char8_t&gt;)
871 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;POSIX&#32;converting&#32;from&#32;char8_t&#32;to&#32;char&#32;is&#32;also&#32;&apos;noconv&apos;</emphasis>
872 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;string_view(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(__f),&#32;__l&#32;-&#32;__f);
873 <emphasis role="preprocessor">#endif</emphasis>
874 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
875 &#32;&#32;&#32;&#32;{
876 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_FILESYSTEM_IS_WINDOWS</emphasis>
877 &#32;&#32;&#32;&#32;&#32;&#32;std::wstring&#32;__wstr;
878 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_EcharT,&#32;char&gt;)
879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_UCvt&#32;:&#32;std::codecvt&lt;wchar_t,&#32;char,&#32;std::mbstate_t&gt;
881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;}&#32;__cvt;
882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__str_codecvt_in_all(__f,&#32;__l,&#32;__wstr,&#32;__cvt))
883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__wstr;
884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
885 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_CHAR8_T</emphasis>
886 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_EcharT,&#32;char8_t&gt;)
887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__f2&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(__f);
889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__detail::__wstr_from_utf8(string_view(__f2,&#32;__l&#32;-&#32;__f));
890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
891 <emphasis role="preprocessor">#endif</emphasis>
892 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;char16_t&#32;or&#32;char32_t</emphasis>
893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_UCvt&#32;:&#32;std::codecvt&lt;_EcharT,&#32;char,&#32;std::mbstate_t&gt;
895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;}&#32;__cvt;
896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;__str;
897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__str_codecvt_out_all(__f,&#32;__l,&#32;__str,&#32;__cvt))
898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__detail::__wstr_from_utf8(__str);
899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
900 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;!&#32;windows</emphasis>
901 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_UCvt&#32;:&#32;std::codecvt&lt;_EcharT,&#32;char,&#32;std::mbstate_t&gt;
902 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}&#32;__cvt;
903 &#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;__str;
904 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__str_codecvt_out_all(__f,&#32;__l,&#32;__str,&#32;__cvt))
905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__str;
906 <emphasis role="preprocessor">#endif</emphasis>
907 &#32;&#32;&#32;&#32;&#32;&#32;__detail::__throw_conversion_error();
908 &#32;&#32;&#32;&#32;}
909 &#32;&#32;&#32;&#32;}
910 
912 
914 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classpath_1a43033074faacf0d7081045d7fbc97c32">path::iterator</link>
915 &#32;&#32;{
916 &#32;&#32;<emphasis role="keyword">public</emphasis>:
917 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>difference_type&#32;&#32;&#32;=&#32;std::ptrdiff_t;
918 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="_classpath">path</link>;
919 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>reference&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;;
920 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>*;
921 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>iterator_category&#32;=&#32;std::bidirectional_iterator_tag;
922 
923 &#32;&#32;&#32;&#32;iterator()&#32;noexcept&#32;:&#32;_M_path(<emphasis role="keywordtype">nullptr</emphasis>),&#32;_M_cur(),&#32;_M_at_end()&#32;{&#32;}
924 
925 &#32;&#32;&#32;&#32;iterator(<emphasis role="keyword">const</emphasis>&#32;iterator&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
926 &#32;&#32;&#32;&#32;iterator&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;iterator&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
927 
928 &#32;&#32;&#32;&#32;reference&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>()&#32;const&#32;noexcept;
929 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;&#32;&#32;operator-&gt;()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__addressof(**<emphasis role="keyword">this</emphasis>);&#32;}
930 
931 &#32;&#32;&#32;&#32;iterator&amp;&#32;operator++()&#32;noexcept;
932 
933 &#32;&#32;&#32;&#32;iterator&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)&#32;noexcept
934 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;&#32;++*<emphasis role="keyword">this</emphasis>;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;&#32;}
935 
936 &#32;&#32;&#32;&#32;iterator&amp;&#32;operator--()&#32;noexcept;
937 
938 &#32;&#32;&#32;&#32;iterator&#32;&#32;operator--(<emphasis role="keywordtype">int</emphasis>)&#32;noexcept
939 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;&#32;--*<emphasis role="keyword">this</emphasis>;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;&#32;}
940 
941 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
942 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;iterator&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;iterator&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
943 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs._M_equals(__rhs);&#32;}
944 
945 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
946 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;iterator&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;iterator&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
947 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!__lhs._M_equals(__rhs);&#32;}
948 
949 &#32;&#32;<emphasis role="keyword">private</emphasis>:
950 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classpath">path</link>;
951 
952 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
953 &#32;&#32;&#32;&#32;_M_is_multi()&#32;const&#32;noexcept
954 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_path-&gt;_M_type()&#32;==&#32;_Type::_Multi;&#32;}
955 
956 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;difference_type
957 &#32;&#32;&#32;&#32;__path_iter_distance(<emphasis role="keyword">const</emphasis>&#32;iterator&amp;&#32;__first,&#32;<emphasis role="keyword">const</emphasis>&#32;iterator&amp;&#32;__last)
958 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>
959 &#32;&#32;&#32;&#32;{
960 &#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(__first._M_path&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
961 &#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(__first._M_path&#32;==&#32;__last._M_path);
962 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first._M_is_multi())
963 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::distance(__first._M_cur,&#32;__last._M_cur);
964 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first._M_at_end&#32;==&#32;__last._M_at_end)
965 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
966 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
967 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first._M_at_end&#32;?&#32;-1&#32;:&#32;1;
968 &#32;&#32;&#32;&#32;}
969 
970 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
971 &#32;&#32;&#32;&#32;__path_iter_advance(iterator&amp;&#32;__i,&#32;difference_type&#32;__n)&#32;<emphasis role="keyword">noexcept</emphasis>
972 &#32;&#32;&#32;&#32;{
973 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;1)
974 &#32;&#32;&#32;&#32;++__i;
975 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;-1)
976 &#32;&#32;&#32;&#32;--__i;
977 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;!=&#32;0)
978 &#32;&#32;&#32;&#32;{
979 &#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(__i._M_path&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
980 &#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(__i._M_is_multi());
981 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__glibcxx_assert(__i._M_path-&gt;_M_cmpts.end()&#32;-&#32;__i._M_cur&#32;&gt;=&#32;__n);</emphasis>
982 &#32;&#32;&#32;&#32;&#32;&#32;__i._M_cur&#32;+=&#32;__n;
983 &#32;&#32;&#32;&#32;}
984 &#32;&#32;&#32;&#32;}
985 
986 &#32;&#32;&#32;&#32;iterator(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>*&#32;__path,&#32;path::_List::const_iterator&#32;__iter)&#32;noexcept
987 &#32;&#32;&#32;&#32;:&#32;_M_path(__path),&#32;_M_cur(__iter),&#32;_M_at_end()
988 &#32;&#32;&#32;&#32;{&#32;}
989 
990 &#32;&#32;&#32;&#32;iterator(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>*&#32;__path,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__at_end)&#32;noexcept
991 &#32;&#32;&#32;&#32;:&#32;_M_path(__path),&#32;_M_cur(),&#32;_M_at_end(__at_end)
992 &#32;&#32;&#32;&#32;{&#32;}
993 
994 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_M_equals(iterator)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>;
995 
996 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_path;
997 &#32;&#32;&#32;&#32;path::_List::const_iterator&#32;_M_cur;
998 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_at_end;&#32;&#32;<emphasis role="comment">//&#32;only&#32;used&#32;when&#32;type&#32;!=&#32;_Multi</emphasis>
999 &#32;&#32;};
1000 
1001 
1002 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath">path</link>&amp;
1003 &#32;&#32;<link linkend="_classpath_1ae994d06e46e0f0fa99dd861af3695ded">path::operator=</link>(<link linkend="_classpath">path</link>&amp;&amp;&#32;__p)&#32;<emphasis role="keyword">noexcept</emphasis>
1004 &#32;&#32;{
1005 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&amp;__p&#32;==&#32;<emphasis role="keyword">this</emphasis>)&#32;[[__unlikely__]]
1006 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1007 
1008 &#32;&#32;&#32;&#32;_M_pathname&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__p._M_pathname);
1009 &#32;&#32;&#32;&#32;_M_cmpts&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__p._M_cmpts);
1010 &#32;&#32;&#32;&#32;__p.<link linkend="_classpath_1a0aba473e525c6bd36f429c34eb105de3">clear</link>();
1011 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1012 &#32;&#32;}
1013 
1014 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath">path</link>&amp;
1015 &#32;&#32;<link linkend="_classpath_1ae994d06e46e0f0fa99dd861af3695ded">path::operator=</link>(string_type&amp;&amp;&#32;__source)
1016 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;<link linkend="_classpath">path</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__source));&#32;}
1017 
1018 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath">path</link>&amp;
1019 &#32;&#32;<link linkend="_classpath_1ace78199ce6abac6d6476bfb5e09de398">path::assign</link>(string_type&amp;&amp;&#32;__source)
1020 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;<link linkend="_classpath">path</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__source));&#32;}
1021 
1022 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath">path</link>&amp;
1023 &#32;&#32;<link linkend="_classpath_1ac4088e42d302fc936f17befaf31b13cd">path::operator+=</link>(<emphasis role="keyword">const</emphasis>&#32;string_type&amp;&#32;__x)
1024 &#32;&#32;{
1025 &#32;&#32;&#32;&#32;_M_concat(__x);
1026 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1027 &#32;&#32;}
1028 
1029 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath">path</link>&amp;
1030 &#32;&#32;<link linkend="_classpath_1ac4088e42d302fc936f17befaf31b13cd">path::operator+=</link>(<emphasis role="keyword">const</emphasis>&#32;value_type*&#32;__x)
1031 &#32;&#32;{
1032 &#32;&#32;&#32;&#32;_M_concat(__x);
1033 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1034 &#32;&#32;}
1035 
1036 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath">path</link>&amp;
1037 &#32;&#32;<link linkend="_classpath_1ac4088e42d302fc936f17befaf31b13cd">path::operator+=</link>(value_type&#32;__x)
1038 &#32;&#32;{
1039 &#32;&#32;&#32;&#32;_M_concat(basic_string_view&lt;value_type&gt;(&amp;__x,&#32;1));
1040 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1041 &#32;&#32;}
1042 
1043 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath">path</link>&amp;
1044 &#32;&#32;<link linkend="_classpath_1ac4088e42d302fc936f17befaf31b13cd">path::operator+=</link>(basic_string_view&lt;value_type&gt;&#32;__x)
1045 &#32;&#32;{
1046 &#32;&#32;&#32;&#32;_M_concat(__x);
1047 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1048 &#32;&#32;}
1049 
1050 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
1051 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;__detail::_Path2&lt;_CharT*&gt;&amp;
1052 &#32;&#32;&#32;&#32;<link linkend="_classpath_1ac4088e42d302fc936f17befaf31b13cd">path::operator+=</link>(<emphasis role="keyword">const</emphasis>&#32;_CharT&#32;__x)
1053 &#32;&#32;&#32;&#32;{
1054 &#32;&#32;&#32;&#32;&#32;&#32;_M_concat(_S_convert(&amp;__x,&#32;&amp;__x&#32;+&#32;1));
1055 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1056 &#32;&#32;&#32;&#32;}
1057 
1058 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath">path</link>&amp;
1059 &#32;&#32;path::make_preferred()
1060 &#32;&#32;{
1061 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_FILESYSTEM_IS_WINDOWS</emphasis>
1062 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__pos&#32;=&#32;_M_pathname.find(<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link><emphasis role="charliteral">&apos;/&apos;</emphasis>);
1063 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__pos&#32;!=&#32;_M_pathname.npos)
1064 &#32;&#32;&#32;&#32;&#32;&#32;{
1065 &#32;&#32;&#32;&#32;_M_pathname[__pos]&#32;=&#32;preferred_separator;
1066 &#32;&#32;&#32;&#32;__pos&#32;=&#32;_M_pathname.find(<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link><emphasis role="charliteral">&apos;/&apos;</emphasis>,&#32;__pos);
1067 &#32;&#32;&#32;&#32;&#32;&#32;}
1068 <emphasis role="preprocessor">#endif</emphasis>
1069 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1070 &#32;&#32;}
1071 
1072 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;path::swap(<link linkend="_classpath">path</link>&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
1073 &#32;&#32;{
1074 &#32;&#32;&#32;&#32;_M_pathname.swap(__rhs._M_pathname);
1075 &#32;&#32;&#32;&#32;_M_cmpts.swap(__rhs._M_cmpts);
1076 &#32;&#32;}
1077 
1079 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&gt;
1080 &#32;&#32;&#32;&#32;std::basic_string&lt;_CharT,&#32;_Traits,&#32;_Allocator&gt;
1081 &#32;&#32;&#32;&#32;path::_S_str_convert(basic_string_view&lt;value_type&gt;&#32;__str,
1082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Allocator&amp;&#32;__a)
1083 &#32;&#32;&#32;&#32;{
1084 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!is_same_v&lt;_CharT,&#32;value_type&gt;);
1085 
1086 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_WString&#32;=&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Allocator&gt;</link>;
1087 
1088 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__str.size()&#32;==&#32;0)
1089 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_WString(__a);
1090 
1091 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_FILESYSTEM_IS_WINDOWS</emphasis>
1092 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;First&#32;convert&#32;native&#32;string&#32;from&#32;UTF-16&#32;to&#32;to&#32;UTF-8.</emphasis>
1093 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;XXX&#32;This&#32;assumes&#32;that&#32;the&#32;execution&#32;wide-character&#32;set&#32;is&#32;UTF-16.</emphasis>
1094 &#32;&#32;&#32;&#32;&#32;&#32;std::codecvt_utf8_utf16&lt;value_type&gt;&#32;__cvt;
1095 
1096 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_CharAlloc&#32;=&#32;__alloc_rebind&lt;_Allocator,&#32;char&gt;;
1097 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_String&#32;=&#32;<link linkend="_classbasic__string">basic_string&lt;char, char_traits&lt;char&gt;</link>,&#32;_CharAlloc&gt;;
1098 &#32;&#32;&#32;&#32;&#32;&#32;_String&#32;__u8str{_CharAlloc{__a}};
1099 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;value_type*&#32;__wfirst&#32;=&#32;__str.data();
1100 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;value_type*&#32;__wlast&#32;=&#32;__wfirst&#32;+&#32;__str.size();
1101 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__str_codecvt_out_all(__wfirst,&#32;__wlast,&#32;__u8str,&#32;__cvt))&#32;{
1102 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_CharT,&#32;char&gt;)
1103 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__u8str;&#32;<emphasis role="comment">//&#32;XXX&#32;assumes&#32;native&#32;ordinary&#32;encoding&#32;is&#32;UTF-8.</emphasis>
1104 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
1105 
1106 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__first&#32;=&#32;__u8str.data();
1107 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__last&#32;=&#32;__first&#32;+&#32;__u8str.size();
1108 <emphasis role="preprocessor">#else</emphasis>
1109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;value_type*&#32;__first&#32;=&#32;__str.data();
1110 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;value_type*&#32;__last&#32;=&#32;__first&#32;+&#32;__str.size();
1111 <emphasis role="preprocessor">#endif</emphasis>
1112 
1113 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Convert&#32;UTF-8&#32;string&#32;to&#32;requested&#32;format.</emphasis>
1114 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_CHAR8_T</emphasis>
1115 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_CharT,&#32;char8_t&gt;)
1116 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_WString(__first,&#32;__last,&#32;__a);
1117 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1118 <emphasis role="preprocessor">#endif</emphasis>
1119 &#32;&#32;&#32;&#32;{
1120 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Convert&#32;UTF-8&#32;to&#32;wide&#32;string.</emphasis>
1121 &#32;&#32;&#32;&#32;&#32;&#32;_WString&#32;__wstr(__a);
1122 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_UCvt&#32;:&#32;std::codecvt&lt;_CharT,&#32;char,&#32;std::mbstate_t&gt;&#32;{&#32;}&#32;__cvt;
1123 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__str_codecvt_in_all(__first,&#32;__last,&#32;__wstr,&#32;__cvt))
1124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__wstr;
1125 &#32;&#32;&#32;&#32;}
1126 
1127 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_FILESYSTEM_IS_WINDOWS</emphasis>
1128 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;}
1129 <emphasis role="preprocessor">#endif</emphasis>
1130 &#32;&#32;&#32;&#32;&#32;&#32;__detail::__throw_conversion_error();
1131 &#32;&#32;&#32;&#32;}
1133 
1134 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&gt;
1135 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Allocator&gt;</link>
1136 &#32;&#32;&#32;&#32;<link linkend="_classpath_1a63e1c848a446e106f3f288dd2ec7a5ba">path::string</link>(<emphasis role="keyword">const</emphasis>&#32;_Allocator&amp;&#32;__a)<emphasis role="keyword">&#32;const</emphasis>
1137 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
1138 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_CharT,&#32;value_type&gt;)
1139 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;_M_pathname.c_str(),&#32;_M_pathname.length(),&#32;__a&#32;};
1140 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1141 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_str_convert&lt;_CharT,&#32;_Traits&gt;(_M_pathname,&#32;__a);
1142 &#32;&#32;&#32;&#32;}
1143 
1144 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::string
1145 &#32;&#32;<link linkend="_classpath_1a63e1c848a446e106f3f288dd2ec7a5ba">path::string</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string&lt;char&gt;</link>();&#32;}
1146 
1147 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_WCHAR_T</emphasis>
1148 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::wstring
1149 &#32;&#32;<link linkend="_classpath_1a7d86e6cb5f7e5bbd02c5e402f498120e">path::wstring</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string&lt;wchar_t&gt;</link>();&#32;}
1150 <emphasis role="preprocessor">#endif</emphasis>
1151 
1152 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_CHAR8_T</emphasis>
1153 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::u8string
1154 &#32;&#32;path::u8string()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string&lt;char8_t&gt;</link>();&#32;}
1155 <emphasis role="preprocessor">#else</emphasis>
1156 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::string
1157 &#32;&#32;path::u8string()<emphasis role="keyword">&#32;const</emphasis>
1158 <emphasis role="keyword">&#32;&#32;</emphasis>{
1159 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_FILESYSTEM_IS_WINDOWS</emphasis>
1160 &#32;&#32;&#32;&#32;std::string&#32;__str;
1161 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;convert&#32;from&#32;native&#32;wide&#32;encoding&#32;(assumed&#32;to&#32;be&#32;UTF-16)&#32;to&#32;UTF-8</emphasis>
1162 &#32;&#32;&#32;&#32;std::codecvt_utf8_utf16&lt;value_type&gt;&#32;__cvt;
1163 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;value_type*&#32;__first&#32;=&#32;_M_pathname.data();
1164 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;value_type*&#32;__last&#32;=&#32;__first&#32;+&#32;_M_pathname.size();
1165 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__str_codecvt_out_all(__first,&#32;__last,&#32;__str,&#32;__cvt))
1166 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__str;
1167 &#32;&#32;&#32;&#32;__detail::__throw_conversion_error();
1168 <emphasis role="preprocessor">#else</emphasis>
1169 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_pathname;
1170 <emphasis role="preprocessor">#endif</emphasis>
1171 &#32;&#32;}
1172 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_USE_CHAR8_T</emphasis>
1173 
1174 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::u16string
1175 &#32;&#32;path::u16string()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string&lt;char16_t&gt;</link>();&#32;}
1176 
1177 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::u32string
1178 &#32;&#32;path::u32string()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string&lt;char32_t&gt;</link>();&#32;}
1179 
1180 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&gt;
1181 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::basic_string&lt;_CharT,&#32;_Traits,&#32;_Allocator&gt;
1182 &#32;&#32;&#32;&#32;path::generic_string(<emphasis role="keyword">const</emphasis>&#32;_Allocator&amp;&#32;__a)<emphasis role="keyword">&#32;const</emphasis>
1183 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
1184 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_FILESYSTEM_IS_WINDOWS</emphasis>
1185 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&#32;__slash&#32;=&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link><emphasis role="charliteral">&apos;/&apos;</emphasis>;
1186 <emphasis role="preprocessor">#else</emphasis>
1187 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&#32;__slash&#32;=&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>;
1188 <emphasis role="preprocessor">#endif</emphasis>
1189 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Alloc2&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;allocator_traits&lt;_Allocator&gt;::template
1190 &#32;&#32;&#32;&#32;rebind_alloc&lt;value_type&gt;;
1191 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;value_type, char_traits&lt;value_type&gt;</link>,&#32;_Alloc2&gt;&#32;__str(__a);
1192 
1193 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_type()&#32;==&#32;_Type::_Root_dir)
1194 &#32;&#32;&#32;&#32;__str.assign(1,&#32;__slash);
1195 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1196 &#32;&#32;&#32;&#32;{
1197 &#32;&#32;&#32;&#32;&#32;&#32;__str.reserve(_M_pathname.size());
1198 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__add_slash&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1199 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;__elem&#32;:&#32;*this)
1200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1201 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_FILESYSTEM_IS_WINDOWS</emphasis>
1202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__elem._M_type()&#32;==&#32;_Type::_Root_dir)
1203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__str&#32;+=&#32;__slash;
1205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
1206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1207 <emphasis role="preprocessor">#endif</emphasis>
1208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__add_slash)
1209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__str&#32;+=&#32;__slash;
1210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__str&#32;+=&#32;basic_string_view&lt;value_type&gt;(__elem._M_pathname);
1211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__add_slash&#32;=&#32;__elem._M_type()&#32;==&#32;_Type::_Filename;
1212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1213 &#32;&#32;&#32;&#32;}
1214 
1215 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_CharT,&#32;value_type&gt;)
1216 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__str;
1217 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1218 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_str_convert&lt;_CharT,&#32;_Traits&gt;(__str,&#32;__a);
1219 &#32;&#32;&#32;&#32;}
1220 
1221 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::string
1222 &#32;&#32;path::generic_string()<emphasis role="keyword">&#32;const</emphasis>
1223 <emphasis role="keyword">&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;generic_string&lt;char&gt;();&#32;}
1224 
1225 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_WCHAR_T</emphasis>
1226 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::wstring
1227 &#32;&#32;path::generic_wstring()<emphasis role="keyword">&#32;const</emphasis>
1228 <emphasis role="keyword">&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;generic_string&lt;wchar_t&gt;();&#32;}
1229 <emphasis role="preprocessor">#endif</emphasis>
1230 
1231 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_CHAR8_T</emphasis>
1232 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::u8string
1233 &#32;&#32;path::generic_u8string()<emphasis role="keyword">&#32;const</emphasis>
1234 <emphasis role="keyword">&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;generic_string&lt;char8_t&gt;();&#32;}
1235 <emphasis role="preprocessor">#else</emphasis>
1236 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::string
1237 &#32;&#32;path::generic_u8string()<emphasis role="keyword">&#32;const</emphasis>
1238 <emphasis role="keyword">&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;generic_string();&#32;}
1239 <emphasis role="preprocessor">#endif</emphasis>
1240 
1241 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::u16string
1242 &#32;&#32;path::generic_u16string()<emphasis role="keyword">&#32;const</emphasis>
1243 <emphasis role="keyword">&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;generic_string&lt;char16_t&gt;();&#32;}
1244 
1245 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::u32string
1246 &#32;&#32;path::generic_u32string()<emphasis role="keyword">&#32;const</emphasis>
1247 <emphasis role="keyword">&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;generic_string&lt;char32_t&gt;();&#32;}
1248 
1249 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
1250 &#32;&#32;path::compare(<emphasis role="keyword">const</emphasis>&#32;string_type&amp;&#32;__s)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1251 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;compare(basic_string_view&lt;value_type&gt;(__s));&#32;}
1252 
1253 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
1254 &#32;&#32;path::compare(<emphasis role="keyword">const</emphasis>&#32;value_type*&#32;__s)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1255 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;compare(basic_string_view&lt;value_type&gt;(__s));&#32;}
1256 
1257 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath">path</link>
1258 &#32;&#32;path::filename()<emphasis role="keyword">&#32;const</emphasis>
1259 <emphasis role="keyword">&#32;&#32;</emphasis>{
1260 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(empty())
1261 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
1262 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_type()&#32;==&#32;_Type::_Filename)
1263 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1264 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_type()&#32;==&#32;_Type::_Multi)
1265 &#32;&#32;&#32;&#32;&#32;&#32;{
1266 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_pathname.back()&#32;==&#32;preferred_separator)
1267 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
1268 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;__last&#32;=&#32;*--<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();
1269 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__last._M_type()&#32;==&#32;_Type::_Filename)
1270 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__last;
1271 &#32;&#32;&#32;&#32;&#32;&#32;}
1272 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
1273 &#32;&#32;}
1274 
1275 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath">path</link>
1276 &#32;&#32;path::stem()<emphasis role="keyword">&#32;const</emphasis>
1277 <emphasis role="keyword">&#32;&#32;</emphasis>{
1278 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ext&#32;=&#32;_M_find_extension();
1279 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ext.first&#32;&amp;&amp;&#32;ext.second&#32;!=&#32;0)
1280 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classpath">path</link>{ext.first-&gt;substr(0,&#32;ext.second)};
1281 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
1282 &#32;&#32;}
1283 
1284 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath">path</link>
1285 &#32;&#32;path::extension()<emphasis role="keyword">&#32;const</emphasis>
1286 <emphasis role="keyword">&#32;&#32;</emphasis>{
1287 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ext&#32;=&#32;_M_find_extension();
1288 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ext.first&#32;&amp;&amp;&#32;ext.second&#32;!=&#32;string_type::npos)
1289 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classpath">path</link>{ext.first-&gt;substr(ext.second)};
1290 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
1291 &#32;&#32;}
1292 
1293 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1294 &#32;&#32;path::has_stem()&#32;const&#32;noexcept
1295 &#32;&#32;{
1296 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ext&#32;=&#32;_M_find_extension();
1297 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ext.first&#32;&amp;&amp;&#32;ext.second&#32;!=&#32;0;
1298 &#32;&#32;}
1299 
1300 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1301 &#32;&#32;path::has_extension()&#32;const&#32;noexcept
1302 &#32;&#32;{
1303 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ext&#32;=&#32;_M_find_extension();
1304 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ext.first&#32;&amp;&amp;&#32;ext.second&#32;!=&#32;string_type::npos;
1305 &#32;&#32;}
1306 
1307 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1308 &#32;&#32;path::is_absolute()&#32;const&#32;noexcept
1309 &#32;&#32;{
1310 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_FILESYSTEM_IS_WINDOWS</emphasis>
1311 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;has_root_name()&#32;&amp;&amp;&#32;has_root_directory();
1312 <emphasis role="preprocessor">#else</emphasis>
1313 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;has_root_directory();
1314 <emphasis role="preprocessor">#endif</emphasis>
1315 &#32;&#32;}
1316 
1317 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath_1a43033074faacf0d7081045d7fbc97c32">path::iterator</link>
1318 &#32;&#32;<link linkend="_classpath_1a82d976c5118224f5c69f543a4f32af38">path::begin</link>()&#32;const&#32;noexcept
1319 &#32;&#32;{
1320 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_type()&#32;==&#32;_Type::_Multi)
1321 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(<emphasis role="keyword">this</emphasis>,&#32;_M_cmpts.begin());
1322 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(<emphasis role="keyword">this</emphasis>,&#32;empty());
1323 &#32;&#32;}
1324 
1325 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath_1a43033074faacf0d7081045d7fbc97c32">path::iterator</link>
1326 &#32;&#32;<link linkend="_classpath_1a337c19aa6a1a9ea9f505a166038b6e14">path::end</link>()&#32;const&#32;noexcept
1327 &#32;&#32;{
1328 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_type()&#32;==&#32;_Type::_Multi)
1329 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(<emphasis role="keyword">this</emphasis>,&#32;_M_cmpts.end());
1330 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(<emphasis role="keyword">this</emphasis>,&#32;<emphasis role="keyword">true</emphasis>);
1331 &#32;&#32;}
1332 
1333 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath_1a43033074faacf0d7081045d7fbc97c32">path::iterator</link>&amp;
1334 &#32;&#32;path::iterator::operator++()&#32;noexcept
1335 &#32;&#32;{
1336 &#32;&#32;&#32;&#32;__glibcxx_assert(_M_path&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
1337 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_is_multi())
1338 &#32;&#32;&#32;&#32;&#32;&#32;{
1339 &#32;&#32;&#32;&#32;__glibcxx_assert(_M_cur&#32;!=&#32;_M_path-&gt;_M_cmpts.end());
1340 &#32;&#32;&#32;&#32;++_M_cur;
1341 &#32;&#32;&#32;&#32;&#32;&#32;}
1342 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1343 &#32;&#32;&#32;&#32;&#32;&#32;{
1344 &#32;&#32;&#32;&#32;__glibcxx_assert(!_M_at_end);
1345 &#32;&#32;&#32;&#32;_M_at_end&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1346 &#32;&#32;&#32;&#32;&#32;&#32;}
1347 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1348 &#32;&#32;}
1349 
1350 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath_1a43033074faacf0d7081045d7fbc97c32">path::iterator</link>&amp;
1351 &#32;&#32;path::iterator::operator--()&#32;noexcept
1352 &#32;&#32;{
1353 &#32;&#32;&#32;&#32;__glibcxx_assert(_M_path&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
1354 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_is_multi())
1355 &#32;&#32;&#32;&#32;&#32;&#32;{
1356 &#32;&#32;&#32;&#32;__glibcxx_assert(_M_cur&#32;!=&#32;_M_path-&gt;_M_cmpts.begin());
1357 &#32;&#32;&#32;&#32;--_M_cur;
1358 &#32;&#32;&#32;&#32;&#32;&#32;}
1359 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1360 &#32;&#32;&#32;&#32;&#32;&#32;{
1361 &#32;&#32;&#32;&#32;__glibcxx_assert(_M_at_end);
1362 &#32;&#32;&#32;&#32;_M_at_end&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1363 &#32;&#32;&#32;&#32;&#32;&#32;}
1364 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1365 &#32;&#32;}
1366 
1367 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;path::iterator::reference
1368 &#32;&#32;path::iterator::operator*()&#32;const&#32;noexcept
1369 &#32;&#32;{
1370 &#32;&#32;&#32;&#32;__glibcxx_assert(_M_path&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
1371 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_is_multi())
1372 &#32;&#32;&#32;&#32;&#32;&#32;{
1373 &#32;&#32;&#32;&#32;__glibcxx_assert(_M_cur&#32;!=&#32;_M_path-&gt;_M_cmpts.end());
1374 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*_M_cur;
1375 &#32;&#32;&#32;&#32;&#32;&#32;}
1376 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*_M_path;
1377 &#32;&#32;}
1378 
1379 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1380 &#32;&#32;path::iterator::_M_equals(iterator&#32;__rhs)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1381 &#32;&#32;{
1382 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_path&#32;!=&#32;__rhs._M_path)
1383 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1384 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_path&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>)
1385 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
1386 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_is_multi())
1387 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_cur&#32;==&#32;__rhs._M_cur;
1388 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_at_end&#32;==&#32;__rhs._M_at_end;
1389 &#32;&#32;}
1390 
1391 &#32;&#32;<emphasis role="comment">//&#32;Define&#32;this&#32;now&#32;that&#32;path&#32;and&#32;path::iterator&#32;are&#32;complete.</emphasis>
1392 &#32;&#32;<emphasis role="comment">//&#32;It&#32;needs&#32;to&#32;consider&#32;the&#32;string_view(Range&amp;&amp;)&#32;constructor&#32;during</emphasis>
1393 &#32;&#32;<emphasis role="comment">//&#32;overload&#32;resolution,&#32;which&#32;depends&#32;on&#32;whether&#32;range&lt;path&gt;&#32;is&#32;satisfied,</emphasis>
1394 &#32;&#32;<emphasis role="comment">//&#32;which&#32;depends&#32;on&#32;whether&#32;path::iterator&#32;is&#32;complete.</emphasis>
1395 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
1396 &#32;&#32;path::_S_compare(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
1397 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.compare(__rhs);&#32;}
1398 
1400 _GLIBCXX_END_NAMESPACE_CXX11
1401 }&#32;<emphasis role="comment">//&#32;namespace&#32;filesystem</emphasis>
1402 
1404 
1405 <emphasis role="keyword">inline</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>
1406 <link linkend="_namespacedistance">distance</link>(filesystem::path::iterator&#32;__first,&#32;filesystem::path::iterator&#32;__last)
1407 <emphasis role="keyword">noexcept</emphasis>
1408 {&#32;<emphasis role="keywordflow">return</emphasis>&#32;__path_iter_distance(__first,&#32;__last);&#32;}
1409 
1410 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Distance&gt;
1411 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1412 &#32;&#32;advance(filesystem::path::iterator&amp;&#32;__i,&#32;_Distance&#32;__n)&#32;<emphasis role="keyword">noexcept</emphasis>
1413 &#32;&#32;{&#32;__path_iter_advance(__i,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link><emphasis role="keyword">&gt;</emphasis>(__n));&#32;}
1414 
1415 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">template</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>__shared_ptr&lt;const&#32;filesystem::filesystem_error::_Impl&gt;;
1416 
1418 
1419 <emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
1420 <emphasis role="comment">//&#32;3657.&#32;std::hash&lt;std::filesystem::path&gt;&#32;is&#32;not&#32;enabled</emphasis>
1421 <emphasis role="keyword">template</emphasis>&lt;&gt;
1422 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>hash&lt;filesystem::path&gt;
1423 &#32;&#32;{
1424 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>
1425 &#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;filesystem::path&amp;&#32;__p)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1426 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;filesystem::hash_value(__p);&#32;}
1427 &#32;&#32;};
1428 
1429 _GLIBCXX_END_NAMESPACE_VERSION
1430 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
1431 
1432 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
1433 
1434 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_FS_PATH_H</emphasis>
</programlisting></section>
