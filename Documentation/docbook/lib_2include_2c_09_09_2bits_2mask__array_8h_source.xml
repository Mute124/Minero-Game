<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2bits_2mask__array_8h_source" xml:lang="en-US">
<title>mask_array.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/bits/mask_array.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;The&#32;template&#32;and&#32;inlines&#32;for&#32;the&#32;-*-&#32;C++&#32;-*-&#32;mask_array&#32;class.</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;1997-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="comment">//&#32;Written&#32;by&#32;Gabriel&#32;Dos&#32;Reis&#32;&lt;Gabriel.Dos-Reis@DPTMaths.ENS-Cachan.Fr&gt;</emphasis>
31 
32 <emphasis role="preprocessor">#ifndef&#32;_MASK_ARRAY_H</emphasis>
33 <emphasis role="preprocessor">#define&#32;_MASK_ARRAY_H&#32;1</emphasis>
34 
35 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
36 
37 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
38 {
39 _GLIBCXX_BEGIN_NAMESPACE_VERSION
40 
61 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Tp&gt;
62 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>mask_array
63 &#32;&#32;&#32;&#32;{
64 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
65 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;value_type;
66 
67 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
68 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;253.&#32;valarray&#32;helper&#32;functions&#32;are&#32;almost&#32;entirely&#32;useless</emphasis>
69 
71 &#32;&#32;&#32;&#32;&#32;&#32;mask_array&#32;(<emphasis role="keyword">const</emphasis>&#32;mask_array&amp;);
72 &#32;&#32;&#32;&#32;&#32;&#32;
75 &#32;&#32;&#32;&#32;&#32;&#32;mask_array&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;mask_array&amp;);
76 
77 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
79 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator*=(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
81 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator/=(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
83 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator%=(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
85 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
87 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator-=(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
89 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator^=(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
91 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator&amp;=(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
93 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator|=(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
95 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator&lt;&lt;=(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
97 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator&gt;&gt;=(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
99 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;)&#32;<emphasis role="keyword">const</emphasis>;
100 
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~mask_array&#32;();</emphasis>
102 
103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;_Expr&lt;_Dom,_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
105 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator*=(<emphasis role="keyword">const</emphasis>&#32;_Expr&lt;_Dom,_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
107 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator/=(<emphasis role="keyword">const</emphasis>&#32;_Expr&lt;_Dom,_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator%=(<emphasis role="keyword">const</emphasis>&#32;_Expr&lt;_Dom,_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
111 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(<emphasis role="keyword">const</emphasis>&#32;_Expr&lt;_Dom,_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
113 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator-=(<emphasis role="keyword">const</emphasis>&#32;_Expr&lt;_Dom,_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
115 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator^=(<emphasis role="keyword">const</emphasis>&#32;_Expr&lt;_Dom,_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
117 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator&amp;=(<emphasis role="keyword">const</emphasis>&#32;_Expr&lt;_Dom,_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
119 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator|=(<emphasis role="keyword">const</emphasis>&#32;_Expr&lt;_Dom,_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
121 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator&lt;&lt;=(<emphasis role="keyword">const</emphasis>&#32;_Expr&lt;_Dom,_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
123 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator&gt;&gt;=(<emphasis role="keyword">const</emphasis>&#32;_Expr&lt;_Dom,_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
125 
126 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
127 &#32;&#32;&#32;&#32;&#32;&#32;mask_array(_Array&lt;_Tp&gt;,&#32;<emphasis role="keywordtype">size_t</emphasis>,&#32;_Array&lt;bool&gt;);
128 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>valarray&lt;_Tp&gt;;
129 
130 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_sz;
131 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Array&lt;bool&gt;&#32;_M_mask;
132 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Array&lt;_Tp&gt;&#32;&#32;_M_array;
133 
134 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
135 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;not&#32;implemented</emphasis>
136 &#32;&#32;&#32;&#32;&#32;&#32;mask_array();
137 <emphasis role="preprocessor">#else</emphasis>
138 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
139 &#32;&#32;&#32;&#32;&#32;&#32;mask_array()&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
140 <emphasis role="preprocessor">#endif</emphasis>
141 &#32;&#32;&#32;&#32;};
142 
143 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
144 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;mask_array&lt;_Tp&gt;::mask_array(<emphasis role="keyword">const</emphasis>&#32;mask_array&lt;_Tp&gt;&amp;&#32;__a)
145 &#32;&#32;&#32;&#32;:&#32;_M_sz(__a._M_sz),&#32;_M_mask(__a._M_mask),&#32;_M_array(__a._M_array)&#32;{}
146 
147 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
148 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>
149 &#32;&#32;&#32;&#32;mask_array&lt;_Tp&gt;::mask_array(_Array&lt;_Tp&gt;&#32;__a,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__s,&#32;_Array&lt;bool&gt;&#32;__m)
150 &#32;&#32;&#32;&#32;:&#32;_M_sz(__s),&#32;_M_mask(__m),&#32;_M_array(__a)&#32;{}
151 
152 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
153 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;mask_array&lt;_Tp&gt;&amp;
154 &#32;&#32;&#32;&#32;mask_array&lt;_Tp&gt;::operator=(<emphasis role="keyword">const</emphasis>&#32;mask_array&lt;_Tp&gt;&amp;&#32;__a)
155 &#32;&#32;&#32;&#32;{
156 &#32;&#32;&#32;&#32;&#32;&#32;std::__valarray_copy(__a._M_array,&#32;__a._M_mask,
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_sz,&#32;_M_array,&#32;_M_mask);
158 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
159 &#32;&#32;&#32;&#32;}
160 
161 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
162 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
163 &#32;&#32;&#32;&#32;mask_array&lt;_Tp&gt;::operator=(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__t)<emphasis role="keyword">&#32;const</emphasis>
164 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;std::__valarray_fill(_M_array,&#32;_M_sz,&#32;_M_mask,&#32;__t);&#32;}
165 
166 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
167 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
168 &#32;&#32;&#32;&#32;mask_array&lt;_Tp&gt;::operator=(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;&#32;__v)<emphasis role="keyword">&#32;const</emphasis>
169 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;std::__valarray_copy(_Array&lt;_Tp&gt;(__v),&#32;__v.size(),&#32;_M_array,&#32;_M_mask);&#32;}
170 
171 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
172 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Ex&gt;
173 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
174 &#32;&#32;&#32;&#32;&#32;&#32;mask_array&lt;_Tp&gt;::operator=(<emphasis role="keyword">const</emphasis>&#32;_Expr&lt;_Ex,&#32;_Tp&gt;&amp;&#32;__e)<emphasis role="keyword">&#32;const</emphasis>
175 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;std::__valarray_copy(__e,&#32;__e.size(),&#32;_M_array,&#32;_M_mask);&#32;}
176 
177 <emphasis role="preprocessor">#undef&#32;_DEFINE_VALARRAY_OPERATOR</emphasis>
178 <emphasis role="preprocessor">#define&#32;_DEFINE_VALARRAY_OPERATOR(_Op,&#32;_Name)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
179 <emphasis role="preprocessor">&#32;&#32;template&lt;typename&#32;_Tp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
180 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;inline&#32;void&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
181 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;mask_array&lt;_Tp&gt;::operator&#32;_Op##=(const&#32;valarray&lt;_Tp&gt;&amp;&#32;__v)&#32;const&#32;&#32;&#32;&#32;\</emphasis>
182 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
183 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;_Array_augmented_##_Name(_M_array,&#32;_M_mask,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
184 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Array&lt;_Tp&gt;(__v),&#32;__v.size());&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
185 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
186 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
187 <emphasis role="preprocessor">&#32;&#32;template&lt;typename&#32;_Tp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
188 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;class&#32;_Dom&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
189 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;inline&#32;void&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
190 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;mask_array&lt;_Tp&gt;::operator&#32;_Op##=(const&#32;_Expr&lt;_Dom,&#32;_Tp&gt;&amp;&#32;__e)&#32;const\</emphasis>
191 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
192 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_Array_augmented_##_Name(_M_array,&#32;_M_mask,&#32;__e,&#32;__e.size());&#32;&#32;&#32;\</emphasis>
193 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
194 
195 <link linkend="__classes_2lib_2include_2c_09_09_2bits_2mask__array_8h_1a1bbc3ad528ecadf228a0f40f301787ac">_DEFINE_VALARRAY_OPERATOR</link>(*,&#32;__multiplies)
196 <link linkend="__classes_2lib_2include_2c_09_09_2bits_2mask__array_8h_1a1bbc3ad528ecadf228a0f40f301787ac">_DEFINE_VALARRAY_OPERATOR</link>(/,&#32;__divides)
197 <link linkend="__classes_2lib_2include_2c_09_09_2bits_2mask__array_8h_1a1bbc3ad528ecadf228a0f40f301787ac">_DEFINE_VALARRAY_OPERATOR</link>(%,&#32;__modulus)
198 <link linkend="__classes_2lib_2include_2c_09_09_2bits_2mask__array_8h_1a1bbc3ad528ecadf228a0f40f301787ac">_DEFINE_VALARRAY_OPERATOR</link>(+,&#32;__plus)
199 <link linkend="__classes_2lib_2include_2c_09_09_2bits_2mask__array_8h_1a1bbc3ad528ecadf228a0f40f301787ac">_DEFINE_VALARRAY_OPERATOR</link>(-,&#32;__minus)
200 <link linkend="__classes_2lib_2include_2c_09_09_2bits_2mask__array_8h_1a1bbc3ad528ecadf228a0f40f301787ac">_DEFINE_VALARRAY_OPERATOR</link>(^,&#32;__bitwise_xor)
201 <link linkend="__classes_2lib_2include_2c_09_09_2bits_2mask__array_8h_1a1bbc3ad528ecadf228a0f40f301787ac">_DEFINE_VALARRAY_OPERATOR</link>(&amp;,&#32;__bitwise_and)
202 <link linkend="__classes_2lib_2include_2c_09_09_2bits_2mask__array_8h_1a1bbc3ad528ecadf228a0f40f301787ac">_DEFINE_VALARRAY_OPERATOR</link>(|,&#32;__bitwise_or)
203 <link linkend="__classes_2lib_2include_2c_09_09_2bits_2mask__array_8h_1a1bbc3ad528ecadf228a0f40f301787ac">_DEFINE_VALARRAY_OPERATOR</link>(&lt;&lt;,&#32;__shift_left)
204 <link linkend="__classes_2lib_2include_2c_09_09_2bits_2mask__array_8h_1a1bbc3ad528ecadf228a0f40f301787ac">_DEFINE_VALARRAY_OPERATOR</link>(&gt;&gt;,&#32;__shift_right)
205 
206 <emphasis role="preprocessor">#undef&#32;_DEFINE_VALARRAY_OPERATOR</emphasis>
207 
209 
210 _GLIBCXX_END_NAMESPACE_VERSION
211 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
212 
213 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_MASK_ARRAY_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
