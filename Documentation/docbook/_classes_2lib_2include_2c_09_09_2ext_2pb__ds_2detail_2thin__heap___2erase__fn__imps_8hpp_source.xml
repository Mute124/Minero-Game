<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2thin__heap___2erase__fn__imps_8hpp_source" xml:lang="en-US">
<title>erase_fn_imps.hpp</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/ext/pb_ds/detail/thin_heap_/erase_fn_imps.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2005-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2004&#32;Ami&#32;Tavory&#32;and&#32;Vladimir&#32;Dreizin,&#32;IBM-HRL.</emphasis>
26 
27 <emphasis role="comment">//&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;sell,&#32;and&#32;distribute&#32;this&#32;software</emphasis>
28 <emphasis role="comment">//&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,&#32;provided&#32;that&#32;the&#32;above&#32;copyright</emphasis>
29 <emphasis role="comment">//&#32;notice&#32;appears&#32;in&#32;all&#32;copies,&#32;and&#32;that&#32;both&#32;that&#32;copyright&#32;notice</emphasis>
30 <emphasis role="comment">//&#32;and&#32;this&#32;permission&#32;notice&#32;appear&#32;in&#32;supporting&#32;documentation.&#32;None</emphasis>
31 <emphasis role="comment">//&#32;of&#32;the&#32;above&#32;authors,&#32;nor&#32;IBM&#32;Haifa&#32;Research&#32;Laboratories,&#32;make&#32;any</emphasis>
32 <emphasis role="comment">//&#32;representation&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
33 <emphasis role="comment">//&#32;purpose.&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied</emphasis>
34 <emphasis role="comment">//&#32;warranty.</emphasis>
35 
41 <emphasis role="preprocessor">#ifdef&#32;PB_DS_CLASS_C_DEC</emphasis>
42 
43 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
44 <emphasis role="keywordtype">void</emphasis>
45 PB_DS_CLASS_C_DEC::
46 pop()
47 {
48 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
49 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(!base_type::empty());
50 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(m_p_max&#32;!=&#32;0);
51 
52 &#32;&#32;node_pointer&#32;p_nd&#32;=&#32;m_p_max;
53 &#32;&#32;remove_max_node();
54 &#32;&#32;base_type::actual_erase_node(p_nd);
55 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*this))
56 }
57 
58 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
59 inline&#32;<emphasis role="keywordtype">void</emphasis>
60 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::
61 remove_max_node()
62 {
63 &#32;&#32;to_aux_except_max();
64 &#32;&#32;make_from_aux();
65 }
66 
67 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
68 <emphasis role="keywordtype">void</emphasis>
69 PB_DS_CLASS_C_DEC::
70 to_aux_except_max()
71 {
72 &#32;&#32;node_pointer&#32;p_add&#32;=&#32;base_type::m_p_root;
73 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(p_add&#32;!=&#32;m_p_max)
74 &#32;&#32;&#32;&#32;{
75 &#32;&#32;&#32;&#32;&#32;&#32;node_pointer&#32;p_next_add&#32;=&#32;p_add-&gt;m_p_next_sibling;
76 &#32;&#32;&#32;&#32;&#32;&#32;add_to_aux(p_add);
77 &#32;&#32;&#32;&#32;&#32;&#32;p_add&#32;=&#32;p_next_add;
78 &#32;&#32;&#32;&#32;}
79 
80 &#32;&#32;p_add&#32;=&#32;m_p_max-&gt;m_p_l_child;
81 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(p_add&#32;!=&#32;0)
82 &#32;&#32;&#32;&#32;{
83 &#32;&#32;&#32;&#32;&#32;&#32;node_pointer&#32;p_next_add&#32;=&#32;p_add-&gt;m_p_next_sibling;
84 &#32;&#32;&#32;&#32;&#32;&#32;p_add-&gt;m_metadata&#32;=&#32;p_add-&gt;m_p_l_child&#32;==&#32;0&#32;?
85 &#32;&#32;&#32;&#32;0&#32;:&#32;p_add-&gt;m_p_l_child-&gt;m_metadata&#32;+&#32;1;
86 
87 &#32;&#32;&#32;&#32;&#32;&#32;add_to_aux(p_add);
88 &#32;&#32;&#32;&#32;&#32;&#32;p_add&#32;=&#32;p_next_add;
89 &#32;&#32;&#32;&#32;}
90 
91 &#32;&#32;p_add&#32;=&#32;m_p_max-&gt;m_p_next_sibling;
92 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(p_add&#32;!=&#32;0)
93 &#32;&#32;&#32;&#32;{
94 &#32;&#32;&#32;&#32;&#32;&#32;node_pointer&#32;p_next_add&#32;=&#32;p_add-&gt;m_p_next_sibling;
95 &#32;&#32;&#32;&#32;&#32;&#32;add_to_aux(p_add);
96 &#32;&#32;&#32;&#32;&#32;&#32;p_add&#32;=&#32;p_next_add;
97 &#32;&#32;&#32;&#32;}
98 }
99 
100 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
101 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
102 PB_DS_CLASS_C_DEC::
103 add_to_aux(node_pointer&#32;p_nd)
104 {
105 &#32;&#32;size_type&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abe08814c2f72843fde4d8df41440d5a0">r</link>&#32;=&#32;p_nd-&gt;m_metadata;
106 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(m_a_aux[<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abe08814c2f72843fde4d8df41440d5a0">r</link>]&#32;!=&#32;0)
107 &#32;&#32;&#32;&#32;{
108 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_nd-&gt;m_metadata&#32;&lt;&#32;rank_bound());
109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Cmp_Fn::operator()(m_a_aux[<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abe08814c2f72843fde4d8df41440d5a0">r</link>]-&gt;m_value,&#32;p_nd-&gt;m_value))
110 &#32;&#32;&#32;&#32;make_child_of(m_a_aux[<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abe08814c2f72843fde4d8df41440d5a0">r</link>],&#32;p_nd);
111 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
112 &#32;&#32;&#32;&#32;{
113 &#32;&#32;&#32;&#32;&#32;&#32;make_child_of(p_nd,&#32;m_a_aux[<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abe08814c2f72843fde4d8df41440d5a0">r</link>]);
114 &#32;&#32;&#32;&#32;&#32;&#32;p_nd&#32;=&#32;m_a_aux[<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abe08814c2f72843fde4d8df41440d5a0">r</link>];
115 &#32;&#32;&#32;&#32;}
116 
117 &#32;&#32;&#32;&#32;&#32;&#32;m_a_aux[<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abe08814c2f72843fde4d8df41440d5a0">r</link>]&#32;=&#32;0;
118 &#32;&#32;&#32;&#32;&#32;&#32;++<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abe08814c2f72843fde4d8df41440d5a0">r</link>;
119 &#32;&#32;&#32;&#32;}
120 
121 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_nd-&gt;m_metadata&#32;&lt;&#32;rank_bound());
122 
123 &#32;&#32;m_a_aux[<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abe08814c2f72843fde4d8df41440d5a0">r</link>]&#32;=&#32;p_nd;
124 }
125 
126 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
127 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
128 PB_DS_CLASS_C_DEC::
129 make_child_of(node_pointer&#32;p_nd,&#32;node_pointer&#32;p_new_parent)
130 {
131 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_nd-&gt;m_metadata&#32;==&#32;p_new_parent-&gt;m_metadata);
132 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(m_a_aux[p_nd-&gt;m_metadata]&#32;==&#32;p_nd&#32;||
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_a_aux[p_nd-&gt;m_metadata]&#32;==&#32;p_new_parent);
134 
135 &#32;&#32;++p_new_parent-&gt;m_metadata;
136 &#32;&#32;base_type::make_child_of(p_nd,&#32;p_new_parent);
137 }
138 
139 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
140 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
141 PB_DS_CLASS_C_DEC::
142 make_from_aux()
143 {
144 &#32;&#32;base_type::m_p_root&#32;=&#32;m_p_max&#32;=&#32;0;
145 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;rnk_bnd&#32;=&#32;rank_bound();
146 &#32;&#32;size_type&#32;i&#32;=&#32;0;
147 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(i&#32;&lt;&#32;rnk_bnd)
148 &#32;&#32;&#32;&#32;{
149 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_a_aux[i]&#32;!=&#32;0)
150 &#32;&#32;&#32;&#32;{
151 &#32;&#32;&#32;&#32;&#32;&#32;make_root_and_link(m_a_aux[i]);
152 &#32;&#32;&#32;&#32;&#32;&#32;m_a_aux[i]&#32;=&#32;0;
153 &#32;&#32;&#32;&#32;}
154 &#32;&#32;&#32;&#32;&#32;&#32;++i;
155 &#32;&#32;&#32;&#32;}
156 
157 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2thin__heap___2thin__heap___8hpp_1a9a9d5bcc0c4c8f5e297987ac4a5802ca">PB_DS_ASSERT_AUX_NULL</link>((*<emphasis role="keyword">this</emphasis>))
158 }
159 
160 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
161 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
162 PB_DS_CLASS_C_DEC::
163 remove_node(node_pointer&#32;p_nd)
164 {
165 &#32;&#32;node_pointer&#32;p_parent&#32;=&#32;p_nd;
166 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(base_type::parent(p_parent)&#32;!=&#32;0)
167 &#32;&#32;&#32;&#32;p_parent&#32;=&#32;base_type::parent(p_parent);
168 
169 &#32;&#32;base_type::bubble_to_top(p_nd);
170 &#32;&#32;m_p_max&#32;=&#32;p_nd;
171 
172 &#32;&#32;node_pointer&#32;p_fix&#32;=&#32;base_type::m_p_root;
173 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(p_fix&#32;!=&#32;0&amp;&amp;&#32;&#32;p_fix-&gt;m_p_next_sibling&#32;!=&#32;p_parent)
174 &#32;&#32;&#32;&#32;p_fix&#32;=&#32;p_fix-&gt;m_p_next_sibling;
175 
176 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_fix&#32;!=&#32;0)
177 &#32;&#32;&#32;&#32;p_fix-&gt;m_p_next_sibling&#32;=&#32;p_nd;
178 
179 &#32;&#32;remove_max_node();
180 }
181 
182 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
183 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
184 PB_DS_CLASS_C_DEC::
185 clear()
186 {
187 &#32;&#32;base_type::clear();
188 &#32;&#32;m_p_max&#32;=&#32;0;
189 }
190 
191 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
192 <emphasis role="keywordtype">void</emphasis>
193 PB_DS_CLASS_C_DEC::
194 erase(point_iterator&#32;it)
195 {
196 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
197 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(!base_type::empty());
198 
199 &#32;&#32;node_pointer&#32;p_nd&#32;=&#32;it.m_p_nd;
200 &#32;&#32;remove_node(p_nd);
201 &#32;&#32;base_type::actual_erase_node(p_nd);
202 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*this))
203 }
204 
205 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
206 template&lt;typename&#32;Pred&gt;
207 typename&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::size_type
208 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::
209 erase_if(Pred&#32;pred)
210 {
211 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
212 &#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(base_type::empty())
213 &#32;&#32;&#32;&#32;{
214 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
215 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;0;
216 &#32;&#32;&#32;&#32;}
217 
218 &#32;&#32;base_type::to_linked_list();
219 &#32;&#32;node_pointer&#32;p_out&#32;=&#32;base_type::prune(pred);
220 &#32;&#32;size_type&#32;ersd&#32;=&#32;0;
221 &#32;&#32;while&#32;(p_out&#32;!=&#32;0)
222 &#32;&#32;&#32;&#32;{
223 &#32;&#32;&#32;&#32;&#32;&#32;++ersd;
224 &#32;&#32;&#32;&#32;&#32;&#32;node_pointer&#32;p_next&#32;=&#32;p_out-&gt;m_p_next_sibling;
225 &#32;&#32;&#32;&#32;&#32;&#32;base_type::actual_erase_node(p_out);
226 &#32;&#32;&#32;&#32;&#32;&#32;p_out&#32;=&#32;p_next;
227 &#32;&#32;&#32;&#32;}
228 
229 &#32;&#32;node_pointer&#32;p_cur&#32;=&#32;base_type::m_p_root;
230 &#32;&#32;m_p_max&#32;=&#32;base_type::m_p_root&#32;=&#32;0;
231 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(p_cur&#32;!=&#32;0)
232 &#32;&#32;&#32;&#32;{
233 &#32;&#32;&#32;&#32;&#32;&#32;node_pointer&#32;p_next&#32;=&#32;p_cur-&gt;m_p_next_sibling;
234 &#32;&#32;&#32;&#32;&#32;&#32;make_root_and_link(p_cur);
235 &#32;&#32;&#32;&#32;&#32;&#32;p_cur&#32;=&#32;p_next;
236 &#32;&#32;&#32;&#32;}
237 
238 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
239 &#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;ersd;
240 }
241 
242 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
243 inline&#32;typename&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::size_type
244 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::
245 rank_bound()
246 {
247 &#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis><link linkend="_namespacestd">std</link>;
248 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;<emphasis role="keyword">const</emphasis>&#32;p_upper&#32;=
249 &#32;&#32;&#32;&#32;std::upper_bound(g_a_rank_bounds,
250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g_a_rank_bounds&#32;+&#32;num_distinct_rank_bounds,
251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;base_type::m_size);
252 
253 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_upper&#32;==&#32;g_a_rank_bounds&#32;+&#32;num_distinct_rank_bounds)
254 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;max_rank;
255 
256 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(p_upper&#32;-&#32;g_a_rank_bounds);
257 }
258 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
