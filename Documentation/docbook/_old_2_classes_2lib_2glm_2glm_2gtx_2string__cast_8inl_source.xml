<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2glm_2glm_2gtx_2string__cast_8inl_source" xml:lang="en-US">
<title>string_cast.inl</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/glm/glm/gtx/string_cast.inl</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 
2 
3 <emphasis role="preprocessor">#include&#32;&lt;cstdarg&gt;</emphasis>
4 <emphasis role="preprocessor">#include&#32;&lt;cstdio&gt;</emphasis>
5 
6 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceglm">glm</link>{
7 <emphasis role="keyword">namespace&#32;</emphasis>detail
8 {
9 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
10 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_namespacecast">cast</link>
11 &#32;&#32;&#32;&#32;{
12 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;T&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">value_type</link>;
13 &#32;&#32;&#32;&#32;};
14 
15 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
16 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_namespacecast">cast</link>&lt;float&gt;
17 &#32;&#32;&#32;&#32;{
18 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_structglm_1_1detail_1_1cast_3_01float_01_4_1ada0eba4cef43496c87fbb3e3e42f1541">value_type</link>;
19 &#32;&#32;&#32;&#32;};
20 
21 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;std::string&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;msg,&#32;...)
22 &#32;&#32;&#32;&#32;{
23 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;<emphasis role="keyword">const</emphasis>&#32;STRING_BUFFER(4096);
24 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;text[STRING_BUFFER];
25 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdarg_8h_1a8c1b94dabde2c11f430bb83e37bdb0a1">va_list</link>&#32;list;
26 
27 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(msg&#32;==&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a105c350b9aa12c8a62f4a134e1ba1f6f">GLM_NULLPTR</link>)
28 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::string();
29 
30 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdarg_8h_1aa0628ab596c3d7e78f5e08c2d98e24da">va_start</link>(list,&#32;msg);
31 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_VC)</emphasis>
32 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vsprintf_s(text,&#32;STRING_BUFFER,&#32;msg,&#32;list);
33 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;else</emphasis><emphasis role="comment">//</emphasis>
34 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vsprintf(text,&#32;msg,&#32;list);
35 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;endif</emphasis><emphasis role="comment">//</emphasis>
36 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdarg_8h_1a823b205416e9129825841b74c3bf8484">va_end</link>(list);
37 
38 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::string(text);
39 &#32;&#32;&#32;&#32;}
40 
41 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;LabelTrue&#32;=&#32;<emphasis role="stringliteral">&quot;true&quot;</emphasis>;
42 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;LabelFalse&#32;=&#32;<emphasis role="stringliteral">&quot;false&quot;</emphasis>;
43 
44 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isFloat&#32;=&#32;false&gt;
45 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>literal
46 &#32;&#32;&#32;&#32;{
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;<link linkend="_structglm_1_1detail_1_1literal_1aac6e46899f1ec943291c8f43ac426abc">value</link>()&#32;{<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;%d&quot;</emphasis>;}
48 &#32;&#32;&#32;&#32;};
49 
50 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
51 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>literal&lt;T,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
52 &#32;&#32;&#32;&#32;{
53 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;<link linkend="_structglm_1_1detail_1_1literal_3_01_t_00_01true_01_4_1a433c627b754e491601a9e538ba635529">value</link>()&#32;{<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;%f&quot;</emphasis>;}
54 &#32;&#32;&#32;&#32;};
55 
56 <emphasis role="preprocessor">#&#32;&#32;&#32;if&#32;GLM_MODEL&#32;==&#32;GLM_MODEL_32&#32;&amp;&amp;&#32;GLM_COMPILER&#32;&amp;&amp;&#32;GLM_COMPILER_VC</emphasis>
57 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
58 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>literal&lt;<link linkend="_group__gtc__type__precision_1ga058f57c19e1befdcf12498944bd73e69">uint64_t</link>,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>&gt;
59 &#32;&#32;&#32;&#32;{
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;<link linkend="_structglm_1_1detail_1_1literal_1aac6e46899f1ec943291c8f43ac426abc">value</link>()&#32;{<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;%lld&quot;</emphasis>;}
61 &#32;&#32;&#32;&#32;};
62 
63 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
64 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>literal&lt;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>&gt;
65 &#32;&#32;&#32;&#32;{
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;<link linkend="_structglm_1_1detail_1_1literal_1aac6e46899f1ec943291c8f43ac426abc">value</link>()&#32;{<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;%lld&quot;</emphasis>;}
67 &#32;&#32;&#32;&#32;};
68 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis><emphasis role="comment">//GLM_MODEL&#32;==&#32;GLM_MODEL_32&#32;&amp;&amp;&#32;GLM_COMPILER&#32;&amp;&amp;&#32;GLM_COMPILER_VC</emphasis>
69 
70 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
71 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>prefix{};
72 
73 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
74 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>prefix&lt;float&gt;
75 &#32;&#32;&#32;&#32;{
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;<link linkend="_structglm_1_1detail_1_1prefix_3_01float_01_4_1a9d16b3fb1126b1546d43ac07129602e6">value</link>()&#32;{<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;}
77 &#32;&#32;&#32;&#32;};
78 
79 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
80 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>prefix&lt;double&gt;
81 &#32;&#32;&#32;&#32;{
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;<link linkend="_structglm_1_1detail_1_1prefix_3_01double_01_4_1ababa67831e9dd9272ef7636df7185033">value</link>()&#32;{<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;d&quot;</emphasis>;}
83 &#32;&#32;&#32;&#32;};
84 
85 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
86 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>prefix&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>&gt;
87 &#32;&#32;&#32;&#32;{
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;<link linkend="_structglm_1_1detail_1_1prefix_3_01bool_01_4_1adfe96a222d04e512c7bda7af53969b9c">value</link>()&#32;{<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis>;}
89 &#32;&#32;&#32;&#32;};
90 
91 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
92 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>prefix&lt;<link linkend="_group__gtc__type__precision_1ga93adf6dd9803408f3e3aaf9dedda352b">uint8_t</link>&gt;
93 &#32;&#32;&#32;&#32;{
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;<link linkend="_structglm_1_1detail_1_1prefix_3_01uint8__t_01_4_1ab9204489be2389c7258e998552b5b455">value</link>()&#32;{<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;u8&quot;</emphasis>;}
95 &#32;&#32;&#32;&#32;};
96 
97 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
98 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>prefix&lt;<link linkend="_group__gtc__type__precision_1ga673898d450b2a91186f3c4f40c5f8633">int8_t</link>&gt;
99 &#32;&#32;&#32;&#32;{
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;<link linkend="_structglm_1_1detail_1_1prefix_3_01int8__t_01_4_1a56e614ca2094e23cab4d1f704782ce0d">value</link>()&#32;{<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;i8&quot;</emphasis>;}
101 &#32;&#32;&#32;&#32;};
102 
103 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
104 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>prefix&lt;<link linkend="_group__gtc__type__precision_1gac4eb4f43cae8129b00086dc234d3b8fc">uint16_t</link>&gt;
105 &#32;&#32;&#32;&#32;{
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;<link linkend="_structglm_1_1detail_1_1prefix_3_01uint16__t_01_4_1a11b8bef270c5e3c24c88d66d453e88d0">value</link>()&#32;{<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;u16&quot;</emphasis>;}
107 &#32;&#32;&#32;&#32;};
108 
109 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
110 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>prefix&lt;<link linkend="_group__gtc__type__precision_1gaf89ee61e0d34aa4a462104b7ae7f2da6">int16_t</link>&gt;
111 &#32;&#32;&#32;&#32;{
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;<link linkend="_structglm_1_1detail_1_1prefix_3_01int16__t_01_4_1a48a974e1447bd549ad41429486428202">value</link>()&#32;{<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;i16&quot;</emphasis>;}
113 &#32;&#32;&#32;&#32;};
114 
115 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
116 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>prefix&lt;<link linkend="_group__gtc__type__precision_1ga822ca53a9ad412504532838906276a99">uint32_t</link>&gt;
117 &#32;&#32;&#32;&#32;{
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;<link linkend="_structglm_1_1detail_1_1prefix_3_01uint32__t_01_4_1a1b16ec469504e085e33cfff11948907f">value</link>()&#32;{<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;u&quot;</emphasis>;}
119 &#32;&#32;&#32;&#32;};
120 
121 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
122 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>prefix&lt;<link linkend="_group__gtc__type__precision_1gab870c0eb6f525b0c8c4716762e0fc3a8">int32_t</link>&gt;
123 &#32;&#32;&#32;&#32;{
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;<link linkend="_structglm_1_1detail_1_1prefix_3_01int32__t_01_4_1a0c7a5f8b6120c28d8d6a1c60de252e81">value</link>()&#32;{<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;i&quot;</emphasis>;}
125 &#32;&#32;&#32;&#32;};
126 
127 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
128 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>prefix&lt;<link linkend="_group__gtc__type__precision_1ga058f57c19e1befdcf12498944bd73e69">uint64_t</link>&gt;
129 &#32;&#32;&#32;&#32;{
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;<link linkend="_structglm_1_1detail_1_1prefix_3_01uint64__t_01_4_1a50167a3c6c07df6970fceb6a8a0fe4a7">value</link>()&#32;{<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;u64&quot;</emphasis>;}
131 &#32;&#32;&#32;&#32;};
132 
133 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
134 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>prefix&lt;<link linkend="_group__gtc__type__precision_1ga6abb23fbf4e39c50ec5341160b5da5ab">int64_t</link>&gt;
135 &#32;&#32;&#32;&#32;{
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;<link linkend="_structglm_1_1detail_1_1prefix_3_01int64__t_01_4_1a0c490a6f93bbc7d0c8de2bf33457fd39">value</link>()&#32;{<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;i64&quot;</emphasis>;}
137 &#32;&#32;&#32;&#32;};
138 
139 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;matType&gt;
140 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>compute_to_string
141 &#32;&#32;&#32;&#32;{};
142 
143 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;qualifier&#32;Q&gt;
144 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>compute_to_string&lt;vec&lt;1,&#32;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>,&#32;Q&gt;&#32;&gt;
145 &#32;&#32;&#32;&#32;{
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_structglm_1_1detail_1_1compute__to__string_3_01vec_3_011_00_01bool_00_01_q_01_4_01_4_1ad6119763fcff0254a57ae8a51a9f5915">call</link>(<link linkend="_structglm_1_1vec">vec&lt;1, bool, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceglm_1_1detail_1acd5305bbd1c5417b1eb770faf8229d14">detail::format</link>(<emphasis role="stringliteral">&quot;bvec1(%s)&quot;</emphasis>,
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[0]&#32;?&#32;detail::LabelTrue&#32;:&#32;detail::LabelFalse);
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
151 &#32;&#32;&#32;&#32;};
152 
153 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;qualifier&#32;Q&gt;
154 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>compute_to_string&lt;<link linkend="_structglm_1_1vec">vec</link>&lt;2,&#32;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>,&#32;Q&gt;&#32;&gt;
155 &#32;&#32;&#32;&#32;{
156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_structglm_1_1detail_1_1compute__to__string_3_01vec_3_012_00_01bool_00_01_q_01_4_01_4_1a08b55aa0b86bc8176b9fa02f0520c434">call</link>(<link linkend="_structglm_1_1vec">vec&lt;2, bool, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceglm_1_1detail_1acd5305bbd1c5417b1eb770faf8229d14">detail::format</link>(<emphasis role="stringliteral">&quot;bvec2(%s,&#32;%s)&quot;</emphasis>,
159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[0]&#32;?&#32;detail::LabelTrue&#32;:&#32;detail::LabelFalse,
160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[1]&#32;?&#32;detail::LabelTrue&#32;:&#32;detail::LabelFalse);
161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
162 &#32;&#32;&#32;&#32;};
163 
164 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;qualifier&#32;Q&gt;
165 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>compute_to_string&lt;<link linkend="_structglm_1_1vec">vec</link>&lt;3,&#32;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>,&#32;Q&gt;&#32;&gt;
166 &#32;&#32;&#32;&#32;{
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_structglm_1_1detail_1_1compute__to__string_3_01vec_3_013_00_01bool_00_01_q_01_4_01_4_1a05dff60a280662ac95d5e22eae28c730">call</link>(<link linkend="_structglm_1_1vec">vec&lt;3, bool, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceglm_1_1detail_1acd5305bbd1c5417b1eb770faf8229d14">detail::format</link>(<emphasis role="stringliteral">&quot;bvec3(%s,&#32;%s,&#32;%s)&quot;</emphasis>,
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[0]&#32;?&#32;detail::LabelTrue&#32;:&#32;detail::LabelFalse,
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[1]&#32;?&#32;detail::LabelTrue&#32;:&#32;detail::LabelFalse,
172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[2]&#32;?&#32;detail::LabelTrue&#32;:&#32;detail::LabelFalse);
173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
174 &#32;&#32;&#32;&#32;};
175 
176 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;qualifier&#32;Q&gt;
177 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>compute_to_string&lt;<link linkend="_structglm_1_1vec">vec</link>&lt;4,&#32;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>,&#32;Q&gt;&#32;&gt;
178 &#32;&#32;&#32;&#32;{
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_structglm_1_1detail_1_1compute__to__string_3_01vec_3_014_00_01bool_00_01_q_01_4_01_4_1acc9ef66b31a0aaa989ee98614e340e27">call</link>(<link linkend="_structglm_1_1vec">vec&lt;4, bool, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceglm_1_1detail_1acd5305bbd1c5417b1eb770faf8229d14">detail::format</link>(<emphasis role="stringliteral">&quot;bvec4(%s,&#32;%s,&#32;%s,&#32;%s)&quot;</emphasis>,
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[0]&#32;?&#32;detail::LabelTrue&#32;:&#32;detail::LabelFalse,
183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[1]&#32;?&#32;detail::LabelTrue&#32;:&#32;detail::LabelFalse,
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[2]&#32;?&#32;detail::LabelTrue&#32;:&#32;detail::LabelFalse,
185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[3]&#32;?&#32;detail::LabelTrue&#32;:&#32;detail::LabelFalse);
186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
187 &#32;&#32;&#32;&#32;};
188 
189 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
190 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>compute_to_string&lt;<link linkend="_structglm_1_1vec">vec</link>&lt;1,&#32;T,&#32;Q&gt;&#32;&gt;
191 &#32;&#32;&#32;&#32;{
192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_structglm_1_1detail_1_1compute__to__string_3_01vec_3_011_00_01_t_00_01_q_01_4_01_4_1ad8aa70be55855aba1c6c6796caf5b0cf">call</link>(<link linkend="_structglm_1_1vec">vec&lt;1, T, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;PrefixStr&#32;=&#32;<link linkend="_structglm_1_1detail_1_1prefix">prefix&lt;T&gt;::value</link>();
195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;LiteralStr&#32;=&#32;<link linkend="_structglm_1_1detail_1_1literal">literal&lt;T, std::numeric_limits&lt;T&gt;::is_iec559</link>&gt;<link linkend="_classvalue">::value</link>();
196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;FormatStr(<link linkend="_namespaceglm_1_1detail_1acd5305bbd1c5417b1eb770faf8229d14">detail::format</link>(<emphasis role="stringliteral">&quot;%svec1(%s)&quot;</emphasis>,
197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrefixStr,
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LiteralStr));
199 
200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceglm_1_1detail_1acd5305bbd1c5417b1eb770faf8229d14">detail::format</link>(FormatStr.c_str(),
201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[0]));
202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
203 &#32;&#32;&#32;&#32;};
204 
205 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
206 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>compute_to_string&lt;<link linkend="_structglm_1_1vec">vec</link>&lt;2,&#32;T,&#32;Q&gt;&#32;&gt;
207 &#32;&#32;&#32;&#32;{
208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_structglm_1_1detail_1_1compute__to__string_3_01vec_3_012_00_01_t_00_01_q_01_4_01_4_1a53a9c1f76338785f54bb2638b69517ef">call</link>(<link linkend="_structglm_1_1vec">vec&lt;2, T, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;PrefixStr&#32;=&#32;<link linkend="_structglm_1_1detail_1_1prefix">prefix&lt;T&gt;::value</link>();
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;LiteralStr&#32;=&#32;<link linkend="_structglm_1_1detail_1_1literal">literal&lt;T, std::numeric_limits&lt;T&gt;::is_iec559</link>&gt;<link linkend="_classvalue">::value</link>();
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;FormatStr(<link linkend="_namespaceglm_1_1detail_1acd5305bbd1c5417b1eb770faf8229d14">detail::format</link>(<emphasis role="stringliteral">&quot;%svec2(%s,&#32;%s)&quot;</emphasis>,
213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrefixStr,
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LiteralStr,&#32;LiteralStr));
215 
216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceglm_1_1detail_1acd5305bbd1c5417b1eb770faf8229d14">detail::format</link>(FormatStr.c_str(),
217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[0]),
218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[1]));
219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
220 &#32;&#32;&#32;&#32;};
221 
222 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
223 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>compute_to_string&lt;<link linkend="_structglm_1_1vec">vec</link>&lt;3,&#32;T,&#32;Q&gt;&#32;&gt;
224 &#32;&#32;&#32;&#32;{
225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_structglm_1_1detail_1_1compute__to__string_3_01vec_3_013_00_01_t_00_01_q_01_4_01_4_1a61d57060d3b0c3f2dd672f7b8cf962a5">call</link>(<link linkend="_structglm_1_1vec">vec&lt;3, T, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;PrefixStr&#32;=&#32;<link linkend="_structglm_1_1detail_1_1prefix">prefix&lt;T&gt;::value</link>();
228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;LiteralStr&#32;=&#32;<link linkend="_structglm_1_1detail_1_1literal">literal&lt;T, std::numeric_limits&lt;T&gt;::is_iec559</link>&gt;<link linkend="_classvalue">::value</link>();
229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;FormatStr(<link linkend="_namespaceglm_1_1detail_1acd5305bbd1c5417b1eb770faf8229d14">detail::format</link>(<emphasis role="stringliteral">&quot;%svec3(%s,&#32;%s,&#32;%s)&quot;</emphasis>,
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrefixStr,
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LiteralStr,&#32;LiteralStr,&#32;LiteralStr));
232 
233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceglm_1_1detail_1acd5305bbd1c5417b1eb770faf8229d14">detail::format</link>(FormatStr.c_str(),
234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[0]),
235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[1]),
236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[2]));
237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
238 &#32;&#32;&#32;&#32;};
239 
240 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
241 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>compute_to_string&lt;<link linkend="_structglm_1_1vec">vec</link>&lt;4,&#32;T,&#32;Q&gt;&#32;&gt;
242 &#32;&#32;&#32;&#32;{
243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_structglm_1_1detail_1_1compute__to__string_3_01vec_3_014_00_01_t_00_01_q_01_4_01_4_1a7ad9df3e448b98637f2fa56c1b20817d">call</link>(<link linkend="_structglm_1_1vec">vec&lt;4, T, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;PrefixStr&#32;=&#32;<link linkend="_structglm_1_1detail_1_1prefix">prefix&lt;T&gt;::value</link>();
246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;LiteralStr&#32;=&#32;<link linkend="_structglm_1_1detail_1_1literal">literal&lt;T, std::numeric_limits&lt;T&gt;::is_iec559</link>&gt;<link linkend="_classvalue">::value</link>();
247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;FormatStr(<link linkend="_namespaceglm_1_1detail_1acd5305bbd1c5417b1eb770faf8229d14">detail::format</link>(<emphasis role="stringliteral">&quot;%svec4(%s,&#32;%s,&#32;%s,&#32;%s)&quot;</emphasis>,
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrefixStr,
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LiteralStr,&#32;LiteralStr,&#32;LiteralStr,&#32;LiteralStr));
250 
251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceglm_1_1detail_1acd5305bbd1c5417b1eb770faf8229d14">detail::format</link>(FormatStr.c_str(),
252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[0]),
253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[1]),
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[2]),
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[3]));
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
257 &#32;&#32;&#32;&#32;};
258 
259 
260 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
261 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>compute_to_string&lt;<link linkend="_structglm_1_1mat">mat</link>&lt;2,&#32;2,&#32;T,&#32;Q&gt;&#32;&gt;
262 &#32;&#32;&#32;&#32;{
263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_structglm_1_1detail_1_1compute__to__string_3_01mat_3_012_00_012_00_01_t_00_01_q_01_4_01_4_1a107a920bb722084d0518a0ff50e8c118">call</link>(<link linkend="_structglm_1_1mat">mat&lt;2, 2, T, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;PrefixStr&#32;=&#32;<link linkend="_structglm_1_1detail_1_1prefix">prefix&lt;T&gt;::value</link>();
266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;LiteralStr&#32;=&#32;<link linkend="_structglm_1_1detail_1_1literal">literal&lt;T, std::numeric_limits&lt;T&gt;::is_iec559</link>&gt;<link linkend="_classvalue">::value</link>();
267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;FormatStr(<link linkend="_namespaceglm_1_1detail_1acd5305bbd1c5417b1eb770faf8229d14">detail::format</link>(<emphasis role="stringliteral">&quot;%smat2x2((%s,&#32;%s),&#32;(%s,&#32;%s))&quot;</emphasis>,
268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrefixStr,
269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LiteralStr,&#32;LiteralStr,
270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LiteralStr,&#32;LiteralStr));
271 
272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceglm_1_1detail_1acd5305bbd1c5417b1eb770faf8229d14">detail::format</link>(FormatStr.c_str(),
273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[0][0]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[0][1]),
274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[1][0]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[1][1]));
275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
276 &#32;&#32;&#32;&#32;};
277 
278 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
279 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>compute_to_string&lt;<link linkend="_structglm_1_1mat">mat</link>&lt;2,&#32;3,&#32;T,&#32;Q&gt;&#32;&gt;
280 &#32;&#32;&#32;&#32;{
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_structglm_1_1detail_1_1compute__to__string_3_01mat_3_012_00_013_00_01_t_00_01_q_01_4_01_4_1a1459d67dba1cee7c2467271a97fab304">call</link>(<link linkend="_structglm_1_1mat">mat&lt;2, 3, T, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;PrefixStr&#32;=&#32;<link linkend="_structglm_1_1detail_1_1prefix">prefix&lt;T&gt;::value</link>();
284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;LiteralStr&#32;=&#32;<link linkend="_structglm_1_1detail_1_1literal">literal&lt;T, std::numeric_limits&lt;T&gt;::is_iec559</link>&gt;<link linkend="_classvalue">::value</link>();
285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;FormatStr(<link linkend="_namespaceglm_1_1detail_1acd5305bbd1c5417b1eb770faf8229d14">detail::format</link>(<emphasis role="stringliteral">&quot;%smat2x3((%s,&#32;%s,&#32;%s),&#32;(%s,&#32;%s,&#32;%s))&quot;</emphasis>,
286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrefixStr,
287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LiteralStr,&#32;LiteralStr,&#32;LiteralStr,
288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LiteralStr,&#32;LiteralStr,&#32;LiteralStr));
289 
290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceglm_1_1detail_1acd5305bbd1c5417b1eb770faf8229d14">detail::format</link>(FormatStr.c_str(),
291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[0][0]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[0][1]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[0][2]),
292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[1][0]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[1][1]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[1][2]));
293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
294 &#32;&#32;&#32;&#32;};
295 
296 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
297 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>compute_to_string&lt;<link linkend="_structglm_1_1mat">mat</link>&lt;2,&#32;4,&#32;T,&#32;Q&gt;&#32;&gt;
298 &#32;&#32;&#32;&#32;{
299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_structglm_1_1detail_1_1compute__to__string_3_01mat_3_012_00_014_00_01_t_00_01_q_01_4_01_4_1a33aa32e523377e9a404a6eb7b4048e76">call</link>(<link linkend="_structglm_1_1mat">mat&lt;2, 4, T, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;PrefixStr&#32;=&#32;<link linkend="_structglm_1_1detail_1_1prefix">prefix&lt;T&gt;::value</link>();
302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;LiteralStr&#32;=&#32;<link linkend="_structglm_1_1detail_1_1literal">literal&lt;T, std::numeric_limits&lt;T&gt;::is_iec559</link>&gt;<link linkend="_classvalue">::value</link>();
303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;FormatStr(<link linkend="_namespaceglm_1_1detail_1acd5305bbd1c5417b1eb770faf8229d14">detail::format</link>(<emphasis role="stringliteral">&quot;%smat2x4((%s,&#32;%s,&#32;%s,&#32;%s),&#32;(%s,&#32;%s,&#32;%s,&#32;%s))&quot;</emphasis>,
304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrefixStr,
305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LiteralStr,&#32;LiteralStr,&#32;LiteralStr,&#32;LiteralStr,
306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LiteralStr,&#32;LiteralStr,&#32;LiteralStr,&#32;LiteralStr));
307 
308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceglm_1_1detail_1acd5305bbd1c5417b1eb770faf8229d14">detail::format</link>(FormatStr.c_str(),
309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[0][0]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[0][1]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[0][2]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[0][3]),
310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[1][0]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[1][1]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[1][2]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[1][3]));
311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
312 &#32;&#32;&#32;&#32;};
313 
314 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
315 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>compute_to_string&lt;<link linkend="_structglm_1_1mat">mat</link>&lt;3,&#32;2,&#32;T,&#32;Q&gt;&#32;&gt;
316 &#32;&#32;&#32;&#32;{
317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_structglm_1_1detail_1_1compute__to__string_3_01mat_3_013_00_012_00_01_t_00_01_q_01_4_01_4_1a1d5c4ef4e4daf9c8f5c0b85f098d0efd">call</link>(<link linkend="_structglm_1_1mat">mat&lt;3, 2, T, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;PrefixStr&#32;=&#32;<link linkend="_structglm_1_1detail_1_1prefix">prefix&lt;T&gt;::value</link>();
320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;LiteralStr&#32;=&#32;<link linkend="_structglm_1_1detail_1_1literal">literal&lt;T, std::numeric_limits&lt;T&gt;::is_iec559</link>&gt;<link linkend="_classvalue">::value</link>();
321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;FormatStr(<link linkend="_namespaceglm_1_1detail_1acd5305bbd1c5417b1eb770faf8229d14">detail::format</link>(<emphasis role="stringliteral">&quot;%smat3x2((%s,&#32;%s),&#32;(%s,&#32;%s),&#32;(%s,&#32;%s))&quot;</emphasis>,
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrefixStr,
323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LiteralStr,&#32;LiteralStr,
324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LiteralStr,&#32;LiteralStr,
325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LiteralStr,&#32;LiteralStr));
326 
327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceglm_1_1detail_1acd5305bbd1c5417b1eb770faf8229d14">detail::format</link>(FormatStr.c_str(),
328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[0][0]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[0][1]),
329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[1][0]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[1][1]),
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[2][0]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[2][1]));
331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
332 &#32;&#32;&#32;&#32;};
333 
334 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
335 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>compute_to_string&lt;<link linkend="_structglm_1_1mat">mat</link>&lt;3,&#32;3,&#32;T,&#32;Q&gt;&#32;&gt;
336 &#32;&#32;&#32;&#32;{
337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_structglm_1_1detail_1_1compute__to__string_3_01mat_3_013_00_013_00_01_t_00_01_q_01_4_01_4_1aebf52cc023615d49c480e8cde7cda457">call</link>(<link linkend="_structglm_1_1mat">mat&lt;3, 3, T, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;PrefixStr&#32;=&#32;<link linkend="_structglm_1_1detail_1_1prefix">prefix&lt;T&gt;::value</link>();
340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;LiteralStr&#32;=&#32;<link linkend="_structglm_1_1detail_1_1literal">literal&lt;T, std::numeric_limits&lt;T&gt;::is_iec559</link>&gt;<link linkend="_classvalue">::value</link>();
341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;FormatStr(<link linkend="_namespaceglm_1_1detail_1acd5305bbd1c5417b1eb770faf8229d14">detail::format</link>(<emphasis role="stringliteral">&quot;%smat3x3((%s,&#32;%s,&#32;%s),&#32;(%s,&#32;%s,&#32;%s),&#32;(%s,&#32;%s,&#32;%s))&quot;</emphasis>,
342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrefixStr,
343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LiteralStr,&#32;LiteralStr,&#32;LiteralStr,
344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LiteralStr,&#32;LiteralStr,&#32;LiteralStr,
345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LiteralStr,&#32;LiteralStr,&#32;LiteralStr));
346 
347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceglm_1_1detail_1acd5305bbd1c5417b1eb770faf8229d14">detail::format</link>(FormatStr.c_str(),
348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[0][0]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[0][1]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[0][2]),
349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[1][0]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[1][1]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[1][2]),
350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[2][0]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[2][1]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[2][2]));
351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
352 &#32;&#32;&#32;&#32;};
353 
354 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
355 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>compute_to_string&lt;<link linkend="_structglm_1_1mat">mat</link>&lt;3,&#32;4,&#32;T,&#32;Q&gt;&#32;&gt;
356 &#32;&#32;&#32;&#32;{
357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_structglm_1_1detail_1_1compute__to__string_3_01mat_3_013_00_014_00_01_t_00_01_q_01_4_01_4_1ae80e1ea4b5f28839ab5e906afe2811c2">call</link>(<link linkend="_structglm_1_1mat">mat&lt;3, 4, T, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;PrefixStr&#32;=&#32;<link linkend="_structglm_1_1detail_1_1prefix">prefix&lt;T&gt;::value</link>();
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;LiteralStr&#32;=&#32;<link linkend="_structglm_1_1detail_1_1literal">literal&lt;T, std::numeric_limits&lt;T&gt;::is_iec559</link>&gt;<link linkend="_classvalue">::value</link>();
361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;FormatStr(<link linkend="_namespaceglm_1_1detail_1acd5305bbd1c5417b1eb770faf8229d14">detail::format</link>(<emphasis role="stringliteral">&quot;%smat3x4((%s,&#32;%s,&#32;%s,&#32;%s),&#32;(%s,&#32;%s,&#32;%s,&#32;%s),&#32;(%s,&#32;%s,&#32;%s,&#32;%s))&quot;</emphasis>,
362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrefixStr,
363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LiteralStr,&#32;LiteralStr,&#32;LiteralStr,&#32;LiteralStr,
364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LiteralStr,&#32;LiteralStr,&#32;LiteralStr,&#32;LiteralStr,
365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LiteralStr,&#32;LiteralStr,&#32;LiteralStr,&#32;LiteralStr));
366 
367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceglm_1_1detail_1acd5305bbd1c5417b1eb770faf8229d14">detail::format</link>(FormatStr.c_str(),
368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[0][0]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[0][1]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[0][2]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[0][3]),
369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[1][0]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[1][1]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[1][2]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[1][3]),
370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[2][0]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[2][1]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[2][2]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[2][3]));
371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
372 &#32;&#32;&#32;&#32;};
373 
374 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
375 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>compute_to_string&lt;<link linkend="_structglm_1_1mat">mat</link>&lt;4,&#32;2,&#32;T,&#32;Q&gt;&#32;&gt;
376 &#32;&#32;&#32;&#32;{
377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_structglm_1_1detail_1_1compute__to__string_3_01mat_3_014_00_012_00_01_t_00_01_q_01_4_01_4_1af5b35e5a4cb38e51bcde9ae1eba1d126">call</link>(<link linkend="_structglm_1_1mat">mat&lt;4, 2, T, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;PrefixStr&#32;=&#32;<link linkend="_structglm_1_1detail_1_1prefix">prefix&lt;T&gt;::value</link>();
380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;LiteralStr&#32;=&#32;<link linkend="_structglm_1_1detail_1_1literal">literal&lt;T, std::numeric_limits&lt;T&gt;::is_iec559</link>&gt;<link linkend="_classvalue">::value</link>();
381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;FormatStr(<link linkend="_namespaceglm_1_1detail_1acd5305bbd1c5417b1eb770faf8229d14">detail::format</link>(<emphasis role="stringliteral">&quot;%smat4x2((%s,&#32;%s),&#32;(%s,&#32;%s),&#32;(%s,&#32;%s),&#32;(%s,&#32;%s))&quot;</emphasis>,
382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrefixStr,
383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LiteralStr,&#32;LiteralStr,
384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LiteralStr,&#32;LiteralStr,
385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LiteralStr,&#32;LiteralStr,
386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LiteralStr,&#32;LiteralStr));
387 
388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceglm_1_1detail_1acd5305bbd1c5417b1eb770faf8229d14">detail::format</link>(FormatStr.c_str(),
389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[0][0]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[0][1]),
390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[1][0]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[1][1]),
391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[2][0]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[2][1]),
392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[3][0]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[3][1]));
393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
394 &#32;&#32;&#32;&#32;};
395 
396 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
397 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>compute_to_string&lt;<link linkend="_structglm_1_1mat">mat</link>&lt;4,&#32;3,&#32;T,&#32;Q&gt;&#32;&gt;
398 &#32;&#32;&#32;&#32;{
399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_structglm_1_1detail_1_1compute__to__string_3_01mat_3_014_00_013_00_01_t_00_01_q_01_4_01_4_1a25c5199fbde991582ba0afe092c4ec17">call</link>(<link linkend="_structglm_1_1mat">mat&lt;4, 3, T, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;PrefixStr&#32;=&#32;<link linkend="_structglm_1_1detail_1_1prefix">prefix&lt;T&gt;::value</link>();
402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;LiteralStr&#32;=&#32;<link linkend="_structglm_1_1detail_1_1literal">literal&lt;T, std::numeric_limits&lt;T&gt;::is_iec559</link>&gt;<link linkend="_classvalue">::value</link>();
403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;FormatStr(<link linkend="_namespaceglm_1_1detail_1acd5305bbd1c5417b1eb770faf8229d14">detail::format</link>(<emphasis role="stringliteral">&quot;%smat4x3((%s,&#32;%s,&#32;%s),&#32;(%s,&#32;%s,&#32;%s),&#32;(%s,&#32;%s,&#32;%s),&#32;(%s,&#32;%s,&#32;%s))&quot;</emphasis>,
404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrefixStr,
405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LiteralStr,&#32;LiteralStr,&#32;LiteralStr,
406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LiteralStr,&#32;LiteralStr,&#32;LiteralStr,
407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LiteralStr,&#32;LiteralStr,&#32;LiteralStr,
408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LiteralStr,&#32;LiteralStr,&#32;LiteralStr));
409 
410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceglm_1_1detail_1acd5305bbd1c5417b1eb770faf8229d14">detail::format</link>(FormatStr.c_str(),
411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[0][0]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[0][1]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[0][2]),
412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[1][0]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[1][1]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[1][2]),
413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[2][0]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[2][1]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[2][2]),
414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[3][0]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[3][1]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[3][2]));
415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
416 &#32;&#32;&#32;&#32;};
417 
418 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
419 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>compute_to_string&lt;<link linkend="_structglm_1_1mat">mat</link>&lt;4,&#32;4,&#32;T,&#32;Q&gt;&#32;&gt;
420 &#32;&#32;&#32;&#32;{
421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_structglm_1_1detail_1_1compute__to__string_3_01mat_3_014_00_014_00_01_t_00_01_q_01_4_01_4_1a2bcb205f92a1451a9292f463bbb41288">call</link>(<link linkend="_structglm_1_1mat">mat&lt;4, 4, T, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;PrefixStr&#32;=&#32;<link linkend="_structglm_1_1detail_1_1prefix">prefix&lt;T&gt;::value</link>();
424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;LiteralStr&#32;=&#32;<link linkend="_structglm_1_1detail_1_1literal">literal&lt;T, std::numeric_limits&lt;T&gt;::is_iec559</link>&gt;<link linkend="_classvalue">::value</link>();
425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;FormatStr(<link linkend="_namespaceglm_1_1detail_1acd5305bbd1c5417b1eb770faf8229d14">detail::format</link>(<emphasis role="stringliteral">&quot;%smat4x4((%s,&#32;%s,&#32;%s,&#32;%s),&#32;(%s,&#32;%s,&#32;%s,&#32;%s),&#32;(%s,&#32;%s,&#32;%s,&#32;%s),&#32;(%s,&#32;%s,&#32;%s,&#32;%s))&quot;</emphasis>,
426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrefixStr,
427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LiteralStr,&#32;LiteralStr,&#32;LiteralStr,&#32;LiteralStr,
428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LiteralStr,&#32;LiteralStr,&#32;LiteralStr,&#32;LiteralStr,
429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LiteralStr,&#32;LiteralStr,&#32;LiteralStr,&#32;LiteralStr,
430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LiteralStr,&#32;LiteralStr,&#32;LiteralStr,&#32;LiteralStr));
431 
432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceglm_1_1detail_1acd5305bbd1c5417b1eb770faf8229d14">detail::format</link>(FormatStr.c_str(),
433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[0][0]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[0][1]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[0][2]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[0][3]),
434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[1][0]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[1][1]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[1][2]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[1][3]),
435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[2][0]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[2][1]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[2][2]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[2][3]),
436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[3][0]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[3][1]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[3][2]),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[3][3]));
437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
438 &#32;&#32;&#32;&#32;};
439 
440 
441 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
442 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>compute_to_string&lt;<link linkend="_structglm_1_1qua">qua</link>&lt;T,&#32;Q&gt;&#32;&gt;
443 &#32;&#32;&#32;&#32;{
444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_structglm_1_1detail_1_1compute__to__string_3_01qua_3_01_t_00_01_q_01_4_01_4_1a23a7c8c0bc9ac5c7abaab0e1f9165581">call</link>(<link linkend="_structglm_1_1qua">qua&lt;T, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;q)
445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;PrefixStr&#32;=&#32;<link linkend="_structglm_1_1detail_1_1prefix">prefix&lt;T&gt;::value</link>();
447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;LiteralStr&#32;=&#32;<link linkend="_structglm_1_1detail_1_1literal">literal&lt;T, std::numeric_limits&lt;T&gt;::is_iec559</link>&gt;<link linkend="_classvalue">::value</link>();
448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;FormatStr(<link linkend="_namespaceglm_1_1detail_1acd5305bbd1c5417b1eb770faf8229d14">detail::format</link>(<emphasis role="stringliteral">&quot;%squat(%s,&#32;{%s,&#32;%s,&#32;%s})&quot;</emphasis>,
449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrefixStr,
450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LiteralStr,&#32;LiteralStr,&#32;LiteralStr,&#32;LiteralStr));
451 
452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceglm_1_1detail_1acd5305bbd1c5417b1eb770faf8229d14">detail::format</link>(FormatStr.c_str(),
453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(q.<link linkend="_structglm_1_1qua_1ad8a7f933070e6e4382d9fce4a6efecd6">w</link>),
454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(q.<link linkend="_structglm_1_1qua_1ae0e0786cb5ef565606ecc3d4d8255fd3">x</link>),
455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(q.<link linkend="_structglm_1_1qua_1a3183bedd482933c6723e6ebcf409e178">y</link>),
456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(q.<link linkend="_structglm_1_1qua_1a751f58e48134d3bd65253a43708a552d">z</link>));
457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
458 &#32;&#32;&#32;&#32;};
459 
460 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
461 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>compute_to_string&lt;<link linkend="_structglm_1_1tdualquat">tdualquat</link>&lt;T,&#32;Q&gt;&#32;&gt;
462 &#32;&#32;&#32;&#32;{
463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_structglm_1_1detail_1_1compute__to__string_3_01tdualquat_3_01_t_00_01_q_01_4_01_4_1a312a529ab87f8e85ad185676dd31267d">call</link>(<link linkend="_structglm_1_1tdualquat">tdualquat&lt;T, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;PrefixStr&#32;=&#32;<link linkend="_structglm_1_1detail_1_1prefix">prefix&lt;T&gt;::value</link>();
466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;LiteralStr&#32;=&#32;<link linkend="_structglm_1_1detail_1_1literal">literal&lt;T, std::numeric_limits&lt;T&gt;::is_iec559</link>&gt;<link linkend="_classvalue">::value</link>();
467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;FormatStr(<link linkend="_namespaceglm_1_1detail_1acd5305bbd1c5417b1eb770faf8229d14">detail::format</link>(<emphasis role="stringliteral">&quot;%sdualquat((%s,&#32;{%s,&#32;%s,&#32;%s}),&#32;(%s,&#32;{%s,&#32;%s,&#32;%s}))&quot;</emphasis>,
468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrefixStr,
469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LiteralStr,&#32;LiteralStr,&#32;LiteralStr,&#32;LiteralStr,
470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LiteralStr,&#32;LiteralStr,&#32;LiteralStr,&#32;LiteralStr));
471 
472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceglm_1_1detail_1acd5305bbd1c5417b1eb770faf8229d14">detail::format</link>(FormatStr.c_str(),
473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.real.w),
474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.real.x),
475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.real.y),
476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.real.z),
477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.dual.w),
478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.dual.x),
479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.dual.y),
480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;<link linkend="_structglm_1_1detail_1_1cast_1aee0fcb3ea7c887fbc9fbe700a8b758b7">cast&lt;T&gt;::value_type</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.dual.z));
481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
482 &#32;&#32;&#32;&#32;};
483 
484 }<emphasis role="comment">//namespace&#32;detail</emphasis>
485 
486 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;matType&gt;
487 <link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;std::string&#32;<link linkend="_group__gtx__string__cast_1ga8f0dced1fd45e67e2d77e80ab93c7af5">to_string</link>(matType&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
488 {
489 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;detail::compute_to_string&lt;matType&gt;::call(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>);
490 }
491 
492 }<emphasis role="comment">//namespace&#32;glm</emphasis>
</programlisting></section>
