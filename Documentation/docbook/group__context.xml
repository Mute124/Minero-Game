<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__context" xml:lang="en-US">
<title>Context reference</title>
<indexterm><primary>Context reference</primary></indexterm>
<para>

<para>Functions and types related to OpenGL and OpenGL ES contexts. </para>
 
</para>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>typedef <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>(* <link linkend="_group__context_1ga3d47c2d2fbe0be9c505d0e04e91a133c">GLFWglproc</link>) (<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)</para>

<para>Client API function pointer type. </para>
</listitem>
            <listitem><para>typedef <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>(* <link linkend="_group__context_1ga3d47c2d2fbe0be9c505d0e04e91a133c">GLFWglproc</link>) (<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)</para>

<para>Client API function pointer type. </para>
</listitem>
            <listitem><para>typedef <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>(* <link linkend="_group__context_1ga3d47c2d2fbe0be9c505d0e04e91a133c">GLFWglproc</link>) (<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)</para>

<para>Client API function pointer type. </para>
</listitem>
            <listitem><para>typedef <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>(* <link linkend="_group__context_1ga3d47c2d2fbe0be9c505d0e04e91a133c">GLFWglproc</link>) (<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)</para>

<para>Client API function pointer type. </para>
</listitem>
            <listitem><para>typedef <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>(* <link linkend="_group__context_1ga3d47c2d2fbe0be9c505d0e04e91a133c">GLFWglproc</link>) (<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)</para>

<para>Client API function pointer type. </para>
</listitem>
            <listitem><para>typedef <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>(* <link linkend="_group__context_1ga3d47c2d2fbe0be9c505d0e04e91a133c">GLFWglproc</link>) (<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)</para>

<para>Client API function pointer type. </para>
</listitem>
            <listitem><para>typedef <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>(* <link linkend="_group__context_1ga3d47c2d2fbe0be9c505d0e04e91a133c">GLFWglproc</link>) (<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)</para>

<para>Client API function pointer type. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="__classes_2lib_2external_2glfw_2include_2_g_l_f_w_2glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_group__context_1gafd76c93e15ec8b0b90506a9936a46185">glfwMakeContextCurrent</link> (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> *<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a92dbce8e3247f6a78126c99877caacb6">window</link>)</para>

<para>Makes the context of the specified window current for the calling thread. </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2external_2glfw_2include_2_g_l_f_w_2glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * <link linkend="_group__context_1gab5fde1ef6238bfb82c7a2293f86172de">glfwGetCurrentContext</link> (<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)</para>

<para>Returns the window whose context is current on the calling thread. </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2external_2glfw_2include_2_g_l_f_w_2glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_group__context_1ga12a595c06947cec4967c6e1f14210a8a">glfwSwapInterval</link> (int interval)</para>

<para>Sets the swap interval for the current context. </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2external_2glfw_2include_2_g_l_f_w_2glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> int <link linkend="_group__context_1ga9a28c712d35f9e43534e1d03b051c04c">glfwExtensionSupported</link> (const char *extension)</para>

<para>Returns whether the specified extension is available. </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2external_2glfw_2include_2_g_l_f_w_2glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__context_1ga3d47c2d2fbe0be9c505d0e04e91a133c">GLFWglproc</link> <link linkend="_group__context_1ga0e8af175218929615c16e74938c10f2a">glfwGetProcAddress</link> (const char *procname)</para>

<para>Returns the address of the specified function for the current context. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Functions and types related to OpenGL and OpenGL ES contexts. </para>

<para>This is the reference documentation for OpenGL and OpenGL ES context related functions. For more task-oriented information, see the context_guide. </para>
</section>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="_group__context_1ga3d47c2d2fbe0be9c505d0e04e91a133c"/><section>
    <title>GLFWglproc<computeroutput>[1/7]</computeroutput></title>
<indexterm><primary>GLFWglproc</primary><secondary>Context reference</secondary></indexterm>
<indexterm><primary>Context reference</primary><secondary>GLFWglproc</secondary></indexterm>
<para><computeroutput>typedef <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>(* GLFWglproc) (<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)</computeroutput></para><para>

<para>Client API function pointer type. </para>
</para>

<para>Generic function pointer used for returning client API function pointers without forcing a cast from a regular pointer.</para>

<para><formalpara><title>See also</title>

<para>context_glext </para>

<para><link linkend="_group__context_1ga0e8af175218929615c16e74938c10f2a">glfwGetProcAddress</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_group__context_1ga3d47c2d2fbe0be9c505d0e04e91a133c"/><section>
    <title>GLFWglproc<computeroutput>[2/7]</computeroutput></title>
<indexterm><primary>GLFWglproc</primary><secondary>Context reference</secondary></indexterm>
<indexterm><primary>Context reference</primary><secondary>GLFWglproc</secondary></indexterm>
<para><computeroutput>typedef <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>(* GLFWglproc) (<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)</computeroutput></para><para>

<para>Client API function pointer type. </para>
</para>

<para>Generic function pointer used for returning client API function pointers without forcing a cast from a regular pointer.</para>

<para><formalpara><title>See also</title>

<para>context_glext </para>

<para><link linkend="_group__context_1ga0e8af175218929615c16e74938c10f2a">glfwGetProcAddress</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_group__context_1ga3d47c2d2fbe0be9c505d0e04e91a133c"/><section>
    <title>GLFWglproc<computeroutput>[3/7]</computeroutput></title>
<indexterm><primary>GLFWglproc</primary><secondary>Context reference</secondary></indexterm>
<indexterm><primary>Context reference</primary><secondary>GLFWglproc</secondary></indexterm>
<para><computeroutput>typedef <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>(* GLFWglproc) (<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)</computeroutput></para><para>

<para>Client API function pointer type. </para>
</para>

<para>Generic function pointer used for returning client API function pointers without forcing a cast from a regular pointer.</para>

<para><formalpara><title>See also</title>

<para>context_glext </para>

<para><link linkend="_group__context_1ga0e8af175218929615c16e74938c10f2a">glfwGetProcAddress</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_group__context_1ga3d47c2d2fbe0be9c505d0e04e91a133c"/><section>
    <title>GLFWglproc<computeroutput>[4/7]</computeroutput></title>
<indexterm><primary>GLFWglproc</primary><secondary>Context reference</secondary></indexterm>
<indexterm><primary>Context reference</primary><secondary>GLFWglproc</secondary></indexterm>
<para><computeroutput>typedef <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>(* GLFWglproc) (<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)</computeroutput></para><para>

<para>Client API function pointer type. </para>
</para>

<para>Generic function pointer used for returning client API function pointers without forcing a cast from a regular pointer.</para>

<para><formalpara><title>See also</title>

<para>context_glext </para>

<para><link linkend="_group__context_1ga0e8af175218929615c16e74938c10f2a">glfwGetProcAddress</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_group__context_1ga3d47c2d2fbe0be9c505d0e04e91a133c"/><section>
    <title>GLFWglproc<computeroutput>[5/7]</computeroutput></title>
<indexterm><primary>GLFWglproc</primary><secondary>Context reference</secondary></indexterm>
<indexterm><primary>Context reference</primary><secondary>GLFWglproc</secondary></indexterm>
<para><computeroutput>typedef <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>(* GLFWglproc) (<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)</computeroutput></para><para>

<para>Client API function pointer type. </para>
</para>

<para>Generic function pointer used for returning client API function pointers without forcing a cast from a regular pointer.</para>

<para><formalpara><title>See also</title>

<para>context_glext </para>

<para><link linkend="_group__context_1ga0e8af175218929615c16e74938c10f2a">glfwGetProcAddress</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_group__context_1ga3d47c2d2fbe0be9c505d0e04e91a133c"/><section>
    <title>GLFWglproc<computeroutput>[6/7]</computeroutput></title>
<indexterm><primary>GLFWglproc</primary><secondary>Context reference</secondary></indexterm>
<indexterm><primary>Context reference</primary><secondary>GLFWglproc</secondary></indexterm>
<para><computeroutput>typedef <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>(* GLFWglproc) (<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)</computeroutput></para><para>

<para>Client API function pointer type. </para>
</para>

<para>Generic function pointer used for returning client API function pointers without forcing a cast from a regular pointer.</para>

<para><formalpara><title>See also</title>

<para>context_glext </para>

<para><link linkend="_group__context_1ga0e8af175218929615c16e74938c10f2a">glfwGetProcAddress</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_group__context_1ga3d47c2d2fbe0be9c505d0e04e91a133c"/><section>
    <title>GLFWglproc<computeroutput>[7/7]</computeroutput></title>
<indexterm><primary>GLFWglproc</primary><secondary>Context reference</secondary></indexterm>
<indexterm><primary>Context reference</primary><secondary>GLFWglproc</secondary></indexterm>
<para><computeroutput>typedef <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>(* GLFWglproc) (<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)</computeroutput></para><para>

<para>Client API function pointer type. </para>
</para>

<para>Generic function pointer used for returning client API function pointers without forcing a cast from a regular pointer.</para>

<para><formalpara><title>See also</title>

<para>context_glext </para>

<para><link linkend="_group__context_1ga0e8af175218929615c16e74938c10f2a">glfwGetProcAddress</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_group__context_1ga9a28c712d35f9e43534e1d03b051c04c"/><section>
    <title>glfwExtensionSupported()</title>
<indexterm><primary>glfwExtensionSupported</primary><secondary>Context reference</secondary></indexterm>
<indexterm><primary>Context reference</primary><secondary>glfwExtensionSupported</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2external_2glfw_2include_2_g_l_f_w_2glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> int glfwExtensionSupported (const char * extension)</computeroutput></para><para>

<para>Returns whether the specified extension is available. </para>
</para>

<para>This function returns whether the specified API extension is supported by the current OpenGL or OpenGL ES context. It searches both for client API extension and context creation API extensions.</para>

<para>A context must be current on the calling thread. Calling this function without a current context will cause a <link linkend="_group__errors_1gaa8290386e9528ccb9e42a3a4e16fc0d0">GLFW_NO_CURRENT_CONTEXT</link> error.</para>

<para>As this functions retrieves and searches one or more extension strings each call, it is recommended that you cache its results if it is going to be used frequently. The extension strings will not change during the lifetime of a context, so there is no danger in doing this.</para>

<para>This function does not apply to Vulkan. If you are using Vulkan, see <link linkend="_group__vulkan_1gada152edc5bbbd0c2138728878632fd9c">glfwGetRequiredInstanceExtensions</link>, <computeroutput>vkEnumerateInstanceExtensionProperties</computeroutput> and <computeroutput>vkEnumerateDeviceExtensionProperties</computeroutput> instead.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>in</entry><entry>extension</entry><entry>
<para>The ASCII encoded name of the extension. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><computeroutput>GLFW_TRUE</computeroutput> if the extension is available, or <computeroutput>GLFW_FALSE</computeroutput> otherwise.</para>
</formalpara>
@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>, <link linkend="_group__errors_1gaa8290386e9528ccb9e42a3a4e16fc0d0">GLFW_NO_CURRENT_CONTEXT</link>, <link linkend="_group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687">GLFW_INVALID_VALUE</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para>@thread_safety This function may be called from any thread.</para>

<para><formalpara><title>See also</title>

<para>context_glext </para>

<para><link linkend="_group__context_1ga0e8af175218929615c16e74938c10f2a">glfwGetProcAddress</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 1.0. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__context_ga9a28c712d35f9e43534e1d03b051c04c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__context_ga9a28c712d35f9e43534e1d03b051c04c_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__context_1gab5fde1ef6238bfb82c7a2293f86172de"/><section>
    <title>glfwGetCurrentContext()</title>
<indexterm><primary>glfwGetCurrentContext</primary><secondary>Context reference</secondary></indexterm>
<indexterm><primary>Context reference</primary><secondary>glfwGetCurrentContext</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2external_2glfw_2include_2_g_l_f_w_2glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * glfwGetCurrentContext (<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> )</computeroutput></para><para>

<para>Returns the window whose context is current on the calling thread. </para>
</para>

<para>This function returns the window whose OpenGL or OpenGL ES context is current on the calling thread.</para>

<para><formalpara><title>Returns</title>

<para>The window whose context is current, or <computeroutput>NULL</computeroutput> if no window&apos;s context is current.</para>
</formalpara>
@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>.</para>

<para>@thread_safety This function may be called from any thread.</para>

<para><formalpara><title>See also</title>

<para>context_current </para>

<para><link linkend="_group__context_1gafd76c93e15ec8b0b90506a9936a46185">glfwMakeContextCurrent</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__context_gab5fde1ef6238bfb82c7a2293f86172de_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__context_1ga0e8af175218929615c16e74938c10f2a"/><section>
    <title>glfwGetProcAddress()</title>
<indexterm><primary>glfwGetProcAddress</primary><secondary>Context reference</secondary></indexterm>
<indexterm><primary>Context reference</primary><secondary>glfwGetProcAddress</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2external_2glfw_2include_2_g_l_f_w_2glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="_group__context_1ga3d47c2d2fbe0be9c505d0e04e91a133c">GLFWglproc</link> glfwGetProcAddress (const char * procname)</computeroutput></para><para>

<para>Returns the address of the specified function for the current context. </para>
</para>

<para>This function returns the address of the specified OpenGL or OpenGL ES core or extension function, if it is supported by the current context.</para>

<para>A context must be current on the calling thread. Calling this function without a current context will cause a <link linkend="_group__errors_1gaa8290386e9528ccb9e42a3a4e16fc0d0">GLFW_NO_CURRENT_CONTEXT</link> error.</para>

<para>This function does not apply to Vulkan. If you are rendering with Vulkan, see <link linkend="__classes_2lib_2external_2glfw_2src_2vulkan_8c_1ab1fbd7c0ba5c40c91c6b85b897364039">glfwGetInstanceProcAddress</link>, <computeroutput>vkGetInstanceProcAddr</computeroutput> and <computeroutput>vkGetDeviceProcAddr</computeroutput> instead.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>in</entry><entry>procname</entry><entry>
<para>The ASCII encoded name of the function. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The address of the function, or <computeroutput>NULL</computeroutput> if an error occurred.</para>
</formalpara>
@errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>, <link linkend="_group__errors_1gaa8290386e9528ccb9e42a3a4e16fc0d0">GLFW_NO_CURRENT_CONTEXT</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para><formalpara><title>Remarks</title>

<para>The address of a given function is not guaranteed to be the same between contexts.</para>

<para>This function may return a non-<computeroutput>NULL</computeroutput> address despite the associated version or extension not being available. Always check the context version or extension string first.</para>
</formalpara>
@pointer_lifetime The returned function pointer is valid until the context is destroyed or the library is terminated.</para>

<para>@thread_safety This function may be called from any thread.</para>

<para><formalpara><title>See also</title>

<para>context_glext </para>

<para><link linkend="_group__context_1ga9a28c712d35f9e43534e1d03b051c04c">glfwExtensionSupported</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 1.0. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__context_ga0e8af175218929615c16e74938c10f2a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__context_1gafd76c93e15ec8b0b90506a9936a46185"/><section>
    <title>glfwMakeContextCurrent()</title>
<indexterm><primary>glfwMakeContextCurrent</primary><secondary>Context reference</secondary></indexterm>
<indexterm><primary>Context reference</primary><secondary>glfwMakeContextCurrent</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2external_2glfw_2include_2_g_l_f_w_2glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> glfwMakeContextCurrent (<link linkend="_group__window_1ga3c96d80d363e67d13a41b5d1821f3242">GLFWwindow</link> * window)</computeroutput></para><para>

<para>Makes the context of the specified window current for the calling thread. </para>
</para>

<para>This function makes the OpenGL or OpenGL ES context of the specified window current on the calling thread. A context must only be made current on a single thread at a time and each thread can have only a single current context at a time.</para>

<para>When moving a context between threads, you must make it non-current on the old thread before making it current on the new one.</para>

<para>By default, making a context non-current implicitly forces a pipeline flush. On machines that support <computeroutput>GL_KHR_context_flush_control</computeroutput>, you can control whether a context performs this flush by setting the GLFW_CONTEXT_RELEASE_BEHAVIOR hint.</para>

<para>The specified window must have an OpenGL or OpenGL ES context. Specifying a window without a context will generate a <link linkend="_group__errors_1gacff24d2757da752ae4c80bf452356487">GLFW_NO_WINDOW_CONTEXT</link> error.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>in</entry><entry>window</entry><entry>
<para>The window whose context to make current, or <computeroutput>NULL</computeroutput> to detach the current context.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>, <link linkend="_group__errors_1gacff24d2757da752ae4c80bf452356487">GLFW_NO_WINDOW_CONTEXT</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para>@thread_safety This function may be called from any thread.</para>

<para><formalpara><title>See also</title>

<para>context_current </para>

<para><link linkend="_group__context_1gab5fde1ef6238bfb82c7a2293f86172de">glfwGetCurrentContext</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 3.0. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__context_gafd76c93e15ec8b0b90506a9936a46185_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__context_gafd76c93e15ec8b0b90506a9936a46185_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__context_1ga12a595c06947cec4967c6e1f14210a8a"/><section>
    <title>glfwSwapInterval()</title>
<indexterm><primary>glfwSwapInterval</primary><secondary>Context reference</secondary></indexterm>
<indexterm><primary>Context reference</primary><secondary>glfwSwapInterval</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2external_2glfw_2include_2_g_l_f_w_2glfw3_8h_1a56da5036b2cc259351ae22fd6439bb47">GLFWAPI</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> glfwSwapInterval (int interval)</computeroutput></para><para>

<para>Sets the swap interval for the current context. </para>
</para>

<para>This function sets the swap interval for the current OpenGL or OpenGL ES context, i.e. the number of screen updates to wait from the time <link linkend="_group__window_1gafb827800eedbfcbc97b1e5408df668d7">glfwSwapBuffers</link> was called before swapping the buffers and returning. This is sometimes called <emphasis>vertical synchronization</emphasis>, <emphasis>vertical retrace synchronization</emphasis> or just <emphasis>vsync</emphasis>.</para>

<para>A context that supports either of the <computeroutput>WGL_EXT_swap_control_tear</computeroutput> and <computeroutput>GLX_EXT_swap_control_tear</computeroutput> extensions also accepts <emphasis>negative</emphasis> swap intervals, which allows the driver to swap immediately even if a frame arrives a little bit late. You can check for these extensions with <link linkend="_group__context_1ga9a28c712d35f9e43534e1d03b051c04c">glfwExtensionSupported</link>.</para>

<para>A context must be current on the calling thread. Calling this function without a current context will cause a <link linkend="_group__errors_1gaa8290386e9528ccb9e42a3a4e16fc0d0">GLFW_NO_CURRENT_CONTEXT</link> error.</para>

<para>This function does not apply to Vulkan. If you are rendering with Vulkan, see the present mode of your swapchain instead.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>in</entry><entry>interval</entry><entry>
<para>The minimum number of screen updates to wait for until the buffers are swapped by <link linkend="_group__window_1gafb827800eedbfcbc97b1e5408df668d7">glfwSwapBuffers</link>.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>, <link linkend="_group__errors_1gaa8290386e9528ccb9e42a3a4e16fc0d0">GLFW_NO_CURRENT_CONTEXT</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para><formalpara><title>Remarks</title>

<para>This function is not called during context creation, leaving the swap interval set to whatever is the default for that API. This is done because some swap interval extensions used by GLFW do not allow the swap interval to be reset to zero once it has been set to a non-zero value.</para>

<para>Some GPU drivers do not honor the requested swap interval, either because of a user setting that overrides the application&apos;s request or due to bugs in the driver.</para>
</formalpara>
@thread_safety This function may be called from any thread.</para>

<para><formalpara><title>See also</title>

<para>buffer_swap </para>

<para><link linkend="_group__window_1gafb827800eedbfcbc97b1e5408df668d7">glfwSwapBuffers</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 1.0.</para>
</formalpara>
This function sets the swap interval for the current OpenGL or OpenGL ES context, i.e. the number of screen updates to wait from the time <link linkend="_group__window_1gafb827800eedbfcbc97b1e5408df668d7">glfwSwapBuffers</link> was called before swapping the buffers and returning. This is sometimes called <emphasis>vertical synchronization</emphasis>, <emphasis>vertical retrace synchronization</emphasis> or just <emphasis>vsync</emphasis>.</para>

<para>A context that supports either of the <computeroutput>WGL_EXT_swap_control_tear</computeroutput> and <computeroutput>GLX_EXT_swap_control_tear</computeroutput> extensions also accepts <emphasis>negative</emphasis> swap intervals, which allows the driver to swap immediately even if a frame arrives a little bit late. You can check for these extensions with <link linkend="_group__context_1ga9a28c712d35f9e43534e1d03b051c04c">glfwExtensionSupported</link>.</para>

<para>A context must be current on the calling thread. Calling this function without a current context will cause a <link linkend="_group__errors_1gaa8290386e9528ccb9e42a3a4e16fc0d0">GLFW_NO_CURRENT_CONTEXT</link> error.</para>

<para>This function does not apply to Vulkan. If you are rendering with Vulkan, see the present mode of your swapchain instead.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>in</entry><entry>interval</entry><entry>
<para>The minimum number of screen updates to wait for until the buffers are swapped by <link linkend="_group__window_1gafb827800eedbfcbc97b1e5408df668d7">glfwSwapBuffers</link>.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @errors Possible errors include <link linkend="_group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a">GLFW_NOT_INITIALIZED</link>, <link linkend="_group__errors_1gaa8290386e9528ccb9e42a3a4e16fc0d0">GLFW_NO_CURRENT_CONTEXT</link> and <link linkend="_group__errors_1gad44162d78100ea5e87cdd38426b8c7a1">GLFW_PLATFORM_ERROR</link>.</para>

<para><formalpara><title>Remarks</title>

<para>This function is not called during context creation, leaving the swap interval set to whatever is the default on that platform. This is done because some swap interval extensions used by GLFW do not allow the swap interval to be reset to zero once it has been set to a non-zero value.</para>

<para>Some GPU drivers do not honor the requested swap interval, either because of a user setting that overrides the application&apos;s request or due to bugs in the driver.</para>
</formalpara>
@thread_safety This function may be called from any thread.</para>

<para><formalpara><title>See also</title>

<para>buffer_swap </para>

<para><link linkend="_group__window_1gafb827800eedbfcbc97b1e5408df668d7">glfwSwapBuffers</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>Added in version 1.0. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__context_ga12a595c06947cec4967c6e1f14210a8a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__context_ga12a595c06947cec4967c6e1f14210a8a_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
</section>
