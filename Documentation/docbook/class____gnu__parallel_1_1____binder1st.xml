<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class____gnu__parallel_1_1____binder1st" xml:lang="en-US">
<title>__gnu_parallel::__binder1st&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt; Class Template Reference</title>
<indexterm><primary>__gnu_parallel::__binder1st&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt;</primary></indexterm>
<para>

<para>Similar to std::binder1st, but giving the argument types explicitly. </para>
 
</para>
<para>
<computeroutput>#include &lt;base.h&gt;</computeroutput>
</para>
Inheritance diagram for __gnu_parallel::__binder1st&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__parallel_1_1____binder1st__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for __gnu_parallel::__binder1st&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__parallel_1_1____binder1st__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class____gnu__parallel_1_1____binder1st_1aca2704d366a7834354faa7991c20a955">__binder1st</link> (const _Operation &amp;__x, const _FirstArgumentType &amp;__y)</para>
</listitem>
            <listitem><para>_ResultType <link linkend="_class____gnu__parallel_1_1____binder1st_1a7c2be6673ea4a4981952e613a43bd1d5">operator()</link> (const _SecondArgumentType &amp;__x)</para>
</listitem>
            <listitem><para>_ResultType <link linkend="_class____gnu__parallel_1_1____binder1st_1a6d174093d2574f98132f84a60de81419">operator()</link> (_SecondArgumentType &amp;__x) const</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__parallel_1_1____binder1st_1aca2704d366a7834354faa7991c20a955">__binder1st</link> (const _Operation &amp;__x, const _FirstArgumentType &amp;__y)</para>
</listitem>
            <listitem><para>_ResultType <link linkend="_class____gnu__parallel_1_1____binder1st_1a7c2be6673ea4a4981952e613a43bd1d5">operator()</link> (const _SecondArgumentType &amp;__x)</para>
</listitem>
            <listitem><para>_ResultType <link linkend="_class____gnu__parallel_1_1____binder1st_1a6d174093d2574f98132f84a60de81419">operator()</link> (_SecondArgumentType &amp;__x) const</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__parallel_1_1____binder1st_1aca2704d366a7834354faa7991c20a955">__binder1st</link> (const _Operation &amp;__x, const _FirstArgumentType &amp;__y)</para>
</listitem>
            <listitem><para>_ResultType <link linkend="_class____gnu__parallel_1_1____binder1st_1a7c2be6673ea4a4981952e613a43bd1d5">operator()</link> (const _SecondArgumentType &amp;__x)</para>
</listitem>
            <listitem><para>_ResultType <link linkend="_class____gnu__parallel_1_1____binder1st_1a6d174093d2574f98132f84a60de81419">operator()</link> (_SecondArgumentType &amp;__x) const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para>_Operation <link linkend="_class____gnu__parallel_1_1____binder1st_1a9203574798827838bb80fcc5419be491">_M_op</link></para>
</listitem>
            <listitem><para>_FirstArgumentType <link linkend="_class____gnu__parallel_1_1____binder1st_1aa5c9f2134fda256f7c72810a633e4fc4">_M_value</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename _Operation, typename _FirstArgumentType, typename _SecondArgumentType, typename _ResultType&gt;<?linebreak?>class __gnu_parallel::__binder1st&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt;</title></simplesect>

<para>Similar to std::binder1st, but giving the argument types explicitly. </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class____gnu__parallel_1_1____binder1st_1aca2704d366a7834354faa7991c20a955"/><section>
    <title>__binder1st()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>__binder1st</primary><secondary>__gnu_parallel::__binder1st&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt;</secondary></indexterm>
<indexterm><primary>__gnu_parallel::__binder1st&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt;</primary><secondary>__binder1st</secondary></indexterm>
<computeroutput>template&lt;typename _Operation , typename _FirstArgumentType , typename _SecondArgumentType , typename _ResultType &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__parallel_1_1____binder1st">__gnu_parallel::__binder1st</link>&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt;::__binder1st (const _Operation &amp; __x, const _FirstArgumentType &amp; __y)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__parallel_1_1____binder1st_1aca2704d366a7834354faa7991c20a955"/><section>
    <title>__binder1st()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>__binder1st</primary><secondary>__gnu_parallel::__binder1st&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt;</secondary></indexterm>
<indexterm><primary>__gnu_parallel::__binder1st&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt;</primary><secondary>__binder1st</secondary></indexterm>
<computeroutput>template&lt;typename _Operation , typename _FirstArgumentType , typename _SecondArgumentType , typename _ResultType &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__parallel_1_1____binder1st">__gnu_parallel::__binder1st</link>&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt;::__binder1st (const _Operation &amp; __x, const _FirstArgumentType &amp; __y)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__parallel_1_1____binder1st_1aca2704d366a7834354faa7991c20a955"/><section>
    <title>__binder1st()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>__binder1st</primary><secondary>__gnu_parallel::__binder1st&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt;</secondary></indexterm>
<indexterm><primary>__gnu_parallel::__binder1st&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt;</primary><secondary>__binder1st</secondary></indexterm>
<computeroutput>template&lt;typename _Operation , typename _FirstArgumentType , typename _SecondArgumentType , typename _ResultType &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__parallel_1_1____binder1st">__gnu_parallel::__binder1st</link>&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt;::__binder1st (const _Operation &amp; __x, const _FirstArgumentType &amp; __y)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class____gnu__parallel_1_1____binder1st_1a6d174093d2574f98132f84a60de81419"/><section>
    <title>operator()()<computeroutput>[1/6]</computeroutput></title>
<indexterm><primary>operator()</primary><secondary>__gnu_parallel::__binder1st&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt;</secondary></indexterm>
<indexterm><primary>__gnu_parallel::__binder1st&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt;</primary><secondary>operator()</secondary></indexterm>
<computeroutput>template&lt;typename _Operation , typename _FirstArgumentType , typename _SecondArgumentType , typename _ResultType &gt; </computeroutput><para><computeroutput>_ResultType <link linkend="_class____gnu__parallel_1_1____binder1st">__gnu_parallel::__binder1st</link>&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt;::operator() (_SecondArgumentType &amp; __x) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__parallel_1_1____binder1st_1a6d174093d2574f98132f84a60de81419"/><section>
    <title>operator()()<computeroutput>[2/6]</computeroutput></title>
<indexterm><primary>operator()</primary><secondary>__gnu_parallel::__binder1st&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt;</secondary></indexterm>
<indexterm><primary>__gnu_parallel::__binder1st&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt;</primary><secondary>operator()</secondary></indexterm>
<computeroutput>template&lt;typename _Operation , typename _FirstArgumentType , typename _SecondArgumentType , typename _ResultType &gt; </computeroutput><para><computeroutput>_ResultType <link linkend="_class____gnu__parallel_1_1____binder1st">__gnu_parallel::__binder1st</link>&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt;::operator() (_SecondArgumentType &amp; __x) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__parallel_1_1____binder1st_1a6d174093d2574f98132f84a60de81419"/><section>
    <title>operator()()<computeroutput>[3/6]</computeroutput></title>
<indexterm><primary>operator()</primary><secondary>__gnu_parallel::__binder1st&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt;</secondary></indexterm>
<indexterm><primary>__gnu_parallel::__binder1st&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt;</primary><secondary>operator()</secondary></indexterm>
<computeroutput>template&lt;typename _Operation , typename _FirstArgumentType , typename _SecondArgumentType , typename _ResultType &gt; </computeroutput><para><computeroutput>_ResultType <link linkend="_class____gnu__parallel_1_1____binder1st">__gnu_parallel::__binder1st</link>&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt;::operator() (_SecondArgumentType &amp; __x) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__parallel_1_1____binder1st_1a7c2be6673ea4a4981952e613a43bd1d5"/><section>
    <title>operator()()<computeroutput>[4/6]</computeroutput></title>
<indexterm><primary>operator()</primary><secondary>__gnu_parallel::__binder1st&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt;</secondary></indexterm>
<indexterm><primary>__gnu_parallel::__binder1st&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt;</primary><secondary>operator()</secondary></indexterm>
<computeroutput>template&lt;typename _Operation , typename _FirstArgumentType , typename _SecondArgumentType , typename _ResultType &gt; </computeroutput><para><computeroutput>_ResultType <link linkend="_class____gnu__parallel_1_1____binder1st">__gnu_parallel::__binder1st</link>&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt;::operator() (const _SecondArgumentType &amp; __x)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__parallel_1_1____binder1st_1a7c2be6673ea4a4981952e613a43bd1d5"/><section>
    <title>operator()()<computeroutput>[5/6]</computeroutput></title>
<indexterm><primary>operator()</primary><secondary>__gnu_parallel::__binder1st&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt;</secondary></indexterm>
<indexterm><primary>__gnu_parallel::__binder1st&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt;</primary><secondary>operator()</secondary></indexterm>
<computeroutput>template&lt;typename _Operation , typename _FirstArgumentType , typename _SecondArgumentType , typename _ResultType &gt; </computeroutput><para><computeroutput>_ResultType <link linkend="_class____gnu__parallel_1_1____binder1st">__gnu_parallel::__binder1st</link>&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt;::operator() (const _SecondArgumentType &amp; __x)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__parallel_1_1____binder1st_1a7c2be6673ea4a4981952e613a43bd1d5"/><section>
    <title>operator()()<computeroutput>[6/6]</computeroutput></title>
<indexterm><primary>operator()</primary><secondary>__gnu_parallel::__binder1st&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt;</secondary></indexterm>
<indexterm><primary>__gnu_parallel::__binder1st&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt;</primary><secondary>operator()</secondary></indexterm>
<computeroutput>template&lt;typename _Operation , typename _FirstArgumentType , typename _SecondArgumentType , typename _ResultType &gt; </computeroutput><para><computeroutput>_ResultType <link linkend="_class____gnu__parallel_1_1____binder1st">__gnu_parallel::__binder1st</link>&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt;::operator() (const _SecondArgumentType &amp; __x)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class____gnu__parallel_1_1____binder1st_1a9203574798827838bb80fcc5419be491"/><section>
    <title>_M_op</title>
<indexterm><primary>_M_op</primary><secondary>__gnu_parallel::__binder1st&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt;</secondary></indexterm>
<indexterm><primary>__gnu_parallel::__binder1st&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt;</primary><secondary>_M_op</secondary></indexterm>
<computeroutput>template&lt;typename _Operation , typename _FirstArgumentType , typename _SecondArgumentType , typename _ResultType &gt; </computeroutput><para><computeroutput>_Operation <link linkend="_class____gnu__parallel_1_1____binder1st">__gnu_parallel::__binder1st</link>&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt;::_M_op<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__parallel_1_1____binder1st_1aa5c9f2134fda256f7c72810a633e4fc4"/><section>
    <title>_M_value</title>
<indexterm><primary>_M_value</primary><secondary>__gnu_parallel::__binder1st&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt;</secondary></indexterm>
<indexterm><primary>__gnu_parallel::__binder1st&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt;</primary><secondary>_M_value</secondary></indexterm>
<computeroutput>template&lt;typename _Operation , typename _FirstArgumentType , typename _SecondArgumentType , typename _ResultType &gt; </computeroutput><para><computeroutput>_FirstArgumentType <link linkend="_class____gnu__parallel_1_1____binder1st">__gnu_parallel::__binder1st</link>&lt; _Operation, _FirstArgumentType, _SecondArgumentType, _ResultType &gt;::_M_value<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following files:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/parallel/<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2base_8h">base.h</link>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/parallel/<link linkend="_lib_2include_2c_09_09_2parallel_2base_8h">base.h</link>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/parallel/<link linkend="__old_2_classes_2lib_2include_2c_09_09_2parallel_2base_8h">base.h</link></section>
</section>
