<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2bits_2stl__iterator__base__funcs_8h_source" xml:lang="en-US">
<title>stl_iterator_base_funcs.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/bits/stl_iterator_base_funcs.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Functions&#32;used&#32;by&#32;iterators&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2001-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">/*</emphasis>
26 <emphasis role="comment">&#32;*</emphasis>
27 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1994</emphasis>
28 <emphasis role="comment">&#32;*&#32;Hewlett-Packard&#32;Company</emphasis>
29 <emphasis role="comment">&#32;*</emphasis>
30 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
31 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
32 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
33 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
34 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Hewlett-Packard&#32;Company&#32;makes&#32;no</emphasis>
35 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
36 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
37 <emphasis role="comment">&#32;*</emphasis>
38 <emphasis role="comment">&#32;*</emphasis>
39 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1996-1998</emphasis>
40 <emphasis role="comment">&#32;*&#32;Silicon&#32;Graphics&#32;Computer&#32;Systems,&#32;Inc.</emphasis>
41 <emphasis role="comment">&#32;*</emphasis>
42 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
43 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
44 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
45 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
46 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Silicon&#32;Graphics&#32;makes&#32;no</emphasis>
47 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
48 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
49 <emphasis role="comment">&#32;*/</emphasis>
50 
59 <emphasis role="preprocessor">#ifndef&#32;_STL_ITERATOR_BASE_FUNCS_H</emphasis>
60 <emphasis role="preprocessor">#define&#32;_STL_ITERATOR_BASE_FUNCS_H&#32;1</emphasis>
61 
62 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
63 
64 <emphasis role="preprocessor">#include&#32;&lt;bits/concept_check.h&gt;</emphasis>
65 <emphasis role="preprocessor">#include&#32;&lt;debug/assertions.h&gt;</emphasis>
66 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_iterator_base_types.h&gt;</emphasis>
67 
68 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
69 {
70 _GLIBCXX_BEGIN_NAMESPACE_VERSION
71 
72 _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
73 &#32;&#32;<emphasis role="comment">//&#32;Forward&#32;declaration&#32;for&#32;the&#32;overloads&#32;of&#32;__distance.</emphasis>
74 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>_List_iterator;
75 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>_List_const_iterator;
76 _GLIBCXX_END_NAMESPACE_CONTAINER
77 
78 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
79 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX14_CONSTEXPR
80 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::difference_type
81 &#32;&#32;&#32;&#32;__distance(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input_iterator_tag)
83 &#32;&#32;&#32;&#32;{
84 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
85 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator&gt;)
86 
87 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::difference_type&#32;__n&#32;=&#32;0;
88 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first&#32;!=&#32;__last)
89 &#32;&#32;&#32;&#32;{
90 &#32;&#32;&#32;&#32;&#32;&#32;++__first;
91 &#32;&#32;&#32;&#32;&#32;&#32;++__n;
92 &#32;&#32;&#32;&#32;}
93 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__n;
94 &#32;&#32;&#32;&#32;}
95 
96 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator&gt;
97 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX14_CONSTEXPR
98 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_RandomAccessIterator&gt;::difference_type
99 &#32;&#32;&#32;&#32;__distance(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag)
101 &#32;&#32;&#32;&#32;{
102 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
103 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_RandomAccessIteratorConcept&lt;
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&gt;)
105 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__last&#32;-&#32;__first;
106 &#32;&#32;&#32;&#32;}
107 
108 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_CXX11_ABI</emphasis>
109 &#32;&#32;<emphasis role="comment">//&#32;Forward&#32;declaration&#32;because&#32;of&#32;the&#32;qualified&#32;call&#32;in&#32;distance.</emphasis>
110 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
111 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>
112 &#32;&#32;&#32;&#32;__distance(_GLIBCXX_STD_C::_List_iterator&lt;_Tp&gt;,
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_STD_C::_List_iterator&lt;_Tp&gt;,
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input_iterator_tag);
115 
116 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
117 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>
118 &#32;&#32;&#32;&#32;__distance(_GLIBCXX_STD_C::_List_const_iterator&lt;_Tp&gt;,
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_STD_C::_List_const_iterator&lt;_Tp&gt;,
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input_iterator_tag);
121 <emphasis role="preprocessor">#endif</emphasis>
122 
123 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
124 &#32;&#32;<emphasis role="comment">//&#32;Give&#32;better&#32;error&#32;if&#32;std::distance&#32;called&#32;with&#32;a&#32;non-Cpp17InputIterator.</emphasis>
125 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator&gt;
126 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
127 &#32;&#32;&#32;&#32;__distance(_OutputIterator,&#32;_OutputIterator,&#32;output_iterator_tag)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
128 <emphasis role="preprocessor">#endif</emphasis>
129 
143 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
144 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
145 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX17_CONSTEXPR
146 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::difference_type
147 &#32;&#32;&#32;&#32;<link linkend="_namespacedistance">distance</link>(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
148 &#32;&#32;&#32;&#32;{
149 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements&#32;--&#32;taken&#32;care&#32;of&#32;in&#32;__distance</emphasis>
150 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__distance(__first,&#32;__last,
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__first));
152 &#32;&#32;&#32;&#32;}
153 
154 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Distance&gt;
155 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX14_CONSTEXPR&#32;<emphasis role="keywordtype">void</emphasis>
156 &#32;&#32;&#32;&#32;__advance(_InputIterator&amp;&#32;__i,&#32;_Distance&#32;__n,&#32;input_iterator_tag)
157 &#32;&#32;&#32;&#32;{
158 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
159 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator&gt;)
160 &#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(__n&#32;&gt;=&#32;0);
161 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__n--)
162 &#32;&#32;&#32;&#32;++__i;
163 &#32;&#32;&#32;&#32;}
164 
165 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Distance&gt;
166 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX14_CONSTEXPR&#32;<emphasis role="keywordtype">void</emphasis>
167 &#32;&#32;&#32;&#32;__advance(_BidirectionalIterator&amp;&#32;__i,&#32;_Distance&#32;__n,
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bidirectional_iterator_tag)
169 &#32;&#32;&#32;&#32;{
170 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
171 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BidirectionalIteratorConcept&lt;
172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&gt;)
173 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&gt;&#32;0)
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__n--)
175 &#32;&#32;&#32;&#32;&#32;&#32;++__i;
176 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__n++)
178 &#32;&#32;&#32;&#32;&#32;&#32;--__i;
179 &#32;&#32;&#32;&#32;}
180 
181 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Distance&gt;
182 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX14_CONSTEXPR&#32;<emphasis role="keywordtype">void</emphasis>
183 &#32;&#32;&#32;&#32;__advance(_RandomAccessIterator&amp;&#32;__i,&#32;_Distance&#32;__n,
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag)
185 &#32;&#32;&#32;&#32;{
186 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
187 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_RandomAccessIteratorConcept&lt;
188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&gt;)
189 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_constant_p(__n)&#32;&amp;&amp;&#32;__n&#32;==&#32;1)
190 &#32;&#32;&#32;&#32;++__i;
191 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_constant_p(__n)&#32;&amp;&amp;&#32;__n&#32;==&#32;-1)
192 &#32;&#32;&#32;&#32;--__i;
193 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
194 &#32;&#32;&#32;&#32;__i&#32;+=&#32;__n;
195 &#32;&#32;&#32;&#32;}
196 
197 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
198 &#32;&#32;<emphasis role="comment">//&#32;Give&#32;better&#32;error&#32;if&#32;std::advance&#32;called&#32;with&#32;a&#32;non-Cpp17InputIterator.</emphasis>
199 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Distance&gt;
200 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
201 &#32;&#32;&#32;&#32;__advance(_OutputIterator&amp;,&#32;_Distance,&#32;output_iterator_tag)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
202 <emphasis role="preprocessor">#endif</emphasis>
203 
216 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Distance&gt;
217 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">void</emphasis>
218 &#32;&#32;&#32;&#32;advance(_InputIterator&amp;&#32;__i,&#32;_Distance&#32;__n)
219 &#32;&#32;&#32;&#32;{
220 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements&#32;--&#32;taken&#32;care&#32;of&#32;in&#32;__advance</emphasis>
221 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::difference_type&#32;__d&#32;=&#32;__n;
222 &#32;&#32;&#32;&#32;&#32;&#32;std::__advance(__i,&#32;__d,&#32;std::__iterator_category(__i));
223 &#32;&#32;&#32;&#32;}
224 
225 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
226 
227 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
228 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
229 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;_InputIterator
230 &#32;&#32;&#32;&#32;next(_InputIterator&#32;__x,&#32;<emphasis role="keyword">typename</emphasis>
231 &#32;&#32;&#32;&#32;&#32;iterator_traits&lt;_InputIterator&gt;::difference_type&#32;__n&#32;=&#32;1)
232 &#32;&#32;&#32;&#32;{
233 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
234 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator&gt;)
235 &#32;&#32;&#32;&#32;&#32;&#32;std::advance(__x,&#32;__n);
236 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x;
237 &#32;&#32;&#32;&#32;}
238 
239 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator&gt;
240 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
241 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;_BidirectionalIterator
242 &#32;&#32;&#32;&#32;prev(_BidirectionalIterator&#32;__x,&#32;<emphasis role="keyword">typename</emphasis>
243 &#32;&#32;&#32;&#32;&#32;iterator_traits&lt;_BidirectionalIterator&gt;::difference_type&#32;__n&#32;=&#32;1)&#32;
244 &#32;&#32;&#32;&#32;{
245 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
246 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BidirectionalIteratorConcept&lt;
247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&gt;)
248 &#32;&#32;&#32;&#32;&#32;&#32;std::advance(__x,&#32;-__n);
249 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x;
250 &#32;&#32;&#32;&#32;}
251 
252 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
253 
254 _GLIBCXX_END_NAMESPACE_VERSION
255 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
256 
257 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_STL_ITERATOR_BASE_FUNCS_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
