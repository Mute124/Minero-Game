<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2bits_2basic__ios_8h_source" xml:lang="en-US">
<title>basic_ios.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/bits/basic_ios.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Iostreams&#32;base&#32;classes&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;1997-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_BASIC_IOS_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_BASIC_IOS_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
34 
35 <emphasis role="preprocessor">#include&#32;&lt;bits/localefwd.h&gt;</emphasis>
36 <emphasis role="preprocessor">#include&#32;&lt;bits/locale_classes.h&gt;</emphasis>
37 <emphasis role="preprocessor">#include&#32;&lt;bits/locale_facets.h&gt;</emphasis>
38 <emphasis role="preprocessor">#include&#32;&lt;bits/streambuf_iterator.h&gt;</emphasis>
39 <emphasis role="preprocessor">#include&#32;&lt;bits/move.h&gt;</emphasis>
40 
41 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
42 {
43 _GLIBCXX_BEGIN_NAMESPACE_VERSION
44 
45 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Facet&gt;
46 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Facet&amp;
47 &#32;&#32;&#32;&#32;__check_facet(<emphasis role="keyword">const</emphasis>&#32;_Facet*&#32;__f)
48 &#32;&#32;&#32;&#32;{
49 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__f)
50 &#32;&#32;&#32;&#32;__throw_bad_cast();
51 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*__f;
52 &#32;&#32;&#32;&#32;}
53 
66 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
67 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>basic_ios&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;ios_base
68 &#32;&#32;&#32;&#32;{
69 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
71 
76 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char_type;
77 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits::int_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int_type;
78 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits::pos_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos_type;
79 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits::off_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;off_type;
80 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Traits&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits_type;
82 
84 
87 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;ctype&lt;_CharT&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ctype_type;
88 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;num_put&lt;_CharT,&#32;ostreambuf_iterator&lt;_CharT,&#32;_Traits&gt;&#32;&gt;
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__num_put_type;
90 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;num_get&lt;_CharT,&#32;istreambuf_iterator&lt;_CharT,&#32;_Traits&gt;&#32;&gt;
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__num_get_type;
93 
94 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Data&#32;members:</emphasis>
95 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
96 &#32;&#32;&#32;&#32;&#32;&#32;basic_ostream&lt;_CharT,&#32;_Traits&gt;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_tie;
97 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;char_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_fill;
98 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_fill_init;
99 &#32;&#32;&#32;&#32;&#32;&#32;basic_streambuf&lt;_CharT,&#32;_Traits&gt;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_streambuf;
100 
101 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Cached&#32;use_facet&lt;ctype&gt;,&#32;which&#32;is&#32;based&#32;on&#32;the&#32;current&#32;locale&#32;info.</emphasis>
102 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__ctype_type*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_ctype;
103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;ostream.</emphasis>
104 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__num_put_type*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_num_put;
105 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;istream.</emphasis>
106 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__num_get_type*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_num_get;
107 
108 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
110 
116 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
117 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>()<emphasis role="keyword">&#32;const</emphasis>
118 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!this-&gt;fail();&#32;}
119 <emphasis role="preprocessor">#else</emphasis>
120 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*()&#32;<emphasis role="keyword">const</emphasis>
121 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;fail()&#32;?&#32;0&#32;:&#32;<emphasis role="keyword">const_cast&lt;</emphasis>basic_ios*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>);&#32;}
122 <emphasis role="preprocessor">#endif</emphasis>
123 
124 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
125 &#32;&#32;&#32;&#32;&#32;&#32;operator!()<emphasis role="keyword">&#32;const</emphasis>
126 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;fail();&#32;}
128 
136 &#32;&#32;&#32;&#32;&#32;&#32;iostate
137 &#32;&#32;&#32;&#32;&#32;&#32;rdstate()<emphasis role="keyword">&#32;const</emphasis>
138 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_streambuf_state;&#32;}
139 
147 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
148 &#32;&#32;&#32;&#32;&#32;&#32;clear(iostate&#32;__state&#32;=&#32;goodbit);
149 
156 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
157 &#32;&#32;&#32;&#32;&#32;&#32;setstate(iostate&#32;__state)
158 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;this-&gt;clear(this-&gt;rdstate()&#32;|&#32;__state);&#32;}
159 
160 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Flip&#32;the&#32;internal&#32;state&#32;on&#32;for&#32;the&#32;proper&#32;state&#32;bits,&#32;then</emphasis>
161 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;rethrows&#32;the&#32;propagated&#32;exception&#32;if&#32;bit&#32;also&#32;set&#32;in</emphasis>
162 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;exceptions().</emphasis>
163 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
164 &#32;&#32;&#32;&#32;&#32;&#32;_M_setstate(iostate&#32;__state)
165 &#32;&#32;&#32;&#32;&#32;&#32;{
166 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;27.6.1.2.1&#32;Common&#32;requirements.</emphasis>
167 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Turn&#32;this&#32;on&#32;without&#32;causing&#32;an&#32;ios::failure&#32;to&#32;be&#32;thrown.</emphasis>
168 &#32;&#32;&#32;&#32;_M_streambuf_state&#32;|=&#32;__state;
169 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;exceptions()&#32;&amp;&#32;__state)
170 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
171 &#32;&#32;&#32;&#32;&#32;&#32;}
172 
179 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
180 &#32;&#32;&#32;&#32;&#32;&#32;good()<emphasis role="keyword">&#32;const</emphasis>
181 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;rdstate()&#32;==&#32;0;&#32;}
182 
189 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
190 &#32;&#32;&#32;&#32;&#32;&#32;eof()<emphasis role="keyword">&#32;const</emphasis>
191 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(this-&gt;rdstate()&#32;&amp;&#32;eofbit)&#32;!=&#32;0;&#32;}
192 
200 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
201 &#32;&#32;&#32;&#32;&#32;&#32;fail()<emphasis role="keyword">&#32;const</emphasis>
202 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(this-&gt;rdstate()&#32;&amp;&#32;(badbit&#32;|&#32;failbit))&#32;!=&#32;0;&#32;}
203 
210 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
211 &#32;&#32;&#32;&#32;&#32;&#32;bad()<emphasis role="keyword">&#32;const</emphasis>
212 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(this-&gt;rdstate()&#32;&amp;&#32;badbit)&#32;!=&#32;0;&#32;}
213 
221 &#32;&#32;&#32;&#32;&#32;&#32;iostate
222 &#32;&#32;&#32;&#32;&#32;&#32;exceptions()<emphasis role="keyword">&#32;const</emphasis>
223 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_exception;&#32;}
224 
256 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
257 &#32;&#32;&#32;&#32;&#32;&#32;exceptions(iostate&#32;__except)
258 &#32;&#32;&#32;&#32;&#32;&#32;{
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_exception&#32;=&#32;__except;
260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;clear(_M_streambuf_state);
261 &#32;&#32;&#32;&#32;&#32;&#32;}
262 
263 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Constructor/destructor:</emphasis>
269 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
270 &#32;&#32;&#32;&#32;&#32;&#32;basic_ios(basic_streambuf&lt;_CharT,&#32;_Traits&gt;*&#32;__sb)
271 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;ios_base(),&#32;_M_tie(0),&#32;_M_fill(),&#32;_M_fill_init(<emphasis role="keyword">false</emphasis>),&#32;_M_streambuf(0),
272 &#32;&#32;&#32;&#32;_M_ctype(0),&#32;_M_num_put(0),&#32;_M_num_get(0)
273 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;this-&gt;init(__sb);&#32;}
274 
281 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
282 &#32;&#32;&#32;&#32;&#32;&#32;~basic_ios()&#32;{&#32;}
283 
284 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Members:</emphasis>
294 &#32;&#32;&#32;&#32;&#32;&#32;basic_ostream&lt;_CharT,&#32;_Traits&gt;*
295 &#32;&#32;&#32;&#32;&#32;&#32;tie()<emphasis role="keyword">&#32;const</emphasis>
296 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_tie;&#32;}
297 
306 &#32;&#32;&#32;&#32;&#32;&#32;basic_ostream&lt;_CharT,&#32;_Traits&gt;*
307 &#32;&#32;&#32;&#32;&#32;&#32;tie(basic_ostream&lt;_CharT,&#32;_Traits&gt;*&#32;__tiestr)
308 &#32;&#32;&#32;&#32;&#32;&#32;{
309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;basic_ostream&lt;_CharT,&#32;_Traits&gt;*&#32;__old&#32;=&#32;_M_tie;
310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_tie&#32;=&#32;__tiestr;
311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__old;
312 &#32;&#32;&#32;&#32;&#32;&#32;}
313 
320 &#32;&#32;&#32;&#32;&#32;&#32;basic_streambuf&lt;_CharT,&#32;_Traits&gt;*
321 &#32;&#32;&#32;&#32;&#32;&#32;rdbuf()<emphasis role="keyword">&#32;const</emphasis>
322 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_streambuf;&#32;}
323 
346 &#32;&#32;&#32;&#32;&#32;&#32;basic_streambuf&lt;_CharT,&#32;_Traits&gt;*
347 &#32;&#32;&#32;&#32;&#32;&#32;rdbuf(basic_streambuf&lt;_CharT,&#32;_Traits&gt;*&#32;__sb);
348 
360 &#32;&#32;&#32;&#32;&#32;&#32;basic_ios&amp;
361 &#32;&#32;&#32;&#32;&#32;&#32;copyfmt(<emphasis role="keyword">const</emphasis>&#32;basic_ios&amp;&#32;__rhs);
362 
369 &#32;&#32;&#32;&#32;&#32;&#32;char_type
370 &#32;&#32;&#32;&#32;&#32;&#32;fill()<emphasis role="keyword">&#32;const</emphasis>
371 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
372 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_fill_init)
373 &#32;&#32;&#32;&#32;&#32;&#32;{
374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_fill&#32;=&#32;this-&gt;widen(<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>);
375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_fill_init&#32;=&#32;<emphasis role="keyword">true</emphasis>;
376 &#32;&#32;&#32;&#32;&#32;&#32;}
377 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_fill;
378 &#32;&#32;&#32;&#32;&#32;&#32;}
379 
389 &#32;&#32;&#32;&#32;&#32;&#32;char_type
390 &#32;&#32;&#32;&#32;&#32;&#32;fill(char_type&#32;__ch)
391 &#32;&#32;&#32;&#32;&#32;&#32;{
392 &#32;&#32;&#32;&#32;char_type&#32;__old&#32;=&#32;this-&gt;fill();
393 &#32;&#32;&#32;&#32;_M_fill&#32;=&#32;__ch;
394 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__old;
395 &#32;&#32;&#32;&#32;&#32;&#32;}
396 
397 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Locales:</emphasis>
409 &#32;&#32;&#32;&#32;&#32;&#32;locale
410 &#32;&#32;&#32;&#32;&#32;&#32;imbue(<emphasis role="keyword">const</emphasis>&#32;locale&amp;&#32;__loc);
411 
429 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>
430 &#32;&#32;&#32;&#32;&#32;&#32;narrow(char_type&#32;__c,&#32;<emphasis role="keywordtype">char</emphasis>&#32;__dfault)<emphasis role="keyword">&#32;const</emphasis>
431 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__check_facet(_M_ctype).narrow(__c,&#32;__dfault);&#32;}
432 
448 &#32;&#32;&#32;&#32;&#32;&#32;char_type
449 &#32;&#32;&#32;&#32;&#32;&#32;widen(<emphasis role="keywordtype">char</emphasis>&#32;__c)<emphasis role="keyword">&#32;const</emphasis>
450 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__check_facet(_M_ctype).widen(__c);&#32;}
451 
452 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
453 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;27.4.5.1&#32;&#32;basic_ios&#32;constructors</emphasis>
460 &#32;&#32;&#32;&#32;&#32;&#32;basic_ios()
461 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;ios_base(),&#32;_M_tie(0),&#32;_M_fill(char_type()),&#32;_M_fill_init(<emphasis role="keyword">false</emphasis>),&#32;
462 &#32;&#32;&#32;&#32;_M_streambuf(0),&#32;_M_ctype(0),&#32;_M_num_put(0),&#32;_M_num_get(0)
463 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
464 
471 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
472 &#32;&#32;&#32;&#32;&#32;&#32;init(basic_streambuf&lt;_CharT,&#32;_Traits&gt;*&#32;__sb);
473 
474 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
475 &#32;&#32;&#32;&#32;&#32;&#32;basic_ios(<emphasis role="keyword">const</emphasis>&#32;basic_ios&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
476 &#32;&#32;&#32;&#32;&#32;&#32;basic_ios&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;basic_ios&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
477 
478 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
479 &#32;&#32;&#32;&#32;&#32;&#32;move(basic_ios&amp;&#32;__rhs)
480 &#32;&#32;&#32;&#32;&#32;&#32;{
481 &#32;&#32;&#32;&#32;ios_base::_M_move(__rhs);
482 &#32;&#32;&#32;&#32;_M_cache_locale(_M_ios_locale);
483 &#32;&#32;&#32;&#32;this-&gt;tie(__rhs.tie(<emphasis role="keyword">nullptr</emphasis>));
484 &#32;&#32;&#32;&#32;_M_fill&#32;=&#32;__rhs._M_fill;
485 &#32;&#32;&#32;&#32;_M_fill_init&#32;=&#32;__rhs._M_fill_init;
486 &#32;&#32;&#32;&#32;_M_streambuf&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
487 &#32;&#32;&#32;&#32;&#32;&#32;}
488 
489 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
490 &#32;&#32;&#32;&#32;&#32;&#32;move(basic_ios&amp;&amp;&#32;__rhs)
491 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;this-&gt;move(__rhs);&#32;}
492 
493 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
494 &#32;&#32;&#32;&#32;&#32;&#32;swap(basic_ios&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
495 &#32;&#32;&#32;&#32;&#32;&#32;{
496 &#32;&#32;&#32;&#32;ios_base::_M_swap(__rhs);
497 &#32;&#32;&#32;&#32;_M_cache_locale(_M_ios_locale);
498 &#32;&#32;&#32;&#32;__rhs._M_cache_locale(__rhs._M_ios_locale);
499 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(_M_tie,&#32;__rhs._M_tie);
500 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(_M_fill,&#32;__rhs._M_fill);
501 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(_M_fill_init,&#32;__rhs._M_fill_init);
502 &#32;&#32;&#32;&#32;&#32;&#32;}
503 
504 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
505 &#32;&#32;&#32;&#32;&#32;&#32;set_rdbuf(basic_streambuf&lt;_CharT,&#32;_Traits&gt;*&#32;__sb)
506 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_streambuf&#32;=&#32;__sb;&#32;}
507 <emphasis role="preprocessor">#endif</emphasis>
508 
509 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
510 &#32;&#32;&#32;&#32;&#32;&#32;_M_cache_locale(<emphasis role="keyword">const</emphasis>&#32;locale&amp;&#32;__loc);
511 &#32;&#32;&#32;&#32;};
512 
513 _GLIBCXX_END_NAMESPACE_VERSION
514 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
515 
516 <emphasis role="preprocessor">#include&#32;&lt;bits/basic_ios.tcc&gt;</emphasis>
517 
518 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_BASIC_IOS_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
