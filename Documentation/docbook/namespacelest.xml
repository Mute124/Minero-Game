<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_namespacelest" xml:lang="en-US">
<title>lest Namespace Reference</title>
<indexterm><primary>lest</primary></indexterm>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structlest_1_1action">action</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structlest_1_1add__module">add_module</link></para>
</listitem>
            <listitem><para>class <link linkend="_classlest_1_1approx">approx</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structlest_1_1comment">comment</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structlest_1_1confirm">confirm</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structlest_1_1count">count</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structlest_1_1ctx">ctx</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structlest_1_1env">env</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structlest_1_1expected">expected</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structlest_1_1expression__decomposer">expression_decomposer</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structlest_1_1expression__lhs">expression_lhs</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structlest_1_1failure">failure</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structlest_1_1got">got</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structlest_1_1got__none">got_none</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structlest_1_1guard">guard</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structlest_1_1is__container">is_container</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structlest_1_1is__streamable">is_streamable</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structlest_1_1location">location</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structlest_1_1make__tuple__string">make_tuple_string</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structlest_1_1make__tuple__string_3_01_t_u_00_010_01_4">make_tuple_string&lt; TU, 0 &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structlest_1_1message">message</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structlest_1_1options">options</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structlest_1_1passing">passing</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structlest_1_1print">print</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structlest_1_1ptags">ptags</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structlest_1_1result">result</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structlest_1_1success">success</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structlest_1_1test">test</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structlest_1_1timer">timer</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structlest_1_1times">times</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structlest_1_1unexpected">unexpected</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> = std::string</para>
</listitem>
            <listitem><para>using <link linkend="_namespacelest_1abadda50795fdee0bb844b52e73878699">texts</link> = std::vector&lt; <link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_namespacelest_1a549374a5f82f5cbab341c0513e037875">tests</link> = std::vector&lt; <link linkend="_structlest_1_1test">test</link> &gt;</para>
</listitem>
            <listitem><para>template&lt;typename T , typename <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link> &gt; </para><para>using <link linkend="_namespacelest_1a802f92ea2ee2351555de479c17047175">ForEnum</link> = typename std::enable_if&lt; std::is_enum&lt; T &gt;<link linkend="_classvalue">::value</link>, <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link> &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></para>
</listitem>
            <listitem><para>template&lt;typename T , typename <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link> &gt; </para><para>using <link linkend="_namespacelest_1a9db1cd982a17f8bd5fd50e14594916d5">ForNonEnum</link> = typename std::enable_if&lt; ! std::is_enum&lt; T &gt;<link linkend="_classvalue">::value</link>, <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link> &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></para>
</listitem>
            <listitem><para>template&lt;typename T , typename <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link> &gt; </para><para>using <link linkend="_namespacelest_1a09808b01733cf4b53229fac360cd8a8a">ForStreamable</link> = typename std::enable_if&lt; <link linkend="_structlest_1_1is__streamable">is_streamable</link>&lt; T &gt;<link linkend="_classvalue">::value</link>, <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link> &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></para>
</listitem>
            <listitem><para>template&lt;typename T , typename <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link> &gt; </para><para>using <link linkend="_namespacelest_1ae1ce65f69ae31c5b6d147a7b7b9182df">ForNonStreamable</link> = typename std::enable_if&lt; ! <link linkend="_structlest_1_1is__streamable">is_streamable</link>&lt; T &gt;<link linkend="_classvalue">::value</link>, <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link> &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></para>
</listitem>
            <listitem><para>template&lt;typename T , typename <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link> &gt; </para><para>using <link linkend="_namespacelest_1a307d6b6cc95fec22d9f5b29ad98efa2a">ForContainer</link> = typename std::enable_if&lt; <link linkend="_structlest_1_1is__container">is_container</link>&lt; T &gt;<link linkend="_classvalue">::value</link>, <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link> &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></para>
</listitem>
            <listitem><para>template&lt;typename T , typename <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link> &gt; </para><para>using <link linkend="_namespacelest_1a879fc3440ead743afa8d9ce103c7d01a">ForNonContainer</link> = typename std::enable_if&lt; ! <link linkend="_structlest_1_1is__container">is_container</link>&lt; T &gt;<link linkend="_classvalue">::value</link>, <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link> &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></para>
</listitem>
            <listitem><para>using <link linkend="_namespacelest_1a2b94dd1224b91163e866aa57a2bd7fa6">seed_t</link> = unsigned long</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespacelest_1aabbb03d17b6413a44e15633634cbcb2c">is_false</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespacelest_1a3f0ffea12c1607b0dfa015686a627b86">is_true</link> (<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> flag)</para>
</listitem>
            <listitem><para><link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> <link linkend="_namespacelest_1a5db38037638e98c45b6747710cb352c9">not_expr</link> (<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> <link linkend="_structlest_1_1message">message</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> <link linkend="_namespacelest_1af915c2b8fec1c7060257957752836a06">with_message</link> (<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> <link linkend="_structlest_1_1message">message</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> <link linkend="_namespacelest_1af095b334a6d23c1e9d0ab10d05cf7a4d">of_type</link> (<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> <link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespacelest_1aadbfd505723d1112999378364b6bd2a6">inform</link> (<link linkend="_structlest_1_1location">location</link> where, <link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> expr)</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>auto <link linkend="_namespacelest_1abe74c3410c560bcd1cf83d11ee2fb127">make_value_string</link> (T const &amp;<link linkend="_classvalue">value</link>) -&gt; std::string</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>auto <link linkend="_namespacelest_1ab3deb0f76da8e10ca19805e1dbba9303">make_memory_string</link> (T const &amp;item) -&gt; std::string</para>
</listitem>
            <listitem><para>char const * <link linkend="_namespacelest_1ac816ce5c4c1370754e1086ae54ff970c">sfx</link> (char const *)</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link> (std::nullptr_t)</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespacelest_1ad81138efaba3e44cc343115748636e92">to_string</link> (std::string const &amp;txt)</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespacelest_1ae4739cb1c34347afd93f46a20825f8d4">to_string</link> (std::wstring const &amp;txt)</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespacelest_1a262e29fa0d83e31a47a4ae1e88d344ff">to_string</link> (char const *const txt)</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespacelest_1a8aedddc014cd1a7910717adb3fae2667">to_string</link> (char *const txt)</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespacelest_1ad5e3847cff7466a2d4ccbd56a1e4cb66">to_string</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link> const *const txt)</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespacelest_1aa9ab24479b3be218a4d4bd07a2386e55">to_string</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link> *const txt)</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespacelest_1aa50a28594a3b556d8dfe758a65f5e383">to_string</link> (<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> flag)</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespacelest_1a50f4b95b9dedfe5207678d1768b08d90">to_string</link> (signed short <link linkend="_classvalue">value</link>)</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespacelest_1a609259bab2b50370a535697f21f6c6b0">to_string</link> (unsigned short <link linkend="_classvalue">value</link>)</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespacelest_1aead975e8adc9ff7b5c6191b015c6c315">to_string</link> (signed int <link linkend="_classvalue">value</link>)</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespacelest_1a1efd6c73c2acfb5db0f03e3a95f82505">to_string</link> (unsigned int <link linkend="_classvalue">value</link>)</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespacelest_1a1d1ccd6325dda10a14293235bc8f418a">to_string</link> (signed long <link linkend="_classvalue">value</link>)</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespacelest_1a2d31914f88e47d8b84f8024d89c9c9b5">to_string</link> (unsigned long <link linkend="_classvalue">value</link>)</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespacelest_1a404902cec843eb51e14e1267f9f68f14">to_string</link> (signed long long <link linkend="_classvalue">value</link>)</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespacelest_1a40790a98c999b06837c4be09dc8126cc">to_string</link> (unsigned long long <link linkend="_classvalue">value</link>)</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespacelest_1af149627f7ffd99c85241b3b7c16dee73">to_string</link> (double <link linkend="_classvalue">value</link>)</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespacelest_1a3d11119accc529f7d44f32c325566472">to_string</link> (float <link linkend="_classvalue">value</link>)</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespacelest_1aa2158658881e42560c6be45a8c41e98d">to_string</link> (signed char chr)</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespacelest_1afe966ba67ff7b6fd85c01656c5b9038e">to_string</link> (unsigned char chr)</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespacelest_1a32470935f196c9a8b314e94c1d8ec589">to_string</link> (char chr)</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>auto <link linkend="_namespacelest_1ab9f4ba47437f4693769fbaf1b5ecac40">make_enum_string</link> (T const &amp;) -&gt; <link linkend="_namespacelest_1a9db1cd982a17f8bd5fd50e14594916d5">ForNonEnum</link>&lt; T, std::string &gt;</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>auto <link linkend="_namespacelest_1a2921e3170302d0dc18c1c2bc33d6ec29">make_string</link> (T const &amp;item) -&gt; <link linkend="_namespacelest_1ae1ce65f69ae31c5b6d147a7b7b9182df">ForNonStreamable</link>&lt; T, std::string &gt;</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>auto <link linkend="_namespacelest_1af3c990afe2061da29a0a67b9d97c6745">make_string</link> (T *p) -&gt; std::string</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link> , typename <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link> &gt; </para><para>auto <link linkend="_namespacelest_1ace7301c17e55675244579480e546de07">make_string</link> (<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link> C::*p) -&gt; std::string</para>
</listitem>
            <listitem><para>template&lt;typename T1 , typename T2 &gt; </para><para>auto <link linkend="_namespacelest_1a53a07743eb59dc748037d2508b6ea73a">make_string</link> (std::pair&lt; T1, T2 &gt; const &amp;pair) -&gt; std::string</para>
</listitem>
            <listitem><para>template&lt;typename ... TS&gt; </para><para>auto <link linkend="_namespacelest_1a68b2dcdf6af1a1a19f457fd8765520a6">make_string</link> (std::tuple&lt; TS... &gt; const &amp;tuple) -&gt; std::string</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>auto <link linkend="_namespacelest_1a8f6847f0581bee5f6b3a8efcd7c63e79">to_string</link> (T const &amp;item) -&gt; <link linkend="_namespacelest_1a879fc3440ead743afa8d9ce103c7d01a">ForNonContainer</link>&lt; T, std::string &gt;</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link> &gt; </para><para>auto <link linkend="_namespacelest_1a1f08fec13a1ccde1df466d1fe0f9b805">to_string</link> (<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link> const &amp;cont) -&gt; <link linkend="_namespacelest_1a307d6b6cc95fec22d9f5b29ad98efa2a">ForContainer</link>&lt; <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link>, std::string &gt;</para>
</listitem>
            <listitem><para>auto <link linkend="_namespacelest_1af4cf90829d3679012ddd5788d10c31a2">make_memory_string</link> (<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> const *item, std::size_t <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>) -&gt; std::string</para>
</listitem>
            <listitem><para>auto <link linkend="_namespacelest_1a7c39fe56de7ef2d9eb204e324c8ea17b">to_string</link> (<link linkend="_classlest_1_1approx">approx</link> const &amp;appr) -&gt; std::string</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link> , typename <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link> &gt; </para><para>auto <link linkend="_namespacelest_1ad49b5ea606585b6f7d239843df57d5a8">to_string</link> (<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link> const &amp;lhs, std::string op, <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link> const &amp;rhs) -&gt; std::string</para>
</listitem>
            <listitem><para><link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> <link linkend="_namespacelest_1a9caf47f37e450e7ae4bac7a519b074f2">colourise</link> (<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> words)</para>
</listitem>
            <listitem><para><link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> <link linkend="_namespacelest_1a7d802100fe140961785074f81eaabe56">pluralise</link> (<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> word, int n)</para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_namespacelest_1aab7017a6e4f2ab6b263db6e762ae951f">operator&lt;&lt;</link> (std::ostream &amp;os, <link linkend="_structlest_1_1comment">comment</link> <link linkend="_structnote">note</link>)</para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_namespacelest_1af179ea4c47bf633cfa0fe3741aff9230">operator&lt;&lt;</link> (std::ostream &amp;os, <link linkend="_structlest_1_1location">location</link> where)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespacelest_1acd1d811cf4ab4bebd681f007789ca0d7">report</link> (std::ostream &amp;os, <link linkend="_structlest_1_1message">message</link> const &amp;e, <link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> <link linkend="_structlest_1_1test">test</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespacelest_1a415c4dec169b665859b5e08719d9227e">search</link> (<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> part, <link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> line)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespacelest_1a39aadbe27e6b271818d115e3e5c62bd1">match</link> (<link linkend="_namespacelest_1abadda50795fdee0bb844b52e73878699">texts</link> whats, <link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> line)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespacelest_1a1edb8bb9cf6c9793b8626cd80dcf1904">select</link> (<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>, <link linkend="_namespacelest_1abadda50795fdee0bb844b52e73878699">texts</link> include)</para>
</listitem>
            <listitem><para>int <link linkend="_namespacelest_1adb2d8ba32435d9eb40a998058baee6d8">indefinite</link> (int <link linkend="_namespacelest_1abbbd832c4fc795936cc5f21ccd9e3aed">repeat</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacelest_1abadda50795fdee0bb844b52e73878699">texts</link> <link linkend="_namespacelest_1a4a706c52e70ba58a7f005ccd83746c45">tags</link> (<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>, <link linkend="_namespacelest_1abadda50795fdee0bb844b52e73878699">texts</link> <link linkend="_structlest_1_1result">result</link>={})</para>
</listitem>
            <listitem><para>template&lt;typename Action &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespacelest_1ab14c66a1c73dc27109b1d9d89542b923">abort</link> (Action &amp;perform)</para>
</listitem>
            <listitem><para>template&lt;typename Action &gt; </para><para>Action &amp;&amp; <link linkend="_namespacelest_1af527784a6a57085ee814b08da444cda1">for_test</link> (<link linkend="_namespacelest_1a549374a5f82f5cbab341c0513e037875">tests</link> specification, <link linkend="_namespacelest_1abadda50795fdee0bb844b52e73878699">texts</link> <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>, Action &amp;&amp;perform, int n=1)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespacelest_1ac09122525e14bc4cc1c535bfc06eb935">sort</link> (<link linkend="_namespacelest_1a549374a5f82f5cbab341c0513e037875">tests</link> &amp;specification)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespacelest_1abc0275611237ee9364ae8d16e82cb83b">shuffle</link> (<link linkend="_namespacelest_1a549374a5f82f5cbab341c0513e037875">tests</link> &amp;specification, <link linkend="_structlest_1_1options">options</link> <link linkend="_structoption">option</link>)</para>
</listitem>
            <listitem><para>int <link linkend="_namespacelest_1aa8f139b4d4ae346e4caa755ec5af3798">stoi</link> (<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abb50fc1ead3a02a46fb52daa2045f95c">num</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespacelest_1ad0cec29d317e9251fba82583953fabe5">is_number</link> (<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> arg)</para>
</listitem>
            <listitem><para><link linkend="_namespacelest_1a2b94dd1224b91163e866aa57a2bd7fa6">seed_t</link> <link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link> (<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> opt, <link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> arg)</para>
</listitem>
            <listitem><para>int <link linkend="_namespacelest_1abbbd832c4fc795936cc5f21ccd9e3aed">repeat</link> (<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> opt, <link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> arg)</para>
</listitem>
            <listitem><para>auto <link linkend="_namespacelest_1a386b986e21ffb9bcd41c87644b83f2bc">split_option</link> (<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> arg) -&gt; std::tuple&lt; <link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>, <link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> &gt;</para>
</listitem>
            <listitem><para>auto <link linkend="_namespacelest_1a4ebe5ee7f32e43e2ec5555fa176e971b">split_arguments</link> (<link linkend="_namespacelest_1abadda50795fdee0bb844b52e73878699">texts</link> args) -&gt; std::tuple&lt; <link linkend="_structlest_1_1options">options</link>, <link linkend="_namespacelest_1abadda50795fdee0bb844b52e73878699">texts</link> &gt;</para>
</listitem>
            <listitem><para>int <link linkend="_namespacelest_1adf2ce00a79840cc2fcd55fbdd833ca2b">usage</link> (std::ostream &amp;os)</para>
</listitem>
            <listitem><para><link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> <link linkend="_namespacelest_1ab4a9c1edc3353bfd194834c7e8a03cee">compiler</link> ()</para>
</listitem>
            <listitem><para>int <link linkend="_namespacelest_1ade867fdec77e6ae63b940e5c34a320be">version</link> (std::ostream &amp;os)</para>
</listitem>
            <listitem><para>int <link linkend="_namespacelest_1a625193eb3dbfcef90fe9519412f96f38">run</link> (<link linkend="_namespacelest_1a549374a5f82f5cbab341c0513e037875">tests</link> specification, <link linkend="_namespacelest_1abadda50795fdee0bb844b52e73878699">texts</link> arguments, std::ostream &amp;os=std::cout)</para>
</listitem>
            <listitem><para>int <link linkend="_namespacelest_1ace5f472de9f59c9e8db36b78cae4e663">run</link> (<link linkend="_namespacelest_1a549374a5f82f5cbab341c0513e037875">tests</link> specification, int argc, char *argv[], std::ostream &amp;os=std::cout)</para>
</listitem>
            <listitem><para>template&lt;std::size_t N&gt; </para><para>int <link linkend="_namespacelest_1aad2813832b7d3b6ae63d9226fdba4fe6">run</link> (<link linkend="_structlest_1_1test">test</link> const (&amp;specification)[N], <link linkend="_namespacelest_1abadda50795fdee0bb844b52e73878699">texts</link> arguments, std::ostream &amp;os=std::cout)</para>
</listitem>
            <listitem><para>template&lt;std::size_t N&gt; </para><para>int <link linkend="_namespacelest_1ae6a9f347b2b1384c14b6fde1f9086841">run</link> (<link linkend="_structlest_1_1test">test</link> const (&amp;specification)[N], std::ostream &amp;os=std::cout)</para>
</listitem>
            <listitem><para>template&lt;std::size_t N&gt; </para><para>int <link linkend="_namespacelest_1a96b5a20d5753e9c43ab8517bf62b0885">run</link> (<link linkend="_structlest_1_1test">test</link> const (&amp;specification)[N], int argc, char *argv[], std::ostream &amp;os=std::cout)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para>const int <link linkend="_namespacelest_1a087526c49c3b94040965055daf8be905">exit_max_value</link> = 255</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="_namespacelest_1a307d6b6cc95fec22d9f5b29ad98efa2a"/><section>
    <title>ForContainer</title>
<indexterm><primary>ForContainer</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>ForContainer</secondary></indexterm>
<computeroutput>template&lt;typename T , typename <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link> &gt; </computeroutput><para><computeroutput>using <link linkend="_namespacelest_1a307d6b6cc95fec22d9f5b29ad98efa2a">lest::ForContainer</link> = typedef typename std::enable_if&lt; <link linkend="_structlest_1_1is__container">is_container</link>&lt;T&gt;<link linkend="_classvalue">::value</link>, <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></computeroutput></para></section>
<anchor xml:id="_namespacelest_1a802f92ea2ee2351555de479c17047175"/><section>
    <title>ForEnum</title>
<indexterm><primary>ForEnum</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>ForEnum</secondary></indexterm>
<computeroutput>template&lt;typename T , typename <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link> &gt; </computeroutput><para><computeroutput>using <link linkend="_namespacelest_1a802f92ea2ee2351555de479c17047175">lest::ForEnum</link> = typedef typename std::enable_if&lt; std::is_enum&lt;T&gt;<link linkend="_classvalue">::value</link>, <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></computeroutput></para></section>
<anchor xml:id="_namespacelest_1a879fc3440ead743afa8d9ce103c7d01a"/><section>
    <title>ForNonContainer</title>
<indexterm><primary>ForNonContainer</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>ForNonContainer</secondary></indexterm>
<computeroutput>template&lt;typename T , typename <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link> &gt; </computeroutput><para><computeroutput>using <link linkend="_namespacelest_1a879fc3440ead743afa8d9ce103c7d01a">lest::ForNonContainer</link> = typedef typename std::enable_if&lt; ! <link linkend="_structlest_1_1is__container">is_container</link>&lt;T&gt;<link linkend="_classvalue">::value</link>, <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></computeroutput></para></section>
<anchor xml:id="_namespacelest_1a9db1cd982a17f8bd5fd50e14594916d5"/><section>
    <title>ForNonEnum</title>
<indexterm><primary>ForNonEnum</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>ForNonEnum</secondary></indexterm>
<computeroutput>template&lt;typename T , typename <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link> &gt; </computeroutput><para><computeroutput>using <link linkend="_namespacelest_1a9db1cd982a17f8bd5fd50e14594916d5">lest::ForNonEnum</link> = typedef typename std::enable_if&lt; ! std::is_enum&lt;T&gt;<link linkend="_classvalue">::value</link>, <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></computeroutput></para></section>
<anchor xml:id="_namespacelest_1ae1ce65f69ae31c5b6d147a7b7b9182df"/><section>
    <title>ForNonStreamable</title>
<indexterm><primary>ForNonStreamable</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>ForNonStreamable</secondary></indexterm>
<computeroutput>template&lt;typename T , typename <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link> &gt; </computeroutput><para><computeroutput>using <link linkend="_namespacelest_1ae1ce65f69ae31c5b6d147a7b7b9182df">lest::ForNonStreamable</link> = typedef typename std::enable_if&lt; ! <link linkend="_structlest_1_1is__streamable">is_streamable</link>&lt;T&gt;<link linkend="_classvalue">::value</link>, <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></computeroutput></para></section>
<anchor xml:id="_namespacelest_1a09808b01733cf4b53229fac360cd8a8a"/><section>
    <title>ForStreamable</title>
<indexterm><primary>ForStreamable</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>ForStreamable</secondary></indexterm>
<computeroutput>template&lt;typename T , typename <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link> &gt; </computeroutput><para><computeroutput>using <link linkend="_namespacelest_1a09808b01733cf4b53229fac360cd8a8a">lest::ForStreamable</link> = typedef typename std::enable_if&lt; <link linkend="_structlest_1_1is__streamable">is_streamable</link>&lt;T&gt;<link linkend="_classvalue">::value</link>, <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></computeroutput></para></section>
<anchor xml:id="_namespacelest_1a2b94dd1224b91163e866aa57a2bd7fa6"/><section>
    <title>seed_t</title>
<indexterm><primary>seed_t</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>seed_t</secondary></indexterm>
<para><computeroutput>typedef unsigned long <link linkend="_namespacelest_1a2b94dd1224b91163e866aa57a2bd7fa6">lest::seed_t</link></computeroutput></para></section>
<anchor xml:id="_namespacelest_1a549374a5f82f5cbab341c0513e037875"/><section>
    <title>tests</title>
<indexterm><primary>tests</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>tests</secondary></indexterm>
<para><computeroutput>typedef std::vector&lt; <link linkend="_structlest_1_1test">test</link> &gt; <link linkend="_namespacelest_1a549374a5f82f5cbab341c0513e037875">lest::tests</link></computeroutput></para></section>
<anchor xml:id="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d"/><section>
    <title>text</title>
<indexterm><primary>text</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>text</secondary></indexterm>
<para><computeroutput>typedef std::string <link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">lest::text</link></computeroutput></para></section>
<anchor xml:id="_namespacelest_1abadda50795fdee0bb844b52e73878699"/><section>
    <title>texts</title>
<indexterm><primary>texts</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>texts</secondary></indexterm>
<para><computeroutput>typedef std::vector&lt; <link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> &gt; <link linkend="_namespacelest_1abadda50795fdee0bb844b52e73878699">lest::texts</link></computeroutput></para></section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_namespacelest_1ab14c66a1c73dc27109b1d9d89542b923"/><section>
    <title>abort()</title>
<indexterm><primary>abort</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>abort</secondary></indexterm>
<computeroutput>template&lt;typename Action &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> lest::abort (Action &amp; perform)</computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_ab14c66a1c73dc27109b1d9d89542b923_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1a9caf47f37e450e7ae4bac7a519b074f2"/><section>
    <title>colourise()</title>
<indexterm><primary>colourise</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>colourise</secondary></indexterm>
<para><computeroutput><link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> lest::colourise (<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> words)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_a9caf47f37e450e7ae4bac7a519b074f2_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1ab4a9c1edc3353bfd194834c7e8a03cee"/><section>
    <title>compiler()</title>
<indexterm><primary>compiler</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>compiler</secondary></indexterm>
<para><computeroutput><link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> lest::compiler ( )<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_ab4a9c1edc3353bfd194834c7e8a03cee_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1af527784a6a57085ee814b08da444cda1"/><section>
    <title>for_test()</title>
<indexterm><primary>for_test</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>for_test</secondary></indexterm>
<computeroutput>template&lt;typename Action &gt; </computeroutput><para><computeroutput>Action &amp;&amp; lest::for_test (<link linkend="_namespacelest_1a549374a5f82f5cbab341c0513e037875">tests</link> specification, <link linkend="_namespacelest_1abadda50795fdee0bb844b52e73878699">texts</link> in, Action &amp;&amp; perform, int n = <computeroutput>1</computeroutput>
)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_af527784a6a57085ee814b08da444cda1_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_af527784a6a57085ee814b08da444cda1_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1adb2d8ba32435d9eb40a998058baee6d8"/><section>
    <title>indefinite()</title>
<indexterm><primary>indefinite</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>indefinite</secondary></indexterm>
<para><computeroutput>int lest::indefinite (int repeat)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_adb2d8ba32435d9eb40a998058baee6d8_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1aadbfd505723d1112999378364b6bd2a6"/><section>
    <title>inform()</title>
<indexterm><primary>inform</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>inform</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> lest::inform (<link linkend="_structlest_1_1location">location</link> where, <link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> expr)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_aadbfd505723d1112999378364b6bd2a6_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1aabbb03d17b6413a44e15633634cbcb2c"/><section>
    <title>is_false()</title>
<indexterm><primary>is_false</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>is_false</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> lest::is_false ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespacelest_1ad0cec29d317e9251fba82583953fabe5"/><section>
    <title>is_number()</title>
<indexterm><primary>is_number</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>is_number</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> lest::is_number (<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> arg)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_ad0cec29d317e9251fba82583953fabe5_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1a3f0ffea12c1607b0dfa015686a627b86"/><section>
    <title>is_true()</title>
<indexterm><primary>is_true</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>is_true</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> lest::is_true (<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> flag)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespacelest_1ab9f4ba47437f4693769fbaf1b5ecac40"/><section>
    <title>make_enum_string()</title>
<indexterm><primary>make_enum_string</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>make_enum_string</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>auto lest::make_enum_string (T const &amp; item) -&gt; <link linkend="_namespacelest_1a9db1cd982a17f8bd5fd50e14594916d5">ForNonEnum</link>&lt;T, std::string&gt;
</computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_ab9f4ba47437f4693769fbaf1b5ecac40_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1ab3deb0f76da8e10ca19805e1dbba9303"/><section>
    <title>make_memory_string()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>make_memory_string</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>make_memory_string</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>auto lest::make_memory_string (T const &amp; item) -&gt; std::string</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_ab3deb0f76da8e10ca19805e1dbba9303_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_ab3deb0f76da8e10ca19805e1dbba9303_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1af4cf90829d3679012ddd5788d10c31a2"/><section>
    <title>make_memory_string()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>make_memory_string</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>make_memory_string</secondary></indexterm>
<para><computeroutput>auto lest::make_memory_string (<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> const * item, std::size_t size) -&gt; std::string
<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespacelest_1ace7301c17e55675244579480e546de07"/><section>
    <title>make_string()<computeroutput>[1/5]</computeroutput></title>
<indexterm><primary>make_string</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>make_string</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link> , typename <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link> &gt; </computeroutput><para><computeroutput>auto lest::make_string (<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link> C::* p) -&gt; std::string
</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_ace7301c17e55675244579480e546de07_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1a53a07743eb59dc748037d2508b6ea73a"/><section>
    <title>make_string()<computeroutput>[2/5]</computeroutput></title>
<indexterm><primary>make_string</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>make_string</secondary></indexterm>
<computeroutput>template&lt;typename T1 , typename T2 &gt; </computeroutput><para><computeroutput>auto lest::make_string (std::pair&lt; T1, T2 &gt; const &amp; pair) -&gt; std::string
</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_a53a07743eb59dc748037d2508b6ea73a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1a68b2dcdf6af1a1a19f457fd8765520a6"/><section>
    <title>make_string()<computeroutput>[3/5]</computeroutput></title>
<indexterm><primary>make_string</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>make_string</secondary></indexterm>
<computeroutput>template&lt;typename ... TS&gt; </computeroutput><para><computeroutput>auto lest::make_string (std::tuple&lt; TS... &gt; const &amp; tuple) -&gt; std::string
</computeroutput></para></section>
<anchor xml:id="_namespacelest_1af3c990afe2061da29a0a67b9d97c6745"/><section>
    <title>make_string()<computeroutput>[4/5]</computeroutput></title>
<indexterm><primary>make_string</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>make_string</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>auto lest::make_string (T * p) -&gt; std::string
</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_af3c990afe2061da29a0a67b9d97c6745_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1a2921e3170302d0dc18c1c2bc33d6ec29"/><section>
    <title>make_string()<computeroutput>[5/5]</computeroutput></title>
<indexterm><primary>make_string</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>make_string</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>auto lest::make_string (T const &amp; item) -&gt; <link linkend="_namespacelest_1ae1ce65f69ae31c5b6d147a7b7b9182df">ForNonStreamable</link>&lt;T, std::string&gt;
</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_a2921e3170302d0dc18c1c2bc33d6ec29_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_a2921e3170302d0dc18c1c2bc33d6ec29_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1abe74c3410c560bcd1cf83d11ee2fb127"/><section>
    <title>make_value_string()</title>
<indexterm><primary>make_value_string</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>make_value_string</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>auto lest::make_value_string (T const &amp; value) -&gt; std::string</computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_abe74c3410c560bcd1cf83d11ee2fb127_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1a39aadbe27e6b271818d115e3e5c62bd1"/><section>
    <title>match()</title>
<indexterm><primary>match</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>match</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> lest::match (<link linkend="_namespacelest_1abadda50795fdee0bb844b52e73878699">texts</link> whats, <link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> line)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_a39aadbe27e6b271818d115e3e5c62bd1_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_a39aadbe27e6b271818d115e3e5c62bd1_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1a5db38037638e98c45b6747710cb352c9"/><section>
    <title>not_expr()</title>
<indexterm><primary>not_expr</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>not_expr</secondary></indexterm>
<para><computeroutput><link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> lest::not_expr (<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> message)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespacelest_1af095b334a6d23c1e9d0ab10d05cf7a4d"/><section>
    <title>of_type()</title>
<indexterm><primary>of_type</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>of_type</secondary></indexterm>
<para><computeroutput><link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> lest::of_type (<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> type)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespacelest_1aab7017a6e4f2ab6b263db6e762ae951f"/><section>
    <title>operator&lt;&lt;()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream &amp; lest::operator&lt;&lt; (std::ostream &amp; os, <link linkend="_structlest_1_1comment">comment</link> note)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespacelest_1af179ea4c47bf633cfa0fe3741aff9230"/><section>
    <title>operator&lt;&lt;()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream &amp; lest::operator&lt;&lt; (std::ostream &amp; os, <link linkend="_structlest_1_1location">location</link> where)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespacelest_1a7d802100fe140961785074f81eaabe56"/><section>
    <title>pluralise()</title>
<indexterm><primary>pluralise</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>pluralise</secondary></indexterm>
<para><computeroutput><link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> lest::pluralise (<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> word, int n)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_a7d802100fe140961785074f81eaabe56_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1abbbd832c4fc795936cc5f21ccd9e3aed"/><section>
    <title>repeat()</title>
<indexterm><primary>repeat</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>repeat</secondary></indexterm>
<para><computeroutput>int lest::repeat (<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> opt, <link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> arg)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_abbbd832c4fc795936cc5f21ccd9e3aed_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1acd1d811cf4ab4bebd681f007789ca0d7"/><section>
    <title>report()</title>
<indexterm><primary>report</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>report</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> lest::report (std::ostream &amp; os, <link linkend="_structlest_1_1message">message</link> const &amp; e, <link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> test)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_acd1d811cf4ab4bebd681f007789ca0d7_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_acd1d811cf4ab4bebd681f007789ca0d7_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1a96b5a20d5753e9c43ab8517bf62b0885"/><section>
    <title>run()<computeroutput>[1/5]</computeroutput></title>
<indexterm><primary>run</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>run</secondary></indexterm>
<computeroutput>template&lt;std::size_t N&gt; </computeroutput><para><computeroutput>int lest::run (<link linkend="_structlest_1_1test">test</link> const (&amp;) specification[N], int argc, char * argv[], std::ostream &amp; os = <computeroutput>std::cout</computeroutput>
)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_a96b5a20d5753e9c43ab8517bf62b0885_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1ae6a9f347b2b1384c14b6fde1f9086841"/><section>
    <title>run()<computeroutput>[2/5]</computeroutput></title>
<indexterm><primary>run</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>run</secondary></indexterm>
<computeroutput>template&lt;std::size_t N&gt; </computeroutput><para><computeroutput>int lest::run (<link linkend="_structlest_1_1test">test</link> const (&amp;) specification[N], std::ostream &amp; os = <computeroutput>std::cout</computeroutput>
)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_ae6a9f347b2b1384c14b6fde1f9086841_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1aad2813832b7d3b6ae63d9226fdba4fe6"/><section>
    <title>run()<computeroutput>[3/5]</computeroutput></title>
<indexterm><primary>run</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>run</secondary></indexterm>
<computeroutput>template&lt;std::size_t N&gt; </computeroutput><para><computeroutput>int lest::run (<link linkend="_structlest_1_1test">test</link> const (&amp;) specification[N], <link linkend="_namespacelest_1abadda50795fdee0bb844b52e73878699">texts</link> arguments, std::ostream &amp; os = <computeroutput>std::cout</computeroutput>
)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_aad2813832b7d3b6ae63d9226fdba4fe6_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1ace5f472de9f59c9e8db36b78cae4e663"/><section>
    <title>run()<computeroutput>[4/5]</computeroutput></title>
<indexterm><primary>run</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>run</secondary></indexterm>
<para><computeroutput>int lest::run (<link linkend="_namespacelest_1a549374a5f82f5cbab341c0513e037875">tests</link> specification, int argc, char * argv[], std::ostream &amp; os = <computeroutput>std::cout</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_ace5f472de9f59c9e8db36b78cae4e663_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1a625193eb3dbfcef90fe9519412f96f38"/><section>
    <title>run()<computeroutput>[5/5]</computeroutput></title>
<indexterm><primary>run</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>run</secondary></indexterm>
<para><computeroutput>int lest::run (<link linkend="_namespacelest_1a549374a5f82f5cbab341c0513e037875">tests</link> specification, <link linkend="_namespacelest_1abadda50795fdee0bb844b52e73878699">texts</link> arguments, std::ostream &amp; os = <computeroutput>std::cout</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_a625193eb3dbfcef90fe9519412f96f38_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_a625193eb3dbfcef90fe9519412f96f38_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1a415c4dec169b665859b5e08719d9227e"/><section>
    <title>search()</title>
<indexterm><primary>search</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>search</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> lest::search (<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> part, <link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> line)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_a415c4dec169b665859b5e08719d9227e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_a415c4dec169b665859b5e08719d9227e_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1a9e3785d770073a52c90f475365f49542"/><section>
    <title>seed()</title>
<indexterm><primary>seed</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>seed</secondary></indexterm>
<para><computeroutput><link linkend="_namespacelest_1a2b94dd1224b91163e866aa57a2bd7fa6">seed_t</link> lest::seed (<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> opt, <link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> arg)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_a9e3785d770073a52c90f475365f49542_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_a9e3785d770073a52c90f475365f49542_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1a1edb8bb9cf6c9793b8626cd80dcf1904"/><section>
    <title>select()</title>
<indexterm><primary>select</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>select</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> lest::select (<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> name, <link linkend="_namespacelest_1abadda50795fdee0bb844b52e73878699">texts</link> include)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_a1edb8bb9cf6c9793b8626cd80dcf1904_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_a1edb8bb9cf6c9793b8626cd80dcf1904_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1ac816ce5c4c1370754e1086ae54ff970c"/><section>
    <title>sfx()</title>
<indexterm><primary>sfx</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>sfx</secondary></indexterm>
<para><computeroutput>char const  * lest::sfx (char const * )<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_ac816ce5c4c1370754e1086ae54ff970c_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1abc0275611237ee9364ae8d16e82cb83b"/><section>
    <title>shuffle()</title>
<indexterm><primary>shuffle</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>shuffle</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> lest::shuffle (<link linkend="_namespacelest_1a549374a5f82f5cbab341c0513e037875">tests</link> &amp; specification, <link linkend="_structlest_1_1options">options</link> option)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_abc0275611237ee9364ae8d16e82cb83b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1ac09122525e14bc4cc1c535bfc06eb935"/><section>
    <title>sort()</title>
<indexterm><primary>sort</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>sort</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> lest::sort (<link linkend="_namespacelest_1a549374a5f82f5cbab341c0513e037875">tests</link> &amp; specification)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_ac09122525e14bc4cc1c535bfc06eb935_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_ac09122525e14bc4cc1c535bfc06eb935_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1a4ebe5ee7f32e43e2ec5555fa176e971b"/><section>
    <title>split_arguments()</title>
<indexterm><primary>split_arguments</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>split_arguments</secondary></indexterm>
<para><computeroutput>auto lest::split_arguments (<link linkend="_namespacelest_1abadda50795fdee0bb844b52e73878699">texts</link> args) -&gt; std::tuple&lt;<link linkend="_structlest_1_1options">options</link>, <link linkend="_namespacelest_1abadda50795fdee0bb844b52e73878699">texts</link>&gt;
<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_a4ebe5ee7f32e43e2ec5555fa176e971b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_a4ebe5ee7f32e43e2ec5555fa176e971b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1a386b986e21ffb9bcd41c87644b83f2bc"/><section>
    <title>split_option()</title>
<indexterm><primary>split_option</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>split_option</secondary></indexterm>
<para><computeroutput>auto lest::split_option (<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> arg) -&gt; std::tuple&lt;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>, <link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&gt;
<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_a386b986e21ffb9bcd41c87644b83f2bc_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1aa8f139b4d4ae346e4caa755ec5af3798"/><section>
    <title>stoi()</title>
<indexterm><primary>stoi</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>stoi</secondary></indexterm>
<para><computeroutput>int lest::stoi (<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> num)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_aa8f139b4d4ae346e4caa755ec5af3798_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1a4a706c52e70ba58a7f005ccd83746c45"/><section>
    <title>tags()</title>
<indexterm><primary>tags</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>tags</secondary></indexterm>
<para><computeroutput><link linkend="_namespacelest_1abadda50795fdee0bb844b52e73878699">texts</link> lest::tags (<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> name, <link linkend="_namespacelest_1abadda50795fdee0bb844b52e73878699">texts</link> result = <computeroutput>{}</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_a4a706c52e70ba58a7f005ccd83746c45_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1a7c39fe56de7ef2d9eb204e324c8ea17b"/><section>
    <title>to_string()<computeroutput>[1/25]</computeroutput></title>
<indexterm><primary>to_string</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>to_string</secondary></indexterm>
<para><computeroutput>auto lest::to_string (<link linkend="_classlest_1_1approx">approx</link> const &amp; appr) -&gt; std::string
<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_a7c39fe56de7ef2d9eb204e324c8ea17b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1aa50a28594a3b556d8dfe758a65f5e383"/><section>
    <title>to_string()<computeroutput>[2/25]</computeroutput></title>
<indexterm><primary>to_string</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>to_string</secondary></indexterm>
<para><computeroutput>std::string lest::to_string (<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> flag)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespacelest_1a1f08fec13a1ccde1df466d1fe0f9b805"/><section>
    <title>to_string()<computeroutput>[3/25]</computeroutput></title>
<indexterm><primary>to_string</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>to_string</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link> &gt; </computeroutput><para><computeroutput>auto lest::to_string (<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link> const &amp; cont) -&gt; <link linkend="_namespacelest_1a307d6b6cc95fec22d9f5b29ad98efa2a">ForContainer</link>&lt;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link>, std::string&gt;
</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_a1f08fec13a1ccde1df466d1fe0f9b805_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1a8aedddc014cd1a7910717adb3fae2667"/><section>
    <title>to_string()<computeroutput>[4/25]</computeroutput></title>
<indexterm><primary>to_string</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>to_string</secondary></indexterm>
<para><computeroutput>std::string lest::to_string (char *const txt)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_a8aedddc014cd1a7910717adb3fae2667_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1a32470935f196c9a8b314e94c1d8ec589"/><section>
    <title>to_string()<computeroutput>[5/25]</computeroutput></title>
<indexterm><primary>to_string</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>to_string</secondary></indexterm>
<para><computeroutput>std::string lest::to_string (char chr)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_a32470935f196c9a8b314e94c1d8ec589_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1a262e29fa0d83e31a47a4ae1e88d344ff"/><section>
    <title>to_string()<computeroutput>[6/25]</computeroutput></title>
<indexterm><primary>to_string</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>to_string</secondary></indexterm>
<para><computeroutput>std::string lest::to_string (char const *const txt)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_a262e29fa0d83e31a47a4ae1e88d344ff_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1af149627f7ffd99c85241b3b7c16dee73"/><section>
    <title>to_string()<computeroutput>[7/25]</computeroutput></title>
<indexterm><primary>to_string</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>to_string</secondary></indexterm>
<para><computeroutput>std::string lest::to_string (double value)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_af149627f7ffd99c85241b3b7c16dee73_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1a3d11119accc529f7d44f32c325566472"/><section>
    <title>to_string()<computeroutput>[8/25]</computeroutput></title>
<indexterm><primary>to_string</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>to_string</secondary></indexterm>
<para><computeroutput>std::string lest::to_string (float value)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_a3d11119accc529f7d44f32c325566472_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1ad49b5ea606585b6f7d239843df57d5a8"/><section>
    <title>to_string()<computeroutput>[9/25]</computeroutput></title>
<indexterm><primary>to_string</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>to_string</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link> , typename <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link> &gt; </computeroutput><para><computeroutput>auto lest::to_string (<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link> const &amp; lhs, std::string op, <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link> const &amp; rhs) -&gt; std::string
</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_ad49b5ea606585b6f7d239843df57d5a8_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1aa2158658881e42560c6be45a8c41e98d"/><section>
    <title>to_string()<computeroutput>[10/25]</computeroutput></title>
<indexterm><primary>to_string</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>to_string</secondary></indexterm>
<para><computeroutput>std::string lest::to_string (signed char chr)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_aa2158658881e42560c6be45a8c41e98d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1aead975e8adc9ff7b5c6191b015c6c315"/><section>
    <title>to_string()<computeroutput>[11/25]</computeroutput></title>
<indexterm><primary>to_string</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>to_string</secondary></indexterm>
<para><computeroutput>std::string lest::to_string (signed int value)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_aead975e8adc9ff7b5c6191b015c6c315_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1a404902cec843eb51e14e1267f9f68f14"/><section>
    <title>to_string()<computeroutput>[12/25]</computeroutput></title>
<indexterm><primary>to_string</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>to_string</secondary></indexterm>
<para><computeroutput>std::string lest::to_string (signed long long value)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_a404902cec843eb51e14e1267f9f68f14_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1a1d1ccd6325dda10a14293235bc8f418a"/><section>
    <title>to_string()<computeroutput>[13/25]</computeroutput></title>
<indexterm><primary>to_string</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>to_string</secondary></indexterm>
<para><computeroutput>std::string lest::to_string (signed long value)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_a1d1ccd6325dda10a14293235bc8f418a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1a50f4b95b9dedfe5207678d1768b08d90"/><section>
    <title>to_string()<computeroutput>[14/25]</computeroutput></title>
<indexterm><primary>to_string</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>to_string</secondary></indexterm>
<para><computeroutput>std::string lest::to_string (signed short value)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_a50f4b95b9dedfe5207678d1768b08d90_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb"/><section>
    <title>to_string()<computeroutput>[15/25]</computeroutput></title>
<indexterm><primary>to_string</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>to_string</secondary></indexterm>
<para><computeroutput>std::string lest::to_string (std::nullptr_t )<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_a7ae4043b547864d64ad4320775da0fdb_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1ad81138efaba3e44cc343115748636e92"/><section>
    <title>to_string()<computeroutput>[16/25]</computeroutput></title>
<indexterm><primary>to_string</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>to_string</secondary></indexterm>
<para><computeroutput>std::string lest::to_string (std::string const &amp; txt)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespacelest_1ae4739cb1c34347afd93f46a20825f8d4"/><section>
    <title>to_string()<computeroutput>[17/25]</computeroutput></title>
<indexterm><primary>to_string</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>to_string</secondary></indexterm>
<para><computeroutput>auto lest::to_string (std::wstring const &amp; txt)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_ae4739cb1c34347afd93f46a20825f8d4_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1a8f6847f0581bee5f6b3a8efcd7c63e79"/><section>
    <title>to_string()<computeroutput>[18/25]</computeroutput></title>
<indexterm><primary>to_string</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>to_string</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>auto lest::to_string (T const &amp; item) -&gt; <link linkend="_namespacelest_1a879fc3440ead743afa8d9ce103c7d01a">ForNonContainer</link>&lt;T, std::string&gt;
</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_a8f6847f0581bee5f6b3a8efcd7c63e79_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1afe966ba67ff7b6fd85c01656c5b9038e"/><section>
    <title>to_string()<computeroutput>[19/25]</computeroutput></title>
<indexterm><primary>to_string</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>to_string</secondary></indexterm>
<para><computeroutput>std::string lest::to_string (unsigned char chr)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_afe966ba67ff7b6fd85c01656c5b9038e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1a1efd6c73c2acfb5db0f03e3a95f82505"/><section>
    <title>to_string()<computeroutput>[20/25]</computeroutput></title>
<indexterm><primary>to_string</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>to_string</secondary></indexterm>
<para><computeroutput>std::string lest::to_string (unsigned int value)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_a1efd6c73c2acfb5db0f03e3a95f82505_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1a40790a98c999b06837c4be09dc8126cc"/><section>
    <title>to_string()<computeroutput>[21/25]</computeroutput></title>
<indexterm><primary>to_string</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>to_string</secondary></indexterm>
<para><computeroutput>std::string lest::to_string (unsigned long long value)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_a40790a98c999b06837c4be09dc8126cc_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1a2d31914f88e47d8b84f8024d89c9c9b5"/><section>
    <title>to_string()<computeroutput>[22/25]</computeroutput></title>
<indexterm><primary>to_string</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>to_string</secondary></indexterm>
<para><computeroutput>std::string lest::to_string (unsigned long value)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_a2d31914f88e47d8b84f8024d89c9c9b5_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1a609259bab2b50370a535697f21f6c6b0"/><section>
    <title>to_string()<computeroutput>[23/25]</computeroutput></title>
<indexterm><primary>to_string</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>to_string</secondary></indexterm>
<para><computeroutput>std::string lest::to_string (unsigned short value)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_a609259bab2b50370a535697f21f6c6b0_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1aa9ab24479b3be218a4d4bd07a2386e55"/><section>
    <title>to_string()<computeroutput>[24/25]</computeroutput></title>
<indexterm><primary>to_string</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>to_string</secondary></indexterm>
<para><computeroutput>std::string lest::to_string (<link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link> *const txt)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_aa9ab24479b3be218a4d4bd07a2386e55_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1ad5e3847cff7466a2d4ccbd56a1e4cb66"/><section>
    <title>to_string()<computeroutput>[25/25]</computeroutput></title>
<indexterm><primary>to_string</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>to_string</secondary></indexterm>
<para><computeroutput>std::string lest::to_string (<link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link> const *const txt)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_ad5e3847cff7466a2d4ccbd56a1e4cb66_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1adf2ce00a79840cc2fcd55fbdd833ca2b"/><section>
    <title>usage()</title>
<indexterm><primary>usage</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>usage</secondary></indexterm>
<para><computeroutput>int lest::usage (std::ostream &amp; os)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespacelest_1ade867fdec77e6ae63b940e5c34a320be"/><section>
    <title>version()</title>
<indexterm><primary>version</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>version</secondary></indexterm>
<para><computeroutput>int lest::version (std::ostream &amp; os)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_ade867fdec77e6ae63b940e5c34a320be_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacelest_1af915c2b8fec1c7060257957752836a06"/><section>
    <title>with_message()</title>
<indexterm><primary>with_message</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>with_message</secondary></indexterm>
<para><computeroutput><link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> lest::with_message (<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link> message)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacelest_af915c2b8fec1c7060257957752836a06_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Variable Documentation</title>
<anchor xml:id="_namespacelest_1a087526c49c3b94040965055daf8be905"/><section>
    <title>exit_max_value</title>
<indexterm><primary>exit_max_value</primary><secondary>lest</secondary></indexterm>
<indexterm><primary>lest</primary><secondary>exit_max_value</secondary></indexterm>
<para><computeroutput>const int lest::exit_max_value = 255</computeroutput></para></section>
</section>
</section>
