<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__mathsf" xml:lang="en-US">
<title>Mathematical Special Functions</title>
<indexterm><primary>Mathematical Special Functions</primary></indexterm>
<section xml:id="_specfun.h_1mathsf_desc">
<title>Mathematical Special Functions</title>

<para>A collection of advanced mathematical special functions, defined by ISO/IEC IS 29124 and then added to ISO C++ 2017.</para>
<section xml:id="_specfun.h_1mathsf_intro">
<title>Introduction and History</title>

<para>The first significant library upgrade on the road to C++2011, <link xlink:href="http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2005/n1836.pdf">TR1</link>, included a set of 23 mathematical functions that significantly extended the standard transcendental functions inherited from C and declared in &lt;cmath&gt;.</para>

<para>Although most components from TR1 were eventually adopted for C++11 these math functions were left behind out of concern for implementability. The math functions were published as a separate international standard <link xlink:href="http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2010/n3060.pdf">IS 29124 - Extensions to the C++ Library to Support Mathematical Special Functions</link>.</para>

<para>For C++17 these functions were incorporated into the main standard.</para>
</section>
<section xml:id="_specfun.h_1mathsf_contents">
<title>Contents</title>

<para>The following functions are implemented in namespace <computeroutput>std:</computeroutput> <itemizedlist>
<listitem>
<para>assoc_laguerre - Associated Laguerre functions</para>
</listitem><listitem>
<para>assoc_legendre - Associated Legendre functions</para>
</listitem><listitem>
<para>beta - Beta functions</para>
</listitem><listitem>
<para>comp_ellint_1 - Complete elliptic functions of the first kind</para>
</listitem><listitem>
<para>comp_ellint_2 - Complete elliptic functions of the second kind</para>
</listitem><listitem>
<para>comp_ellint_3 - Complete elliptic functions of the third kind</para>
</listitem><listitem>
<para>cyl_bessel_i - Regular modified cylindrical Bessel functions</para>
</listitem><listitem>
<para>cyl_bessel_j - Cylindrical Bessel functions of the first kind</para>
</listitem><listitem>
<para>cyl_bessel_k - Irregular modified cylindrical Bessel functions</para>
</listitem><listitem>
<para>cyl_neumann - Cylindrical Neumann functions or Cylindrical Bessel functions of the second kind</para>
</listitem><listitem>
<para>ellint_1 - Incomplete elliptic functions of the first kind</para>
</listitem><listitem>
<para>ellint_2 - Incomplete elliptic functions of the second kind</para>
</listitem><listitem>
<para>ellint_3 - Incomplete elliptic functions of the third kind</para>
</listitem><listitem>
<para>expint - The exponential integral</para>
</listitem><listitem>
<para><link linkend="_namespacehermite">hermite - Hermite polynomials</link></para>
</listitem><listitem>
<para>laguerre - Laguerre functions</para>
</listitem><listitem>
<para>legendre - Legendre polynomials</para>
</listitem><listitem>
<para>riemann_zeta - The Riemann zeta function</para>
</listitem><listitem>
<para>sph_bessel - Spherical Bessel functions</para>
</listitem><listitem>
<para>sph_legendre - Spherical Legendre functions</para>
</listitem><listitem>
<para>sph_neumann - Spherical Neumann functions</para>
</listitem></itemizedlist>
</para>

<para>The hypergeometric functions were stricken from the TR29124 and C++17 versions of this math library because of implementation concerns. However, since they were in the TR1 version and since they are popular we kept them as an extension in namespace <computeroutput><link linkend="_namespace____gnu__cxx">__gnu_cxx</link>:</computeroutput> <itemizedlist>
<listitem>
<para>conf_hyperg - Confluent hypergeometric functions</para>
</listitem><listitem>
<para>hyperg - Hypergeometric functions</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_specfun.h_1mathsf_promotion">
<title>Argument Promotion</title>

<para>The arguments suppled to the non-suffixed functions will be promoted according to the following rules:<orderedlist>
<listitem>
<para>If any argument intended to be floating point is given an integral value That integral value is promoted to double.</para>
</listitem><listitem>
<para>All floating point arguments are promoted up to the largest floating point precision among them.</para>
</listitem></orderedlist>
</para>
</section>
<section xml:id="_specfun.h_1mathsf_NaN">
<title>NaN Arguments</title>

<para>If any of the floating point arguments supplied to these functions is invalid or NaN (std::numeric_limits&lt;Tp&gt;::quiet_NaN), the value NaN is returned.</para>
</section>
<section xml:id="_specfun.h_1mathsf_impl">
<title>Implementation</title>

<para>We strive to implement the underlying math with type generic algorithms to the greatest extent possible. In practice, the functions are thin wrappers that dispatch to function templates. Type dependence is controlled with std::numeric_limits and functions thereof.</para>

<para>We don&apos;t promote <computeroutput>float</computeroutput> to <computeroutput>double</computeroutput> or <computeroutput>double</computeroutput> to <computeroutput>long double</computeroutput> reflexively. The goal is for <computeroutput>float</computeroutput> functions to operate more quickly, at the cost of <computeroutput>float</computeroutput> accuracy and possibly a smaller domain of validity. Similaryly, <computeroutput>long double</computeroutput> should give you more dynamic range and slightly more pecision than <computeroutput>double</computeroutput> on many systems.</para>
</section>
<section xml:id="_specfun.h_1mathsf_testing">
<title>Testing</title>

<para>These functions have been tested against equivalent implementations from the <link xlink:href="http://www.gnu.org/software/gsl">Gnu Scientific Library, GSL</link> and <link xlink:href="http://www.boost.org/doc/libs/1_60_0/libs/math/doc/html/index.html">Boost</link> and the ratio          <mediaobject>
            <imageobject>
                <imagedata align="center" valign="middle" scalefit="0" fileref="form_40.png"/>
            </imageobject>
        </mediaobject>
 is generally found to be within 10<superscript>-15</superscript> for 64-bit double on linux-x86_64 systems over most of the ranges of validity.</para>

<para><para><link linkend="_todo_1_todo000003">Todo</link> 
<para>Provide accuracy comparisons on a per-function basis for a small number of targets.</para>
</para></para>
</section>
<section xml:id="_specfun.h_1mathsf_bibliography">
<title>General Bibliography</title>

<para><formalpara><title>See also</title>

<para>Abramowitz <link linkend="__classes_2lib_2include_2iso646_8h_1aa3d7d535cf450b91b9cb6d9cee2edbb9">and</link> Stegun: Handbook of Mathematical Functions, with Formulas, Graphs, <link linkend="__classes_2lib_2include_2iso646_8h_1aa3d7d535cf450b91b9cb6d9cee2edbb9">and</link> Mathematical Tables Edited by Milton Abramowitz <link linkend="__classes_2lib_2include_2iso646_8h_1aa3d7d535cf450b91b9cb6d9cee2edbb9">and</link> Irene A. Stegun, National Bureau of Standards Applied Mathematics Series - 55 Issued June 1964, Tenth Printing, December 1972, with corrections Electronic versions of A&amp;S abound including both pdf <link linkend="__classes_2lib_2include_2iso646_8h_1aa3d7d535cf450b91b9cb6d9cee2edbb9">and</link> navigable html. </para>

<para>for example <link xlink:href="http://people.math.sfu.ca/~cbm/aands/">http://people.math.sfu.ca/~cbm/aands/</link></para>

<para>The old A&amp;S has been redone as the NIST Digital Library of Mathematical Functions: <link xlink:href="http://dlmf.nist.gov/">http://dlmf.nist.gov/</link> This <link linkend="_namespaceversion">version</link> <link linkend="__monobehavior_8h_1a9870e0caa2f8e3e5700c4cbb21d73c07">is</link> <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0c7f69fbe7d0e46de03177792c263129">far</link> more navigable <link linkend="__classes_2lib_2include_2iso646_8h_1aa3d7d535cf450b91b9cb6d9cee2edbb9">and</link> includes more recent work.</para>

<para>An Atlas of Functions: with Equator, the Atlas Function Calculator 2nd Edition, by Oldham, Keith B., Myland, Jan, Spanier, Jerome</para>

<para>Asymptotics <link linkend="__classes_2lib_2include_2iso646_8h_1aa3d7d535cf450b91b9cb6d9cee2edbb9">and</link> Special Functions by Frank <link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294ab722ceeb601c72cd78fbd35f3581fdf7">W</link>. J. Olver, Academic Press, 1974</para>

<para>Numerical Recipes <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link> <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link>, The Art of Scientific Computing, by William H. Press, Second Ed., Saul A. Teukolsky, William T. Vetterling, <link linkend="__classes_2lib_2include_2iso646_8h_1aa3d7d535cf450b91b9cb6d9cee2edbb9">and</link> Brian P. Flannery, Cambridge University Press, 1992</para>

<para>The Special Functions <link linkend="__classes_2lib_2include_2iso646_8h_1aa3d7d535cf450b91b9cb6d9cee2edbb9">and</link> Their Approximations: Volumes 1 <link linkend="__classes_2lib_2include_2iso646_8h_1aa3d7d535cf450b91b9cb6d9cee2edbb9">and</link> 2, by Yudell <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>. Luke, Academic Press, 1969</para>
</formalpara>
</para>
</section>
</section>
<section xml:id="_specfun.h_1mathsf_desc">
<title>Mathematical Special Functions</title>

<para>A collection of advanced mathematical special functions, defined by ISO/IEC IS 29124 and then added to ISO C++ 2017.</para>
<section xml:id="_specfun.h_1mathsf_intro">
<title>Introduction and History</title>

<para>The first significant library upgrade on the road to C++2011, <link xlink:href="http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2005/n1836.pdf">TR1</link>, included a set of 23 mathematical functions that significantly extended the standard transcendental functions inherited from C and declared in &lt;cmath&gt;.</para>

<para>Although most components from TR1 were eventually adopted for C++11 these math functions were left behind out of concern for implementability. The math functions were published as a separate international standard <link xlink:href="http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2010/n3060.pdf">IS 29124 - Extensions to the C++ Library to Support Mathematical Special Functions</link>.</para>

<para>For C++17 these functions were incorporated into the main standard.</para>
</section>
<section xml:id="_specfun.h_1mathsf_contents">
<title>Contents</title>

<para>The following functions are implemented in namespace <computeroutput>std:</computeroutput> <itemizedlist>
<listitem>
<para>assoc_laguerre - Associated Laguerre functions</para>
</listitem><listitem>
<para>assoc_legendre - Associated Legendre functions</para>
</listitem><listitem>
<para>beta - Beta functions</para>
</listitem><listitem>
<para>comp_ellint_1 - Complete elliptic functions of the first kind</para>
</listitem><listitem>
<para>comp_ellint_2 - Complete elliptic functions of the second kind</para>
</listitem><listitem>
<para>comp_ellint_3 - Complete elliptic functions of the third kind</para>
</listitem><listitem>
<para>cyl_bessel_i - Regular modified cylindrical Bessel functions</para>
</listitem><listitem>
<para>cyl_bessel_j - Cylindrical Bessel functions of the first kind</para>
</listitem><listitem>
<para>cyl_bessel_k - Irregular modified cylindrical Bessel functions</para>
</listitem><listitem>
<para>cyl_neumann - Cylindrical Neumann functions or Cylindrical Bessel functions of the second kind</para>
</listitem><listitem>
<para>ellint_1 - Incomplete elliptic functions of the first kind</para>
</listitem><listitem>
<para>ellint_2 - Incomplete elliptic functions of the second kind</para>
</listitem><listitem>
<para>ellint_3 - Incomplete elliptic functions of the third kind</para>
</listitem><listitem>
<para>expint - The exponential integral</para>
</listitem><listitem>
<para><link linkend="_namespacehermite">hermite - Hermite polynomials</link></para>
</listitem><listitem>
<para>laguerre - Laguerre functions</para>
</listitem><listitem>
<para>legendre - Legendre polynomials</para>
</listitem><listitem>
<para>riemann_zeta - The Riemann zeta function</para>
</listitem><listitem>
<para>sph_bessel - Spherical Bessel functions</para>
</listitem><listitem>
<para>sph_legendre - Spherical Legendre functions</para>
</listitem><listitem>
<para>sph_neumann - Spherical Neumann functions</para>
</listitem></itemizedlist>
</para>

<para>The hypergeometric functions were stricken from the TR29124 and C++17 versions of this math library because of implementation concerns. However, since they were in the TR1 version and since they are popular we kept them as an extension in namespace <computeroutput><link linkend="_namespace____gnu__cxx">__gnu_cxx</link>:</computeroutput> <itemizedlist>
<listitem>
<para>conf_hyperg - Confluent hypergeometric functions</para>
</listitem><listitem>
<para>hyperg - Hypergeometric functions</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_specfun.h_1mathsf_promotion">
<title>Argument Promotion</title>

<para>The arguments suppled to the non-suffixed functions will be promoted according to the following rules:<orderedlist>
<listitem>
<para>If any argument intended to be floating point is given an integral value That integral value is promoted to double.</para>
</listitem><listitem>
<para>All floating point arguments are promoted up to the largest floating point precision among them.</para>
</listitem></orderedlist>
</para>
</section>
<section xml:id="_specfun.h_1mathsf_NaN">
<title>NaN Arguments</title>

<para>If any of the floating point arguments supplied to these functions is invalid or NaN (std::numeric_limits&lt;Tp&gt;::quiet_NaN), the value NaN is returned.</para>
</section>
<section xml:id="_specfun.h_1mathsf_impl">
<title>Implementation</title>

<para>We strive to implement the underlying math with type generic algorithms to the greatest extent possible. In practice, the functions are thin wrappers that dispatch to function templates. Type dependence is controlled with std::numeric_limits and functions thereof.</para>

<para>We don&apos;t promote <computeroutput>float</computeroutput> to <computeroutput>double</computeroutput> or <computeroutput>double</computeroutput> to <computeroutput>long double</computeroutput> reflexively. The goal is for <computeroutput>float</computeroutput> functions to operate more quickly, at the cost of <computeroutput>float</computeroutput> accuracy and possibly a smaller domain of validity. Similaryly, <computeroutput>long double</computeroutput> should give you more dynamic range and slightly more pecision than <computeroutput>double</computeroutput> on many systems.</para>
</section>
<section xml:id="_specfun.h_1mathsf_testing">
<title>Testing</title>

<para>These functions have been tested against equivalent implementations from the <link xlink:href="http://www.gnu.org/software/gsl">Gnu Scientific Library, GSL</link> and <link xlink:href="http://www.boost.org/doc/libs/1_60_0/libs/math/doc/html/index.html">Boost</link> and the ratio          <mediaobject>
            <imageobject>
                <imagedata align="center" valign="middle" scalefit="0" fileref="form_40.png"/>
            </imageobject>
        </mediaobject>
 is generally found to be within 10<superscript>-15</superscript> for 64-bit double on linux-x86_64 systems over most of the ranges of validity.</para>

<para><para><link linkend="_todo_1_todo000007">Todo</link> 
<para>Provide accuracy comparisons on a per-function basis for a small number of targets.</para>
</para></para>
</section>
<section xml:id="_specfun.h_1mathsf_bibliography">
<title>General Bibliography</title>

<para><formalpara><title>See also</title>

<para>Abramowitz <link linkend="__classes_2lib_2include_2iso646_8h_1aa3d7d535cf450b91b9cb6d9cee2edbb9">and</link> Stegun: Handbook of Mathematical Functions, with Formulas, Graphs, <link linkend="__classes_2lib_2include_2iso646_8h_1aa3d7d535cf450b91b9cb6d9cee2edbb9">and</link> Mathematical Tables Edited by Milton Abramowitz <link linkend="__classes_2lib_2include_2iso646_8h_1aa3d7d535cf450b91b9cb6d9cee2edbb9">and</link> Irene A. Stegun, National Bureau of Standards Applied Mathematics Series - 55 Issued June 1964, Tenth Printing, December 1972, with corrections Electronic versions of A&amp;S abound including both pdf <link linkend="__classes_2lib_2include_2iso646_8h_1aa3d7d535cf450b91b9cb6d9cee2edbb9">and</link> navigable html. </para>

<para>for example <link xlink:href="http://people.math.sfu.ca/~cbm/aands/">http://people.math.sfu.ca/~cbm/aands/</link></para>

<para>The old A&amp;S has been redone as the NIST Digital Library of Mathematical Functions: <link xlink:href="http://dlmf.nist.gov/">http://dlmf.nist.gov/</link> This <link linkend="_namespaceversion">version</link> <link linkend="__monobehavior_8h_1a9870e0caa2f8e3e5700c4cbb21d73c07">is</link> <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0c7f69fbe7d0e46de03177792c263129">far</link> more navigable <link linkend="__classes_2lib_2include_2iso646_8h_1aa3d7d535cf450b91b9cb6d9cee2edbb9">and</link> includes more recent work.</para>

<para>An Atlas of Functions: with Equator, the Atlas Function Calculator 2nd Edition, by Oldham, Keith B., Myland, Jan, Spanier, Jerome</para>

<para>Asymptotics <link linkend="__classes_2lib_2include_2iso646_8h_1aa3d7d535cf450b91b9cb6d9cee2edbb9">and</link> Special Functions by Frank <link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294ab722ceeb601c72cd78fbd35f3581fdf7">W</link>. J. Olver, Academic Press, 1974</para>

<para>Numerical Recipes <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link> <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link>, The Art of Scientific Computing, by William H. Press, Second Ed., Saul A. Teukolsky, William T. Vetterling, <link linkend="__classes_2lib_2include_2iso646_8h_1aa3d7d535cf450b91b9cb6d9cee2edbb9">and</link> Brian P. Flannery, Cambridge University Press, 1992</para>

<para>The Special Functions <link linkend="__classes_2lib_2include_2iso646_8h_1aa3d7d535cf450b91b9cb6d9cee2edbb9">and</link> Their Approximations: Volumes 1 <link linkend="__classes_2lib_2include_2iso646_8h_1aa3d7d535cf450b91b9cb6d9cee2edbb9">and</link> 2, by Yudell <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>. Luke, Academic Press, 1969</para>
</formalpara>
</para>
</section>
</section>
<section xml:id="_specfun.h_1mathsf_desc">
<title>Mathematical Special Functions</title>

<para>A collection of advanced mathematical special functions, defined by ISO/IEC IS 29124 and then added to ISO C++ 2017.</para>
<section xml:id="_specfun.h_1mathsf_intro">
<title>Introduction and History</title>

<para>The first significant library upgrade on the road to C++2011, <link xlink:href="http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2005/n1836.pdf">TR1</link>, included a set of 23 mathematical functions that significantly extended the standard transcendental functions inherited from C and declared in &lt;cmath&gt;.</para>

<para>Although most components from TR1 were eventually adopted for C++11 these math functions were left behind out of concern for implementability. The math functions were published as a separate international standard <link xlink:href="http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2010/n3060.pdf">IS 29124 - Extensions to the C++ Library to Support Mathematical Special Functions</link>.</para>

<para>For C++17 these functions were incorporated into the main standard.</para>
</section>
<section xml:id="_specfun.h_1mathsf_contents">
<title>Contents</title>

<para>The following functions are implemented in namespace <computeroutput>std:</computeroutput> <itemizedlist>
<listitem>
<para>assoc_laguerre - Associated Laguerre functions</para>
</listitem><listitem>
<para>assoc_legendre - Associated Legendre functions</para>
</listitem><listitem>
<para>beta - Beta functions</para>
</listitem><listitem>
<para>comp_ellint_1 - Complete elliptic functions of the first kind</para>
</listitem><listitem>
<para>comp_ellint_2 - Complete elliptic functions of the second kind</para>
</listitem><listitem>
<para>comp_ellint_3 - Complete elliptic functions of the third kind</para>
</listitem><listitem>
<para>cyl_bessel_i - Regular modified cylindrical Bessel functions</para>
</listitem><listitem>
<para>cyl_bessel_j - Cylindrical Bessel functions of the first kind</para>
</listitem><listitem>
<para>cyl_bessel_k - Irregular modified cylindrical Bessel functions</para>
</listitem><listitem>
<para>cyl_neumann - Cylindrical Neumann functions or Cylindrical Bessel functions of the second kind</para>
</listitem><listitem>
<para>ellint_1 - Incomplete elliptic functions of the first kind</para>
</listitem><listitem>
<para>ellint_2 - Incomplete elliptic functions of the second kind</para>
</listitem><listitem>
<para>ellint_3 - Incomplete elliptic functions of the third kind</para>
</listitem><listitem>
<para>expint - The exponential integral</para>
</listitem><listitem>
<para><link linkend="_namespacehermite">hermite - Hermite polynomials</link></para>
</listitem><listitem>
<para>laguerre - Laguerre functions</para>
</listitem><listitem>
<para>legendre - Legendre polynomials</para>
</listitem><listitem>
<para>riemann_zeta - The Riemann zeta function</para>
</listitem><listitem>
<para>sph_bessel - Spherical Bessel functions</para>
</listitem><listitem>
<para>sph_legendre - Spherical Legendre functions</para>
</listitem><listitem>
<para>sph_neumann - Spherical Neumann functions</para>
</listitem></itemizedlist>
</para>

<para>The hypergeometric functions were stricken from the TR29124 and C++17 versions of this math library because of implementation concerns. However, since they were in the TR1 version and since they are popular we kept them as an extension in namespace <computeroutput><link linkend="_namespace____gnu__cxx">__gnu_cxx</link>:</computeroutput> <itemizedlist>
<listitem>
<para>conf_hyperg - Confluent hypergeometric functions</para>
</listitem><listitem>
<para>hyperg - Hypergeometric functions</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_specfun.h_1mathsf_promotion">
<title>Argument Promotion</title>

<para>The arguments suppled to the non-suffixed functions will be promoted according to the following rules:<orderedlist>
<listitem>
<para>If any argument intended to be floating point is given an integral value That integral value is promoted to double.</para>
</listitem><listitem>
<para>All floating point arguments are promoted up to the largest floating point precision among them.</para>
</listitem></orderedlist>
</para>
</section>
<section xml:id="_specfun.h_1mathsf_NaN">
<title>NaN Arguments</title>

<para>If any of the floating point arguments supplied to these functions is invalid or NaN (std::numeric_limits&lt;Tp&gt;::quiet_NaN), the value NaN is returned.</para>
</section>
<section xml:id="_specfun.h_1mathsf_impl">
<title>Implementation</title>

<para>We strive to implement the underlying math with type generic algorithms to the greatest extent possible. In practice, the functions are thin wrappers that dispatch to function templates. Type dependence is controlled with std::numeric_limits and functions thereof.</para>

<para>We don&apos;t promote <computeroutput>float</computeroutput> to <computeroutput>double</computeroutput> or <computeroutput>double</computeroutput> to <computeroutput>long double</computeroutput> reflexively. The goal is for <computeroutput>float</computeroutput> functions to operate more quickly, at the cost of <computeroutput>float</computeroutput> accuracy and possibly a smaller domain of validity. Similaryly, <computeroutput>long double</computeroutput> should give you more dynamic range and slightly more pecision than <computeroutput>double</computeroutput> on many systems.</para>
</section>
<section xml:id="_specfun.h_1mathsf_testing">
<title>Testing</title>

<para>These functions have been tested against equivalent implementations from the <link xlink:href="http://www.gnu.org/software/gsl">Gnu Scientific Library, GSL</link> and <link xlink:href="http://www.boost.org/doc/libs/1_60_0/libs/math/doc/html/index.html">Boost</link> and the ratio          <mediaobject>
            <imageobject>
                <imagedata align="center" valign="middle" scalefit="0" fileref="form_40.png"/>
            </imageobject>
        </mediaobject>
 is generally found to be within 10<superscript>-15</superscript> for 64-bit double on linux-x86_64 systems over most of the ranges of validity.</para>

<para><para><link linkend="_todo_1_todo000011">Todo</link> 
<para>Provide accuracy comparisons on a per-function basis for a small number of targets.</para>
</para></para>
</section>
<section xml:id="_specfun.h_1mathsf_bibliography">
<title>General Bibliography</title>

<para><formalpara><title>See also</title>

<para>Abramowitz <link linkend="__classes_2lib_2include_2iso646_8h_1aa3d7d535cf450b91b9cb6d9cee2edbb9">and</link> Stegun: Handbook of Mathematical Functions, with Formulas, Graphs, <link linkend="__classes_2lib_2include_2iso646_8h_1aa3d7d535cf450b91b9cb6d9cee2edbb9">and</link> Mathematical Tables Edited by Milton Abramowitz <link linkend="__classes_2lib_2include_2iso646_8h_1aa3d7d535cf450b91b9cb6d9cee2edbb9">and</link> Irene A. Stegun, National Bureau of Standards Applied Mathematics Series - 55 Issued June 1964, Tenth Printing, December 1972, with corrections Electronic versions of A&amp;S abound including both pdf <link linkend="__classes_2lib_2include_2iso646_8h_1aa3d7d535cf450b91b9cb6d9cee2edbb9">and</link> navigable html. </para>

<para>for example <link xlink:href="http://people.math.sfu.ca/~cbm/aands/">http://people.math.sfu.ca/~cbm/aands/</link></para>

<para>The old A&amp;S has been redone as the NIST Digital Library of Mathematical Functions: <link xlink:href="http://dlmf.nist.gov/">http://dlmf.nist.gov/</link> This <link linkend="_namespaceversion">version</link> <link linkend="__monobehavior_8h_1a9870e0caa2f8e3e5700c4cbb21d73c07">is</link> <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0c7f69fbe7d0e46de03177792c263129">far</link> more navigable <link linkend="__classes_2lib_2include_2iso646_8h_1aa3d7d535cf450b91b9cb6d9cee2edbb9">and</link> includes more recent work.</para>

<para>An Atlas of Functions: with Equator, the Atlas Function Calculator 2nd Edition, by Oldham, Keith B., Myland, Jan, Spanier, Jerome</para>

<para>Asymptotics <link linkend="__classes_2lib_2include_2iso646_8h_1aa3d7d535cf450b91b9cb6d9cee2edbb9">and</link> Special Functions by Frank <link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294ab722ceeb601c72cd78fbd35f3581fdf7">W</link>. J. Olver, Academic Press, 1974</para>

<para>Numerical Recipes <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link> <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link>, The Art of Scientific Computing, by William H. Press, Second Ed., Saul A. Teukolsky, William T. Vetterling, <link linkend="__classes_2lib_2include_2iso646_8h_1aa3d7d535cf450b91b9cb6d9cee2edbb9">and</link> Brian P. Flannery, Cambridge University Press, 1992</para>

<para>The Special Functions <link linkend="__classes_2lib_2include_2iso646_8h_1aa3d7d535cf450b91b9cb6d9cee2edbb9">and</link> Their Approximations: Volumes 1 <link linkend="__classes_2lib_2include_2iso646_8h_1aa3d7d535cf450b91b9cb6d9cee2edbb9">and</link> 2, by Yudell <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>. Luke, Academic Press, 1969</para>
</formalpara>
</para>
</section>
</section>
</section>
