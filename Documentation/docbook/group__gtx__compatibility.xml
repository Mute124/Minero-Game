<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__gtx__compatibility" xml:lang="en-US">
<title>GLM_GTX_compatibility</title>
<indexterm><primary>GLM_GTX_compatibility</primary></indexterm>
Collaboration diagram for GLM_GTX_compatibility:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtx__compatibility.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>typedef <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_group__gtx__compatibility_1gab65f19f5170f95a2f06d6aa6482c9405">glm::bool1</link></para>

<para>boolean type with 1 component. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1vec">vec</link>&lt; 2, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga8b861bdd99391e87ae75e24a02ad5340">glm::bool2</link></para>

<para>boolean type with 2 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1vec">vec</link>&lt; 3, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga46f1089a26b58b824b0ba699a119613f">glm::bool3</link></para>

<para>boolean type with 3 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1vec">vec</link>&lt; 4, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gad2c8172006e691da500fd2e6cf79e08e">glm::bool4</link></para>

<para>boolean type with 4 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_group__gtx__compatibility_1ga98d9d3da22aebc872ba38ce5afa0eff7">glm::bool1x1</link></para>

<para>boolean matrix with 1 x 1 component. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 2, 2, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gad5da24a79b7cd027217ce952c3332753">glm::bool2x2</link></para>

<para>boolean matrix with 2 x 2 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 2, 3, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gad5b34d427a5e0e4d2ca837080d3515df">glm::bool2x3</link></para>

<para>boolean matrix with 2 x 3 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 2, 4, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga3759a145c3046b78eb7d3ab2569e316a">glm::bool2x4</link></para>

<para>boolean matrix with 2 x 4 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 3, 2, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gaea7a4616cf3861b58171279172c90659">glm::bool3x2</link></para>

<para>boolean matrix with 3 x 2 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 3, 3, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gad7a76bf942f3d1725829464b7527d95c">glm::bool3x3</link></para>

<para>boolean matrix with 3 x 3 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 3, 4, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gad0702401dc5ae9bcb2ff0a3bb458d4e0">glm::bool3x4</link></para>

<para>boolean matrix with 3 x 4 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 4, 2, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga4e5adfa30416c5983172350c93749fbb">glm::bool4x2</link></para>

<para>boolean matrix with 4 x 2 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 4, 3, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga8a85d5b84c051ddf282065a95fbf108d">glm::bool4x3</link></para>

<para>boolean matrix with 4 x 3 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 4, 4, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gaded68186514863ed7aafbef7a665b3c8">glm::bool4x4</link></para>

<para>boolean matrix with 4 x 4 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef int <link linkend="_group__gtx__compatibility_1gaba41d7803e4b24c17656d74377b88286">glm::int1</link></para>

<para>integer vector with 1 component. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1vec">vec</link>&lt; 2, int, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga4c756190f53d7cd782e20a849d0f3cac">glm::int2</link></para>

<para>integer vector with 2 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1vec">vec</link>&lt; 3, int, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gaf390177b64145efbe808c0bf957d6f18">glm::int3</link></para>

<para>integer vector with 3 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1vec">vec</link>&lt; 4, int, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga0c7efa0a300bcc1bc32ffbe1d4e198ee">glm::int4</link></para>

<para>integer vector with 4 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef int <link linkend="_group__gtx__compatibility_1ga09016a637a3cd093c22e6188080ac750">glm::int1x1</link></para>

<para>integer matrix with 1 component. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 2, 2, int, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gadd0ebcd6338dbad8c81828593df48fb2">glm::int2x2</link></para>

<para>integer matrix with 2 x 2 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 2, 3, int, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga22e25cc3a6a31a7826f6c4984a4152e7">glm::int2x3</link></para>

<para>integer matrix with 2 x 3 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 2, 4, int, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga96e2c552cf9845abeb93ea75cac18960">glm::int2x4</link></para>

<para>integer matrix with 2 x 4 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 3, 2, int, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga6cfa9a7233c9fedb3244c26656063f67">glm::int3x2</link></para>

<para>integer matrix with 3 x 2 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 3, 3, int, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga06c84498a394294d0163808eded80b51">glm::int3x3</link></para>

<para>integer matrix with 3 x 3 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 3, 4, int, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga360310f31a6f26aa2f04487faaf70b42">glm::int3x4</link></para>

<para>integer matrix with 3 x 4 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 4, 2, int, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga5ba66e1923938edc85fd97537a8e9289">glm::int4x2</link></para>

<para>integer matrix with 4 x 2 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 4, 3, int, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga1f8df31a88edf6ad690d4073c6457be9">glm::int4x3</link></para>

<para>integer matrix with 4 x 3 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 4, 4, int, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gabb2c02b95fe0b2d8bed065f23f6f07c9">glm::int4x4</link></para>

<para>integer matrix with 4 x 4 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef float <link linkend="_group__gtx__compatibility_1gae0ad1b0450320cda98bbbecb56bc3167">glm::float1</link></para>

<para>single-qualifier floating-point vector with 1 component. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1vec">vec</link>&lt; 2, float, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gac83d620ca012387e1c74a62e95a11cc2">glm::float2</link></para>

<para>single-qualifier floating-point vector with 2 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1vec">vec</link>&lt; 3, float, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gaa47f580d91a8c1742b712cee06b24b29">glm::float3</link></para>

<para>single-qualifier floating-point vector with 3 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1vec">vec</link>&lt; 4, float, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga7d7bd39993c4bb000cb5863debd3375f">glm::float4</link></para>

<para>single-qualifier floating-point vector with 4 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef float <link linkend="_group__gtx__compatibility_1gaac1faa940ac1fbb32d4a315005b578af">glm::float1x1</link></para>

<para>single-qualifier floating-point matrix with 1 component. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 2, 2, float, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gad50b208d14476af78e73b5c26465257d">glm::float2x2</link></para>

<para>single-qualifier floating-point matrix with 2 x 2 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 2, 3, float, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gaedefe3967a477a9648307ea00a6e85d3">glm::float2x3</link></para>

<para>single-qualifier floating-point matrix with 2 x 3 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 2, 4, float, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gaa09427070f0682d5aee277a641cde835">glm::float2x4</link></para>

<para>single-qualifier floating-point matrix with 2 x 4 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 3, 2, float, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gaacd36292d7f308b6b0410c7ead935a46">glm::float3x2</link></para>

<para>single-qualifier floating-point matrix with 3 x 2 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 3, 3, float, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga5a1bf45c23229b8655d98d62dc775dc2">glm::float3x3</link></para>

<para>single-qualifier floating-point matrix with 3 x 3 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 3, 4, float, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga55714eeed4d5ff318cd50633ea04abb6">glm::float3x4</link></para>

<para>single-qualifier floating-point matrix with 3 x 4 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 4, 2, float, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gacf8d3c3b9c0065f16d9292d012c9f75c">glm::float4x2</link></para>

<para>single-qualifier floating-point matrix with 4 x 2 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 4, 3, float, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga45d5aabe0e85c896ef474956c38c1b91">glm::float4x3</link></para>

<para>single-qualifier floating-point matrix with 4 x 3 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 4, 4, float, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gad005a27b6af36d41e150c757b712e6d3">glm::float4x4</link></para>

<para>single-qualifier floating-point matrix with 4 x 4 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef double <link linkend="_group__gtx__compatibility_1gab8b88350212cea916857cb2f49b8a29f">glm::double1</link></para>

<para>double-qualifier floating-point vector with 1 component. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1vec">vec</link>&lt; 2, double, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga36d020d0540e73303963e207a37ddf52">glm::double2</link></para>

<para>double-qualifier floating-point vector with 2 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1vec">vec</link>&lt; 3, double, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga43a3bb50e00d0ff271e749e743890846">glm::double3</link></para>

<para>double-qualifier floating-point vector with 3 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1vec">vec</link>&lt; 4, double, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga6d37ac929ad11bdc471eabc7759fb4ff">glm::double4</link></para>

<para>double-qualifier floating-point vector with 4 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef double <link linkend="_group__gtx__compatibility_1ga1c87d3042377335eb050a20ab0ec148a">glm::double1x1</link></para>

<para>double-qualifier floating-point matrix with 1 component. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 2, 2, double, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gaeb777b0c7517689ab5f255e19309cf16">glm::double2x2</link></para>

<para>double-qualifier floating-point matrix with 2 x 2 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 2, 3, double, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gabb47054c460a3e98d74b75bd9ff20f6e">glm::double2x3</link></para>

<para>double-qualifier floating-point matrix with 2 x 3 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 2, 4, double, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga72ed3494f3f0f5881069a51cb6373725">glm::double2x4</link></para>

<para>double-qualifier floating-point matrix with 2 x 4 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 3, 2, double, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga7086debc5135d4f53a0f904d551f82b2">glm::double3x2</link></para>

<para>double-qualifier floating-point matrix with 3 x 2 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 3, 3, double, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gaa9e2851ce3cb95c4d1176e5fc62557d4">glm::double3x3</link></para>

<para>double-qualifier floating-point matrix with 3 x 3 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 3, 4, double, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gadd4209f2b5f98fd8310b9dbfc56be78c">glm::double3x4</link></para>

<para>double-qualifier floating-point matrix with 3 x 4 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 4, 2, double, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga6754cbae32730b4a6e78dbd77ec8a926">glm::double4x2</link></para>

<para>double-qualifier floating-point matrix with 4 x 2 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 4, 3, double, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gabd799bde061e9c0d20b3092a6bb73fbe">glm::double4x3</link></para>

<para>double-qualifier floating-point matrix with 4 x 3 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
            <listitem><para>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 4, 4, double, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga077c6e965130bffb09674858f210136b">glm::double4x4</link></para>

<para>double-qualifier floating-point matrix with 4 x 4 components. (From GLM_GTX_compatibility extension) </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>template&lt;typename T &gt; </para><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> T <link linkend="_group__gtx__compatibility_1ga5494ba3a95ea6594c86fc75236886864">glm::lerp</link> (T <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>, T <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>, T <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>)</para>

<para>Returns x * (1.0 - a) + y * a, i.e., the linear blend of x and y using the floating-point value a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility) </para>
</listitem>
            <listitem><para>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </para><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_structglm_1_1vec">vec</link>&lt; 2, T, Q &gt; <link linkend="_group__gtx__compatibility_1ga708e3c823b3a11f1c312882a505912fc">glm::lerp</link> (const <link linkend="_structglm_1_1vec">vec</link>&lt; 2, T, Q &gt; &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>, const <link linkend="_structglm_1_1vec">vec</link>&lt; 2, T, Q &gt; &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>, T <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>)</para>

<para>Returns x * (1.0 - a) + y * a, i.e., the linear blend of x and y using the floating-point value a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility) </para>
</listitem>
            <listitem><para>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </para><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_structglm_1_1vec">vec</link>&lt; 3, T, Q &gt; <link linkend="_group__gtx__compatibility_1ga71dffe7521b47a093536740a64f301e7">glm::lerp</link> (const <link linkend="_structglm_1_1vec">vec</link>&lt; 3, T, Q &gt; &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>, const <link linkend="_structglm_1_1vec">vec</link>&lt; 3, T, Q &gt; &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>, T <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>)</para>

<para>Returns x * (1.0 - a) + y * a, i.e., the linear blend of x and y using the floating-point value a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility) </para>
</listitem>
            <listitem><para>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </para><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_structglm_1_1vec">vec</link>&lt; 4, T, Q &gt; <link linkend="_group__gtx__compatibility_1gaa17bba33feb1ff86aac3dc013a0340f2">glm::lerp</link> (const <link linkend="_structglm_1_1vec">vec</link>&lt; 4, T, Q &gt; &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>, const <link linkend="_structglm_1_1vec">vec</link>&lt; 4, T, Q &gt; &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>, T <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>)</para>

<para>Returns x * (1.0 - a) + y * a, i.e., the linear blend of x and y using the floating-point value a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility) </para>
</listitem>
            <listitem><para>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </para><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_structglm_1_1vec">vec</link>&lt; 2, T, Q &gt; <link linkend="_group__gtx__compatibility_1ga8e8825e36ca18b7c2071a47a8bb7c5e9">glm::lerp</link> (const <link linkend="_structglm_1_1vec">vec</link>&lt; 2, T, Q &gt; &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>, const <link linkend="_structglm_1_1vec">vec</link>&lt; 2, T, Q &gt; &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>, const <link linkend="_structglm_1_1vec">vec</link>&lt; 2, T, Q &gt; &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>)</para>

<para>Returns the component-wise result of x * (1.0 - a) + y * a, i.e., the linear blend of x and y using vector a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility) </para>
</listitem>
            <listitem><para>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </para><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_structglm_1_1vec">vec</link>&lt; 3, T, Q &gt; <link linkend="_group__gtx__compatibility_1gadff71b18ac8b6cdf4d837dd47d2a2281">glm::lerp</link> (const <link linkend="_structglm_1_1vec">vec</link>&lt; 3, T, Q &gt; &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>, const <link linkend="_structglm_1_1vec">vec</link>&lt; 3, T, Q &gt; &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>, const <link linkend="_structglm_1_1vec">vec</link>&lt; 3, T, Q &gt; &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>)</para>

<para>Returns the component-wise result of x * (1.0 - a) + y * a, i.e., the linear blend of x and y using vector a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility) </para>
</listitem>
            <listitem><para>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </para><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_structglm_1_1vec">vec</link>&lt; 4, T, Q &gt; <link linkend="_group__gtx__compatibility_1gadc87fe20949b01472c2942cd4632500e">glm::lerp</link> (const <link linkend="_structglm_1_1vec">vec</link>&lt; 4, T, Q &gt; &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>, const <link linkend="_structglm_1_1vec">vec</link>&lt; 4, T, Q &gt; &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>, const <link linkend="_structglm_1_1vec">vec</link>&lt; 4, T, Q &gt; &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>)</para>

<para>Returns the component-wise result of x * (1.0 - a) + y * a, i.e., the linear blend of x and y using vector a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility) </para>
</listitem>
            <listitem><para>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </para><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> T <link linkend="_group__gtx__compatibility_1ga0fd09e616d122bc2ed9726682ffd44b7">glm::saturate</link> (T <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)</para>

<para>Returns clamp(x, 0, 1) for each component in x. (From GLM_GTX_compatibility) </para>
</listitem>
            <listitem><para>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </para><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_structglm_1_1vec">vec</link>&lt; 2, T, Q &gt; <link linkend="_group__gtx__compatibility_1gaea58b11db77ded09ce6926ea5a0dbb80">glm::saturate</link> (const <link linkend="_structglm_1_1vec">vec</link>&lt; 2, T, Q &gt; &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)</para>

<para>Returns clamp(x, 0, 1) for each component in x. (From GLM_GTX_compatibility) </para>
</listitem>
            <listitem><para>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </para><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_structglm_1_1vec">vec</link>&lt; 3, T, Q &gt; <link linkend="_group__gtx__compatibility_1ga6256c2f699a6cf2d8912e637b333318a">glm::saturate</link> (const <link linkend="_structglm_1_1vec">vec</link>&lt; 3, T, Q &gt; &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)</para>

<para>Returns clamp(x, 0, 1) for each component in x. (From GLM_GTX_compatibility) </para>
</listitem>
            <listitem><para>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </para><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_structglm_1_1vec">vec</link>&lt; 4, T, Q &gt; <link linkend="_group__gtx__compatibility_1gadc07371ed8d58b79f32191e7b0ebb17c">glm::saturate</link> (const <link linkend="_structglm_1_1vec">vec</link>&lt; 4, T, Q &gt; &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)</para>

<para>Returns clamp(x, 0, 1) for each component in x. (From GLM_GTX_compatibility) </para>
</listitem>
            <listitem><para>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </para><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> T <link linkend="_group__gtx__compatibility_1gac63011205bf6d0be82589dc56dd26708">glm::atan2</link> (T <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>, T <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>)</para>

<para>Arc tangent. Returns an angle whose tangent is y/x. The signs of x and y are used to determine what quadrant the angle is in. The range of values returned by this function is [-PI, PI]. Results are undefined if x and y are both 0. (From GLM_GTX_compatibility) </para>
</listitem>
            <listitem><para>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </para><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_structglm_1_1vec">vec</link>&lt; 2, T, Q &gt; <link linkend="_group__gtx__compatibility_1ga3ab590fdd6c02c191c15aaa9e14c379a">glm::atan2</link> (const <link linkend="_structglm_1_1vec">vec</link>&lt; 2, T, Q &gt; &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>, const <link linkend="_structglm_1_1vec">vec</link>&lt; 2, T, Q &gt; &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>)</para>

<para>Arc tangent. Returns an angle whose tangent is y/x. The signs of x and y are used to determine what quadrant the angle is in. The range of values returned by this function is [-PI, PI]. Results are undefined if x and y are both 0. (From GLM_GTX_compatibility) </para>
</listitem>
            <listitem><para>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </para><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_structglm_1_1vec">vec</link>&lt; 3, T, Q &gt; <link linkend="_group__gtx__compatibility_1gacf0f911948630c85bbe3b9fbc3f01436">glm::atan2</link> (const <link linkend="_structglm_1_1vec">vec</link>&lt; 3, T, Q &gt; &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>, const <link linkend="_structglm_1_1vec">vec</link>&lt; 3, T, Q &gt; &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>)</para>

<para>Arc tangent. Returns an angle whose tangent is y/x. The signs of x and y are used to determine what quadrant the angle is in. The range of values returned by this function is [-PI, PI]. Results are undefined if x and y are both 0. (From GLM_GTX_compatibility) </para>
</listitem>
            <listitem><para>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </para><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_structglm_1_1vec">vec</link>&lt; 4, T, Q &gt; <link linkend="_group__gtx__compatibility_1gafb58675916a044cea99ba524a265d208">glm::atan2</link> (const <link linkend="_structglm_1_1vec">vec</link>&lt; 4, T, Q &gt; &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>, const <link linkend="_structglm_1_1vec">vec</link>&lt; 4, T, Q &gt; &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>)</para>

<para>Arc tangent. Returns an angle whose tangent is y/x. The signs of x and y are used to determine what quadrant the angle is in. The range of values returned by this function is [-PI, PI]. Results are undefined if x and y are both 0. (From GLM_GTX_compatibility) </para>
</listitem>
            <listitem><para>template&lt;typename genType &gt; </para><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_group__gtx__compatibility_1gaf4b04dcd3526996d68c1bfe17bfc8657">glm::isfinite</link> (genType const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)</para>

<para>Test whether or not a scalar or each vector component is a finite value. (From GLM_GTX_compatibility) </para>
</listitem>
            <listitem><para>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </para><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_structglm_1_1vec">vec</link>&lt; 1, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, Q &gt; <link linkend="_group__gtx__compatibility_1ga8cf0b192821187588cae9cb40f93fe05">glm::isfinite</link> (const <link linkend="_structglm_1_1vec">vec</link>&lt; 1, T, Q &gt; &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)</para>

<para>Test whether or not a scalar or each vector component is a finite value. (From GLM_GTX_compatibility) </para>
</listitem>
            <listitem><para>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </para><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_structglm_1_1vec">vec</link>&lt; 2, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, Q &gt; <link linkend="_group__gtx__compatibility_1ga1870a1f6872bfd5aa82f2281ea9e547c">glm::isfinite</link> (const <link linkend="_structglm_1_1vec">vec</link>&lt; 2, T, Q &gt; &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)</para>

<para>Test whether or not a scalar or each vector component is a finite value. (From GLM_GTX_compatibility) </para>
</listitem>
            <listitem><para>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </para><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_structglm_1_1vec">vec</link>&lt; 3, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, Q &gt; <link linkend="_group__gtx__compatibility_1ga5d1dfa1645b4eec47627b69f30594998">glm::isfinite</link> (const <link linkend="_structglm_1_1vec">vec</link>&lt; 3, T, Q &gt; &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)</para>

<para>Test whether or not a scalar or each vector component is a finite value. (From GLM_GTX_compatibility) </para>
</listitem>
            <listitem><para>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </para><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_structglm_1_1vec">vec</link>&lt; 4, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, Q &gt; <link linkend="_group__gtx__compatibility_1gafbee9c67dd32e68491786ae085927b48">glm::isfinite</link> (const <link linkend="_structglm_1_1vec">vec</link>&lt; 4, T, Q &gt; &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)</para>

<para>Test whether or not a scalar or each vector component is a finite value. (From GLM_GTX_compatibility) </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Include &lt;glm/gtx/compatibility.hpp&gt; to use the features of this extension.</para>

<para>Provide functions to increase the compatibility with Cg and HLSL languages </para>
</section>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="_group__gtx__compatibility_1gab65f19f5170f95a2f06d6aa6482c9405"/><section>
    <title>bool1</title>
<indexterm><primary>bool1</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>bool1</secondary></indexterm>
<para><computeroutput>typedef <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">glm::bool1</link></computeroutput></para><para>

<para>boolean type with 1 component. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1ga98d9d3da22aebc872ba38ce5afa0eff7"/><section>
    <title>bool1x1</title>
<indexterm><primary>bool1x1</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>bool1x1</secondary></indexterm>
<para><computeroutput>typedef <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">glm::bool1x1</link></computeroutput></para><para>

<para>boolean matrix with 1 x 1 component. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1ga8b861bdd99391e87ae75e24a02ad5340"/><section>
    <title>bool2</title>
<indexterm><primary>bool2</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>bool2</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1vec">vec</link>&lt; 2, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga8b861bdd99391e87ae75e24a02ad5340">glm::bool2</link></computeroutput></para><para>

<para>boolean type with 2 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1gad5da24a79b7cd027217ce952c3332753"/><section>
    <title>bool2x2</title>
<indexterm><primary>bool2x2</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>bool2x2</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 2, 2, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gad5da24a79b7cd027217ce952c3332753">glm::bool2x2</link></computeroutput></para><para>

<para>boolean matrix with 2 x 2 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1gad5b34d427a5e0e4d2ca837080d3515df"/><section>
    <title>bool2x3</title>
<indexterm><primary>bool2x3</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>bool2x3</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 2, 3, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gad5b34d427a5e0e4d2ca837080d3515df">glm::bool2x3</link></computeroutput></para><para>

<para>boolean matrix with 2 x 3 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1ga3759a145c3046b78eb7d3ab2569e316a"/><section>
    <title>bool2x4</title>
<indexterm><primary>bool2x4</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>bool2x4</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 2, 4, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga3759a145c3046b78eb7d3ab2569e316a">glm::bool2x4</link></computeroutput></para><para>

<para>boolean matrix with 2 x 4 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1ga46f1089a26b58b824b0ba699a119613f"/><section>
    <title>bool3</title>
<indexterm><primary>bool3</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>bool3</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1vec">vec</link>&lt; 3, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga46f1089a26b58b824b0ba699a119613f">glm::bool3</link></computeroutput></para><para>

<para>boolean type with 3 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1gaea7a4616cf3861b58171279172c90659"/><section>
    <title>bool3x2</title>
<indexterm><primary>bool3x2</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>bool3x2</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 3, 2, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gaea7a4616cf3861b58171279172c90659">glm::bool3x2</link></computeroutput></para><para>

<para>boolean matrix with 3 x 2 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1gad7a76bf942f3d1725829464b7527d95c"/><section>
    <title>bool3x3</title>
<indexterm><primary>bool3x3</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>bool3x3</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 3, 3, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gad7a76bf942f3d1725829464b7527d95c">glm::bool3x3</link></computeroutput></para><para>

<para>boolean matrix with 3 x 3 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1gad0702401dc5ae9bcb2ff0a3bb458d4e0"/><section>
    <title>bool3x4</title>
<indexterm><primary>bool3x4</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>bool3x4</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 3, 4, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gad0702401dc5ae9bcb2ff0a3bb458d4e0">glm::bool3x4</link></computeroutput></para><para>

<para>boolean matrix with 3 x 4 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1gad2c8172006e691da500fd2e6cf79e08e"/><section>
    <title>bool4</title>
<indexterm><primary>bool4</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>bool4</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1vec">vec</link>&lt; 4, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gad2c8172006e691da500fd2e6cf79e08e">glm::bool4</link></computeroutput></para><para>

<para>boolean type with 4 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1ga4e5adfa30416c5983172350c93749fbb"/><section>
    <title>bool4x2</title>
<indexterm><primary>bool4x2</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>bool4x2</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 4, 2, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga4e5adfa30416c5983172350c93749fbb">glm::bool4x2</link></computeroutput></para><para>

<para>boolean matrix with 4 x 2 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1ga8a85d5b84c051ddf282065a95fbf108d"/><section>
    <title>bool4x3</title>
<indexterm><primary>bool4x3</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>bool4x3</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 4, 3, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga8a85d5b84c051ddf282065a95fbf108d">glm::bool4x3</link></computeroutput></para><para>

<para>boolean matrix with 4 x 3 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1gaded68186514863ed7aafbef7a665b3c8"/><section>
    <title>bool4x4</title>
<indexterm><primary>bool4x4</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>bool4x4</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 4, 4, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gaded68186514863ed7aafbef7a665b3c8">glm::bool4x4</link></computeroutput></para><para>

<para>boolean matrix with 4 x 4 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1gab8b88350212cea916857cb2f49b8a29f"/><section>
    <title>double1</title>
<indexterm><primary>double1</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>double1</secondary></indexterm>
<para><computeroutput>typedef double <link linkend="_group__gtx__compatibility_1gab8b88350212cea916857cb2f49b8a29f">glm::double1</link></computeroutput></para><para>

<para>double-qualifier floating-point vector with 1 component. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1ga1c87d3042377335eb050a20ab0ec148a"/><section>
    <title>double1x1</title>
<indexterm><primary>double1x1</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>double1x1</secondary></indexterm>
<para><computeroutput>typedef double <link linkend="_group__gtx__compatibility_1ga1c87d3042377335eb050a20ab0ec148a">glm::double1x1</link></computeroutput></para><para>

<para>double-qualifier floating-point matrix with 1 component. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1ga36d020d0540e73303963e207a37ddf52"/><section>
    <title>double2</title>
<indexterm><primary>double2</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>double2</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1vec">vec</link>&lt; 2, double, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga36d020d0540e73303963e207a37ddf52">glm::double2</link></computeroutput></para><para>

<para>double-qualifier floating-point vector with 2 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1gaeb777b0c7517689ab5f255e19309cf16"/><section>
    <title>double2x2</title>
<indexterm><primary>double2x2</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>double2x2</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 2, 2, double, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gaeb777b0c7517689ab5f255e19309cf16">glm::double2x2</link></computeroutput></para><para>

<para>double-qualifier floating-point matrix with 2 x 2 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1gabb47054c460a3e98d74b75bd9ff20f6e"/><section>
    <title>double2x3</title>
<indexterm><primary>double2x3</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>double2x3</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 2, 3, double, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gabb47054c460a3e98d74b75bd9ff20f6e">glm::double2x3</link></computeroutput></para><para>

<para>double-qualifier floating-point matrix with 2 x 3 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1ga72ed3494f3f0f5881069a51cb6373725"/><section>
    <title>double2x4</title>
<indexterm><primary>double2x4</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>double2x4</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 2, 4, double, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga72ed3494f3f0f5881069a51cb6373725">glm::double2x4</link></computeroutput></para><para>

<para>double-qualifier floating-point matrix with 2 x 4 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1ga43a3bb50e00d0ff271e749e743890846"/><section>
    <title>double3</title>
<indexterm><primary>double3</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>double3</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1vec">vec</link>&lt; 3, double, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga43a3bb50e00d0ff271e749e743890846">glm::double3</link></computeroutput></para><para>

<para>double-qualifier floating-point vector with 3 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1ga7086debc5135d4f53a0f904d551f82b2"/><section>
    <title>double3x2</title>
<indexterm><primary>double3x2</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>double3x2</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 3, 2, double, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga7086debc5135d4f53a0f904d551f82b2">glm::double3x2</link></computeroutput></para><para>

<para>double-qualifier floating-point matrix with 3 x 2 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1gaa9e2851ce3cb95c4d1176e5fc62557d4"/><section>
    <title>double3x3</title>
<indexterm><primary>double3x3</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>double3x3</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 3, 3, double, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gaa9e2851ce3cb95c4d1176e5fc62557d4">glm::double3x3</link></computeroutput></para><para>

<para>double-qualifier floating-point matrix with 3 x 3 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1gadd4209f2b5f98fd8310b9dbfc56be78c"/><section>
    <title>double3x4</title>
<indexterm><primary>double3x4</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>double3x4</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 3, 4, double, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gadd4209f2b5f98fd8310b9dbfc56be78c">glm::double3x4</link></computeroutput></para><para>

<para>double-qualifier floating-point matrix with 3 x 4 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1ga6d37ac929ad11bdc471eabc7759fb4ff"/><section>
    <title>double4</title>
<indexterm><primary>double4</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>double4</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1vec">vec</link>&lt; 4, double, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga6d37ac929ad11bdc471eabc7759fb4ff">glm::double4</link></computeroutput></para><para>

<para>double-qualifier floating-point vector with 4 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1ga6754cbae32730b4a6e78dbd77ec8a926"/><section>
    <title>double4x2</title>
<indexterm><primary>double4x2</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>double4x2</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 4, 2, double, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga6754cbae32730b4a6e78dbd77ec8a926">glm::double4x2</link></computeroutput></para><para>

<para>double-qualifier floating-point matrix with 4 x 2 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1gabd799bde061e9c0d20b3092a6bb73fbe"/><section>
    <title>double4x3</title>
<indexterm><primary>double4x3</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>double4x3</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 4, 3, double, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gabd799bde061e9c0d20b3092a6bb73fbe">glm::double4x3</link></computeroutput></para><para>

<para>double-qualifier floating-point matrix with 4 x 3 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1ga077c6e965130bffb09674858f210136b"/><section>
    <title>double4x4</title>
<indexterm><primary>double4x4</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>double4x4</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 4, 4, double, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga077c6e965130bffb09674858f210136b">glm::double4x4</link></computeroutput></para><para>

<para>double-qualifier floating-point matrix with 4 x 4 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1gae0ad1b0450320cda98bbbecb56bc3167"/><section>
    <title>float1</title>
<indexterm><primary>float1</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>float1</secondary></indexterm>
<para><computeroutput>typedef float <link linkend="_group__gtx__compatibility_1gae0ad1b0450320cda98bbbecb56bc3167">glm::float1</link></computeroutput></para><para>

<para>single-qualifier floating-point vector with 1 component. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1gaac1faa940ac1fbb32d4a315005b578af"/><section>
    <title>float1x1</title>
<indexterm><primary>float1x1</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>float1x1</secondary></indexterm>
<para><computeroutput>typedef float <link linkend="_group__gtx__compatibility_1gaac1faa940ac1fbb32d4a315005b578af">glm::float1x1</link></computeroutput></para><para>

<para>single-qualifier floating-point matrix with 1 component. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1gac83d620ca012387e1c74a62e95a11cc2"/><section>
    <title>float2</title>
<indexterm><primary>float2</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>float2</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1vec">vec</link>&lt; 2, float, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gac83d620ca012387e1c74a62e95a11cc2">glm::float2</link></computeroutput></para><para>

<para>single-qualifier floating-point vector with 2 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1gad50b208d14476af78e73b5c26465257d"/><section>
    <title>float2x2</title>
<indexterm><primary>float2x2</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>float2x2</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 2, 2, float, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gad50b208d14476af78e73b5c26465257d">glm::float2x2</link></computeroutput></para><para>

<para>single-qualifier floating-point matrix with 2 x 2 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1gaedefe3967a477a9648307ea00a6e85d3"/><section>
    <title>float2x3</title>
<indexterm><primary>float2x3</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>float2x3</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 2, 3, float, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gaedefe3967a477a9648307ea00a6e85d3">glm::float2x3</link></computeroutput></para><para>

<para>single-qualifier floating-point matrix with 2 x 3 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1gaa09427070f0682d5aee277a641cde835"/><section>
    <title>float2x4</title>
<indexterm><primary>float2x4</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>float2x4</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 2, 4, float, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gaa09427070f0682d5aee277a641cde835">glm::float2x4</link></computeroutput></para><para>

<para>single-qualifier floating-point matrix with 2 x 4 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1gaa47f580d91a8c1742b712cee06b24b29"/><section>
    <title>float3</title>
<indexterm><primary>float3</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>float3</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1vec">vec</link>&lt; 3, float, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gaa47f580d91a8c1742b712cee06b24b29">glm::float3</link></computeroutput></para><para>

<para>single-qualifier floating-point vector with 3 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1gaacd36292d7f308b6b0410c7ead935a46"/><section>
    <title>float3x2</title>
<indexterm><primary>float3x2</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>float3x2</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 3, 2, float, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gaacd36292d7f308b6b0410c7ead935a46">glm::float3x2</link></computeroutput></para><para>

<para>single-qualifier floating-point matrix with 3 x 2 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1ga5a1bf45c23229b8655d98d62dc775dc2"/><section>
    <title>float3x3</title>
<indexterm><primary>float3x3</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>float3x3</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 3, 3, float, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga5a1bf45c23229b8655d98d62dc775dc2">glm::float3x3</link></computeroutput></para><para>

<para>single-qualifier floating-point matrix with 3 x 3 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1ga55714eeed4d5ff318cd50633ea04abb6"/><section>
    <title>float3x4</title>
<indexterm><primary>float3x4</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>float3x4</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 3, 4, float, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga55714eeed4d5ff318cd50633ea04abb6">glm::float3x4</link></computeroutput></para><para>

<para>single-qualifier floating-point matrix with 3 x 4 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1ga7d7bd39993c4bb000cb5863debd3375f"/><section>
    <title>float4</title>
<indexterm><primary>float4</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>float4</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1vec">vec</link>&lt; 4, float, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga7d7bd39993c4bb000cb5863debd3375f">glm::float4</link></computeroutput></para><para>

<para>single-qualifier floating-point vector with 4 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1gacf8d3c3b9c0065f16d9292d012c9f75c"/><section>
    <title>float4x2</title>
<indexterm><primary>float4x2</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>float4x2</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 4, 2, float, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gacf8d3c3b9c0065f16d9292d012c9f75c">glm::float4x2</link></computeroutput></para><para>

<para>single-qualifier floating-point matrix with 4 x 2 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1ga45d5aabe0e85c896ef474956c38c1b91"/><section>
    <title>float4x3</title>
<indexterm><primary>float4x3</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>float4x3</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 4, 3, float, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga45d5aabe0e85c896ef474956c38c1b91">glm::float4x3</link></computeroutput></para><para>

<para>single-qualifier floating-point matrix with 4 x 3 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1gad005a27b6af36d41e150c757b712e6d3"/><section>
    <title>float4x4</title>
<indexterm><primary>float4x4</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>float4x4</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 4, 4, float, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gad005a27b6af36d41e150c757b712e6d3">glm::float4x4</link></computeroutput></para><para>

<para>single-qualifier floating-point matrix with 4 x 4 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1gaba41d7803e4b24c17656d74377b88286"/><section>
    <title>int1</title>
<indexterm><primary>int1</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>int1</secondary></indexterm>
<para><computeroutput>typedef int <link linkend="_group__gtx__compatibility_1gaba41d7803e4b24c17656d74377b88286">glm::int1</link></computeroutput></para><para>

<para>integer vector with 1 component. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1ga09016a637a3cd093c22e6188080ac750"/><section>
    <title>int1x1</title>
<indexterm><primary>int1x1</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>int1x1</secondary></indexterm>
<para><computeroutput>typedef int <link linkend="_group__gtx__compatibility_1ga09016a637a3cd093c22e6188080ac750">glm::int1x1</link></computeroutput></para><para>

<para>integer matrix with 1 component. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1ga4c756190f53d7cd782e20a849d0f3cac"/><section>
    <title>int2</title>
<indexterm><primary>int2</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>int2</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1vec">vec</link>&lt; 2, int, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga4c756190f53d7cd782e20a849d0f3cac">glm::int2</link></computeroutput></para><para>

<para>integer vector with 2 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1gadd0ebcd6338dbad8c81828593df48fb2"/><section>
    <title>int2x2</title>
<indexterm><primary>int2x2</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>int2x2</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 2, 2, int, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gadd0ebcd6338dbad8c81828593df48fb2">glm::int2x2</link></computeroutput></para><para>

<para>integer matrix with 2 x 2 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1ga22e25cc3a6a31a7826f6c4984a4152e7"/><section>
    <title>int2x3</title>
<indexterm><primary>int2x3</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>int2x3</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 2, 3, int, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga22e25cc3a6a31a7826f6c4984a4152e7">glm::int2x3</link></computeroutput></para><para>

<para>integer matrix with 2 x 3 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1ga96e2c552cf9845abeb93ea75cac18960"/><section>
    <title>int2x4</title>
<indexterm><primary>int2x4</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>int2x4</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 2, 4, int, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga96e2c552cf9845abeb93ea75cac18960">glm::int2x4</link></computeroutput></para><para>

<para>integer matrix with 2 x 4 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1gaf390177b64145efbe808c0bf957d6f18"/><section>
    <title>int3</title>
<indexterm><primary>int3</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>int3</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1vec">vec</link>&lt; 3, int, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gaf390177b64145efbe808c0bf957d6f18">glm::int3</link></computeroutput></para><para>

<para>integer vector with 3 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1ga6cfa9a7233c9fedb3244c26656063f67"/><section>
    <title>int3x2</title>
<indexterm><primary>int3x2</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>int3x2</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 3, 2, int, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga6cfa9a7233c9fedb3244c26656063f67">glm::int3x2</link></computeroutput></para><para>

<para>integer matrix with 3 x 2 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1ga06c84498a394294d0163808eded80b51"/><section>
    <title>int3x3</title>
<indexterm><primary>int3x3</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>int3x3</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 3, 3, int, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga06c84498a394294d0163808eded80b51">glm::int3x3</link></computeroutput></para><para>

<para>integer matrix with 3 x 3 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1ga360310f31a6f26aa2f04487faaf70b42"/><section>
    <title>int3x4</title>
<indexterm><primary>int3x4</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>int3x4</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 3, 4, int, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga360310f31a6f26aa2f04487faaf70b42">glm::int3x4</link></computeroutput></para><para>

<para>integer matrix with 3 x 4 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1ga0c7efa0a300bcc1bc32ffbe1d4e198ee"/><section>
    <title>int4</title>
<indexterm><primary>int4</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>int4</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1vec">vec</link>&lt; 4, int, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga0c7efa0a300bcc1bc32ffbe1d4e198ee">glm::int4</link></computeroutput></para><para>

<para>integer vector with 4 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1ga5ba66e1923938edc85fd97537a8e9289"/><section>
    <title>int4x2</title>
<indexterm><primary>int4x2</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>int4x2</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 4, 2, int, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga5ba66e1923938edc85fd97537a8e9289">glm::int4x2</link></computeroutput></para><para>

<para>integer matrix with 4 x 2 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1ga1f8df31a88edf6ad690d4073c6457be9"/><section>
    <title>int4x3</title>
<indexterm><primary>int4x3</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>int4x3</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 4, 3, int, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1ga1f8df31a88edf6ad690d4073c6457be9">glm::int4x3</link></computeroutput></para><para>

<para>integer matrix with 4 x 3 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1gabb2c02b95fe0b2d8bed065f23f6f07c9"/><section>
    <title>int4x4</title>
<indexterm><primary>int4x4</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>int4x4</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_structglm_1_1mat">mat</link>&lt; 4, 4, int, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25afc564c0029f5cc26a932512b034e2b51">highp</link> &gt; <link linkend="_group__gtx__compatibility_1gabb2c02b95fe0b2d8bed065f23f6f07c9">glm::int4x4</link></computeroutput></para><para>

<para>integer matrix with 4 x 4 components. (From GLM_GTX_compatibility extension) </para>
</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_group__gtx__compatibility_1ga3ab590fdd6c02c191c15aaa9e14c379a"/><section>
    <title>atan2()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>atan2</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>atan2</secondary></indexterm>
<computeroutput>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_structglm_1_1vec">vec</link>&lt; 2, T, Q &gt; glm::atan2 (const <link linkend="_structglm_1_1vec">vec</link>&lt; 2, T, Q &gt; &amp; x, const <link linkend="_structglm_1_1vec">vec</link>&lt; 2, T, Q &gt; &amp; y)</computeroutput></para><para>

<para>Arc tangent. Returns an angle whose tangent is y/x. The signs of x and y are used to determine what quadrant the angle is in. The range of values returned by this function is [-PI, PI]. Results are undefined if x and y are both 0. (From GLM_GTX_compatibility) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1gacf0f911948630c85bbe3b9fbc3f01436"/><section>
    <title>atan2()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>atan2</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>atan2</secondary></indexterm>
<computeroutput>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_structglm_1_1vec">vec</link>&lt; 3, T, Q &gt; glm::atan2 (const <link linkend="_structglm_1_1vec">vec</link>&lt; 3, T, Q &gt; &amp; x, const <link linkend="_structglm_1_1vec">vec</link>&lt; 3, T, Q &gt; &amp; y)</computeroutput></para><para>

<para>Arc tangent. Returns an angle whose tangent is y/x. The signs of x and y are used to determine what quadrant the angle is in. The range of values returned by this function is [-PI, PI]. Results are undefined if x and y are both 0. (From GLM_GTX_compatibility) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1gafb58675916a044cea99ba524a265d208"/><section>
    <title>atan2()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>atan2</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>atan2</secondary></indexterm>
<computeroutput>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_structglm_1_1vec">vec</link>&lt; 4, T, Q &gt; glm::atan2 (const <link linkend="_structglm_1_1vec">vec</link>&lt; 4, T, Q &gt; &amp; x, const <link linkend="_structglm_1_1vec">vec</link>&lt; 4, T, Q &gt; &amp; y)</computeroutput></para><para>

<para>Arc tangent. Returns an angle whose tangent is y/x. The signs of x and y are used to determine what quadrant the angle is in. The range of values returned by this function is [-PI, PI]. Results are undefined if x and y are both 0. (From GLM_GTX_compatibility) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1gac63011205bf6d0be82589dc56dd26708"/><section>
    <title>atan2()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>atan2</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>atan2</secondary></indexterm>
<computeroutput>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> T glm::atan2 (T x, T y)</computeroutput></para><para>

<para>Arc tangent. Returns an angle whose tangent is y/x. The signs of x and y are used to determine what quadrant the angle is in. The range of values returned by this function is [-PI, PI]. Results are undefined if x and y are both 0. (From GLM_GTX_compatibility) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1ga8cf0b192821187588cae9cb40f93fe05"/><section>
    <title>isfinite()<computeroutput>[1/5]</computeroutput></title>
<indexterm><primary>isfinite</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>isfinite</secondary></indexterm>
<computeroutput>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_structglm_1_1vec">vec</link>&lt; 1, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, Q &gt; glm::isfinite (const <link linkend="_structglm_1_1vec">vec</link>&lt; 1, T, Q &gt; &amp; x)</computeroutput></para><para>

<para>Test whether or not a scalar or each vector component is a finite value. (From GLM_GTX_compatibility) </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtx__compatibility_ga8cf0b192821187588cae9cb40f93fe05_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1ga1870a1f6872bfd5aa82f2281ea9e547c"/><section>
    <title>isfinite()<computeroutput>[2/5]</computeroutput></title>
<indexterm><primary>isfinite</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>isfinite</secondary></indexterm>
<computeroutput>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_structglm_1_1vec">vec</link>&lt; 2, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, Q &gt; glm::isfinite (const <link linkend="_structglm_1_1vec">vec</link>&lt; 2, T, Q &gt; &amp; x)</computeroutput></para><para>

<para>Test whether or not a scalar or each vector component is a finite value. (From GLM_GTX_compatibility) </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtx__compatibility_ga1870a1f6872bfd5aa82f2281ea9e547c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1ga5d1dfa1645b4eec47627b69f30594998"/><section>
    <title>isfinite()<computeroutput>[3/5]</computeroutput></title>
<indexterm><primary>isfinite</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>isfinite</secondary></indexterm>
<computeroutput>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_structglm_1_1vec">vec</link>&lt; 3, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, Q &gt; glm::isfinite (const <link linkend="_structglm_1_1vec">vec</link>&lt; 3, T, Q &gt; &amp; x)</computeroutput></para><para>

<para>Test whether or not a scalar or each vector component is a finite value. (From GLM_GTX_compatibility) </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtx__compatibility_ga5d1dfa1645b4eec47627b69f30594998_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1gafbee9c67dd32e68491786ae085927b48"/><section>
    <title>isfinite()<computeroutput>[4/5]</computeroutput></title>
<indexterm><primary>isfinite</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>isfinite</secondary></indexterm>
<computeroutput>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_structglm_1_1vec">vec</link>&lt; 4, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, Q &gt; glm::isfinite (const <link linkend="_structglm_1_1vec">vec</link>&lt; 4, T, Q &gt; &amp; x)</computeroutput></para><para>

<para>Test whether or not a scalar or each vector component is a finite value. (From GLM_GTX_compatibility) </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtx__compatibility_gafbee9c67dd32e68491786ae085927b48_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1gaf4b04dcd3526996d68c1bfe17bfc8657"/><section>
    <title>isfinite()<computeroutput>[5/5]</computeroutput></title>
<indexterm><primary>isfinite</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>isfinite</secondary></indexterm>
<computeroutput>template&lt;typename genType &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> glm::isfinite (genType const &amp; x)</computeroutput></para><para>

<para>Test whether or not a scalar or each vector component is a finite value. (From GLM_GTX_compatibility) </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtx__compatibility_gaf4b04dcd3526996d68c1bfe17bfc8657_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1ga8e8825e36ca18b7c2071a47a8bb7c5e9"/><section>
    <title>lerp()<computeroutput>[1/7]</computeroutput></title>
<indexterm><primary>lerp</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>lerp</secondary></indexterm>
<computeroutput>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_structglm_1_1vec">vec</link>&lt; 2, T, Q &gt; glm::lerp (const <link linkend="_structglm_1_1vec">vec</link>&lt; 2, T, Q &gt; &amp; x, const <link linkend="_structglm_1_1vec">vec</link>&lt; 2, T, Q &gt; &amp; y, const <link linkend="_structglm_1_1vec">vec</link>&lt; 2, T, Q &gt; &amp; a)</computeroutput></para><para>

<para>Returns the component-wise result of x * (1.0 - a) + y * a, i.e., the linear blend of x and y using vector a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility) </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtx__compatibility_ga8e8825e36ca18b7c2071a47a8bb7c5e9_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1ga708e3c823b3a11f1c312882a505912fc"/><section>
    <title>lerp()<computeroutput>[2/7]</computeroutput></title>
<indexterm><primary>lerp</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>lerp</secondary></indexterm>
<computeroutput>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_structglm_1_1vec">vec</link>&lt; 2, T, Q &gt; glm::lerp (const <link linkend="_structglm_1_1vec">vec</link>&lt; 2, T, Q &gt; &amp; x, const <link linkend="_structglm_1_1vec">vec</link>&lt; 2, T, Q &gt; &amp; y, T a)</computeroutput></para><para>

<para>Returns x * (1.0 - a) + y * a, i.e., the linear blend of x and y using the floating-point value a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility) </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtx__compatibility_ga708e3c823b3a11f1c312882a505912fc_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1gadff71b18ac8b6cdf4d837dd47d2a2281"/><section>
    <title>lerp()<computeroutput>[3/7]</computeroutput></title>
<indexterm><primary>lerp</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>lerp</secondary></indexterm>
<computeroutput>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_structglm_1_1vec">vec</link>&lt; 3, T, Q &gt; glm::lerp (const <link linkend="_structglm_1_1vec">vec</link>&lt; 3, T, Q &gt; &amp; x, const <link linkend="_structglm_1_1vec">vec</link>&lt; 3, T, Q &gt; &amp; y, const <link linkend="_structglm_1_1vec">vec</link>&lt; 3, T, Q &gt; &amp; a)</computeroutput></para><para>

<para>Returns the component-wise result of x * (1.0 - a) + y * a, i.e., the linear blend of x and y using vector a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility) </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtx__compatibility_gadff71b18ac8b6cdf4d837dd47d2a2281_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1ga71dffe7521b47a093536740a64f301e7"/><section>
    <title>lerp()<computeroutput>[4/7]</computeroutput></title>
<indexterm><primary>lerp</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>lerp</secondary></indexterm>
<computeroutput>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_structglm_1_1vec">vec</link>&lt; 3, T, Q &gt; glm::lerp (const <link linkend="_structglm_1_1vec">vec</link>&lt; 3, T, Q &gt; &amp; x, const <link linkend="_structglm_1_1vec">vec</link>&lt; 3, T, Q &gt; &amp; y, T a)</computeroutput></para><para>

<para>Returns x * (1.0 - a) + y * a, i.e., the linear blend of x and y using the floating-point value a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility) </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtx__compatibility_ga71dffe7521b47a093536740a64f301e7_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1gadc87fe20949b01472c2942cd4632500e"/><section>
    <title>lerp()<computeroutput>[5/7]</computeroutput></title>
<indexterm><primary>lerp</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>lerp</secondary></indexterm>
<computeroutput>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_structglm_1_1vec">vec</link>&lt; 4, T, Q &gt; glm::lerp (const <link linkend="_structglm_1_1vec">vec</link>&lt; 4, T, Q &gt; &amp; x, const <link linkend="_structglm_1_1vec">vec</link>&lt; 4, T, Q &gt; &amp; y, const <link linkend="_structglm_1_1vec">vec</link>&lt; 4, T, Q &gt; &amp; a)</computeroutput></para><para>

<para>Returns the component-wise result of x * (1.0 - a) + y * a, i.e., the linear blend of x and y using vector a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility) </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtx__compatibility_gadc87fe20949b01472c2942cd4632500e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1gaa17bba33feb1ff86aac3dc013a0340f2"/><section>
    <title>lerp()<computeroutput>[6/7]</computeroutput></title>
<indexterm><primary>lerp</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>lerp</secondary></indexterm>
<computeroutput>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_structglm_1_1vec">vec</link>&lt; 4, T, Q &gt; glm::lerp (const <link linkend="_structglm_1_1vec">vec</link>&lt; 4, T, Q &gt; &amp; x, const <link linkend="_structglm_1_1vec">vec</link>&lt; 4, T, Q &gt; &amp; y, T a)</computeroutput></para><para>

<para>Returns x * (1.0 - a) + y * a, i.e., the linear blend of x and y using the floating-point value a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility) </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtx__compatibility_gaa17bba33feb1ff86aac3dc013a0340f2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1ga5494ba3a95ea6594c86fc75236886864"/><section>
    <title>lerp()<computeroutput>[7/7]</computeroutput></title>
<indexterm><primary>lerp</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>lerp</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> T glm::lerp (T x, T y, T a)</computeroutput></para><para>

<para>Returns x * (1.0 - a) + y * a, i.e., the linear blend of x and y using the floating-point value a. The value for a is not restricted to the range [0, 1]. (From GLM_GTX_compatibility) </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtx__compatibility_ga5494ba3a95ea6594c86fc75236886864_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1gaea58b11db77ded09ce6926ea5a0dbb80"/><section>
    <title>saturate()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>saturate</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>saturate</secondary></indexterm>
<computeroutput>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_structglm_1_1vec">vec</link>&lt; 2, T, Q &gt; glm::saturate (const <link linkend="_structglm_1_1vec">vec</link>&lt; 2, T, Q &gt; &amp; x)</computeroutput></para><para>

<para>Returns clamp(x, 0, 1) for each component in x. (From GLM_GTX_compatibility) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1ga6256c2f699a6cf2d8912e637b333318a"/><section>
    <title>saturate()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>saturate</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>saturate</secondary></indexterm>
<computeroutput>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_structglm_1_1vec">vec</link>&lt; 3, T, Q &gt; glm::saturate (const <link linkend="_structglm_1_1vec">vec</link>&lt; 3, T, Q &gt; &amp; x)</computeroutput></para><para>

<para>Returns clamp(x, 0, 1) for each component in x. (From GLM_GTX_compatibility) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1gadc07371ed8d58b79f32191e7b0ebb17c"/><section>
    <title>saturate()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>saturate</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>saturate</secondary></indexterm>
<computeroutput>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_structglm_1_1vec">vec</link>&lt; 4, T, Q &gt; glm::saturate (const <link linkend="_structglm_1_1vec">vec</link>&lt; 4, T, Q &gt; &amp; x)</computeroutput></para><para>

<para>Returns clamp(x, 0, 1) for each component in x. (From GLM_GTX_compatibility) </para>
</para>
</section>
<anchor xml:id="_group__gtx__compatibility_1ga0fd09e616d122bc2ed9726682ffd44b7"/><section>
    <title>saturate()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>saturate</primary><secondary>GLM_GTX_compatibility</secondary></indexterm>
<indexterm><primary>GLM_GTX_compatibility</primary><secondary>saturate</secondary></indexterm>
<computeroutput>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> T glm::saturate (T x)</computeroutput></para><para>

<para>Returns clamp(x, 0, 1) for each component in x. (From GLM_GTX_compatibility) </para>
</para>
</section>
</section>
</section>
