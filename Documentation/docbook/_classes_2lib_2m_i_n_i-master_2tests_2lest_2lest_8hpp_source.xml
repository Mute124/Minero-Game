<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2m_i_n_i-master_2tests_2lest_2lest_8hpp_source" xml:lang="en-US">
<title>lest.hpp</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/mINI-master/tests/lest/lest.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Copyright&#32;2013-2018&#32;by&#32;Martin&#32;Moene</emphasis>
2 <emphasis role="comment">//</emphasis>
3 <emphasis role="comment">//&#32;lest&#32;is&#32;based&#32;on&#32;ideas&#32;by&#32;Kevlin&#32;Henney,&#32;see&#32;video&#32;at</emphasis>
4 <emphasis role="comment">//&#32;http://skillsmatter.com/podcast/agile-testing/kevlin-henney-rethinking-unit-testing-in-c-plus-plus</emphasis>
5 <emphasis role="comment">//</emphasis>
6 <emphasis role="comment">//&#32;Distributed&#32;under&#32;the&#32;Boost&#32;Software&#32;License,&#32;Version&#32;1.0.&#32;(See&#32;accompanying</emphasis>
7 <emphasis role="comment">//&#32;file&#32;LICENSE.txt&#32;or&#32;copy&#32;at&#32;http://www.boost.org/LICENSE_1_0.txt)</emphasis>
8 
9 <emphasis role="preprocessor">#ifndef&#32;LEST_LEST_HPP_INCLUDED</emphasis>
10 <emphasis role="preprocessor">#define&#32;LEST_LEST_HPP_INCLUDED</emphasis>
11 
12 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
13 <emphasis role="preprocessor">#include&#32;&lt;chrono&gt;</emphasis>
14 <emphasis role="preprocessor">#include&#32;&lt;functional&gt;</emphasis>
15 <emphasis role="preprocessor">#include&#32;&lt;iomanip&gt;</emphasis>
16 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
17 <emphasis role="preprocessor">#include&#32;&lt;iterator&gt;</emphasis>
18 <emphasis role="preprocessor">#include&#32;&lt;limits&gt;</emphasis>
19 <emphasis role="preprocessor">#include&#32;&lt;random&gt;</emphasis>
20 <emphasis role="preprocessor">#include&#32;&lt;sstream&gt;</emphasis>
21 <emphasis role="preprocessor">#include&#32;&lt;stdexcept&gt;</emphasis>
22 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
23 <emphasis role="preprocessor">#include&#32;&lt;set&gt;</emphasis>
24 <emphasis role="preprocessor">#include&#32;&lt;tuple&gt;</emphasis>
25 <emphasis role="preprocessor">#include&#32;&lt;typeinfo&gt;</emphasis>
26 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>
27 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>
28 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
29 
30 <emphasis role="preprocessor">#include&#32;&lt;cctype&gt;</emphasis>
31 <emphasis role="preprocessor">#include&#32;&lt;cmath&gt;</emphasis>
32 <emphasis role="preprocessor">#include&#32;&lt;cstddef&gt;</emphasis>
33 
34 <emphasis role="preprocessor">#ifdef&#32;__clang__</emphasis>
35 <emphasis role="preprocessor">#&#32;pragma&#32;clang&#32;diagnostic&#32;ignored&#32;&quot;-Waggregate-return&quot;</emphasis>
36 <emphasis role="preprocessor">#&#32;pragma&#32;clang&#32;diagnostic&#32;ignored&#32;&quot;-Wgnu-zero-variadic-macro-arguments&quot;</emphasis>
37 <emphasis role="preprocessor">#&#32;pragma&#32;clang&#32;diagnostic&#32;ignored&#32;&quot;-Woverloaded-shift-op-parentheses&quot;</emphasis>
38 <emphasis role="preprocessor">#&#32;pragma&#32;clang&#32;diagnostic&#32;ignored&#32;&quot;-Wunused-comparison&quot;</emphasis>
39 <emphasis role="preprocessor">#&#32;pragma&#32;clang&#32;diagnostic&#32;ignored&#32;&quot;-Wunused-value&quot;</emphasis>
40 <emphasis role="preprocessor">#elif&#32;defined&#32;__GNUC__</emphasis>
41 <emphasis role="preprocessor">#&#32;pragma&#32;GCC&#32;&#32;&#32;diagnostic&#32;ignored&#32;&quot;-Waggregate-return&quot;</emphasis>
42 <emphasis role="preprocessor">#&#32;pragma&#32;GCC&#32;&#32;&#32;diagnostic&#32;ignored&#32;&quot;-Wunused-value&quot;</emphasis>
43 <emphasis role="preprocessor">#endif</emphasis>
44 
45 <emphasis role="preprocessor">#ifdef&#32;&#32;_MSVC_LANG</emphasis>
46 <emphasis role="preprocessor">#&#32;define&#32;lest_CPP17_OR_GREATER_MS&#32;(&#32;&#32;_MSVC_LANG&#32;&gt;=&#32;201703L&#32;)</emphasis>
47 <emphasis role="preprocessor">#else</emphasis>
48 <emphasis role="preprocessor">#&#32;define&#32;lest_CPP17_OR_GREATER_MS&#32;&#32;&#32;&#32;0</emphasis>
49 <emphasis role="preprocessor">#endif</emphasis>
50 <emphasis role="preprocessor">#&#32;define&#32;lest_CPP17_OR_GREATER&#32;&#32;&#32;&#32;(&#32;__cplusplus&#32;&gt;=&#32;201703L&#32;||&#32;&#32;lest_CPP17_OR_GREATER_MS&#32;)</emphasis>
51 
52 <emphasis role="preprocessor">#define&#32;&#32;lest_VERSION&#32;&quot;1.32.0&quot;</emphasis>
53 
54 <emphasis role="preprocessor">#ifndef&#32;&#32;lest_FEATURE_AUTO_REGISTER</emphasis>
55 <emphasis role="preprocessor">#&#32;define&#32;lest_FEATURE_AUTO_REGISTER&#32;&#32;0</emphasis>
56 <emphasis role="preprocessor">#endif</emphasis>
57 
58 <emphasis role="preprocessor">#ifndef&#32;&#32;lest_FEATURE_COLOURISE</emphasis>
59 <emphasis role="preprocessor">#&#32;define&#32;lest_FEATURE_COLOURISE&#32;&#32;0</emphasis>
60 <emphasis role="preprocessor">#endif</emphasis>
61 
62 <emphasis role="preprocessor">#ifndef&#32;&#32;lest_FEATURE_LITERAL_SUFFIX</emphasis>
63 <emphasis role="preprocessor">#&#32;define&#32;lest_FEATURE_LITERAL_SUFFIX&#32;&#32;0</emphasis>
64 <emphasis role="preprocessor">#endif</emphasis>
65 
66 <emphasis role="preprocessor">#ifndef&#32;&#32;lest_FEATURE_REGEX_SEARCH</emphasis>
67 <emphasis role="preprocessor">#&#32;define&#32;lest_FEATURE_REGEX_SEARCH&#32;&#32;0</emphasis>
68 <emphasis role="preprocessor">#endif</emphasis>
69 
70 <emphasis role="preprocessor">#ifndef&#32;lest_FEATURE_TIME_PRECISION</emphasis>
71 <emphasis role="preprocessor">#define&#32;lest_FEATURE_TIME_PRECISION&#32;&#32;0</emphasis>
72 <emphasis role="preprocessor">#endif</emphasis>
73 
74 <emphasis role="preprocessor">#ifndef&#32;lest_FEATURE_WSTRING</emphasis>
75 <emphasis role="preprocessor">#define&#32;lest_FEATURE_WSTRING&#32;&#32;1</emphasis>
76 <emphasis role="preprocessor">#endif</emphasis>
77 
78 <emphasis role="preprocessor">#ifdef&#32;lest_FEATURE_RTTI</emphasis>
79 <emphasis role="preprocessor">#&#32;define&#32;lest__cpp_rtti&#32;&#32;lest_FEATURE_RTTI</emphasis>
80 <emphasis role="preprocessor">#elif&#32;defined(__cpp_rtti)</emphasis>
81 <emphasis role="preprocessor">#&#32;define&#32;lest__cpp_rtti&#32;&#32;__cpp_rtti</emphasis>
82 <emphasis role="preprocessor">#elif&#32;defined(__GXX_RTTI)&#32;||&#32;defined&#32;(_CPPRTTI)</emphasis>
83 <emphasis role="preprocessor">#&#32;define&#32;lest__cpp_rtti&#32;&#32;1</emphasis>
84 <emphasis role="preprocessor">#else</emphasis>
85 <emphasis role="preprocessor">#&#32;define&#32;lest__cpp_rtti&#32;&#32;0</emphasis>
86 <emphasis role="preprocessor">#endif</emphasis>
87 
88 <emphasis role="preprocessor">#if&#32;lest_FEATURE_REGEX_SEARCH</emphasis>
89 <emphasis role="preprocessor">#&#32;include&#32;&lt;regex&gt;</emphasis>
90 <emphasis role="preprocessor">#endif</emphasis>
91 
92 <emphasis role="preprocessor">#if&#32;!&#32;defined(&#32;lest_NO_SHORT_MACRO_NAMES&#32;)&#32;&amp;&amp;&#32;!&#32;defined(&#32;lest_NO_SHORT_ASSERTION_NAMES&#32;)</emphasis>
93 <emphasis role="preprocessor">#&#32;define&#32;MODULE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lest_MODULE</emphasis>
94 
95 <emphasis role="preprocessor">#&#32;if&#32;!&#32;lest_FEATURE_AUTO_REGISTER</emphasis>
96 <emphasis role="preprocessor">#&#32;&#32;define&#32;CASE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lest_CASE</emphasis>
97 <emphasis role="preprocessor">#&#32;&#32;define&#32;SCENARIO&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lest_SCENARIO</emphasis>
98 <emphasis role="preprocessor">#&#32;endif</emphasis>
99 
100 <emphasis role="preprocessor">#&#32;define&#32;SETUP&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lest_SETUP</emphasis>
101 <emphasis role="preprocessor">#&#32;define&#32;SECTION&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lest_SECTION</emphasis>
102 
103 <emphasis role="preprocessor">#&#32;define&#32;EXPECT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lest_EXPECT</emphasis>
104 <emphasis role="preprocessor">#&#32;define&#32;EXPECT_NOT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lest_EXPECT_NOT</emphasis>
105 <emphasis role="preprocessor">#&#32;define&#32;EXPECT_NO_THROW&#32;&#32;&#32;lest_EXPECT_NO_THROW</emphasis>
106 <emphasis role="preprocessor">#&#32;define&#32;EXPECT_THROWS&#32;&#32;&#32;&#32;&#32;lest_EXPECT_THROWS</emphasis>
107 <emphasis role="preprocessor">#&#32;define&#32;EXPECT_THROWS_AS&#32;&#32;lest_EXPECT_THROWS_AS</emphasis>
108 
109 <emphasis role="preprocessor">#&#32;define&#32;GIVEN&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lest_GIVEN</emphasis>
110 <emphasis role="preprocessor">#&#32;define&#32;WHEN&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lest_WHEN</emphasis>
111 <emphasis role="preprocessor">#&#32;define&#32;THEN&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lest_THEN</emphasis>
112 <emphasis role="preprocessor">#&#32;define&#32;AND_WHEN&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lest_AND_WHEN</emphasis>
113 <emphasis role="preprocessor">#&#32;define&#32;AND_THEN&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lest_AND_THEN</emphasis>
114 <emphasis role="preprocessor">#endif</emphasis>
115 
116 <emphasis role="preprocessor">#if&#32;lest_FEATURE_AUTO_REGISTER</emphasis>
117 <emphasis role="preprocessor">#define&#32;lest_SCENARIO(&#32;specification,&#32;sketch&#32;)&#32;&#32;lest_CASE(&#32;specification,&#32;lest::text(&quot;Scenario:&#32;&quot;)&#32;+&#32;sketch&#32;&#32;)</emphasis>
118 <emphasis role="preprocessor">#else</emphasis>
119 <emphasis role="preprocessor">#define&#32;lest_SCENARIO(&#32;sketch&#32;&#32;)&#32;&#32;lest_CASE(&#32;&#32;&#32;&#32;lest::text(&quot;Scenario:&#32;&quot;)&#32;+&#32;sketch&#32;&#32;)</emphasis>
120 <emphasis role="preprocessor">#endif</emphasis>
121 <emphasis role="preprocessor">#define&#32;lest_GIVEN(&#32;&#32;&#32;&#32;context&#32;)&#32;&#32;lest_SETUP(&#32;&#32;&#32;lest::text(&quot;&#32;&#32;&#32;Given:&#32;&quot;)&#32;+&#32;context&#32;)</emphasis>
122 <emphasis role="preprocessor">#define&#32;lest_WHEN(&#32;&#32;&#32;&#32;&#32;story&#32;&#32;&#32;)&#32;&#32;lest_SECTION(&#32;lest::text(&quot;&#32;&#32;&#32;&#32;When:&#32;&quot;)&#32;+&#32;story&#32;&#32;&#32;)</emphasis>
123 <emphasis role="preprocessor">#define&#32;lest_THEN(&#32;&#32;&#32;&#32;&#32;story&#32;&#32;&#32;)&#32;&#32;lest_SECTION(&#32;lest::text(&quot;&#32;&#32;&#32;&#32;Then:&#32;&quot;)&#32;+&#32;story&#32;&#32;&#32;)</emphasis>
124 <emphasis role="preprocessor">#define&#32;lest_AND_WHEN(&#32;story&#32;&#32;&#32;)&#32;&#32;lest_SECTION(&#32;lest::text(&quot;And&#32;then:&#32;&quot;)&#32;+&#32;story&#32;&#32;&#32;)</emphasis>
125 <emphasis role="preprocessor">#define&#32;lest_AND_THEN(&#32;story&#32;&#32;&#32;)&#32;&#32;lest_SECTION(&#32;lest::text(&quot;And&#32;then:&#32;&quot;)&#32;+&#32;story&#32;&#32;&#32;)</emphasis>
126 
127 <emphasis role="preprocessor">#if&#32;lest_FEATURE_AUTO_REGISTER</emphasis>
128 
129 <emphasis role="preprocessor">#&#32;define&#32;lest_CASE(&#32;specification,&#32;proposition&#32;)&#32;\</emphasis>
130 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static&#32;void&#32;lest_FUNCTION(&#32;lest::env&#32;&amp;&#32;);&#32;\</emphasis>
131 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;namespace&#32;{&#32;lest::add_test&#32;lest_REGISTRAR(&#32;specification,&#32;lest::test(&#32;proposition,&#32;lest_FUNCTION&#32;)&#32;);&#32;}&#32;\</emphasis>
132 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static&#32;void&#32;lest_FUNCTION(&#32;lest::env&#32;&amp;&#32;lest_env&#32;)</emphasis>
133 
134 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;lest_FEATURE_AUTO_REGISTER</emphasis>
135 
136 <emphasis role="preprocessor">#&#32;define&#32;lest_CASE(&#32;proposition,&#32;...&#32;)&#32;\</emphasis>
137 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;proposition,&#32;[__VA_ARGS__](&#32;lest::env&#32;&amp;&#32;lest_env&#32;)</emphasis>
138 
139 <emphasis role="preprocessor">#&#32;define&#32;lest_MODULE(&#32;specification,&#32;module&#32;)&#32;\</emphasis>
140 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;namespace&#32;{&#32;lest::add_module&#32;_(&#32;specification,&#32;module&#32;);&#32;}</emphasis>
141 
142 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//lest_FEATURE_AUTO_REGISTER</emphasis>
143 
144 <emphasis role="comment">//&#32;Implementation&#32;note:&#32;made&#32;lest__ctx_...&#32;a&#32;reference&#32;to&#32;correct&#32;lifetime&#32;for&#32;VC12&#32;(VS2013):</emphasis>
145 
146 <emphasis role="preprocessor">#define&#32;lest_SETUP(&#32;context&#32;)&#32;\</emphasis>
147 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;for&#32;(&#32;int&#32;lest__section&#32;=&#32;0,&#32;lest__count&#32;=&#32;1;&#32;lest__section&#32;&lt;&#32;lest__count;&#32;lest__count&#32;-=&#32;0==lest__section++&#32;)&#32;\</emphasis>
148 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(&#32;lest::ctx&#32;const&#32;&amp;&#32;lest__ctx_setup&#32;=&#32;lest::ctx(&#32;lest_env,&#32;context&#32;)&#32;)</emphasis>
149 
150 <emphasis role="preprocessor">#define&#32;lest_SECTION(&#32;proposition&#32;)&#32;\</emphasis>
151 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static&#32;int&#32;lest_UNIQUE(&#32;id&#32;)&#32;=&#32;0;&#32;\</emphasis>
152 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;if&#32;(&#32;lest::guard(&#32;lest_UNIQUE(&#32;id&#32;),&#32;lest__section,&#32;lest__count&#32;)&#32;)&#32;\</emphasis>
153 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for&#32;(&#32;int&#32;lest__section&#32;=&#32;0,&#32;lest__count&#32;=&#32;1;&#32;lest__section&#32;&lt;&#32;lest__count;&#32;lest__count&#32;-=&#32;0==lest__section++&#32;)&#32;\</emphasis>
154 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(&#32;lest::ctx&#32;const&#32;&amp;&#32;lest__ctx_section&#32;=&#32;lest::ctx(&#32;lest_env,&#32;proposition&#32;)&#32;)</emphasis>
155 
156 <emphasis role="preprocessor">#define&#32;lest_EXPECT(&#32;expr&#32;)&#32;\</emphasis>
157 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;do&#32;{&#32;\</emphasis>
158 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;try&#32;\</emphasis>
159 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;\</emphasis>
160 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(&#32;lest::result&#32;score&#32;=&#32;lest_DECOMPOSE(&#32;expr&#32;)&#32;)&#32;\</emphasis>
161 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;throw&#32;lest::failure{&#32;lest_LOCATION,&#32;#expr,&#32;score.decomposition&#32;};&#32;\</emphasis>
162 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else&#32;if&#32;(&#32;lest_env.pass()&#32;)&#32;\</emphasis>
163 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lest::report(&#32;lest_env.os,&#32;lest::passing{&#32;lest_LOCATION,&#32;#expr,&#32;score.decomposition&#32;},&#32;lest_env.context()&#32;);&#32;\</emphasis>
164 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\</emphasis>
165 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catch(...)&#32;\</emphasis>
166 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;\</emphasis>
167 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lest::inform(&#32;lest_LOCATION,&#32;#expr&#32;);&#32;\</emphasis>
168 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\</emphasis>
169 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;while&#32;(&#32;lest::is_false()&#32;)</emphasis>
170 
171 <emphasis role="preprocessor">#define&#32;lest_EXPECT_NOT(&#32;expr&#32;)&#32;\</emphasis>
172 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;do&#32;{&#32;\</emphasis>
173 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;try&#32;\</emphasis>
174 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;\</emphasis>
175 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(&#32;lest::result&#32;score&#32;=&#32;lest_DECOMPOSE(&#32;expr&#32;)&#32;)&#32;\</emphasis>
176 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;\</emphasis>
177 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(&#32;lest_env.pass()&#32;)&#32;\</emphasis>
178 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lest::report(&#32;lest_env.os,&#32;lest::passing{&#32;lest_LOCATION,&#32;lest::not_expr(&#32;#expr&#32;),&#32;lest::not_expr(&#32;score.decomposition&#32;)&#32;},&#32;lest_env.context()&#32;);&#32;\</emphasis>
179 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\</emphasis>
180 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else&#32;\</emphasis>
181 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;throw&#32;lest::failure{&#32;lest_LOCATION,&#32;lest::not_expr(&#32;#expr&#32;),&#32;lest::not_expr(&#32;score.decomposition&#32;)&#32;};&#32;\</emphasis>
182 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\</emphasis>
183 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catch(...)&#32;\</emphasis>
184 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;\</emphasis>
185 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lest::inform(&#32;lest_LOCATION,&#32;lest::not_expr(&#32;#expr&#32;)&#32;);&#32;\</emphasis>
186 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\</emphasis>
187 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;while&#32;(&#32;lest::is_false()&#32;)</emphasis>
188 
189 <emphasis role="preprocessor">#define&#32;lest_EXPECT_NO_THROW(&#32;expr&#32;)&#32;\</emphasis>
190 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;do&#32;\</emphasis>
191 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;\</emphasis>
192 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;try&#32;\</emphasis>
193 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;\</emphasis>
194 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expr;&#32;\</emphasis>
195 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\</emphasis>
196 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catch&#32;(...)&#32;\</emphasis>
197 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;\</emphasis>
198 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lest::inform(&#32;lest_LOCATION,&#32;#expr&#32;);&#32;\</emphasis>
199 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\</emphasis>
200 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(&#32;lest_env.pass()&#32;)&#32;\</emphasis>
201 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lest::report(&#32;lest_env.os,&#32;lest::got_none(&#32;lest_LOCATION,&#32;#expr&#32;),&#32;lest_env.context()&#32;);&#32;\</emphasis>
202 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;while&#32;(&#32;lest::is_false()&#32;)</emphasis>
203 
204 <emphasis role="preprocessor">#define&#32;lest_EXPECT_THROWS(&#32;expr&#32;)&#32;\</emphasis>
205 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;do&#32;\</emphasis>
206 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;\</emphasis>
207 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;try&#32;\</emphasis>
208 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;\</emphasis>
209 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expr;&#32;\</emphasis>
210 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\</emphasis>
211 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catch&#32;(...)&#32;\</emphasis>
212 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;\</emphasis>
213 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(&#32;lest_env.pass()&#32;)&#32;\</emphasis>
214 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lest::report(&#32;lest_env.os,&#32;lest::got{&#32;lest_LOCATION,&#32;#expr&#32;},&#32;lest_env.context()&#32;);&#32;\</emphasis>
215 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;break;&#32;\</emphasis>
216 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\</emphasis>
217 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;throw&#32;lest::expected{&#32;lest_LOCATION,&#32;#expr&#32;};&#32;\</emphasis>
218 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;\</emphasis>
219 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;while&#32;(&#32;lest::is_false()&#32;)</emphasis>
220 
221 <emphasis role="preprocessor">#define&#32;lest_EXPECT_THROWS_AS(&#32;expr,&#32;excpt&#32;)&#32;\</emphasis>
222 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;do&#32;\</emphasis>
223 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;\</emphasis>
224 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;try&#32;\</emphasis>
225 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;\</emphasis>
226 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expr;&#32;\</emphasis>
227 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;\</emphasis>
228 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catch&#32;(&#32;excpt&#32;&amp;&#32;)&#32;\</emphasis>
229 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;\</emphasis>
230 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(&#32;lest_env.pass()&#32;)&#32;\</emphasis>
231 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lest::report(&#32;lest_env.os,&#32;lest::got{&#32;lest_LOCATION,&#32;#expr,&#32;lest::of_type(&#32;#excpt&#32;)&#32;},&#32;lest_env.context()&#32;);&#32;\</emphasis>
232 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;break;&#32;\</emphasis>
233 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\</emphasis>
234 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;catch&#32;(...)&#32;{}&#32;\</emphasis>
235 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;throw&#32;lest::expected{&#32;lest_LOCATION,&#32;#expr,&#32;lest::of_type(&#32;#excpt&#32;)&#32;};&#32;\</emphasis>
236 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;\</emphasis>
237 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;while&#32;(&#32;lest::is_false()&#32;)</emphasis>
238 
239 <emphasis role="preprocessor">#define&#32;lest_UNIQUE(&#32;&#32;name&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;lest_UNIQUE2(&#32;name,&#32;__LINE__&#32;)</emphasis>
240 <emphasis role="preprocessor">#define&#32;lest_UNIQUE2(&#32;name,&#32;line&#32;)&#32;lest_UNIQUE3(&#32;name,&#32;line&#32;)</emphasis>
241 <emphasis role="preprocessor">#define&#32;lest_UNIQUE3(&#32;name,&#32;line&#32;)&#32;name&#32;##&#32;line</emphasis>
242 
243 <emphasis role="preprocessor">#define&#32;lest_DECOMPOSE(&#32;expr&#32;)&#32;(&#32;lest::expression_decomposer()&#32;&lt;&lt;&#32;expr&#32;)</emphasis>
244 
245 <emphasis role="preprocessor">#define&#32;lest_FUNCTION&#32;&#32;lest_UNIQUE(__lest_function__&#32;&#32;)</emphasis>
246 <emphasis role="preprocessor">#define&#32;lest_REGISTRAR&#32;lest_UNIQUE(__lest_registrar__&#32;)</emphasis>
247 
248 <emphasis role="preprocessor">#define&#32;lest_LOCATION&#32;&#32;lest::location{__FILE__,&#32;__LINE__}</emphasis>
249 
250 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacelest">lest</link>&#32;{
251 
252 <emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespacelest_1a087526c49c3b94040965055daf8be905">exit_max_value</link>&#32;=&#32;255;
253 
254 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;&#32;=&#32;std::string;
255 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacelest_1abadda50795fdee0bb844b52e73878699">texts</link>&#32;=&#32;std::vector&lt;text&gt;;
256 
257 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structlest_1_1env">env</link>;
258 
259 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structlest_1_1test">test</link>
260 {
261 &#32;&#32;&#32;&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;<link linkend="_structlest_1_1test_1af76aed4e5e3aa7904f721b198310b0d4">name</link>;
262 &#32;&#32;&#32;&#32;std::function&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>(&#32;<link linkend="_structlest_1_1env">env</link>&#32;&amp;&#32;)&gt;&#32;<link linkend="_structlest_1_1test_1a1397324fbefff3aee63fe4a1c83708c1">behaviour</link>;
263 
264 <emphasis role="preprocessor">#if&#32;lest_FEATURE_AUTO_REGISTER</emphasis>
265 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1test">test</link>(&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>,&#32;std::function&lt;<emphasis role="keywordtype">void</emphasis>(&#32;<link linkend="_structlest_1_1env">env</link>&#32;&amp;&#32;)&gt;&#32;<link linkend="_structlest_1_1test_1a1397324fbefff3aee63fe4a1c83708c1">behaviour</link>&#32;)
266 &#32;&#32;&#32;&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>(&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>&#32;),&#32;<link linkend="_structlest_1_1test_1a1397324fbefff3aee63fe4a1c83708c1">behaviour</link>(&#32;<link linkend="_structlest_1_1test_1a1397324fbefff3aee63fe4a1c83708c1">behaviour</link>&#32;)&#32;{}
267 <emphasis role="preprocessor">#endif</emphasis>
268 };
269 
270 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacelest_1a549374a5f82f5cbab341c0513e037875">tests</link>&#32;=&#32;std::vector&lt;test&gt;;
271 
272 <emphasis role="preprocessor">#if&#32;lest_FEATURE_AUTO_REGISTER</emphasis>
273 
274 <emphasis role="keyword">struct&#32;</emphasis>add_test
275 {
276 &#32;&#32;&#32;&#32;add_test(&#32;<link linkend="_namespacelest_1a549374a5f82f5cbab341c0513e037875">tests</link>&#32;&amp;&#32;specification,&#32;<link linkend="_structlest_1_1test">test</link>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;test_case&#32;)
277 &#32;&#32;&#32;&#32;{
278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;specification.push_back(&#32;test_case&#32;);
279 &#32;&#32;&#32;&#32;}
280 };
281 
282 <emphasis role="preprocessor">#else</emphasis>
283 
284 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structlest_1_1add__module">add_module</link>
285 {
286 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&#32;std::<emphasis role="keywordtype">size_t</emphasis>&#32;N&#32;&gt;
287 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1add__module_1ada4c1d593a3df3616777af1105b72d1e">add_module</link>(&#32;<link linkend="_namespacelest_1a549374a5f82f5cbab341c0513e037875">tests</link>&#32;&amp;&#32;specification,&#32;<link linkend="_structlest_1_1test">test</link>&#32;<emphasis role="keyword">const</emphasis>&#32;(&amp;<link linkend="_structmodule">module</link>)[N]&#32;)
288 &#32;&#32;&#32;&#32;{
289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;specification.insert(&#32;specification.end(),&#32;std::begin(&#32;<link linkend="_structmodule">module</link>&#32;),&#32;std::end(&#32;<link linkend="_structmodule">module</link>&#32;)&#32;);
290 &#32;&#32;&#32;&#32;}
291 };
292 
293 <emphasis role="preprocessor">#endif</emphasis>
294 
295 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structlest_1_1result">result</link>
296 {
297 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structlest_1_1result_1a6e8fdb1aba7cd1d3a6f8d2cc4c30e059">passed</link>;
298 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;<link linkend="_structlest_1_1result_1a66c7a6b58eca36d5815aed04617f8827">decomposition</link>;
299 
300 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;T&#32;&gt;
301 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1result_1a2dac67164ab68654849db0d29390a405">result</link>(&#32;T&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;passed_,&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;decomposition_)
302 &#32;&#32;&#32;&#32;:&#32;<link linkend="_structlest_1_1result_1a6e8fdb1aba7cd1d3a6f8d2cc4c30e059">passed</link>(&#32;!!passed_),&#32;<link linkend="_structlest_1_1result_1a66c7a6b58eca36d5815aed04617f8827">decomposition</link>(&#32;decomposition_)&#32;{}
303 
304 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!&#32;<link linkend="_structlest_1_1result_1a6e8fdb1aba7cd1d3a6f8d2cc4c30e059">passed</link>;&#32;}
305 };
306 
307 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structlest_1_1location">location</link>
308 {
309 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;<link linkend="_structlest_1_1location_1a0669b1e3f36ed5bc8146a3baab320fda">file</link>;
310 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_structlest_1_1location_1a1079097bf14533d5627d59ea8cb13278">line</link>;
311 
312 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1location_1ac5ea6dfca8810518530c3110bf912fb4">location</link>(&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;file_,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line_)
313 &#32;&#32;&#32;&#32;:&#32;<link linkend="_structlest_1_1location_1a0669b1e3f36ed5bc8146a3baab320fda">file</link>(&#32;file_),&#32;<link linkend="_structlest_1_1location_1a1079097bf14533d5627d59ea8cb13278">line</link>(&#32;line_)&#32;{}
314 };
315 
316 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structlest_1_1comment">comment</link>
317 {
318 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;<link linkend="_structlest_1_1comment_1a3e927dad11865e4d949a64e9c476aa9f">info</link>;
319 
320 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1comment_1a132624a6a613a191f5ec810956b35dd3">comment</link>(&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;info_)&#32;:&#32;<link linkend="_structlest_1_1comment_1a3e927dad11865e4d949a64e9c476aa9f">info</link>(&#32;info_)&#32;{}
321 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!&#32;<link linkend="_structlest_1_1comment_1a3e927dad11865e4d949a64e9c476aa9f">info</link>.empty();&#32;}
322 };
323 
324 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structlest_1_1message">message</link>&#32;:&#32;std::runtime_error
325 {
326 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;<link linkend="_structlest_1_1message_1aa08a208bf0221770819d5f925e6bd9ac">kind</link>;
327 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structlest_1_1location">location</link>&#32;<link linkend="_structlest_1_1message_1a99cd05ce3895d81c2aee87fbf5f8c4a1">where</link>;
328 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structlest_1_1comment">comment</link>&#32;<link linkend="_structlest_1_1message_1a908e4ea60f796ca42fd146d20c812d79">note</link>;
329 
330 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1message_1ae8a96cf2f98cba21757af6e47ec1a8b1">~message</link>()&#32;throw()&#32;{}&#32;&#32;&#32;<emphasis role="comment">//&#32;GCC&#32;4.6</emphasis>
331 
332 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1message_1a447d7c51e194795d52cab5546d2cfbf8">message</link>(&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;kind_,&#32;<link linkend="_structlest_1_1location">location</link>&#32;where_,&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;expr_,&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;note_&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>&#32;)
333 &#32;&#32;&#32;&#32;:&#32;<link linkend="_namespacestd">std</link>::runtime_error(&#32;expr_),&#32;<link linkend="_structlest_1_1message_1aa08a208bf0221770819d5f925e6bd9ac">kind</link>(&#32;kind_),&#32;<link linkend="_structlest_1_1message_1a99cd05ce3895d81c2aee87fbf5f8c4a1">where</link>(&#32;where_),&#32;<link linkend="_structnote">note</link>(&#32;note_)&#32;{}
334 };
335 
336 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structlest_1_1failure">failure</link>&#32;:&#32;<link linkend="_structlest_1_1message">message</link>
337 {
338 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1failure_1aa0b3bcff124ca8d5188f0c19f7535bdd">failure</link>(&#32;<link linkend="_structlest_1_1location">location</link>&#32;where_,&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;expr_,&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;decomposition_)
339 &#32;&#32;&#32;&#32;:&#32;<link linkend="_structlest_1_1message">message</link>{&#32;<emphasis role="stringliteral">&quot;failed&quot;</emphasis>,&#32;where_,&#32;expr_&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;for&#32;&quot;</emphasis>&#32;+&#32;decomposition_&#32;}&#32;{}
340 };
341 
342 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structlest_1_1success">success</link>&#32;:&#32;<link linkend="_structlest_1_1message">message</link>
343 {
344 <emphasis role="comment">//&#32;&#32;&#32;&#32;using&#32;message::message;&#32;&#32;&#32;//&#32;VC&#32;is&#32;lagging&#32;here</emphasis>
345 
346 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1success_1a1113ec147ba8152540496bb8ad943e59">success</link>(&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;kind_,&#32;<link linkend="_structlest_1_1location">location</link>&#32;where_,&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;expr_,&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;note_&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>&#32;)
347 &#32;&#32;&#32;&#32;:&#32;<link linkend="_structlest_1_1message">message</link>(&#32;kind_,&#32;where_,&#32;expr_,&#32;note_&#32;)&#32;{}
348 };
349 
350 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structlest_1_1passing">passing</link>&#32;:&#32;<link linkend="_structlest_1_1success">success</link>
351 {
352 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1passing_1a6fd75483326a8538e878354387433e54">passing</link>(&#32;<link linkend="_structlest_1_1location">location</link>&#32;where_,&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;expr_,&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;decomposition_&#32;)
353 &#32;&#32;&#32;&#32;:&#32;<link linkend="_structlest_1_1success">success</link>(&#32;<emphasis role="stringliteral">&quot;passed&quot;</emphasis>,&#32;where_,&#32;expr_&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;for&#32;&quot;</emphasis>&#32;+&#32;decomposition_)&#32;{}
354 };
355 
356 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structlest_1_1got__none">got_none</link>&#32;:&#32;<link linkend="_structlest_1_1success">success</link>
357 {
358 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1got__none_1a643940414a402ef3fa916596978e6e93">got_none</link>(&#32;<link linkend="_structlest_1_1location">location</link>&#32;where_,&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;expr_&#32;)
359 &#32;&#32;&#32;&#32;:&#32;<link linkend="_structlest_1_1success">success</link>(&#32;<emphasis role="stringliteral">&quot;passed:&#32;got&#32;no&#32;exception&quot;</emphasis>,&#32;where_,&#32;expr_&#32;)&#32;{}
360 };
361 
362 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structlest_1_1got">got</link>&#32;:&#32;<link linkend="_structlest_1_1success">success</link>
363 {
364 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1got_1a50914346a70c3a637e2deb569c302018">got</link>(&#32;<link linkend="_structlest_1_1location">location</link>&#32;where_,&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;expr_)
365 &#32;&#32;&#32;&#32;:&#32;<link linkend="_structlest_1_1success">success</link>(&#32;<emphasis role="stringliteral">&quot;passed:&#32;got&#32;exception&quot;</emphasis>,&#32;where_,&#32;expr_)&#32;{}
366 
367 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1got_1a6b9b4c6346ebb014035122f59710b626">got</link>(&#32;<link linkend="_structlest_1_1location">location</link>&#32;where_,&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;expr_,&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;excpt_)
368 &#32;&#32;&#32;&#32;:&#32;<link linkend="_structlest_1_1success">success</link>(&#32;<emphasis role="stringliteral">&quot;passed:&#32;got&#32;exception&#32;&quot;</emphasis>&#32;+&#32;excpt_,&#32;where_,&#32;expr_)&#32;{}
369 };
370 
371 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structlest_1_1expected">expected</link>&#32;:&#32;<link linkend="_structlest_1_1message">message</link>
372 {
373 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1expected_1a8cede096051c51710d2ec4681c6a659f">expected</link>(&#32;<link linkend="_structlest_1_1location">location</link>&#32;where_,&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;expr_,&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;excpt_&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>&#32;)
374 &#32;&#32;&#32;&#32;:&#32;<link linkend="_structlest_1_1message">message</link>{&#32;<emphasis role="stringliteral">&quot;failed:&#32;didn&apos;t&#32;get&#32;exception&quot;</emphasis>,&#32;where_,&#32;expr_,&#32;excpt_&#32;}&#32;{}
375 };
376 
377 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structlest_1_1unexpected">unexpected</link>&#32;:&#32;<link linkend="_structlest_1_1message">message</link>
378 {
379 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1unexpected_1ae5f2fa3aeac411c13f139d0448cdbbde">unexpected</link>(&#32;<link linkend="_structlest_1_1location">location</link>&#32;where_,&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;expr_,&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;note_&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>&#32;)
380 &#32;&#32;&#32;&#32;:&#32;<link linkend="_structlest_1_1message">message</link>{&#32;<emphasis role="stringliteral">&quot;failed:&#32;got&#32;unexpected&#32;exception&quot;</emphasis>,&#32;where_,&#32;expr_,&#32;note_&#32;}&#32;{}
381 };
382 
383 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structlest_1_1guard">guard</link>
384 {
385 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&amp;&#32;<link linkend="_structlest_1_1guard_1af48a6d852e90256acbf918c7400cced9">id</link>;
386 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;<link linkend="_structlest_1_1guard_1a0048cd288023223e8cd12b1e252c0b22">section</link>;
387 
388 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1guard_1ab8b03dbb0fee17679993b546cf6b856e">guard</link>(&#32;<emphasis role="keywordtype">int</emphasis>&#32;&amp;&#32;id_,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;section_,&#32;<emphasis role="keywordtype">int</emphasis>&#32;&amp;&#32;<link linkend="_structlest_1_1count">count</link>&#32;)
389 &#32;&#32;&#32;&#32;:&#32;<link linkend="__classes_2lib_2external_2glfw_2src_2cocoa__platform_8h_1ae52362b10d585638f5b96140e90f1b7a">id</link>(&#32;id_),&#32;<link linkend="_structlest_1_1guard_1a0048cd288023223e8cd12b1e252c0b22">section</link>(&#32;section_)
390 &#32;&#32;&#32;&#32;{
391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;<link linkend="_structlest_1_1guard_1a0048cd288023223e8cd12b1e252c0b22">section</link>&#32;==&#32;0&#32;)
392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">id</emphasis>&#32;=&#32;<link linkend="_structlest_1_1count">count</link>++&#32;-&#32;1;
393 &#32;&#32;&#32;&#32;}
394 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keywordtype">id</emphasis>&#32;==&#32;<link linkend="_structlest_1_1guard_1a0048cd288023223e8cd12b1e252c0b22">section</link>;&#32;}
395 };
396 
397 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classlest_1_1approx">approx</link>
398 {
399 <emphasis role="keyword">public</emphasis>:
400 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_classlest_1_1approx_1aaebe00770b8c45e7e1c17088558d568c">approx</link>&#32;(&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classlest_1_1approx_1a80b8b25727cf986bcb8d0941451a8d93">magnitude</link>&#32;)
401 &#32;&#32;&#32;&#32;:&#32;epsilon_&#32;&#32;{&#32;<link linkend="_namespacestd">std</link>::numeric_limits&lt;float&gt;::<link linkend="_classlest_1_1approx_1ac4f9a6f1b9b7bda50a2c94c8e852de19">epsilon</link>()&#32;*&#32;100&#32;}
402 &#32;&#32;&#32;&#32;,&#32;scale_&#32;&#32;&#32;&#32;{&#32;1.0&#32;}
403 &#32;&#32;&#32;&#32;,&#32;magnitude_{&#32;<link linkend="_classlest_1_1approx_1a80b8b25727cf986bcb8d0941451a8d93">magnitude</link>&#32;}&#32;{}
404 
405 &#32;&#32;&#32;&#32;<link linkend="_classlest_1_1approx_1adf066cb713bd914793bed399e7e16da1">approx</link>(&#32;<link linkend="_classlest_1_1approx">approx</link>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;other&#32;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
406 
407 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classlest_1_1approx">approx</link>&#32;<link linkend="_classlest_1_1approx_1a48fd156adb0b1518f5dce178f975c9f7">custom</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classlest_1_1approx">approx</link>(&#32;0&#32;);&#32;}
408 
409 &#32;&#32;&#32;&#32;<link linkend="_classlest_1_1approx">approx</link>&#32;<link linkend="_classlest_1_1approx_1a64a6c543ea82b2f5b899811cfc60d7a5">operator()</link>(&#32;<emphasis role="keywordtype">double</emphasis>&#32;new_magnitude&#32;)
410 &#32;&#32;&#32;&#32;{
411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classlest_1_1approx">approx</link>&#32;appr(&#32;new_magnitude&#32;);
412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;appr.<link linkend="_classlest_1_1approx_1ac4f9a6f1b9b7bda50a2c94c8e852de19">epsilon</link>(&#32;epsilon_&#32;);
413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;appr.<link linkend="_classlest_1_1approx_1a6f2bf39841eaf94667158e436a032a38">scale</link>&#32;&#32;(&#32;scale_&#32;&#32;&#32;);
414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;appr;
415 &#32;&#32;&#32;&#32;}
416 
417 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classlest_1_1approx_1a80b8b25727cf986bcb8d0941451a8d93">magnitude</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;magnitude_;&#32;}
418 
419 &#32;&#32;&#32;&#32;<link linkend="_classlest_1_1approx">approx</link>&#32;&amp;&#32;<link linkend="_classlest_1_1approx_1ac4f9a6f1b9b7bda50a2c94c8e852de19">epsilon</link>(&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classlest_1_1approx_1ac4f9a6f1b9b7bda50a2c94c8e852de19">epsilon</link>&#32;)&#32;{&#32;epsilon_&#32;=&#32;<link linkend="_classlest_1_1approx_1ac4f9a6f1b9b7bda50a2c94c8e852de19">epsilon</link>;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
420 &#32;&#32;&#32;&#32;<link linkend="_classlest_1_1approx">approx</link>&#32;&amp;&#32;<link linkend="_classlest_1_1approx_1a6f2bf39841eaf94667158e436a032a38">scale</link>&#32;&#32;(&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classlest_1_1approx_1a6f2bf39841eaf94667158e436a032a38">scale</link>&#32;&#32;&#32;)&#32;{&#32;scale_&#32;&#32;&#32;=&#32;<link linkend="_classlest_1_1approx_1a6f2bf39841eaf94667158e436a032a38">scale</link>;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
421 
422 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classlest_1_1approx_1ac01399f6beaabc76434468c89960657c">operator == </link>(&#32;<emphasis role="keywordtype">double</emphasis>&#32;lhs,&#32;<link linkend="_classlest_1_1approx">approx</link>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;rhs&#32;)
423 &#32;&#32;&#32;&#32;{
424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Thanks&#32;to&#32;Richard&#32;Harris&#32;for&#32;his&#32;help&#32;refining&#32;this&#32;formula.</emphasis>
425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::abs(&#32;lhs&#32;-&#32;rhs.magnitude_&#32;)&#32;&lt;&#32;rhs.epsilon_&#32;*&#32;(&#32;rhs.scale_&#32;+&#32;(std::min)(&#32;std::abs(&#32;lhs&#32;),&#32;std::abs(&#32;rhs.magnitude_&#32;)&#32;)&#32;);
426 &#32;&#32;&#32;&#32;}
427 
428 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classlest_1_1approx_1ac01399f6beaabc76434468c89960657c">operator == </link>(&#32;<link linkend="_classlest_1_1approx">approx</link>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;lhs,&#32;<emphasis role="keywordtype">double</emphasis>&#32;rhs&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;&#32;<link linkend="_classlest_1_1approx_1aaa9fc67e56b0325365b48561f4ba1e87">operator==</link>(&#32;rhs,&#32;lhs&#32;);&#32;}
429 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classlest_1_1approx_1a3e12b86aeee28e00f11ce6f886b8e2b6">operator != </link>(&#32;<emphasis role="keywordtype">double</emphasis>&#32;lhs,&#32;<link linkend="_classlest_1_1approx">approx</link>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;rhs&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!<link linkend="_classlest_1_1approx_1ac01399f6beaabc76434468c89960657c">operator==</link>(&#32;lhs,&#32;rhs&#32;);&#32;}
430 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classlest_1_1approx_1a3e12b86aeee28e00f11ce6f886b8e2b6">operator != </link>(&#32;<link linkend="_classlest_1_1approx">approx</link>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;lhs,&#32;<emphasis role="keywordtype">double</emphasis>&#32;rhs&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!<link linkend="_classlest_1_1approx_1ac01399f6beaabc76434468c89960657c">operator==</link>(&#32;rhs,&#32;lhs&#32;);&#32;}
431 
432 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classlest_1_1approx_1a704bec110ecb72dbece0dfccba161277">operator &lt;= </link>(&#32;<emphasis role="keywordtype">double</emphasis>&#32;lhs,&#32;<link linkend="_classlest_1_1approx">approx</link>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;rhs&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;&lt;&#32;rhs.magnitude_&#32;||&#32;lhs&#32;==&#32;rhs;&#32;}
433 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classlest_1_1approx_1a704bec110ecb72dbece0dfccba161277">operator &lt;= </link>(&#32;<link linkend="_classlest_1_1approx">approx</link>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;lhs,&#32;<emphasis role="keywordtype">double</emphasis>&#32;rhs&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.magnitude_&#32;&lt;&#32;rhs&#32;||&#32;lhs&#32;==&#32;rhs;&#32;}
434 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classlest_1_1approx_1a53da6c657ba7091bfe61410f0f66cb52">operator &gt;= </link>(&#32;<emphasis role="keywordtype">double</emphasis>&#32;lhs,&#32;<link linkend="_classlest_1_1approx">approx</link>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;rhs&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;&gt;&#32;rhs.magnitude_&#32;||&#32;lhs&#32;==&#32;rhs;&#32;}
435 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classlest_1_1approx_1a53da6c657ba7091bfe61410f0f66cb52">operator &gt;= </link>(&#32;<link linkend="_classlest_1_1approx">approx</link>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;lhs,&#32;<emphasis role="keywordtype">double</emphasis>&#32;rhs&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.magnitude_&#32;&gt;&#32;rhs&#32;||&#32;lhs&#32;==&#32;rhs;&#32;}
436 
437 <emphasis role="keyword">private</emphasis>:
438 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;epsilon_;
439 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;scale_;
440 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;magnitude_;
441 };
442 
443 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacelest_1aabbb03d17b6413a44e15633634cbcb2c">is_false</link>(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;}
444 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacelest_1a3f0ffea12c1607b0dfa015686a627b86">is_true</link>&#32;(&#32;<emphasis role="keywordtype">bool</emphasis>&#32;flag&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;&#32;flag;&#32;}
445 
446 <emphasis role="keyword">inline</emphasis>&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;<link linkend="_namespacelest_1a5db38037638e98c45b6747710cb352c9">not_expr</link>(&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;<link linkend="_structlest_1_1message">message</link>&#32;)
447 {
448 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;!&#32;(&#32;&quot;</emphasis>&#32;+&#32;<link linkend="_structlest_1_1message">message</link>&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;)&quot;</emphasis>;
449 }
450 
451 <emphasis role="keyword">inline</emphasis>&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;<link linkend="_namespacelest_1af915c2b8fec1c7060257957752836a06">with_message</link>(&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;<link linkend="_structlest_1_1message">message</link>&#32;)
452 {
453 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;with&#32;message&#32;\&quot;&quot;</emphasis>&#32;+&#32;<link linkend="_structlest_1_1message">message</link>&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&quot;</emphasis>;
454 }
455 
456 <emphasis role="keyword">inline</emphasis>&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;<link linkend="_namespacelest_1af095b334a6d23c1e9d0ab10d05cf7a4d">of_type</link>(&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;)
457 {
458 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;of&#32;type&#32;&quot;</emphasis>&#32;+&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>;
459 }
460 
461 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacelest_1aadbfd505723d1112999378364b6bd2a6">inform</link>(&#32;<link linkend="_structlest_1_1location">location</link>&#32;where,&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;expr&#32;)
462 {
463 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>
464 &#32;&#32;&#32;&#32;{
465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>;
466 &#32;&#32;&#32;&#32;}
467 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>(&#32;<link linkend="_structlest_1_1message">message</link>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;)
468 &#32;&#32;&#32;&#32;{
469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>;
470 &#32;&#32;&#32;&#32;}
471 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>(&#32;<link linkend="_classstd_1_1exception">std::exception</link>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;e&#32;)
472 &#32;&#32;&#32;&#32;{
473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<link linkend="_structlest_1_1unexpected">unexpected</link>{&#32;where,&#32;expr,&#32;<link linkend="_namespacelest_1af915c2b8fec1c7060257957752836a06">with_message</link>(&#32;e.what()&#32;)&#32;};&#32;\
474 &#32;&#32;&#32;&#32;}
475 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>(...)
476 &#32;&#32;&#32;&#32;{
477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<link linkend="_structlest_1_1unexpected">unexpected</link>{&#32;where,&#32;expr,&#32;<emphasis role="stringliteral">&quot;of&#32;unknown&#32;type&quot;</emphasis>&#32;};&#32;\
478 &#32;&#32;&#32;&#32;}
479 }
480 
481 <emphasis role="comment">//&#32;Expression&#32;decomposition:</emphasis>
482 
483 <emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;T&#32;&gt;
484 <emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespacelest_1abe74c3410c560bcd1cf83d11ee2fb127">make_value_string</link>(&#32;T&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;<link linkend="_classvalue">value</link>&#32;)&#32;-&gt;&#32;std::string;
485 
486 <emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;T&#32;&gt;
487 <emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespacelest_1ab3deb0f76da8e10ca19805e1dbba9303">make_memory_string</link>(&#32;T&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;item&#32;)&#32;-&gt;&#32;std::string;
488 
489 <emphasis role="preprocessor">#if&#32;lest_FEATURE_LITERAL_SUFFIX</emphasis>
490 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;<link linkend="_namespacelest_1ac816ce5c4c1370754e1086ae54ff970c">sfx</link>(&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;&#32;*&#32;txt&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;txt;&#32;}
491 <emphasis role="preprocessor">#else</emphasis>
492 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;<link linkend="_namespacelest_1ac816ce5c4c1370754e1086ae54ff970c">sfx</link>(&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;&#32;*&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;&#32;}
493 <emphasis role="preprocessor">#endif</emphasis>
494 
495 <emphasis role="keyword">inline</emphasis>&#32;std::string&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;std::nullptr_t&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;nullptr&quot;</emphasis>;&#32;}
496 <emphasis role="keyword">inline</emphasis>&#32;std::string&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;std::string&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;txt&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;\&quot;&quot;</emphasis>&#32;+&#32;txt&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&quot;</emphasis>&#32;;&#32;}
497 <emphasis role="preprocessor">#if&#32;lest_FEATURE_WSTRING</emphasis>
498 <emphasis role="keyword">inline</emphasis>&#32;std::string&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;std::wstring&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;txt&#32;)&#32;;
499 <emphasis role="preprocessor">#endif</emphasis>
500 
501 <emphasis role="keyword">inline</emphasis>&#32;std::string&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;<emphasis role="keywordtype">char</emphasis>&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;<emphasis role="keyword">const</emphasis>&#32;&#32;&#32;txt&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;txt&#32;?&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;std::string&#32;(&#32;txt&#32;)&#32;)&#32;:&#32;<emphasis role="stringliteral">&quot;{null&#32;string}&quot;</emphasis>;&#32;}
502 <emphasis role="keyword">inline</emphasis>&#32;std::string&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;<emphasis role="keywordtype">char</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;<emphasis role="keyword">const</emphasis>&#32;&#32;&#32;txt&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;txt&#32;?&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;std::string&#32;(&#32;txt&#32;)&#32;)&#32;:&#32;<emphasis role="stringliteral">&quot;{null&#32;string}&quot;</emphasis>;&#32;}
503 <emphasis role="preprocessor">#if&#32;lest_FEATURE_WSTRING</emphasis>
504 <emphasis role="keyword">inline</emphasis>&#32;std::string&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;<emphasis role="keywordtype">wchar_t</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;<emphasis role="keyword">const</emphasis>&#32;&#32;&#32;txt&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;txt&#32;?&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;std::wstring(&#32;txt&#32;)&#32;)&#32;:&#32;<emphasis role="stringliteral">&quot;{null&#32;string}&quot;</emphasis>;&#32;}
505 <emphasis role="keyword">inline</emphasis>&#32;std::string&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;<emphasis role="keywordtype">wchar_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;<emphasis role="keyword">const</emphasis>&#32;&#32;&#32;txt&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;txt&#32;?&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;std::wstring(&#32;txt&#32;)&#32;)&#32;:&#32;<emphasis role="stringliteral">&quot;{null&#32;string}&quot;</emphasis>;&#32;}
506 <emphasis role="preprocessor">#endif</emphasis>
507 
508 <emphasis role="keyword">inline</emphasis>&#32;std::string&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flag&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;flag&#32;?&#32;<emphasis role="stringliteral">&quot;true&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;false&quot;</emphasis>;&#32;}
509 
510 <emphasis role="keyword">inline</emphasis>&#32;std::string&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;&#32;&#32;<emphasis role="keywordtype">signed</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelest_1abe74c3410c560bcd1cf83d11ee2fb127">make_value_string</link>(&#32;<link linkend="_classvalue">value</link>&#32;)&#32;;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
511 <emphasis role="keyword">inline</emphasis>&#32;std::string&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelest_1abe74c3410c560bcd1cf83d11ee2fb127">make_value_string</link>(&#32;<link linkend="_classvalue">value</link>&#32;)&#32;+&#32;<link linkend="_namespacelest_1ac816ce5c4c1370754e1086ae54ff970c">sfx</link>(<emphasis role="stringliteral">&quot;u&quot;</emphasis>&#32;&#32;);&#32;}
512 <emphasis role="keyword">inline</emphasis>&#32;std::string&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;&#32;&#32;<emphasis role="keywordtype">signed</emphasis>&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelest_1abe74c3410c560bcd1cf83d11ee2fb127">make_value_string</link>(&#32;<link linkend="_classvalue">value</link>&#32;)&#32;;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
513 <emphasis role="keyword">inline</emphasis>&#32;std::string&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelest_1abe74c3410c560bcd1cf83d11ee2fb127">make_value_string</link>(&#32;<link linkend="_classvalue">value</link>&#32;)&#32;+&#32;<link linkend="_namespacelest_1ac816ce5c4c1370754e1086ae54ff970c">sfx</link>(<emphasis role="stringliteral">&quot;u&quot;</emphasis>&#32;&#32;);&#32;}
514 <emphasis role="keyword">inline</emphasis>&#32;std::string&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;&#32;&#32;<emphasis role="keywordtype">signed</emphasis>&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelest_1abe74c3410c560bcd1cf83d11ee2fb127">make_value_string</link>(&#32;<link linkend="_classvalue">value</link>&#32;)&#32;+&#32;<link linkend="_namespacelest_1ac816ce5c4c1370754e1086ae54ff970c">sfx</link>(<emphasis role="stringliteral">&quot;l&quot;</emphasis>&#32;&#32;);&#32;}
515 <emphasis role="keyword">inline</emphasis>&#32;std::string&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelest_1abe74c3410c560bcd1cf83d11ee2fb127">make_value_string</link>(&#32;<link linkend="_classvalue">value</link>&#32;)&#32;+&#32;<link linkend="_namespacelest_1ac816ce5c4c1370754e1086ae54ff970c">sfx</link>(<emphasis role="stringliteral">&quot;ul&quot;</emphasis>&#32;);&#32;}
516 <emphasis role="keyword">inline</emphasis>&#32;std::string&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;&#32;&#32;<emphasis role="keywordtype">signed</emphasis>&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;&#32;&#32;<link linkend="_classvalue">value</link>&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelest_1abe74c3410c560bcd1cf83d11ee2fb127">make_value_string</link>(&#32;<link linkend="_classvalue">value</link>&#32;)&#32;+&#32;<link linkend="_namespacelest_1ac816ce5c4c1370754e1086ae54ff970c">sfx</link>(<emphasis role="stringliteral">&quot;ll&quot;</emphasis>&#32;);&#32;}
517 <emphasis role="keyword">inline</emphasis>&#32;std::string&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;&#32;&#32;<link linkend="_classvalue">value</link>&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelest_1abe74c3410c560bcd1cf83d11ee2fb127">make_value_string</link>(&#32;<link linkend="_classvalue">value</link>&#32;)&#32;+&#32;<link linkend="_namespacelest_1ac816ce5c4c1370754e1086ae54ff970c">sfx</link>(<emphasis role="stringliteral">&quot;ull&quot;</emphasis>);&#32;}
518 <emphasis role="keyword">inline</emphasis>&#32;std::string&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelest_1abe74c3410c560bcd1cf83d11ee2fb127">make_value_string</link>(&#32;<link linkend="_classvalue">value</link>&#32;)&#32;;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
519 <emphasis role="keyword">inline</emphasis>&#32;std::string&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelest_1abe74c3410c560bcd1cf83d11ee2fb127">make_value_string</link>(&#32;<link linkend="_classvalue">value</link>&#32;)&#32;+&#32;<link linkend="_namespacelest_1ac816ce5c4c1370754e1086ae54ff970c">sfx</link>(<emphasis role="stringliteral">&quot;f&quot;</emphasis>&#32;&#32;);&#32;}
520 
521 <emphasis role="keyword">inline</emphasis>&#32;std::string&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;&#32;&#32;<emphasis role="keywordtype">signed</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;chr&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(&#32;chr&#32;)&#32;);&#32;}
522 <emphasis role="keyword">inline</emphasis>&#32;std::string&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;chr&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(&#32;chr&#32;)&#32;);&#32;}
523 
524 <emphasis role="keyword">inline</emphasis>&#32;std::string&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;chr&#32;)
525 {
526 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>Tr&#32;{&#32;<emphasis role="keywordtype">char</emphasis>&#32;chr;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;str;&#32;}&#32;<link linkend="_classtable">table</link>[]&#32;=
527 &#32;&#32;&#32;&#32;{
528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="charliteral">&apos;\r&apos;</emphasis>,&#32;<emphasis role="stringliteral">&quot;&apos;\\r&apos;&quot;</emphasis>&#32;},&#32;{<emphasis role="charliteral">&apos;\f&apos;</emphasis>,&#32;<emphasis role="stringliteral">&quot;&apos;\\f&apos;&quot;</emphasis>&#32;},
529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="charliteral">&apos;\n&apos;</emphasis>,&#32;<emphasis role="stringliteral">&quot;&apos;\\n&apos;&quot;</emphasis>&#32;},&#32;{<emphasis role="charliteral">&apos;\t&apos;</emphasis>,&#32;<emphasis role="stringliteral">&quot;&apos;\\t&apos;&quot;</emphasis>&#32;},
530 &#32;&#32;&#32;&#32;};
531 
532 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(&#32;<emphasis role="keyword">auto</emphasis>&#32;tr&#32;:&#32;<link linkend="_classtable">table</link>&#32;)
533 &#32;&#32;&#32;&#32;{
534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;chr&#32;==&#32;tr.chr&#32;)
535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;tr.str;
536 &#32;&#32;&#32;&#32;}
537 
538 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;unprintable&#32;=&#32;[](<emphasis role="keywordtype">char</emphasis>&#32;c){&#32;<emphasis role="keywordflow">return</emphasis>&#32;0&#32;&lt;=&#32;c&#32;&amp;&amp;&#32;c&#32;&lt;&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>;&#32;};
539 
540 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;unprintable(&#32;chr&#32;&#32;)
541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(&#32;chr&#32;)&#32;)
542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;\&apos;&quot;</emphasis>&#32;+&#32;std::string(&#32;1,&#32;chr&#32;)&#32;+&#32;<emphasis role="stringliteral">&quot;\&apos;&quot;</emphasis>&#32;;
543 }
544 
545 <emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;T&#32;&gt;
546 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structlest_1_1is__streamable">is_streamable</link>
547 {
548 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;U&#32;&gt;
549 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_structlest_1_1is__streamable_1a2b55ea7d715bc068ed1acb6d9d8bb5e8">test</link>(&#32;<emphasis role="keywordtype">int</emphasis>&#32;)&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(&#32;std::declval&lt;std::ostream&#32;&amp;&gt;()&#32;&lt;&lt;&#32;std::declval&lt;U&gt;(),&#32;std::true_type()&#32;);
550 
551 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;&gt;
552 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_structlest_1_1is__streamable_1a1efc58d7549e0e88a4d4fc3717467c63">test</link>(&#32;...&#32;)&#32;-&gt;&#32;std::false_type;
553 
554 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
555 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;<link linkend="_classvalue">value</link>&#32;=&#32;std::is_same&lt;&#32;decltype(&#32;test&lt;T&gt;(0)&#32;),&#32;std::true_type&#32;&gt;<link linkend="_classvalue">::value</link>&#32;};
556 <emphasis role="preprocessor">#else</emphasis>
557 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classvalue">value</link>&#32;=&#32;std::is_same&lt;&#32;decltype(&#32;test&lt;T&gt;(0)&#32;),&#32;std::true_type&#32;&gt;<link linkend="_classvalue">::value</link>;
558 <emphasis role="preprocessor">#endif</emphasis>
559 };
560 
561 <emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;T&#32;&gt;
562 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structlest_1_1is__container">is_container</link>
563 {
564 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;U&#32;&gt;
565 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_structlest_1_1is__container_1a529292f3e3652a85f3fde8bd1fb5c29a">test</link>(&#32;<emphasis role="keywordtype">int</emphasis>&#32;)&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(&#32;std::declval&lt;U&gt;().begin()&#32;==&#32;std::declval&lt;U&gt;().end(),&#32;std::true_type()&#32;);
566 
567 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;&gt;
568 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_structlest_1_1is__container_1ab115a3c257812e1b095434db34b405ae">test</link>(&#32;...&#32;)&#32;-&gt;&#32;std::false_type;
569 
570 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
571 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;<link linkend="_classvalue">value</link>&#32;=&#32;std::is_same&lt;&#32;decltype(&#32;test&lt;T&gt;(0)&#32;),&#32;std::true_type&#32;&gt;<link linkend="_classvalue">::value</link>&#32;};
572 <emphasis role="preprocessor">#else</emphasis>
573 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classvalue">value</link>&#32;=&#32;std::is_same&lt;&#32;decltype(&#32;test&lt;T&gt;(0)&#32;),&#32;std::true_type&#32;&gt;<link linkend="_classvalue">::value</link>;
574 <emphasis role="preprocessor">#endif</emphasis>
575 };
576 
577 <emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;R&#32;&gt;
578 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacelest_1a802f92ea2ee2351555de479c17047175">ForEnum</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;&#32;std::is_enum&lt;T&gt;::value,&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
579 
580 <emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;R&#32;&gt;
581 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacelest_1a9db1cd982a17f8bd5fd50e14594916d5">ForNonEnum</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;&#32;!&#32;std::is_enum&lt;T&gt;::value,&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
582 
583 <emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;R&#32;&gt;
584 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacelest_1a09808b01733cf4b53229fac360cd8a8a">ForStreamable</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;&#32;is_streamable&lt;T&gt;::value,&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
585 
586 <emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;R&#32;&gt;
587 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacelest_1ae1ce65f69ae31c5b6d147a7b7b9182df">ForNonStreamable</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;&#32;!&#32;is_streamable&lt;T&gt;::value,&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
588 
589 <emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;R&#32;&gt;
590 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacelest_1a307d6b6cc95fec22d9f5b29ad98efa2a">ForContainer</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;&#32;is_container&lt;T&gt;::value,&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
591 
592 <emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;R&#32;&gt;
593 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacelest_1a879fc3440ead743afa8d9ce103c7d01a">ForNonContainer</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;&#32;!&#32;is_container&lt;T&gt;::value,&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
594 
595 <emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;T&#32;&gt;
596 <emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespacelest_1ab9f4ba47437f4693769fbaf1b5ecac40">make_enum_string</link>(&#32;T&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;)&#32;-&gt;&#32;<link linkend="_namespacelest_1a9db1cd982a17f8bd5fd50e14594916d5">ForNonEnum&lt;T, std::string&gt;</link>
597 {
598 <emphasis role="preprocessor">#if&#32;lest__cpp_rtti</emphasis>
599 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>(<emphasis role="stringliteral">&quot;[type:&#32;&quot;</emphasis>)&#32;+&#32;<emphasis role="keyword">typeid</emphasis>(T).<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>()&#32;+&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>;
600 <emphasis role="preprocessor">#else</emphasis>
601 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>(<emphasis role="stringliteral">&quot;[type:&#32;(no&#32;RTTI)]&quot;</emphasis>);
602 <emphasis role="preprocessor">#endif</emphasis>
603 }
604 
605 <emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;T&#32;&gt;
606 <emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespacelest_1ab9f4ba47437f4693769fbaf1b5ecac40">make_enum_string</link>(&#32;T&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;item&#32;)&#32;-&gt;&#32;ForEnum&lt;T,&#32;std::string&gt;
607 {
608 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;std::underlying_type&lt;T&gt;::type<emphasis role="keyword">&gt;</emphasis>(&#32;item&#32;)&#32;);
609 }
610 
611 <emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;T&#32;&gt;
612 <emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespacelest_1a2921e3170302d0dc18c1c2bc33d6ec29">make_string</link>(&#32;T&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;item&#32;)&#32;-&gt;&#32;<link linkend="_namespacelest_1ae1ce65f69ae31c5b6d147a7b7b9182df">ForNonStreamable&lt;T, std::string&gt;</link>
613 {
614 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelest_1ab9f4ba47437f4693769fbaf1b5ecac40">make_enum_string</link>(&#32;item&#32;);
615 }
616 
617 <emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;T&#32;&gt;
618 <emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespacelest_1a2921e3170302d0dc18c1c2bc33d6ec29">make_string</link>(&#32;T&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;item&#32;)&#32;-&gt;&#32;ForStreamable&lt;T,&#32;std::string&gt;
619 {
620 &#32;&#32;&#32;&#32;std::ostringstream&#32;os;&#32;os&#32;&lt;&lt;&#32;item;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os.str();
621 }
622 
623 <emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;T&#32;&gt;
624 <emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespacelest_1a2921e3170302d0dc18c1c2bc33d6ec29">make_string</link>(&#32;T&#32;*&#32;p&#32;)-&gt;&#32;std::string
625 {
626 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;p&#32;)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelest_1ab3deb0f76da8e10ca19805e1dbba9303">make_memory_string</link>(&#32;p&#32;);
627 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;NULL&quot;</emphasis>;
628 }
629 
630 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;C,&#32;<emphasis role="keyword">typename</emphasis>&#32;R&gt;
631 <emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespacelest_1a2921e3170302d0dc18c1c2bc33d6ec29">make_string</link>(&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link>&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link>::*&#32;p&#32;)&#32;-&gt;&#32;<link linkend="_namespacestd">std</link>::<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string</link>
632 {
633 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;p&#32;)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelest_1ab3deb0f76da8e10ca19805e1dbba9303">make_memory_string</link>(&#32;p&#32;);
634 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;NULL&quot;</emphasis>;
635 }
636 
637 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;T2&gt;
638 <emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespacelest_1a2921e3170302d0dc18c1c2bc33d6ec29">make_string</link>(&#32;std::pair&lt;T1,T2&gt;&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;pair&#32;)&#32;-&gt;&#32;std::string
639 {
640 &#32;&#32;&#32;&#32;std::ostringstream&#32;oss;
641 &#32;&#32;&#32;&#32;oss&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;{&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;pair.first&#32;)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;pair.second&#32;)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;}&quot;</emphasis>;
642 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;oss.str();
643 }
644 
645 <emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;TU,&#32;std::<emphasis role="keywordtype">size_t</emphasis>&#32;N&#32;&gt;
646 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structlest_1_1make__tuple__string">make_tuple_string</link>
647 {
648 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_structlest_1_1make__tuple__string_1a800ce9a4483a3f9a9a4fa43bdf6ef08e">make</link>(&#32;TU&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;tuple&#32;)
649 &#32;&#32;&#32;&#32;{
650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ostringstream&#32;os;
651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;std::get&lt;N&#32;-&#32;1&gt;(&#32;tuple&#32;)&#32;)&#32;&lt;&lt;&#32;(&#32;N&#32;&lt;&#32;std::tuple_size&lt;TU&gt;::value&#32;?&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>:&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>);
652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structlest_1_1make__tuple__string_1a800ce9a4483a3f9a9a4fa43bdf6ef08e">make_tuple_string&lt;TU, N - 1&gt;::make</link>(&#32;tuple&#32;)&#32;+&#32;os.str();
653 &#32;&#32;&#32;&#32;}
654 };
655 
656 <emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;TU&#32;&gt;
657 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structlest_1_1make__tuple__string">make_tuple_string</link>&lt;TU,&#32;0&gt;
658 {
659 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;<link linkend="_structlest_1_1make__tuple__string_3_01_t_u_00_010_01_4_1a22321591d1b6cdaa16dea07ec193d5f2">make</link>(&#32;TU&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;&#32;}
660 };
661 
662 <emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;...TS&#32;&gt;
663 <emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespacelest_1a2921e3170302d0dc18c1c2bc33d6ec29">make_string</link>(&#32;std::tuple&lt;TS...&gt;&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;tuple&#32;)&#32;-&gt;&#32;std::string
664 {
665 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;{&#32;&quot;</emphasis>&#32;+&#32;<link linkend="_structlest_1_1make__tuple__string">make_tuple_string</link>&lt;std::tuple&lt;TS...&gt;,&#32;<emphasis role="keyword">sizeof</emphasis>...(TS)&gt;::make(&#32;tuple&#32;)&#32;+&#32;<emphasis role="stringliteral">&quot;}&quot;</emphasis>;
666 }
667 
668 <emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;T&#32;&gt;
669 <emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;T&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;item&#32;)&#32;-&gt;&#32;<link linkend="_namespacelest_1a879fc3440ead743afa8d9ce103c7d01a">ForNonContainer&lt;T, std::string&gt;</link>
670 {
671 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelest_1a2921e3170302d0dc18c1c2bc33d6ec29">make_string</link>(&#32;item&#32;);
672 }
673 
674 <emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;C&#32;&gt;
675 <emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;cont&#32;)&#32;-&gt;&#32;<link linkend="_namespacelest_1a307d6b6cc95fec22d9f5b29ad98efa2a">ForContainer&lt;C, std::string&gt;</link>
676 {
677 &#32;&#32;&#32;&#32;std::ostringstream&#32;os;
678 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;{&#32;&quot;</emphasis>;
679 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;:&#32;cont&#32;)
680 &#32;&#32;&#32;&#32;{
681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>;
682 &#32;&#32;&#32;&#32;}
683 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;}&quot;</emphasis>;
684 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os.str();
685 }
686 
687 <emphasis role="preprocessor">#if&#32;lest_FEATURE_WSTRING</emphasis>
688 <emphasis role="keyword">inline</emphasis>
689 <emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;std::wstring&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;txt&#32;)&#32;-&gt;&#32;std::string
690 {
691 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_structlest_1_1result">result</link>;&#32;<link linkend="_structlest_1_1result">result</link>.reserve(&#32;txt.size()&#32;);
692 
693 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;&#32;chr&#32;:&#32;txt&#32;)
694 &#32;&#32;&#32;&#32;{
695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structlest_1_1result">result</link>&#32;+=&#32;chr&#32;&lt;=&#32;0xff&#32;?&#32;static_cast&lt;char&gt;(&#32;chr&#32;)&#32;:&#32;<emphasis role="charliteral">&apos;?&apos;</emphasis>;
696 &#32;&#32;&#32;&#32;}
697 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;<link linkend="_structlest_1_1result">result</link>&#32;);
698 }
699 <emphasis role="preprocessor">#endif</emphasis>
700 
701 <emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;T&#32;&gt;
702 <emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespacelest_1abe74c3410c560bcd1cf83d11ee2fb127">make_value_string</link>(&#32;T&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;<link linkend="_classvalue">value</link>&#32;)&#32;-&gt;&#32;std::string
703 {
704 &#32;&#32;&#32;&#32;std::ostringstream&#32;os;&#32;os&#32;&lt;&lt;&#32;<link linkend="_classvalue">value</link>;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os.str();
705 }
706 
707 <emphasis role="keyword">inline</emphasis>
708 <emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespacelest_1ab3deb0f76da8e10ca19805e1dbba9303">make_memory_string</link>(&#32;<emphasis role="keywordtype">void</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;item,&#32;std::size_t&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>&#32;)&#32;-&gt;&#32;std::string
709 {
710 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;reverse&#32;order&#32;for&#32;little&#32;endian&#32;architectures:</emphasis>
711 
712 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;is_little_endian&#32;=&#32;[]
713 &#32;&#32;&#32;&#32;{
714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">union&#32;</emphasis>U&#32;{&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;<emphasis role="keywordtype">char</emphasis>&#32;c[&#32;<emphasis role="keyword">sizeof</emphasis>(int)&#32;];&#32;};
715 
716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1&#32;!=&#32;U{}.c[&#32;<emphasis role="keyword">sizeof</emphasis>(int)&#32;-&#32;1&#32;];
717 &#32;&#32;&#32;&#32;};
718 
719 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>&#32;),&#32;inc&#32;=&#32;1;
720 
721 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;is_little_endian()&#32;)&#32;{&#32;i&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>&#32;-&#32;1;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>&#32;=&#32;inc&#32;=&#32;-1;&#32;}
722 
723 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;bytes&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const&#32;</emphasis>*<emphasis role="keyword">&gt;</emphasis>(&#32;item&#32;);
724 
725 &#32;&#32;&#32;&#32;std::ostringstream&#32;os;
726 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;0x&quot;</emphasis>&#32;&lt;&lt;&#32;std::setfill(&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;)&#32;&lt;&lt;&#32;std::hex;
727 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(&#32;;&#32;i&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>;&#32;i&#32;+=&#32;inc&#32;)
728 &#32;&#32;&#32;&#32;{
729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;std::setw(2)&#32;&lt;&lt;&#32;static_cast&lt;unsigned&gt;(&#32;bytes[i]&#32;)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
730 &#32;&#32;&#32;&#32;}
731 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os.str();
732 }
733 
734 <emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;T&#32;&gt;
735 <emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespacelest_1ab3deb0f76da8e10ca19805e1dbba9303">make_memory_string</link>(&#32;T&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;item&#32;)&#32;-&gt;&#32;std::string
736 {
737 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelest_1ab3deb0f76da8e10ca19805e1dbba9303">make_memory_string</link>(&#32;&amp;item,&#32;<emphasis role="keyword">sizeof</emphasis>&#32;item&#32;);
738 }
739 
740 <emphasis role="keyword">inline</emphasis>
741 <emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;<link linkend="_classlest_1_1approx">approx</link>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;appr&#32;)&#32;-&gt;&#32;std::string
742 {
743 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;appr.magnitude()&#32;);
744 }
745 
746 <emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;R&#32;&gt;
747 <emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;lhs,&#32;std::string&#32;op,&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;rhs&#32;)&#32;-&gt;&#32;std::string
748 {
749 &#32;&#32;&#32;&#32;std::ostringstream&#32;os;&#32;os&#32;&lt;&lt;&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;lhs&#32;)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;op&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;rhs&#32;);&#32;<emphasis role="keywordflow">return</emphasis>&#32;os.str();
750 }
751 
752 <emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;L&#32;&gt;
753 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structlest_1_1expression__lhs">expression_lhs</link>
754 {
755 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>&#32;<link linkend="_structlest_1_1expression__lhs_1af60218e629ab9421516aa898a1fd4caf">lhs</link>;
756 
757 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1expression__lhs_1a04ec36cda3377f2017328befdcfcbc20">expression_lhs</link>(&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>&#32;lhs_)&#32;:&#32;<link linkend="_structlest_1_1expression__lhs_1af60218e629ab9421516aa898a1fd4caf">lhs</link>(&#32;lhs_)&#32;{}
758 
759 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="_structlest_1_1result">result</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structlest_1_1result">result</link>{&#32;!!<link linkend="_structlest_1_1expression__lhs_1af60218e629ab9421516aa898a1fd4caf">lhs</link>,&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;<link linkend="_structlest_1_1expression__lhs_1af60218e629ab9421516aa898a1fd4caf">lhs</link>&#32;)&#32;};&#32;}
760 
761 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;R&#32;&gt;&#32;<link linkend="_structlest_1_1result">result</link>&#32;<link linkend="_structlest_1_1expression__lhs_1a2453df870fe882d7e4b9fb621aec23a2">operator==</link>(&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;rhs&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structlest_1_1result">result</link>{&#32;<link linkend="_structlest_1_1expression__lhs_1af60218e629ab9421516aa898a1fd4caf">lhs</link>&#32;==&#32;rhs,&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;<link linkend="_structlest_1_1expression__lhs_1af60218e629ab9421516aa898a1fd4caf">lhs</link>,&#32;<emphasis role="stringliteral">&quot;==&quot;</emphasis>,&#32;rhs&#32;)&#32;};&#32;}
762 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;R&#32;&gt;&#32;<link linkend="_structlest_1_1result">result</link>&#32;<link linkend="_structlest_1_1expression__lhs_1a3bd1461b4fe7e2a87272aed89ed223b1">operator!=</link>(&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;rhs&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structlest_1_1result">result</link>{&#32;<link linkend="_structlest_1_1expression__lhs_1af60218e629ab9421516aa898a1fd4caf">lhs</link>&#32;!=&#32;rhs,&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;<link linkend="_structlest_1_1expression__lhs_1af60218e629ab9421516aa898a1fd4caf">lhs</link>,&#32;<emphasis role="stringliteral">&quot;!=&quot;</emphasis>,&#32;rhs&#32;)&#32;};&#32;}
763 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;R&#32;&gt;&#32;<link linkend="_structlest_1_1result">result</link>&#32;<link linkend="_structlest_1_1expression__lhs_1a9a1b3f82d387b25516655ddf20666b9a">operator&lt; </link>(&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;rhs&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structlest_1_1result">result</link>{&#32;<link linkend="_structlest_1_1expression__lhs_1af60218e629ab9421516aa898a1fd4caf">lhs</link>&#32;&lt;&#32;&#32;rhs,&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;<link linkend="_structlest_1_1expression__lhs_1af60218e629ab9421516aa898a1fd4caf">lhs</link>,&#32;<emphasis role="stringliteral">&quot;&lt;&quot;</emphasis>&#32;,&#32;rhs&#32;)&#32;};&#32;}
764 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;R&#32;&gt;&#32;<link linkend="_structlest_1_1result">result</link>&#32;<link linkend="_structlest_1_1expression__lhs_1a2e73a01261ae74a33e8ef1574445e516">operator&lt;=</link>(&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;rhs&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structlest_1_1result">result</link>{&#32;<link linkend="_structlest_1_1expression__lhs_1af60218e629ab9421516aa898a1fd4caf">lhs</link>&#32;&lt;=&#32;rhs,&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;<link linkend="_structlest_1_1expression__lhs_1af60218e629ab9421516aa898a1fd4caf">lhs</link>,&#32;<emphasis role="stringliteral">&quot;&lt;=&quot;</emphasis>,&#32;rhs&#32;)&#32;};&#32;}
765 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;R&#32;&gt;&#32;<link linkend="_structlest_1_1result">result</link>&#32;<link linkend="_structlest_1_1expression__lhs_1a58850f0e48906a2e419a7526eadccc77">operator&gt; </link>(&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;rhs&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structlest_1_1result">result</link>{&#32;<link linkend="_structlest_1_1expression__lhs_1af60218e629ab9421516aa898a1fd4caf">lhs</link>&#32;&gt;&#32;&#32;rhs,&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;<link linkend="_structlest_1_1expression__lhs_1af60218e629ab9421516aa898a1fd4caf">lhs</link>,&#32;<emphasis role="stringliteral">&quot;&gt;&quot;</emphasis>&#32;,&#32;rhs&#32;)&#32;};&#32;}
766 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;R&#32;&gt;&#32;<link linkend="_structlest_1_1result">result</link>&#32;<link linkend="_structlest_1_1expression__lhs_1ae28f80110827836868f2d7fcda955174">operator&gt;=</link>(&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;rhs&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structlest_1_1result">result</link>{&#32;<link linkend="_structlest_1_1expression__lhs_1af60218e629ab9421516aa898a1fd4caf">lhs</link>&#32;&gt;=&#32;rhs,&#32;<link linkend="_namespacelest_1a7ae4043b547864d64ad4320775da0fdb">to_string</link>(&#32;<link linkend="_structlest_1_1expression__lhs_1af60218e629ab9421516aa898a1fd4caf">lhs</link>,&#32;<emphasis role="stringliteral">&quot;&gt;=&quot;</emphasis>,&#32;rhs&#32;)&#32;};&#32;}
767 };
768 
769 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structlest_1_1expression__decomposer">expression_decomposer</link>
770 {
771 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;L&gt;
772 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1expression__lhs">expression_lhs&lt;L const &amp;&gt;</link>&#32;<link linkend="_structlest_1_1expression__decomposer_1ae43765797974d9d176b35d61215ba32c">operator&lt;&lt; </link>(&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;operand&#32;)
773 &#32;&#32;&#32;&#32;{
774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structlest_1_1expression__lhs">expression_lhs&lt;L const &amp;&gt;</link>(&#32;operand&#32;);
775 &#32;&#32;&#32;&#32;}
776 };
777 
778 <emphasis role="comment">//&#32;Reporter:</emphasis>
779 
780 <emphasis role="preprocessor">#if&#32;lest_FEATURE_COLOURISE</emphasis>
781 
782 <emphasis role="keyword">inline</emphasis>&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;red&#32;&#32;(&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;words&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;\033[1;31m&quot;</emphasis>&#32;+&#32;words&#32;+&#32;<emphasis role="stringliteral">&quot;\033[0m&quot;</emphasis>;&#32;}
783 <emphasis role="keyword">inline</emphasis>&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aef30e4e3dccbffce99b7509d5366faef">green</link>(&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;words&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;\033[1;32m&quot;</emphasis>&#32;+&#32;words&#32;+&#32;<emphasis role="stringliteral">&quot;\033[0m&quot;</emphasis>;&#32;}
784 <emphasis role="keyword">inline</emphasis>&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;gray&#32;(&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;words&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;\033[1;30m&quot;</emphasis>&#32;+&#32;words&#32;+&#32;<emphasis role="stringliteral">&quot;\033[0m&quot;</emphasis>;&#32;}
785 
786 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;starts_with(&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;words,&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;with&#32;)
787 {
788 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0&#32;==&#32;words.find(&#32;with&#32;);
789 }
790 
791 <emphasis role="keyword">inline</emphasis>&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;words,&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;from,&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;to&#32;)
792 {
793 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos&#32;=&#32;words.find(&#32;from&#32;);
794 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pos&#32;==&#32;std::string::npos&#32;?&#32;words&#32;:&#32;words.replace(&#32;pos,&#32;from.length(),&#32;to&#32;&#32;);
795 }
796 
797 <emphasis role="keyword">inline</emphasis>&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;colour(&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;words&#32;)
798 {
799 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;(&#32;starts_with(&#32;words,&#32;<emphasis role="stringliteral">&quot;failed&quot;</emphasis>&#32;)&#32;)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(&#32;words,&#32;<emphasis role="stringliteral">&quot;failed&quot;</emphasis>,&#32;red&#32;&#32;(&#32;<emphasis role="stringliteral">&quot;failed&quot;</emphasis>&#32;)&#32;);
800 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;starts_with(&#32;words,&#32;<emphasis role="stringliteral">&quot;passed&quot;</emphasis>&#32;)&#32;)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(&#32;words,&#32;<emphasis role="stringliteral">&quot;passed&quot;</emphasis>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aef30e4e3dccbffce99b7509d5366faef">green</link>(&#32;<emphasis role="stringliteral">&quot;passed&quot;</emphasis>&#32;)&#32;);
801 
802 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(&#32;words,&#32;<emphasis role="stringliteral">&quot;for&quot;</emphasis>,&#32;gray(&#32;<emphasis role="stringliteral">&quot;for&quot;</emphasis>&#32;)&#32;);
803 }
804 
805 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_cout(&#32;std::ostream&#32;&amp;&#32;os&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;os&#32;==&#32;&amp;std::cout;&#32;}
806 
807 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_namespacelest_1a9caf47f37e450e7ae4bac7a519b074f2">colourise</link>
808 {
809 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;words;
810 
811 &#32;&#32;&#32;&#32;<link linkend="_namespacelest_1a9caf47f37e450e7ae4bac7a519b074f2">colourise</link>(&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;words&#32;)
812 &#32;&#32;&#32;&#32;:&#32;words(&#32;words&#32;)&#32;{}
813 
814 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;only&#32;colourise&#32;for&#32;std::cout,&#32;not&#32;for&#32;a&#32;stringstream&#32;as&#32;used&#32;in&#32;tests:</emphasis>
815 
816 &#32;&#32;&#32;&#32;std::ostream&#32;&amp;&#32;operator()(&#32;std::ostream&#32;&amp;&#32;os&#32;)<emphasis role="keyword">&#32;const</emphasis>
817 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_cout(&#32;os&#32;)&#32;?&#32;os&#32;&lt;&lt;&#32;colour(&#32;words&#32;)&#32;:&#32;os&#32;&lt;&lt;&#32;words;
819 &#32;&#32;&#32;&#32;}
820 };
821 
822 <emphasis role="keyword">inline</emphasis>&#32;std::ostream&#32;&amp;&#32;<link linkend="_namespacelest_1aab7017a6e4f2ab6b263db6e762ae951f">operator&lt;&lt;</link>(&#32;std::ostream&#32;&amp;&#32;os,&#32;<link linkend="_namespacelest_1a9caf47f37e450e7ae4bac7a519b074f2">colourise</link>&#32;words&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;words(&#32;os&#32;);&#32;}
823 <emphasis role="preprocessor">#else</emphasis>
824 <emphasis role="keyword">inline</emphasis>&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;<link linkend="_namespacelest_1a9caf47f37e450e7ae4bac7a519b074f2">colourise</link>(&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;words&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;words;&#32;}
825 <emphasis role="preprocessor">#endif</emphasis>
826 
827 <emphasis role="keyword">inline</emphasis>&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;<link linkend="_namespacelest_1a7d802100fe140961785074f81eaabe56">pluralise</link>(&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;word,&#32;<emphasis role="keywordtype">int</emphasis>&#32;n&#32;)
828 {
829 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;n&#32;==&#32;1&#32;?&#32;word&#32;:&#32;word&#32;+&#32;<emphasis role="stringliteral">&quot;s&quot;</emphasis>;
830 }
831 
832 <emphasis role="keyword">inline</emphasis>&#32;std::ostream&#32;&amp;&#32;<link linkend="_namespacelest_1aab7017a6e4f2ab6b263db6e762ae951f">operator&lt;&lt;</link>(&#32;std::ostream&#32;&amp;&#32;os,&#32;<link linkend="_structlest_1_1comment">comment</link>&#32;<link linkend="_structnote">note</link>&#32;)
833 {
834 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os&#32;&lt;&lt;&#32;(<link linkend="_structnote">note</link>&#32;?&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;+&#32;<link linkend="_structnote">note</link>.info&#32;:&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>&#32;);
835 }
836 
837 <emphasis role="keyword">inline</emphasis>&#32;std::ostream&#32;&amp;&#32;<link linkend="_namespacelest_1aab7017a6e4f2ab6b263db6e762ae951f">operator&lt;&lt;</link>(&#32;std::ostream&#32;&amp;&#32;os,&#32;<link linkend="_structlest_1_1location">location</link>&#32;where&#32;)
838 {
839 <emphasis role="preprocessor">#ifdef&#32;__GNUG__</emphasis>
840 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os&#32;&lt;&lt;&#32;where.<link linkend="_structlest_1_1location_1a0669b1e3f36ed5bc8146a3baab320fda">file</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;:&quot;</emphasis>&#32;&lt;&lt;&#32;where.<link linkend="_structlest_1_1location_1a1079097bf14533d5627d59ea8cb13278">line</link>;
841 <emphasis role="preprocessor">#else</emphasis>
842 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os&#32;&lt;&lt;&#32;where.<link linkend="_structlest_1_1location_1a0669b1e3f36ed5bc8146a3baab320fda">file</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;(&quot;</emphasis>&#32;&lt;&lt;&#32;where.<link linkend="_structlest_1_1location_1a1079097bf14533d5627d59ea8cb13278">line</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>;
843 <emphasis role="preprocessor">#endif</emphasis>
844 }
845 
846 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacelest_1acd1d811cf4ab4bebd681f007789ca0d7">report</link>(&#32;std::ostream&#32;&amp;&#32;os,&#32;<link linkend="_structlest_1_1message">message</link>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;e,&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;<link linkend="_structlest_1_1test">test</link>&#32;)
847 {
848 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;e.where&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacelest_1a9caf47f37e450e7ae4bac7a519b074f2">colourise</link>(&#32;e.kind&#32;)&#32;&lt;&lt;&#32;e.note&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_structlest_1_1test">test</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacelest_1a9caf47f37e450e7ae4bac7a519b074f2">colourise</link>(&#32;e.what()&#32;)&#32;&lt;&lt;&#32;std::endl;
849 }
850 
851 <emphasis role="comment">//&#32;Test&#32;runner:</emphasis>
852 
853 <emphasis role="preprocessor">#if&#32;lest_FEATURE_REGEX_SEARCH</emphasis>
854 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacelest_1a415c4dec169b665859b5e08719d9227e">search</link>(&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;re,&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;line&#32;)
855 &#32;&#32;&#32;&#32;{
856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::regex_search(&#32;line,&#32;std::regex(&#32;re&#32;)&#32;);
857 &#32;&#32;&#32;&#32;}
858 <emphasis role="preprocessor">#else</emphasis>
859 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacelest_1a415c4dec169b665859b5e08719d9227e">search</link>(&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;part,&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;line&#32;)
860 &#32;&#32;&#32;&#32;{
861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;case_insensitive_equal&#32;=&#32;[](&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>,&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>&#32;)
862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;tolower(&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>&#32;)&#32;==&#32;tolower(&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>&#32;);
864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
865 
866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a5a4354dff231af6d172e1f24befda7f2">std::search</link>(
867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;line.begin(),&#32;line.end(),
868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;part.begin(),&#32;part.end(),&#32;case_insensitive_equal&#32;)&#32;!=&#32;line.end();
869 &#32;&#32;&#32;&#32;}
870 <emphasis role="preprocessor">#endif</emphasis>
871 
872 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacelest_1a39aadbe27e6b271818d115e3e5c62bd1">match</link>(&#32;<link linkend="_namespacelest_1abadda50795fdee0bb844b52e73878699">texts</link>&#32;whats,&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;line&#32;)
873 {
874 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;&#32;what&#32;:&#32;whats&#32;)
875 &#32;&#32;&#32;&#32;{
876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;<link linkend="_namespacelest_1a415c4dec169b665859b5e08719d9227e">search</link>(&#32;what,&#32;line&#32;)&#32;)
877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
878 &#32;&#32;&#32;&#32;}
879 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
880 }
881 
882 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacelest_1a1edb8bb9cf6c9793b8626cd80dcf1904">select</link>(&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>,&#32;<link linkend="_namespacelest_1abadda50795fdee0bb844b52e73878699">texts</link>&#32;include&#32;)
883 {
884 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;none&#32;=&#32;[](&#32;<link linkend="_namespacelest_1abadda50795fdee0bb844b52e73878699">texts</link>&#32;args&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;args.size()&#32;==&#32;0;&#32;};
885 
886 <emphasis role="preprocessor">#if&#32;lest_FEATURE_REGEX_SEARCH</emphasis>
887 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;hidden&#32;=&#32;[](&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;arg&#32;){&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelest_1a39aadbe27e6b271818d115e3e5c62bd1">match</link>(&#32;{&#32;<emphasis role="stringliteral">&quot;\\[\\..*&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;\\[hide\\]&quot;</emphasis>&#32;},&#32;arg&#32;);&#32;};
888 <emphasis role="preprocessor">#else</emphasis>
889 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;hidden&#32;=&#32;[](&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;arg&#32;){&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelest_1a39aadbe27e6b271818d115e3e5c62bd1">match</link>(&#32;{&#32;<emphasis role="stringliteral">&quot;[.&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;[hide]&quot;</emphasis>&#32;},&#32;arg&#32;);&#32;};
890 <emphasis role="preprocessor">#endif</emphasis>
891 
892 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;none(&#32;include&#32;)&#32;)
893 &#32;&#32;&#32;&#32;{
894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!&#32;hidden(&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>&#32;);
895 &#32;&#32;&#32;&#32;}
896 
897 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;any&#32;=&#32;<emphasis role="keyword">false</emphasis>;
898 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(&#32;<emphasis role="keyword">auto</emphasis>&#32;pos&#32;=&#32;include.rbegin();&#32;pos&#32;!=&#32;include.rend();&#32;++pos&#32;)
899 &#32;&#32;&#32;&#32;{
900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;&#32;part&#32;=&#32;*pos;
901 
902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;part&#32;==&#32;<emphasis role="stringliteral">&quot;@&quot;</emphasis>&#32;||&#32;part&#32;==&#32;<emphasis role="stringliteral">&quot;*&quot;</emphasis>&#32;)
903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
904 
905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;<link linkend="_namespacelest_1a415c4dec169b665859b5e08719d9227e">search</link>(&#32;part,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>&#32;)&#32;)
906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
907 
908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;<emphasis role="charliteral">&apos;!&apos;</emphasis>&#32;==&#32;part[0]&#32;)
909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;any&#32;=&#32;<emphasis role="keyword">true</emphasis>;
911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;<link linkend="_namespacelest_1a415c4dec169b665859b5e08719d9227e">search</link>(&#32;part.substr(1),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>&#32;)&#32;)
912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;any&#32;=&#32;<emphasis role="keyword">false</emphasis>;
917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
918 &#32;&#32;&#32;&#32;}
919 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;any&#32;&amp;&amp;&#32;!&#32;hidden(&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>&#32;);
920 }
921 
922 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespacelest_1adb2d8ba32435d9eb40a998058baee6d8">indefinite</link>(&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespacerepeat">repeat</link>&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacerepeat">repeat</link>&#32;==&#32;-1;&#32;}
923 
924 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacelest_1a2b94dd1224b91163e866aa57a2bd7fa6">seed_t</link>&#32;=&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;long;
925 
926 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structlest_1_1options">options</link>
927 {
928 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structlest_1_1options_1abf1e6ef5963653d66f18cdb7fabd7fca">help</link>&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
929 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structlest_1_1options_1a454dcc0c370524cc4b5dfc58d093613b">abort</link>&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
930 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structlest_1_1count">count</link>&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
931 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structlest_1_1options_1ade5dfc96f74049762d9b225765f7c6cd">list</link>&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
932 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structlest_1_1options_1a80a3955c190d09a12a2b6890bf845b53">tags</link>&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
933 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structtime">time</link>&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
934 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structlest_1_1options_1a287c38ac0ab24d9557b9b65876f9eb5c">pass</link>&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
935 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structlest_1_1options_1a36e053f86b09eaf174c9b38755b7c48c">lexical</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
936 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacerandom">random</link>&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
937 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structlest_1_1options_1a886c686c975f266a999973dcdca70fde">verbose</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
938 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespaceversion">version</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
939 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;<link linkend="_namespacerepeat">repeat</link>&#32;&#32;=&#32;1;
940 &#32;&#32;&#32;&#32;<link linkend="_namespacelest_1a2b94dd1224b91163e866aa57a2bd7fa6">seed_t</link>&#32;<link linkend="_structlest_1_1options_1a76d0397ce33b739ca831d9a0cf4ea988">seed</link>&#32;&#32;=&#32;0;
941 };
942 
943 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structlest_1_1env">env</link>
944 {
945 &#32;&#32;&#32;&#32;std::ostream&#32;&amp;&#32;<link linkend="_structlest_1_1env_1a2a81429411d1dbd2f115822e0297ddd2">os</link>;
946 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1options">options</link>&#32;<link linkend="_structlest_1_1env_1a0fa453907b8408a471db4fed3a924cd0">opt</link>;
947 &#32;&#32;&#32;&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;<link linkend="_structlest_1_1env_1ad2f16ca64d91af164785a613bd660fad">testing</link>;
948 &#32;&#32;&#32;&#32;std::vector&lt;&#32;text&#32;&gt;&#32;<link linkend="_structlest_1_1env_1ab7c661f3d942292eed180dcdf8925481">ctx</link>;
949 
950 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1env_1a541cd16fb4fcc4c2356622ca859d4a58">env</link>(&#32;std::ostream&#32;&amp;&#32;out,&#32;<link linkend="_structlest_1_1options">options</link>&#32;<link linkend="_structoption">option</link>&#32;)
951 &#32;&#32;&#32;&#32;:&#32;<link linkend="_structlest_1_1env_1a2a81429411d1dbd2f115822e0297ddd2">os</link>(&#32;out&#32;),&#32;<link linkend="_structlest_1_1env_1a0fa453907b8408a471db4fed3a924cd0">opt</link>(&#32;<link linkend="_structoption">option</link>&#32;),&#32;<link linkend="_structlest_1_1env_1ad2f16ca64d91af164785a613bd660fad">testing</link>(),&#32;<link linkend="_structlest_1_1ctx">ctx</link>()&#32;{}
952 
953 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1env">env</link>&#32;&amp;&#32;<link linkend="_structlest_1_1env_1ac417230a6716436bb4b27a64688cb4ed">operator()</link>(&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;<link linkend="_structlest_1_1test">test</link>&#32;)
954 &#32;&#32;&#32;&#32;{
955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structlest_1_1env_1ad2f16ca64d91af164785a613bd660fad">testing</link>&#32;=&#32;<link linkend="_structlest_1_1test">test</link>;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
956 &#32;&#32;&#32;&#32;}
957 
958 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structlest_1_1env_1a0bb8b8d6216926d462f54092435c2300">abort</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structlest_1_1env_1a0fa453907b8408a471db4fed3a924cd0">opt</link>.<link linkend="_structlest_1_1options_1a454dcc0c370524cc4b5dfc58d093613b">abort</link>;&#32;}
959 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structlest_1_1env_1a68d00d5e67fa78d67219cea0cd149e4d">pass</link>()&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structlest_1_1env_1a0fa453907b8408a471db4fed3a924cd0">opt</link>.<link linkend="_structlest_1_1options_1a287c38ac0ab24d9557b9b65876f9eb5c">pass</link>;&#32;}
960 
961 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structlest_1_1env_1a60341965468becb89058eacd894a421b">pop</link>()&#32;&#32;&#32;{&#32;<link linkend="_structlest_1_1ctx">ctx</link>.pop_back();&#32;}
962 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structlest_1_1env_1a45b2689608ad24b83168c1d9f1c3367b">push</link>(&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;proposition&#32;)&#32;{&#32;<link linkend="_structlest_1_1ctx">ctx</link>.emplace_back(&#32;proposition&#32;);&#32;}
963 
964 &#32;&#32;&#32;&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;<link linkend="_structlest_1_1env_1a6b70f2fc892ad8281b3b630b9bea6057">context</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structlest_1_1env_1ad2f16ca64d91af164785a613bd660fad">testing</link>&#32;+&#32;<link linkend="_structlest_1_1env_1a056ed0345ae1ea73229bdab403502f70">sections</link>();&#32;}
965 
966 &#32;&#32;&#32;&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;<link linkend="_structlest_1_1env_1a056ed0345ae1ea73229bdab403502f70">sections</link>()
967 &#32;&#32;&#32;&#32;{
968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;!&#32;<link linkend="_structlest_1_1env_1a0fa453907b8408a471db4fed3a924cd0">opt</link>.<link linkend="_structlest_1_1options_1a886c686c975f266a999973dcdca70fde">verbose</link>&#32;)
969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
970 
971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;msg;
972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keyword">auto</emphasis>&#32;section&#32;:&#32;<link linkend="_structlest_1_1env_1ab7c661f3d942292eed180dcdf8925481">ctx</link>&#32;)
973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;msg&#32;+=&#32;<emphasis role="stringliteral">&quot;\n&#32;&#32;&quot;</emphasis>&#32;+&#32;section;
975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;msg;
977 &#32;&#32;&#32;&#32;}
978 };
979 
980 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structlest_1_1ctx">ctx</link>
981 {
982 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1env">env</link>&#32;&amp;&#32;<link linkend="_structlest_1_1ctx_1a3535320a2dd7d34ba3c6e3f7678481fc">environment</link>;
983 
984 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1ctx_1a99ef5abd7dab0c54cc6e3e0bb74ed1ca">ctx</link>(&#32;<link linkend="_structlest_1_1env">env</link>&#32;&amp;&#32;environment_,&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;proposition&#32;)
985 &#32;&#32;&#32;&#32;:&#32;<link linkend="_structlest_1_1ctx_1a3535320a2dd7d34ba3c6e3f7678481fc">environment</link>{&#32;environment_&#32;}
986 &#32;&#32;&#32;&#32;{
987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structlest_1_1ctx_1a3535320a2dd7d34ba3c6e3f7678481fc">environment</link>.<link linkend="_structlest_1_1env_1a45b2689608ad24b83168c1d9f1c3367b">push</link>(&#32;proposition&#32;);
988 &#32;&#32;&#32;&#32;}
989 
990 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1ctx_1aae6e1e102d65b7cb349c72d8b4d1dbb3">~ctx</link>()
991 &#32;&#32;&#32;&#32;{
992 <emphasis role="preprocessor">#if&#32;lest_CPP17_OR_GREATER</emphasis>
993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;std::uncaught_exceptions()&#32;==&#32;0&#32;)
994 <emphasis role="preprocessor">#else</emphasis>
995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;!&#32;std::uncaught_exception()&#32;)
996 <emphasis role="preprocessor">#endif</emphasis>
997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structlest_1_1ctx_1a3535320a2dd7d34ba3c6e3f7678481fc">environment</link>.<link linkend="_structlest_1_1env_1a60341965468becb89058eacd894a421b">pop</link>();
999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1000 &#32;&#32;&#32;&#32;}
1001 
1002 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;&#32;}
1003 };
1004 
1005 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structlest_1_1action">action</link>
1006 {
1007 &#32;&#32;&#32;&#32;std::ostream&#32;&amp;&#32;<link linkend="_structlest_1_1action_1a9d43daaa10087b8afc1b2d5be5cea14f">os</link>;
1008 
1009 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1action_1a26dd3532451b8379e3fdae0322f9fa24">action</link>(&#32;std::ostream&#32;&amp;&#32;out&#32;)&#32;:&#32;<link linkend="_structlest_1_1action_1a9d43daaa10087b8afc1b2d5be5cea14f">os</link>(&#32;out&#32;)&#32;{}
1010 
1011 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1action_1a4a2d394df0468745e1af1a8148120a3f">action</link>(&#32;<link linkend="_structlest_1_1action">action</link>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
1012 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structlest_1_1action_1ad0cac06eb5056275f05043160fd87bbc">operator=</link>(&#32;<link linkend="_structlest_1_1action">action</link>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
1013 
1014 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;int()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;}
1015 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structlest_1_1action_1a957cc5cd7576993da4360111199dd153">abort</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;}
1016 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1action">action</link>&#32;&amp;&#32;<link linkend="_structlest_1_1action_1a59c0d9eee60f4bfe92483d3209d131a9">operator()</link>(&#32;<link linkend="_structlest_1_1test">test</link>&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
1017 };
1018 
1019 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structlest_1_1print">print</link>&#32;:&#32;<link linkend="_structlest_1_1action">action</link>
1020 {
1021 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1print_1ae3a108d80bf4382f918603e3b0eef554">print</link>(&#32;std::ostream&#32;&amp;&#32;out&#32;)&#32;:&#32;<link linkend="_structlest_1_1action">action</link>(&#32;out&#32;)&#32;{}
1022 
1023 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1print">print</link>&#32;&amp;&#32;<link linkend="_structlest_1_1print_1a02e5b9d5a7ba756bf83e47a958ae6d13">operator()</link>(&#32;<link linkend="_structlest_1_1test">test</link>&#32;testing&#32;)
1024 &#32;&#32;&#32;&#32;{
1025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structlest_1_1action_1a9d43daaa10087b8afc1b2d5be5cea14f">os</link>&#32;&lt;&lt;&#32;testing.<link linkend="_structlest_1_1test_1af76aed4e5e3aa7904f721b198310b0d4">name</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1026 &#32;&#32;&#32;&#32;}
1027 };
1028 
1029 <emphasis role="keyword">inline</emphasis>&#32;<link linkend="_namespacelest_1abadda50795fdee0bb844b52e73878699">texts</link>&#32;<link linkend="_namespacelest_1a4a706c52e70ba58a7f005ccd83746c45">tags</link>(&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>,&#32;<link linkend="_namespacelest_1abadda50795fdee0bb844b52e73878699">texts</link>&#32;<link linkend="_structlest_1_1result">result</link>&#32;=&#32;{}&#32;)
1030 {
1031 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;none&#32;=&#32;std::string::npos;
1032 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;lb&#32;&#32;&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>.find_first_of(&#32;<emphasis role="stringliteral">&quot;[&quot;</emphasis>&#32;);
1033 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;rb&#32;&#32;&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>.find_first_of(&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>&#32;);
1034 
1035 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;lb&#32;==&#32;none&#32;||&#32;rb&#32;==&#32;none&#32;)
1036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
1037 
1038 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.emplace_back(&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>.substr(&#32;lb,&#32;rb&#32;-&#32;lb&#32;+&#32;1&#32;)&#32;);
1039 
1040 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelest_1a4a706c52e70ba58a7f005ccd83746c45">tags</link>(&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>.substr(&#32;rb&#32;+&#32;1&#32;),&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;);
1041 }
1042 
1043 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structlest_1_1ptags">ptags</link>&#32;:&#32;<link linkend="_structlest_1_1action">action</link>
1044 {
1045 &#32;&#32;&#32;&#32;std::set&lt;text&gt;&#32;<link linkend="_structlest_1_1ptags_1a3497c89c3867708f24a827a5a40b688b">result</link>;
1046 
1047 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1ptags_1a9d354a1a3977e6cc9c91f2304fcb9154">ptags</link>(&#32;std::ostream&#32;&amp;&#32;out&#32;)&#32;:&#32;<link linkend="_structlest_1_1action">action</link>(&#32;out&#32;),&#32;<link linkend="_structlest_1_1result">result</link>()&#32;{}
1048 
1049 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1ptags">ptags</link>&#32;&amp;&#32;<link linkend="_structlest_1_1ptags_1af8cbfa37eb615e2d2de74b735afca257">operator()</link>(&#32;<link linkend="_structlest_1_1test">test</link>&#32;testing&#32;)
1050 &#32;&#32;&#32;&#32;{
1051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;&#32;tag&#32;:&#32;<link linkend="_namespacelest_1a4a706c52e70ba58a7f005ccd83746c45">tags</link>(&#32;testing.<link linkend="_structlest_1_1test_1af76aed4e5e3aa7904f721b198310b0d4">name</link>&#32;)&#32;)
1052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structlest_1_1result">result</link>.insert(&#32;tag&#32;);
1053 
1054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1055 &#32;&#32;&#32;&#32;}
1056 
1057 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1ptags_1a14735ba0320bfc60501c674e39f4252b">~ptags</link>()
1058 &#32;&#32;&#32;&#32;{
1059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link>(&#32;<link linkend="_structlest_1_1result">result</link>.begin(),&#32;<link linkend="_structlest_1_1result">result</link>.end(),&#32;std::ostream_iterator&lt;text&gt;(&#32;<link linkend="_structlest_1_1action_1a9d43daaa10087b8afc1b2d5be5cea14f">os</link>,&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>&#32;)&#32;);
1060 &#32;&#32;&#32;&#32;}
1061 };
1062 
1063 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structlest_1_1count">count</link>&#32;:&#32;<link linkend="_structlest_1_1action">action</link>
1064 {
1065 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_structlest_1_1count_1adf2838aa0b33bd8be3049775b79528c6">n</link>&#32;=&#32;0;
1066 
1067 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1count_1a2281efc21a9ac57e98c20b465876a6dc">count</link>(&#32;std::ostream&#32;&amp;&#32;out&#32;)&#32;:&#32;<link linkend="_structlest_1_1action">action</link>(&#32;out&#32;)&#32;{}
1068 
1069 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1count">count</link>&#32;&amp;&#32;<link linkend="_structlest_1_1count_1a0748e1bee581fc57d28ba2bb14a79a5c">operator()</link>(&#32;<link linkend="_structlest_1_1test">test</link>&#32;)&#32;{&#32;++<link linkend="_structlest_1_1count_1adf2838aa0b33bd8be3049775b79528c6">n</link>;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
1070 
1071 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1count_1ac4069dea60ffb6bb0e1bf14777037dac">~count</link>()
1072 &#32;&#32;&#32;&#32;{
1073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structlest_1_1action_1a9d43daaa10087b8afc1b2d5be5cea14f">os</link>&#32;&lt;&lt;&#32;<link linkend="_structlest_1_1count_1adf2838aa0b33bd8be3049775b79528c6">n</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;selected&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacelest_1a7d802100fe140961785074f81eaabe56">pluralise</link>(<emphasis role="stringliteral">&quot;test&quot;</emphasis>,&#32;<link linkend="_structlest_1_1count_1adf2838aa0b33bd8be3049775b79528c6">n</link>)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
1074 &#32;&#32;&#32;&#32;}
1075 };
1076 
1077 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structlest_1_1timer">timer</link>
1078 {
1079 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structtime">time</link>&#32;=&#32;std::chrono::high_resolution_clock;
1080 
1081 &#32;&#32;&#32;&#32;time::time_point&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>&#32;=&#32;time::now();
1082 
1083 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_structlest_1_1timer_1a503d95776b76bc8307bc38f3127e05bd">elapsed_seconds</link>()<emphasis role="keyword">&#32;const</emphasis>
1084 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
1085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1e-6&#32;*&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(&#32;std::chrono::duration_cast&lt;&#32;std::chrono::microseconds&#32;&gt;(&#32;time::now()&#32;-&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>&#32;).count()&#32;);
1086 &#32;&#32;&#32;&#32;}
1087 };
1088 
1089 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structlest_1_1times">times</link>&#32;:&#32;<link linkend="_structlest_1_1action">action</link>
1090 {
1091 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1env">env</link>&#32;<link linkend="_structlest_1_1times_1ad32ab8259b621f76a357fdf73e00f272">output</link>;
1092 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_structlest_1_1times_1af427951e2346a2479ae7c794cd243d92">selected</link>&#32;=&#32;0;
1093 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_structlest_1_1times_1a5d2aa2472413cba0fdb5d3882de37d93">failures</link>&#32;=&#32;0;
1094 
1095 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1timer">timer</link>&#32;<link linkend="_structlest_1_1times_1a0d7bbf065dfbac9033a7f765af5a832b">total</link>;
1096 
1097 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1times_1ac4dcfb73b28a33a856fa56689b8bbaf5">times</link>(&#32;std::ostream&#32;&amp;&#32;out,&#32;<link linkend="_structlest_1_1options">options</link>&#32;<link linkend="_structoption">option</link>&#32;)
1098 &#32;&#32;&#32;&#32;:&#32;<link linkend="_structlest_1_1action">action</link>(&#32;out&#32;),&#32;<link linkend="_structlest_1_1times_1ad32ab8259b621f76a357fdf73e00f272">output</link>(&#32;out,&#32;<link linkend="_structoption">option</link>&#32;),&#32;<link linkend="_structlest_1_1times_1a0d7bbf065dfbac9033a7f765af5a832b">total</link>()
1099 &#32;&#32;&#32;&#32;{
1100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structlest_1_1action_1a9d43daaa10087b8afc1b2d5be5cea14f">os</link>&#32;&lt;&lt;&#32;std::setfill(<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>)&#32;&lt;&lt;&#32;std::fixed&#32;&lt;&lt;&#32;std::setprecision(&#32;<link linkend="__classes_2lib_2m_i_n_i-master_2tests_2lest_2lest_8hpp_1a9199b4dc15a0453bd89e46ce0c8b0495">lest_FEATURE_TIME_PRECISION</link>&#32;);
1101 &#32;&#32;&#32;&#32;}
1102 
1103 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;int()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structlest_1_1times_1a5d2aa2472413cba0fdb5d3882de37d93">failures</link>;&#32;}
1104 
1105 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structlest_1_1times_1a0237eefebdb6b13e3d051b2bb3beb4d5">abort</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structlest_1_1times_1ad32ab8259b621f76a357fdf73e00f272">output</link>.<link linkend="_structlest_1_1env_1a0bb8b8d6216926d462f54092435c2300">abort</link>()&#32;&amp;&amp;&#32;<link linkend="_structlest_1_1times_1a5d2aa2472413cba0fdb5d3882de37d93">failures</link>&#32;&gt;&#32;0;&#32;}
1106 
1107 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1times">times</link>&#32;&amp;&#32;<link linkend="_structlest_1_1times_1a7b631f195a9b161297af14abfad41477">operator()</link>(&#32;<link linkend="_structlest_1_1test">test</link>&#32;testing&#32;)
1108 &#32;&#32;&#32;&#32;{
1109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structlest_1_1timer">timer</link>&#32;t;
1110 
1111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>
1112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;testing.<link linkend="_structlest_1_1test_1a1397324fbefff3aee63fe4a1c83708c1">behaviour</link>(&#32;<link linkend="_structlest_1_1times_1ad32ab8259b621f76a357fdf73e00f272">output</link>(&#32;testing.<link linkend="_structlest_1_1test_1af76aed4e5e3aa7904f721b198310b0d4">name</link>&#32;)&#32;);
1114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>(&#32;<link linkend="_structlest_1_1message">message</link>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;)
1116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++<link linkend="_structlest_1_1times_1a5d2aa2472413cba0fdb5d3882de37d93">failures</link>;
1118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1119 
1120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structlest_1_1action_1a9d43daaa10087b8afc1b2d5be5cea14f">os</link>&#32;&lt;&lt;&#32;std::setw(3)&#32;&lt;&lt;&#32;(&#32;1000&#32;*&#32;t.<link linkend="_structlest_1_1timer_1a503d95776b76bc8307bc38f3127e05bd">elapsed_seconds</link>()&#32;)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;ms:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;testing.<link linkend="_structlest_1_1test_1af76aed4e5e3aa7904f721b198310b0d4">name</link>&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
1121 
1122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1123 &#32;&#32;&#32;&#32;}
1124 
1125 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1times_1a598c6b8fb215e97bc84736a36ce34368">~times</link>()
1126 &#32;&#32;&#32;&#32;{
1127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structlest_1_1action_1a9d43daaa10087b8afc1b2d5be5cea14f">os</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Elapsed&#32;time:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;std::setprecision(1)&#32;&lt;&lt;&#32;<link linkend="_structlest_1_1times_1a0d7bbf065dfbac9033a7f765af5a832b">total</link>.<link linkend="_structlest_1_1timer_1a503d95776b76bc8307bc38f3127e05bd">elapsed_seconds</link>()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;s\n&quot;</emphasis>;
1128 &#32;&#32;&#32;&#32;}
1129 };
1130 
1131 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structlest_1_1confirm">confirm</link>&#32;:&#32;<link linkend="_structlest_1_1action">action</link>
1132 {
1133 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1env">env</link>&#32;<link linkend="_structlest_1_1confirm_1a57dbefdbfbe672f06da769ee4da7e699">output</link>;
1134 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_structlest_1_1confirm_1a08c8577137cecdfcf0476685a64310cf">selected</link>&#32;=&#32;0;
1135 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_structlest_1_1confirm_1a043f68f03e897882e04dde64d5e8857f">failures</link>&#32;=&#32;0;
1136 
1137 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1confirm_1a294774b7aee9d7c7808520ee65f41610">confirm</link>(&#32;std::ostream&#32;&amp;&#32;out,&#32;<link linkend="_structlest_1_1options">options</link>&#32;<link linkend="_structoption">option</link>&#32;)
1138 &#32;&#32;&#32;&#32;:&#32;<link linkend="_structlest_1_1action">action</link>(&#32;out&#32;),&#32;<link linkend="_structlest_1_1confirm_1a57dbefdbfbe672f06da769ee4da7e699">output</link>(&#32;out,&#32;<link linkend="_structoption">option</link>&#32;)&#32;{}
1139 
1140 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;int()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structlest_1_1confirm_1a043f68f03e897882e04dde64d5e8857f">failures</link>;&#32;}
1141 
1142 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structlest_1_1confirm_1aebd925ebe983e77c7f7712ee10c046a0">abort</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structlest_1_1confirm_1a57dbefdbfbe672f06da769ee4da7e699">output</link>.<link linkend="_structlest_1_1env_1a0bb8b8d6216926d462f54092435c2300">abort</link>()&#32;&amp;&amp;&#32;<link linkend="_structlest_1_1confirm_1a043f68f03e897882e04dde64d5e8857f">failures</link>&#32;&gt;&#32;0;&#32;}
1143 
1144 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1confirm">confirm</link>&#32;&amp;&#32;<link linkend="_structlest_1_1confirm_1ae5f05d63575f3365cc283c26b4f0e8c6">operator()</link>(&#32;<link linkend="_structlest_1_1test">test</link>&#32;testing&#32;)
1145 &#32;&#32;&#32;&#32;{
1146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>
1147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++<link linkend="_structlest_1_1confirm_1a08c8577137cecdfcf0476685a64310cf">selected</link>;&#32;testing.<link linkend="_structlest_1_1test_1a1397324fbefff3aee63fe4a1c83708c1">behaviour</link>(&#32;<link linkend="_structlest_1_1confirm_1a57dbefdbfbe672f06da769ee4da7e699">output</link>(&#32;testing.<link linkend="_structlest_1_1test_1af76aed4e5e3aa7904f721b198310b0d4">name</link>&#32;)&#32;);
1149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>(&#32;<link linkend="_structlest_1_1message">message</link>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;e&#32;)
1151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++<link linkend="_structlest_1_1confirm_1a043f68f03e897882e04dde64d5e8857f">failures</link>;&#32;<link linkend="_namespacelest_1acd1d811cf4ab4bebd681f007789ca0d7">report</link>(&#32;<link linkend="_structlest_1_1action_1a9d43daaa10087b8afc1b2d5be5cea14f">os</link>,&#32;e,&#32;<link linkend="_structlest_1_1confirm_1a57dbefdbfbe672f06da769ee4da7e699">output</link>.<link linkend="_structlest_1_1env_1a6b70f2fc892ad8281b3b630b9bea6057">context</link>()&#32;);
1153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1155 &#32;&#32;&#32;&#32;}
1156 
1157 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1confirm_1acc7974db4fae9f1b4a4377ae2262c214">~confirm</link>()
1158 &#32;&#32;&#32;&#32;{
1159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;<link linkend="_structlest_1_1confirm_1a043f68f03e897882e04dde64d5e8857f">failures</link>&#32;&gt;&#32;0&#32;)
1160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structlest_1_1action_1a9d43daaa10087b8afc1b2d5be5cea14f">os</link>&#32;&lt;&lt;&#32;<link linkend="_structlest_1_1confirm_1a043f68f03e897882e04dde64d5e8857f">failures</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;out&#32;of&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_structlest_1_1confirm_1a08c8577137cecdfcf0476685a64310cf">selected</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;selected&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacelest_1a7d802100fe140961785074f81eaabe56">pluralise</link>(<emphasis role="stringliteral">&quot;test&quot;</emphasis>,&#32;<link linkend="_structlest_1_1confirm_1a08c8577137cecdfcf0476685a64310cf">selected</link>)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacelest_1a9caf47f37e450e7ae4bac7a519b074f2">colourise</link>(&#32;<emphasis role="stringliteral">&quot;failed.\n&quot;</emphasis>&#32;);
1162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;<link linkend="_structlest_1_1confirm_1a57dbefdbfbe672f06da769ee4da7e699">output</link>.<link linkend="_structlest_1_1env_1a68d00d5e67fa78d67219cea0cd149e4d">pass</link>()&#32;)
1164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structlest_1_1action_1a9d43daaa10087b8afc1b2d5be5cea14f">os</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;All&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_structlest_1_1confirm_1a08c8577137cecdfcf0476685a64310cf">selected</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;selected&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacelest_1a7d802100fe140961785074f81eaabe56">pluralise</link>(<emphasis role="stringliteral">&quot;test&quot;</emphasis>,&#32;<link linkend="_structlest_1_1confirm_1a08c8577137cecdfcf0476685a64310cf">selected</link>)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacelest_1a9caf47f37e450e7ae4bac7a519b074f2">colourise</link>(&#32;<emphasis role="stringliteral">&quot;passed.\n&quot;</emphasis>&#32;);
1166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1167 &#32;&#32;&#32;&#32;}
1168 };
1169 
1170 <emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;Action&#32;&gt;
1171 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacelest_1ab14c66a1c73dc27109b1d9d89542b923">abort</link>(&#32;Action&#32;&amp;&#32;perform&#32;)
1172 {
1173 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;perform.abort();
1174 }
1175 
1176 <emphasis role="keyword">template</emphasis>&lt;&#32;<emphasis role="keyword">typename</emphasis>&#32;Action&#32;&gt;
1177 Action&#32;&amp;&amp;&#32;<link linkend="_namespacelest_1af527784a6a57085ee814b08da444cda1">for_test</link>(&#32;<link linkend="_namespacelest_1a549374a5f82f5cbab341c0513e037875">tests</link>&#32;specification,&#32;<link linkend="_namespacelest_1abadda50795fdee0bb844b52e73878699">texts</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>,&#32;Action&#32;&amp;&amp;&#32;perform,&#32;<emphasis role="keywordtype">int</emphasis>&#32;n&#32;=&#32;1&#32;)
1178 {
1179 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;<link linkend="_namespacelest_1adb2d8ba32435d9eb40a998058baee6d8">indefinite</link>(&#32;n&#32;)&#32;||&#32;i&#32;&lt;&#32;n;&#32;++i&#32;)
1180 &#32;&#32;&#32;&#32;{
1181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;&#32;testing&#32;:&#32;specification&#32;)
1182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;<link linkend="_namespacelest_1a1edb8bb9cf6c9793b8626cd80dcf1904">select</link>(&#32;testing.name,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>&#32;)&#32;)
1184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;<link linkend="_namespacelest_1ab14c66a1c73dc27109b1d9d89542b923">abort</link>(&#32;perform(&#32;testing&#32;)&#32;)&#32;)
1185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(&#32;perform&#32;);
1186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1187 &#32;&#32;&#32;&#32;}
1188 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(&#32;perform&#32;);
1189 }
1190 
1191 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacelest_1ac09122525e14bc4cc1c535bfc06eb935">sort</link>(&#32;<link linkend="_namespacelest_1a549374a5f82f5cbab341c0513e037875">tests</link>&#32;&amp;&#32;specification&#32;)
1192 {
1193 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;test_less&#32;=&#32;[](&#32;<link linkend="_structlest_1_1test">test</link>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>,&#32;<link linkend="_structlest_1_1test">test</link>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>.name&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>.name;&#32;};
1194 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">std::sort</link>(&#32;specification.begin(),&#32;specification.end(),&#32;test_less&#32;);
1195 }
1196 
1197 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacelest_1abc0275611237ee9364ae8d16e82cb83b">shuffle</link>(&#32;<link linkend="_namespacelest_1a549374a5f82f5cbab341c0513e037875">tests</link>&#32;&amp;&#32;specification,&#32;<link linkend="_structlest_1_1options">options</link>&#32;<link linkend="_structoption">option</link>&#32;)
1198 {
1199 &#32;&#32;&#32;&#32;std::shuffle(&#32;specification.begin(),&#32;specification.end(),&#32;std::mt19937(&#32;<link linkend="_structoption">option</link>.seed&#32;)&#32;);
1200 }
1201 
1202 <emphasis role="comment">//&#32;workaround&#32;MinGW&#32;bug,&#32;http://stackoverflow.com/a/16132279:</emphasis>
1203 
1204 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespacelest_1aa8f139b4d4ae346e4caa755ec5af3798">stoi</link>(&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abb50fc1ead3a02a46fb52daa2045f95c">num</link>&#32;)
1205 {
1206 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(&#32;std::strtol(&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abb50fc1ead3a02a46fb52daa2045f95c">num</link>.c_str(),&#32;<emphasis role="keyword">nullptr</emphasis>,&#32;10&#32;)&#32;);
1207 }
1208 
1209 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a1e443b4df05673f810658b66cb1f628d">is_number</link>(&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;arg&#32;)
1210 {
1211 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1af69ea32ebd7865fb57714d6b5f12f26d">std::all_of</link>(&#32;arg.begin(),&#32;arg.end(),&#32;::isdigit&#32;);
1212 }
1213 
1214 <emphasis role="keyword">inline</emphasis>&#32;<link linkend="_namespacelest_1a2b94dd1224b91163e866aa57a2bd7fa6">seed_t</link>&#32;<link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link>(&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;opt,&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;arg&#32;)
1215 {
1216 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;<link linkend="_forward__declarations_8h_1a1e443b4df05673f810658b66cb1f628d">is_number</link>(&#32;arg&#32;)&#32;)
1217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespacelest_1a2b94dd1224b91163e866aa57a2bd7fa6">seed_t</link><emphasis role="keyword">&gt;</emphasis>(&#32;<link linkend="_namespacelest_1aa8f139b4d4ae346e4caa755ec5af3798">lest::stoi</link>(&#32;arg&#32;)&#32;);
1218 
1219 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;arg&#32;==&#32;<emphasis role="stringliteral">&quot;time&quot;</emphasis>&#32;)
1220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespacelest_1a2b94dd1224b91163e866aa57a2bd7fa6">seed_t</link><emphasis role="keyword">&gt;</emphasis>(&#32;std::chrono::high_resolution_clock::now().time_since_epoch().count()&#32;);
1221 
1222 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(&#32;<emphasis role="stringliteral">&quot;expecting&#32;&apos;time&apos;&#32;or&#32;positive&#32;number&#32;with&#32;option&#32;&apos;&quot;</emphasis>&#32;+&#32;opt&#32;+&#32;<emphasis role="stringliteral">&quot;&apos;,&#32;got&#32;&apos;&quot;</emphasis>&#32;+&#32;arg&#32;+&#32;<emphasis role="stringliteral">&quot;&apos;&#32;(try&#32;option&#32;--help)&quot;</emphasis>&#32;);
1223 }
1224 
1225 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespacerepeat">repeat</link>(&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;opt,&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;arg&#32;)
1226 {
1227 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abb50fc1ead3a02a46fb52daa2045f95c">num</link>&#32;=&#32;<link linkend="_namespacelest_1aa8f139b4d4ae346e4caa755ec5af3798">lest::stoi</link>(&#32;arg&#32;);
1228 
1229 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;<link linkend="_namespacelest_1adb2d8ba32435d9eb40a998058baee6d8">indefinite</link>(&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abb50fc1ead3a02a46fb52daa2045f95c">num</link>&#32;)&#32;||&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abb50fc1ead3a02a46fb52daa2045f95c">num</link>&#32;&gt;=&#32;0&#32;)
1230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abb50fc1ead3a02a46fb52daa2045f95c">num</link>;
1231 
1232 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(&#32;<emphasis role="stringliteral">&quot;expecting&#32;&apos;-1&apos;&#32;or&#32;positive&#32;number&#32;with&#32;option&#32;&apos;&quot;</emphasis>&#32;+&#32;opt&#32;+&#32;<emphasis role="stringliteral">&quot;&apos;,&#32;got&#32;&apos;&quot;</emphasis>&#32;+&#32;arg&#32;+&#32;<emphasis role="stringliteral">&quot;&apos;&#32;(try&#32;option&#32;--help)&quot;</emphasis>&#32;);
1233 }
1234 
1235 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespacelest_1a386b986e21ffb9bcd41c87644b83f2bc">split_option</link>(&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;arg&#32;)&#32;-&gt;&#32;std::tuple&lt;text,&#32;text&gt;
1236 {
1237 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;pos&#32;=&#32;arg.rfind(&#32;<emphasis role="charliteral">&apos;=&apos;</emphasis>&#32;);
1238 
1239 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pos&#32;==&#32;text::npos
1240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;std::make_tuple(&#32;arg,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>&#32;)
1241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;std::make_tuple(&#32;arg.substr(&#32;0,&#32;pos&#32;),&#32;arg.substr(&#32;pos&#32;+&#32;1&#32;)&#32;);
1242 }
1243 
1244 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespacelest_1a4ebe5ee7f32e43e2ec5555fa176e971b">split_arguments</link>(&#32;<link linkend="_namespacelest_1abadda50795fdee0bb844b52e73878699">texts</link>&#32;args&#32;)&#32;-&gt;&#32;std::tuple&lt;options,&#32;texts&gt;
1245 {
1246 &#32;&#32;&#32;&#32;<link linkend="_structlest_1_1options">options</link>&#32;<link linkend="_structoption">option</link>;&#32;<link linkend="_namespacelest_1abadda50795fdee0bb844b52e73878699">texts</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>;
1247 
1248 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;in_options&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1249 
1250 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;&#32;arg&#32;:&#32;args&#32;)
1251 &#32;&#32;&#32;&#32;{
1252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;in_options&#32;)
1253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;opt,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>;
1255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::tie(&#32;opt,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;)&#32;=&#32;<link linkend="_namespacelest_1a386b986e21ffb9bcd41c87644b83f2bc">split_option</link>(&#32;arg&#32;);
1256 
1257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;(&#32;opt[0]&#32;!=&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{&#32;in_options&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;opt&#32;==&#32;<emphasis role="stringliteral">&quot;--&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{&#32;in_options&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;&#32;<emphasis role="keywordflow">continue</emphasis>;&#32;}
1259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;opt&#32;==&#32;<emphasis role="stringliteral">&quot;-h&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;||&#32;<emphasis role="stringliteral">&quot;--help&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;==&#32;opt&#32;)&#32;{&#32;<link linkend="_structoption">option</link>.help&#32;&#32;&#32;&#32;=&#32;&#32;<emphasis role="keyword">true</emphasis>;&#32;<emphasis role="keywordflow">continue</emphasis>;&#32;}
1260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;opt&#32;==&#32;<emphasis role="stringliteral">&quot;-a&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;||&#32;<emphasis role="stringliteral">&quot;--abort&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;==&#32;opt&#32;)&#32;{&#32;<link linkend="_structoption">option</link>.abort&#32;&#32;&#32;=&#32;&#32;<emphasis role="keyword">true</emphasis>;&#32;<emphasis role="keywordflow">continue</emphasis>;&#32;}
1261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;opt&#32;==&#32;<emphasis role="stringliteral">&quot;-c&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;||&#32;<emphasis role="stringliteral">&quot;--count&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;==&#32;opt&#32;)&#32;{&#32;<link linkend="_structoption">option</link>.count&#32;&#32;&#32;=&#32;&#32;<emphasis role="keyword">true</emphasis>;&#32;<emphasis role="keywordflow">continue</emphasis>;&#32;}
1262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;opt&#32;==&#32;<emphasis role="stringliteral">&quot;-g&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;||&#32;<emphasis role="stringliteral">&quot;--list-tags&quot;</emphasis>&#32;&#32;==&#32;opt&#32;)&#32;{&#32;<link linkend="_structoption">option</link>.tags&#32;&#32;&#32;&#32;=&#32;&#32;<emphasis role="keyword">true</emphasis>;&#32;<emphasis role="keywordflow">continue</emphasis>;&#32;}
1263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;opt&#32;==&#32;<emphasis role="stringliteral">&quot;-l&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;||&#32;<emphasis role="stringliteral">&quot;--list-tests&quot;</emphasis>&#32;==&#32;opt&#32;)&#32;{&#32;<link linkend="_structoption">option</link>.list&#32;&#32;&#32;&#32;=&#32;&#32;<emphasis role="keyword">true</emphasis>;&#32;<emphasis role="keywordflow">continue</emphasis>;&#32;}
1264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;opt&#32;==&#32;<emphasis role="stringliteral">&quot;-t&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;||&#32;<emphasis role="stringliteral">&quot;--time&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;==&#32;opt&#32;)&#32;{&#32;<link linkend="_structoption">option</link>.time&#32;&#32;&#32;&#32;=&#32;&#32;<emphasis role="keyword">true</emphasis>;&#32;<emphasis role="keywordflow">continue</emphasis>;&#32;}
1265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;opt&#32;==&#32;<emphasis role="stringliteral">&quot;-p&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;||&#32;<emphasis role="stringliteral">&quot;--pass&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;==&#32;opt&#32;)&#32;{&#32;<link linkend="_structoption">option</link>.pass&#32;&#32;&#32;&#32;=&#32;&#32;<emphasis role="keyword">true</emphasis>;&#32;<emphasis role="keywordflow">continue</emphasis>;&#32;}
1266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;opt&#32;==&#32;<emphasis role="stringliteral">&quot;-v&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;||&#32;<emphasis role="stringliteral">&quot;--verbose&quot;</emphasis>&#32;&#32;&#32;&#32;==&#32;opt&#32;)&#32;{&#32;<link linkend="_structoption">option</link>.verbose&#32;=&#32;&#32;<emphasis role="keyword">true</emphasis>;&#32;<emphasis role="keywordflow">continue</emphasis>;&#32;}
1267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;--version&quot;</emphasis>&#32;&#32;&#32;&#32;==&#32;opt&#32;)&#32;{&#32;<link linkend="_structoption">option</link>.version&#32;=&#32;&#32;<emphasis role="keyword">true</emphasis>;&#32;<emphasis role="keywordflow">continue</emphasis>;&#32;}
1268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;opt&#32;==&#32;<emphasis role="stringliteral">&quot;--order&quot;</emphasis>&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;declared&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;)&#32;{&#32;<emphasis role="comment">/*&#32;by&#32;definition&#32;*/</emphasis>&#32;&#32;&#32;;&#32;<emphasis role="keywordflow">continue</emphasis>;&#32;}
1269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;opt&#32;==&#32;<emphasis role="stringliteral">&quot;--order&quot;</emphasis>&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;lexical&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;)&#32;{&#32;<link linkend="_structoption">option</link>.lexical&#32;=&#32;&#32;<emphasis role="keyword">true</emphasis>;&#32;<emphasis role="keywordflow">continue</emphasis>;&#32;}
1270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;opt&#32;==&#32;<emphasis role="stringliteral">&quot;--order&quot;</emphasis>&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;random&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;)&#32;{&#32;<link linkend="_structoption">option</link>.random&#32;&#32;=&#32;&#32;<emphasis role="keyword">true</emphasis>;&#32;<emphasis role="keywordflow">continue</emphasis>;&#32;}
1271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;opt&#32;==&#32;<emphasis role="stringliteral">&quot;--random-seed&quot;</emphasis>&#32;)&#32;{&#32;<link linkend="_structoption">option</link>.seed&#32;&#32;&#32;=&#32;<link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link>&#32;&#32;(&#32;<emphasis role="stringliteral">&quot;--random-seed&quot;</emphasis>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;);&#32;<emphasis role="keywordflow">continue</emphasis>;&#32;}
1272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;opt&#32;==&#32;<emphasis role="stringliteral">&quot;--repeat&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{&#32;<link linkend="_structoption">option</link>.repeat&#32;=&#32;<link linkend="_namespacerepeat">repeat</link>(&#32;<emphasis role="stringliteral">&quot;--repeat&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;);&#32;<emphasis role="keywordflow">continue</emphasis>;&#32;}
1273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(&#32;<emphasis role="stringliteral">&quot;unrecognised&#32;option&#32;&apos;&quot;</emphasis>&#32;+&#32;arg&#32;+&#32;<emphasis role="stringliteral">&quot;&apos;&#32;(try&#32;option&#32;--help)&quot;</emphasis>&#32;);
1274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>.push_back(&#32;arg&#32;);
1276 &#32;&#32;&#32;&#32;}
1277 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_tuple(&#32;<link linkend="_structoption">option</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>&#32;);
1278 }
1279 
1280 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aaaaec24daa23563cf68022ae1bb200c7">usage</link>(&#32;std::ostream&#32;&amp;&#32;os&#32;)
1281 {
1282 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;
1283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\nUsage:&#32;test&#32;[options]&#32;[test-spec&#32;...]\n&quot;</emphasis>
1284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>
1285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Options:\n&quot;</emphasis>
1286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;-h,&#32;--help&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this&#32;help&#32;message\n&quot;</emphasis>
1287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;-a,&#32;--abort&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;abort&#32;at&#32;first&#32;failure\n&quot;</emphasis>
1288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;-c,&#32;--count&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count&#32;selected&#32;tests\n&quot;</emphasis>
1289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;-g,&#32;--list-tags&#32;&#32;&#32;&#32;list&#32;tags&#32;of&#32;selected&#32;tests\n&quot;</emphasis>
1290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;-l,&#32;--list-tests&#32;&#32;&#32;list&#32;selected&#32;tests\n&quot;</emphasis>
1291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;-p,&#32;--pass&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;also&#32;report&#32;passing&#32;tests\n&quot;</emphasis>
1292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;-t,&#32;--time&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;list&#32;duration&#32;of&#32;selected&#32;tests\n&quot;</emphasis>
1293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;-v,&#32;--verbose&#32;&#32;&#32;&#32;&#32;&#32;also&#32;report&#32;passing&#32;or&#32;failing&#32;sections\n&quot;</emphasis>
1294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;--order=declared&#32;&#32;&#32;use&#32;source&#32;code&#32;test&#32;order&#32;(default)\n&quot;</emphasis>
1295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;--order=lexical&#32;&#32;&#32;&#32;use&#32;lexical&#32;sort&#32;test&#32;order\n&quot;</emphasis>
1296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;--order=random&#32;&#32;&#32;&#32;&#32;use&#32;random&#32;test&#32;order\n&quot;</emphasis>
1297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;--random-seed=n&#32;&#32;&#32;&#32;use&#32;n&#32;for&#32;random&#32;generator&#32;seed\n&quot;</emphasis>
1298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;--random-seed=time&#32;use&#32;time&#32;for&#32;random&#32;generator&#32;seed\n&quot;</emphasis>
1299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;--repeat=n&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;repeat&#32;selected&#32;tests&#32;n&#32;times&#32;(-1:&#32;indefinite)\n&quot;</emphasis>
1300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;--version&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;report&#32;lest&#32;version&#32;and&#32;compiler&#32;used\n&quot;</emphasis>
1301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;--&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;end&#32;options\n&quot;</emphasis>
1302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>
1303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Test&#32;specification:\n&quot;</emphasis>
1304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;\&quot;@\&quot;,&#32;\&quot;*\&quot;&#32;all&#32;tests,&#32;unless&#32;excluded\n&quot;</emphasis>
1305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;empty&#32;&#32;&#32;&#32;all&#32;tests,&#32;unless&#32;tagged&#32;[hide]&#32;or&#32;[.optional-name]\n&quot;</emphasis>
1306 <emphasis role="preprocessor">#if&#32;lest_FEATURE_REGEX_SEARCH</emphasis>
1307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;\&quot;re\&quot;&#32;&#32;&#32;&#32;&#32;select&#32;tests&#32;that&#32;match&#32;regular&#32;expression\n&quot;</emphasis>
1308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;\&quot;!re\&quot;&#32;&#32;&#32;&#32;omit&#32;tests&#32;that&#32;match&#32;regular&#32;expression\n&quot;</emphasis>
1309 <emphasis role="preprocessor">#else</emphasis>
1310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;\&quot;text\&quot;&#32;&#32;&#32;select&#32;tests&#32;that&#32;contain&#32;text&#32;(case&#32;insensitive)\n&quot;</emphasis>
1311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;\&quot;!text\&quot;&#32;&#32;omit&#32;tests&#32;that&#32;contain&#32;text&#32;(case&#32;insensitive)\n&quot;</emphasis>
1312 <emphasis role="preprocessor">#endif</emphasis>
1313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;;
1314 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
1315 }
1316 
1317 <emphasis role="keyword">inline</emphasis>&#32;<link linkend="_namespacelest_1acb9f2be64a994ffcd890e99e8a8faf5d">text</link>&#32;<link linkend="_namespacelest_1ab4a9c1edc3353bfd194834c7e8a03cee">compiler</link>()
1318 {
1319 &#32;&#32;&#32;&#32;std::ostringstream&#32;os;
1320 <emphasis role="preprocessor">#if&#32;&#32;&#32;defined&#32;(__clang__&#32;)</emphasis>
1321 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;clang&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;__clang_version__;
1322 <emphasis role="preprocessor">#elif&#32;defined&#32;(__GNUC__&#32;&#32;)</emphasis>
1323 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;gcc&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;__GNUC__&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>&#32;&lt;&lt;&#32;__GNUC_MINOR__&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>&#32;&lt;&lt;&#32;__GNUC_PATCHLEVEL__;
1324 <emphasis role="preprocessor">#elif&#32;defined&#32;(&#32;_MSC_VER&#32;)</emphasis>
1325 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;MSVC&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;(_MSC_VER&#32;/&#32;100&#32;-&#32;5&#32;-&#32;(_MSC_VER&#32;&lt;&#32;1900))&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;(&quot;</emphasis>&#32;&lt;&lt;&#32;_MSC_VER&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>;
1326 <emphasis role="preprocessor">#else</emphasis>
1327 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;[compiler]&quot;</emphasis>;
1328 <emphasis role="preprocessor">#endif</emphasis>
1329 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os.str();
1330 }
1331 
1332 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespaceversion">version</link>(&#32;std::ostream&#32;&amp;&#32;os&#32;)
1333 {
1334 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;lest&#32;version&#32;&quot;</emphasis>&#32;&#32;&lt;&lt;&#32;<link linkend="__classes_2lib_2m_i_n_i-master_2tests_2lest_2lest_8hpp_1a7acfde016b5603c23d48948823bfb577">lest_VERSION</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>
1335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Compiled&#32;with&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacelest_1ab4a9c1edc3353bfd194834c7e8a03cee">compiler</link>()&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;on&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;__DATE__&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;at&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;__TIME__&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;.\n&quot;</emphasis>
1336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;For&#32;more&#32;information,&#32;see&#32;https://github.com/martinmoene/lest.\n&quot;</emphasis>;
1337 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
1338 }
1339 
1340 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespacelest_1a625193eb3dbfcef90fe9519412f96f38">run</link>(&#32;<link linkend="_namespacelest_1a549374a5f82f5cbab341c0513e037875">tests</link>&#32;specification,&#32;<link linkend="_namespacelest_1abadda50795fdee0bb844b52e73878699">texts</link>&#32;arguments,&#32;std::ostream&#32;&amp;&#32;os&#32;=&#32;std::cout&#32;)
1341 {
1342 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>
1343 &#32;&#32;&#32;&#32;{
1344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structlest_1_1options">options</link>&#32;<link linkend="_structoption">option</link>;&#32;<link linkend="_namespacelest_1abadda50795fdee0bb844b52e73878699">texts</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>;
1345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::tie(&#32;<link linkend="_structoption">option</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>&#32;)&#32;=&#32;<link linkend="_namespacelest_1a4ebe5ee7f32e43e2ec5555fa176e971b">split_arguments</link>(&#32;arguments&#32;);
1346 
1347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;<link linkend="_structoption">option</link>.lexical&#32;)&#32;{&#32;&#32;&#32;&#32;<link linkend="_namespacelest_1ac09122525e14bc4cc1c535bfc06eb935">sort</link>(&#32;specification&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);&#32;}
1348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;<link linkend="_structoption">option</link>.random&#32;&#32;)&#32;{&#32;<link linkend="_namespacelest_1abc0275611237ee9364ae8d16e82cb83b">shuffle</link>(&#32;specification,&#32;<link linkend="_structoption">option</link>&#32;);&#32;}
1349 
1350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;<link linkend="_structoption">option</link>.help&#32;&#32;&#32;&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aaaaec24daa23563cf68022ae1bb200c7">usage</link>&#32;&#32;&#32;(&#32;os&#32;);&#32;}
1351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;<link linkend="_structoption">option</link>.version&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceversion">version</link>&#32;(&#32;os&#32;);&#32;}
1352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;<link linkend="_structoption">option</link>.count&#32;&#32;&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelest_1af527784a6a57085ee814b08da444cda1">for_test</link>(&#32;specification,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>,&#32;<link linkend="_structlest_1_1count">count</link>(&#32;os&#32;)&#32;);&#32;}
1353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;<link linkend="_structoption">option</link>.list&#32;&#32;&#32;&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelest_1af527784a6a57085ee814b08da444cda1">for_test</link>(&#32;specification,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>,&#32;<link linkend="_structlest_1_1print">print</link>(&#32;os&#32;)&#32;);&#32;}
1354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;<link linkend="_structoption">option</link>.tags&#32;&#32;&#32;&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelest_1af527784a6a57085ee814b08da444cda1">for_test</link>(&#32;specification,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>,&#32;<link linkend="_structlest_1_1ptags">ptags</link>(&#32;os&#32;)&#32;);&#32;}
1355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;<link linkend="_structoption">option</link>.time&#32;&#32;&#32;&#32;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelest_1af527784a6a57085ee814b08da444cda1">for_test</link>(&#32;specification,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>,&#32;<link linkend="_structlest_1_1times">times</link>(&#32;os,&#32;<link linkend="_structoption">option</link>&#32;)&#32;);&#32;}
1356 
1357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelest_1af527784a6a57085ee814b08da444cda1">for_test</link>(&#32;specification,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>,&#32;<link linkend="_structlest_1_1confirm">confirm</link>(&#32;os,&#32;<link linkend="_structoption">option</link>&#32;),&#32;<link linkend="_structoption">option</link>.repeat&#32;);
1358 &#32;&#32;&#32;&#32;}
1359 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(&#32;<link linkend="_classstd_1_1exception">std::exception</link>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;&#32;e&#32;)
1360 &#32;&#32;&#32;&#32;{
1361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Error:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;e.what()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
1362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
1363 &#32;&#32;&#32;&#32;}
1364 }
1365 
1366 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespacelest_1a625193eb3dbfcef90fe9519412f96f38">run</link>(&#32;<link linkend="_namespacelest_1a549374a5f82f5cbab341c0513e037875">tests</link>&#32;specification,&#32;<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;argv[],&#32;std::ostream&#32;&amp;&#32;os&#32;=&#32;std::cout&#32;)
1367 {
1368 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelest_1a625193eb3dbfcef90fe9519412f96f38">run</link>(&#32;specification,&#32;<link linkend="_namespacelest_1abadda50795fdee0bb844b52e73878699">texts</link>(&#32;argv&#32;+&#32;1,&#32;argv&#32;+&#32;argc&#32;),&#32;os&#32;&#32;);
1369 }
1370 
1371 <emphasis role="keyword">template</emphasis>&lt;&#32;std::<emphasis role="keywordtype">size_t</emphasis>&#32;N&#32;&gt;
1372 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespacelest_1a625193eb3dbfcef90fe9519412f96f38">run</link>(&#32;<link linkend="_structlest_1_1test">test</link>&#32;<emphasis role="keyword">const</emphasis>&#32;(&amp;specification)[N],&#32;<link linkend="_namespacelest_1abadda50795fdee0bb844b52e73878699">texts</link>&#32;arguments,&#32;std::ostream&#32;&amp;&#32;os&#32;=&#32;std::cout&#32;)
1373 {
1374 &#32;&#32;&#32;&#32;std::cout.sync_with_stdio(&#32;<emphasis role="keyword">false</emphasis>&#32;);
1375 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(std::min)(&#32;<link linkend="_namespacelest_1a625193eb3dbfcef90fe9519412f96f38">run</link>(&#32;<link linkend="_namespacelest_1a549374a5f82f5cbab341c0513e037875">tests</link>(&#32;specification,&#32;specification&#32;+&#32;N&#32;),&#32;arguments,&#32;os&#32;&#32;),&#32;<link linkend="_namespacelest_1a087526c49c3b94040965055daf8be905">exit_max_value</link>&#32;);
1376 }
1377 
1378 <emphasis role="keyword">template</emphasis>&lt;&#32;std::<emphasis role="keywordtype">size_t</emphasis>&#32;N&#32;&gt;
1379 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespacelest_1a625193eb3dbfcef90fe9519412f96f38">run</link>(&#32;<link linkend="_structlest_1_1test">test</link>&#32;<emphasis role="keyword">const</emphasis>&#32;(&amp;specification)[N],&#32;std::ostream&#32;&amp;&#32;os&#32;=&#32;std::cout&#32;)
1380 {
1381 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelest_1a625193eb3dbfcef90fe9519412f96f38">run</link>(&#32;<link linkend="_namespacelest_1a549374a5f82f5cbab341c0513e037875">tests</link>(&#32;specification,&#32;specification&#32;+&#32;N&#32;),&#32;{},&#32;os&#32;&#32;);
1382 }
1383 
1384 <emphasis role="keyword">template</emphasis>&lt;&#32;std::<emphasis role="keywordtype">size_t</emphasis>&#32;N&#32;&gt;
1385 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespacelest_1a625193eb3dbfcef90fe9519412f96f38">run</link>(&#32;<link linkend="_structlest_1_1test">test</link>&#32;<emphasis role="keyword">const</emphasis>&#32;(&amp;specification)[N],&#32;<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;argv[],&#32;std::ostream&#32;&amp;&#32;os&#32;=&#32;std::cout&#32;)
1386 {
1387 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelest_1a625193eb3dbfcef90fe9519412f96f38">run</link>(&#32;<link linkend="_namespacelest_1a549374a5f82f5cbab341c0513e037875">tests</link>(&#32;specification,&#32;specification&#32;+&#32;N&#32;),&#32;<link linkend="_namespacelest_1abadda50795fdee0bb844b52e73878699">texts</link>(&#32;argv&#32;+&#32;1,&#32;argv&#32;+&#32;argc&#32;),&#32;os&#32;&#32;);
1388 }
1389 
1390 }&#32;<emphasis role="comment">//&#32;namespace&#32;lest</emphasis>
1391 
1392 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;LEST_LEST_HPP_INCLUDED</emphasis>
</programlisting></section>
