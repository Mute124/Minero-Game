<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_make__node_8h_source" xml:lang="en-US">
<title>make_node.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/include/toml++/impl/make_node.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//#&#32;This&#32;file&#32;is&#32;a&#32;part&#32;of&#32;toml++&#32;and&#32;is&#32;subject&#32;to&#32;the&#32;the&#32;terms&#32;of&#32;the&#32;MIT&#32;license.</emphasis>
2 <emphasis role="comment">//#&#32;Copyright&#32;(c)&#32;Mark&#32;Gillard&#32;&lt;mark.gillard@outlook.com.au&gt;</emphasis>
3 <emphasis role="comment">//#&#32;See&#32;https://github.com/marzer/tomlplusplus/blob/master/LICENSE&#32;for&#32;the&#32;full&#32;license&#32;text.</emphasis>
4 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;MIT</emphasis>
5 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
6 
7 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_forward__declarations_8h">forward_declarations.h</link>&quot;</emphasis>
8 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_header__start_8h">header_start.h</link>&quot;</emphasis>
9 
11 <link linkend="_preprocessor_8h_1ac9e12bb017879603274ac1765b85b872">TOML_IMPL_NAMESPACE_START</link>
12 {
13 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
14 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
15 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab61929848048873f2ffe3be0cfab436f">TOML_ATTR</link>(returns_nonnull)
16 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>*&#32;make_node_impl_specialized(T&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;[[maybe_unused]]&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>)
17 &#32;&#32;&#32;&#32;{
18 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>unwrapped_type&#32;=&#32;<link linkend="_toml_8hpp_1a0f4621a6694e07daea7a5c0282138524">unwrap_node&lt;remove_cvref&lt;T&gt;</link>&gt;;
19 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!std::is_same_v&lt;unwrapped_type,&#32;node&gt;);
20 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!is_node_view&lt;unwrapped_type&gt;);
21 
22 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;arrays&#32;+&#32;tables&#32;-&#32;invoke&#32;copy/move&#32;ctor</emphasis>
23 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_one_of&lt;unwrapped_type,&#32;array,&#32;table&gt;)
24 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
25 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;unwrapped_type(<emphasis role="keyword">static_cast&lt;</emphasis>T&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>));
26 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
27 
28 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;values</emphasis>
29 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
30 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
31 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>native_type&#32;=&#32;<link linkend="_toml_8hpp_1a360741865d63894a80dd761769957c4f">native_type_of&lt;unwrapped_type&gt;</link>;
32 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;&#32;=&#32;<link linkend="_classvalue">value&lt;native_type&gt;</link>;
33 
34 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type*&#32;out;
35 
36 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;copy/move&#32;ctor</emphasis>
37 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;remove_cvref&lt;T&gt;,&#32;value_type&gt;)
38 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
39 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;value_type{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;};
40 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
41 
42 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;creating&#32;from&#32;raw&#32;value</emphasis>
43 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
44 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
45 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!is_wide_string&lt;T&gt;&#32;||&#32;<link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link>,
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Instantiating&#32;values&#32;from&#32;wide-character&#32;strings&#32;is&#32;only&#32;&quot;</emphasis>
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;supported&#32;on&#32;Windows&#32;with&#32;TOML_ENABLE_WINDOWS_COMPAT&#32;enabled.&quot;</emphasis>);
48 
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(!is_losslessly_convertible_to_native&lt;unwrapped_type&gt;)
50 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;native_type,&#32;int64_t&gt;)
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(dependent_false&lt;T&gt;,
53 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Integral&#32;value&#32;initializers&#32;must&#32;be&#32;losslessly&#32;convertible&#32;to&#32;int64_t&quot;</emphasis>);
54 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;native_type,&#32;double&gt;)
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(dependent_false&lt;T&gt;,
56 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Floating-point&#32;value&#32;initializers&#32;must&#32;be&#32;losslessly&#32;convertible&#32;to&#32;double&quot;</emphasis>);
57 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dependent_false&lt;T&gt;,
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Value&#32;initializers&#32;must&#32;be&#32;losslessly&#32;convertible&#32;to&#32;one&#32;of&#32;the&#32;TOML&#32;value&#32;types&quot;</emphasis>);
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
62 
63 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_wide_string&lt;T&gt;)
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
65 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;value_type{&#32;narrow(<emphasis role="keyword">static_cast&lt;</emphasis>T&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>))&#32;};
67 <emphasis role="preprocessor">#else</emphasis>
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(dependent_false&lt;T&gt;,&#32;<emphasis role="stringliteral">&quot;Evaluated&#32;unreachable&#32;branch!&quot;</emphasis>);
69 <emphasis role="preprocessor">#endif</emphasis>
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;value_type{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;};
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
74 
75 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;!=&#32;<link linkend="_forward__declarations_8h_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out-&gt;flags(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>);
77 
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;out;
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
80 &#32;&#32;&#32;&#32;}
81 
82 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
83 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
84 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>*&#32;make_node_impl(T&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;=&#32;<link linkend="_forward__declarations_8h_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)
85 &#32;&#32;&#32;&#32;{
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>unwrapped_type&#32;=&#32;<link linkend="_toml_8hpp_1a0f4621a6694e07daea7a5c0282138524">unwrap_node&lt;remove_cvref&lt;T&gt;</link>&gt;;
87 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;unwrapped_type,&#32;node&gt;&#32;||&#32;is_node_view&lt;unwrapped_type&gt;)
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_node_view&lt;unwrapped_type&gt;)
90 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>toml::node*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">nullptr</emphasis>);
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
94 
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>).visit(
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>](<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;concrete)&#32;{
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>toml::node*<emphasis role="keyword">&gt;</emphasis>(
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;make_node_impl_specialized(<emphasis role="keyword">static_cast&lt;</emphasis>decltype(concrete)&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(concrete),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>));
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;make_node_impl_specialized(<emphasis role="keyword">static_cast&lt;</emphasis>T&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>);
103 &#32;&#32;&#32;&#32;}
104 
105 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
106 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
107 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>*&#32;make_node_impl(<link linkend="_structinserter">inserter&lt;T&gt;</link>&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;=&#32;<link linkend="_forward__declarations_8h_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)
108 &#32;&#32;&#32;&#32;{
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;make_node_impl(<emphasis role="keyword">static_cast&lt;</emphasis>T&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.value),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>);
110 &#32;&#32;&#32;&#32;}
111 
112 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;=&#32;(is_node&lt;T&gt;&#32;||&#32;is_node_view&lt;T&gt;&#32;||&#32;is_value&lt;T&gt;&#32;||&#32;can_partially_represent_native&lt;T&gt;)&gt;
113 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>inserted_type_of_
114 &#32;&#32;&#32;&#32;{
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;std::remove_pointer_t&lt;decltype(make_node_impl(std::declval&lt;T&gt;()))&gt;;
116 &#32;&#32;&#32;&#32;};
117 
118 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
119 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>inserted_type_of_&lt;<link linkend="_structinserter">inserter</link>&lt;T&gt;,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>&gt;
120 &#32;&#32;&#32;&#32;{
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;inserted_type_of_&lt;remove_cvref&lt;T&gt;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
122 &#32;&#32;&#32;&#32;};
123 
124 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
125 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>inserted_type_of_&lt;T,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>&gt;
126 &#32;&#32;&#32;&#32;{
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>;
128 &#32;&#32;&#32;&#32;};
129 
130 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
131 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
132 &#32;&#32;&#32;&#32;node_ptr&#32;<link linkend="_toml_8hpp_1a42b4a4b2210e5fb851ab38730940293c">make_node</link>(T&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;=&#32;<link linkend="_forward__declarations_8h_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)
133 &#32;&#32;&#32;&#32;{
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_ptr{&#32;make_node_impl(<emphasis role="keyword">static_cast&lt;</emphasis>T&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>)&#32;};
135 &#32;&#32;&#32;&#32;}
136 
137 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;T&gt;
138 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structemplaced__type__of__">emplaced_type_of_</link>
139 &#32;&#32;&#32;&#32;{
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>;
141 &#32;&#32;&#32;&#32;};
142 
143 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
144 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structemplaced__type__of__">emplaced_type_of_</link>&lt;T&gt;
145 &#32;&#32;&#32;&#32;{
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;std::conditional_t&lt;is_one_of&lt;T,&#32;node,&#32;node_view&lt;node&gt;,&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&gt;,
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>,
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;inserted_type_of_&lt;T&gt;::type&gt;;
149 &#32;&#32;&#32;&#32;};
150 
151 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
152 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structemplaced__type__of__">emplaced_type_of_</link>&lt;<link linkend="_structinserter">inserter</link>&lt;T&gt;&gt;
153 &#32;&#32;&#32;&#32;{
154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_structemplaced__type__of__">emplaced_type_of_&lt;remove_cvref&lt;T&gt;</link>&gt;<link linkend="_structemplaced__type__of___1ab43b9e348902f52d980d680811d93036">::type</link>;
155 &#32;&#32;&#32;&#32;};
156 
157 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;T&gt;
158 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_toml_8hpp_1a8340fb962cffc0c4b9f9995c0a698fd7">emplaced_type_of</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_structemplaced__type__of__">emplaced_type_of_&lt;remove_cvref&lt;T&gt;</link>...&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
159 }
160 <link linkend="_preprocessor_8h_1abec69dd25f1e4c1dfbdd288441864939">TOML_IMPL_NAMESPACE_END</link>;
162 
163 <link linkend="_make__node_8h_1a24e5c42f7e94b0b0f3212744874731e6">TOML_NAMESPACE_START</link>
164 {
177 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
178 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>inserted_type_of&#32;=&#32;<link linkend="_preprocessor_8h_1a1234ac91a810b3bd926ed6721ad1e44a">POXY_IMPLEMENTATION_DETAIL</link>(<emphasis role="keyword">typename</emphasis>&#32;impl::inserted_type_of_&lt;impl::remove_cvref&lt;T&gt;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>);
179 }
180 <link linkend="_make__node_8h_1afa65688cac47ce86021fef8d739f9fd8">TOML_NAMESPACE_END</link>;
181 
182 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_header__end_8h">header_end.h</link>&quot;</emphasis>
</programlisting></section>
